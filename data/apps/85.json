{
  "task_id": "APPS/85",
  "problem_id": 85,
  "prompt": "Polycarpus likes giving presents to Paraskevi. He has bought two chocolate bars, each of them has the shape of a segmented rectangle. The first bar is a_1 \u00d7 b_1 segments large and the second one is a_2 \u00d7 b_2 segments large.\n\nPolycarpus wants to give Paraskevi one of the bars at the lunch break and eat the other one himself. Besides, he wants to show that Polycarpus's mind and Paraskevi's beauty are equally matched, so the two bars must have the same number of squares.\n\nTo make the bars have the same number of squares, Polycarpus eats a little piece of chocolate each minute. Each minute he does the following:  he either breaks one bar exactly in half (vertically or horizontally) and eats exactly a half of the bar,  or he chips of exactly one third of a bar (vertically or horizontally) and eats exactly a third of the bar. \n\nIn the first case he is left with a half, of the bar and in the second case he is left with two thirds of the bar.\n\nBoth variants aren't always possible, and sometimes Polycarpus cannot chip off a half nor a third. For example, if the bar is 16 \u00d7 23, then Polycarpus can chip off a half, but not a third. If the bar is 20 \u00d7 18, then Polycarpus can chip off both a half and a third. If the bar is 5 \u00d7 7, then Polycarpus cannot chip off a half nor a third.\n\nWhat is the minimum number of minutes Polycarpus needs to make two bars consist of the same number of squares? Find not only the required minimum number of minutes, but also the possible sizes of the bars after the process.\n\n\n-----Input-----\n\nThe first line of the input contains integers a_1, b_1 (1 \u2264 a_1, b_1 \u2264 10^9) \u2014 the initial sizes of the first chocolate bar. The second line of the input contains integers a_2, b_2 (1 \u2264 a_2, b_2 \u2264 10^9) \u2014 the initial sizes of the second bar.\n\nYou can use the data of type int64 (in Pascal), long long (in \u0421++), long (in Java) to process large integers (exceeding 2^31 - 1).\n\n\n-----Output-----\n\nIn the first line print m \u2014 the sought minimum number of minutes. In the second and third line print the possible sizes of the bars after they are leveled in m minutes. Print the sizes using the format identical to the input format. Print the sizes (the numbers in the printed pairs) in any order. The second line must correspond to the first bar and the third line must correspond to the second bar. If there are multiple solutions, print any of them.\n\nIf there is no solution, print a single line with integer -1.\n\n\n-----Examples-----\nInput\n2 6\n2 3\n\nOutput\n1\n1 6\n2 3\n\nInput\n36 5\n10 16\n\nOutput\n3\n16 5\n5 16\n\nInput\n3 5\n2 1\n\nOutput\n-1",
  "solutions": "[\"a,b=list(map(int,input().split()))\\nc,d=list(map(int,input().split()))\\ne=a*b\\nf=c*d\\nn=0\\nwhile e%2==0:e=e//2\\nwhile e%3==0:e=e//3\\nwhile f%2==0:f=f//2\\nwhile f%3==0:f=f//3\\nif e!=f:print(\\\"-1\\\")\\nelse:\\n   i=0\\n   j=0\\n   e=a*b\\n   f=c*d\\n   while e%3==0:\\n      e=e//3\\n      i+=1\\n   while f%3==0:\\n      f=f//3\\n      j+=1\\n   k=i-j\\n   if k>0:\\n      for i in range(k):\\n         n+=1\\n         if a%3==0:a=a*2//3\\n         else:b=b*2//3\\n   else:\\n      for i in range(0-k):\\n         n+=1\\n         if c%3==0:c=c*2//3\\n         else:d=d*2//3\\n   e=a*b\\n   f=c*d\\n   i=0\\n   j=0\\n   while e%2==0:\\n      e=e//2\\n      i+=1\\n   while f%2==0:\\n      f=f//2\\n      j+=1\\n   k=i-j\\n   if k>0:\\n      for i in range(k):\\n         n+=1\\n         if a%2==0:a=a//2\\n         else:b=b//2\\n   else:\\n      for i in range(0-k):\\n         n+=1\\n         if c%2==0:c=c//2\\n         else:d=d//2\\n   print(n)\\n   print(a,b)\\n   print(c,d)\\n\", \"import sys\\n\\nsize = [0,0,0,0];\\nsize[0], size[1] = sys.stdin.readline().strip().split()\\nsize[2], size[3] = sys.stdin.readline().strip().split()\\nfor i in range(4):\\n    size[i] = int(size[i])\\n\\ntotalsize = [size[0]*size[1], size[2]*size[3]]\\nnum = [0, 0, 0, 0, 0, 0, 0, 0] #2s in first dimension of 1, 3s in first...\\nbase = [size[0], size[1], size[2], size[3]]\\nfor i in range(4):\\n    temp = size[i]\\n    while (temp%2 == 0):\\n        num[i*2] += 1\\n        temp /= 2\\nfor i in range(4):\\n    temp = size[i]\\n    while (temp%3 == 0):\\n        num[i*2+1] += 1\\n        temp /= 3\\nfor i in range(4):\\n    base[i] /= pow(2, num[2*i])\\n    base[i] /= pow(3, num[2*i+1])\\n\\ntotal = 0\\nif float(totalsize[0])/pow(2, num[0]+num[2])/pow(3, num[1]+num[3]) == float(totalsize[1])/pow(2, num[4]+num[6])/pow(3, num[5]+num[7]):\\n    wh = 0\\n    if num[5]+num[7] > num[1]+num[3]:\\n        wh = 1\\n    while (num[wh*4+1]+num[wh*4+3] > num[(wh+1)%2*4+1]+num[(wh+1)%2*4+3]):\\n        if num[wh*4+1] > 0:\\n            num[wh*4+1] -= 1\\n            num[wh*4] += 1\\n        else:\\n            num[wh*4+3] -= 1\\n            num[wh*4+2] += 1\\n        total += 1\\n    wh = 0\\n    if num[4]+num[6] > num[0]+num[2]:\\n        wh = 1\\n    while (num[wh*4]+num[wh*4+2] > num[(wh+1)%2*4]+num[(wh+1)%2*4+2]):\\n        if num[wh*4] > 0:\\n            num[wh*4] -= 1\\n        else:\\n            num[wh*4+2] -= 1\\n        total += 1\\n    print(total)\\n    print(int(base[0]*pow(2, num[0])*pow(3, num[1])), int(base[1]*pow(2, num[2])*pow(3, num[3])))\\n    print(int(base[2]*pow(2, num[4])*pow(3, num[5])), int(base[3]*pow(2, num[6])*pow(3, num[7])))\\nelse:\\n    print(-1)\\n\\n\", \"a1, b1 = map(int, input().split())\\na2, b2 = map(int, input().split())\\na10 = a1\\nb10 = b1\\na20 = a2\\nb20 = b2\\na_divs = list()\\nb_divs = list()\\n\\ndiv = 2\\nwhile a1 > 1 and div < a1 ** 0.5 + 1:\\n    while a1 % div == 0:\\n        a_divs.append(div)\\n        a1 //= div\\n    div += 1\\nif a1 > 1:\\n    a_divs.append(a1)\\n\\ndiv = 2\\nwhile b1 > 1 and div < b1 ** 0.5 + 1:\\n    while b1 % div == 0:\\n        a_divs.append(div)\\n        b1 //= div\\n    div += 1\\nif b1 > 1:\\n    a_divs.append(b1)\\n    \\ndiv = 2\\nwhile a2 > 1 and div < a2 ** 0.5 + 1:\\n    while a2 % div == 0:\\n        b_divs.append(div)\\n        a2 //= div\\n    div += 1\\nif a2 > 1:\\n    b_divs.append(a2)\\n\\ndiv = 2\\nwhile b2 > 1 and div < b2 ** 0.5 + 1:\\n    while b2 % div == 0:\\n        b_divs.append(div)\\n        b2 //= div\\n    div += 1\\nif b2 > 1:\\n    b_divs.append(b2)\\n\\na1 = a10\\nb1 = b10\\na2 = a20\\nb2 = b20\\n\\na_divs.sort()\\nb_divs.sort()\\n\\nna = len(a_divs)\\nnb = len(b_divs)\\na = 1\\nwhile na > 0 and a_divs[-1] > 3:\\n    a *= a_divs[-1]\\n    a_divs = a_divs[:-1]\\n    na -= 1\\n\\nb = 1\\nwhile nb > 0 and b_divs[-1] > 3:\\n    b *= b_divs[-1]\\n    b_divs = b_divs[:-1]\\n    nb -= 1\\n\\nif a != b:\\n    print(-1)\\nelse:\\n    ans = 0\\n    a_3 = a_divs.count(3)\\n    a_2 = a_divs.count(2)\\n    b_3 = b_divs.count(3)\\n    b_2 = b_divs.count(2)\\n    if a_3 > b_3:\\n        for i in range(a_3 - b_3):\\n            a_divs[a_divs.index(3)] = 2\\n            a_3 -= 1\\n            a_2 += 1\\n            ans += 1\\n            if a1 % 3 == 0:\\n                a1 //= 3\\n                a1 *= 2\\n            else:\\n                b1 //= 3\\n                b1 *= 2\\n    else:\\n        for i in range(b_3 - a_3):\\n            b_divs[b_divs.index(3)] = 2\\n            b_3 -= 1\\n            b_2 += 1\\n            ans += 1\\n            if a2 % 3 == 0:\\n                a2 //= 3\\n                a2 *= 2\\n            else:\\n                b2 //= 3\\n                b2 *= 2\\n    if a_2 > b_2:\\n        for i in range(a_2 - b_2):\\n            a_2 -= 1\\n            ans += 1\\n            if a1 % 2 == 0:\\n                a1 //= 2\\n            else:\\n                b1 //= 2\\n    else:\\n        for i in range(b_2 - a_2):\\n            b_2 -= 1\\n            ans += 1\\n            if a2 % 2 == 0:\\n                a2 //= 2\\n            else:\\n                b2 //= 2\\n    print(ans)\\n    print(a1, b1)\\n    print(a2, b2)\", \"a = [[0] * 2] * 2\\ns = [[[0] * 2, [0] * 2], [[0] * 2, [0] * 2]]\\nfor i in range(2):\\n    a[i] = list(map(int, input().split()))\\nfor i in range(2):\\n    for prime in range(2, 4):\\n        for j in range(2):\\n            t = a[i][j]\\n            while t % prime == 0:\\n                t //= prime\\n                s[i][prime - 2][j] += 1\\n\\nans = 0\\n\\nfor i in range(2):\\n    for prime in range(1, 2):\\n        mi = min(s[0][prime][0] + s[0][prime][1], s[1][prime][0] + s[1][prime][1]);\\n        j = 0\\n        while s[i][prime][0] + s[i][prime][1] > mi :\\n            if s[i][prime][j] == 0:\\n                j += 1\\n            a[i][j] //= prime + 2\\n            a[i][j] *= 2\\n            s[i][0][j] += 1\\n            s[i][prime][j] -= 1\\n            ans += 1\\n\\nfor i in range(2):\\n    for prime in range(1):\\n        mi = min(s[0][prime][0] + s[0][prime][1], s[1][prime][0] + s[1][prime][1]);\\n        j = 0\\n        while s[i][prime][0] + s[i][prime][1] > mi :\\n            if s[i][prime][j] == 0:\\n                j += 1\\n            a[i][j] //= prime + 2\\n            s[i][prime][j] -= 1\\n            ans += 1\\n\\n\\nif a[0][0] * a[0][1] != a[1][0] * a[1][1] :\\n    print(-1)\\nelse :\\n    print(ans)\\n    print(a[0][0], a[0][1])\\n    print(a[1][0], a[1][1])\\n\", \"def decomp(a):\\n    cnt2 = 0\\n    while a%2==0:\\n        a = a//2\\n        cnt2 += 1\\n    cnt3 = 0\\n    while a%3==0:\\n        a = a//3\\n        cnt3 += 1\\n    return a,cnt2,cnt3\\n\\ndef cut(a,b,d,p):\\n    while d>0:\\n        if a%p==0:\\n            a = (p-1)*a//p\\n            d = d-1\\n        elif b%p==0:\\n            b = (p-1)*b//p\\n            d = d-1\\n    return a,b\\na1,b1 = [int(s) for s in input().split()]\\na2,b2 = [int(s) for s in input().split()]\\n\\nu1,n2a1,n3a1 = decomp(a1)\\nv1,n2b1,n3b1 = decomp(b1)\\n\\nu2,n2a2,n3a2 = decomp(a2)\\nv2,n2b2,n3b2 = decomp(b2)\\n\\n##print(u1,v1,u1*v1)\\n##print(u2,v2,u2*v2)\\nif u1*v1!= u2*v2:\\n    print(-1)\\nelse:\\n    n = n2a1+n2b1\\n    m = n3a1+n3b1\\n    x = n2a2+n2b2\\n    y = n3a2+n3b2\\n\\n##    print(n,m,x,y)\\n    d3 = abs(m-y)\\n    if m>y:        \\n        n += d3        \\n        a1,b1 = cut(a1,b1,d3,3)\\n##        print(1,a1,b1)\\n    else:\\n        x += d3\\n        a2,b2 = cut(a2,b2,d3,3)\\n##        print(2,a2,b2)\\n    d2 = abs(n-x)\\n    if n>x:\\n        a1,b1 = cut(a1,b1,d2,2)\\n##        print(1,a1,b1)\\n    else:\\n        a2,b2 = cut(a2,b2,d2,2)\\n##        print(2,a2,b2)\\n\\n    m = d2+d3\\n\\n    print(m)\\n    print(a1,b1)\\n    print(a2,b2)\\n\\n    \\n    \\n\", \"#fin = open(\\\"input.txt\\\")\\n#a1, b1 = map(int, fin.readline().split())\\n#a2, b2 = map(int, fin.readline().split())\\na1, b1 = list(map(int, input().split()))\\na2, b2 = list(map(int, input().split()))\\nF, S = [a1, b1], [a2, b2]\\nA = dict()\\nB = dict()\\nA[2] = A[3] = B[2] = B[3] = 0\\ni = 2\\nwhile i ** 2 <= a1:\\n\\tif a1 % i == 0:\\n\\t\\tA[i] = 0\\n\\t\\twhile a1 % i == 0:\\n\\t\\t\\tA[i] += 1\\n\\t\\t\\ta1 //= i\\n\\ti += 1\\nif a1 > 1:\\n\\tif not a1 in A:\\n\\t\\tA[a1] = 0\\n\\tA[a1] += 1\\ni = 2\\nwhile i ** 2 <= b1:\\n\\tif b1 % i == 0:\\n\\t\\tif not i in A:\\n\\t\\t\\tA[i] = 0\\n\\t\\twhile b1 % i == 0:\\n\\t\\t\\tA[i] += 1\\n\\t\\t\\tb1 //= i\\n\\ti += 1\\nif b1 > 1:\\n\\tif not b1 in A:\\n\\t\\tA[b1] = 0\\n\\tA[b1] += 1\\ni = 2\\nwhile i ** 2 <= a2:\\n\\tif a2 % i == 0:\\n\\t\\tB[i] = 0\\n\\t\\twhile a2 % i == 0:\\n\\t\\t\\tB[i] += 1\\n\\t\\t\\ta2 //= i\\n\\ti += 1\\nif a2 > 1:\\n\\tif not a2 in B:\\n\\t\\tB[a2] = 0\\n\\tB[a2] += 1\\ni = 2\\nwhile i ** 2 <= b2:\\n\\tif b2 % i == 0:\\n\\t\\tif not i in B:\\n\\t\\t\\tB[i] = 0\\n\\t\\twhile b2 % i == 0:\\n\\t\\t\\tB[i] += 1\\n\\t\\t\\tb2 //= i\\n\\ti += 1\\nif b2 > 1:\\n\\tif not b2 in B:\\n\\t\\tB[b2] = 0\\n\\tB[b2] += 1\\nC1 = sorted([i for i in list(A.keys()) if not i in {2, 3}])\\nC2 = sorted([i for i in list(B.keys()) if not i in {2, 3}])\\nif C1 != C2:\\n\\tprint(-1)\\nelse:\\n\\tflag = True\\n\\tfor i in C1:\\n\\t\\tif (A[i] != B[i]):\\n\\t\\t\\tflag = False\\n\\tif not flag:\\n\\t\\tprint(-1)\\n\\telse:\\n\\t\\tMin = 0\\n\\t\\tx = A[3] - B[3]\\n\\t\\tMin += abs(x)\\n\\t\\tif x >= 0:\\n\\t\\t\\tA[2] += x\\n\\t\\t\\twhile x > 0 and F[0] % 3 == 0:\\n\\t\\t\\t\\tF[0] //= 3\\n\\t\\t\\t\\tF[0] *= 2\\n\\t\\t\\t\\tx -= 1\\n\\t\\t\\twhile x > 0 and F[1] % 3 == 0:\\n\\t\\t\\t\\tF[1] //= 3\\n\\t\\t\\t\\tF[1] *= 2\\n\\t\\t\\t\\tx -= 1\\n\\t\\telse:\\n\\t\\t\\tB[2] -= x\\n\\t\\t\\twhile x < 0 and S[0] % 3 == 0:\\n\\t\\t\\t\\tS[0] //= 3\\n\\t\\t\\t\\tS[0] *= 2\\n\\t\\t\\t\\tx += 1\\n\\t\\t\\twhile x < 0 and S[1] % 3 == 0:\\n\\t\\t\\t\\tS[1] //= 3\\n\\t\\t\\t\\tS[1] *= 2\\n\\t\\t\\t\\tx += 1\\n\\t\\tif x != 0:\\n\\t\\t\\tflag = False\\n\\t\\tx = A[2] - B[2]\\n\\t\\tMin += abs(x)\\n\\t\\tif x >= 0:\\n\\t\\t\\twhile x > 0 and F[0] % 2 == 0:\\n\\t\\t\\t\\tF[0] //= 2\\n\\t\\t\\t\\tx -= 1\\n\\t\\t\\twhile x > 0 and F[1] % 2 == 0:\\n\\t\\t\\t\\tF[1] //= 2\\n\\t\\t\\t\\tx -= 1\\n\\t\\telse:\\n\\t\\t\\twhile x < 0 and S[0] % 2 == 0:\\n\\t\\t\\t\\tS[0] //= 2\\n\\t\\t\\t\\tx += 1\\n\\t\\t\\twhile x < 0 and S[1] % 2 == 0:\\n\\t\\t\\t\\tS[1] //= 2\\n\\t\\t\\t\\tx += 1\\n\\t\\tif x != 0:\\n\\t\\t\\tflag = False\\n\\t\\tif flag:\\n\\t\\t\\tprint(Min)\\n\\t\\t\\tprint(*F)\\n\\t\\t\\tprint(*S)\\n\\t\\telse:\\n\\t\\t\\tprint(-1)\\n\", \"def fact(a, b) :\\n    ans = 0\\n    while a % b == 0 :\\n        ans += 1\\n        a //= b\\n    return ans\\n\\ndef fact_remove(a, b) :\\n    c = a*b\\n    while c % 2 == 0 : c //= 2\\n    while c % 3 == 0 : c //= 3\\n    return c\\n\\na1,b1 = list(map(int, input().split(' ')))\\na2,b2 = list(map(int, input().split(' ')))\\n\\nif fact_remove(a1, b1) != fact_remove(a2, b2) :\\n    print(-1)\\nelse :\\n    ans = [0, 0, 0, 0]\\n    c1 = a1*b1\\n    c2 = a2*b2\\n    k1 = fact(c1, 3)\\n    k2 = fact(c2, 3)\\n    \\n    if k1 > k2 :\\n        ans[1] = k1 - k2\\n        c1 /= 3**ans[1]\\n        c1 *= 2**ans[1]\\n    elif k1 < k2 :\\n        ans[3] = k2 - k1\\n        c2 /= 3**ans[3]\\n        c2 *= 2**ans[3]\\n\\n    k1 = fact(c1, 2)\\n    k2 = fact(c2, 2)\\n    if k1 > k2 :\\n        ans[0] = k1 - k2\\n        c1 /= 2**ans[0]\\n    elif k1 < k2 :\\n        ans[2] = k2 - k1\\n        c2 /= 2**ans[2]\\n    if c1 != c2 :\\n        print(-1)\\n    else :\\n        print(sum(ans))\\n        while a1%3 == 0 and ans[1] > 0 :\\n            a1 //= 3\\n            a1 *= 2\\n            ans[1] -= 1\\n        while a1%2 == 0 and ans[0] > 0 :\\n            a1 //= 2\\n            ans[0] -= 1\\n        while b1%3 == 0 and ans[1] > 0 :\\n            b1 //= 3\\n            b1 *= 2\\n            ans[1] -= 1\\n        while b1%2 == 0 and ans[0] > 0 :\\n            b1 //= 2\\n            ans[0] -= 1\\n        while a2%3 == 0 and ans[3] > 0 :\\n            a2 //= 3\\n            a2 *= 2\\n            ans[3] -= 1\\n        while a2%2 == 0 and ans[2] > 0 :\\n            a2 //= 2\\n            ans[2] -= 1\\n        while b2%3 == 0 and ans[3] > 0 :\\n            b2 //= 3\\n            b2 *= 2\\n            ans[3] -= 1\\n        while b2%2 == 0 and ans[2] > 0 :\\n            b2 //= 2\\n            ans[2] -= 1\\n        print(a1, b1)\\n        print(a2, b2)\\n\", \"__author__ = 'zhan'\\n\\nimport time\\n[a1, b1] = [int(i) for i in input().split()]\\n[a2, b2] = [int(i) for i in input().split()]\\n\\nt0 = time.time()\\nq1 = [[a1, b1, 0]]\\nq2 = [[a2, b2, 0]]\\ntested1 = []\\ntested2 = []\\ntested_total1 = []\\ntested_total2 = []\\n\\n\\ndef equal(t, q):\\n    lo = 0\\n    hi = len(q)\\n    while True:\\n        if lo >= hi:\\n            return False\\n        m = (lo + hi) // 2\\n        p = q[m]\\n        temp = p[0] * p[1]\\n        if t == temp:\\n            return [p[0], p[1], p[2]]\\n        if t < temp:\\n            lo = m + 1\\n        elif t > temp:\\n            hi = m\\n\\n\\ndef found(key, a):\\n    lo = 0\\n    hi = len(a)\\n    while True:\\n        if lo >= hi:\\n            return False\\n        m = (lo + hi) // 2\\n        p = a[m]\\n        if key[0] == p[0] and key[1] == p[1]:\\n            return True\\n        if key[0] < p[0] or key[0] == p[0] and key[1] < p[1]:\\n            lo = m + 1\\n        if key[0] > p[0] or key[0] == p[0] and key[1] > p[1]:\\n            hi = m\\n\\n\\nwhile True:\\n    if len(q1) > 0 and len(q2) > 0:\\n        total1 = q1[0][0] * q1[0][1]\\n        total2 = q2[0][0] * q2[0][1]\\n        if total1 > total2:\\n            ans = equal(total1, q2)\\n            if ans:\\n                print(str(ans[2] + q1[0][2]) + \\\"\\\\n\\\" + str(q1[0][0]) + \\\" \\\" + str(q1[0][1]) + \\\"\\\\n\\\" + str(ans[0]) + \\\" \\\" + str(ans[1]))\\n            else:\\n                if not(q1[0][0] & 1):\\n                    tt = [q1[0][0] // 2, q1[0][1], q1[0][2] + 1]\\n                    #if len(tested1) == 0 or (not found([tt[0], tt[1]], tested1)):\\n                    if (not [tt[0], tt[1]] in tested1) and (not tt[0]*tt[1] in tested_total1):\\n                        tested1.append([tt[0], tt[1]])\\n                        q1.append(tt)\\n                        tested_total1.append(tt[0]*tt[1])\\n                        an = equal(tt[0]*tt[1], q2)\\n                        if ans:\\n                            print(str(an[2] + tt[2]) + \\\"\\\\n\\\" + str(tt[0]) + \\\" \\\" + str(tt[1]) + \\\"\\\\n\\\" + str(an[0]) + \\\" \\\" + str(an[1]))\\n                if q1[0][0] % 3 == 0:\\n                    tt = [q1[0][0] // 3 * 2, q1[0][1], q1[0][2] + 1]\\n                    #if len(tested1) == 0 or (not found([tt[0], tt[1]], tested1)):\\n                    if (not [tt[0], tt[1]] in tested1) and (not tt[0]*tt[1] in tested_total1):\\n                        tested1.append([tt[0], tt[1]])\\n                        q1.append(tt)\\n                        tested_total1.append(tt[0]*tt[1])\\n                        an = equal(tt[0]*tt[1], q2)\\n                        if ans:\\n                            print(str(an[2] + tt[2]) + \\\"\\\\n\\\" + str(tt[0]) + \\\" \\\" + str(tt[1]) + \\\"\\\\n\\\" + str(an[0]) + \\\" \\\" + str(an[1]))\\n                if not(q1[0][1] & 1):\\n                    tt = [q1[0][0], q1[0][1] // 2, q1[0][2] + 1]\\n                    #if len(tested1) == 0 or (not found([tt[0], tt[1]], tested1)):\\n                    if (not [tt[0], tt[1]] in tested1) and (not tt[0]*tt[1] in tested_total1):\\n                        tested1.append([tt[0], tt[1]])\\n                        q1.append(tt)\\n                        tested_total1.append(tt[0]*tt[1])\\n                        an = equal(tt[0]*tt[1], q2)\\n                        if ans:\\n                            print(str(an[2] + tt[2]) + \\\"\\\\n\\\" + str(tt[0]) + \\\" \\\" + str(tt[1]) + \\\"\\\\n\\\" + str(an[0]) + \\\" \\\" + str(an[1]))\\n                if q1[0][1] % 3 == 0:\\n                    tt = [q1[0][0], q1[0][1] // 3 * 2, q1[0][2] + 1]\\n                    #if len(tested1) == 0 or (not found([tt[0], tt[1]], tested1)):\\n                    if (not [tt[0], tt[1]] in tested1) and (not tt[0]*tt[1] in tested_total1):\\n                        tested1.append([tt[0], tt[1]])\\n                        q1.append(tt)\\n                        tested_total1.append(tt[0]*tt[1])\\n                        an = equal(tt[0]*tt[1], q2)\\n                        if ans:\\n                            print(str(an[2] + tt[2]) + \\\"\\\\n\\\" + str(tt[0]) + \\\" \\\" + str(tt[1]) + \\\"\\\\n\\\" + str(an[0]) + \\\" \\\" + str(an[1]))\\n                q1.pop(0)\\n                q1.sort(key=lambda x: x[0]*x[1], reverse=True)\\n                #tested1.sort(key=lambda x: (x[0], x[1]), reverse=True)\\n\\n        elif total1 < total2:\\n            ans = equal(total2, q1)\\n            if ans:\\n                print(str(ans[2] + q2[0][2]) + \\\"\\\\n\\\" + str(ans[0]) + \\\" \\\" + str(ans[1]) + \\\"\\\\n\\\" + str(q2[0][0]) + \\\" \\\" + str(q2[0][1]))\\n                break\\n            else:\\n                if not(q2[0][0] & 1):\\n                    tt = [q2[0][0] // 2, q2[0][1], q2[0][2] + 1]\\n                    #if len(tested2) == 0 or (not found([tt[0], tt[1]], tested2)):\\n                    if (not [tt[0], tt[1]] in tested2) and (not tt[0]*tt[1] in tested_total2):\\n                        tested2.append([tt[0], tt[1]])\\n                        q2.append(tt)\\n                        tested_total2.append(tt[0]*tt[1])\\n                        an = equal(tt[0]*tt[1], q1)\\n                        if ans:\\n                            print(str(an[2] + tt[2]) + \\\"\\\\n\\\" + str(tt[0]) + \\\" \\\" + str(tt[1]) + \\\"\\\\n\\\" + str(an[0]) + \\\" \\\" + str(an[1]))\\n                if q2[0][0] % 3 == 0:\\n                    tt = [q2[0][0] // 3 * 2, q2[0][1], q2[0][2] + 1]\\n                    #if len(tested2) == 0 or (not found([tt[0], tt[1]], tested2)):\\n                    if (not [tt[0], tt[1]] in tested2) and (not tt[0]*tt[1] in tested_total2):\\n                        tested2.append([tt[0], tt[1]])\\n                        q2.append(tt)\\n                        tested_total2.append(tt[0]*tt[1])\\n                        an = equal(tt[0]*tt[1], q1)\\n                        if ans:\\n                            print(str(an[2] + tt[2]) + \\\"\\\\n\\\" + str(tt[0]) + \\\" \\\" + str(tt[1]) + \\\"\\\\n\\\" + str(an[0]) + \\\" \\\" + str(an[1]))\\n                if not(q2[0][1] & 1):\\n                    tt = [q2[0][0], q2[0][1] // 2, q2[0][2] + 1]\\n                    #if len(tested2) == 0 or (not found([tt[0], tt[1]], tested2)):\\n                    if (not [tt[0], tt[1]] in tested2) and (not tt[0]*tt[1] in tested_total2):\\n                        tested2.append([tt[0], tt[1]])\\n                        q2.append(tt)\\n                        tested_total2.append(tt[0]*tt[1])\\n                        an = equal(tt[0]*tt[1], q1)\\n                        if ans:\\n                            print(str(an[2] + tt[2]) + \\\"\\\\n\\\" + str(tt[0]) + \\\" \\\" + str(tt[1]) + \\\"\\\\n\\\" + str(an[0]) + \\\" \\\" + str(an[1]))\\n                if q2[0][1] % 3 == 0:\\n                    tt = [q2[0][0], q2[0][1] // 3 * 2, q2[0][2] + 1]\\n                    #if len(tested2) == 0 or (not found([tt[0], tt[1]], tested2)):\\n                    if (not [tt[0], tt[1]] in tested2) and (not tt[0]*tt[1] in tested_total2):\\n                        tested2.append([tt[0], tt[1]])\\n                        q2.append(tt)\\n                        tested_total2.append(tt[0]*tt[1])\\n                        an = equal(tt[0]*tt[1], q1)\\n                        if ans:\\n                            print(str(an[2] + tt[2]) + \\\"\\\\n\\\" + str(tt[0]) + \\\" \\\" + str(tt[1]) + \\\"\\\\n\\\" + str(an[0]) + \\\" \\\" + str(an[1]))\\n                q2.pop(0)\\n                q2.sort(key=lambda x: x[0]*x[1], reverse=True)\\n                #tested2.sort(key=lambda x: (x[0], x[1]), reverse=True)\\n\\n        else:\\n            print(str(q1[0][2] + q2[0][2]) + \\\"\\\\n\\\" + str(q1[0][0]) + \\\" \\\" + str(q1[0][1]) + \\\"\\\\n\\\" + str(q2[0][0]) + \\\" \\\" + str(q2[0][1]))\\n            break\\n    else:\\n        print(-1)\\n        break\\n\\nt1 = time.time()\\n#print(t1-t0)\\n\", \"__author__ = 'zhan'\\n\\n[a1, b1] = [int(i) for i in input().split()]\\n[a2, b2] = [int(i) for i in input().split()]\\n\\nq1 = [[a1, b1, 0]]\\nq2 = [[a2, b2, 0]]\\ntested_total1 = []\\ntested_total2 = []\\n\\n\\ndef equal(t, q):\\n    lo = 0\\n    hi = len(q)\\n    while True:\\n        if lo >= hi:\\n            return False\\n        m = (lo + hi) // 2\\n        p = q[m]\\n        temp = p[0] * p[1]\\n        if t == temp:\\n            return [p[0], p[1], p[2]]\\n        if t < temp:\\n            lo = m + 1\\n        elif t > temp:\\n            hi = m\\n\\n\\nwhile True:\\n    if len(q1) > 0 and len(q2) > 0:\\n        total1 = q1[0][0] * q1[0][1]\\n        total2 = q2[0][0] * q2[0][1]\\n        if total1 > total2:\\n            ans = equal(total1, q2)\\n            if ans:\\n                print(str(ans[2] + q1[0][2]) + \\\"\\\\n\\\" + str(q1[0][0]) + \\\" \\\" + str(q1[0][1]) + \\\"\\\\n\\\" + str(ans[0]) + \\\" \\\" + str(ans[1]))\\n            else:\\n                if not(q1[0][0] & 1):\\n                    tt = [q1[0][0] // 2, q1[0][1], q1[0][2] + 1]\\n                    if not tt[0]*tt[1] in tested_total1:\\n                        q1.append(tt)\\n                        tested_total1.append(tt[0]*tt[1])\\n                        #an = equal(tt[0]*tt[1], q2)\\n                        #if ans:\\n                        #    print(str(an[2] + tt[2]) + \\\"\\\\n\\\" + str(tt[0]) + \\\" \\\" + str(tt[1]) + \\\"\\\\n\\\" + str(an[0]) + \\\" \\\" + str(an[1]))\\n                if q1[0][0] % 3 == 0:\\n                    tt = [q1[0][0] // 3 * 2, q1[0][1], q1[0][2] + 1]\\n                    if not tt[0]*tt[1] in tested_total1:\\n                        q1.append(tt)\\n                        tested_total1.append(tt[0]*tt[1])\\n                        #an = equal(tt[0]*tt[1], q2)\\n                        #if ans:\\n                        #    print(str(an[2] + tt[2]) + \\\"\\\\n\\\" + str(tt[0]) + \\\" \\\" + str(tt[1]) + \\\"\\\\n\\\" + str(an[0]) + \\\" \\\" + str(an[1]))\\n                if not(q1[0][1] & 1):\\n                    tt = [q1[0][0], q1[0][1] // 2, q1[0][2] + 1]\\n                    if not tt[0]*tt[1] in tested_total1:\\n                        q1.append(tt)\\n                        tested_total1.append(tt[0]*tt[1])\\n                        #an = equal(tt[0]*tt[1], q2)\\n                        #if ans:\\n                        #    print(str(an[2] + tt[2]) + \\\"\\\\n\\\" + str(tt[0]) + \\\" \\\" + str(tt[1]) + \\\"\\\\n\\\" + str(an[0]) + \\\" \\\" + str(an[1]))\\n                if q1[0][1] % 3 == 0:\\n                    tt = [q1[0][0], q1[0][1] // 3 * 2, q1[0][2] + 1]\\n                    if not tt[0]*tt[1] in tested_total1:\\n                        q1.append(tt)\\n                        tested_total1.append(tt[0]*tt[1])\\n                        #an = equal(tt[0]*tt[1], q2)\\n                        #if ans:\\n                        #    print(str(an[2] + tt[2]) + \\\"\\\\n\\\" + str(tt[0]) + \\\" \\\" + str(tt[1]) + \\\"\\\\n\\\" + str(an[0]) + \\\" \\\" + str(an[1]))\\n                q1.pop(0)\\n                q1.sort(key=lambda x: x[0]*x[1], reverse=True)\\n\\n        elif total1 < total2:\\n            ans = equal(total2, q1)\\n            if ans:\\n                print(str(ans[2] + q2[0][2]) + \\\"\\\\n\\\" + str(ans[0]) + \\\" \\\" + str(ans[1]) + \\\"\\\\n\\\" + str(q2[0][0]) + \\\" \\\" + str(q2[0][1]))\\n                break\\n            else:\\n                if not(q2[0][0] & 1):\\n                    tt = [q2[0][0] // 2, q2[0][1], q2[0][2] + 1]\\n                    if not tt[0]*tt[1] in tested_total2:\\n                        q2.append(tt)\\n                        tested_total2.append(tt[0]*tt[1])\\n                        #an = equal(tt[0]*tt[1], q1)\\n                        #if ans:\\n                        #    print(str(an[2] + tt[2]) + \\\"\\\\n\\\" + str(tt[0]) + \\\" \\\" + str(tt[1]) + \\\"\\\\n\\\" + str(an[0]) + \\\" \\\" + str(an[1]))\\n                if q2[0][0] % 3 == 0:\\n                    tt = [q2[0][0] // 3 * 2, q2[0][1], q2[0][2] + 1]\\n                    if not tt[0]*tt[1] in tested_total2:\\n                        q2.append(tt)\\n                        tested_total2.append(tt[0]*tt[1])\\n                        #an = equal(tt[0]*tt[1], q1)\\n                        #if ans:\\n                        #    print(str(an[2] + tt[2]) + \\\"\\\\n\\\" + str(tt[0]) + \\\" \\\" + str(tt[1]) + \\\"\\\\n\\\" + str(an[0]) + \\\" \\\" + str(an[1]))\\n                if not(q2[0][1] & 1):\\n                    tt = [q2[0][0], q2[0][1] // 2, q2[0][2] + 1]\\n                    if not tt[0]*tt[1] in tested_total2:\\n                        q2.append(tt)\\n                        tested_total2.append(tt[0]*tt[1])\\n                        #an = equal(tt[0]*tt[1], q1)\\n                        #if ans:\\n                        #    print(str(an[2] + tt[2]) + \\\"\\\\n\\\" + str(tt[0]) + \\\" \\\" + str(tt[1]) + \\\"\\\\n\\\" + str(an[0]) + \\\" \\\" + str(an[1]))\\n                if q2[0][1] % 3 == 0:\\n                    tt = [q2[0][0], q2[0][1] // 3 * 2, q2[0][2] + 1]\\n                    if not tt[0]*tt[1] in tested_total2:\\n                        q2.append(tt)\\n                        tested_total2.append(tt[0]*tt[1])\\n                        #an = equal(tt[0]*tt[1], q1)\\n                        #if ans:\\n                        #    print(str(an[2] + tt[2]) + \\\"\\\\n\\\" + str(tt[0]) + \\\" \\\" + str(tt[1]) + \\\"\\\\n\\\" + str(an[0]) + \\\" \\\" + str(an[1]))\\n                q2.pop(0)\\n                q2.sort(key=lambda x: x[0]*x[1], reverse=True)\\n\\n        else:\\n            print(str(q1[0][2] + q2[0][2]) + \\\"\\\\n\\\" + str(q1[0][0]) + \\\" \\\" + str(q1[0][1]) + \\\"\\\\n\\\" + str(q2[0][0]) + \\\" \\\" + str(q2[0][1]))\\n            break\\n    else:\\n        print(-1)\\n        break\", \"__author__ = 'zhan'\\n\\n[a1, b1] = [int(i) for i in input().split()]\\n[a2, b2] = [int(i) for i in input().split()]\\n\\nq = [[[a1, b1, 0]], [[a2, b2, 0]]]\\ntotal = [0, 0]\\ntested = [[], []]\\n\\n\\ndef equal(t, q):\\n    lo = 0\\n    hi = len(q)\\n    while True:\\n        if lo >= hi:\\n            return False\\n        m = (lo + hi) // 2\\n        p = q[m]\\n        temp = p[0] * p[1]\\n        if t == temp:\\n            return [p[0], p[1], p[2]]\\n        if t < temp:\\n            lo = m + 1\\n        elif t > temp:\\n            hi = m\\n\\n\\ndef expand(i):\\n    ans = equal(total[i], q[(i+1)%2])\\n    if ans:\\n        print(\\n            str(ans[2] + q[i][0][2]) + \\\"\\\\n\\\" + str(q[i][0][0]) + \\\" \\\" + str(q[i][0][1]) + \\\"\\\\n\\\" + str(ans[0]) + \\\" \\\" + str(\\n                ans[1]))\\n    else:\\n        if not (q[i][0][0] & 1):\\n            tt = [q[i][0][0] // 2, q[i][0][1], q[i][0][2] + 1]\\n            if not tt[0] * tt[1] in tested[i]:\\n                q[i].append(tt)\\n                tested[i].append(tt[0] * tt[1])\\n        if q[i][0][0] % 3 == 0:\\n            tt = [q[i][0][0] // 3 * 2, q[i][0][1], q[i][0][2] + 1]\\n            if not tt[0] * tt[1] in tested[i]:\\n                q[i].append(tt)\\n                tested[i].append(tt[0] * tt[1])\\n        if not (q[i][0][1] & 1):\\n            tt = [q[i][0][0], q[i][0][1] // 2, q[i][0][2] + 1]\\n            if not tt[0] * tt[1] in tested[i]:\\n                q[i].append(tt)\\n                tested[i].append(tt[0] * tt[1])\\n        if q[i][0][1] % 3 == 0:\\n            tt = [q[i][0][0], q[i][0][1] // 3 * 2, q[i][0][2] + 1]\\n            if not tt[0] * tt[1] in tested[i]:\\n                q[i].append(tt)\\n                tested[i].append(tt[0] * tt[1])\\n        q[i].pop(0)\\n        q[i].sort(key=lambda x: x[0] * x[1], reverse=True)\\n\\n\\nwhile True:\\n    if len(q[0]) > 0 and len(q[1]) > 0:\\n        total[0] = q[0][0][0] * q[0][0][1]\\n        total[1] = q[1][0][0] * q[1][0][1]\\n        if total[0] > total[1]:\\n            expand(0)\\n        elif total[0] < total[1]:\\n            expand(1)\\n        else:\\n            print(str(q[0][0][2] + q[1][0][2]) + \\\"\\\\n\\\" + str(q[0][0][0]) + \\\" \\\" + str(q[0][0][1]) + \\\"\\\\n\\\" + str(\\n                q[1][0][0]) + \\\" \\\" + str(q[1][0][1]))\\n            break\\n    else:\\n        print(-1)\\n        break\", \"__author__ = 'zhan'\\n\\n[a1, b1] = [int(i) for i in input().split()]\\n[a2, b2] = [int(i) for i in input().split()]\\n\\nq = [[[a1, b1, 0]], [[a2, b2, 0]]]\\ntotal = [0, 0]\\ntested = [[], []]\\n\\n\\ndef expand(i):\\n    if not (q[i][0][0] & 1):\\n        tt = [q[i][0][0] // 2, q[i][0][1], q[i][0][2] + 1]\\n        if not tt[0] * tt[1] in tested[i]:\\n            q[i].append(tt)\\n            tested[i].append(tt[0] * tt[1])\\n    if q[i][0][0] % 3 == 0:\\n        tt = [q[i][0][0] // 3 * 2, q[i][0][1], q[i][0][2] + 1]\\n        if not tt[0] * tt[1] in tested[i]:\\n            q[i].append(tt)\\n            tested[i].append(tt[0] * tt[1])\\n    if not (q[i][0][1] & 1):\\n        tt = [q[i][0][0], q[i][0][1] // 2, q[i][0][2] + 1]\\n        if not tt[0] * tt[1] in tested[i]:\\n            q[i].append(tt)\\n            tested[i].append(tt[0] * tt[1])\\n    if q[i][0][1] % 3 == 0:\\n        tt = [q[i][0][0], q[i][0][1] // 3 * 2, q[i][0][2] + 1]\\n        if not tt[0] * tt[1] in tested[i]:\\n            q[i].append(tt)\\n            tested[i].append(tt[0] * tt[1])\\n    q[i].pop(0)\\n    q[i].sort(key=lambda x: x[0] * x[1], reverse=True)\\n\\n\\nwhile True:\\n    if len(q[0]) > 0 and len(q[1]) > 0:\\n        total[0] = q[0][0][0] * q[0][0][1]\\n        total[1] = q[1][0][0] * q[1][0][1]\\n        if total[0] > total[1]:\\n            expand(0)\\n        elif total[0] < total[1]:\\n            expand(1)\\n        else:\\n            print(str(q[0][0][2] + q[1][0][2]) + \\\"\\\\n\\\" + str(q[0][0][0]) + \\\" \\\" + str(q[0][0][1]) + \\\"\\\\n\\\" + str(\\n                q[1][0][0]) + \\\" \\\" + str(q[1][0][1]))\\n            break\\n    else:\\n        print(-1)\\n        break\", \"f = lambda: map(int, input().split())\\na, b = f()\\nc, d = f()\\n\\n\\ndef g(p, k):\\n    s = 1\\n    while k % p ** s == 0: s += 1\\n    return s - 1\\n\\n\\na3, b3, c3, d3 = g(3, a), g(3, b), g(3, c), g(3, d)\\na2, b2, c2, d2 = g(2, a), g(2, b), g(2, c), g(2, d)\\n\\nab3, cd3 = a3 + b3, c3 + d3\\nab2, cd2 = a2 + b2, c2 + d2\\n\\nab = a * b * pow(2, cd2) * pow(3, cd3)\\ncd = c * d * pow(2, ab2) * pow(3, ab3)\\nif ab != cd:\\n    print(-1)\\n    return\\n\\nk, s2, s3 = 1e9, 0, 0\\n\\nfor t3 in range(min(ab3, cd3) + 1):\\n    k3 = ab3 + cd3 - 2 * t3\\n    for t2 in range(min(ab2 + ab3, cd2 + cd3) - t3 + 1):\\n        k2 = k3 + ab2 + cd2 - 2 * t2\\n\\n        if k2 + k3 < k:\\n            k = k2 + k3\\n            s2, s3 = t2, t3\\n\\nt3 = ab3 - s3\\nwhile t3 and a % 3 == 0:\\n    a = 2 * a // 3\\n    t3 -= 1\\nwhile t3 and b % 3 == 0:\\n    b = 2 * b // 3\\n    t3 -= 1\\nt2 = ab3 - s3 + ab2 - s2\\nwhile t2 and a % 2 == 0:\\n    a = a // 2\\n    t2 -= 1\\nwhile t2 and b % 2 == 0:\\n    b = b // 2\\n    t2 -= 1\\nt3 = cd3 - s3\\nwhile t3 and c % 3 == 0:\\n    c = 2 * c // 3\\n    t3 -= 1\\nwhile t3 and d % 3 == 0:\\n    d = 2 * d // 3\\n    t3 -= 1\\nt2 = cd3 - s3 + cd2 - s2\\nwhile t2 and c % 2 == 0:\\n    c = c // 2\\n    t2 -= 1\\nwhile t2 and d % 2 == 0:\\n    d = d // 2\\n    t2 -= 1\\n\\nprint(k)\\nprint(a, b)\\nprint(c, d)\", \"import sys\\n\\na1,b1 = map(int, input().split())\\na2,b2 = map(int, input().split())\\na, b = a1 * b1, a2 * b2\\ncnta2, cntb2, cnta3, cntb3 = 0, 0, 0, 0\\nans = 0\\nwhile a%2==0:\\n\\ta //= 2\\n\\tcnta2 += 1\\nwhile a%3==0:\\n\\ta //= 3\\n\\tcnta3 += 1\\n\\nwhile b%2==0:\\n\\tb //= 2\\n\\tcntb2 += 1\\nwhile b%3==0:\\n\\tb //= 3\\n\\tcntb3 += 1\\n\\nif a != b:\\n\\tprint(-1)\\n\\treturn\\n\\ndif = cnta3 - cntb3\\nif dif > 0:\\n  for i in range(dif):\\n     ans += 1\\n     if a1 % 3 == 0:\\n     \\ta1 = a1 * 2 // 3\\n     else:\\n     \\tb1 = b1 * 2 // 3\\nelse:\\n  for i in range(-dif):\\n     ans += 1 \\n     if a2 % 3 == 0:\\n     \\ta2 = a2 * 2 // 3\\n     else:\\n     \\tb2 = b2 * 2 // 3\\n\\na, b = a1 * b1, a2 * b2\\n\\ncnta, cntb = 0, 0\\n\\nwhile a % 2 == 0:\\n  a = a // 2\\n  cnta += 1\\n\\nwhile b % 2 == 0:\\n  b = b // 2\\n  cntb += 1\\n\\ndif = cnta - cntb\\nif dif > 0:\\n  for i in range(dif):\\n     ans += 1\\n     if a1 % 2 == 0:\\n     \\ta1 = a1 // 2\\n     else:\\n     \\tb1 = b1 // 2\\nelse:\\n  for i in range(-dif):\\n     ans += 1\\n     if a2 % 2 == 0:\\n     \\ta2 = a2 // 2\\n     else:\\n     \\tb2 = b2 // 2\\n\\nprint(ans)\\nprint(str(a1) + ' ' + str(b1))\\nprint(str(a2) + ' ' + str(b2))\", \"def dfs(x, d, g):\\n    g[x] = set()\\n    d[x] = 1\\n    \\n    if x % 2 == 0:\\n        next_ = x // 2\\n        \\n        if next_ not in d:\\n            g[x].add(next_)\\n            dfs(next_,  d, g)\\n        elif next_ not in g[x]: \\n            g[x].add(next_)\\n            \\n    if x % 3 == 0:\\n        next_ = (x // 3) * 2\\n        \\n        if next_ not in d:\\n            g[x].add(next_)\\n            dfs(next_,  d, g)\\n        elif next_ not in g[x]: \\n            g[x].add(next_)\\n            \\ndef bfs(x, g):\\n    def add_prev(prev, cur_, next_):\\n        if next_ * 2 == cur_:\\n            prev[next_] = [cur_, 2]\\n        else:\\n            prev[next_] = [cur_, 3]\\n        \\n    min_     = {}\\n    s        = [x]\\n    min_[x]  = 0\\n    i= 0\\n    \\n    # [num, type]\\n    prev = {}\\n    \\n    while i < len(s):\\n        cur = s[i]\\n        for next_ in g[cur]:\\n            if next_ not in min_:\\n                min_[next_] = min_[cur] + 1\\n                s.append(next_)\\n                add_prev(prev, cur, next_)\\n                \\n            elif min_[cur] + 1 < min_[next_]:\\n                min_[next_] = min_[cur] + 1\\n                add_prev(prev, cur, next_)\\n        i+=1\\n    return min_, prev    \\n\\ndef find(a1, b1, a2, b2, min1, prev1, min2, prev2):\\n    def process(a, b, type_):\\n        if type_ == 2:\\n            if a % 2 == 0:\\n                return a // 2, b\\n            else:\\n                return a, b // 2\\n        else:\\n            if a % 3 == 0:\\n                return (a // 3)*2, b\\n            else:\\n                return a, (b // 3)*2\\n        \\n    x1 = a1*b1\\n    x2 = a2*b2 \\n    min_ = float('inf')\\n    num  = None\\n    \\n    for x in min1:\\n        if x in min2:\\n            if min_ > min1[x] + min2[x]:\\n                min_ = min1[x] + min2[x]\\n                num  = x\\n    \\n    if num == None:\\n        return -1, None, None\\n    \\n    cur1 = num\\n    arr1 = []\\n    while cur1 != x1:\\n        prev_, type_ = prev1[cur1] \\n        arr1.append(type_)\\n        cur1 = prev_\\n        \\n    cur2 = num\\n    arr2 = []\\n    while cur2 != x2:\\n        prev_, type_ = prev2[cur2] \\n        arr2.append(type_)\\n        cur2 = prev_\\n        \\n    for type_ in arr1[::-1]:\\n        a1, b1 = process(a1, b1, type_)\\n        \\n    for type_ in arr2[::-1]:\\n        a2, b2 = process(a2, b2, type_)   \\n    \\n    return min_, [a1, b1], [a2, b2]    \\n\\na1, b1 = map(int, input().split())\\na2, b2 = map(int, input().split())\\n\\nd1, g1, d2, g2 = {}, {}, {}, {}\\n\\ndfs(a1*b1, d1, g1)\\ndfs(a2*b2, d2, g2)\\nmin1, prev1 = bfs(a1*b1, g1)\\nmin2, prev2 = bfs(a2*b2, g2)\\nans, arr1, arr2 = find(a1, b1, a2, b2, min1, prev1, min2, prev2)\\n\\nif ans == -1:\\n    print(-1)\\nelse:\\n    print(ans)\\n    print(str(arr1[0])+' '+str(arr1[1]))\\n    print(str(arr2[0])+' '+str(arr2[1]))\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 6\\n2 3\\n\",\n    \"36 5\\n10 16\\n\",\n    \"3 5\\n2 1\\n\",\n    \"36 5\\n10 12\\n\",\n    \"1 1\\n1 1\\n\",\n    \"2 1\\n1 2\\n\",\n    \"3 6\\n2 1\\n\",\n    \"1 27\\n1 1\\n\",\n    \"2 5\\n20 2\\n\",\n    \"40 5\\n150 36\\n\",\n    \"60 1080\\n60 45\\n\",\n    \"2160 3240\\n7200 384\\n\",\n    \"51840 900\\n48 27000\\n\",\n    \"100 200\\n7200 25\\n\",\n    \"112500 96\\n375 2400\\n\",\n    \"432000 3000\\n4800 10000\\n\",\n    \"7 1\\n1 7\\n\",\n    \"12 39\\n13 3\\n\",\n    \"906992640 544195584\\n906992640 725594112\\n\",\n    \"859963392 644972544\\n725594112 967458816\\n\",\n    \"644972544 886837248\\n725594112 886837248\\n\",\n    \"243 216\\n6 1\\n\",\n    \"400 2500000\\n1000000 1000\\n\",\n    \"10000 100000\\n2 1000000000\\n\",\n    \"25000000 80\\n128 23437500\\n\",\n    \"62500000 96\\n256 7812500\\n\",\n    \"1280 2343750\\n25600 312500\\n\",\n    \"15625 1152000\\n1562500 5760\\n\",\n    \"9000000 12000\\n6250 480000\\n\",\n    \"1920 50000000\\n78125 25600\\n\",\n    \"5625000 19200\\n1125000 96000\\n\",\n    \"45 800000000\\n288000000 500\\n\",\n    \"750000000 725594112\\n716636160 675000000\\n\",\n    \"10000079 1\\n10000079 1\\n\",\n    \"1 30000237\\n10000079 1\\n\",\n    \"10000079 1\\n6 10000079\\n\",\n    \"3 540004266\\n60000474 27\\n\",\n    \"720005688 725594112\\n816293376 960007584\\n\",\n    \"859963392 816293376\\n967458816 859963392\\n\",\n    \"644972544 816293376\\n544195584 816293376\\n\",\n    \"99999989 1\\n1 99999989\\n\",\n    \"99999989 9\\n1 99999989\\n\",\n    \"199999978 2\\n599999934 3\\n\",\n    \"544195584 899999901\\n599999934 967458816\\n\",\n    \"8 8\\n1 1\\n\",\n    \"31 15\\n36 25\\n\",\n    \"68 34\\n84 78\\n\",\n    \"894 197\\n325 232\\n\",\n    \"41764 97259\\n54586 18013\\n\",\n    \"333625 453145\\n800800 907251\\n\",\n    \"4394826 2233224\\n609367 3364334\\n\",\n    \"13350712 76770926\\n61331309 8735000\\n\",\n    \"844212449 863672439\\n410956265 742052168\\n\",\n    \"22295873 586964387\\n4736819 472714349\\n\",\n    \"905412001 865545936\\n598517372 498343827\\n\",\n    \"378462721 734062076\\n42554822 374230201\\n\",\n    \"261578849 307610920\\n636335376 399859678\\n\",\n    \"144694977 881159765\\n80372825 425489156\\n\",\n    \"35135676 3879\\n841304242 18\\n\",\n    \"57946752 619939008\\n114816 331164\\n\",\n    \"171 162\\n9 57\\n\",\n    \"2592 4950\\n60 2970\\n\",\n    \"90315 96\\n48 30105\\n\",\n    \"5832 45693720\\n10154160 108\\n\",\n    \"5832 45693720\\n10154160 108\\n\",\n    \"1 911953772\\n39650164 23\\n\",\n    \"3 707552887\\n6 707552887\\n\",\n    \"806410824 11\\n2 369604961\\n\",\n    \"144 980783074\\n24786 461544976\\n\",\n    \"614363206 2\\n2 307181603\\n\",\n    \"1336608 1650\\n18711 3182400\\n\",\n    \"472586400 448\\n1050192 8400\\n\",\n    \"497664 367567200\\n3304800 55351296\\n\",\n    \"916090560 291133440\\n628176384 424569600\\n\",\n    \"556792704 718502400\\n640493568 832809600\\n\",\n    \"320 162162\\n8736 1980\\n\",\n    \"25740 6048\\n38918880 81\\n\",\n    \"90720 35582976\\n294840 9237888\\n\",\n    \"870912 1924560\\n544195584 35925120\\n\",\n    \"846526464 537477120\\n806215680 952342272\\n\",\n    \"862202880 967458816\\n595213920 886837248\\n\",\n    \"564350976 623557440\\n775982592 604661760\\n\",\n    \"775982592 716636160\\n906992640 919683072\\n\",\n    \"806215680 940584960\\n627056640 537477120\\n\",\n    \"537477120 560431872\\n627056640 720555264\\n\",\n    \"564350976 906992640\\n836075520 816293376\\n\",\n    \"591224832 529079040\\n574801920 725594112\\n\",\n    \"816293376 881798400\\n612220032 783820800\\n\",\n    \"862202880 764411904\\n997691904 836075520\\n\",\n    \"766402560 725594112\\n680244480 689762304\\n\",\n    \"766402560 816293376\\n680244480 581986944\\n\",\n    \"952342272 554273280\\n646652160 725594112\\n\",\n    \"739031040 564350976\\n644972544 862202880\\n\",\n    \"831409920 564350976\\n574801920 725594112\\n\",\n    \"1 1\\n774840978 774840978\\n\",\n    \"725594112 725594112\\n1 1\\n\",\n    \"1 1\\n536870912 536870912\\n\",\n    \"573308928 573308928\\n1 1\\n\",\n    \"1 1\\n918330048 918330048\\n\",\n    \"1 1\\n688747536 688747536\\n\",\n    \"536870912 536870912\\n387420489 387420489\\n\",\n    \"967458816 967458816\\n967458816 967458816\\n\",\n    \"1 1\\n65536 65536\\n\",\n    \"387420489 387420489\\n536870912 536870912\\n\",\n    \"999999937 999999937\\n999999937 999999937\\n\",\n    \"387420489 774840978\\n774840978 645700815\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n1 6\\n2 3\\n\",\n    \"3\\n16 5\\n5 16\\n\",\n    \"-1\\n\",\n    \"1\\n24 5\\n10 12\\n\",\n    \"0\\n1 1\\n1 1\\n\",\n    \"0\\n2 1\\n1 2\\n\",\n    \"4\\n1 2\\n2 1\\n\",\n    \"6\\n1 1\\n1 1\\n\",\n    \"2\\n2 5\\n5 2\\n\",\n    \"6\\n40 5\\n25 8\\n\",\n    \"5\\n5 540\\n60 45\\n\",\n    \"5\\n640 2160\\n3600 384\\n\",\n    \"6\\n1440 900\\n48 27000\\n\",\n    \"4\\n100 200\\n800 25\\n\",\n    \"4\\n9375 96\\n375 2400\\n\",\n    \"6\\n16000 3000\\n4800 10000\\n\",\n    \"0\\n7 1\\n1 7\\n\",\n    \"4\\n1 39\\n13 3\\n\",\n    \"2\\n604661760 544195584\\n453496320 725594112\\n\",\n    \"6\\n214990848 644972544\\n143327232 967458816\\n\",\n    \"3\\n322486272 886837248\\n322486272 886837248\\n\",\n    \"16\\n1 6\\n6 1\\n\",\n    \"0\\n400 2500000\\n1000000 1000\\n\",\n    \"1\\n10000 100000\\n1 1000000000\\n\",\n    \"1\\n25000000 80\\n128 15625000\\n\",\n    \"2\\n31250000 64\\n256 7812500\\n\",\n    \"3\\n1280 1562500\\n6400 312500\\n\",\n    \"1\\n15625 576000\\n1562500 5760\\n\",\n    \"6\\n250000 12000\\n6250 480000\\n\",\n    \"6\\n40 50000000\\n78125 25600\\n\",\n    \"0\\n5625000 19200\\n1125000 96000\\n\",\n    \"2\\n45 800000000\\n72000000 500\\n\",\n    \"3\\n500000000 483729408\\n358318080 675000000\\n\",\n    \"0\\n10000079 1\\n10000079 1\\n\",\n    \"2\\n1 10000079\\n10000079 1\\n\",\n    \"3\\n10000079 1\\n1 10000079\\n\",\n    \"0\\n3 540004266\\n60000474 27\\n\",\n    \"1\\n720005688 725594112\\n544195584 960007584\\n\",\n    \"5\\n254803968 816293376\\n241864704 859963392\\n\",\n    \"5\\n161243136 816293376\\n161243136 816293376\\n\",\n    \"0\\n99999989 1\\n1 99999989\\n\",\n    \"4\\n99999989 1\\n1 99999989\\n\",\n    \"3\\n199999978 2\\n199999978 2\\n\",\n    \"5\\n161243136 899999901\\n299999967 483729408\\n\",\n    \"6\\n1 1\\n1 1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"4\\n3903964 3879\\n841304242 18\\n\",\n    \"24\\n92 413292672\\n114816 331164\\n\",\n    \"7\\n19 27\\n9 57\\n\",\n    \"7\\n36 4950\\n60 2970\\n\",\n    \"3\\n30105 48\\n48 30105\\n\",\n    \"10\\n24 45693720\\n10154160 108\\n\",\n    \"10\\n24 45693720\\n10154160 108\\n\",\n    \"0\\n1 911953772\\n39650164 23\\n\",\n    \"1\\n3 707552887\\n3 707552887\\n\",\n    \"4\\n67200902 11\\n2 369604961\\n\",\n    \"8\\n144 980783074\\n306 461544976\\n\",\n    \"1\\n307181603 2\\n2 307181603\\n\",\n    \"6\\n1336608 1650\\n693 3182400\\n\",\n    \"5\\n19691100 448\\n1050192 8400\\n\",\n    \"0\\n497664 367567200\\n3304800 55351296\\n\",\n    \"0\\n916090560 291133440\\n628176384 424569600\\n\",\n    \"2\\n371195136 718502400\\n320246784 832809600\\n\",\n    \"2\\n160 108108\\n8736 1980\\n\",\n    \"6\\n25740 6048\\n1921920 81\\n\",\n    \"5\\n22680 35582976\\n87360 9237888\\n\",\n    \"16\\n870912 1924560\\n46656 35925120\\n\",\n    \"4\\n423263232 537477120\\n238878720 952342272\\n\",\n    \"7\\n107775360 967458816\\n117573120 886837248\\n\",\n    \"2\\n376233984 623557440\\n387991296 604661760\\n\",\n    \"1\\n775982592 716636160\\n604661760 919683072\\n\",\n    \"2\\n358318080 940584960\\n627056640 537477120\\n\",\n    \"1\\n537477120 560431872\\n418037760 720555264\\n\",\n    \"2\\n376233984 906992640\\n418037760 816293376\\n\",\n    \"2\\n394149888 529079040\\n287400960 725594112\\n\",\n    \"1\\n544195584 881798400\\n612220032 783820800\\n\",\n    \"6\\n215550720 764411904\\n197074944 836075520\\n\",\n    \"5\\n191600640 725594112\\n201553920 689762304\\n\",\n    \"7\\n95800320 816293376\\n134369280 581986944\\n\",\n    \"3\\n423263232 554273280\\n323326080 725594112\\n\",\n    \"2\\n492687360 564350976\\n322486272 862202880\\n\",\n    \"3\\n369515520 564350976\\n287400960 725594112\\n\",\n    \"74\\n1 1\\n1 1\\n\",\n    \"68\\n1 1\\n1 1\\n\",\n    \"58\\n1 1\\n1 1\\n\",\n    \"64\\n1 1\\n1 1\\n\",\n    \"72\\n1 1\\n1 1\\n\",\n    \"72\\n1 1\\n1 1\\n\",\n    \"58\\n128 536870912\\n262144 262144\\n\",\n    \"0\\n967458816 967458816\\n967458816 967458816\\n\",\n    \"32\\n1 1\\n1 1\\n\",\n    \"58\\n262144 262144\\n128 536870912\\n\",\n    \"0\\n999999937 999999937\\n999999937 999999937\\n\",\n    \"-1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/490/D",
  "starter_code": ""
}