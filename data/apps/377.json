{
  "task_id": "APPS/377",
  "problem_id": 377,
  "prompt": "The three friends, Kuro, Shiro, and Katie, met up again! It's time for a party...\n\nWhat the cats do when they unite? Right, they have a party. Since they wanted to have as much fun as possible, they invited all their friends. Now $n$ cats are at the party, sitting in a circle and eating soup. The rules are simple: anyone having finished their soup leaves the circle.\n\nKatie suddenly notices that whenever a cat leaves, the place where she was sitting becomes an empty space, which means the circle is divided into smaller continuous groups of cats sitting next to each other. At the moment Katie observes, there are $m$ cats who left the circle. This raises a question for Katie: what is the maximum possible number of groups the circle is divided into at the moment?\n\nCould you help her with this curiosity?\n\nYou can see the examples and their descriptions with pictures in the \"Note\" section.\n\n\n-----Input-----\n\nThe only line contains two integers $n$ and $m$ ($2 \\leq n \\leq 1000$, $0 \\leq m \\leq n$)\u00a0\u2014 the initial number of cats at the party and the number of cats who left the circle at the moment Katie observes, respectively.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum number of groups of cats at the moment Katie observes.\n\n\n-----Examples-----\nInput\n7 4\n\nOutput\n3\n\nInput\n6 2\n\nOutput\n2\n\nInput\n3 0\n\nOutput\n1\n\nInput\n2 2\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example, originally there are $7$ cats sitting as shown below, creating a single group: [Image] \n\nAt the observed moment, $4$ cats have left the table. Suppose the cats $2$, $3$, $5$ and $7$ have left, then there are $3$ groups remaining. It is possible to show that it is the maximum possible number of groups remaining. [Image] \n\nIn the second example, there are $6$ cats sitting as shown below: [Image] \n\nAt the observed moment, $2$ cats have left the table. Suppose the cats numbered $3$ and $6$ left, then there will be $2$ groups remaining ($\\{1, 2\\}$ and $\\{4, 5\\}$). It is impossible to have more than $2$ groups of cats remaining. [Image] \n\nIn the third example, no cats have left, so there is $1$ group consisting of all cats.\n\nIn the fourth example, all cats have left the circle, so there are $0$ groups.",
  "solutions": "[\"n, m = map(int, input().split())\\nif m <= 1:\\n    print(1)\\n    return\\nprint(min(m, n - m))\", \"n,m=map(int,input().split())\\nif m==0:\\n    print(1)\\nelse :\\n    print(min(n-m,m))\", \"n, m = list(map(int, input().split()))\\nprint(min(n - m, max(1, m)))\\n\", \"n,m=map(int,input().split())\\nif m==0:\\n    m=1\\nprint(min(n-m,m))\", \"[n, m] = [int(i) for i in input().split()]\\nif m == n:\\n\\tprint (0)\\nelif m == 0:\\n\\tprint (1)\\nelif m * 2 <= n:\\n\\tprint(m)\\nelse:\\n\\tprint(n - m)\", \"n, m = list(map(int, input().split()))\\nif m == 0:\\n    print(1)\\nelif m <= n // 2:\\n    print(m)\\nelse:\\n    print(n - m)\\n\", \"def main():\\n    from sys import stdin, stdout\\n\\n    def read():\\n        return stdin.readline().rstrip('\\\\n')\\n\\n    def read_array(sep=None, maxsplit=-1):\\n        return read().split(sep, maxsplit)\\n\\n    def read_int():\\n        return int(read())\\n\\n    def read_int_array(sep=None, maxsplit=-1):\\n        return [int(a) for a in read_array(sep, maxsplit)]\\n\\n    def write(*args, **kwargs):\\n        sep = kwargs.get('sep', ' ')\\n        end = kwargs.get('end', '\\\\n')\\n        stdout.write(sep.join(str(a) for a in args) + end)\\n\\n    def write_array(array, **kwargs):\\n        sep = kwargs.get('sep', ' ')\\n        end = kwargs.get('end', '\\\\n')\\n        stdout.write(sep.join(str(a) for a in array) + end)\\n\\n    n, m = read_int_array()\\n    if m < 2:\\n        write(1)\\n        return\\n    left = n - m\\n    write(min(left, m))\\n\\n\\nmain()\\n\", \"n, m = map(int, input().split())\\nif m == n:\\n    print(0)\\nelif m == n - 1:\\n    print(1)\\nelif m == 0:\\n    print(1)\\nelse:\\n    print(min(n - m, m))\", \"a, b = map(int, input().split())\\n\\nif b > a / 2:\\n\\tprint(a - b)\\nelif b < 1:\\n\\tprint(1)\\nelse:\\n\\tprint(b)\", \"def main():\\n    n, m = map(int, input().split())\\n    if 2 * m < n:\\n        if m == 0:\\n            print(1)\\n        else:\\n            print(m)\\n    else:\\n        print(n - m)\\n    return 0\\n\\nmain()\", \"n, m = list(map(int, input().split()))\\nif m <= n / 2:\\n    print(max(m, 1))\\nelse:\\n    print(n - m)\\n\", \"kk=lambda:map(int,input().split())\\nn,m=kk()\\nprint(n-m if m*2>n else max(m,1))\", \"from collections import defaultdict as dd\\nimport math\\ndef nn():\\n\\treturn int(input())\\n\\ndef li():\\n\\treturn list(input())\\n\\ndef mi():\\n\\treturn list(map(int, input().split()))\\n\\ndef lm():\\n\\treturn list(map(int, input().split()))\\n\\n\\n\\nn, m=mi()\\n\\n\\nlowend=max(1, m)\\n\\nhighend=n-m\\n\\nprint(min(lowend,highend))\\n\", \"import math\\nimport bisect\\nimport heapq\\nfrom collections import defaultdict\\n\\n\\ndef egcd(a, b):\\n    if a == 0:\\n        return (b, 0, 1)\\n    else:\\n        g, x, y = egcd(b % a, a)\\n        return (g, y - (b // a) * x, x)\\n\\n\\ndef mulinv(b, n):\\n    g, x, _ = egcd(b, n)\\n    if g == 1:\\n        return x % n\\n\\n\\n\\ndef isprime(n):\\n    for d in range(2, int(math.sqrt(n))+1):\\n        if n % d == 0:\\n            return False\\n    return True\\n\\n\\ndef argsort(ls):\\n    return sorted(range(len(ls)), key=ls.__getitem__)\\n\\n\\ndef f(p=0):\\n    if p == 1:\\n        return map(int, input().split())\\n    elif p == 2:\\n        return list(map(int, input().split()))\\n    elif p == 3:\\n        return list(input())\\n    else:\\n        return int(input())\\n\\nn, k = f(2)\\n\\nt = min(k, n-k)\\n\\nif t==0:\\n    if k==0:\\n        print(1)\\n    else:\\n        print(0)\\nelse:\\n    print(t)\", \"# import sys\\n# sys.stdin = open(\\\"#input.txt\\\", \\\"r\\\")\\nn,m = list(map(int, input().split()))\\n\\nif n==m:\\n\\tprint(0)\\nelif m<=1 or n-m<=1:\\n\\tprint(1)\\nelse:\\n\\tprint(min(m,n-m))\\n\", \"n,m = list(map(int,input().split()))\\nif m<=1:\\n    print(1)\\nelif m<=n//2:\\n    print(m)\\nelse:\\n    print(n-m)\", \"n, m = list(map(int, input().split()))\\nif m * 2 <= n and m != 0:\\n\\tprint(m)\\nelif m == 0:\\n\\tprint(1)\\nelse:\\n\\tprint(n - m)\\n\", \"n, m = list(map(int, input().split()))\\nif m == 0:\\n    print(1)\\nelse:\\n    print(min(n - m, m))\\n\", \"n, m = (int(i) for i in input().split())\\nif m > n // 2:\\n    print(n - m)\\nelse:\\n    if m:\\n        print(m)\\n    else:\\n        print(1)\\n\", \"n, m = list(map(int, input().split()))\\n\\nif m == n:\\n    print(0)\\n\\nelif m == 0 or m == 1:\\n    print(1)\\n\\nelse:\\n    m -= 1\\n    n -= 1\\n    print(min(m+1, n - m))\\n\", \"N, M = list(map(int, input().split()))\\nprint(min(max(1, M), N-M))\\n\", \"n, m = list(map(int, input().split()))\\nif n == m: \\n    print(0)\\nelif m == 0:\\n    print(1)\\nelif n//2 < m:\\n    print(n-m)\\nelse:\\n    print(m)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"7 4\\n\",\n    \"6 2\\n\",\n    \"3 0\\n\",\n    \"2 2\\n\",\n    \"9 1\\n\",\n    \"2 0\\n\",\n    \"543 110\\n\",\n    \"924 576\\n\",\n    \"1000 972\\n\",\n    \"846 0\\n\",\n    \"806 100\\n\",\n    \"268 121\\n\",\n    \"729 501\\n\",\n    \"190 34\\n\",\n    \"571 402\\n\",\n    \"469 217\\n\",\n    \"930 307\\n\",\n    \"829 124\\n\",\n    \"210 208\\n\",\n    \"109 63\\n\",\n    \"880 113\\n\",\n    \"698 336\\n\",\n    \"160 0\\n\",\n    \"59 33\\n\",\n    \"82 0\\n\",\n    \"980 632\\n\",\n    \"361 300\\n\",\n    \"822 597\\n\",\n    \"721 343\\n\",\n    \"182 67\\n\",\n    \"311 3\\n\",\n    \"772 618\\n\",\n    \"670 83\\n\",\n    \"132 128\\n\",\n    \"950 4\\n\",\n    \"973 799\\n\",\n    \"872 872\\n\",\n    \"333 246\\n\",\n    \"1000 1000\\n\",\n    \"1000 843\\n\",\n    \"1000 488\\n\",\n    \"7 3\\n\",\n    \"5 2\\n\",\n    \"3 2\\n\",\n    \"3 1\\n\",\n    \"2 1\\n\",\n    \"7 6\\n\",\n    \"6 3\\n\",\n    \"4 3\\n\",\n    \"4 0\\n\",\n    \"4 1\\n\",\n    \"4 2\\n\",\n    \"4 4\\n\",\n    \"3 3\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"110\\n\",\n    \"348\\n\",\n    \"28\\n\",\n    \"1\\n\",\n    \"100\\n\",\n    \"121\\n\",\n    \"228\\n\",\n    \"34\\n\",\n    \"169\\n\",\n    \"217\\n\",\n    \"307\\n\",\n    \"124\\n\",\n    \"2\\n\",\n    \"46\\n\",\n    \"113\\n\",\n    \"336\\n\",\n    \"1\\n\",\n    \"26\\n\",\n    \"1\\n\",\n    \"348\\n\",\n    \"61\\n\",\n    \"225\\n\",\n    \"343\\n\",\n    \"67\\n\",\n    \"3\\n\",\n    \"154\\n\",\n    \"83\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"174\\n\",\n    \"0\\n\",\n    \"87\\n\",\n    \"0\\n\",\n    \"157\\n\",\n    \"488\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"0\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1163/A",
  "starter_code": ""
}