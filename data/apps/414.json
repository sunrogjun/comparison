{
  "task_id": "APPS/414",
  "problem_id": 414,
  "prompt": "As the name of the task implies, you are asked to do some work with segments and trees.\n\nRecall that a tree is a connected undirected graph such that there is exactly one simple path between every pair of its vertices.\n\nYou are given $n$ segments $[l_1, r_1], [l_2, r_2], \\dots, [l_n, r_n]$, $l_i < r_i$ for every $i$. It is guaranteed that all segments' endpoints are integers, and all endpoints are unique \u2014 there is no pair of segments such that they start in the same point, end in the same point or one starts in the same point the other one ends.\n\nLet's generate a graph with $n$ vertices from these segments. Vertices $v$ and $u$ are connected by an edge if and only if segments $[l_v, r_v]$ and $[l_u, r_u]$ intersect and neither of it lies fully inside the other one.\n\nFor example, pairs $([1, 3], [2, 4])$ and $([5, 10], [3, 7])$ will induce the edges but pairs $([1, 2], [3, 4])$ and $([5, 7], [3, 10])$ will not.\n\nDetermine if the resulting graph is a tree or not.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 5 \\cdot 10^5$) \u2014 the number of segments.\n\nThe $i$-th of the next $n$ lines contain the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$ ($1 \\le l_i < r_i \\le 2n$).\n\nIt is guaranteed that all segments borders are pairwise distinct. \n\n\n-----Output-----\n\nPrint \"YES\" if the resulting graph is a tree and \"NO\" otherwise.\n\n\n-----Examples-----\nInput\n6\n9 12\n2 11\n1 3\n6 10\n5 7\n4 8\n\nOutput\nYES\n\nInput\n5\n1 3\n2 4\n5 9\n6 8\n7 10\n\nOutput\nNO\n\nInput\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n\nOutput\nNO\n\n\n\n-----Note-----\n\nThe graph corresponding to the first example:\n\n[Image]\n\nThe graph corresponding to the second example:\n\n[Image]\n\nThe graph corresponding to the third example:\n\n[Image]",
  "solutions": "[\"import sys\\nreader = (s.rstrip() for s in sys.stdin)\\ninput = reader.__next__\\n\\nclass BIT_RSQ():\\n    def __init__(self, n):\\n        self.n = n\\n        self.data = [0]*(n+2)\\n\\n    def add(self, i, v):\\n        while i <= self.n:\\n            self.data[i] += v\\n            i += i & -i\\n\\n    def sum(self, i):\\n        ret = 0\\n        while(i > 0):\\n            ret += self.data[i]\\n            i -= i & -i\\n        return ret\\n\\n    def query(self, l, r):\\n        return self.sum(r) - self.sum(l-1)\\n\\n    def lowerBound(self, w):\\n        if w <= 0: return 0\\n        x, k = 0, 2**self.n.bit_length()\\n        while k:\\n            if x+k <= self.n and self.data[x+k] < w:\\n                w -= self.data[x+k]\\n                x += k\\n            k >>= 1\\n        return x + 1\\n\\nn = int(input())\\nedges = [0]*(2*n)\\nc = [0]*(2*n)\\nBIT = BIT_RSQ(2*n)\\n\\nuf = [-1]*n\\ndef root(x):\\n    if uf[x] < 0:\\n        return x\\n    uf[x] = root(uf[x])\\n    return uf[x]\\ndef unite(x,y):\\n    rx, ry = root(x), root(y)\\n    if rx == ry:\\n        return False\\n    if uf[rx] > uf[ry]:\\n        rx, ry = ry, rx\\n    uf[rx] += uf[ry]\\n    uf[ry] = rx\\n    return True\\n\\nfor i in range(n):\\n    a,b = list(map(int, input().split()))\\n    a,b = a-1,b-1\\n    c[a] = c[b] = i\\n    edges[a] = b\\n    edges[b] = b\\n\\nfor i in reversed(list(range(2*n))):\\n    j = edges[i]\\n    if j == i:\\n        BIT.add(j+1, 1)\\n    else:\\n        BIT.add(j+1, -1)\\n        cnt = BIT.sum(j+1)\\n        while cnt:\\n            k = BIT.lowerBound(cnt)\\n            if not unite(c[j], c[k-1]):\\n                print(\\\"NO\\\")\\n                return\\n            cnt -= 1\\nif sum(i<0 for i in uf) == 1:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"6\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8\\n\",\n    \"5\\n1 3\\n2 4\\n5 9\\n6 8\\n7 10\\n\",\n    \"5\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4\\n\",\n    \"1\\n1 2\\n\",\n    \"20\\n20 22\\n9 11\\n32 36\\n8 12\\n14 16\\n4 6\\n28 30\\n29 37\\n15 18\\n33 35\\n27 31\\n21 25\\n2 7\\n19 23\\n10 39\\n34 40\\n5 13\\n24 38\\n17 26\\n1 3\\n\",\n    \"20\\n11 13\\n21 38\\n29 33\\n10 18\\n4 9\\n2 6\\n26 28\\n15 39\\n12 17\\n8 19\\n27 36\\n20 22\\n14 16\\n3 5\\n1 7\\n24 37\\n31 35\\n30 32\\n34 40\\n23 25\\n\",\n    \"20\\n3 13\\n33 35\\n6 8\\n27 31\\n25 28\\n15 17\\n11 29\\n30 37\\n1 5\\n9 12\\n20 23\\n19 21\\n14 18\\n16 24\\n7 10\\n32 36\\n22 26\\n38 40\\n34 39\\n2 4\\n\",\n    \"5\\n1 4\\n2 5\\n3 6\\n7 9\\n8 10\\n\",\n    \"4\\n1 6\\n3 5\\n4 7\\n2 8\\n\",\n    \"4\\n1 8\\n2 5\\n3 6\\n4 7\\n\",\n    \"6\\n6 9\\n4 7\\n3 10\\n8 11\\n2 5\\n1 12\\n\",\n    \"7\\n9 13\\n3 12\\n7 11\\n5 10\\n6 8\\n2 4\\n1 14\\n\",\n    \"5\\n3 6\\n4 7\\n5 8\\n1 9\\n2 10\\n\",\n    \"3\\n1 4\\n2 6\\n3 5\\n\",\n    \"4\\n3 8\\n2 7\\n5 6\\n1 4\\n\",\n    \"5\\n2 5\\n1 3\\n4 8\\n7 9\\n6 10\\n\",\n    \"5\\n1 4\\n2 5\\n3 10\\n6 8\\n7 9\\n\",\n    \"5\\n1 4\\n3 5\\n2 8\\n7 9\\n6 10\\n\",\n    \"5\\n1 3\\n2 4\\n5 8\\n6 9\\n7 10\\n\",\n    \"4\\n1 2\\n3 6\\n4 7\\n5 8\\n\",\n    \"6\\n7 10\\n3 8\\n2 11\\n9 12\\n1 4\\n5 6\\n\",\n    \"8\\n2 5\\n3 6\\n4 7\\n10 13\\n11 14\\n12 15\\n1 9\\n8 16\\n\",\n    \"4\\n1 4\\n2 5\\n3 8\\n6 7\\n\",\n    \"5\\n7 10\\n6 9\\n5 8\\n1 3\\n2 4\\n\",\n    \"7\\n5 8\\n7 11\\n2 6\\n1 3\\n4 14\\n10 12\\n9 13\\n\",\n    \"6\\n1 12\\n6 9\\n4 7\\n3 10\\n8 11\\n2 5\\n\",\n    \"8\\n2 16\\n7 13\\n12 14\\n4 15\\n8 9\\n1 11\\n3 6\\n5 10\\n\",\n    \"7\\n1 13\\n6 9\\n4 7\\n3 10\\n8 11\\n2 5\\n12 14\\n\",\n    \"4\\n1 6\\n2 3\\n4 7\\n5 8\\n\",\n    \"7\\n2 7\\n3 6\\n4 5\\n1 11\\n8 12\\n9 13\\n10 14\\n\",\n    \"5\\n1 6\\n2 3\\n4 9\\n5 8\\n7 10\\n\",\n    \"6\\n4 11\\n1 5\\n7 9\\n2 12\\n6 8\\n3 10\\n\",\n    \"4\\n1 4\\n5 6\\n3 8\\n2 7\\n\",\n    \"5\\n5 8\\n6 9\\n2 3\\n4 10\\n1 7\\n\",\n    \"5\\n1 3\\n4 9\\n8 10\\n5 7\\n2 6\\n\",\n    \"6\\n1 3\\n2 10\\n8 11\\n4 12\\n5 7\\n6 9\\n\",\n    \"6\\n2 8\\n6 9\\n4 11\\n5 7\\n1 12\\n3 10\\n\",\n    \"6\\n9 12\\n2 3\\n6 10\\n4 7\\n1 5\\n8 11\\n\",\n    \"8\\n5 8\\n1 16\\n7 10\\n4 14\\n13 15\\n3 6\\n2 11\\n9 12\\n\",\n    \"8\\n9 12\\n5 10\\n1 6\\n2 7\\n3 4\\n14 15\\n8 13\\n11 16\\n\",\n    \"7\\n4 6\\n11 13\\n8 12\\n5 9\\n2 7\\n10 14\\n1 3\\n\",\n    \"7\\n2 12\\n1 3\\n5 7\\n9 11\\n4 8\\n10 13\\n6 14\\n\",\n    \"7\\n8 11\\n5 7\\n1 6\\n10 12\\n2 14\\n4 9\\n3 13\\n\",\n    \"5\\n7 10\\n4 6\\n3 8\\n2 5\\n1 9\\n\",\n    \"5\\n1 4\\n7 8\\n3 10\\n2 6\\n5 9\\n\",\n    \"5\\n1 3\\n4 9\\n7 8\\n5 10\\n2 6\\n\",\n    \"5\\n4 6\\n2 5\\n3 9\\n8 10\\n1 7\\n\",\n    \"5\\n1 4\\n9 10\\n2 6\\n5 7\\n3 8\\n\",\n    \"6\\n3 5\\n4 6\\n1 10\\n7 11\\n9 12\\n2 8\\n\",\n    \"5\\n1 3\\n2 7\\n6 8\\n4 10\\n5 9\\n\",\n    \"4\\n2 5\\n3 6\\n4 7\\n1 8\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1278/D",
  "starter_code": ""
}