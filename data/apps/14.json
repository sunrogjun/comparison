{
  "task_id": "APPS/14",
  "problem_id": 14,
  "prompt": "Let's suppose you have an array a, a stack s (initially empty) and an array b (also initially empty).\n\nYou may perform the following operations until both a and s are empty:\n\n  Take the first element of a, push it into s and remove it from a (if a is not empty);  Take the top element from s, append it to the end of array b and remove it from s (if s is not empty). \n\nYou can perform these operations in arbitrary order.\n\nIf there exists a way to perform the operations such that array b is sorted in non-descending order in the end, then array a is called stack-sortable.\n\nFor example, [3, 1, 2] is stack-sortable, because b will be sorted if we perform the following operations:\n\n  Remove 3 from a and push it into s;  Remove 1 from a and push it into s;  Remove 1 from s and append it to the end of b;  Remove 2 from a and push it into s;  Remove 2 from s and append it to the end of b;  Remove 3 from s and append it to the end of b. \n\nAfter all these operations b = [1, 2, 3], so [3, 1, 2] is stack-sortable. [2, 3, 1] is not stack-sortable.\n\nYou are given k first elements of some permutation p of size n (recall that a permutation of size n is an array of size n where each integer from 1 to n occurs exactly once). You have to restore the remaining n - k elements of this permutation so it is stack-sortable. If there are multiple answers, choose the answer such that p is lexicographically maximal (an array q is lexicographically greater than an array p iff there exists some integer k such that for every i < k q_{i} = p_{i}, and q_{k} > p_{k}). You may not swap or change any of first k elements of the permutation.\n\nPrint the lexicographically maximal permutation p you can obtain.\n\nIf there exists no answer then output -1.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (2 \u2264 n \u2264 200000, 1 \u2264 k < n) \u2014 the size of a desired permutation, and the number of elements you are given, respectively.\n\nThe second line contains k integers p_1, p_2, ..., p_{k} (1 \u2264 p_{i} \u2264 n) \u2014 the first k elements of p. These integers are pairwise distinct.\n\n\n-----Output-----\n\nIf it is possible to restore a stack-sortable permutation p of size n such that the first k elements of p are equal to elements given in the input, print lexicographically maximal such permutation.\n\nOtherwise print -1.\n\n\n-----Examples-----\nInput\n5 3\n3 2 1\n\nOutput\n3 2 1 5 4 \nInput\n5 3\n2 3 1\n\nOutput\n-1\n\nInput\n5 1\n3\n\nOutput\n3 2 1 5 4 \nInput\n5 2\n3 4\n\nOutput\n-1",
  "solutions": "[\"import sys\\n\\n#f = open('input', 'r')\\nf = sys.stdin\\nn,k = list(map(int, f.readline().split()))\\na = list(map(int, f.readline().split()))\\naset = set(a)\\nst = []\\nfailed = False\\nai = 0\\napp = []\\nfor p in range(1, n+1):\\n  if p in aset:\\n    while ai < k and (len(st)==0 or st[-1]!=p):\\n      st.append(a[ai])\\n      ai += 1\\n    if len(st) == 0 or st[-1] != p:\\n      failed = True\\n      break\\n    st.pop(-1)\\n    a += app[::-1]\\n    app = []\\n  else:\\n    if ai != k:\\n      st += a[ai:k]\\n      ai = k\\n    app.append(p)\\n\\nif failed:\\n  print(-1)\\nelse:\\n  print(' '.join(map(str, a + app[::-1])))\\n\", \"import sys\\nn,k = [int(x) for x in input().split()]\\na = list(reversed([int(x)-1 for x in input().split()]))\\ns = []\\nb = []\\ngoal = 0\\n\\nused = [False]*(n)\\nfor node in a:\\n    used[node]=True\\n\\nsearch_from = -1\\nbig = n-1 \\nres = []\\nwhile goal!=n:\\n    while a:\\n        res.append(a[-1])\\n        s.append(a.pop())\\n        search_from = s[-1]-1\\n        if (len(s)>1 and s[-1]>s[-2]):\\n            print(-1)\\n            return\\n        while s and s[-1]==goal:\\n            goal += 1\\n            s.pop()\\n            if s:\\n                search_from = s[-1]-1\\n    if goal==n:\\n        break\\n    if len(s)==0:\\n        while big>=0 and used[big]:\\n            big-=1\\n        if big==-1:\\n            print(-1)\\n            return\\n        used[big]=True\\n        a.append(big)\\n    else:\\n        while search_from>=0 and used[search_from]:\\n            search_from-=1\\n        if search_from==-1:\\n            print(-1)\\n            return\\n        used[search_from]=True\\n        a.append(search_from)\\n        \\nprint(*[x+1 for x in res])\\n\", \"import sys\\n\\n\\ndef print_list(list):\\n    for i in list:\\n        print(i, end=\\\" \\\")\\n    print()\\n\\n\\nn, k = [int(i) for i in input().split(\\\" \\\")]\\nmy_list = [int(i) for i in input().split(\\\" \\\")]\\n\\nstack = list()\\n\\nnext_pop = 1\\n\\nfor num in my_list:\\n    if stack and stack[-1] < num:\\n        print(\\\"-1\\\")\\n        return\\n\\n    stack.append(num)\\n\\n    while stack and stack[-1] == next_pop:\\n        stack.pop()\\n        next_pop += 1\\n\\nwhile stack:\\n    for i in range(stack[-1] - 1, next_pop - 1, -1):\\n        my_list.append(i)\\n    next_pop = stack.pop() + 1\\n\\nif next_pop > n:\\n    print_list(my_list)\\nelse:\\n    for j in range(n, next_pop - 1, -1):\\n        my_list.append(j)\\n    print_list(my_list)\\n\", \"import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\\n\\nsys.setrecursionlimit(10**7)\\ninf = 10**20\\neps = 1.0 / 10**15\\nmod = 10**9+7\\n\\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\\ndef LS(): return sys.stdin.readline().split()\\ndef I(): return int(sys.stdin.readline())\\ndef F(): return float(sys.stdin.readline())\\ndef S(): return input()\\ndef pf(s): return print(s, flush=True)\\n\\n\\ndef main():\\n    n,k = LI()\\n    a = LI()\\n    r = a[:]\\n    s = []\\n    m = 1\\n    for c in a:\\n        if c == m:\\n            m += 1\\n            t = len(s)\\n            for i in range(t-1,-1,-1):\\n                if s[i] == m:\\n                    m += 1\\n                    t = i\\n                else:\\n                    break\\n            if t != len(s):\\n                s = s[:t]\\n        else:\\n            s.append(c)\\n    for i in range(len(s)-1):\\n        if s[i] < s[i+1]:\\n            return -1\\n\\n    for i in range(len(s)-1,-1,-1):\\n        c = s[i]\\n        r += list(range(c-1,m-1,-1))\\n        m = c+1\\n    r += list(range(n,m-1,-1))\\n\\n    return ' '.join(map(str,r))\\n\\nprint(main())\\n\\n\\n\", \"n, k = map(int, input().split(' '))\\np = list(map(int, input().split(' ')))\\n\\ni = 0\\ns = []\\ncur = 1\\nsolution = list(p)\\nwhile True:\\n    if len(s) > 0 and s[-1] == cur:\\n        cur += 1\\n        s.pop()\\n    elif i < len(p):\\n        if len(s) > 0 and p[i] > s[-1]:\\n            solution = [-1]\\n            break\\n        s.append(p[i])\\n        i += 1\\n    else:\\n        break\\n\\nif solution[0] != -1:\\n    while cur <= n:\\n        top = s.pop() if len(s) > 0 else n + 1\\n        solution.extend(reversed(range(cur, top)))\\n        cur = top + 1\\n        \\nprint(' '.join(str(x) for x in solution))\", \"import sys\\nf=sys.stdin\\nn,k=map(int,f.readline().split())\\ns,t=[n+1],1\\na=list(map(int,f.readline().split()))\\nfor i in range(n):\\n\\tif i>=k:\\n\\t\\ta+=[s[-1]-1]\\n\\ts+=[a[i]]\\n\\twhile (len(s)!=0) and (s[-1]==t):\\n\\t\\ts.pop()\\n\\t\\tt+=1\\nif len(s):\\n\\tprint('-1')\\nelse:\\n\\tprint(' '.join(str(x) for x in a))\", \"import sys\\nf=sys.stdin\\nn,k=map(int,f.readline().split())\\ns,t=[n+1],1\\na=list(map(int,f.readline().split()))\\nfor i in range(n):\\n\\tif i>=k:\\n\\t\\ta+=[s[-1]-1]\\n\\ts+=[a[i]]\\n\\twhile (len(s)!=0) and (s[-1]==t):\\n\\t\\ts.pop()\\n\\t\\tt+=1\\nif len(s):\\n\\tprint('-1')\\nelse:\\n\\tprint(' '.join(str(x) for x in a))\", \"import sys\\nf=sys.stdin\\nn,k=map(int,f.readline().split())\\ns,t=[n+1],1\\na=list(map(int,f.readline().split()))\\nfor i in range(n):\\n\\tif i>=k:\\n\\t\\ta+=[s[-1]-1]\\n\\ts+=[a[i]]\\n\\twhile (len(s)!=0) and (s[-1]==t):\\n\\t\\ts.pop()\\n\\t\\tt+=1\\nif len(s):\\n\\tprint('-1')\\nelse:\\n\\tprint(' '.join(str(x) for x in a))\", \"# https://codeforces.com/problemset/problem/911/E\\n\\nn, k = map(int, input().split())\\np    = list(map(int, input().split()))\\nd    = {x:1 for x in p}\\n\\ndef solve(p, d, n):\\n    add  = []\\n    s    = []\\n    \\n    for x in range(1, n+1):\\n        if x not in d:\\n            while len(p) > 0:\\n                s.append(p.pop(0))\\n                \\n                if len(s) >= 2 and s[-1] > s[-2]:\\n                    return False, None\\n                \\n            # len(p)=0\\n            if len(s) == 0 or s[-1] != x:\\n                up = n if len(s) == 0 else s[-1]-1\\n            \\n                for y in range(up, x-1, -1):\\n                    add.append(y)\\n                    s.append(y)\\n                    d[y]=1\\n            s.pop()\\n        else:\\n            if len(s) == 0 or s[-1] != x:\\n                while len(p) > 0:\\n                    s.append(p.pop(0))\\n                \\n                    if len(s) >= 2 and s[-1] > s[-2]:\\n                        return False, None\\n                \\n                    if s[-1] == x:\\n                        break\\n            s.pop()\\n    return True, add\\n\\nans =  [x for x in p]\\nflg, add = solve(p, d, n)\\nif flg==False:\\n    print(-1)\\nelse:\\n    print(' '.join([str(x) for x in ans+add]))\", \"import sys\\n \\nn,k = map(int,input().split())\\na = list(map(int,input().split()))\\nsetofa = set(a)\\ns = []\\nf= False\\nai = 0\\nans = []\\nfor i in range(1, n+1):\\n  if i in setofa:\\n    while ai < k and (len(s)==0 or s[-1]!=i):\\n      s.append(a[ai])\\n      ai += 1\\n    if len(s) == 0 or s[-1] != i:\\n      f = True\\n      break\\n    s.pop(-1)\\n    a += ans[::-1]\\n    ans = []\\n  else:\\n    if ai != k:\\n      s += a[ai:k]\\n      ai = k\\n    ans.append(i)\\n \\nif f:\\n  print(-1)\\nelse:\\n  print(' '.join(map(str, a + ans[::-1])))\"]",
  "input_output": "{\"inputs\": [\"5 3\\n3 2 1\\n\", \"5 3\\n2 3 1\\n\", \"5 1\\n3\\n\", \"5 2\\n3 4\\n\", \"20 19\\n2 18 19 11 9 20 15 1 8 14 4 6 5 12 17 16 7 13 3\\n\", \"10 1\\n6\\n\", \"20 18\\n8 14 18 10 1 3 7 15 2 12 17 19 5 4 11 13 20 16\\n\", \"10 2\\n3 7\\n\", \"100000 3\\n43791 91790 34124\\n\", \"20 17\\n9 11 19 4 8 16 13 3 1 6 18 2 20 10 17 7 5\\n\", \"10 3\\n2 10 3\\n\", \"100000 4\\n8269 53984 47865 42245\\n\", \"20 16\\n8 1 5 11 15 14 7 20 16 9 12 13 18 4 6 10\\n\", \"10 4\\n2 4 1 10\\n\", \"100000 5\\n82211 48488 99853 11566 42120\\n\", \"20 15\\n6 7 14 13 8 4 15 2 11 9 12 16 5 1 20\\n\", \"10 5\\n2 10 5 8 4\\n\", \"100000 6\\n98217 55264 24242 71840 2627 67839\\n\", \"20 14\\n10 15 4 3 1 5 11 12 13 14 6 2 19 20\\n\", \"10 6\\n4 5 2 1 6 3\\n\", \"100000 7\\n44943 51099 61988 40497 85738 74092 2771\\n\", \"20 13\\n6 16 5 19 8 1 4 18 2 20 10 11 13\\n\", \"10 7\\n10 4 3 8 2 5 6\\n\", \"100000 8\\n88153 88461 80211 24770 13872 57414 32941 63030\\n\", \"20 12\\n20 11 14 7 16 13 9 1 4 18 6 12\\n\", \"10 8\\n7 9 3 6 2 4 1 8\\n\", \"40 39\\n25 4 26 34 35 11 22 23 21 2 1 28 20 8 36 5 27 15 39 7 24 14 17 19 33 6 38 16 18 3 32 10 30 13 37 31 29 9 12\\n\", \"20 1\\n20\\n\", \"40 38\\n32 35 36 4 22 6 15 21 40 13 33 17 5 24 28 9 1 23 25 14 26 3 8 11 37 30 18 16 19 20 27 12 39 2 10 38 29 31\\n\", \"20 2\\n1 13\\n\", \"200000 3\\n60323 163214 48453\\n\", \"40 37\\n26 16 40 10 9 30 8 33 39 19 4 11 2 3 38 21 22 12 1 27 20 37 24 17 23 14 13 29 7 28 34 31 25 35 6 32 5\\n\", \"20 3\\n16 6 14\\n\", \"200000 4\\n194118 175603 110154 129526\\n\", \"40 36\\n27 33 34 40 16 39 1 10 9 12 8 37 17 7 24 30 2 31 13 23 20 18 29 21 4 28 25 35 6 22 36 15 3 11 5 26\\n\", \"20 4\\n2 10 4 9\\n\", \"200000 5\\n53765 19781 63409 69811 120021\\n\", \"40 35\\n2 1 5 3 11 32 13 16 37 26 6 10 8 35 25 24 7 38 21 17 40 14 9 34 33 20 29 12 22 28 36 31 30 19 27\\n\", \"20 5\\n11 19 6 2 12\\n\", \"200000 6\\n33936 11771 42964 153325 684 8678\\n\", \"40 34\\n35 31 38 25 29 9 32 23 24 16 3 26 39 2 17 28 14 1 30 34 5 36 33 7 22 13 21 12 27 19 40 10 18 15\\n\", \"20 6\\n3 6 9 13 20 14\\n\", \"200000 7\\n175932 99083 128533 75304 164663 7578 174396\\n\", \"40 33\\n11 15 22 26 21 6 8 5 32 39 28 29 30 13 2 40 33 27 17 31 7 36 9 19 3 38 37 12 10 16 1 23 35\\n\", \"20 7\\n7 5 6 13 16 3 17\\n\", \"200000 8\\n197281 11492 67218 100058 179300 182264 17781 192818\\n\", \"40 32\\n22 7 35 31 14 28 9 20 10 3 38 6 15 36 33 16 37 2 11 13 26 23 30 12 40 5 21 1 34 19 27 24\\n\", \"20 8\\n1 16 14 11 7 9 2 12\\n\", \"30 3\\n17 5 3\\n\", \"30 3\\n29 25 21\\n\", \"10 6\\n2 1 4 3 6 5\\n\", \"4 3\\n2 1 3\\n\", \"6 4\\n5 4 3 1\\n\", \"4 3\\n1 2 3\\n\", \"6 4\\n1 3 2 6\\n\", \"5 4\\n3 2 1 5\\n\", \"10 4\\n6 4 1 3\\n\", \"4 3\\n3 4 2\\n\", \"4 3\\n3 1 4\\n\", \"3 2\\n2 3\\n\", \"4 3\\n1 4 2\\n\", \"4 3\\n3 1 2\\n\", \"2 1\\n1\\n\", \"3 2\\n3 2\\n\", \"4 3\\n4 1 2\\n\", \"3 2\\n3 1\\n\", \"4 3\\n2 1 4\\n\", \"8 5\\n3 1 4 2 7\\n\", \"6 4\\n2 5 1 4\\n\", \"10 5\\n10 1 8 5 6\\n\", \"10 3\\n6 4 3\\n\", \"10 3\\n2 1 6\\n\", \"10 3\\n8 1 7\\n\", \"10 2\\n5 4\\n\", \"10 3\\n1 2 10\\n\", \"10 4\\n4 1 6 3\\n\", \"10 3\\n8 1 5\\n\", \"10 4\\n1 4 9 8\\n\", \"10 3\\n3 1 6\\n\", \"10 6\\n1 2 5 4 3 6\\n\", \"10 9\\n9 8 7 5 4 3 2 1 6\\n\", \"10 4\\n4 7 5 10\\n\", \"10 5\\n8 6 2 1 5\\n\", \"10 7\\n7 5 2 1 4 3 6\\n\", \"10 4\\n1 2 10 6\\n\", \"10 6\\n1 10 9 5 4 3\\n\", \"10 8\\n6 10 4 7 9 8 5 3\\n\", \"10 4\\n6 1 10 3\\n\", \"10 9\\n9 6 1 4 2 3 5 10 7\\n\", \"10 9\\n10 1 9 3 2 4 5 8 6\\n\", \"10 4\\n10 8 1 7\\n\", \"10 4\\n2 1 3 6\\n\", \"10 3\\n2 1 4\\n\", \"10 3\\n4 1 5\\n\", \"10 5\\n9 8 1 2 10\\n\", \"10 3\\n9 8 3\\n\", \"10 4\\n8 2 1 5\\n\", \"10 6\\n6 5 3 1 2 4\\n\", \"10 2\\n1 2\\n\", \"10 6\\n9 6 5 2 1 4\\n\", \"10 4\\n2 1 7 3\\n\", \"10 2\\n6 5\\n\", \"10 3\\n2 1 5\\n\", \"10 4\\n3 1 2 4\\n\", \"10 3\\n8 5 4\\n\", \"10 4\\n2 1 8 4\\n\", \"10 3\\n8 3 2\\n\", \"10 3\\n5 4 2\\n\", \"10 9\\n10 8 7 5 6 2 1 9 4\\n\", \"10 4\\n2 1 6 4\\n\", \"10 4\\n2 1 3 9\\n\", \"10 3\\n1 4 3\\n\", \"10 7\\n3 2 1 9 8 6 5\\n\", \"10 4\\n10 7 1 5\\n\", \"10 4\\n8 7 1 2\\n\", \"10 4\\n1 5 4 2\\n\", \"10 5\\n2 1 9 3 7\\n\", \"10 4\\n2 1 5 3\\n\", \"10 5\\n9 6 1 8 2\\n\", \"20 13\\n3 2 1 7 4 5 6 11 10 9 8 13 12\\n\", \"20 14\\n3 2 1 7 4 5 6 14 11 10 9 8 13 12\\n\", \"10 5\\n9 4 2 1 5\\n\", \"10 5\\n1 5 2 10 3\\n\", \"10 8\\n6 5 3 1 2 4 9 8\\n\", \"10 4\\n10 9 3 7\\n\", \"10 7\\n10 8 5 1 2 7 3\\n\", \"10 3\\n3 1 5\\n\", \"10 5\\n1 9 8 4 3\\n\", \"10 3\\n1 8 4\\n\", \"10 4\\n6 2 1 4\\n\", \"10 3\\n1 6 4\\n\", \"10 3\\n10 9 3\\n\", \"10 9\\n8 10 4 1 3 2 9 7 5\\n\", \"10 3\\n7 10 6\\n\", \"10 3\\n9 10 8\\n\", \"10 6\\n10 8 1 6 2 7\\n\", \"10 6\\n6 5 1 2 9 3\\n\", \"10 3\\n10 1 8\\n\", \"10 9\\n1 9 7 10 5 8 4 6 3\\n\", \"10 5\\n1 9 3 2 5\\n\", \"10 4\\n10 1 9 7\\n\", \"10 8\\n1 10 3 2 9 4 8 5\\n\", \"10 1\\n1\\n\", \"10 7\\n9 7 1 6 5 4 2\\n\", \"10 9\\n10 2 1 7 8 3 5 6 9\\n\", \"10 4\\n2 1 3 10\\n\", \"10 9\\n5 1 4 6 3 9 8 10 7\\n\", \"10 6\\n8 2 1 7 6 5\\n\", \"10 5\\n2 9 8 6 1\\n\", \"10 4\\n9 2 1 6\\n\", \"10 3\\n2 1 7\\n\", \"10 7\\n4 1 2 10 9 6 3\\n\", \"10 6\\n10 2 1 3 9 4\\n\", \"10 4\\n9 2 1 4\\n\", \"10 3\\n5 1 4\\n\", \"10 4\\n4 1 2 10\\n\", \"8 6\\n5 4 3 2 1 8\\n\", \"10 4\\n1 6 5 4\\n\", \"10 2\\n10 2\\n\", \"10 5\\n1 6 2 10 5\\n\", \"10 9\\n6 1 2 10 9 5 3 4 8\\n\", \"10 5\\n4 1 7 2 3\\n\", \"10 4\\n2 1 3 4\\n\", \"11 2\\n3 2\\n\", \"6 5\\n3 2 1 4 5\\n\", \"5 4\\n2 1 3 5\\n\", \"10 6\\n3 2 1 5 4 6\\n\", \"11 5\\n1 8 7 6 5\\n\", \"10 3\\n2 1 3\\n\", \"10 4\\n2 1 7 6\\n\", \"10 4\\n5 4 1 8\\n\", \"10 4\\n9 1 5 4\\n\", \"10 3\\n6 1 4\\n\", \"10 6\\n1 9 3 2 4 6\\n\", \"10 3\\n10 1 9\\n\", \"10 3\\n1 9 7\\n\", \"10 2\\n2 10\\n\", \"10 5\\n9 2 1 4 3\\n\", \"10 6\\n1 2 3 6 5 4\\n\", \"10 5\\n7 6 5 1 4\\n\", \"10 9\\n8 1 3 4 10 5 9 7 2\\n\"], \"outputs\": [\"3 2 1 5 4 \", \"-1\\n\", \"3 2 1 5 4 \", \"-1\\n\", \"-1\\n\", \"6 5 4 3 2 1 10 9 8 7 \", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 \", \"-1\\n\", \"1 13 12 11 10 9 8 7 6 5 4 3 2 20 19 18 17 16 15 14 \", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"17 5 3 2 1 4 16 15 14 13 12 11 10 9 8 7 6 30 29 28 27 26 25 24 23 22 21 20 19 18 \", \"29 25 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 24 23 22 28 27 26 30 \", \"2 1 4 3 6 5 10 9 8 7 \", \"2 1 3 4 \", \"5 4 3 1 2 6 \", \"1 2 3 4 \", \"1 3 2 6 5 4 \", \"3 2 1 5 4 \", \"6 4 1 3 2 5 10 9 8 7 \", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"1 4 2 3 \", \"3 1 2 4 \", \"1 2 \", \"3 2 1 \", \"4 1 2 3 \", \"3 1 2 \", \"2 1 4 3 \", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"6 4 3 2 1 5 10 9 8 7 \", \"2 1 6 5 4 3 10 9 8 7 \", \"8 1 7 6 5 4 3 2 10 9 \", \"5 4 3 2 1 10 9 8 7 6 \", \"1 2 10 9 8 7 6 5 4 3 \", \"-1\\n\", \"8 1 5 4 3 2 7 6 10 9 \", \"-1\\n\", \"-1\\n\", \"1 2 5 4 3 6 10 9 8 7 \", \"9 8 7 5 4 3 2 1 6 10 \", \"-1\\n\", \"8 6 2 1 5 4 3 7 10 9 \", \"7 5 2 1 4 3 6 10 9 8 \", \"1 2 10 6 5 4 3 9 8 7 \", \"1 10 9 5 4 3 2 8 7 6 \", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"10 1 9 3 2 4 5 8 6 7 \", \"10 8 1 7 6 5 4 3 2 9 \", \"2 1 3 6 5 4 10 9 8 7 \", \"2 1 4 3 10 9 8 7 6 5 \", \"-1\\n\", \"-1\\n\", \"9 8 3 2 1 7 6 5 4 10 \", \"8 2 1 5 4 3 7 6 10 9 \", \"6 5 3 1 2 4 10 9 8 7 \", \"1 2 10 9 8 7 6 5 4 3 \", \"9 6 5 2 1 4 3 8 7 10 \", \"2 1 7 3 6 5 4 10 9 8 \", \"6 5 4 3 2 1 10 9 8 7 \", \"2 1 5 4 3 10 9 8 7 6 \", \"3 1 2 4 10 9 8 7 6 5 \", \"8 5 4 3 2 1 7 6 10 9 \", \"2 1 8 4 3 7 6 5 10 9 \", \"8 3 2 1 7 6 5 4 10 9 \", \"5 4 2 1 3 10 9 8 7 6 \", \"-1\\n\", \"2 1 6 4 3 5 10 9 8 7 \", \"2 1 3 9 8 7 6 5 4 10 \", \"1 4 3 2 10 9 8 7 6 5 \", \"3 2 1 9 8 6 5 4 7 10 \", \"10 7 1 5 4 3 2 6 9 8 \", \"8 7 1 2 6 5 4 3 10 9 \", \"1 5 4 2 3 10 9 8 7 6 \", \"2 1 9 3 7 6 5 4 8 10 \", \"2 1 5 3 4 10 9 8 7 6 \", \"-1\\n\", \"3 2 1 7 4 5 6 11 10 9 8 13 12 20 19 18 17 16 15 14 \", \"3 2 1 7 4 5 6 14 11 10 9 8 13 12 20 19 18 17 16 15 \", \"-1\\n\", \"-1\\n\", \"6 5 3 1 2 4 9 8 7 10 \", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"1 9 8 4 3 2 7 6 5 10 \", \"1 8 4 3 2 7 6 5 10 9 \", \"6 2 1 4 3 5 10 9 8 7 \", \"1 6 4 3 2 5 10 9 8 7 \", \"10 9 3 2 1 8 7 6 5 4 \", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"10 1 8 7 6 5 4 3 2 9 \", \"-1\\n\", \"1 9 3 2 5 4 8 7 6 10 \", \"10 1 9 7 6 5 4 3 2 8 \", \"1 10 3 2 9 4 8 5 7 6 \", \"1 10 9 8 7 6 5 4 3 2 \", \"9 7 1 6 5 4 2 3 8 10 \", \"-1\\n\", \"2 1 3 10 9 8 7 6 5 4 \", \"-1\\n\", \"8 2 1 7 6 5 4 3 10 9 \", \"-1\\n\", \"9 2 1 6 5 4 3 8 7 10 \", \"2 1 7 6 5 4 3 10 9 8 \", \"-1\\n\", \"10 2 1 3 9 4 8 7 6 5 \", \"9 2 1 4 3 8 7 6 5 10 \", \"5 1 4 3 2 10 9 8 7 6 \", \"-1\\n\", \"5 4 3 2 1 8 7 6 \", \"1 6 5 4 3 2 10 9 8 7 \", \"10 2 1 9 8 7 6 5 4 3 \", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"2 1 3 4 10 9 8 7 6 5 \", \"3 2 1 11 10 9 8 7 6 5 4 \", \"3 2 1 4 5 6 \", \"2 1 3 5 4 \", \"3 2 1 5 4 6 10 9 8 7 \", \"1 8 7 6 5 4 3 2 11 10 9 \", \"2 1 3 10 9 8 7 6 5 4 \", \"2 1 7 6 5 4 3 10 9 8 \", \"-1\\n\", \"9 1 5 4 3 2 8 7 6 10 \", \"6 1 4 3 2 5 10 9 8 7 \", \"1 9 3 2 4 6 5 8 7 10 \", \"10 1 9 8 7 6 5 4 3 2 \", \"1 9 7 6 5 4 3 2 8 10 \", \"-1\\n\", \"9 2 1 4 3 8 7 6 5 10 \", \"1 2 3 6 5 4 10 9 8 7 \", \"7 6 5 1 4 3 2 10 9 8 \", \"-1\\n\"]}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/911/E",
  "starter_code": ""
}