{
  "task_id": "APPS/445",
  "problem_id": 445,
  "prompt": "A tuple of positive integers {x_1, x_2, ..., x_{k}} is called simple if for all pairs of positive integers (i,  j) (1  \u2264 i  <  j \u2264 k), x_{i}  +  x_{j} is a prime.\n\nYou are given an array a with n positive integers a_1,  a_2,  ...,  a_{n} (not necessary distinct). You want to find a simple subset of the array a with the maximum size.\n\nA prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\nLet's define a subset of the array a as a tuple that can be obtained from a by removing some (possibly all) elements of it.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 1000) \u2014 the number of integers in the array a.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^6) \u2014 the elements of the array a.\n\n\n-----Output-----\n\nOn the first line print integer m \u2014 the maximum possible size of simple subset of a.\n\nOn the second line print m integers b_{l} \u2014 the elements of the simple subset of the array a with the maximum size.\n\nIf there is more than one solution you can print any of them. You can print the elements of the subset in any order.\n\n\n-----Examples-----\nInput\n2\n2 3\n\nOutput\n2\n3 2\n\nInput\n2\n2 2\n\nOutput\n1\n2\n\nInput\n3\n2 1 1\n\nOutput\n3\n1 1 2\n\nInput\n2\n83 14\n\nOutput\n2\n14 83",
  "solutions": "[\"def main():\\n    n = int(input())\\n    l = list(map(int, input().split()))\\n    seive = [False, True] * max(l)\\n    a = len(seive)\\n    for i in range(3, int(a ** .5) + 1, 2):\\n        if seive[i]:\\n            for j in range(i * i, a, i):\\n                seive[j] = False\\n    i = l.count(1)\\n    if i:\\n        res = [1] * i\\n        for a in l:\\n            if a > 1 and seive[a + 1]:\\n                res.append(a)\\n                break\\n        if len(res) > 1:\\n            print(len(res))\\n            print(*res)\\n            return\\n    l0, l1 = [], []\\n    for a in l:\\n        if a != 1:\\n            if a & 1:\\n                for b in l0:\\n                    if seive[a + b]:\\n                        print(2)\\n                        print(a, b)\\n                        return\\n                l1.append(a)\\n            else:\\n                for b in l1:\\n                    if seive[a + b]:\\n                        print(2)\\n                        print(a, b)\\n                        return\\n                l0.append(a)\\n    print(1)\\n    print(l[0])\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def main():\\n    input()\\n    l0, l1, ones = [], [], 0\\n    for a in map(int, input().split()):\\n        if a == 1:\\n            ones += 1\\n        else:\\n            (l1 if a & 1 else l0).append(a)\\n    seive = [False, True] * (((max(l0) if l0 else 0) + (max(l1) if l1 else 0)) // 2 + 1)\\n    a = len(seive)\\n    for i in range(3, int(a ** .5) + 1, 2):\\n        if seive[i]:\\n            for j in range(i * i, a, i):\\n                seive[j] = False\\n    if ones:\\n        res = ['1'] * ones\\n        for a in l0:\\n            if a > 1 and seive[a + 1]:\\n                res.append(str(a))\\n                break\\n        if len(res) > 1:\\n            print(len(res))\\n            print(' '.join(res))\\n            return\\n    for a in l1:\\n        for b in l0:\\n            if seive[a + b]:\\n                print(2)\\n                print(a, b)\\n                return\\n    print(1)\\n    print(1 if ones else (l0 if l0 else l1)[0])\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"from time import time\\nn = int(input())\\na = list(map(int, input().split()))\\n\\nstart = time()\\n\\ncache = {}\\n\\n\\ndef is_prime(n):\\n    if n not in cache:\\n        cache[n] = _is_prime(n)\\n\\n    return cache[n]\\n\\n\\ndef _is_prime(n):\\n    if n == 2 or n == 3: return True\\n    if n < 2 or n % 2 == 0: return False\\n    if n < 9: return True\\n    if n % 3 == 0: return False\\n    r = int(n ** 0.5)\\n    f = 5\\n    while f <= r:\\n        if n % f == 0: return False\\n        if n % (f + 2) == 0: return False\\n        f += 6\\n    return True\\n\\n\\ns = {}\\ni = 0\\nwhile i < len(a):\\n    if a[i] > 1 and a[i] in s:\\n        a.pop(i)\\n    else:\\n        s[a[i]] = True\\n        i += 1\\n\\np = [0] * len(a)\\nfor i in range(0, len(a)):\\n    for j in range(i + 1, len(a)):\\n        if not is_prime(a[i] + a[j]):\\n            p[i] += 1\\n            p[j] += 1\\n\\nwhile True:\\n    mx = max(p)\\n    if mx == 0:\\n        break\\n\\n    mi = p.index(mx)\\n\\n    for i in range(0, len(a)):\\n        if i == mi or not is_prime(a[mi] + a[i]):\\n            p[i] -= 1\\n\\n    a.pop(mi)\\n    p.pop(mi)\\n\\nprint(len(a))\\nprint(\\\" \\\".join(map(str, a)))\\n\\n#print(time() - start)\\n\", \"import math\\n\\nN = 2000001\\nsq = math.floor(N ** 0.5)\\nisprime = [True] * N\\nfor p in range(2, N):\\n    if isprime[p]:\\n        for i in range(p**2, N, p):\\n            isprime[i] = False\\n\\ndef solve():\\n    n = int(input())\\n    A = [int(x) for x in input().split()]\\n    odd = list([x for x in A if x%2])\\n    even = list([x for x in A if x%2 == 0])\\n    k = odd.count(1)\\n    res = None\\n    if k > 0:\\n        for i in even:\\n            if isprime[i+1]:\\n                res = [1]*k + [i]\\n                return res\\n        if k > 1:\\n            res = [1]*k\\n            return res\\n    if res is None:\\n        for i in odd:\\n            for j in even:\\n                if isprime[i+j]:\\n                    res = [i, j]\\n                    return res\\n    return [A[0]]\\n\\nres = solve()\\nprint(len(res))\\nprint(' '.join(map(str, res)))\\n\", \"def primes_upto(limit):\\n    is_prime = [False] * 2 + [True] * (limit - 1) # remove odd numbers\\n    for n in range(int(limit**0.5 + 1.5)): # stop at ``sqrt(limit)``\\n        if is_prime[n]:\\n            for i in range(n*n, limit+1, n):\\n                is_prime[i] = False\\n    return [i for i, prime in enumerate(is_prime) if prime]\\n\\ncheck = set(primes_upto(2*10**6 + 500))\\nn = int(input())\\narr = list(map(int,input().split()))\\none_present = False\\ncnt_ones = 0\\nfor i in arr:\\n    if i == 1:\\n        one_present = True\\n        cnt_ones += 1\\n\\nnum1,num2,prime = 0,0,0\\nfor i in range(n):\\n    for j in range(n):\\n        if one_present:\\n            if cnt_ones > 1:\\n                if arr[i] + arr[j] in check and arr[i] + 1 in check and arr[j] + 1 in check and arr[i] != 1 and arr[j] != 1:\\n                    num1 = arr[i]\\n                    num2 = arr[j]\\n                if arr[i] + 1 in check and arr[i] != 1:\\n                    num1 = arr[i]\\n                if arr[i] in check:\\n                    prime = arr[i]\\n            else:\\n                if arr[i] + arr[j] in check and arr[i] != 1 and arr[j] != 1:\\n                    num1 = arr[i]\\n                    num2 = arr[j]\\n                if arr[i] + 1 in check and arr[i] != 1:\\n                    num1 = arr[i]\\n                if arr[i] in check:\\n                    prime = arr[i]\\n        else:\\n            if arr[i] + arr[j] in check:\\n                num1 = arr[i]\\n                num2 = arr[j]\\n            if arr[i] in check:\\n                prime = arr[i]\\n\\nif one_present:\\n    if cnt_ones > 1:\\n        if num2 == 0:\\n            if num1 == 0:\\n                print(cnt_ones)\\n                for i in range(cnt_ones):\\n                    print(1, end= ' ')\\n            else:\\n                print(cnt_ones + 1)\\n                for i in range(cnt_ones):\\n                    print(1, end=' ')\\n                print(num1, end= ' ')\\n        else:\\n            print(cnt_ones + 2)\\n            for i in range(cnt_ones):\\n                print(i, end=' ')\\n            print(num1, end=' ')\\n            print(num2, end=' ')\\n    else:\\n        if num2 == 0:\\n            if num1 == 0:\\n                print(1)\\n                print(1)\\n            else:\\n                print(2)\\n                print('1 '+str(num1))\\n        else:\\n            print(2)\\n            print(str(num1) + ' ' + str(num2))\\nelse:\\n    if num1 == 0:\\n        if prime == 0:\\n            print(1)\\n            print(arr[0])\\n        else:\\n            print(1)\\n            print(prime)\\n    else:\\n        print(2)\\n        print(str(num1) + ' ' + str(num2))\\n\\n\", \"n = int(input())\\nL = list(map(int, input().split()))\\nP = [-1 for _ in range(2000001)]\\n\\ndef premier(n):\\n    if P[n] >= 0:\\n        return P[n]\\n    for i in range(2,int(n**0.5)+1):\\n        if n%i==0:\\n            P[n] = False\\n            return False\\n    P[n] = True\\n    return True\\n\\ne = L.count(1)\\nif n == 1:\\n    print(1)\\n    print(L[0])\\nelif e > 1:\\n    L.sort()\\n    i = 1\\n    while i < n and L[i] == 1:\\n        i += 1\\n    u = i\\n    ok = 0\\n    while i < n:\\n        if premier(L[i]+1):\\n            print(u+1)\\n            for j in range(u):\\n                print(1,end=\\\" \\\")\\n            print(L[i])\\n            ok = 1\\n            break\\n        i += 1\\n    if ok == 0:\\n        print(u)\\n        for i in range(u):\\n            print(1,end=\\\" \\\")\\nelse:\\n    ok = 0\\n    for i in range(n-1):  \\n        for j in range(i+1,n):\\n            t = premier(L[i]+L[j])\\n            if t:\\n                print(2)\\n                print(str(L[i])+\\\" \\\"+str(L[j]))\\n                ok = 1\\n                break\\n        if ok:\\n            break\\n    if ok == 0:\\n        print(1)\\n        print(L[0])\\n\", \"#import sys\\nimport math\\n#sys.stdin = open('in', 'r')\\nn = int(input())\\na = [int(x) for x in input().split()]\\n#n,m = map(int, input().split())\\n\\n\\np1 = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511]\\nprimes = dict(map(lambda x:(x, True), p1))\\ndef isPrime(v):\\n    if v in primes:\\n        return primes[v]\\n    sqrti = math.sqrt(v)\\n    for i in range(len(p1)):\\n        if v % p1[i] == 0:\\n            primes[v] = False\\n            return False\\n        if p1[i] > sqrti:\\n            break\\n    primes[v] = True\\n    return True\\n\\ndone=False\\ncnt1 = sum(filter(lambda x: x == 1, a))\\n\\nif cnt1 > 1:\\n    for i in range(n):\\n        if a[i] != 1 and isPrime(a[i] + 1):\\n            done=True\\n            print(cnt1 + 1)\\n            print(a[i],end=' ')\\n            print(str.join(' ', ['1']*cnt1))\\n            break\\n    if not done:\\n        done = True\\n        print(cnt1)\\n        print(str.join(' ', ['1']*cnt1))\\nelse:    \\n    for i in range(n):\\n        for j in range(n):\\n            if i != j and isPrime(a[i]+a[j]):\\n                done = True\\n                print(2)\\n                print(f'{a[i]} {a[j]}')\\n                break\\n        if done:\\n            break\\n    if not done:\\n        print(1)\\n        print(a[0])\\n\", \"def isPrime(n):\\n    if n <= 1: \\n        return False\\n    if n <= 3: \\n        return True\\n    if n % 2 == 0 or n % 3 == 0: \\n        return False\\n    i = 5\\n    while(i * i <= n) : \\n        if (n % i == 0 or n % (i + 2) == 0) : \\n            return False\\n        i = i + 6\\n    return True\\n\\nn = int(input())\\narr = list(map(int,input().split()))\\n\\ncount = {}\\n\\nfor i in arr:\\n    try:\\n        count[i] += 1\\n    except KeyError:\\n        count[i] = 1\\n        \\nnumbers = list(count.keys())\\nnumbers.sort()\\na,b = -1,-1\\nflag = False\\nfor i in range(len(numbers)-1):\\n    for j in range(i+1,len(numbers)):\\n        if isPrime(numbers[i]+numbers[j]):\\n            a = numbers[i]\\n            b = numbers[j]\\n            flag = True\\n            break\\n    if flag:\\n        break\\n        \\nif a == b and a == -1:\\n    if numbers[0] == 1 and count[1] > 1:\\n        print(count[1])\\n        for i in range(count[1]):\\n            print(1,end=' ')\\n        print()\\n    else:\\n        print(1)\\n        print(numbers[0])\\nelif a == 1:\\n    print(count[1]+1)\\n    for i in range(count[1]):\\n        print(1,end=' ')\\n    print(b)\\nelse:\\n    if numbers[0] == 1 and count[1] > 2:\\n        print(count[1])\\n        for i in range(count[1]):\\n            print(1,end=' ')\\n        print()\\n    else:\\n        print(2)\\n        print(a,b)\\n    \\n    \\n    \", \"import sys\\n\\n\\ndef get_primes(n: int):\\n    from itertools import chain\\n    from array import array\\n    primes = {2, 3}\\n    is_prime = (array('b', (0, 0, 1, 1, 0, 1, 0)) +\\n                array('b', (1, 0, 0, 0, 1, 0))*((n-1)//6))\\n\\n    for i in chain.from_iterable((list(range(5, n+1, 6)), list(range(7, n+1, 6)))):\\n        if is_prime[i]:\\n            primes.add(i)\\n            for j in range(i*3, n+1, i*2):\\n                is_prime[j] = 0\\n\\n    return is_prime, primes\\n\\n\\nn = int(input())\\na = list(map(int, input().split()))\\nis_prime, primes = get_primes(2*10**6)\\n\\none_count = a.count(1)\\nif one_count > 1:\\n    for i in range(n):\\n        if a[i] != 1 and is_prime[a[i] + 1]:\\n            print(one_count + 1)\\n            print(*([1]*one_count + [a[i]]))\\n            return\\n    else:\\n        print(one_count)\\n        print(*([1] * one_count))\\nelse:\\n    for i in range(n):\\n        for j in range(n):\\n            if i != j and is_prime[a[i] + a[j]]:\\n                print(2)\\n                print(a[i], a[j])\\n                return\\n    else:\\n        print(1)\\n        print(a[0])\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2\\n2 3\\n\",\n    \"2\\n2 2\\n\",\n    \"3\\n2 1 1\\n\",\n    \"2\\n83 14\\n\",\n    \"10\\n10 10 1 2 3 3 1 2 1 5\\n\",\n    \"100\\n314 905 555 526 981 360 424 104 920 814 143 872 741 592 105 573 837 962 220 692 560 493 889 824 145 491 828 960 889 87 375 486 609 423 386 323 124 830 206 446 899 522 514 696 786 783 268 483 318 261 675 445 1000 896 812 277 131 264 860 514 701 678 792 394 324 244 483 357 69 931 590 452 626 451 976 317 722 564 809 40 265 709 13 700 769 869 131 834 712 478 661 369 805 668 512 184 477 896 808 168\\n\",\n    \"100\\n174 816 593 727 182 151 842 277 1 942 307 939 447 738 823 744 319 394 515 451 875 950 319 789 384 292 190 758 927 103 246 1 675 42 398 631 382 893 646 2 773 157 992 425 804 565 500 242 2 657 611 647 4 331 99 1 694 18 119 364 458 569 94 999 72 7 297 102 982 859 786 868 178 393 642 254 707 41 103 764 934 70 775 41 188 199 767 64 84 899 626 224 279 188 659 374 105 178 154 758\\n\",\n    \"100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"100\\n966 680 370 134 202 826 254 620 700 336 938 344 368 108 732 130 134 700 996 904 644 734 184 134 996 46 146 928 320 664 304 160 358 306 330 132 674 16 338 138 926 994 196 960 972 972 756 276 600 982 588 978 868 572 446 578 692 976 780 434 882 344 980 536 856 916 966 936 178 300 294 568 984 54 238 718 582 400 572 142 118 306 222 850 948 954 682 256 70 550 830 980 646 970 688 56 552 592 200 682\\n\",\n    \"100\\n598 236 971 958 277 96 651 366 629 50 601 822 744 326 276 330 413 531 791 655 450 173 992 80 401 760 227 64 350 711 258 545 212 690 996 515 983 835 388 311 970 608 185 164 491 419 295 293 274 93 339 761 155 307 991 857 309 957 563 232 328 682 779 637 312 888 305 184 15 556 427 211 327 313 516 815 914 588 592 988 151 839 828 339 196 462 752 454 865 479 356 529 320 59 908 840 294 882 189 6\\n\",\n    \"20\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 204239 1 194239 216480\\n\",\n    \"10\\n4 3 1 1 1 1 1 1 1 1\\n\",\n    \"2\\n1000000 1000000\\n\",\n    \"1\\n4\\n\",\n    \"1\\n1\\n\",\n    \"2\\n999997 999994\\n\",\n    \"5\\n1 1 1 8 9\\n\",\n    \"3\\n1 5 8\\n\",\n    \"2\\n999996 999997\\n\",\n    \"2\\n1 2\\n\",\n    \"3\\n1 8 9\\n\",\n    \"2\\n1 1\\n\",\n    \"2\\n1 3\\n\",\n    \"3\\n1 9 8\\n\",\n    \"6\\n1 3 3 3 3 20\\n\",\n    \"1\\n3\\n\",\n    \"2\\n3 3\\n\",\n    \"5\\n1 1 1 8 3\\n\",\n    \"1\\n9\\n\",\n    \"3\\n2 4 7\\n\",\n    \"6\\n2 5 1 1 1 1\\n\",\n    \"3\\n1 3 14\\n\",\n    \"1\\n6\\n\",\n    \"3\\n2 7 12\\n\",\n    \"3\\n3 6 7\\n\",\n    \"3\\n7 3 2\\n\",\n    \"3\\n1 8 5\\n\",\n    \"2\\n1000000 999993\\n\",\n    \"5\\n1 5 8 1 1\\n\",\n    \"1\\n8\\n\",\n    \"3\\n1 13 13\\n\",\n    \"3\\n5 8 1\\n\",\n    \"3\\n8 1 5\\n\",\n    \"3\\n1 3 8\\n\",\n    \"2\\n1 9\\n\",\n    \"2\\n5 5\\n\",\n    \"1\\n5\\n\",\n    \"3\\n1 83 14\\n\",\n    \"5\\n123445 32892 32842 432721 39234\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n3 2\\n\",\n    \"1\\n2\\n\",\n    \"3\\n1 1 2\\n\",\n    \"2\\n14 83\\n\",\n    \"4\\n1 1 10 1\\n\",\n    \"2\\n104 905\\n\",\n    \"4\\n1 1 738 1\\n\",\n    \"100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"1\\n966\\n\",\n    \"2\\n96 277\\n\",\n    \"18\\n1 1 1 1 1 1 1 216480 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"9\\n4 1 1 1 1 1 1 1 1\\n\",\n    \"1\\n1000000\\n\",\n    \"1\\n4\\n\",\n    \"1\\n1\\n\",\n    \"1\\n999997\\n\",\n    \"3\\n1 1 1\\n\",\n    \"2\\n8 5\\n\",\n    \"2\\n999997 999996\\n\",\n    \"2\\n1 2\\n\",\n    \"2\\n9 8\\n\",\n    \"2\\n1 1\\n\",\n    \"1\\n1\\n\",\n    \"2\\n8 9\\n\",\n    \"2\\n20 3\\n\",\n    \"1\\n3\\n\",\n    \"1\\n3\\n\",\n    \"3\\n1 1 1\\n\",\n    \"1\\n9\\n\",\n    \"2\\n7 4\\n\",\n    \"5\\n2 1 1 1 1\\n\",\n    \"2\\n14 3\\n\",\n    \"1\\n6\\n\",\n    \"2\\n12 7\\n\",\n    \"2\\n7 6\\n\",\n    \"2\\n2 3\\n\",\n    \"2\\n5 8\\n\",\n    \"2\\n999993 1000000\\n\",\n    \"3\\n1 1 1\\n\",\n    \"1\\n8\\n\",\n    \"1\\n1\\n\",\n    \"2\\n8 5\\n\",\n    \"2\\n5 8\\n\",\n    \"2\\n8 3\\n\",\n    \"1\\n1\\n\",\n    \"1\\n5\\n\",\n    \"1\\n5\\n\",\n    \"2\\n14 83\\n\",\n    \"1\\n123445\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/665/D",
  "starter_code": ""
}