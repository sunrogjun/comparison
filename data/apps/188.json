{
  "task_id": "APPS/188",
  "problem_id": 188,
  "prompt": "Daenerys Targaryen has an army consisting of k groups of soldiers, the i-th group contains a_{i} soldiers. She wants to bring her army to the other side of the sea to get the Iron Throne. She has recently bought an airplane to carry her army through the sea. The airplane has n rows, each of them has 8 seats. We call two seats neighbor, if they are in the same row and in seats {1, 2}, {3, 4}, {4, 5}, {5, 6} or {7, 8}.\n\n [Image] A row in the airplane \n\nDaenerys Targaryen wants to place her army in the plane so that there are no two soldiers from different groups sitting on neighboring seats.\n\nYour task is to determine if there is a possible arranging of her army in the airplane such that the condition above is satisfied.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 10000, 1 \u2264 k \u2264 100)\u00a0\u2014 the number of rows and the number of groups of soldiers, respectively.\n\nThe second line contains k integers a_1, a_2, a_3, ..., a_{k} (1 \u2264 a_{i} \u2264 10000), where a_{i} denotes the number of soldiers in the i-th group.\n\nIt is guaranteed that a_1 + a_2 + ... + a_{k} \u2264 8\u00b7n.\n\n\n-----Output-----\n\nIf we can place the soldiers in the airplane print \"YES\" (without quotes). Otherwise print \"NO\" (without quotes).\n\nYou can choose the case (lower or upper) for each letter arbitrary.\n\n\n-----Examples-----\nInput\n2 2\n5 8\n\nOutput\nYES\n\nInput\n1 2\n7 1\n\nOutput\nNO\n\nInput\n1 2\n4 4\n\nOutput\nYES\n\nInput\n1 4\n2 2 1 2\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first sample, Daenerys can place the soldiers like in the figure below:\n\n [Image] \n\nIn the second sample, there is no way to place the soldiers in the plane since the second group soldier will always have a seat neighboring to someone from the first group.\n\nIn the third example Daenerys can place the first group on seats (1, 2, 7, 8), and the second group an all the remaining seats.\n\nIn the fourth example she can place the first two groups on seats (1, 2) and (7, 8), the third group on seats (3), and the fourth group on seats (5, 6).",
  "solutions": "[\"import sys\\n\\ndef r():\\n    return list(map(int, input().split()))\\n\\nn, k = list(map(int, input().split()))\\na = r()\\n\\ncnt4 = n\\ncnt2 = 2*n\\ncnt1 = 0\\nfor i in range(k):\\n    x = min((a[i]+1)//4, cnt4)\\n    cnt4 -= x\\n    a[i] = max(0, a[i]-4*x)\\n\\ncnt2 += cnt4\\ncnt1 += cnt4\\nfor i in range(k):\\n    x = min(a[i]//2, cnt2)\\n    cnt2 -= x\\n    a[i] = max(0, a[i]-2*x)\\n\\ncnt1 += cnt2\\nfor i in range(k):\\n    cnt1 -= a[i]\\n\\nif (cnt1 < 0):\\n    print('NO')\\nelse:\\n    print('YES')\\n\\n\\n    \\n\\n\", \"# encoding:utf-8\\n\\ndef main():\\n\\tn, k = list(map(int, input().split()))\\n\\tnums = list(map(int, input().split()))\\n\\t\\n\\tseat_two = n * 2\\n\\tseat_four = n\\n\\tseat_one = 0\\n\\tn_four = sum([x // 4 for x in nums])\\n\\tnums = [x % 4 for x in nums]\\n\\tn_two = sum([x // 2 for x in nums])\\n\\tn_one = sum([x % 2 for x in nums]) \\n\\n\\t#print(n_one, n_two, n_four)\\n\\t#print(seat_one, seat_two, seat_four)\\n\\n\\tif seat_four >= n_four:\\n\\t\\t# there is rest of 4 seat\\n\\t\\tseat_four -= n_four\\n\\t\\tn_four = 0\\n\\n\\t\\t# break seat seat_one and seat_two\\n\\t\\tseat_two += seat_four\\n\\t\\tseat_one += seat_four\\n\\t\\tseat_four = 0\\n\\telse:\\n\\t\\t# there is rest of 4 people\\n\\t\\tn_four -= seat_four\\n\\t\\tseat_four = 0\\n\\n\\t\\t# break 4 people to 2, 2\\n\\t\\tn_two += n_four * 2\\n\\t\\tn_four = 0\\n\\n\\t#print(n_one, n_two, n_four)\\n\\t#print(seat_one, seat_two, seat_four)\\n\\n\\n\\tif seat_two >= n_two:\\n\\t\\tseat_two -= n_two\\n\\t\\tn_two = 0\\n\\t\\tif seat_two + seat_one >= n_one:\\n\\t\\t\\tprint(\\\"YES\\\")\\n\\t\\telse:\\n\\t\\t\\tprint(\\\"NO\\\")\\n\\telse:\\n\\t\\tn_two -= seat_two\\n\\t\\tseat_two = 0\\n\\t\\tn_one += n_two * 2\\n\\t\\tif seat_one >= n_one:\\n\\t\\t\\tprint(\\\"YES\\\")\\n\\t\\telse:\\n\\t\\t\\tprint(\\\"NO\\\")\\n\\ndef __starting_point():\\n\\tmain()\\n1\\n__starting_point()\", \"n, k = list(map(int, input().strip().split()))\\ngroups = list(map(int, input().strip().split()))\\n\\n\\ndef fetch(delim, num_places):\\n    for i, g in enumerate(groups):\\n        num_g = min(g//delim, num_places)\\n        g -= num_g*delim\\n        num_places -= num_g\\n        groups[i] = g\\n\\n        if num_places == 0:\\n            break\\n\\n    return num_places\\n\\nnum_4 = fetch(4, n)\\nnum_2 = fetch(2, 2*n) + num_4\\nnum_2 += fetch(2, num_4)\\nif sum(groups) <= num_2:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"n,k = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\n\\nmiddles = n\\nsides = n*2\\nsingles = 0\\n\\nfor i,a in enumerate(A):\\n    s = a//4\\n    s = min(s, middles)\\n    middles -= s\\n    A[i] -= 4*s\\n\\nfor i,a in enumerate(A):\\n    s = a//2\\n    s = min(s, sides)\\n    sides -= s\\n    A[i] -= 2*s\\n\\nfor i,a in enumerate(A):\\n    s = a//2\\n    s = min(s, middles)\\n    middles -= s\\n    singles += s\\n    A[i] -= 2*s\\n\\nsingles += sides\\nsingles += middles*2\\n\\nfor i,a in enumerate(A):\\n    s = a\\n    s = min(s, singles)\\n    singles -= s\\n    A[i] -= s\\n\\nrem = sum(A)\\n\\nif rem == 0:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\\n\", \"def func(a):\\n\\tif(a<0):\\n\\t\\treturn 0\\n\\telse:\\n\\t\\treturn a\\n\\nn,k=list(map(int,input().split()))\\nl=list(map(int,input().split()))\\ntwo = 2*n\\nfour = n\\nbaki=[]\\nfor val in l:\\n\\tif(val>=4):\\n\\t\\tans=min(four,val//4)\\n\\t\\tval=val-ans*4\\n\\t\\tfour-=ans\\n\\tans=min(two,(val)//2)\\n\\tval=val-ans*2\\n\\ttwo-=ans\\n\\tbaki.append(func(val))\\nstore=sum(baki)\\nif(store==0):\\n\\tprint(\\\"YES\\\")\\nelif(store>0 and four==0 and two==0):\\n\\tprint(\\\"NO\\\")\\nelse:\\n\\tbaki.sort(reverse=True)\\n\\tcap1=four\\n\\tcap2=four\\n\\tfor val in baki:\\n\\t\\tif(val==3):\\n\\t\\t\\tif(cap1>0 and cap2>0):\\n\\t\\t\\t\\tcap1-=1\\n\\t\\t\\t\\tcap2-=1\\n\\t\\t\\telse:\\n\\t\\t\\t\\ttwo-=2\\n\\t\\telif(val==2):\\n\\t\\t\\tif(two>0):\\n\\t\\t\\t\\ttwo-=1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tif(cap1>0):\\n\\t\\t\\t\\t\\tcap1-=1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tcap2-=2\\n\\t\\telif(val==1):\\n\\t\\t\\tif(cap2>0):\\n\\t\\t\\t\\tcap2-=1\\n\\t\\t\\telif(cap1>0):\\n\\t\\t\\t\\tcap1-=1\\n\\t\\t\\telse:\\n\\t\\t\\t\\ttwo-=1\\n\\tif(cap2<0 or cap1<0 or two<0):\\n\\t\\tprint(\\\"NO\\\")\\n\\telse:\\n\\t\\tprint(\\\"YES\\\")\\n\\t\\t\\n\\n\\n\\n\\t\\t\\n\\n\\n\", \"n, m = list(map(int, input().split()))\\nz = list(map(int, input().split()))\\nh = z[:]\\ndouble = 2 * n\\nfour = n\\njj = []\\nfor i in range(len(h)):\\n    while four > 0 and h[i] >= 4:\\n        h[i] -= 4\\n        four -= 1\\n    if (h[i] != 0):\\n        jj.append(h[i])\\nss = []\\nfor i in range(len(jj)):\\n    while four > 0 and jj[i] >= 3:\\n        jj[i] -= 3\\n        four -= 1\\n    if jj[i] != 0:\\n        ss.append(jj[i])\\n\\ntt = []\\nfor i in range(len(ss)):\\n    while double > 0 and ss[i] >= 2:\\n        ss[i] -= 2\\n        double -= 1\\n    if ss[i]:\\n        tt.append(ss[i])\\n\\nplaces = double + four * 2\\ngg = []\\nfor i in range(len(tt)):\\n    while four > 0 and tt[i] >= 2:\\n        tt[i] -= 2\\n        places -= 1\\n        four -= 1\\n    if tt[i]:\\n        gg.append(tt[i])\\nif (sum(gg) <= places):\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\\n    \\n\\n\\n    \\n\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n\\ns2 = 2 * n\\ns4 = n\\ns1 = 0\\n\\ntmp = sum([ai // 4 for ai in a])\\ns4 -= min(tmp, n)\\ns2 -= 2 * max(tmp - n, 0)\\n\\nfor ai in a:\\n    if ai % 4 == 2:\\n        if 0 < s2:\\n            s2 -= 1\\n        elif 0 < s4:\\n            s4 -= 1\\n            s1 += 1\\n        else:\\n            s1 -= 2\\n\\nfor ai in a:\\n    if ai % 4 == 1:\\n        if 0 < s1:\\n            s1 -= 1\\n        elif 0 < s2:\\n            s2 -= 1\\n        else:\\n            s4 -= 1\\n            s2 += 1\\n\\nfor ai in a:\\n    if ai % 4 == 3:\\n        if 0 < s4:\\n            s4 -= 1\\n        elif 1 < s2:\\n            s2 -= 2\\n        elif 1 == s2:\\n            s2 -= 1\\n            s1 -= 1\\n        else:\\n            s1 -= 3\\n\\nif 0 <= s1 and 0 <= s2 and 0 <= s4:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"import sys\\n\\n\\ndef main():\\n    n, k = list(map(int, sys.stdin.readline().split()))\\n    x = list(map(int, sys.stdin.readline().split()))\\n    ch = n\\n    dv = 2 * n\\n\\n    for i in range(k):\\n        if x[i] % 4 == 2 and dv > 0:\\n            x[i] -= 2\\n            dv -= 1\\n    for i in range(k):\\n        while x[i] > 3 and ch > 0:\\n            x[i] -= 4\\n            ch -= 1\\n\\n    for i in range(k):\\n        if x[i] % 4 == 1 and dv > 0:\\n            x[i] -= 1\\n            dv -= 1\\n\\n    for i in range(k):\\n        while x[i] >= 3 and ch > 0:\\n            x[i] -= 4\\n            ch -= 1\\n    p1 = 0\\n    p2 = 0\\n    for i in range(k):\\n        if x[i] == 2:\\n            if p2 > 0:\\n                p2 -= 1\\n                x[i] = 0\\n            elif ch > 0:\\n                x[i] = 0\\n                p1 += 1\\n                ch -= 1\\n            elif p1 > 1:\\n                p1 -= 2\\n                x[i] = 0\\n        elif x[i] == 1:\\n            if p1 > 0:\\n                p1 -= 1\\n                x[i] = 0\\n            elif ch > 0:\\n                p2 += 1\\n                x[i] = 0\\n                ch -= 1\\n            elif p2 > 0:\\n                p2 -= 1\\n                x[i] = 0\\n\\n        while x[i] > 0 and dv > 0:\\n            x[i] -= 2\\n            dv -= 1\\n\\n    ok = True\\n    for i in range(k):\\n        if x[i] > 0:\\n            ok = False\\n            break\\n\\n    if ok:\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\n\\n\\nmain()\\n\", \"n, k = map(int, input().split())\\nseat = {4:n, 2:n*2, 1:0}\\nextra1 = 0\\na = sorted(map(int, input().split()), reverse=True)\\n\\ndef sit(n, m):\\n    num = min(seat[n], m)\\n    seat[n] -= num\\n    return m - num\\n\\nfor m in a:\\n    p4 = m // 4\\n    p3, p2, p1 = 0, 0, 0\\n    if m%4 == 3:\\n        p3 = 1\\n    else:\\n        p2 = int(m % 4 > 1)\\n        p1 = int(m % 2)\\n\\n    extra4 = sit(4, p4)\\n    p2 += extra4*2\\n    if sit(4, p3) > 0:\\n        p2 += 1\\n        p1 += 1\\n\\n    extra2 = sit(2, p2)\\n    x = sit(4, extra2)\\n    seat[1] += extra2 - x\\n    p1 += x * 2\\n\\n    extra1 += p1\\n\\nextra1 = sit(1, extra1)\\nx = sit(4, extra1)\\nseat[2] += extra1 - x\\ny = sit(2, x)\\n\\nif y > 0:\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\", \"import sys\\nn, k = [ int(x) for x in input().split() ]\\narr = list( map( int, input().split()) )\\n\\ncnt_2 = 2 * n\\ncnt_4 = n\\ncnt_1 = 0\\n\\ni = 0\\nwhile(cnt_4 > 0 and i < k):\\n    tmp = int(arr[i] / 4)\\n    if(tmp > 0 and cnt_4 > 0):\\n        arr[i] = arr[i] - 4 * min(tmp, cnt_4)\\n        cnt_4 = cnt_4 - min(tmp, cnt_4)\\n    i = i + 1\\n\\nif(cnt_4 > 0):\\n    cnt_2 = cnt_2 + cnt_4\\n    cnt_1 = cnt_1 + cnt_4\\n    cnt_4 = 0\\n\\ni = 0\\nwhile(cnt_2 > 0 and i < k):\\n    tmp = int(arr[i] / 2)\\n    if(tmp > 0 and cnt_2 > 0):\\n        arr[i] = arr[i] - 2 * min(tmp, cnt_2)\\n        cnt_2 = cnt_2 - min(tmp, cnt_2)\\n    i = i + 1\\n\\nif(cnt_2 > 0):\\n    cnt_1 = cnt_1 + cnt_2\\n    cnt_2 = 0\\n\\ni = 0\\nwhile(i < k):\\n    tmp = arr[i]\\n    if(tmp > cnt_1):\\n        print(\\\"NO\\\")\\n        return\\n    elif(tmp > 0 and tmp <= cnt_1):\\n        cnt_1 = cnt_1 - tmp\\n        arr[i] = arr[i] - tmp\\n    i = i + 1\\n\\nprint(\\\"YES\\\")\\n\", \"\\\"\\\"\\\"\\n    Author      : Arif Ahmad\\n    Date        : \\n    Algo        : \\n    Difficulty  : \\n\\\"\\\"\\\"\\nfrom sys import stdin, stdout\\n\\ndef main():\\n    n, k = [int(_) for _ in stdin.readline().strip().split()]\\n    a = [int(_) for _ in stdin.readline().strip().split()]\\n\\n    cornerSlot = 2 * n\\n    middleSlot = 2 * n\\n    slotForOne = 0\\n    single = 0\\n    for x in a:\\n        req = x // 2\\n        #print('corner:', cornerSlot, ' middle:', middleSlot, ' single:', slotForOne)\\n        #print('group of:', x, ' req:', req, '\\\\n')\\n        \\n        if req % 2 == 1:\\n            hand = 1\\n            req -= 1\\n        else:\\n            hand = 0\\n\\n        # try to accommodate even no. of pairs in middle \\n        if middleSlot >= req:\\n            middleSlot -= req\\n            req = 0\\n        elif middleSlot > 0 and req > middleSlot:\\n            req -= middleSlot\\n            middleSlot = 0\\n\\n        if hand: req += 1\\n\\n        # now accommodate rest of the pairs in the corner\\n        if cornerSlot >= req:\\n            cornerSlot -= req\\n            req = 0\\n        elif cornerSlot > 0 and req > cornerSlot:\\n            req -= cornerSlot\\n            cornerSlot = 0            \\n            \\n        # again, accommodate rest of the pairs in middle\\n        pairInMiddle = False\\n        if middleSlot >= req and (req > 0):\\n            middleSlot -= req\\n            req = 0\\n            pairInMiddle = True\\n        elif middleSlot > 0 and req > middleSlot:\\n            req -= middleSlot\\n            middleSlot = 0\\n            pairInMiddle = True\\n            \\n        if middleSlot % 2 == 1 and pairInMiddle:\\n            middleSlot -= 1\\n            slotForOne += 1\\n\\n        #print('req now:', req)\\n        if x % 2 == 1: single += 1\\n        if req > 0: single += (req * 2)\\n\\n        if single > 0:\\n            if slotForOne >= single:\\n                slotForOne -= single\\n                single = 0\\n            elif slotForOne > 0:\\n                single -= slotForOne\\n                slotForOne = 0\\n\\n    total = cornerSlot + middleSlot\\n    while single > 0 and total > 0:\\n        total -= 1\\n        single -= 1\\n\\n    if single: ans = 'NO'\\n    else: ans = 'YES' \\n    stdout.write(ans)\\n\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"N,K = list(map(int,input().split()))\\na = [int(i) for i in input().split()]\\nN = {4:N,3:0,2:N*2,1:0}\\n\\nworks = True\\na.sort(reverse=True)\\n\\nfor i in range(K):\\n    r4 = min(N[4],a[i]//4)\\n    a[i]-=4*r4\\n    N[4]-=r4\\n\\na.sort(reverse = True)\\n#print(a,N)\\nfor i in range(K):\\n    if a[i]==0:\\n        continue\\n    r2 = min(N[2],a[i]//2)\\n    a[i]-=2*r2\\n    N[2]-=r2\\n\\na.sort(reverse = True)\\n#print(a,N)\\nfor i in range(K):\\n    #print(\\\"a\\\",a,N,a[i])\\n    if a[i]==0:\\n        continue\\n    if a[i]>=4:\\n        works = False\\n        break\\n    #print(\\\"x\\\")\\n    if a[i]==3:\\n        #print(\\\" ai is 3\\\")\\n        x = min(N[4],1)\\n        a[i]-=3*x\\n        N[4]-=x\\n        \\n    elif a[i]==2:\\n        #print( \\\"ai is 2\\\")\\n        x = min(N[2],a[i]//2)\\n        a[i]-=2*x\\n        N[2]-=x\\n        \\n        x = min(N[4],a[i]//2)\\n        a[i]-=2*x\\n        N[4]-=x\\n        N[1]+=x\\n\\n        x = min(N[1],a[i])\\n        a[i]-=x\\n        N[1]-=x\\n\\n    elif a[i]==1:\\n        #print(\\\" ai is 1\\\")\\n        N[1]+=N[2]\\n        N[1]+=2*N[4]\\n        N[4] = 0\\n        N[2]=0\\n        \\n        x = min(N[1],a[i])\\n        a[i]-=x\\n        N[1]-=x\\n   \\n    if a[i]!=0:\\n        #print(a[i])\\n        works = False\\n        break\\n\\n\\nif works:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"n, k = map(int, input().split())\\n\\na = list(map(int, input().split()))\\n\\nc = [0, 0, 0, 0]\\n\\nfor t in a:\\n    c[0] += t//4\\n    if t%4: c[t%4] += 1\\n\\nc[0] += c[3]\\nc[3] = 0\\n\\nif c[0] > n:\\n    c[2] += 2*(c[0]-n)\\n    c[0] = n\\n\\nt = min(n-c[0], c[1], c[2])\\nc[0] += t\\nc[1] -= t\\nc[2] -= t\\n\\nt = min(n-c[0], (c[1]+1)//2)\\nc[0] += t\\nc[1] -= min(c[1], t*2)\\n\\nt = min(n-c[0], c[2])\\nc[0] += t\\nc[2] -= min(c[2], t+t//2)\\n\\nc[2] += c[1]\\nc[1] = 0\\n\\nprint(\\\"YES\\\" if c[2] <= 2*n else \\\"NO\\\")\", \"import heapq\\nrows, groups = list(map(int,input().split()))\\ncounts = list([(-1)*int(x) for x in input().split()])\\n\\nfours = rows\\ntwos = 2*rows\\nones = 0\\n\\nf = True\\nheapq.heapify(counts)\\nwhile fours+twos+ones>0 and len(counts)>0:\\n    i = heapq.heappop(counts)\\n    i = i * (-1)\\n    if fours >= 1:\\n        if i < 4:\\n            twos+=fours\\n            ones+=fours\\n            fours = 0\\n            heapq.heappush(counts, i*(-1))\\n        else:\\n            d, m = divmod(i, 4)\\n            if d > fours:\\n                i -= fours*4\\n                fours=0\\n                if i>0:\\n                    heapq.heappush(counts, i*(-1))\\n            else:\\n                i -= d*4\\n                fours -= d\\n                if i>0:\\n                    heapq.heappush(counts, i*(-1))\\n    elif twos >= 1:\\n        if i < 2:\\n            ones += twos\\n            twos = 0\\n            heapq.heappush(counts, i*(-1))\\n        else:\\n            d, m = divmod(i, 2)\\n            if d > twos:\\n                i -= twos*2\\n                twos = 0\\n                if i > 0:\\n                    heapq.heappush(counts, i*(-1))\\n            else:\\n                i -= d*2\\n                twos -= d\\n                if i > 0:\\n                    heapq.heappush(counts, i*(-1))\\n    elif ones >= 1:\\n        if i > ones:\\n            f=False\\n            break\\n        else:\\n            ones -= i\\nif len(counts) > 0 or f == False:\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\\n\\n\\n\\n\\n\\n\\n\", \"debug = 0\\nread = lambda: map(int, input().split())\\nk, n = read()\\na = list(read())\\ncnt4 = k\\ncnt2 = 2 * k\\nfor i in range(n):\\n    cnt = min(cnt4, a[i] // 4)\\n    a[i] -= cnt * 4\\n    cnt4 -= cnt\\nif debug: print(*a)\\nfor i in range(n):\\n    cnt = min(cnt2, a[i] // 2)\\n    a[i] -= cnt * 2\\n    cnt2 -= cnt\\nif debug: print(' '.join(map(str, a)), ' ', cnt2, cnt4)\\nc = [0] * 20\\nfor i in a:\\n    c[min(i, 19)] += 1\\nif debug:\\n    print(cnt2, cnt4, c)\\nd = min(cnt4, c[3])\\nc[3] -= d\\ncnt4 -= d\\nd = min(cnt4, c[1], c[2])\\nc[1] -= d\\nc[2] -= d\\ncnt4 -= d\\nd = min(cnt2, c[2])\\nc[2] -= d\\ncnt2 -= d\\nd = min(cnt2, c[1])\\nc[1] -= d\\ncnt2 -= d\\nd = min(cnt4, (c[2] + 2) // 3 + int(c[2] > 1))\\nc[2] -= d + d // 2\\ncnt4 -= d\\nif debug:\\n    print('cnt4 = ', cnt4)\\n    print('c[1] = ', c[1])\\nd = min(cnt4, c[2])\\nc[2] -= d\\ncnt4 -= d\\nd = min(cnt4, (c[1] + 1) // 2)\\nc[1] -= d * 2\\ncnt4 -= d\\nd = min(cnt4, c[1])\\nc[1] -= d\\ncnt4 -= d\\nprint('YES' if sum(c[1:]) == 0 else 'NO')\", \"read = lambda: map(int, input().split())\\nk, n = read()\\na = list(read())\\ncnt4 = k\\ncnt2 = 2 * k\\nfor i in range(n):\\n    cnt = min(cnt4, a[i] // 4)\\n    a[i] -= cnt * 4\\n    cnt4 -= cnt\\nfor i in range(n):\\n    cnt = min(cnt2, a[i] // 2)\\n    a[i] -= cnt * 2\\n    cnt2 -= cnt\\nc = [0] * 20\\nfor i in a:\\n    c[min(i, 19)] += 1\\nd = min(cnt4, c[3])\\nc[3] -= d\\ncnt4 -= d\\nd = min(cnt4, c[1], c[2])\\nc[1] -= d\\nc[2] -= d\\ncnt4 -= d\\nd = min(cnt2, c[2])\\nc[2] -= d\\ncnt2 -= d\\nd = min(cnt2, c[1])\\nc[1] -= d\\ncnt2 -= d\\nd = min(cnt4, (c[2] + 2) // 3 + int(c[2] > 1))\\nc[2] -= d + d // 2\\ncnt4 -= d\\nd = min(cnt4, c[2])\\nc[2] -= d\\ncnt4 -= d\\nd = min(cnt4, (c[1] + 1) // 2)\\nc[1] -= d * 2\\ncnt4 -= d\\nd = min(cnt4, c[1])\\nc[1] -= d\\ncnt4 -= d\\nprint('YES' if sum(c[1:]) == 0 else 'NO')\", \"n, k = map(int, input().split())\\n\\nl = [0, 0, 2 * n, 0, n]\\n\\ninp = sorted(map(int, input().split()), reverse = True)\\n\\nfor i in range(k):\\n\\tif inp[i] > 1 and inp[i] & 1:\\n\\t\\tinp[i] -= 1\\n\\t\\tinp.append(1)\\n\\nfor a in inp:\\n\\tif a == 1:\\n\\t\\tif l[1]:\\n\\t\\t\\tl[1] -= 1\\n\\t\\t\\ta = 0\\n\\t\\telif l[2]:\\n\\t\\t\\tl[2] -= 1\\n\\t\\t\\ta = 0\\n\\t\\telif l[4]:\\n\\t\\t\\tl[4] -= 1\\n\\t\\t\\tl[2] += 1\\n\\t\\t\\ta = 0\\n\\telse:\\t\\n\\t\\twhile a > 2 and l[4]:\\n\\t\\t\\ta -= 4\\n\\t\\t\\tl[4] -= 1\\n\\t\\twhile a and l[2]:\\n\\t\\t\\ta -= 2\\n\\t\\t\\tl[2] -= 1\\n\\t\\twhile a and l[4]:\\n\\t\\t\\ta -= 2\\n\\t\\t\\tl[4] -= 1\\n\\t\\t\\tl[1] += 1\\n\\t\\twhile a and l[1]:\\n\\t\\t\\ta -= 1\\n\\t\\t\\tl[1] -= 1\\n\\n\\tif a:\\n\\t\\tprint('NO')\\n\\t\\treturn\\n\\nprint('YES')\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\na1 = 0\\na2 = 2 * n\\na4 = n\\nflag = True\\ns1 = 0\\ns2 = 0\\nfor x in a:\\n    while x >= 3:\\n        if a4:\\n            a4 -= 1\\n            x -= 4\\n        elif a2 > 1:\\n            a2 -= 1\\n            x -= 2\\n        else:\\n            flag = False\\n            break\\n    if not flag:\\n        break\\n    if x == 2:\\n        s2 += 1\\n    elif x == 1:\\n        s1 += 1\\n#print(s1, s2, a1, a2, a4)\\nwhile s2:\\n    if a2:\\n        a2 -= 1\\n        s2 -= 1\\n    elif a4:\\n        a4 -= 1\\n        a1 += 1\\n        s2 -= 1\\n    else:\\n        s1 += 2\\n        s2 -= 1\\nprint(\\\"YES\\\" if flag and a1 + a2 + a4 * 2 >= s1 else \\\"NO\\\")\\n\\n\", \"n,k = list(map(int, input().split()))\\n\\na = list(map(int,input().split()))\\nall_sum = sum(a)\\nr4,r2 = n,n*2\\nfor v in range(len(a)):\\n\\tmid = a[v] // 4\\n\\ta[v] = a[v] % 4\\n\\tif mid <= r4:\\n\\t\\tr4 -= mid\\n\\telse:\\n\\t\\ta[v] += 4 * (mid - r4)\\n\\t\\tr4 = 0\\n\\tif r4 == 0:\\n\\t\\tbreak\\nmid = 0\\nr22 = 0\\nfor v in a:\\n\\tif v % 2 == 1:\\n\\t\\tmid += 1\\n\\tr22 += v // 2\\n#print(r4,r22,mid,r2)\\nif r4 > 0:\\n\\tmid -=r4\\n\\tr22 -= r4\\n\\tif mid < 0:\\n\\t\\tr22 -= (mid // -2)\\n\\t\\tmid = 0\\n\\nif r22 + mid > r2:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\\n\\n\\n\\n\\n\", \"n,k = list(map(int, input().split()))\\n\\na = list(map(int,input().split()))\\nall_sum = sum(a)\\nr4,r2 = n,n*2\\nfor v in range(len(a)):\\n\\tmid = a[v] // 4\\n\\ta[v] = a[v] % 4\\n\\tif mid <= r4:\\n\\t\\tr4 -= mid\\n\\telse:\\n\\t\\ta[v] += 4 * (mid - r4)\\n\\t\\tr4 = 0\\n\\tif r4 == 0:\\n\\t\\tbreak\\nmid = 0\\nr22 = 0\\nfor v in a:\\n\\tif v % 2 == 1:\\n\\t\\tmid += 1\\n\\tr22 += v // 2\\n#print(r4,r22,mid,r2)\\nif r4 > 0:\\n\\tmid -=r4\\n\\tr22 -= r4\\n\\tif mid < 0:\\n\\t\\tr22 -= (mid // -2)\\n\\t\\tmid = 0\\n\\nif r22 + mid > r2:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\\n\\n\\n\\n\\n\\n\", \"import sys\\n\\nn, k = map(int, input().split())\\na = list(map(int, input().split()))\\n\\nmid = n\\nside = n*2\\n\\ndef removeZeroes(a):\\n    return [x for x in a if x > 0]\\n\\n#FOR 4 \\nfor i in range(len(a)):\\n    if a[i] >= 4:\\n        while a[i] >= 4 and (mid > 0 or side > 1):\\n            a[i] -= 4\\n            if mid:\\n                mid -= 1\\n            else:\\n                side -= 2\\n\\n#FOR 3\\nfor i in range(len(a)):\\n    if not(mid > 0 or side > 1): \\n        break\\n    if a[i] == 3:\\n        if mid > 0:\\n            mid -= 1\\n        else:\\n            side -= 2\\n        a[i] = 0\\n            \\n#REMOVE GROUPS WITH 0 REMAINED\\na = removeZeroes(a)\\n\\nif a.count(2) + a.count(1) != len(a):\\n    print(\\\"NO\\\")\\n    return\\n\\nfor i in range(len(a)):\\n    if a[i] == 2 and side > 0:\\n        side -= 1\\n        a[i] = 0\\n\\nfor i in range(len(a)):\\n    if a[i] == 1 and side > 0:\\n        side -= 1\\n        a[i] = 0\\n\\na = removeZeroes(a)\\na.sort()\\nwhile len(a) > 0 and a[0] == 1 and a[-1] == 2 and mid > 0:\\n    a = a[1:-1]\\n    mid -= 1\\nif len(a) > 0 and a[0] == 1:\\n    if (a.count(1)+1) // 2 <= mid:\\n        print(\\\"YES\\\")\\n        return\\n    else:\\n        print(\\\"NO\\\")\\n        return\\nelif len(a) > 0 and a[0] == 2:\\n    while len(a) > 2 and mid > 1:\\n        a = a[3:]\\n        mid -= 2\\n    if mid >= len(a):\\n        print(\\\"YES\\\")\\n        return\\n\\nif len(a) > 0:\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\", \"n,k=list(map(int,input().split()))\\na=list(map(int,input().split()))\\ns2=n*2\\ns4=n\\ns1=0\\nf=1\\nrem1=0\\nrem2=0\\nfor i in range(len(a)):\\n    if(f):\\n        while(a[i]>=3):\\n            if(s4>0):\\n                a[i]-=4\\n                s4-=1\\n            elif(s2>0):\\n                a[i]-=2\\n                s2-=1\\n            else:\\n                f=0\\n        if(a[i]==1 and f):\\n            rem1+=1\\n        elif(a[i]==2 and f):\\n            rem2+=1\\nwhile(rem2>0 and f):\\n    if(s2>0):\\n        rem2-=1\\n        s2-=1\\n    elif(s4>0):\\n        rem2-=1\\n        s4-=1\\n        s1+=1\\n    else:\\n        rem2-=1\\n        rem1+=2\\nif(rem1>s1+s2+s4*2):\\n    f=0\\nif(f):\\n    print('YES')\\nelse:\\n    print('NO')\\n\", \"n, k = list(map(int, input().split()))\\na = sorted(list(map(int, input().split())))[::-1]\\nm = n\\nfor j in range(len(a)):\\n  waste = min(a[j] // 4, m)\\n  m -= waste\\n  a[j] -= waste * 4\\n  if m == 0:\\n    break\\nm1, m2, m3, msukabljat = 0, 0, 0, []\\nfor x in a:\\n  m1 += (x == 1)\\n  m2 += (x == 2)\\n  m3 += (x == 3)\\n  msukabljat += ([x] if x >= 4 else [])\\nwaste = min(m1, m2, m)\\nm, m1, m2 = m - waste, m1 - waste, m2 - waste\\nwaste = min(m3 // 2, m // 2)\\nm, m3 = m - waste * 2, m3 - waste * 2\\nwaste = min(m2 // 3, m // 2)\\nm, m2 = m - waste * 2, m2 - waste * 3\\nwaste = min(m1, m2, m3, m // 2)\\nm, m1, m2, m3 = m - waste * 2, m1 - waste, m2 - waste, m3 - waste\\nwaste = min(m3, m)\\nm, m3 = m - waste, m3 - waste\\nwaste = min(m1 // 2, m)\\nm, m1 = m - waste, m1 - 2 * waste\\nwaste = min(m1, m)\\nm, m1 = m - waste, m1 - waste\\nwaste = min(m2, m)\\nm, m2 = m - waste, m2 - waste\\nif m1 + m2 + m3 * 2 + sum([x // 2 + x % 2 for x in msukabljat]) <= 2 * n:\\n  print(\\\"YES\\\")\\nelse:\\n  print(\\\"NO\\\")\\n\\n\", \"n, k = map(int, input().split())\\n\\nl = list(map(int, input().split()))\\n\\nl = sorted(l, reverse=True)\\ns = 0\\nfor _ in range(n):\\n    if l[0] <= 0:\\n        break\\n    if l[0] <= 2:\\n        l[0] -= min(l[0],2)\\n        s += 1\\n    l[0] -= min(l[0],4)\\n    l = sorted(l, reverse=True)\\nfor _ in range(n):\\n    if l[0] <= 0:\\n        break\\n    l[0] -= min(l[0],2)\\n    l = sorted(l, reverse=True)\\nfor _ in range(n):\\n    if l[0] <= 0:\\n        break\\n    l[0] -= min(l[0],2)\\n    l = sorted(l, reverse=True)\\nfor _ in range(s):\\n    if l[0] <= 0:\\n        break\\n    l[0] -= min(l[0],1)\\n    l = sorted(l, reverse=True)\\n\\n\\nif l[0] <= 0:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n\\nleft4seat = n\\nleft2seat = n * 2\\nleft1seat = 0\\nfor i in range (0, k) :\\n\\tleft4seat -= a[i] // 4\\n\\tif (left4seat < 0) :\\n\\t\\tleft2seat += 2 * left4seat\\n\\t\\tleft4seat = 0\\n\\nindex = 0\\nwhile (index < k ) :\\n\\tleftSol = a[index] % 4\\n\\tif (leftSol == 3) : \\n\\t\\tif (left4seat > 0) : left4seat -= 1\\n\\t\\telse : \\n\\t\\t\\tif (left1seat > 0) :\\n\\t\\t\\t\\tif (left2seat == 0 and left1seat >= 2) : left1seat -= 3\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tleft2seat -= 1\\n\\t\\t\\t\\t\\tleft1seat -= 1\\n\\t\\t\\telse :\\n\\t\\t\\t\\tleft2seat -= 2\\n\\telif (leftSol == 2) :\\n\\t\\tif (left4seat > 0) : \\n\\t\\t\\tleft4seat -= 1\\n\\t\\t\\tleft1seat += 1\\n\\t\\telse : \\n\\t\\t\\tif (left2seat == 0 and left1seat >= 2) : left1seat -= 2\\n\\t\\t\\telse : left2seat -= 1\\n\\telif (leftSol == 1) :\\n\\t\\tif (left1seat > 0) : left1seat -= 1\\n\\t\\telif (left4seat > 0) : \\n\\t\\t\\tleft4seat -= 1\\n\\t\\t\\tleft2seat += 1\\n\\t\\telse : \\n\\t\\t\\tleft2seat -= 1\\n\\tif (left4seat < 0 or left2seat < 0) : break\\n\\tindex += 1\\n\\nif (index == k and left4seat >= 0 and left2seat >= 0) : print(\\\"YES\\\")\\nelse : print(\\\"NO\\\")\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 2\\n5 8\\n\",\n    \"1 2\\n7 1\\n\",\n    \"1 2\\n4 4\\n\",\n    \"1 4\\n2 2 1 2\\n\",\n    \"10000 100\\n749 2244 949 2439 2703 44 2394 124 285 3694 3609 717 1413 155 974 1778 1448 1327 1487 3458 319 1395 3783 2184 2062 43 826 38 3276 807 1837 4635 171 1386 1768 1128 2020 2536 800 782 3058 174 455 83 647 595 658 109 33 23 70 39 38 1 6 35 94 9 22 12 6 1 2 2 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 9938\\n\",\n    \"100 15\\n165 26 83 64 235 48 36 51 3 18 5 10 9 6 5\\n\",\n    \"1 4\\n2 2 2 2\\n\",\n    \"5691 91\\n6573 1666 2158 2591 4636 886 263 4217 389 29 1513 1172 617 2012 1855 798 1588 979 152 37 890 375 1091 839 385 382 1 255 117 289 119 224 182 69 19 71 115 13 4 22 35 2 60 12 6 12 19 9 3 2 2 6 5 1 7 7 3 1 5 1 7 1 4 1 1 3 2 1 2 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 5631\\n\",\n    \"2000 50\\n203 89 1359 3105 898 1381 248 365 108 766 961 630 265 819 838 125 1751 289 177 81 131 564 102 95 49 74 92 101 19 17 156 5 5 4 20 9 25 16 16 2 8 5 4 2 1 3 4 1 3 2\\n\",\n    \"10000 100\\n800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800 800\\n\",\n    \"10000 100\\n749 2244 949 2439 2703 44 2394 124 285 3694 3609 717 1413 155 974 1778 1448 1327 1487 3458 319 1395 3783 2184 2062 43 826 38 3276 807 1837 4635 171 1386 1768 1128 2020 2536 2050 1074 605 979 1724 1608 672 88 1243 129 718 544 3590 37 187 600 738 34 64 316 58 6 84 252 75 68 40 68 4 29 29 8 13 11 5 1 5 1 3 2 1 1 1 2 3 4 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 3\\n\",\n    \"8459 91\\n778 338 725 1297 115 540 1452 2708 193 1806 1496 1326 2648 176 199 93 342 3901 2393 2718 800 3434 657 4037 291 690 1957 3280 73 6011 2791 1987 440 455 444 155 261 234 829 1309 1164 616 34 627 107 213 52 110 323 81 98 8 7 73 20 12 56 3 40 12 8 7 69 1 14 3 6 2 6 8 3 5 4 4 3 1 1 4 2 1 1 1 8 2 2 2 1 1 1 2 8421\\n\",\n    \"1 3\\n2 3 2\\n\",\n    \"10000 91\\n2351 1402 1137 2629 4718 1138 1839 1339 2184 2387 165 370 918 1476 2717 879 1152 5367 3940 608 941 766 1256 656 2768 916 4176 489 1989 1633 2725 2329 2795 1970 667 340 1275 120 870 488 225 59 64 255 207 3 37 127 19 224 34 283 144 50 132 60 57 29 18 6 7 4 4 15 3 5 1 10 5 2 3 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 9948\\n\",\n    \"10000 83\\n64 612 2940 2274 1481 1713 860 1264 104 5616 2574 5292 4039 292 1416 854 3854 1140 4344 3904 1720 1968 442 884 2032 875 291 677 2780 3074 3043 2997 407 727 344 511 156 321 134 51 382 336 591 52 134 39 104 10 20 15 24 2 70 39 14 16 16 25 1 6 2 2 1 1 1 2 4 2 1 2 1 2 1 1 1 1 1 1 1 1 1 1 9968\\n\",\n    \"4000 71\\n940 1807 57 715 532 212 3842 2180 2283 744 1453 800 1945 380 2903 293 633 391 2866 256 102 46 228 1099 434 210 244 14 27 4 63 53 3 9 36 25 1 12 2 14 12 28 2 28 8 5 11 8 2 3 6 4 1 1 1 3 2 1 1 1 2 2 1 1 1 1 1 2 1 1 3966\\n\",\n    \"3403 59\\n1269 1612 453 795 1216 941 19 44 1796 324 2019 1397 651 382 841 2003 3013 638 1007 1001 351 95 394 149 125 13 116 183 20 78 208 19 152 10 151 177 16 23 17 22 8 1 3 2 6 1 5 3 13 1 8 4 3 4 4 4 2 2 3378\\n\",\n    \"2393 33\\n1381 2210 492 3394 912 2927 1189 269 66 102 104 969 395 385 369 354 251 28 203 334 20 10 156 29 61 13 30 4 1 32 2 2 2436\\n\",\n    \"10000 100\\n749 2244 949 2439 2703 44 2394 124 285 3694 3609 717 1413 155 974 1778 1448 1327 1487 3458 319 1395 3783 2184 2062 43 826 38 3276 807 1837 4635 171 1386 1768 1128 2020 2536 800 782 3058 174 455 83 647 595 658 109 33 23 70 39 38 1 6 35 94 9 22 12 6 1 2 2 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 9939\\n\",\n    \"10000 89\\n1001 1531 2489 457 1415 617 2057 2658 3030 789 2500 3420 1550 376 720 78 506 293 1978 383 3195 2036 891 1741 1817 486 2650 360 2250 2531 3250 1612 2759 603 5321 1319 791 1507 265 174 877 1861 572 172 580 536 777 165 169 11 125 31 186 113 78 27 25 37 8 21 48 24 4 33 35 13 15 1 3 2 2 8 3 5 1 1 6 1 1 2 1 1 2 2 1 1 2 1 9953\\n\",\n    \"4 16\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n\",\n    \"10000 71\\n110 14 2362 260 423 881 1296 3904 1664 849 57 631 1922 917 4832 1339 3398 4578 59 2663 2223 698 4002 3013 747 699 1230 2750 239 1409 6291 2133 1172 5824 181 797 26 281 574 557 19 82 624 387 278 53 64 163 22 617 15 35 42 48 14 140 171 36 28 22 5 49 17 5 10 14 13 1 3 3 9979\\n\",\n    \"3495 83\\n2775 2523 1178 512 3171 1159 1382 2146 2192 1823 799 231 502 16 99 309 656 665 222 285 11 106 244 137 241 45 41 29 485 6 62 38 94 5 7 93 48 5 10 13 2 1 2 1 4 8 5 9 4 6 1 1 1 3 4 3 7 1 2 3 1 1 7 1 1 2 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 3443\\n\",\n    \"1000 40\\n1701 1203 67 464 1884 761 11 559 29 115 405 133 174 63 147 93 41 19 1 15 41 8 33 4 4 1 4 1 1 2 1 2 1 1 2 1 1 2 1 4\\n\",\n    \"347 20\\n55 390 555 426 140 360 29 115 23 113 58 30 33 1 23 3 35 5 7 363\\n\",\n    \"10000 100\\n749 2244 949 2439 2703 44 2394 124 285 3694 3609 717 1413 155 974 1778 1448 1327 1487 3458 319 1395 3783 2184 2062 43 826 38 3276 807 1837 4635 171 1386 1768 1128 2020 2536 800 782 3058 174 455 83 647 595 658 109 33 23 70 39 38 1 6 35 94 9 22 12 6 1 2 2 4 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 9940\\n\",\n    \"10000 93\\n1388 119 711 23 4960 4002 2707 188 813 1831 334 543 338 3402 1808 3368 1428 971 985 220 1521 457 457 140 332 1503 1539 2095 1891 269 5223 226 1528 190 428 5061 410 1587 1149 1934 2275 1337 1828 275 181 85 499 29 585 808 751 401 635 461 181 164 274 36 401 255 38 60 76 16 6 35 79 46 1 39 11 2 8 2 4 14 3 1 1 1 1 1 2 1 3 1 1 1 1 2 1 1 9948\\n\",\n    \"4981 51\\n5364 2166 223 742 350 1309 15 229 4100 3988 227 1719 9 125 787 427 141 842 171 2519 32 2554 2253 721 775 88 720 9 397 513 100 291 111 32 238 42 152 108 5 58 96 53 7 19 11 2 5 5 6 2 4966\\n\",\n    \"541 31\\n607 204 308 298 398 213 1182 58 162 46 64 12 38 91 29 2 4 12 19 3 7 9 3 6 1 1 2 1 3 1 529\\n\",\n    \"100 100\\n6 129 61 6 87 104 45 28 3 35 2 14 1 37 2 4 24 4 3 1 6 4 2 1 1 3 1 2 2 9 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 22\\n\",\n    \"1 4\\n2 2 2 1\\n\",\n    \"1 3\\n2 2 2\\n\",\n    \"2 5\\n8 2 2 2 2\\n\",\n    \"1 4\\n1 1 2 2\\n\",\n    \"1 3\\n2 2 3\\n\",\n    \"1 3\\n4 2 2\\n\",\n    \"1 4\\n2 1 2 2\\n\",\n    \"1 3\\n3 2 2\\n\",\n    \"2 8\\n2 2 2 2 2 2 1 1\\n\",\n    \"2 6\\n2 2 2 2 2 2\\n\",\n    \"1 4\\n1 2 2 2\\n\",\n    \"1 4\\n1 1 1 1\\n\",\n    \"2 7\\n2 2 2 2 2 2 2\\n\",\n    \"2 8\\n1 1 1 1 1 1 1 1\\n\",\n    \"3 7\\n12 2 2 2 2 2 2\\n\",\n    \"2 6\\n4 1 3 1 1 3\\n\",\n    \"1 3\\n2 2 4\\n\",\n    \"5 15\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n\",\n    \"2 8\\n2 2 2 2 1 1 1 1\\n\",\n    \"1 2\\n6 2\\n\",\n    \"4 13\\n2 2 2 2 2 2 2 2 2 2 2 2 4\\n\",\n    \"2 7\\n1 1 1 4 2 2 2\\n\",\n    \"3 8\\n8 2 2 2 2 2 2 2\\n\",\n    \"2 8\\n1 1 1 1 2 2 2 2\\n\",\n    \"2 8\\n2 2 2 2 1 1 2 2\\n\",\n    \"1 4\\n2 2 1 1\\n\",\n    \"3 9\\n2 2 2 2 2 2 2 2 2\\n\",\n    \"2 6\\n2 2 2 2 2 5\\n\",\n    \"1 1\\n6\\n\",\n    \"2 1\\n16\\n\",\n    \"1 1\\n2\\n\",\n    \"2 8\\n2 2 2 2 2 2 2 1\\n\",\n    \"4 16\\n1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2\\n\",\n    \"2 7\\n4 1 1 1 1 2 2\\n\",\n    \"2 6\\n2 2 2 5 2 2\\n\",\n    \"3 1\\n22\\n\",\n    \"2 8\\n2 2 2 2 1 1 1 3\\n\",\n    \"3 12\\n2 1 2 2 2 1 2 2 2 1 2 2\\n\",\n    \"1 4\\n2 2 3 1\\n\",\n    \"2 6\\n5 2 2 2 2 2\\n\",\n    \"20 100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"1 3\\n2 2 1\\n\",\n    \"1 2\\n3 3\\n\",\n    \"2 6\\n2 3 2 2 3 2\\n\",\n    \"2 8\\n2 2 1 1 2 2 2 2\\n\",\n    \"2 6\\n3 3 2 2 2 2\\n\",\n    \"3 12\\n2 2 2 2 2 2 2 2 2 1 1 1\\n\",\n    \"3 10\\n2 2 2 2 2 2 2 2 2 3\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/839/B",
  "starter_code": ""
}