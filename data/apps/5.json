{
  "task_id": "APPS/5",
  "problem_id": 5,
  "prompt": "Luba is surfing the Internet. She currently has n opened tabs in her browser, indexed from 1 to n from left to right. The mouse cursor is currently located at the pos-th tab. Luba needs to use the tabs with indices from l to r (inclusive) for her studies, and she wants to close all the tabs that don't belong to this segment as fast as possible.\n\nEach second Luba can either try moving the cursor to the left or to the right (if the cursor is currently at the tab i, then she can move it to the tab max(i - 1, a) or to the tab min(i + 1, b)) or try closing all the tabs to the left or to the right of the cursor (if the cursor is currently at the tab i, she can close all the tabs with indices from segment [a, i - 1] or from segment [i + 1, b]). In the aforementioned expressions a and b denote the minimum and maximum index of an unclosed tab, respectively. For example, if there were 7 tabs initially and tabs 1, 2 and 7 are closed, then a = 3, b = 6.\n\nWhat is the minimum number of seconds Luba has to spend in order to leave only the tabs with initial indices from l to r inclusive opened?\n\n\n-----Input-----\n\nThe only line of input contains four integer numbers n, pos, l, r (1 \u2264 n \u2264 100, 1 \u2264 pos \u2264 n, 1 \u2264 l \u2264 r \u2264 n) \u2014 the number of the tabs, the cursor position and the segment which Luba needs to leave opened.\n\n\n-----Output-----\n\nPrint one integer equal to the minimum number of seconds required to close all the tabs outside the segment [l, r].\n\n\n-----Examples-----\nInput\n6 3 2 4\n\nOutput\n5\n\nInput\n6 3 1 3\n\nOutput\n1\n\nInput\n5 2 1 5\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first test Luba can do the following operations: shift the mouse cursor to the tab 2, close all the tabs to the left of it, shift the mouse cursor to the tab 3, then to the tab 4, and then close all the tabs to the right of it.\n\nIn the second test she only needs to close all the tabs to the right of the current position of the cursor.\n\nIn the third test Luba doesn't need to do anything.",
  "solutions": "[\"n, pos, l, r = map(int, input().split())\\n\\nif l > 1 and r < n:\\n    if l <= pos and pos <= r:\\n        if pos - l < r - pos:\\n            print(pos - l + 1 + r - l + 1)\\n        else:\\n            print(r - pos + 1 + r - l + 1)\\n    elif pos > r:\\n        print(pos - r + 1 + r - l + 1)\\n    else:\\n        print(l - pos + 1 + r - l + 1)\\nelif l == 1 and r < n:\\n    print(int(abs(pos - r)) + 1)\\nelif l > 1 and r == n:\\n    print(int(abs(pos - l)) + 1)\\nelse:\\n    print(0)\", \"from sys import stdin as cin\\nfrom sys import stdout as cout\\n\\ndef main():\\n    n, pos, l, r = list(map(int, cin.readline().split()))\\n    if l == 1 and r == n:\\n        print(0)\\n        return\\n    if l == 1:\\n        print(1 + abs(r - pos))\\n        return\\n    if r == n:\\n        print(1 + abs(pos - l))\\n        return\\n    if l == r:\\n        print(2 + abs(pos - l))\\n        return\\n    print(2 + min(abs(r - pos), abs(l - pos)) + r - l)\\n\\nmain()\\n\", \"n, p,l,r =map(int, input().split())\\n\\ns1,s2 = 0, 0\\nl1,l2,r1,r2 = 0, 0 ,0 ,0\\np1 = p\\nif l > 1:\\n    l1 += abs(p - l)\\n    l1 += 1\\n    p1 = l\\nif r < n:\\n    r1 += abs(r - p1)\\n    r1 += 1\\ns1 = l1+r1\\np2 = p\\nif r < n:\\n    r2 += abs(r - p2)\\n    r2 += 1\\n    p2 = r\\nif l > 1:\\n    l2 += abs(p2 - l)\\n    l2 += 1\\ns2 = l2+r2\\nprint(min(s1, s2))\", \"n, pos, l, r = map(int, input().split())\\nif (l <= pos <= r):\\n\\tif (l == 1 and r == n):\\n\\t\\tprint(0)\\n\\telif (l == 1 and r < n):\\n\\t\\tprint(r - pos + 1)\\n\\telif (r == n and l > 1):\\n\\t\\tprint(pos - l + 1)\\n\\telse:\\n\\t\\tprint(r - l + min(r - pos, pos - l) + 2)\\nelif (pos < l):\\n\\tif (r == n):\\n\\t\\tprint(l - pos + 1)\\n\\telse:\\n\\t\\tprint(r - pos + 2)\\nelif (pos > r):\\n\\tif (l == 1):\\n\\t\\tprint(pos - r + 1)\\n\\telse:\\n\\t\\tprint(pos - l + 2)\", \"n, pos, l, r = list(map(int, input().split()))\\n\\nif l == 1 and r == n:\\n    print(0)\\n\\nelse:\\n    if l == 1 and r != n:\\n        print(abs(pos - r) + 1)\\n\\n    elif l != 1 and r == n:\\n        print(abs(pos - l) + 1)\\n\\n    else:\\n        if l <= pos <= r:\\n            print(r - l + 2 + min(abs(pos - l), abs(pos - r)))\\n\\n        elif pos < l:\\n            print(r - l + 2 + abs(pos - l))\\n\\n        else:\\n            print(r - l + 2 + abs(pos - r))\\n\", \"n,pos,l,r = list(map(int,input().split()))\\nif (pos > r):\\n    if (l == 1):\\n        print(pos-r+1)\\n    else:\\n        print(pos-l+2)\\nelif(pos < l):\\n    if (r == n):\\n        print(l-pos+1)\\n    else:\\n        print(r-pos+2)\\nelse:\\n    if (l == 1 and r == n):\\n        print(0)\\n    elif l == 1:\\n        print(r-pos+1)\\n    elif r == n:\\n        print(pos-l+1)\\n    else:\\n        print(r-l + min(pos-l, r-pos) + 2)\\n    \\n\", \"n, p, l, r = map(int, input().split())\\nif l == 1:\\n    if r == n:\\n        print(0)\\n    else:\\n        print(abs(p - r) + 1)\\nelif r == n:\\n    print(abs(l - p) + 1)\\nelse:\\n    print(min(abs(p - l), abs(p - r)) + abs(r - l) + 2)\", \"n, pos, l, r = list(map(int, input().split()))\\n\\nl_close = l == 1\\nr_close = r == n\\nans = 0\\nif l_close and r_close:\\n\\tpass\\nelif l_close:\\n\\tans += abs(pos - r) + 1\\nelif r_close:\\n\\tans += abs(pos - l) + 1\\nelse:\\n\\tans += min(abs(pos - r), abs(pos - l)) + 1 + abs(l - r) + 1\\n\\nprint(ans)\\n\", \"import itertools as it, math, functools as ft\\nn, pos, l, r = map(int, input().split())\\nres = 0\\nif l == 1:\\n\\tif r == n:\\n\\t\\tres = 0\\n\\telse:\\n\\t\\tres = abs(pos - r) + 1\\nelse:\\n\\tif r == n:\\n\\t\\tres = abs(pos - l) + 1\\n\\telse:\\n\\t\\txl = abs(pos - l)\\n\\t\\txr = abs(r - pos)\\n\\t\\tif xl <= xr:\\n\\t\\t\\tres = xl + 1\\n\\t\\t\\tif l > 1:\\n\\t\\t\\t\\tres += (r - l) + 1\\n\\t\\telse:\\n\\t\\t\\tres = xr + 1\\n\\t\\t\\tif r < n:\\n\\t\\t\\t\\tres += (r - l) + 1\\n\\nprint(res)\", \"n,p,l,r=map(int,input().split())\\nif l==1 and r==n:print(0)\\nelif l==1:print(abs(r-p)+1)\\nelif r==n:print(abs(p-l)+1)\\nelse:print(min(abs(p-l),abs(r-p))+2+r-l)\", \"n, pos, l, r = list(map(int, input().split()))\\n\\nif l == 1 and r == n:\\n    print(0)\\nelif l == 1:\\n    print(abs(r - pos) + 1)\\nelif r == n:\\n    print(abs(l - pos) + 1)\\nelse:\\n    print(min(abs(l - pos) + 1 + r - l + 1, abs(r - pos) + 1 + r - l + 1))\\n\", \"n, pos, l, r = map(int, input().split())\\n\\ndef solve(n,pos,l,r):\\n    if l == 1 and r == n:\\n        return 0\\n    elif l == 1:\\n        return abs(pos-r)+1\\n    elif r == n:\\n        return abs(pos-l)+1\\n    else:\\n        if l <= pos and pos <= r:\\n            return abs(r-l) + min(abs(pos-l),abs(pos-r))+2\\n        elif pos < l:\\n            return abs(pos-l) + abs(r-l) + 2\\n        else:\\n            return abs(pos-r) + abs(r-l) + 2\\n\\nprint(solve(n,pos,l,r))\", \"n, pos, l, r = map(int, input().split())\\nif r == n and l == 1:\\n    print(0)\\nelif r == n:\\n    print(abs(pos - l) + 1)\\nelif l == 1:\\n    print(abs(r - pos) + 1)\\nelse:\\n    s1 = abs(r - pos)\\n    s2 = abs(l - pos)\\n    print(min(s1, s2) + (r - l) + 2)\", \"#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n\\n\\ndef main():\\n    n, pos, l, r = [int(_) for _ in input().split(' ')]\\n    if l is 1 and r == n:\\n        print(0)\\n        return\\n    if l is 1:\\n        print(abs(r - pos) + 1)\\n        return\\n    if r == n:\\n        print(abs(l - pos) + 1)\\n        return\\n    print(min(abs(l - pos), abs(r - pos)) + (r - l) + 2)\\n\\n\\nmain()\\n\", \"\\nn, pos, l, r = list(map(int, input().split()))\\n\\nleft_first = 10**6\\nright_first = 10**6\\n\\nif l == 1 and r == n:\\n    left_first = 0\\nelif l == 1:\\n    if pos < r:\\n        right_first = r - pos + 1\\n    else:\\n        right_first = pos - r + 1\\nelif r == n:\\n    if pos < l:\\n        left_first = l - pos + 1\\n    else:\\n        left_first = pos - l + 1\\nelif pos < l:\\n    left_first = l - pos + 1 + r - l + 1\\nelif l <= pos <= r:\\n    left_first = pos - l + r - l + 2\\n    right_first = r - pos + r - l + 2\\nelse:\\n    right_first = pos - r + r - l + 2\\n\\nprint(min([left_first, right_first]))\\n\", \"n, pos, l, r = [int(v) for v in input().split()]\\n\\nneedleft = l > 1\\nneedright = r < n\\nif needleft:\\n    if needright:\\n        dl = abs(pos - l)\\n        dr = abs(pos - r)\\n        print(min(dl, dr) + 1 + r - l + 1)\\n    else:\\n        print(abs(pos - l) + 1)\\nelse:\\n    if needright:\\n        print(abs(pos - r) + 1)\\n    else:\\n        print(0)\\n\", \"n,p,l,r = list(map(int,input().split()))\\nif l>1 and r<n:\\n    t1 = abs(p-l)+(r-l)\\n    t2 = abs(p-r)+(r-l)\\n    print(min(t1,t2)+2)\\nelif l>1 and r == n:\\n    print(abs(p-l)+1)\\nelif l==1 and r < n:\\n    print(abs(p-r)+1)\\nelse:print(0)\\n\", \"def main():\\n\\tn, pos, l, r = map(int, input().split())\\n\\tans = 0\\n\\tif l <= pos <= r:\\n\\t\\tif l == 1:\\n\\t\\t\\tif r == n:\\n\\t\\t\\t\\tprint(0)\\n\\t\\t\\t\\treturn\\n\\t\\t\\tans += r - pos + 1\\n\\t\\t\\tprint(ans)\\n\\t\\t\\treturn\\n\\t\\tif r == n:\\n\\t\\t\\tans = pos - l + 1\\n\\t\\t\\tprint(ans)\\n\\t\\t\\treturn\\n\\t\\tans = min(pos - l, r - pos) + r - l + 2\\n\\t\\tprint(ans)\\n\\t\\treturn\\n\\tif pos > r:\\n\\t\\tans += pos - r + 1\\n\\t\\tif l > 1:\\n\\t\\t\\tans += r - l + 1\\n\\t\\tprint(ans)\\n\\t\\treturn\\n\\tans += l - pos + 1\\n\\tif r < n:\\n\\t\\tans += r - l + 1\\n\\tprint(ans)\\n\\treturn\\n\\n\\nmain()\", \"def f(a, b, l, r, i):\\n    if a == l and b == r:\\n        return 0\\n    elif a == l and b > r:\\n        return 1 + abs(i - r)\\n    elif a < l and b == r:\\n        return 1 + abs(i - l)\\n    elif a < l and b > r:\\n        return 2 + abs(l - r) + min(abs(i - l), abs(i - r))\\n\\nn, p, l, r = list(map(int, input().split()))\\na, b = 1, n\\nt = 0\\n\\nprint(f(a, b, l, r, p))\\n\", \"n, pos, l, r = [int(i) for i in input().split()]\\nseconds = 0\\n\\nif l > 1:\\n    seconds += 1\\n    if abs(pos - l) < abs(pos - r) or r == n:\\n        seconds += abs(pos - l)\\n    else:\\n        seconds += r - l\\n\\nif r < n:\\n    seconds += 1\\n    if abs(pos - l) >= abs(pos - r) or l == 1:\\n        seconds += abs(pos - r)\\n    else:\\n        seconds += r - l\\nprint(seconds)\", \"n,pos,l,r=[int(i) for i in input().split()]\\nans=0\\n\\n\\nif l==1 and r==n:\\n\\tans=0\\nelif l==1:\\n\\tans=abs(r-pos)+1\\nelif r==n:\\n\\tans=abs(pos-l)+1\\nelse:\\n\\tans=r-l+2\\n\\tif pos<l:\\n\\t\\tans+=l-pos\\n\\telif l<=pos and pos<=r:\\n\\t\\tif abs(pos-l) < abs(r-pos):\\n\\t\\t\\tans+=pos-l\\n\\t\\telse:\\n\\t\\t\\tans+=r-pos\\n\\telse:\\n\\t\\tans+=pos-r\\nprint(ans)\\n\\t\\t\\n\", \"# B\\n\\nimport math\\n\\nn, pos, l, r = list(map(int, input().split()))\\n\\nif l == 1 and r == n:\\n    print(0)\\nelif l == 1:\\n    print(int(math.fabs(r - pos) + 1))\\nelif r == n:\\n    print(int(math.fabs(l - pos) + 1))\\nelse:\\n    if pos <= l:\\n        print(r - pos + 2)\\n    elif r <= pos:\\n        print(pos - l + 2)\\n    else:\\n        print(min(pos + r - 2*l, 2*r - l - pos) + 2)\\n\", \"n,pos,l,r = map(int,input().split())\\n\\nif l == 1 and r == n:\\n  print(0)\\nelif l == 1:\\n  print(abs(r-pos)+1)\\nelif r == n:\\n  print(abs(l-pos)+1)\\nelse:\\n  print(min(abs(l-pos),abs(r-pos)) + r-l + 2)\", \"\\nn,pos,l,r = [int(x) for x in input().split(' ')]\\nans = 0\\nra = abs(pos-r)\\nla = abs(pos-l)\\nif l==1:\\n    if r==n:\\n        print(0)\\n    else:\\n        print(ra+1)\\nelse:\\n    if r==n:\\n        print(la+1)\\n    else:\\n        if la<ra:\\n            print(r-l+2+la)\\n        else:\\n            print(r-l+2+ra)\", \"n,pos,l,r  = [int(i) for i in input().split()]\\n\\ntime_l = 0;\\nif l != 1:\\n    time_l += abs(pos - l) + 1 # move to l and delete\\n    pos1 = l\\nelse:\\n    pos1 = pos\\nif r != n: time_l += abs(r-pos1) + 1 # move to r and delete\\n\\ntime_r = 0;\\nif r != n:\\n    time_r += abs(pos - r) + 1 # move to l and delete\\n    pos1 = r\\nelse:\\n    pos1 = pos\\nif l != 1: time_r += abs(pos1-l) + 1 # move to r and delete\\n\\n#print(time_l, time_r)\\nprint(min(time_l, time_r))\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"6 3 2 4\\n\",\n    \"6 3 1 3\\n\",\n    \"5 2 1 5\\n\",\n    \"100 1 1 99\\n\",\n    \"100 50 1 99\\n\",\n    \"100 99 1 99\\n\",\n    \"100 100 1 99\\n\",\n    \"100 50 2 100\\n\",\n    \"100 1 100 100\\n\",\n    \"100 50 50 50\\n\",\n    \"6 4 2 5\\n\",\n    \"100 5 2 50\\n\",\n    \"10 7 3 9\\n\",\n    \"7 4 2 5\\n\",\n    \"43 16 2 18\\n\",\n    \"100 50 2 51\\n\",\n    \"6 5 2 4\\n\",\n    \"10 5 2 7\\n\",\n    \"10 10 2 9\\n\",\n    \"10 7 3 7\\n\",\n    \"64 64 8 44\\n\",\n    \"5 4 2 4\\n\",\n    \"6 6 3 5\\n\",\n    \"10 6 2 7\\n\",\n    \"8 6 2 7\\n\",\n    \"7 5 2 4\\n\",\n    \"7 5 2 6\\n\",\n    \"100 50 49 99\\n\",\n    \"100 50 2 99\\n\",\n    \"10 9 2 9\\n\",\n    \"10 10 7 9\\n\",\n    \"8 4 2 7\\n\",\n    \"100 50 2 2\\n\",\n    \"10 4 3 7\\n\",\n    \"6 3 2 5\\n\",\n    \"53 17 13 18\\n\",\n    \"10 6 3 6\\n\",\n    \"9 8 2 5\\n\",\n    \"100 50 2 3\\n\",\n    \"10 7 2 9\\n\",\n    \"6 1 2 5\\n\",\n    \"7 6 2 4\\n\",\n    \"26 12 2 4\\n\",\n    \"10 8 3 7\\n\",\n    \"100 97 3 98\\n\",\n    \"6 2 2 4\\n\",\n    \"9 2 4 6\\n\",\n    \"6 6 2 4\\n\",\n    \"50 2 25 49\\n\",\n    \"5 5 2 3\\n\",\n    \"49 11 2 17\\n\",\n    \"10 3 2 9\\n\",\n    \"10 6 3 7\\n\",\n    \"6 1 5 5\\n\",\n    \"5 5 3 4\\n\",\n    \"10 2 5 6\\n\",\n    \"7 7 3 4\\n\",\n    \"7 3 2 3\\n\",\n    \"5 1 2 4\\n\",\n    \"100 53 2 99\\n\",\n    \"10 2 4 7\\n\",\n    \"5 2 1 4\\n\",\n    \"100 65 41 84\\n\",\n    \"33 20 7 17\\n\",\n    \"7 2 3 6\\n\",\n    \"77 64 10 65\\n\",\n    \"6 1 3 4\\n\",\n    \"6 4 2 4\\n\",\n    \"11 8 2 10\\n\",\n    \"7 1 3 6\\n\",\n    \"100 50 2 50\\n\",\n    \"50 49 5 8\\n\",\n    \"15 1 10 13\\n\",\n    \"13 9 5 11\\n\",\n    \"20 3 5 8\\n\",\n    \"10 5 2 3\\n\",\n    \"7 1 3 5\\n\",\n    \"7 2 3 4\\n\",\n    \"10 5 2 5\\n\",\n    \"8 5 2 6\\n\",\n    \"8 5 3 6\\n\",\n    \"9 6 3 7\\n\",\n    \"50 46 34 37\\n\",\n    \"10 7 2 8\\n\",\n    \"8 3 1 4\\n\",\n    \"100 3 10 20\\n\",\n    \"6 2 1 5\\n\",\n    \"12 11 5 10\\n\",\n    \"98 97 72 83\\n\",\n    \"100 5 3 98\\n\",\n    \"8 5 2 7\\n\",\n    \"10 10 4 6\\n\",\n    \"10 4 2 5\\n\",\n    \"3 3 2 3\\n\",\n    \"75 30 6 33\\n\",\n    \"4 3 2 3\\n\",\n    \"2 2 1 1\\n\",\n    \"2 2 1 2\\n\",\n    \"1 1 1 1\\n\",\n    \"20 9 7 17\\n\",\n    \"10 2 3 7\\n\",\n    \"100 40 30 80\\n\",\n    \"10 6 2 3\\n\",\n    \"7 3 2 5\\n\",\n    \"10 6 2 9\\n\",\n    \"23 20 19 22\\n\",\n    \"100 100 1 1\\n\",\n    \"10 2 5 9\\n\",\n    \"9 7 2 8\\n\",\n    \"100 50 50 100\\n\",\n    \"3 1 2 2\\n\",\n    \"16 13 2 15\\n\",\n    \"9 8 2 6\\n\",\n    \"43 22 9 24\\n\",\n    \"5 4 2 3\\n\",\n    \"82 72 66 75\\n\",\n    \"7 4 5 6\\n\",\n    \"100 50 51 51\\n\",\n    \"6 5 2 6\\n\",\n    \"4 4 2 2\\n\",\n    \"4 3 2 4\\n\",\n    \"2 2 2 2\\n\",\n    \"6 1 2 4\\n\",\n    \"2 1 1 1\\n\",\n    \"4 2 2 3\\n\",\n    \"2 1 1 2\\n\",\n    \"5 4 1 2\\n\",\n    \"100 100 2 99\\n\",\n    \"10 6 3 4\\n\",\n    \"100 74 30 60\\n\",\n    \"4 1 2 3\\n\",\n    \"100 50 3 79\\n\",\n    \"10 6 2 8\\n\",\n    \"100 51 23 33\\n\",\n    \"3 1 2 3\\n\",\n    \"29 13 14 23\\n\",\n    \"6 5 2 5\\n\",\n    \"10 2 3 5\\n\",\n    \"9 3 1 6\\n\",\n    \"45 33 23 37\\n\",\n    \"100 99 1 98\\n\",\n    \"100 79 29 68\\n\",\n    \"7 7 6 6\\n\",\n    \"100 4 30 60\\n\",\n    \"100 33 50 50\\n\",\n    \"50 2 34 37\\n\",\n    \"100 70 2 99\\n\",\n    \"6 6 4 4\\n\",\n    \"41 24 14 19\\n\",\n    \"100 54 52 55\\n\",\n    \"10 5 3 6\\n\",\n    \"6 5 4 6\\n\",\n    \"10 9 2 3\\n\",\n    \"6 4 2 3\\n\",\n    \"100 68 5 49\\n\",\n    \"8 4 3 6\\n\",\n    \"9 3 2 8\\n\",\n    \"100 50 1 1\\n\",\n    \"10 9 5 9\\n\",\n    \"62 54 2 54\\n\",\n    \"100 54 30 60\\n\",\n    \"6 6 6 6\\n\",\n    \"10 2 2 9\\n\",\n    \"50 3 23 25\\n\",\n    \"24 1 5 18\\n\",\n    \"43 35 23 34\\n\",\n    \"50 46 23 26\\n\",\n    \"10 8 5 9\\n\",\n    \"6 2 2 5\\n\",\n    \"43 1 13 41\\n\",\n    \"13 2 1 5\\n\",\n    \"6 3 3 5\\n\",\n    \"14 10 4 12\\n\",\n    \"5 1 4 4\\n\",\n    \"3 3 1 1\\n\",\n    \"17 17 12 14\\n\",\n    \"20 15 6 7\\n\",\n    \"86 36 8 70\\n\",\n    \"100 69 39 58\\n\",\n    \"3 3 2 2\\n\",\n    \"3 2 1 1\\n\",\n    \"9 7 3 8\\n\",\n    \"4 4 2 3\\n\",\n    \"100 4 2 5\\n\",\n    \"100 65 5 13\\n\",\n    \"3 2 2 3\\n\",\n    \"44 38 20 28\\n\",\n    \"100 65 58 60\\n\",\n    \"16 12 8 13\\n\",\n    \"11 8 4 9\\n\",\n    \"20 9 2 10\\n\",\n    \"5 5 4 5\\n\",\n    \"100 99 1 50\\n\",\n    \"6 5 3 5\\n\",\n    \"50 29 7 48\\n\",\n    \"26 11 1 24\\n\",\n    \"5 2 3 4\\n\",\n    \"100 1 2 3\\n\",\n    \"100 60 27 56\\n\",\n    \"6 4 2 6\\n\",\n    \"8 7 3 5\\n\",\n    \"4 1 3 3\\n\",\n    \"12 9 2 10\\n\",\n    \"100 25 9 19\\n\",\n    \"10 7 3 8\\n\",\n    \"7 3 2 6\\n\",\n    \"100 39 4 40\\n\",\n    \"100 51 2 99\\n\",\n    \"15 6 4 10\\n\",\n    \"10 4 4 9\\n\",\n    \"6 4 3 4\\n\",\n    \"14 7 4 12\\n\",\n    \"4 4 1 2\\n\",\n    \"6 5 2 3\\n\",\n    \"12 12 5 5\\n\",\n    \"10 5 3 5\\n\",\n    \"8 6 2 2\\n\",\n    \"8 7 2 7\\n\",\n    \"100 33 5 60\\n\",\n    \"100 32 5 60\\n\",\n    \"79 5 3 5\\n\",\n    \"85 85 85 85\\n\",\n    \"69 69 69 69\\n\",\n    \"7 5 3 6\\n\",\n    \"7 4 2 6\\n\",\n    \"2 1 2 2\\n\",\n    \"100 2 1 90\\n\",\n    \"100 89 11 90\\n\",\n    \"10 1 2 8\\n\"\n  ],\n  \"outputs\": [\n    \"5\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"99\\n\",\n    \"50\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"49\\n\",\n    \"100\\n\",\n    \"2\\n\",\n    \"6\\n\",\n    \"53\\n\",\n    \"10\\n\",\n    \"6\\n\",\n    \"20\\n\",\n    \"52\\n\",\n    \"5\\n\",\n    \"9\\n\",\n    \"10\\n\",\n    \"6\\n\",\n    \"58\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"8\\n\",\n    \"8\\n\",\n    \"5\\n\",\n    \"7\\n\",\n    \"53\\n\",\n    \"147\\n\",\n    \"9\\n\",\n    \"5\\n\",\n    \"9\\n\",\n    \"50\\n\",\n    \"7\\n\",\n    \"6\\n\",\n    \"8\\n\",\n    \"5\\n\",\n    \"8\\n\",\n    \"50\\n\",\n    \"11\\n\",\n    \"6\\n\",\n    \"6\\n\",\n    \"12\\n\",\n    \"7\\n\",\n    \"98\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"6\\n\",\n    \"49\\n\",\n    \"5\\n\",\n    \"23\\n\",\n    \"10\\n\",\n    \"7\\n\",\n    \"6\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"6\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"145\\n\",\n    \"7\\n\",\n    \"3\\n\",\n    \"64\\n\",\n    \"15\\n\",\n    \"6\\n\",\n    \"58\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"12\\n\",\n    \"7\\n\",\n    \"50\\n\",\n    \"46\\n\",\n    \"14\\n\",\n    \"10\\n\",\n    \"7\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"7\\n\",\n    \"6\\n\",\n    \"7\\n\",\n    \"14\\n\",\n    \"9\\n\",\n    \"2\\n\",\n    \"19\\n\",\n    \"4\\n\",\n    \"8\\n\",\n    \"27\\n\",\n    \"99\\n\",\n    \"9\\n\",\n    \"8\\n\",\n    \"6\\n\",\n    \"2\\n\",\n    \"32\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"14\\n\",\n    \"7\\n\",\n    \"62\\n\",\n    \"6\\n\",\n    \"6\\n\",\n    \"12\\n\",\n    \"6\\n\",\n    \"100\\n\",\n    \"9\\n\",\n    \"9\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"17\\n\",\n    \"8\\n\",\n    \"19\\n\",\n    \"4\\n\",\n    \"14\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"100\\n\",\n    \"5\\n\",\n    \"46\\n\",\n    \"4\\n\",\n    \"107\\n\",\n    \"10\\n\",\n    \"30\\n\",\n    \"2\\n\",\n    \"12\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"20\\n\",\n    \"2\\n\",\n    \"52\\n\",\n    \"3\\n\",\n    \"58\\n\",\n    \"19\\n\",\n    \"37\\n\",\n    \"128\\n\",\n    \"4\\n\",\n    \"12\\n\",\n    \"6\\n\",\n    \"6\\n\",\n    \"2\\n\",\n    \"9\\n\",\n    \"4\\n\",\n    \"65\\n\",\n    \"6\\n\",\n    \"9\\n\",\n    \"50\\n\",\n    \"6\\n\",\n    \"54\\n\",\n    \"38\\n\",\n    \"1\\n\",\n    \"9\\n\",\n    \"24\\n\",\n    \"19\\n\",\n    \"14\\n\",\n    \"25\\n\",\n    \"7\\n\",\n    \"5\\n\",\n    \"42\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"12\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"7\\n\",\n    \"11\\n\",\n    \"92\\n\",\n    \"32\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"8\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"62\\n\",\n    \"1\\n\",\n    \"20\\n\",\n    \"9\\n\",\n    \"8\\n\",\n    \"8\\n\",\n    \"11\\n\",\n    \"2\\n\",\n    \"50\\n\",\n    \"4\\n\",\n    \"62\\n\",\n    \"14\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"35\\n\",\n    \"3\\n\",\n    \"6\\n\",\n    \"4\\n\",\n    \"11\\n\",\n    \"18\\n\",\n    \"8\\n\",\n    \"7\\n\",\n    \"39\\n\",\n    \"147\\n\",\n    \"10\\n\",\n    \"7\\n\",\n    \"3\\n\",\n    \"13\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"9\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"7\\n\",\n    \"84\\n\",\n    \"84\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"8\\n\",\n    \"2\\n\",\n    \"89\\n\",\n    \"82\\n\",\n    \"9\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/915/B",
  "starter_code": ""
}