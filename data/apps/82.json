{
  "task_id": "APPS/82",
  "problem_id": 82,
  "prompt": "Noora is a student of one famous high school. It's her final year in school\u00a0\u2014 she is going to study in university next year. However, she has to get an \u00abA\u00bb graduation certificate in order to apply to a prestigious one.\n\nIn school, where Noora is studying, teachers are putting down marks to the online class register, which are integers from 1 to k. The worst mark is 1, the best is k. Mark that is going to the certificate, is calculated as an average of all the marks, rounded to the closest integer. If several answers are possible, rounding up is produced. For example, 7.3 is rounded to 7, but 7.5 and 7.8784\u00a0\u2014 to 8. \n\nFor instance, if Noora has marks [8, 9], then the mark to the certificate is 9, because the average is equal to 8.5 and rounded to 9, but if the marks are [8, 8, 9], Noora will have graduation certificate with 8.\n\nTo graduate with \u00abA\u00bb certificate, Noora has to have mark k.\n\nNoora got n marks in register this year. However, she is afraid that her marks are not enough to get final mark k. Noora decided to ask for help in the internet, where hacker Leha immediately responded to her request. He is ready to hack class register for Noora and to add Noora any number of additional marks from 1 to k. At the same time, Leha want his hack be unseen to everyone, so he decided to add as less as possible additional marks. Please help Leha to calculate the minimal number of marks he has to add, so that final Noora's mark will become equal to k.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 100) denoting the number of marks, received by Noora and the value of highest possible mark.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 k) denoting marks received by Noora before Leha's hack.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 minimal number of additional marks, that Leha has to add in order to change Noora's final mark to k.\n\n\n-----Examples-----\nInput\n2 10\n8 9\n\nOutput\n4\nInput\n3 5\n4 4 4\n\nOutput\n3\n\n\n-----Note-----\n\nConsider the first example testcase.\n\nMaximal mark is 10, Noora received two marks\u00a0\u2014 8 and 9, so current final mark is 9. To fix it, Leha can add marks [10, 10, 10, 10] (4 marks in total) to the registry, achieving Noora having average mark equal to $\\frac{8 + 9 + 10 + 10 + 10 + 10}{6} = \\frac{57}{6} = 9.5$. Consequently, new final mark is 10. Less number of marks won't fix the situation.\n\nIn the second example Leha can add [5, 5, 5] to the registry, so that making average mark equal to 4.5, which is enough to have 5 in the certificate.",
  "solutions": "[\"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\ns = sum(a)\\nans = 0\\nc = k - 0.5\\nwhile s / n < c:\\n    s += k\\n    n += 1\\n    ans += 1\\nprint(ans)\\n\", \"n, k = list(map(int, input().split(' ')))\\nl = list(map(int, input().split(' ')))\\n\\ns = sum(l)\\ntotal = len(l)\\nres = 0\\nwhile s < total*k - total/2:\\n    s += k\\n    total += 1\\n    res += 1\\n\\nprint(res)\\n\", \"n, k = map(int, input().split())\\na = list(map(int, input().split()))\\ni = 0\\ns = sum(a)\\nwhile (s + i * k) / (n + i) < k - 0.5:\\n    i += 1\\nprint(i)\", \"def check(m):\\n    return (s + k * m) * 2 >= (2 * k - 1) * (n + m)\\n\\n\\nn, k = map(int,input().split())\\na = list(map(int, input().split()))\\n\\ns = sum(a)\\nl = -1\\nr = 10 ** 6\\nwhile l < r - 1:\\n    m = (l + r) // 2\\n    if check(m):\\n        r = m\\n    else:\\n        l = m\\n        \\nprint(r)\", \"from sys import stdin, stdout\\nimport math\\n\\nn, k = map(int, stdin.readline().split())\\nvalues = list(map(int, stdin.readline().split()))\\nans = sum(values)\\ncnt = 0\\n\\ndef round(v):\\n    if math.ceil(v) - v <= 1 / 2:\\n        return math.ceil(v)\\n    else:\\n        return math.floor(v)\\n    \\n\\nwhile round(ans / n) < k:\\n    ans += k\\n    n += 1\\n    cnt += 1\\n\\n\\nstdout.write(str(cnt))\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nprint(max(0, 2 * n * k - n - 2 * sum(a)))\\n\", \"#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n\\nimport math\\n\\n\\ndef main():\\n    n, k = [int(x) for x in input().split()]\\n    a = [int(x) for x in input().split()]\\n    if sum(a) / n >= k - .5:\\n        print(0)\\n        return\\n\\n    m = math.ceil(((k - .5) * n * 2 - 2 * sum(a)) / (2 * k - 2 * (k - .5)))\\n    print(int(m))\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"import sys\\nn, k = map(int,sys.stdin.readline().rstrip().split())\\nl = list(map(int, sys.stdin.readline().rstrip().split()))\\n\\ni = 0\\nwhile (sum(l)+k*i)/(i+n) < k-0.5:\\n    i += 1\\n\\nsys.stdout.write(str(i))\", \"import sys\\n\\ndef solve():\\n    n, k = map(int, input().split())\\n    a = [int(i) for i in input().split()]\\n\\n    tot = sum(a)\\n    cnt = 0\\n\\n    while int(tot / n + 0.5) < k:\\n        tot += k\\n        n += 1\\n        cnt += 1\\n\\n    print(cnt)\\n\\ndef __starting_point():\\n    solve()\\n__starting_point()\", \"n,k = list(map(int,input().split()))\\na = list(map(int,input().split()))\\ns = sum(a)\\np = (k-0.5)*n\\nif s >= p:\\n  print(0)\\nelse:\\n  r = int(2*(p-s))\\n  print(r)\\n\", \"n,k = map(int, input().split())\\na = list(map(int, input().split()))\\nsm = sum(a)\\nl,r = -1, 10 ** 20\\ndef check(m):\\n    return round((sm + k * m) / (n + m) + 0.000001) >= k\\nwhile r - l > 1:\\n    m = (l + r) // 2\\n    if check(m):\\n        r = m\\n    else:\\n        l = m\\nprint(r)\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n\\nans = 0\\nwhile 2 * (sum(a) + ans * k) < (n + ans) * (2 * k - 1):\\n    ans += 1\\nprint(ans)\\n\", \"n,k=list(map(int,input().split()))\\na=list(map(int,input().split()))\\nc=0\\nfor i in range(n):\\n    z=k-a[i]\\n    c+=2*z-1\\nif c<0:\\n    print(0)\\nelse:\\n    print(c)\\n    \\n    \\n\", \"n, k = map(int, input().split())\\nmarks = list(map(int, input().split()))\\nsumma = sum(marks)\\nnums = len(marks)\\nresult = summa / nums\\nhowmany = 0\\nwhile result < k - 0.5:\\n    summa += k\\n    nums += 1\\n    result = summa / nums\\n    howmany += 1\\nprint(howmany)\", \"import math\\nn, k = map(int, input().split())\\nsm = sum(list(map(int, input().split())))\\n\\na = 0\\nwhile int((sm + a*k) / (n + a) + 0.5) < k:\\n    a += 1\\nprint(a)\", \"n,k=[int(i)for i in input().split()]\\nl=[int(i)for i in input().split()]\\nans=0\\nif sum(l)/n<k-0.5:\\n\\tans = int(((k-0.5)*n-sum(l))/0.5)\\n\\nprint(ans)\\t\\n\\n\", \"n, k=map (int, input (). split ()) \\ngrades=list(map (int, input (). split ())) \\nans=(2*k-1)*n-2*sum(grades)\\nif ans<0:\\n    ans=0\\nprint (ans) \", \"x,y=list(map(int,input().split()))\\na=list(map(int,input().split()))\\nn=0\\nd=0\\nfor i in range(x):\\n\\tn=n+a[i]\\nwhile round((n+0.01)/x)!=y:\\n\\tn=n+y\\n\\tx=x+1\\n\\td+=1\\nprint(d)\\n\", \"n, k = list(map(int, input().split()))\\n\\ns = sum(map(int, input().split()))\\nleft = -1\\nright = 10 ** 100\\n\\nwhile right - left > 1:\\n    mid = (left + right) // 2\\n    whole = s + k * mid\\n    if whole * 2 // (mid + n) < 2 * k - 1:\\n        left = mid\\n    else:\\n        right = mid\\n\\nprint(right)\\n\", \"n,k = list(map(int, input().split()))\\ntot = sum(map(int,input().split()))\\n\\ni = 0\\nwhile(tot*2 < (k*2-1)*(n+i)):\\n    i+=1\\n    tot += k\\n\\nprint(i)\\n\", \"import math\\nimport re\\n\\ndef f(n):\\n    if n - math.floor(n) < 0.5:\\n        return n\\n    else :\\n        return math.ceil(n)\\n\\nn, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n\\nn1 = n\\ns = sum(a)\\nsred = s/n\\nwhile f(sred) != k:\\n    s += k\\n    n += 1\\n    sred = s/n\\n\\nprint(n - n1)\\n\\n# n, m = map(int, input().split())\\n# w = []\\n# c = []\\n# for i in range(n):\\n#     x, y = map(int, input().split())\\n#     w.append(x)\\n#     c.append(y)\\n#\\n# A = [[0] * (m + 1) for i in range(n)]\\n#\\n#\\n# for k in range(n):\\n#       for s in range(1, m + 1):\\n#             if s >= w[k]:\\n#                 A[k][s] = max(A[k - 1][s], A[k - 1][s - w[k]] + c[k])\\n#             else:\\n#                 A[k][s] = A[k-1][s]\\n#\\n# print(A[n - 1][m])\\n\\n    # arr = list(map(int, input().split()))\\n# res = 0\\n# a = {math.pow(2, i) for i in range(35)}\\n# for i in range(n-1):\\n#     for j in range(i+1,n):\\n#         if arr[i] + arr[j] % 2 % 2 % 2 % 2 % 2 in a:\\n#             res += 1\\n#\\n# print(res)\\n\\n\\n# arr = list(map(int, input().split()))\\n# m = int(input())\\n# spis = list(map(int, input().split()))\\n#\\n# arr1 = sorted(arr, reverse=True)\\n# a = [n - arr1.index(arr[el - 1]) for el in spis]\\n# print(' '.join(map(str, a)))\\n\", \"n,k=list(map(int,input().split()))\\nl = list(map(int,input().split()))\\ns = sum(l)\\nreq = k-0.5\\nif(s>=n*req):\\n\\tprint(0)\\n\\treturn\\nfor i in range(1,100000):\\n\\tif((s+(k*i))>=(n+i)*req):\\n\\t\\tprint(i)\\n\\t\\treturn\\n\", \"n, k = map(int, input().split())\\na = list(map(int, input().split()))\\nl = len(a)\\ns = sum(a)\\ncur = round(s / l + 0.0000001)\\ncount = 0\\nwhile cur != k:\\n    s += k\\n    l += 1\\n    cur = round(s / l + 0.0000001)\\n    count += 1\\nprint(count)\", \"n, k = [int(x) for x in input().split()]\\na = [int(x) for x in input().split()]\\n\\ns = sum(a)\\ni = 0\\nl = len(a)\\nwhile round(s / l + 0.00001) != k:\\n    # print(s)\\n    i += 1\\n    s += k\\n    l += 1\\nprint(i)\", \"3.5\\nn,k=[int(x) for x in input().split()]\\nmas=[int(x) for x in input().split()]\\n\\np=0\\ns=sum(mas)\\nwhile True:\\n    if s/n>=k-0.5:\\n        print(p)\\n        quit()\\n    else:\\n        s+=k\\n        n+=1\\n        p+=1\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 10\\n8 9\\n\",\n    \"3 5\\n4 4 4\\n\",\n    \"3 10\\n10 8 9\\n\",\n    \"2 23\\n21 23\\n\",\n    \"5 10\\n5 10 10 9 10\\n\",\n    \"12 50\\n18 10 26 22 22 23 14 21 27 18 25 12\\n\",\n    \"38 12\\n2 7 10 8 5 3 5 6 3 6 5 1 9 7 7 8 3 4 4 4 5 2 3 6 6 1 6 7 4 4 8 7 4 5 3 6 6 6\\n\",\n    \"63 86\\n32 31 36 29 36 26 28 38 39 32 29 26 33 38 36 38 36 28 43 48 28 33 25 39 39 27 34 25 37 28 40 26 30 31 42 32 36 44 29 36 30 35 48 40 26 34 30 33 33 46 42 24 36 38 33 51 33 41 38 29 29 32 28\\n\",\n    \"100 38\\n30 24 38 31 31 33 32 32 29 34 29 22 27 23 34 25 32 30 30 26 16 27 38 33 38 38 37 34 32 27 33 23 33 32 24 24 30 36 29 30 33 30 29 30 36 33 33 35 28 24 30 32 38 29 30 36 31 30 27 38 31 36 15 37 32 27 29 24 38 33 28 29 34 21 37 35 32 31 27 25 27 28 31 31 36 38 35 35 36 29 35 22 38 31 38 28 31 27 34 31\\n\",\n    \"33 69\\n60 69 68 69 69 60 64 60 62 59 54 47 60 62 69 69 69 58 67 69 62 69 68 53 69 69 66 66 57 58 65 69 61\\n\",\n    \"39 92\\n19 17 16 19 15 30 21 25 14 17 19 19 23 16 14 15 17 19 29 15 11 25 19 14 18 20 10 16 11 15 18 20 20 17 18 16 12 17 16\\n\",\n    \"68 29\\n29 29 29 29 29 28 29 29 29 27 29 29 29 29 29 29 29 23 29 29 26 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 26 29 29 29 29 29 29 29 29 29 29 29 29 22 29 29 29 29 29 29 29 29 29 29 29 29 29 28 29 29 29 29\\n\",\n    \"75 30\\n22 18 21 26 23 18 28 30 24 24 19 25 28 30 23 29 18 23 23 30 26 30 17 30 18 19 25 26 26 15 27 23 30 21 19 26 25 30 25 28 20 22 22 21 26 17 23 23 24 15 25 19 18 22 30 30 29 21 30 28 28 30 27 25 24 15 22 19 30 21 20 30 18 20 25\\n\",\n    \"78 43\\n2 7 6 5 5 6 4 5 3 4 6 8 4 5 5 4 3 1 2 4 4 6 5 6 4 4 6 4 8 4 6 5 6 1 4 5 6 3 2 5 2 5 3 4 8 8 3 3 4 4 6 6 5 4 5 5 7 9 3 9 6 4 7 3 6 9 6 5 1 7 2 5 6 3 6 2 5 4\\n\",\n    \"82 88\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1\\n\",\n    \"84 77\\n28 26 36 38 37 44 48 34 40 22 42 35 40 37 30 31 33 35 36 55 47 36 33 47 40 38 27 38 36 33 35 31 47 33 30 38 38 47 49 24 38 37 28 43 39 36 34 33 29 38 36 43 48 38 36 34 33 34 35 31 26 33 39 37 37 37 35 52 47 30 24 46 38 26 43 46 41 50 33 40 36 41 37 30\\n\",\n    \"94 80\\n21 19 15 16 27 16 20 18 19 19 15 15 20 19 19 21 20 19 13 17 15 9 17 15 23 15 12 18 12 13 15 12 14 13 14 17 20 20 14 21 15 6 10 23 24 8 18 18 13 23 17 22 17 19 19 18 17 24 8 16 18 20 24 19 10 19 15 10 13 14 19 15 16 19 20 15 14 21 16 16 14 14 22 19 12 11 14 13 19 32 16 16 13 20\\n\",\n    \"96 41\\n13 32 27 34 28 34 30 26 21 24 29 20 25 34 25 16 27 15 22 22 34 22 25 19 23 17 17 22 26 24 23 20 21 27 19 33 13 24 22 18 30 30 27 14 26 24 20 20 22 11 19 31 19 29 18 28 30 22 17 15 28 32 17 24 17 24 24 19 26 23 22 29 18 22 23 29 19 32 26 23 22 22 24 23 27 30 24 25 21 21 33 19 35 27 34 28\\n\",\n    \"1 26\\n26\\n\",\n    \"99 39\\n25 28 30 28 32 34 31 28 29 28 29 30 33 19 33 31 27 33 29 24 27 30 25 38 28 34 35 31 34 37 30 22 21 24 34 27 34 33 34 33 26 26 36 19 30 22 35 30 21 28 23 35 33 29 21 22 36 31 34 32 34 32 30 32 27 33 38 25 35 26 39 27 29 29 19 33 28 29 34 38 26 30 36 26 29 30 26 34 22 32 29 38 25 27 24 17 25 28 26\\n\",\n    \"100 12\\n7 6 6 3 5 5 9 8 7 7 4 7 12 6 9 5 6 3 4 7 9 10 7 7 5 3 9 6 9 9 6 7 4 10 4 8 8 6 9 8 6 5 7 4 10 7 5 6 8 9 3 4 8 5 4 8 6 10 5 8 7 5 9 8 5 8 5 6 9 11 4 9 5 5 11 4 6 6 7 3 8 9 6 7 10 4 7 6 9 4 8 11 5 4 10 8 5 10 11 4\\n\",\n    \"100 18\\n1 2 2 2 2 2 1 1 1 2 3 1 3 1 1 4 2 4 1 2 1 2 1 3 2 1 2 1 1 1 2 1 2 2 1 1 4 3 1 1 2 1 3 3 2 1 2 2 1 1 1 1 3 1 1 2 2 1 1 1 5 1 2 1 3 2 2 1 4 2 2 1 1 1 1 1 1 1 1 2 2 1 2 1 1 1 2 1 2 2 2 1 1 3 1 1 2 1 1 2\\n\",\n    \"100 27\\n16 20 21 10 16 17 18 25 19 18 20 12 11 21 21 23 20 26 20 21 27 16 25 18 25 21 27 12 20 27 18 17 27 13 21 26 12 22 15 21 25 21 18 27 24 15 16 18 23 21 24 27 19 17 24 14 21 16 24 26 13 14 25 18 27 26 22 16 27 27 17 25 17 12 22 10 19 27 19 20 23 22 25 23 17 25 14 20 22 10 22 27 21 20 15 26 24 27 12 16\\n\",\n    \"100 29\\n20 18 23 24 14 14 16 23 22 17 18 22 21 21 19 19 14 11 18 19 16 22 25 20 14 13 21 24 18 16 18 29 17 25 12 10 18 28 11 16 17 14 15 20 17 20 18 22 10 16 16 20 18 19 29 18 25 27 17 19 24 15 24 25 16 23 19 16 16 20 19 15 12 21 20 13 21 15 15 23 16 23 17 13 17 21 13 18 17 18 18 20 16 12 19 15 27 14 11 18\\n\",\n    \"100 30\\n16 10 20 11 14 27 15 17 22 26 24 17 15 18 19 22 22 15 21 22 14 21 22 22 21 22 15 17 17 22 18 19 26 18 22 20 22 25 18 18 17 23 18 18 20 13 19 30 17 24 22 19 29 20 20 21 17 18 26 25 22 19 15 18 18 20 19 19 18 18 24 16 19 17 12 21 20 16 23 21 16 17 26 23 25 28 22 20 9 21 17 24 15 19 17 21 29 13 18 15\\n\",\n    \"100 59\\n56 58 53 59 59 48 59 54 46 59 59 58 48 59 55 59 59 50 59 56 59 59 59 59 59 59 59 57 59 53 45 53 50 59 50 55 58 54 59 56 54 59 59 59 59 48 56 59 59 57 59 59 48 43 55 57 39 59 46 55 55 52 58 57 51 59 59 59 59 53 59 43 51 54 46 59 57 43 50 59 47 58 59 59 59 55 46 56 55 59 56 47 56 56 46 51 47 48 59 55\\n\",\n    \"100 81\\n6 7 6 6 7 6 6 6 3 9 4 5 4 3 4 6 6 6 1 3 9 5 2 3 8 5 6 9 6 6 6 5 4 4 7 7 3 6 11 7 6 4 8 7 12 6 4 10 2 4 9 11 7 4 7 7 8 8 6 7 9 8 4 5 8 13 6 6 6 8 6 2 5 6 7 5 4 4 4 4 2 6 4 8 3 4 7 7 6 7 7 10 5 10 6 7 4 11 8 4\\n\",\n    \"100 100\\n30 35 23 43 28 49 31 32 30 44 32 37 33 34 38 28 43 32 33 32 50 32 41 38 33 20 40 36 29 21 42 25 23 34 43 32 37 31 30 27 36 32 45 37 33 29 38 34 35 33 28 19 37 33 28 41 31 29 41 27 32 39 30 34 37 40 33 38 35 32 32 34 35 34 28 39 28 34 40 45 31 25 42 28 29 31 33 21 36 33 34 37 40 42 39 30 36 34 34 40\\n\",\n    \"100 100\\n71 87 100 85 89 98 90 90 71 65 76 75 85 100 81 100 91 80 73 89 86 78 82 89 77 92 78 90 100 81 85 89 73 100 66 60 72 88 91 73 93 76 88 81 86 78 83 77 74 93 97 94 85 78 82 78 91 91 100 78 89 76 78 82 81 78 83 88 87 83 78 98 85 97 98 89 88 75 76 86 74 81 70 76 86 84 99 100 89 94 72 84 82 88 83 89 78 99 87 76\\n\",\n    \"100 100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"100 100\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\n\",\n    \"100 100\\n1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"100 100\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 99\\n\",\n    \"100 100\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 98 100 100 100 100 98 100 100 100 100 100 100 99 98 100 100 93 100 100 98 100 100 100 100 93 100 96 100 100 100 94 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 95 88 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\n\",\n    \"100 100\\n95 100 100 100 100 100 100 100 100 100 100 100 100 100 87 100 100 100 94 100 100 100 100 100 100 100 100 100 100 100 100 99 100 100 100 100 100 100 100 100 100 100 90 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 97 100 100 100 96 100 98 100 100 100 100 100 96 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 97 100 100 100 100\\n\",\n    \"100 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"100 2\\n2 1 1 2 1 1 1 1 2 2 2 2 1 1 1 2 1 1 1 2 2 2 2 1 1 1 1 2 2 2 1 2 2 2 2 1 2 2 1 1 1 1 1 1 2 2 1 2 1 1 1 2 1 2 2 2 2 1 1 1 2 2 1 2 1 1 1 2 1 2 2 1 1 1 2 2 1 1 2 1 1 2 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 2 1 1\\n\",\n    \"3 5\\n5 5 5\\n\",\n    \"7 7\\n1 1 1 1 1 1 1\\n\",\n    \"1 1\\n1\\n\",\n    \"100 100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"4 10\\n10 10 10 10\\n\",\n    \"1 10\\n10\\n\",\n    \"10 1\\n1 1 1 1 1 1 1 1 1 1\\n\",\n    \"3 10\\n10 10 10\\n\",\n    \"2 4\\n3 4\\n\",\n    \"1 2\\n2\\n\",\n    \"3 4\\n4 4 4\\n\",\n    \"3 2\\n2 2 1\\n\",\n    \"5 5\\n5 5 5 5 5\\n\",\n    \"3 3\\n3 3 3\\n\",\n    \"2 9\\n8 9\\n\",\n    \"3 10\\n9 10 10\\n\",\n    \"1 3\\n3\\n\",\n    \"2 2\\n1 2\\n\",\n    \"2 10\\n10 10\\n\",\n    \"23 14\\n7 11 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14\\n\",\n    \"2 10\\n9 10\\n\",\n    \"2 2\\n2 2\\n\",\n    \"10 5\\n5 5 5 5 5 5 5 5 5 4\\n\",\n    \"3 5\\n4 5 5\\n\",\n    \"5 4\\n4 4 4 4 4\\n\",\n    \"2 10\\n10 9\\n\",\n    \"4 5\\n3 5 5 5\\n\",\n    \"10 5\\n5 5 5 5 5 5 5 5 5 5\\n\",\n    \"3 10\\n10 10 9\\n\",\n    \"5 1\\n1 1 1 1 1\\n\",\n    \"2 1\\n1 1\\n\",\n    \"4 10\\n9 10 10 10\\n\",\n    \"5 2\\n2 2 2 2 2\\n\",\n    \"2 5\\n4 5\\n\",\n    \"5 10\\n10 10 10 10 10\\n\",\n    \"2 6\\n6 6\\n\",\n    \"2 9\\n9 9\\n\",\n    \"3 10\\n10 9 10\\n\",\n    \"4 40\\n39 40 40 40\\n\",\n    \"3 4\\n3 4 4\\n\",\n    \"9 9\\n9 9 9 9 9 9 9 9 9\\n\",\n    \"1 4\\n4\\n\",\n    \"4 7\\n1 1 1 1\\n\",\n    \"1 5\\n5\\n\",\n    \"3 1\\n1 1 1\\n\",\n    \"1 100\\n100\\n\",\n    \"2 7\\n3 5\\n\",\n    \"3 6\\n6 6 6\\n\",\n    \"4 2\\n1 2 2 2\\n\",\n    \"4 5\\n4 5 5 5\\n\",\n    \"5 5\\n1 1 1 1 1\\n\",\n    \"66 2\\n1 2 2 2 2 1 1 2 1 2 2 2 2 2 2 1 2 1 2 1 2 1 2 1 2 1 1 1 1 2 2 1 2 2 1 1 2 1 2 2 1 1 1 2 1 2 1 2 1 2 1 2 2 2 2 1 2 2 1 2 1 1 1 2 2 1\\n\",\n    \"2 2\\n2 1\\n\",\n    \"5 5\\n5 5 5 4 5\\n\",\n    \"3 7\\n1 1 1\\n\",\n    \"2 5\\n5 5\\n\",\n    \"1 7\\n1\\n\",\n    \"6 7\\n1 1 1 1 1 1\\n\",\n    \"99 97\\n15 80 78 69 12 84 36 51 89 77 88 10 1 19 67 85 6 36 8 70 14 45 88 97 22 13 75 57 83 27 13 97 9 90 68 51 76 37 5 2 16 92 11 48 13 77 35 19 15 74 22 29 21 12 28 42 56 5 32 41 62 75 71 71 68 72 24 77 11 28 78 27 53 88 74 66 1 42 18 16 18 39 75 38 81 5 13 39 40 75 13 36 53 83 9 54 57 63 64\\n\",\n    \"8 7\\n1 1 1 1 1 1 1 1\\n\",\n    \"3 2\\n2 2 2\\n\",\n    \"6 5\\n5 5 5 5 5 5\\n\",\n    \"10 5\\n5 5 5 5 5 5 5 4 1 1\\n\",\n    \"1 5\\n1\\n\",\n    \"10 10\\n10 10 10 10 10 10 10 10 10 10\\n\",\n    \"2 3\\n2 3\\n\",\n    \"1 9\\n9\\n\",\n    \"74 2\\n2 2 2 2 1 2 2 1 1 1 2 2 1 2 2 2 2 1 2 1 1 1 2 1 1 2 2 1 2 1 1 2 1 1 2 2 2 2 2 2 2 2 1 2 2 2 1 2 2 1 1 2 1 1 1 1 1 1 2 2 2 1 1 1 1 1 2 2 2 2 2 2 1 2\\n\",\n    \"5 5\\n5 5 5 5 4\\n\"\n  ],\n  \"outputs\": [\n    \"4\",\n    \"3\",\n    \"3\",\n    \"2\",\n    \"7\",\n    \"712\",\n    \"482\",\n    \"6469\",\n    \"1340\",\n    \"329\",\n    \"5753\",\n    \"0\",\n    \"851\",\n    \"5884\",\n    \"14170\",\n    \"6650\",\n    \"11786\",\n    \"3182\",\n    \"0\",\n    \"1807\",\n    \"946\",\n    \"3164\",\n    \"1262\",\n    \"2024\",\n    \"1984\",\n    \"740\",\n    \"14888\",\n    \"13118\",\n    \"3030\",\n    \"19700\",\n    \"0\",\n    \"19696\",\n    \"0\",\n    \"0\",\n    \"2\",\n    \"0\",\n    \"16\",\n    \"0\",\n    \"77\",\n    \"0\",\n    \"19700\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"44\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"10\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"35\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"33\",\n    \"0\",\n    \"11\",\n    \"66\",\n    \"10077\",\n    \"88\",\n    \"0\",\n    \"0\",\n    \"8\",\n    \"7\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/810/A",
  "starter_code": ""
}