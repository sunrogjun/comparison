{
  "task_id": "APPS/302",
  "problem_id": 302,
  "prompt": "Prof. Vasechkin wants to represent positive integer n as a sum of addends, where each addends is an integer number containing only 1s. For example, he can represent 121 as 121=111+11+\u20131. Help him to find the least number of digits 1 in such sum.\n\n\n-----Input-----\n\nThe first line of the input contains integer n (1 \u2264 n < 10^15).\n\n\n-----Output-----\n\nPrint expected minimal number of digits 1.\n\n\n-----Examples-----\nInput\n121\n\nOutput\n6",
  "solutions": "[\"\\\"\\\"\\\"\\nCodeforces Testing Round 10 Problem C\\n\\nAuthor  : chaotic_iak\\nLanguage: Python 3.3.4\\n\\\"\\\"\\\"\\n\\ndef read(mode=2):\\n    # 0: String\\n    # 1: List of strings\\n    # 2: List of integers\\n    inputs = input().strip()\\n    if mode == 0:\\n        return inputs\\n    if mode == 1:\\n        return inputs.split()\\n    if mode == 2:\\n        return [int(x) for x in inputs.split()]\\n\\ndef write(s=\\\"\\\\n\\\"):\\n    if isinstance(s, list): s = \\\" \\\".join(s)\\n    s = str(s)\\n    print(s, end=\\\"\\\")\\n\\n################################################### SOLUTION\\ndef g(n):\\n    return (10**n-1)//9\\n\\ndef solve(n):\\n    if n <= 6: return n\\n    if 7 <= n <= 11: return 13-n\\n    l = 1\\n    while g(l) < n: l += 1\\n    l -= 1\\n    gl = g(l)\\n    a = n\\n    res1 = 0\\n    res1 += (a // gl) * l\\n    a %= gl\\n    res1 += solve(a)\\n    b = g(l+1) - n\\n    res2 = l+1\\n    res2 += (b // gl) * l\\n    b %= gl\\n    res2 += solve(b)\\n    return min(res1, res2)\\n\\nn, = read()\\nprint(solve(n))\", \"n = int(input())\\nd = {n: 0}\\nu = 10 ** (len(str(n)) + 2) // 9\\nfor i in range(len(str(n)) + 1, 0, -1):\\n    d, e = {}, d\\n    u //= 10\\n    for v, c in e.items():\\n        lim = v//u\\n        for x in range(-1 - lim, 1 - lim):\\n            t = v + x * u\\n            d[t] = min(c + i * abs(x), d.get(t, 999))\\nprint(d[0])\", \"n = int(input())\\nd = {n: 0}\\nm = len(str(n)) + 1\\nu = int('1' * (m+1))\\nfor i in range(m, 0, -1):\\n    d, e, u = {}, d, u // 10\\n    for v, c in e.items():\\n        lim = v // u\\n        for x in range(-1 - lim, 1 - lim):\\n            t = v + x * u\\n            d[t] = min(c + i * abs(x), d.get(t, 999))\\nprint(d[0])\", \"ans=1000000000000\\nmul = []\\n\\ndef dfs(now, num, opt):\\n\\tif num == 0:\\n\\t\\tnonlocal ans \\n\\t\\tans = min(ans, opt)\\n\\t\\treturn\\n\\tif now == -1:\\n\\t\\treturn\\n\\ti=-10\\n\\twhile i * mul[now] <= num:\\n\\t\\ti+=1\\n\\tdfs(now-1, num-(i-1)*mul[now], opt+abs(i-1)*(now+1))\\n\\tdfs(now-1, num-i*mul[now], opt+abs(i)*(now+1))\\n\\ndef main():\\n\\tmul.append(int(1))\\n\\tnum = int(input())\\n\\tfor i in range(1,18,1):\\n\\t\\tmul.append(mul[i-1]*10)\\n\\tfor i in range(1,18,1):\\n\\t\\tmul[i] += mul[i-1]\\n\\ti = 1\\n\\twhile mul[i] <= num:\\n\\t\\ti+=1\\n\\tn=i\\n\\tdfs(n, num, 0)\\n\\tprint(ans)\\n\\t\\t\\nmain()\", \"import math\\nacc = []\\nn = int(input())\\ndef OneNum (num, One):\\n onetrans = num // acc[One]\\n num = num % acc[One] \\n if num == 0:\\n  return onetrans*One\\n else:\\n  return onetrans*One + min(OneNum(num, One-1), One + OneNum(acc[One] - num, One - 1))\\nacc.append(0)\\nfor i in range(1,17):\\n acc.append (acc[i-1]*10 + 1)\\nprint (OneNum(n,16))\", \"n = int(input())\\n\\nd = {}\\n\\ndef count(x):\\n\\tif x == 0:\\n\\t\\treturn 0\\n\\telif x in d:\\n\\t\\treturn d[x]\\n\\n\\tx_s = str(x)\\n\\tlow = int(\\\"1\\\"*len(x_s)) if int(\\\"1\\\"*len(x_s)) <= x else int(\\\"1\\\"*(len(x_s)-1))\\n\\thigh = int(\\\"1\\\"*len(x_s)) if int(\\\"1\\\"*len(x_s)) >= x else int(\\\"1\\\"*(len(x_s)+1))\\n\\n\\tl_val, h_val = -1, -1\\n\\tif abs(x - low) < x:\\n\\t\\tl_val = len(str(low)) + count(abs(x - low))\\n\\tif abs(x - high) < x:\\n\\t\\th_val = len(str(high)) + count(abs(x - high))\\n\\n\\tret = min(l_val, h_val) if min(l_val, h_val) >= 0 else max(l_val, h_val)\\n\\td[x] = ret\\n\\treturn ret\\n\\nprint(count(n))\", \"one = []\\nfor i in range(17):\\n    one.append(0)\\n\\n\\ndef code():\\n    i = 1\\n    j = 0\\n    k = 0\\n    one[0] = 0\\n    for i in range(1, 17):\\n        one[i] = one[i-1]*10+1\\n    n = int(input())\\n    print(df(n, 16))\\n\\n\\ndef df(n, i):\\n    k = int(n/one[i])\\n    n %= one[i]\\n    if n == 0:\\n        return k*i\\n    else:\\n        return k*i+min(i+df(one[i]-n, i-1), df(n, i-1))\\n\\n\\ncode()\\n\", \"multiplos_de_onze = [0, 1, 11, 111, 1111, 11111, 111111, 1111111, 11111111, 111111111, 1111111111, 11111111111, \\n                     111111111111, 1111111111111, 11111111111111, 111111111111111, 1111111111111111, \\n                     11111111111111111]\\n\\n\\ndef procura_onze(n, i):  # i = 16 pois ser\\u00e1 as posi\\u00e7\\u00f5es do vetor decrementadas\\n    divisao = int(n / multiplos_de_onze[i])\\n    resto = n % multiplos_de_onze[i]\\n    if resto == 0:\\n        return divisao*i\\n    else:\\n        return divisao*i + min(i + procura_onze(multiplos_de_onze[i] - resto, i - 1), procura_onze(resto, i - 1))\\n\\n\\ndef divide():\\n    n = int(input())\\n    m = procura_onze(n, 16)\\n    print(m)\\n\\n\\ndivide()\", \"multiplos_de_onze = [0, 1, 11, 111, 1111, 11111, 111111, 1111111, 11111111, 111111111, 1111111111, 11111111111,\\n                     111111111111, 1111111111111, 11111111111111, 111111111111111, 1111111111111111,\\n                     11111111111111111]\\n# Entrada maxima, n maior que 1 e n menor que 10 elevado a 15\\n\\n\\ndef procura_onze(n, i):  # i = 16 - pois ser\\u00e1 a ultima posi\\u00e7\\u00e3o do vetor\\n    divisao = int(n / multiplos_de_onze[i])\\n    resto = n % multiplos_de_onze[i]\\n    if resto == 0:\\n        return divisao*i\\n    else:\\n        return divisao*i + min(i + procura_onze(multiplos_de_onze[i] - resto, i - 1), procura_onze(resto, i - 1))\\n\\n\\ndef divide():\\n    n = int(input())\\n    m = procura_onze(n, 16)\\n    print(m)\\n\\n\\ndivide()\\n\", \"n = int(input())\\n\\nd = {n: 0}\\n\\nu = 10 ** (len(str(n)) + 2) // 9\\n\\nfor i in range(len(str(n)) + 1, 0, -1):\\n\\n    d, e = {}, d\\n\\n    u //= 10\\n\\n    for v, c in list(e.items()):\\n\\n        lim = v//u\\n\\n        for x in range(-1 - lim, 1 - lim):\\n\\n            t = v + x * u\\n\\n            d[t] = min(c + i * abs(x), d.get(t, 999))\\n\\nprint(d[0])\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"class OneArithmetic():\\n    def __init__(self, n):\\n        self.n = n\\n        self.m = [0]*17\\n        v = 0\\n        for i in range(1,17):\\n            v = 10*v+1\\n            self.m[i] = v\\n\\n    def dfs(self, v, d):\\n        v = abs(v)\\n        if d == 1:\\n            return v\\n        elif v == 0:\\n            return 0\\n        else:\\n            k = int(v/self.m[d])\\n            ans = min( self.dfs( v - k * self.m[d] , d - 1 ) + k * d , self.dfs( ( k + 1 ) * self.m[d] - v , d - 1 ) + ( k + 1 ) * d )\\n            return ans\\n\\n    def min_digits(self):\\n        v =  self.dfs(self.n,16)\\n        return v\\n\\n\\nn = int(input())\\nprint(OneArithmetic(n).min_digits())\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"121\\n\",\n    \"10\\n\",\n    \"72\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"7\\n\",\n    \"11\\n\",\n    \"12\\n\",\n    \"2038946593\\n\",\n    \"81924761239462\\n\",\n    \"973546235465729\\n\",\n    \"999999999999999\\n\",\n    \"21\\n\",\n    \"79\\n\",\n    \"33\\n\",\n    \"185\\n\",\n    \"513\\n\",\n    \"634\\n\",\n    \"5300\\n\",\n    \"3724\\n\",\n    \"2148\\n\",\n    \"82415\\n\",\n    \"35839\\n\",\n    \"79263\\n\",\n    \"274634\\n\",\n    \"690762\\n\",\n    \"374186\\n\",\n    \"2673749\\n\",\n    \"5789877\\n\",\n    \"1873301\\n\",\n    \"30272863\\n\",\n    \"33388991\\n\",\n    \"11472415\\n\",\n    \"345871978\\n\",\n    \"528988106\\n\",\n    \"302038826\\n\",\n    \"1460626450\\n\",\n    \"3933677170\\n\",\n    \"6816793298\\n\",\n    \"75551192860\\n\",\n    \"28729276284\\n\",\n    \"67612392412\\n\",\n    \"532346791975\\n\",\n    \"575524875399\\n\",\n    \"614407991527\\n\",\n    \"2835997166898\\n\",\n    \"1079175250322\\n\",\n    \"8322353333746\\n\",\n    \"26602792766013\\n\",\n    \"42845970849437\\n\",\n    \"59089148932861\\n\",\n    \"842369588365127\\n\",\n    \"768617061415848\\n\",\n    \"694855944531976\\n\",\n    \"898453513288965\\n\",\n    \"98596326741327\\n\",\n    \"59191919191919\\n\"\n  ],\n  \"outputs\": [\n    \"6\\n\",\n    \"3\\n\",\n    \"15\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"6\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"145\\n\",\n    \"321\\n\",\n    \"263\\n\",\n    \"32\\n\",\n    \"5\\n\",\n    \"10\\n\",\n    \"6\\n\",\n    \"16\\n\",\n    \"25\\n\",\n    \"22\\n\",\n    \"32\\n\",\n    \"34\\n\",\n    \"21\\n\",\n    \"53\\n\",\n    \"45\\n\",\n    \"45\\n\",\n    \"62\\n\",\n    \"65\\n\",\n    \"65\\n\",\n    \"81\\n\",\n    \"61\\n\",\n    \"59\\n\",\n    \"118\\n\",\n    \"57\\n\",\n    \"72\\n\",\n    \"95\\n\",\n    \"118\\n\",\n    \"128\\n\",\n    \"152\\n\",\n    \"159\\n\",\n    \"153\\n\",\n    \"151\\n\",\n    \"212\\n\",\n    \"178\\n\",\n    \"158\\n\",\n    \"189\\n\",\n    \"236\\n\",\n    \"275\\n\",\n    \"188\\n\",\n    \"169\\n\",\n    \"288\\n\",\n    \"325\\n\",\n    \"265\\n\",\n    \"330\\n\",\n    \"390\\n\",\n    \"348\\n\",\n    \"248\\n\",\n    \"260\\n\",\n    \"342\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/440/C",
  "starter_code": ""
}