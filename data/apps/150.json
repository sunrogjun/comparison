{
  "task_id": "APPS/150",
  "problem_id": 150,
  "prompt": "Mr. Funt now lives in a country with a very specific tax laws. The total income of mr. Funt during this year is equal to n (n \u2265 2) burles and the amount of tax he has to pay is calculated as the maximum divisor of n (not equal to n, of course). For example, if n = 6 then Funt has to pay 3 burles, while for n = 25 he needs to pay 5 and if n = 2 he pays only 1 burle.\n\nAs mr. Funt is a very opportunistic person he wants to cheat a bit. In particular, he wants to split the initial n in several parts n_1 + n_2 + ... + n_{k} = n (here k is arbitrary, even k = 1 is allowed) and pay the taxes for each part separately. He can't make some part equal to 1 because it will reveal him. So, the condition n_{i} \u2265 2 should hold for all i from 1 to k.\n\nOstap Bender wonders, how many money Funt has to pay (i.e. minimal) if he chooses and optimal way to split n in parts.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (2 \u2264 n \u2264 2\u00b710^9)\u00a0\u2014 the total year income of mr. Funt.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 minimum possible number of burles that mr. Funt has to pay as a tax.\n\n\n-----Examples-----\nInput\n4\n\nOutput\n2\n\nInput\n27\n\nOutput\n3",
  "solutions": "[\"def is_izi(k):\\n    i = 2\\n    while (i * i <= k):\\n        if (k % i == 0):\\n            return 0\\n        i += 1\\n    return 1\\nn = int(input())\\nif (is_izi(n)):\\n    print(1)\\nelif n % 2 == 0:\\n    print(2)\\nelif n % 2 == 1:\\n    if (is_izi(n - 2)):\\n        print(2)\\n    else:\\n        print(3)\", \"def rwh_primes(n):\\n    sieve = [True] * n\\n    for i in range(3,int(n**0.5)+1,2):\\n        if sieve[i]:\\n            sieve[i*i::2*i]=[False]*((n-i*i-1)//(2*i)+1)\\n    return [2] + [i for i in range(3,n,2) if sieve[i]]\\nprimes = rwh_primes(44722)\\n\\ndef isPrime(z):\\n  if z < 44722:\\n    return z in primes\\n  else:\\n    for p in primes:\\n      if z % p == 0:\\n        return False\\n    return True      \\n    \\nn = int(input())\\nif n & 1:\\n  if isPrime(n):\\n    print(1)\\n  elif isPrime(n-2):  \\n    print(2)\\n  else:  \\n    print(3)\\nelse:\\n  if n == 2:\\n    print(1)\\n  else:  \\n    print(2)\\n\", \"from math import *\\nfrom sys import *\\nfrom queue import *\\nfrom decimal import *\\n\\ndef pr(i):\\n  d=2\\n  while d*d<=i:\\n    if i%d==0:\\n      return 0\\n    d+=1\\n  return 1\\n\\nn=int(input())\\nif n%2==0 and n>2:\\n  print(2)\\nelif pr(n):\\n  print(1)\\nelif pr(n-2):\\n  print(2)\\nelse:\\n  print(3)\", \"def is_prime(n):\\n    for i in range(2, int(n ** 0.5 + 1)):\\n        if n % i == 0:\\n            return False\\n    return True\\n\\n\\nn = int(input())\\nif n % 2 == 0:\\n    if is_prime(n):\\n        print(1)\\n    else:\\n        print(2)\\nelse:\\n    if is_prime(n):\\n        print(1)\\n    elif is_prime(n - 2):\\n        print(2)\\n    else:\\n        print(3)\", \"import math\\ndef isprime(n):\\n    for i in range(2, int(math.sqrt(n)) + 1):\\n        if n % i == 0:\\n            return False\\n    return True\\n\\nn = int(input())\\nif isprime(n):\\n    print(1)\\nelif n % 2 == 0:\\n    print(2)\\nelif n % 2 == 1:\\n    if isprime(n - 2):\\n        print(2)\\n    else:\\n        print(3)\\n\", \"n = int(input())\\nif n == 2:\\n\\tprint(1)\\nelif n % 2 == 0:\\n\\tprint(2)\\nelse:\\n\\ti = 2\\n\\tflag = True\\n\\twhile i * i <= n:\\n\\t\\tif n % i == 0:\\n\\t\\t\\tflag = False\\n\\t\\t\\tbreak\\n\\t\\ti +=1 \\n\\tif flag:\\n\\t\\tprint(1)\\n\\telse:\\n\\t\\ti = 2\\n\\t\\tflag = True\\n\\t\\twhile i * i <= n - 2:\\n\\t\\t\\tif (n - 2) % i == 0:\\n\\t\\t\\t\\tflag = False\\n\\t\\t\\t\\tbreak\\n\\t\\t\\ti += 1\\n\\t\\tif flag:\\n\\t\\t\\tprint(2)\\n\\t\\telse:\\n\\t\\t\\tprint(3)\", \"import math\\n\\ndef isprime(n):\\n    if n == 2:\\n        return True\\n\\n    sq = math.ceil(n ** 0.5) + 1\\n    for i in range(2, sq):\\n        if n % i == 0:\\n            return False\\n    return True\\n\\ndef solve(n):\\n    if isprime(n):\\n        return 1\\n    if n%2 == 0:\\n        return 2\\n    if isprime(n - 2):\\n        return 2\\n    return 3\\n\\nn = int(input())\\nprint(solve(n))\\n\", \"def test(n):\\n    maximum = int(n ** 0.5) + 3\\n    for i in range(2, min(maximum, n)):\\n        if n % i == 0:\\n            return False\\n    return True   \\n\\n\\nn = int(input())\\nif n % 2 == 0:\\n    if n == 2:\\n        print(1)\\n    else:    \\n        print(2)\\nelse:\\n    if test(n) == True:\\n        print(1)\\n    elif test(n - 2) == True:\\n        print(2)\\n    else:\\n        print(3)\", \"def isPrime(n):\\n    def compositeTry(a,d,n,s):\\n        if pow(a,d,n) == 1:\\n            return False;\\n        for i in range(s):\\n            if pow(a,2**i*d,n) == n-1:\\n                return False;\\n        return True;\\n    \\n    knownPrimes=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]\\n    if n in knownPrimes:\\n        return True;\\n    if any((n % p) == 0 for p in knownPrimes) or n in (0,1):\\n        return False;\\n    d,s=n-1,0\\n    while not d%2:\\n        d,s=d>>1,s+1\\n    return not any(compositeTry(a,d,n,s) for a in (2,3,5,7))\\n\\ndef main():\\n    n=int(input())\\n    if isPrime(n):\\n        print((1));\\n    elif n%2==0:\\n        print(2)\\n    elif isPrime(n-2):\\n        print(2)\\n    else:\\n        print(3)\\n\\nmain()\\n\", \"def prime(x):\\n    p=int(n**.5)\\n    p+=2\\n    for i in range(3,p,2):\\n        if x%i==0:\\n            return False\\n    return True\\n\\ndef func(n):\\n    if n%2==0:\\n        if n==2:\\n            return 1\\n        return 2\\n\\n    if n==1 or n==3 or n==5:\\n        return 1\\n    \\n    if prime(n):\\n        return 1\\n    if prime(n-2):\\n        return 2\\n    return 3\\n\\nn=int(input())\\nans=func(n)\\nprint(ans)\\n\", \"from math import sqrt\\nlimit = 2*1000000000\\nprimes = [True for i in range(int(sqrt(limit))+1)]\\ntes = int(sqrt(sqrt(limit)))+1\\nfor i in range(2,tes):\\n\\tif primes[i]:\\n\\t\\tfor z in range(i*i,int(sqrt(2*1000000000))+1,i):\\n\\t\\t\\tprimes[z] = False\\ndef ptest(n):\\n\\tnonlocal primes\\n\\tfor i in range(2,int(sqrt(n))+1):\\n\\t\\tif primes[i]:\\n\\t\\t\\tif n%i == 0:\\n\\t\\t\\t\\treturn 0\\n\\treturn 1\\ni = int(input().strip())\\nif i%2 == 0:\\n\\tif i == 2:\\n\\t\\tprint(1)\\n\\telse:\\n\\t\\tprint(2)\\nelse:\\n\\tif ptest(i):\\n\\t\\tprint(1)\\n\\telif ptest(i-2):\\n\\t\\tprint(2)\\n\\telse:\\n\\t\\tprint(3)\\n\", \"from math import sqrt, floor\\nn = int(input())\\n\\n\\ndef prime(n):\\n    q = floor(sqrt(n))\\n    prime = True\\n    for i in range(2, q + 1):\\n        if n % i == 0:\\n            prime = False\\n    return prime\\n\\n\\nif prime(n):\\n    print(1)\\nelse:\\n    if n % 2 == 0:\\n        print(2)\\n    else:\\n        if prime(n-2):\\n            print(2)\\n        else:\\n            print(3)\\n\\n\\n\", \"def main():\\n    from math import sqrt\\n    n = int(input())\\n    if not n & 1:\\n        print(2 if n > 2 else 1)\\n        return\\n    for p in range(3, int(sqrt(n)) + 1, 2):\\n        if not n % p:\\n            break\\n    else:\\n        print(1)\\n        return\\n    n -= 2\\n    for p in range(3, int(sqrt(n)) + 1, 2):\\n        if not n % p:\\n            break\\n    else:\\n        print(2)\\n        return\\n    print(3)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"# from math import ceil,floor\\n# def matches(n,left):\\n# \\tpass\\n# n = int(input())\\n# if n%2 == 0:\\n# \\tprint(1+matches(n//2,0))\\n# else:\\n# \\tprint(1+matches(ceil(n/2),1))\\t\\n# print(ans)\\t\\nprimes = [2,3]\\nx = 3\\nwhile x < 200000:\\n\\tx += 2\\n\\tfor i in primes:\\n\\t\\tif i*i > x:\\n\\t\\t\\tprimes.append(x)\\n\\t\\t\\tbreak\\n\\t\\telif x%i == 0:\\n\\t\\t\\tbreak\\ndef is_prime(n):\\n\\tfor i in primes:\\n\\t\\tif i*i > n:\\n\\t\\t\\treturn True\\n\\t\\tif n%i == 0:\\n\\t\\t\\treturn False\\nd = {}\\ndef result(n):\\n\\tif is_prime(n):\\n\\t\\treturn 1\\n\\telse:\\n\\t\\ttry:\\n\\t\\t\\treturn d[n]\\n\\t\\texcept:\\t\\n\\t\\t\\ta = []\\n\\t\\t\\tcount = 0\\n\\t\\t\\tfor i in range(n-2,0,-1):\\n\\t\\t\\t\\tif is_prime(i):\\n\\t\\t\\t\\t\\tcount += 1\\n\\t\\t\\t\\t\\ta.append(i)\\n\\t\\t\\t\\tif count > 100:\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\ta = [result(n-i) for i in a]\\n\\t\\t\\tans = 1+min(a)\\n\\t\\t\\td[n] = ans\\n\\t\\t\\treturn ans\\t\\t\\t\\t\\t\\t\\t\\nn = int(input())\\nprint(result(n))\\t\\t\\n\", \"def is_prime(n):\\n    for i in range(2, int(n**0.5) + 1):\\n        if n % i == 0:\\n            return False\\n    return True\\n\\n\\nn = int(input())\\nif n < 4:\\n    print(1)\\nelif n % 2 == 0:\\n    print(2)\\nelif is_prime(n):\\n    print(1)\\nelse:\\n    if is_prime(n - 2):\\n        print(2)\\n    else:\\n        print(3)\", \"import math\\n\\n\\n# get line input split by space\\ndef getLnInput():\\n    return input().split()\\n\\n\\n# ceil(a / b) for a > b\\ndef ceilDivision(a, b):\\n    return (a - 1) // b + 1\\n\\n\\ndef isPrime(n):\\n    if n < 1:\\n        return False\\n    if n == 2:\\n        return True\\n    flg = True\\n    for i in range(2, math.ceil(math.sqrt(n + 1))):\\n        if n % i == 0:\\n            flg = False\\n            break\\n    return flg\\n\\n\\ndef main():\\n    n = int(getLnInput()[0])\\n    if n < 4:\\n        print(1)\\n    elif isPrime(n):\\n        print(1)\\n    elif n % 2 == 0:\\n        print(2)\\n    else:\\n        if isPrime(n - 2):\\n            print(2)\\n        else:\\n            print(3)\\n    return\\n\\n\\nmain()\\n\", \"import math\\ndef tax(n):\\n    if n==2:\\n        return 1\\n    if n%2==0:\\n        return 2\\n    elif premier(n):\\n        return 1\\n    elif premier(n-2):\\n        return 2\\n    else:\\n        return 3\\ndef premier(k):\\n    if k < 2:\\n        return False\\n    else:\\n        for i in range(2, int(math.sqrt(k))+1):\\n            if k%i == 0:\\n                return False\\n        return True\\n\\nprint(tax(int(input())))\\n\", \"def isPrime(n):\\n    if n == 2 or n == 3: return True\\n    if n < 2 or n%2 == 0: return False\\n    if n < 9: return True\\n    if n%3 == 0: return False\\n    r = int(n**0.5)\\n    f = 5\\n    while f <= r:\\n        if n%f == 0: return False\\n        if n%(f+2) == 0: return False\\n        f +=6\\n    return True\\n\\nn = int(input())\\nif n==2:\\n      print(1)\\nelif n % 2 == 0:\\n      print(2)\\nelse:\\n      if isPrime(n):\\n            print(1)\\n      elif isPrime(n-2):\\n            print(2)\\n      else:\\n            print(3)\", \"def prime(x):\\n\\ti = 2\\n\\twhile i * i <= x:\\n\\t\\tif x % i == 0:\\n\\t\\t\\treturn False\\n\\t\\ti += 1\\n\\treturn True\\nn = int(input())\\nif prime(n): print(1)\\nelif n % 2 == 0 or prime(n - 2): print(2)\\nelse: print(3)\", \"import sys\\nx = int(input())\\n\\nimport math\\ndef is_prime(n):\\n    if n % 2 == 0 and n > 2: \\n        return False\\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\\n        if n % i == 0:\\n            return False\\n    return True\\n\\nif (x == 2):\\n    print(1)\\n    return\\n\\nif (x == 4 or x == 6):\\n    print(2)\\n    return\\n\\nif (x % 2 == 0):\\n    print(2)\\t\\n    return\\n\\nelse:\\n    if (is_prime(x)):\\n        print(1)\\n        return\\n    else:\\n        if (is_prime(x -2)):\\n            print(2)\\n            return\\n        else:\\n            print(3)\\n            return\\n\", \"def prime(x):\\n    y = min(x, int(x ** 0.5) + 2)\\n    for d in range(2, y):\\n        if x % d == 0:\\n            return False\\n    return True\\n\\ndef solve(n):\\n    if prime(n): return 1\\n    if n % 2 and prime(n - 2): return 2\\n    return 2 + n % 2\\n\\nn = int(input())\\nprint(solve(n))\\n\", \"from sys import stdin\\nfrom sys import stdout\\nfrom math import ceil\\nfrom math import sqrt\\nn = int(stdin.readline().strip())\\ndef maxPower(num, div):\\n    power = 0\\n    while num%div == 0 and n > 1:\\n        num = num/div\\n        power += 1\\n    return power\\nprimes = [2]\\nans = 0\\ndef isPrime(n):\\n    for i in range(2,ceil(sqrt(n))+1):\\n        if n%i == 0:\\n            return False\\n    return True\\nif n%2 == 0:\\n    if n == 2:\\n        ans = 1\\n    else:\\n        ans = 2\\nelse:\\n    isprime = isPrime(n)\\n    if isprime:\\n        ans = 1\\n    else:\\n        if isPrime(n-2):\\n            ans = 2\\n        else:\\n            ans = 3\\nstdout.write(str(ans))\\n\", \"def is_prime(n):\\n    i = 2\\n    while i * i <= n:\\n        if n % i == 0:\\n            return False\\n        i += 1\\n    return True\\n\\ndef max_p(n):\\n    if not is_prime(n):\\n        i = n - 2\\n        while (i > 0):\\n            if is_prime(i):\\n                return i\\n            i -= 1\\n    else:\\n        return n\\n            \\nn = int(input())\\n\\nif n == 2:\\n    ans = 1\\n    \\nelif n % 2 == 0:\\n    ans = 2\\nelse:\\n    ans = 1\\n    while not is_prime(n):\\n        #print(max_p(n))\\n        if n % 2:\\n            n = n - max_p(n)\\n            #print(n)\\n            ans += 1\\n        else:\\n            ans += 1\\n            break\\n\\nprint(ans)\", \"def check(n):\\n    if n==2:\\n        return 1\\n    elif n>2:\\n        k=int(n**0.5)+1\\n        b=0\\n        for j in range(2,k+1):\\n            if n%j==0:\\n                return 0\\n            else:\\n                continue\\n        return 1\\nn=int(input())\\nif n==2:\\n    print(1)\\nelse:\\n    if n%2==0:\\n        print(2)\\n    else:\\n        i=0\\n        ans=0\\n        while n>2 and n-i>=2:\\n            if check(n-i)==1 and i!=1:\\n                n=i\\n                ans+=1\\n                i=0\\n            else:\\n                i+=1\\n        print(min(ans+n//2,3))\", \"from math import *\\ndef IsPrime(n):\\n    for i in range(2, ceil(sqrt(n)) + 1):\\n        if not (n % i):\\n            return False\\n    return True\\n\\n\\nn = int(input())\\nif IsPrime(n) or n == 2:\\n    print(1)\\nelif (not n % 2):\\n    print(2)\\nelif IsPrime(n - 2):\\n    print(2)\\nelse:\\n    print(3)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4\\n\",\n    \"27\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"10\\n\",\n    \"2000000000\\n\",\n    \"26\\n\",\n    \"7\\n\",\n    \"2\\n\",\n    \"11\\n\",\n    \"1000000007\\n\",\n    \"1000000009\\n\",\n    \"1999999999\\n\",\n    \"1000000011\\n\",\n    \"101\\n\",\n    \"103\\n\",\n    \"1001\\n\",\n    \"1003\\n\",\n    \"10001\\n\",\n    \"10003\\n\",\n    \"129401294\\n\",\n    \"234911024\\n\",\n    \"192483501\\n\",\n    \"1234567890\\n\",\n    \"719241201\\n\",\n    \"9\\n\",\n    \"33\\n\",\n    \"25\\n\",\n    \"15\\n\",\n    \"147\\n\",\n    \"60119912\\n\",\n    \"45\\n\",\n    \"21\\n\",\n    \"9975\\n\",\n    \"17\\n\",\n    \"99\\n\",\n    \"49\\n\",\n    \"243\\n\",\n    \"43\\n\",\n    \"39\\n\",\n    \"6\\n\",\n    \"8\\n\",\n    \"12\\n\",\n    \"13\\n\",\n    \"14\\n\",\n    \"16\\n\",\n    \"18\\n\",\n    \"19\\n\",\n    \"20\\n\",\n    \"22\\n\",\n    \"23\\n\",\n    \"24\\n\",\n    \"962\\n\",\n    \"29\\n\",\n    \"55\\n\",\n    \"125\\n\",\n    \"1999999929\\n\",\n    \"493\\n\",\n    \"10000021\\n\",\n    \"541\\n\",\n    \"187\\n\",\n    \"95\\n\",\n    \"999991817\\n\",\n    \"37998938\\n\",\n    \"1847133842\\n\",\n    \"1000000005\\n\",\n    \"19828\\n\",\n    \"998321704\\n\",\n    \"370359\\n\",\n    \"115\\n\",\n    \"200000015\\n\",\n    \"479001600\\n\",\n    \"536870912\\n\",\n    \"10759922\\n\",\n    \"1999999927\\n\",\n    \"123\\n\",\n    \"200743933\\n\",\n    \"949575615\\n\",\n    \"99990001\\n\",\n    \"715827883\\n\",\n    \"5592406\\n\",\n    \"8388609\\n\",\n    \"1908903481\\n\",\n    \"1076153021\\n\",\n    \"344472101\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/735/D",
  "starter_code": ""
}