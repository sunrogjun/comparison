{
  "task_id": "APPS/76",
  "problem_id": 76,
  "prompt": "Berland Football Cup starts really soon! Commentators from all over the world come to the event.\n\nOrganizers have already built $n$ commentary boxes. $m$ regional delegations will come to the Cup. Every delegation should get the same number of the commentary boxes. If any box is left unoccupied then the delegations will be upset. So each box should be occupied by exactly one delegation.\n\nIf $n$ is not divisible by $m$, it is impossible to distribute the boxes to the delegations at the moment.\n\nOrganizers can build a new commentary box paying $a$ burles and demolish a commentary box paying $b$ burles. They can both build and demolish boxes arbitrary number of times (each time paying a corresponding fee). It is allowed to demolish all the existing boxes.\n\nWhat is the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by $m$)?\n\n\n-----Input-----\n\nThe only line contains four integer numbers $n$, $m$, $a$ and $b$ ($1 \\le n, m \\le 10^{12}$, $1 \\le a, b \\le 100$), where $n$ is the initial number of the commentary boxes, $m$ is the number of delegations to come, $a$ is the fee to build a box and $b$ is the fee to demolish a box.\n\n\n-----Output-----\n\nOutput the minimal amount of burles organizers should pay to satisfy all the delegations (i.e. to make the number of the boxes be divisible by $m$). It is allowed that the final number of the boxes is equal to $0$.\n\n\n-----Examples-----\nInput\n9 7 3 8\n\nOutput\n15\n\nInput\n2 7 3 7\n\nOutput\n14\n\nInput\n30 6 17 19\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example organizers can build $5$ boxes to make the total of $14$ paying $3$ burles for the each of them.\n\nIn the second example organizers can demolish $2$ boxes to make the total of $0$ paying $7$ burles for the each of them.\n\nIn the third example organizers are already able to distribute all the boxes equally among the delegations, each one get $5$ boxes.",
  "solutions": "[\"n, m, a, b = list(map(int, input().split()))\\n\\nk = n%m\\nprint(min(k*b, (m - k)*a))\\n\", \"n,m,a,b=list(map(int,input().split()))\\nprint(min((n%m)*b,(m-(n%m))*a))\\n\", \"(n, m, a, b) = list(map(int, input().split()))\\n\\nif n % m == 0:\\n    print(0)\\nelse:\\n    k1 = n % m\\n    k2 = m - k1\\n    print(min(k1 * b, k2 * a))\\n\", \"n, m, a, b = list(map(int, input().split()))\\nif (n % m == 0):\\n    print(0)\\nelse:\\n    print(min((n % m) * b, (m - (n % m)) * a))\\n\", \"n, m, a, b = list(map(int, input().split()))\\nprint(min(a*(m - n%m), b*(n%m)))\\n\", \"n, m, a, b = list(map(int, input().split()))\\nprint(min(n%m*b, (m-n%m)*a))\\n\", \"def ii():\\n    return int(input())\\ndef mi():\\n    return map(int, input().split())\\ndef li():\\n    return list(mi())\\n\\nn, m, a, b = mi()\\nd = n % m\\nc1 = d * b\\nc2 = (m - d) * a\\nprint(min(c1, c2))\", \"n, m, a, b = list(map(int, input().split()))\\n\\nprint(min((n % m) * b, (m - (n % m)) * a))\\n\", \"from sys import stdin, stdout\\n\\n\\nn, m, a, b = map(int, stdin.readline().split())\\nans = float('inf')\\n\\nif not n % m:\\n    stdout.write('0')\\nelse:\\n    mod = n % m\\n    ans = min(ans, mod * b)\\n    ans = min(ans, (m - mod) * a)\\n    \\n    stdout.write(str(ans))\", \"n, m, a ,b = list(map(int,input().split()))\\nans = 100000000000000000000\\nif n % m == 0 :\\n    ans = 0\\nk = n % m\\nans = min(ans, k * b , (m - k) * a)\\n\\n\\nprint(ans)\\n\", \"n, m, a, b = map(int, input().split())\\n\\nif (n % m == 0):\\n    print(0)\\nelse:\\n    print(min((n % m) * b, (m - (n % m)) * a))\", \"n, m, a, b = map(int, input().split())\\nt1 = n % m\\nt2 = m - t1\\nt1 *= b\\nt2 *= a\\nprint(min(t1, t2))\", \"n, m, a, b = map(int, input().split())\\n\\nd = n % m\\nprint(min(d * b, (m - d) * a))\", \"n, m, a, b = [int(v) for v in input().split()]\\n\\ndown = (n // m) * m\\nup = ((n + m - 1) // m) * m\\n\\ncost_down = (n - down) * b\\ncost_up = (up - n) * a\\n\\nprint(min(cost_down, cost_up))\\n\", \"# python3\\n\\ndef readline():\\n    return list(map(int, input().split()))\\n\\n\\ndef main():\\n    n, m, a, b = readline()\\n    remove = (n % m) * b\\n    add = (m - n % m) * a\\n    print(min(add, remove))\\n    \\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n, m, a, b = list(map(int, input().split()))\\nprint(min((n%m)*b, (m - n%m)*a))\\n\", \"#     Educational Codeforces Round 45 (Rated for Div. 2)\\nimport collections\\nfrom functools import cmp_to_key\\n#key=cmp_to_key(lambda x,y: 1 if x not in y else -1 )\\n\\nimport sys\\ndef getIntList():\\n    return list(map(int, input().split()))    \\n\\n \\n            \\n    \\nn,m, a,b = getIntList()\\n\\nz = n%m\\n\\nr = min( (m-z) * a ,  z * b)\\n\\n\\nprint(r)\\n\", \"n, m, a, b = [int(x) for x in input().split()]\\n\\nres = (n % m) * b\\nres = min(res, ((m - (n % m)) % m) * a)\\n\\nprint(res)\\n\", \"n, m, a, b = list(map(int, input().split()))\\n\\nif n % m == 0:\\n\\tprint(0)\\nelse:\\n\\tt = n // m\\n\\tt *= m\\n\\tprint(min(a * (t + m - n), b * (n - t)))\\n\", \"n, m, a, b = map(int, input().split())\\nans = int(\\\"9\\\" * 20)\\nans = min(ans, (n % m) * b)\\nans = min(ans, (m - (n % m)) * a)\\nprint(ans)\", \"import sys\\nimport io\\n\\nstream_enable = 0\\n\\ninpstream = \\\"\\\"\\\"\\n2 7 3 7\\n\\\"\\\"\\\"\\n\\nif stream_enable:\\n    sys.stdin = io.StringIO(inpstream)\\n    input()\\n\\ndef inpmap():\\n    return list(map(int, input().split()))\\n\\nn, m, a, b = inpmap()\\nx = (n % m) * b\\ny = (m - n % m) * a\\nprint(min(x, y))\\n\", \"#JMD\\n#Nagendra Jha-4096\\n \\n#a=list(map(int,sys.stdin.readline().split(' ')))\\n#n,k,s= map(int, sys.stdin.readline().split(' '))\\n \\nimport sys\\nimport math\\n\\n#import fractions\\n#import numpy\\n \\n###File Operations###\\nfileoperation=0\\nif(fileoperation):\\n    orig_stdout = sys.stdout\\n    orig_stdin = sys.stdin\\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\\n    sys.stdin = inputfile\\n    sys.stdout = outputfile\\n\\n###Defines...###\\nmod=1000000007\\n \\n###FUF's...###\\ndef nospace(l):\\n    ans=''.join(str(i) for i in l)\\n    return ans\\n \\n \\n \\n##### Main ####\\nn,m,a,b= map(int, sys.stdin.readline().split(' '))\\nval=(m-(n%m))*a\\nv2=(n%m)*b\\nprint(min(val,v2))\\n\\n\\n#####File Operations#####\\nif(fileoperation):\\n    sys.stdout = orig_stdout\\n    sys.stdin = orig_stdin\\n    inputfile.close()\\n    outputfile.close()\", \"n,m,a,b = list( map(int, input().split()))\\n\\nprint(min((n % m)*b, (m-(n%m))*a))\", \"n, m, a, b = list(map(int, input().split()))\\nif n % m == 0:\\n    print(0)\\nelse:\\n    res1 = (n % m) * b\\n    res2 = (m - n % m) * a\\n    print(min(res1, res2))\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"9 7 3 8\\n\",\n    \"2 7 3 7\\n\",\n    \"30 6 17 19\\n\",\n    \"500000000001 1000000000000 100 100\\n\",\n    \"1000000000000 750000000001 10 100\\n\",\n    \"1000000000000 750000000001 100 10\\n\",\n    \"42 1 1 1\\n\",\n    \"1 1000000000000 1 100\\n\",\n    \"7 2 3 7\\n\",\n    \"999999999 2 1 1\\n\",\n    \"999999999999 10000000007 100 100\\n\",\n    \"10000000001 2 1 1\\n\",\n    \"29 6 1 2\\n\",\n    \"99999999999 6 100 100\\n\",\n    \"1000000000000 7 3 8\\n\",\n    \"99999999999 2 1 1\\n\",\n    \"1 2 1 1\\n\",\n    \"999999999999 2 1 1\\n\",\n    \"9 2 1 1\\n\",\n    \"17 4 5 5\\n\",\n    \"100000000000 3 1 1\\n\",\n    \"100 7 1 1\\n\",\n    \"1000000000000 3 100 100\\n\",\n    \"70 3 10 10\\n\",\n    \"1 2 5 1\\n\",\n    \"1000000000000 3 1 1\\n\",\n    \"804289377 846930887 78 16\\n\",\n    \"1000000000000 9 55 55\\n\",\n    \"957747787 424238336 87 93\\n\",\n    \"25 6 1 2\\n\",\n    \"22 7 3 8\\n\",\n    \"10000000000 1 1 1\\n\",\n    \"999999999999 2 10 10\\n\",\n    \"999999999999 2 100 100\\n\",\n    \"100 3 3 8\\n\",\n    \"99999 2 1 1\\n\",\n    \"100 3 2 5\\n\",\n    \"1000000000000 13 10 17\\n\",\n    \"7 2 1 2\\n\",\n    \"10 3 1 2\\n\",\n    \"5 2 2 2\\n\",\n    \"100 3 5 2\\n\",\n    \"7 2 1 1\\n\",\n    \"70 4 1 1\\n\",\n    \"10 4 1 1\\n\",\n    \"6 7 41 42\\n\",\n    \"10 3 10 1\\n\",\n    \"5 5 2 3\\n\",\n    \"1000000000000 3 99 99\\n\",\n    \"7 3 100 1\\n\",\n    \"7 2 100 5\\n\",\n    \"1000000000000 1 23 33\\n\",\n    \"30 7 1 1\\n\",\n    \"100 3 1 1\\n\",\n    \"90001 300 100 1\\n\",\n    \"13 4 1 2\\n\",\n    \"1000000000000 6 1 3\\n\",\n    \"50 4 5 100\\n\",\n    \"999 2 1 1\\n\",\n    \"5 2 5 5\\n\",\n    \"20 3 3 3\\n\",\n    \"3982258181 1589052704 87 20\\n\",\n    \"100 3 1 3\\n\",\n    \"7 3 1 1\\n\",\n    \"19 10 100 100\\n\",\n    \"23 3 100 1\\n\",\n    \"25 7 100 1\\n\",\n    \"100 9 1 2\\n\",\n    \"9999999999 2 1 100\\n\",\n    \"1000000000000 2 1 1\\n\",\n    \"10000 3 1 1\\n\",\n    \"22 7 1 6\\n\",\n    \"100000000000 1 1 1\\n\",\n    \"18 7 100 1\\n\",\n    \"10003 4 1 100\\n\",\n    \"3205261341 718648876 58 11\\n\",\n    \"8 3 100 1\\n\",\n    \"15 7 1 1\\n\",\n    \"1000000000000 1 20 20\\n\",\n    \"16 7 3 2\\n\",\n    \"1000000000000 1 1 1\\n\",\n    \"7 3 1 100\\n\",\n    \"16 3 1 100\\n\",\n    \"13 4 1 10\\n\",\n    \"10 4 5 5\\n\",\n    \"14 3 1 100\\n\",\n    \"100 33 100 1\\n\",\n    \"22 7 1 8\\n\",\n    \"10 4 2 1\\n\",\n    \"6 4 2 2\\n\",\n    \"17 4 2 1\\n\",\n    \"7 3 100 10\\n\",\n    \"702 7 3 2\\n\",\n    \"8 3 1 5\\n\",\n    \"3 2 5 2\\n\",\n    \"99 19 1 7\\n\",\n    \"16 3 100 1\\n\",\n    \"100 34 1 100\\n\",\n    \"100 33 1 1\\n\",\n    \"2 3 4 3\\n\",\n    \"15 4 4 10\\n\",\n    \"1144108931 470211273 45 79\\n\",\n    \"2 3 3 4\\n\",\n    \"29 5 4 9\\n\",\n    \"15 7 1 5\\n\",\n    \"1 1 1 1\\n\",\n    \"1 1 3 4\\n\",\n    \"10 12 2 1\\n\",\n    \"1 2 3 4\\n\"\n  ],\n  \"outputs\": [\n    \"15\\n\",\n    \"14\\n\",\n    \"0\\n\",\n    \"49999999999900\\n\",\n    \"5000000000020\\n\",\n    \"2499999999990\\n\",\n    \"0\\n\",\n    \"100\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"70100\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"300\\n\",\n    \"8\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"100\\n\",\n    \"10\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3326037780\\n\",\n    \"55\\n\",\n    \"10162213695\\n\",\n    \"2\\n\",\n    \"8\\n\",\n    \"0\\n\",\n    \"10\\n\",\n    \"100\\n\",\n    \"6\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"17\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"41\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"99\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"10\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"16083055460\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"100\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"0\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"3637324207\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"4\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"10\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"10\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"15\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"11993619960\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"4\\n\",\n    \"3\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/990/A",
  "starter_code": ""
}