{
  "task_id": "APPS/92",
  "problem_id": 92,
  "prompt": "Let's denote d(n) as the number of divisors of a positive integer n. You are given three integers a, b and c. Your task is to calculate the following sum:\n\n$\\sum_{i = 1}^{a} \\sum_{j = 1}^{b} \\sum_{k = 1}^{c} d(i \\cdot j \\cdot k)$\n\nFind the sum modulo 1073741824 (2^30).\n\n\n-----Input-----\n\nThe first line contains three space-separated integers a, b and c (1 \u2264 a, b, c \u2264 100).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the required sum modulo 1073741824 (2^30).\n\n\n-----Examples-----\nInput\n2 2 2\n\nOutput\n20\n\nInput\n5 6 7\n\nOutput\n1520\n\n\n\n-----Note-----\n\nFor the first example.\n\n  d(1\u00b71\u00b71) = d(1) = 1;  d(1\u00b71\u00b72) = d(2) = 2;  d(1\u00b72\u00b71) = d(2) = 2;  d(1\u00b72\u00b72) = d(4) = 3;  d(2\u00b71\u00b71) = d(2) = 2;  d(2\u00b71\u00b72) = d(4) = 3;  d(2\u00b72\u00b71) = d(4) = 3;  d(2\u00b72\u00b72) = d(8) = 4. \n\nSo the result is 1 + 2 + 2 + 3 + 2 + 3 + 3 + 4 = 20.",
  "solutions": "[\"a, b, c = map(int, input().split())\\nd = 1073741824\\np = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\\nt = [{} for i in range(101)]\\nans = {}\\nfor i in p:\\n    j = i\\n    m = 1\\n    while j < 101:\\n        for k in range(j, 101, j):\\n            t[k][i] = m\\n        j = j * i\\n        m += 1\\ns = 0\\nfor i in range(1, a + 1):\\n    for j in range(1, b + 1):\\n        q = {}\\n        for x in t[i].keys() | t[j].keys():\\n            q[x] = t[i].get(x, 0) + t[j].get(x, 0)\\n        ij = i * j\\n        for k in range(1, c + 1):\\n            ijk = ij * k\\n            if ijk in ans: s += ans[ijk]\\n            else:\\n                y = 1\\n                for x in q.keys() | t[k].keys():\\n                    y = y * (q.get(x, 0) + t[k].get(x, 0) + 1)\\n                ans[ijk] = y\\n                s += y\\n\\nprint(s)\", \"def main():\\n    from itertools import product\\n    a, b, c = sorted(map(int, input().split()))\\n    primes = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\\n    l = [None]\\n    for x in range(1, (c + 1)):\\n        tmp = [0] * 25\\n        for i, p in enumerate(primes):\\n            while not x % p:\\n                x //= p\\n                tmp[i] += 1\\n        l.append(tuple(tmp))\\n    res = 0\\n    cache = {}\\n    for x, y, z in product(list(range(1, a + 1)), list(range(1, b + 1)), list(range(1, c + 1))):\\n        xyz = x * y * z\\n        if xyz in cache:\\n            res += cache[xyz]\\n        else:\\n            u = 1\\n            for t in map(sum, list(zip(l[x], l[y], l[z]))):\\n                if t:\\n                    u *= t + 1\\n            u &= 1073741823\\n            cache[xyz] = u\\n            res += u\\n    print(res & 1073741823)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"from functools import reduce\\ndef main():\\n    from itertools import product\\n    from functools import reduce\\n    from operator import mul\\n    a, b, c = sorted(map(int, input().split()))\\n    primes = (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\\n    l = [None]\\n    for x in range(1, (c + 1)):\\n        tmp = [0] * 25\\n        for i, p in enumerate(primes):\\n            while not x % p:\\n                x //= p\\n                tmp[i] += 1\\n        l.append(tuple(tmp))\\n    res = 0\\n    cache = {}\\n    for x, y, z in product(list(range(1, a + 1)), list(range(1, b + 1)), list(range(1, c + 1))):\\n        xyz = x * y * z\\n        if xyz in cache:\\n            res += cache[xyz]\\n        else:\\n            cache[xyz] = u = (\\n                reduce(mul, list(map(sum, list(zip(\\n                    l[x], l[y], l[z], (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))))),\\n                       1) & 1073741823)\\n            res += u\\n    print(res & 1073741823)\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def main():\\n    from itertools import product\\n    a, b, c = sorted(map(int, input().split()))\\n    primes = [p for p in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\\n                          47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97) if p <= c]\\n    l = [None]\\n    for x in range(1, (c + 1)):\\n        tmp = [0] * len(primes)\\n        for i, p in enumerate(primes):\\n            while not x % p:\\n                x //= p\\n                tmp[i] += 1\\n        l.append(tuple(tmp))\\n    res = 0\\n    cache = {}\\n    for x, y, z in product(list(range(1, a + 1)), list(range(1, b + 1)), list(range(1, c + 1))):\\n        xyz = x * y * z\\n        if xyz in cache:\\n            res += cache[xyz]\\n        else:\\n            u = 1\\n            for t in [_f for _f in map(sum, list(zip(l[x], l[y], l[z]))) if _f]:\\n                u *= t + 1\\n            cache[xyz] = u = u & 1073741823\\n            res += u\\n    print(res & 1073741823)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"MOD = 1073741824\\n(a, b, c) = list(map(int, input().split(' ')))\\n\\nmaxProd = a * b * c\\nd = [0 for i in range(maxProd + 1)]\\nd[1] = 1\\n\\nfor i in range(2, maxProd + 1):\\n    d[i] = 2\\n\\nfor i in range(2, maxProd//2 + 1):\\n    for j in range(2 * i, maxProd + 1, i):\\n        d[j] += 1\\n\\nret = 0\\nfor i in range(1, a + 1):\\n    for j in range(1, b + 1):\\n        for k in range(1, c + 1):\\n            ret = (ret + d[i * j * k]) % MOD\\n\\nprint(ret)\\n\", \"#236B\\n\\nimport math\\n\\narr = list(map(int, input().split(\\\" \\\")))\\na = arr[0]\\nb = arr[1]\\nc = arr[2]\\n\\nd = dict()\\n\\ndef numdiv(n):\\n\\tif n in d:\\n\\t\\treturn d[n]\\n\\telse:\\n\\t\\tcount = 0\\n\\t\\tfor i in range(1, int(math.sqrt(n) + 1)):\\n\\t\\t\\tif n % i == 0:\\n\\t\\t\\t\\tcount += 2\\n\\t\\tif int(math.sqrt(n)) * int(math.sqrt(n)) == n:\\n\\t\\t\\tcount -= 1\\n\\t\\td[n] = count\\n\\t\\treturn count\\n\\nanswer = 0\\nfor i in range(1, a + 1):\\n\\tfor j in range(1, b + 1):\\n\\t\\tfor k in range(1, c + 1):\\n\\t\\t\\tanswer += numdiv(i * j * k)\\n\\nprint(answer)\", \"a,b,c=input().split()\\na,b,c=[int(a),int(b),int(c)]\\ns=0\\nd=[0]*(1000001)\\nfor i in range(1,1000001):\\n    j=i\\n    while j<=1000000:\\n        d[j]+=1\\n        j+=i\\nfor i in range(1,a+1):\\n    for j in range(1,b+1):\\n        for k in range(1,c+1):\\n            p=(i*j*k)\\n            s+=d[p]\\nprint(s)\", \"from fractions import gcd\\na,b,c=list(map(int,input().split()))\\nans=0\\nmod=1073741824\\ndiv=[0]*(1000001)\\nfor i in range (1,1000001):\\n    j=i\\n    while j<=1000000:\\n        div[j]+=1\\n        j+=i\\nfor i in range (1,a+1):\\n    for j in range (1,b+1):\\n        for k in range (1,c+1):\\n            ans+=div[i*j*k]\\nprint(ans%mod)\", \"def primes1(n):\\n    \\\"\\\"\\\" Returns  a list of primes < n \\\"\\\"\\\"\\n    sieve = [True] * (n//2)\\n    for i in range(3,int(n**0.5)+1,2):\\n        if sieve[i//2]:\\n            sieve[i*i//2::i] = [False] * ((n-i*i-1)//(2*i)+1)\\n    return [2] + [2*i+1 for i in range(1,n//2) if sieve[i]]\\n\\n\\ndef d(x):\\n    y=0\\n    ans=1\\n    for i in primes_list:\\n        if x < i:\\n            break\\n        y=1\\n        while x%i==0 and x>= i:\\n            x/=i\\n            y+=1\\n        ans*=y\\n    return ans\\n\\n\\nprimes_list = primes1(100)\\nx = 0\\nt = {}\\na, b, c = list(map(int, input().split()))\\ns = []\\nfor i in range(1, a+1):\\n    for j in range(1, b+1):\\n        for k in range(1, c+1):\\n            q = i * j * k\\n            if q not in t:\\n                t[q] = d(q)\\n            x += t[q]\\nprint(x % 1073741824)\\n\", \"p= [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\\ndef d(x):\\n    y=0\\n    ans=1\\n    for i in p:\\n        if x < i:\\n            break\\n        y=1\\n        while x%i==0 and x>= i:\\n            x/=i\\n            y+=1\\n        ans*=y\\n    return ans\\na,b,c=list(map(int,input().split()))\\nout=0\\nq={}\\nfor i in range(1,a+1) :\\n    for j in range(1,b+1) :\\n        for k in range(1,c+1) :\\n            e=i*j*k\\n            if e not in q :\\n                q[e]=d(e)\\n            out+=q[e]\\nprint(out % 1073741824)\\n\", \"from collections import Counter\\n\\n\\ndef factors(n):\\n    fact = Counter()\\n\\n    i = 2\\n    while i * i <= n:\\n        while n % i == 0:\\n            fact[i] += 1\\n            n //= i\\n        i += 1\\n\\n    if n != 1:\\n        fact[n] += 1\\n\\n    fact[1] = 1\\n\\n    return fact\\n\\n\\ndef solve(a, b, c):\\n    fact = {i: factors(i) for i in range(1, max(a, b, c) + 1)}\\n\\n    ans = 0\\n    cache = {}\\n    for i in range(1, a+1):\\n        for j in range(1, b+1):\\n            for k in range(1, c+1):\\n                p = i * j * k\\n                if p not in cache:\\n                    f = fact[i] + fact[j] + fact[k]\\n                    f[1] = 1\\n                    res = 1\\n                    for k, v in list(f.items()):\\n                        res *= v + 1\\n                    \\n                    cache[p] = res // 2\\n\\n                ans += cache[p]\\n\\n    return ans % 1073741824\\n\\n\\ndef main():\\n    a, b, c = list(map(int, input().split()))\\n    ans = solve(a, b, c)\\n    print(ans)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"p = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\\ndef divs(n):\\n    res = 1\\n    pos = 0\\n    while n > 1:\\n        while pos < len(p) and n % p[pos] != 0:\\n            pos += 1\\n        if n > 1 and pos >= len(p):\\n            res *= 2\\n            break\\n        cnt = 0\\n        while n % p[pos] == 0:\\n            cnt += 1\\n            n //= p[pos]\\n        res *= (cnt+1)\\n        pos += 1\\n    return res\\n\\n\\nd = {}\\na, b, c = map(int, input().split())\\nres = 0\\nfor i in range(1, a+1):\\n    for j in range(1, b+1):\\n        for k in range(1, c+1):\\n            val = i*j*k\\n            if val not in d:\\n                d[val] = divs(val)\\n            res = (res + d[val]) % 1073741824\\nprint(res)\", \"mod = (1 << 30)\\nmemo = dict()\\n\\ndef dp(x):\\n\\tif x in memo:\\n\\t\\treturn memo[x]\\n\\tres, q, t = 1, 2, x\\n\\twhile q * q <= x:\\n\\t\\tr = 1\\n\\t\\twhile x % q == 0:\\n\\t\\t\\tx /= q\\n\\t\\t\\tr += 1\\n\\t\\tres = (res * r) % mod\\n\\t\\tq += 1\\n\\tif x > 1:\\n\\t\\tres = (res * 2) % mod\\n\\tmemo[t] = res\\n\\treturn res\\n\\na, b, c = sorted(map(int, input().split()))\\nres = 0\\nfor i in range(1, a+1):\\n\\tfor j in range(1, b+1):\\n\\t\\tfor k in range(1, c+1):\\n\\t\\t\\tres = (res + dp(i * j * k)) % mod\\nprint(res)\\n\", \"import math\\nimport itertools\\nimport operator\\n\\n\\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\\n          31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\\n          73, 79, 83, 89, 97]\\n\\n\\ndef get_prime_mult(n):\\n    m = [0] * 25\\n    if n < 2:\\n        return m\\n    sq = int(math.sqrt(n))\\n    p = 0\\n    while primes[p] <= sq:\\n        if n % primes[p] != 0:\\n            p += 1\\n        else:\\n            m[p] += 1\\n            n //= primes[p]\\n            sq = int(math.sqrt(n))\\n\\n    m[primes.index(n)] += 1\\n    return m\\n\\n\\na, b, c = list(map(int, input().split()))\\nmtab = []\\nfor i in range(max((a, b, c)) + 1):\\n    mtab.append(get_prime_mult(i))\\n\\ntotal = 0\\nmults_cnt = {}\\nfor i in range(1, a + 1):\\n    for j in range(1, b + 1):\\n        for k in range(1, c + 1):\\n            if i * j * k not in mults_cnt:\\n                mults = [sum(triple) + 1 for triple in zip(mtab[i], mtab[j], mtab[k])]\\n                mults_cnt[i * j * k] = list(itertools.accumulate(mults, operator.mul))[-1]\\n            total += mults_cnt[i * j * k]\\n\\nprint(total & 0x3FFFFFFF)\\n\", \"from operator import mul\\nfrom functools import reduce\\nfrom collections import Counter\\n\\na, b, c = list(map(int, input().split()))\\nmod = 2 ** 30\\n\\nprime = [None] * 100\\n\\nfor i in range(2, 101):\\n    if prime[i - 1] is None:\\n        for j in range(i, 101, i):\\n            prime[j - 1] = i\\n\\n\\nd = {}\\nresult = 0\\nfor ai in range(1, a + 1):\\n    for bi in range(1, b + 1):\\n        for ci in range(1, c + 1):\\n            n = ai * bi * ci\\n            res = d.get(n)\\n\\n            if res is None:\\n                cd = Counter()\\n\\n                n_ai = ai\\n                while prime[n_ai - 1] is not None:\\n                    cd[prime[n_ai - 1]] += 1\\n                    n_ai //= prime[n_ai - 1]\\n                \\n                n_bi = bi\\n                while prime[n_bi - 1] is not None:\\n                    cd[prime[n_bi - 1]] += 1\\n                    n_bi //= prime[n_bi - 1]\\n                \\n                n_ci = ci\\n                while prime[n_ci - 1] is not None:\\n                    cd[prime[n_ci - 1]] += 1\\n                    n_ci //= prime[n_ci - 1]\\n                \\n                res = reduce(mul, [x + 1 for x in list(cd.values())], 1)\\n                d[n] = res\\n            \\n            result += res\\n\\nprint(result % mod)\\n\", \"import math as mt \\nimport sys,string,bisect\\ninput=sys.stdin.readline\\nfrom collections import deque\\nL=lambda : list(map(int,input().split()))\\nLs=lambda : list(input().split())\\nM=lambda : list(map(int,input().split()))\\nI=lambda :int(input())\\n# Python3 program to count  \\n# number of factors \\n# of an array of integers\\na,b,c=M()\\nMAX = (a*b*c)+1; \\n  \\n# array to store \\n# prime factors \\nfactor = [0]*(MAX + 1); \\n  \\n# function to generate all  \\n# prime factors of numbers \\n# from 1 to 10^6 \\ndef generatePrimeFactors(): \\n    factor[1] = 1; \\n  \\n    # Initializes all the  \\n    # positions with their value. \\n    for i in range(2,MAX): \\n        factor[i] = i; \\n  \\n    # Initializes all  \\n    # multiples of 2 with 2 \\n    for i in range(4,MAX,2): \\n        factor[i] = 2; \\n  \\n    # A modified version of  \\n    # Sieve of Eratosthenes \\n    # to store the smallest  \\n    # prime factor that divides \\n    # every number. \\n    i = 3; \\n    while(i * i < MAX): \\n        # check if it has \\n        # no prime factor. \\n        if (factor[i] == i): \\n            # Initializes of j  \\n            # starting from i*i \\n            j = i * i; \\n            while(j < MAX):  \\n                # if it has no prime factor  \\n                # before, then stores the  \\n                # smallest prime divisor \\n                if (factor[j] == j): \\n                    factor[j] = i; \\n                j += i; \\n        i+=1; \\n         \\n# function to calculate \\n# number of factors \\ndef calculateNoOFactors(n): \\n    if (n == 1): \\n        return 1; \\n    ans = 1; \\n  \\n    # stores the smallest  \\n    # prime number that \\n    # divides n \\n    dup = factor[n]; \\n  \\n    # stores the count of  \\n    # number of times a  \\n    # prime number divides n. \\n    c = 1; \\n  \\n    # reduces to the next  \\n    # number after prime \\n    # factorization of n \\n    j = int(n / factor[n]); \\n  \\n    # false when prime  \\n    # factorization is done \\n    while (j > 1): \\n        # if the same prime  \\n        # number is dividing  \\n        # n, then we increase \\n        # the count \\n        if (factor[j] == dup): \\n            c += 1 \\n  \\n        # if its a new prime factor \\n        # that is factorizing n,  \\n        # then we again set c=1 and  \\n        # change dup to the new prime  \\n        # factor, and apply the formula  \\n        # explained above.  \\n        else: \\n            dup = factor[j] \\n            ans = ans * (c + 1) \\n            c = 1\\n  \\n        # prime factorizes \\n        # a number \\n        j = int(j / factor[j])\\n  \\n    # for the last \\n    # prime factor \\n    ans = ans * (c + 1); \\n  \\n    return ans \\nd=[0]*(a*b*c+1)\\ngeneratePrimeFactors()\\n'''for i in range(1,MAX):\\n    d.append(calculateNoOFactors(i))'''\\nx=0\\n\\nfor i in range(1,a+1):\\n    for j in range(1,b+1):\\n        for k in range(1,c+1):\\n            if(d[i*j*k]==0):\\n                d[i*j*k]=calculateNoOFactors(i*j*k)\\n            x+=d[i*j*k]%1073741824\\nprint(x%1073741824)\\n            \\n\", \"mod = (1 << 30)\\nmemo = dict()\\n \\ndef dp(x):\\n\\tif x in memo:\\n\\t\\treturn memo[x]\\n\\tres, q, t = 1, 2, x\\n\\twhile q * q <= x:\\n\\t\\tr = 1\\n\\t\\twhile x % q == 0:\\n\\t\\t\\tx /= q\\n\\t\\t\\tr += 1\\n\\t\\tres = (res * r) % mod\\n\\t\\tq += 1\\n\\tif x > 1:\\n\\t\\tres = (res * 2) % mod\\n\\tmemo[t] = res\\n\\treturn res\\n \\na, b, c = sorted(map(int, input().split()))\\nres = 0\\nfor i in range(1, a+1):\\n\\tfor j in range(1, b+1):\\n\\t\\tfor k in range(1, c+1):\\n\\t\\t\\tres = (res + dp(i * j * k)) % mod\\nprint(res)\", \"p= [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\\ndef d(x):\\n    y=0\\n    ans=1\\n    for i in p:\\n        if x < i:\\n            break\\n        y=1\\n        while x%i==0 and x>= i:\\n            x/=i\\n            y+=1\\n        ans*=y\\n    return ans\\na,b,c=list(map(int,input().split()))\\nout=0\\nq={}\\nfor i in range(1,a+1) :\\n    for j in range(1,b+1) :\\n        for k in range(1,c+1) :\\n            e=i*j*k\\n            if e not in q :\\n                q[e]=d(e)\\n            out+=q[e]\\nprint(out % 1073741824)\\n\", \"a,b,c=[int(x) for x in input().split(' ')]\\nmod=1073741824\\n\\ndef divisors(x):\\n\\tpowers={}\\n\\ti=2\\n\\twhile(x!=1):\\n\\t\\tif x%i==0:\\n\\t\\t\\tif i in powers:\\n\\t\\t\\t\\tpowers[i]+=1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tpowers[i]=1\\n\\t\\t\\tx//=i\\n\\t\\telse:\\n\\t\\t\\ti+=1\\n\\treturn powers\\n\\nprimeFactors={}\\n\\nfor x in range(1,101):\\n\\tprimeFactors[x]=divisors(x)\\n\\ndef finalMapPrepare(finalMap,x):\\n\\tfor k in primeFactors[x]:\\n\\t\\tif k in finalMap:\\n\\t\\t\\tfinalMap[k]+=primeFactors[x][k]\\n\\t\\telse:\\n\\t\\t\\tfinalMap[k]=primeFactors[x][k]\\n\\t\\t\\ntotal=0\\nfor i in range(1,a+1):\\n\\tfor j in range(1,b+1):\\n\\t\\tfor k in range(1,c+1):\\n\\t\\t\\tfinalMap={}\\n\\t\\t\\tfinalMapPrepare(finalMap,i)\\n\\t\\t\\tfinalMapPrepare(finalMap,j)\\n\\t\\t\\tfinalMapPrepare(finalMap,k)\\n\\t\\t\\tans=1\\n\\t\\t\\tfor v in finalMap.values():\\n\\t\\t\\t\\tans*=(v+1)\\n\\t\\t\\ttotal+=(ans)%mod\\nprint(total%mod)\", \"a,b,c=[int(x) for x in input().split(' ')]\\nmod=1073741824\\ndivisors=[1]*1000001\\nfor x in range(2,1000001):\\n\\tfor y in range(x,1000001,x):\\n\\t\\tdivisors[y]+=1\\nans=0\\nfor i in range(1,a+1):\\n\\tfor j in range(1,b+1):\\n\\t\\tfor k in range(1,c+1):\\n\\t\\t\\tans+=(divisors[i*j*k])%mod\\nprint(ans%mod)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 2 2\\n\",\n    \"5 6 7\\n\",\n    \"91 42 25\\n\",\n    \"38 47 5\\n\",\n    \"82 29 45\\n\",\n    \"40 15 33\\n\",\n    \"35 5 21\\n\",\n    \"71 2 1\\n\",\n    \"22 44 41\\n\",\n    \"73 19 29\\n\",\n    \"76 12 17\\n\",\n    \"16 10 49\\n\",\n    \"59 99 33\\n\",\n    \"17 34 25\\n\",\n    \"21 16 9\\n\",\n    \"31 51 29\\n\",\n    \"26 41 17\\n\",\n    \"85 19 5\\n\",\n    \"36 61 45\\n\",\n    \"76 58 25\\n\",\n    \"71 48 13\\n\",\n    \"29 34 53\\n\",\n    \"72 16 41\\n\",\n    \"8 21 21\\n\",\n    \"11 51 5\\n\",\n    \"70 38 49\\n\",\n    \"13 31 33\\n\",\n    \"53 29 17\\n\",\n    \"56 18 53\\n\",\n    \"55 45 45\\n\",\n    \"58 35 29\\n\",\n    \"67 2 24\\n\",\n    \"62 96 8\\n\",\n    \"21 22 100\\n\",\n    \"64 12 36\\n\",\n    \"4 9 20\\n\",\n    \"7 99 4\\n\",\n    \"58 25 96\\n\",\n    \"9 19 32\\n\",\n    \"45 16 12\\n\",\n    \"40 6 100\\n\",\n    \"46 93 44\\n\",\n    \"49 31 28\\n\",\n    \"89 28 8\\n\",\n    \"84 17 96\\n\",\n    \"91 96 36\\n\",\n    \"86 90 24\\n\",\n    \"4 21 45\\n\",\n    \"100 7 28\\n\",\n    \"58 41 21\\n\",\n    \"53 31 5\\n\",\n    \"41 28 36\\n\",\n    \"44 18 24\\n\",\n    \"3 96 16\\n\",\n    \"98 34 100\\n\",\n    \"82 31 32\\n\",\n    \"85 25 20\\n\",\n    \"35 12 8\\n\",\n    \"39 94 48\\n\",\n    \"27 99 28\\n\",\n    \"22 28 16\\n\",\n    \"80 15 4\\n\",\n    \"23 9 44\\n\",\n    \"33 16 36\\n\",\n    \"36 6 24\\n\",\n    \"98 92 12\\n\",\n    \"90 82 100\\n\",\n    \"77 79 31\\n\",\n    \"81 21 19\\n\",\n    \"31 96 7\\n\",\n    \"34 89 95\\n\",\n    \"18 86 27\\n\",\n    \"13 76 11\\n\",\n    \"76 3 3\\n\",\n    \"15 93 87\\n\",\n    \"63 90 23\\n\",\n    \"58 83 7\\n\",\n    \"16 18 99\\n\",\n    \"60 8 35\\n\",\n    \"22 87 4\\n\",\n    \"73 25 44\\n\",\n    \"36 3 32\\n\",\n    \"27 93 20\\n\",\n    \"67 90 100\\n\",\n    \"18 84 36\\n\",\n    \"68 14 28\\n\",\n    \"71 8 12\\n\",\n    \"7 5 96\\n\",\n    \"50 95 32\\n\",\n    \"13 22 24\\n\",\n    \"4 12 8\\n\",\n    \"100 9 88\\n\",\n    \"95 2 28\\n\",\n    \"54 77 20\\n\",\n    \"49 19 4\\n\",\n    \"58 86 99\\n\",\n    \"9 76 83\\n\",\n    \"64 2 27\\n\",\n    \"63 96 11\\n\",\n    \"3 93 91\\n\",\n    \"100 100 100\\n\",\n    \"1 5 1\\n\"\n  ],\n  \"outputs\": [\n    \"20\\n\",\n    \"1520\\n\",\n    \"3076687\\n\",\n    \"160665\\n\",\n    \"3504808\\n\",\n    \"460153\\n\",\n    \"55282\\n\",\n    \"811\\n\",\n    \"1063829\\n\",\n    \"1047494\\n\",\n    \"330197\\n\",\n    \"146199\\n\",\n    \"7052988\\n\",\n    \"306673\\n\",\n    \"45449\\n\",\n    \"1255099\\n\",\n    \"402568\\n\",\n    \"139747\\n\",\n    \"3253358\\n\",\n    \"3635209\\n\",\n    \"1179722\\n\",\n    \"1461871\\n\",\n    \"1309118\\n\",\n    \"54740\\n\",\n    \"38092\\n\",\n    \"4467821\\n\",\n    \"274773\\n\",\n    \"621991\\n\",\n    \"1518698\\n\",\n    \"3751761\\n\",\n    \"1706344\\n\",\n    \"45108\\n\",\n    \"1257040\\n\",\n    \"1274891\\n\",\n    \"687986\\n\",\n    \"7302\\n\",\n    \"36791\\n\",\n    \"4812548\\n\",\n    \"91192\\n\",\n    \"167557\\n\",\n    \"558275\\n\",\n    \"6945002\\n\",\n    \"1158568\\n\",\n    \"441176\\n\",\n    \"4615400\\n\",\n    \"12931148\\n\",\n    \"6779764\\n\",\n    \"58045\\n\",\n    \"429933\\n\",\n    \"1405507\\n\",\n    \"144839\\n\",\n    \"1135934\\n\",\n    \"436880\\n\",\n    \"70613\\n\",\n    \"13589991\\n\",\n    \"2502213\\n\",\n    \"1142825\\n\",\n    \"50977\\n\",\n    \"6368273\\n\",\n    \"2276216\\n\",\n    \"198639\\n\",\n    \"76139\\n\",\n    \"170773\\n\",\n    \"441858\\n\",\n    \"88626\\n\",\n    \"3475151\\n\",\n    \"35482866\\n\",\n    \"6870344\\n\",\n    \"812886\\n\",\n    \"458123\\n\",\n    \"11308813\\n\",\n    \"1116623\\n\",\n    \"206844\\n\",\n    \"6118\\n\",\n    \"4007595\\n\",\n    \"4384553\\n\",\n    \"819473\\n\",\n    \"702678\\n\",\n    \"363723\\n\",\n    \"133986\\n\",\n    \"2478308\\n\",\n    \"50842\\n\",\n    \"1393947\\n\",\n    \"27880104\\n\",\n    \"1564297\\n\",\n    \"646819\\n\",\n    \"119311\\n\",\n    \"46328\\n\",\n    \"5324602\\n\",\n    \"124510\\n\",\n    \"3347\\n\",\n    \"2334910\\n\",\n    \"82723\\n\",\n    \"2573855\\n\",\n    \"55037\\n\",\n    \"21920084\\n\",\n    \"1554836\\n\",\n    \"49141\\n\",\n    \"1898531\\n\",\n    \"555583\\n\",\n    \"51103588\\n\",\n    \"10\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/236/B",
  "starter_code": ""
}