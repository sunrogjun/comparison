{
  "task_id": "APPS/556",
  "problem_id": 556,
  "prompt": "Programmer Rostislav got seriously interested in the Link/Cut Tree data structure, which is based on Splay trees. Specifically, he is now studying the expose procedure.\n\nUnfortunately, Rostislav is unable to understand the definition of this procedure, so he decided to ask programmer Serezha to help him. Serezha agreed to help if Rostislav solves a simple task (and if he doesn't, then why would he need Splay trees anyway?)\n\nGiven integers l, r and k, you need to print all powers of number k within range from l to r inclusive. However, Rostislav doesn't want to spent time doing this, as he got interested in playing a network game called Agar with Gleb. Help him!\n\n\n-----Input-----\n\nThe first line of the input contains three space-separated integers l, r and k (1 \u2264 l \u2264 r \u2264 10^18, 2 \u2264 k \u2264 10^9).\n\n\n-----Output-----\n\nPrint all powers of number k, that lie within range from l to r in the increasing order. If there are no such numbers, print \"-1\" (without the quotes).\n\n\n-----Examples-----\nInput\n1 10 2\n\nOutput\n1 2 4 8 \nInput\n2 4 5\n\nOutput\n-1\n\n\n-----Note-----\n\nNote to the first sample: numbers 2^0 = 1, 2^1 = 2, 2^2 = 4, 2^3 = 8 lie within the specified range. The number 2^4 = 16 is greater then 10, thus it shouldn't be printed.",
  "solutions": "[\"l, r, n = map(int, input().split())\\na = n\\nn = 1\\ncnt = 0\\nwhile n <= r:\\n    if n >= l:\\n        cnt += 1\\n        print(n, end=' ')\\n    n *= a\\nif cnt == 0:\\n    print(-1)\", \"l, r, k = map(int, input().split())\\ncurr = 1\\ncnt = 0\\nwhile (curr <= r):\\n    if (curr >= l):\\n        print(curr, end = ' ')\\n        cnt += 1\\n    curr *= k\\nif (cnt == 0):\\n    print(-1)\", \"#!/usr/bin/env python3\\n\\ntry:\\n    while True:\\n        l, r, k = list(map(int, input().split()))\\n        x = 1\\n        ls = [ ]\\n        while x <= r:\\n            if x >= l:\\n                ls.append(x)\\n            x *= k\\n        if ls:\\n            print(' '.join(map(str, ls)))\\n        else:\\n            print(-1)\\n\\nexcept EOFError:\\n    pass\\n\", \"#!/bin/python\\nimport collections\\nimport random\\nimport sys\\ntry:\\n    from tqdm import tqdm\\nexcept:\\n    def tqdm(iterable):\\n        return iterable\\n\\n\\n__taskname = ''\\nif __taskname:\\n    sys.stdin = open(__taskname + '.in')\\n    sys.stdout = open(__taskname + '.out', 'w')\\n\\nl, r, k = list(map(int, input().split()))\\na, x, i = [], 1, 0\\nwhile x <= r:\\n    if x >= l:\\n        a.append(x)\\n    x *= k\\n    i += 1\\nprint(*(a if a else [-1]))\\n\", \"l, r, k = map(int, input().split())\\n\\ns = 1\\n\\nwhile s < l:\\n\\ts *= k\\n\\nans = []\\nwhile s <= r:\\n\\tans.append(s)\\n\\ts *= k\\n\\nif ans:\\n\\tprint(' '.join(str(v) for v in ans))\\nelse:\\n\\tprint(-1)\", \"l, r, k = [int(x) for x in input().split()]\\nans = []\\na = 1\\nwhile a <= r:\\n    if a >= l:\\n        ans.append(a)\\n    a *= k\\n\\nif ans:\\n    for num in ans:\\n        print(num, end = ' ')\\nelse:\\n    print(-1)\\n\", \"l, r, k = list(map(int, input().split()))\\n\\nn = 1\\nnumbers = []\\n\\nwhile n <= r:\\n    if n >= l:\\n        numbers.append(n)\\n\\n    n *= k\\n\\nif len(numbers) > 0:\\n    print(' '.join(map(str, numbers)))\\nelse:\\n    print('-1')\\n\", \"read = lambda: map(int, input().split())\\nl, r, k = read()\\ncur = 1\\nflag = 0\\nwhile cur <= r:\\n    if cur >= l:\\n        flag = 1\\n        print(cur, end = ' ')\\n    cur *= k\\nif flag == 0: print(-1)\\n    \\n\", \"l, r, k = map(int, input().split())\\n\\ncurk = 1\\n\\nwhile curk < l:\\n    curk *= k\\n\\nans = 0\\n\\nwhile curk <= r:\\n    ans += 1\\n    print(curk, end=' ')\\n    curk *= k\\n\\nif not ans:\\n    print(-1)\\nelse:\\n    print()\\n\", \"l, r, k = map(int, input().split())\\n_k = int(k)\\nk = 1\\nans = 0\\nok = 0\\nwhile(k <= r) :\\n    if(k >= l) : \\n        print(k, end = ' ')\\n        ok = 1\\n    k *= _k\\nif(ok == 0) :\\n    print(-1)\", \"l, r, k = map(int, input().split())\\nans = []\\nnowa = 1;\\nwhile (nowa <= r):\\n    if (nowa >= l):\\n        ans.append(nowa)\\n    nowa *= k\\nif (len(ans) == 0):\\n    print(-1)\\nelse:\\n    print(*ans)\", \"l, r, k = map(int, input().split())\\ni, f = 1, False\\nwhile i <= r:\\n    if i >= l:\\n        f = True\\n        print(i, end=' ')\\n    i *= k\\nif not f:\\n    print('-1')\", \"l, r, k = list(map(int, input().split()))\\n\\n\\nt = 1\\nrez = []\\nfor i in range(80):\\n\\tif l <= t <= r:\\n\\t\\trez.append(t)\\n\\tt *= k\\nif rez:\\n\\tprint(*rez)\\nelse:\\n\\tprint(-1)\\n\", \"l, r, k = list(map(int, input().split()))\\nn = 1\\nans = []\\nwhile n <= r:\\n    if l <= n <= r:\\n        ans.append(n)\\n    n *= k\\nif ans:\\n    print(*ans)\\nelse:\\n    print(-1)\\n\", \"l, r, k = list(map(int, input().split()))\\na = list()\\nx = 1\\nwhile x <= r:\\n\\tif l <= x <= r:\\n\\t\\ta.append(x)\\n\\tx *= k\\nif len(a) == 0:\\n\\tprint(-1)\\nelse:\\n\\tprint(' '.join(map(str, a)))\\n\", \"l, r, k = map(int, input().split())\\nflag = 1\\nn = 1\\nwhile (n <= r) :\\n    if (n >= l) :\\n        print(n, end = \\\" \\\")\\n        flag = 0\\n    n *= k\\nif (flag == 1) :\\n    print(-1)\", \"l, r, k = map(int, input().split())\\ncur = 1\\nwhile cur < l:\\n    cur *= k\\nf = False\\nwhile cur <= r:\\n    f = True\\n    print(cur,end=' ')\\n    cur *= k\\nif not f:\\n    print(-1)\\n\", \"l, r, n = [int(x) for x in input().split()]\\n\\nf = 1\\ncount = 0\\nwhile f <= r:\\n    if f >= l:\\n        print(f, end=\\\" \\\")\\n        count += 1\\n\\n    f *= n\\n\\nif count == 0:\\n    print(-1)\\n\", \"a,b,c=map(int,input().split())\\n\\nval=1\\nflag=0\\n\\nwhile val<=b:\\n    if val>=a:\\n        flag=1\\n        print(val,end=\\\" \\\")\\n    val=val*c\\n\\nif flag==0:\\n    print(-1)\\n\", \"l, r, k = map(int, input().split())\\nst = 1\\nfl = False\\nwhile (st <= r):\\n    if (st >= l and st <= r):\\n        print(st, end = \\\" \\\")\\n        fl = True\\n        st *= k\\n    else:\\n        st *= k\\nif not fl:\\n    print(-1)\\n\", \"l, r, k = list(map(int, input().split()))\\nx = 1\\nwhile x < l:\\n    x *= k\\na = []\\nwhile x <= r:\\n    a.append(x)\\n    x *= k\\n\\nprint(-1 if not a else ' '.join(list(map(str, a))))\\n\", \"l, r, k = [int(x) for x in input().split()]\\n\\nx = 1\\n\\ncorrect = False\\nwhile x <= r:\\n    if x >= l:\\n        print(x, end=\\\" \\\")\\n        correct = True\\n    x *= k\\n\\nif not correct:\\n    print(\\\"-1\\\")\\nelse:\\n    print(\\\"\\\")\\n\", \"l, r, k = map(int, input().split())\\ncur = 1\\nflag = True\\nwhile cur <= r:\\n    if cur >= l and cur <= r:\\n        print(cur, end=\\\" \\\")\\n        flag = False\\n    cur *= k\\nif flag:\\n    print(-1)\", \"l,r,k=[int(x) for x in input().split()]\\nans=False\\nx=1\\nwhile x<=r:\\n    if l<=x:\\n        print(x, end=' ')\\n        ans=True\\n    x*=k\\nif not ans:\\n    print(-1)\\n\", \"#In the name of Allah\\n\\nfrom sys import stdin, stdout\\ninput = stdin.readline\\n\\nl, r, k = list(map(int, input().split()))\\nres = []\\nn = 1\\nwhile n <= r:\\n        if n >= l:\\n                res.append(str(n))\\n                \\n        n *= k\\nif len(res):\\n        stdout.write(\\\" \\\".join(res))\\nelse:\\n        stdout.write(\\\"-1\\\"\\n                     )\\n\"]",
  "input_output": "{\"inputs\": [\"1 10 2\\n\", \"2 4 5\\n\", \"18102 43332383920 28554\\n\", \"19562 31702689720 17701\\n\", \"11729 55221128400 313\\n\", \"5482 100347128000 342\\n\", \"3680 37745933600 10\\n\", \"17098 191120104800 43\\n\", \"10462 418807699200 2\\n\", \"30061 641846400000 3\\n\", \"32 2498039712000 4\\n\", \"1 2576683920000 2\\n\", \"5 25 5\\n\", \"1 90 90\\n\", \"95 2200128528000 68\\n\", \"64 426314644000 53\\n\", \"198765 198765 198765\\n\", \"42 2845016496000 12\\n\", \"6 6 3\\n\", \"1 10 11\\n\", \"2 10 11\\n\", \"87 160 41\\n\", \"237171123124584251 923523399718980912 7150\\n\", \"101021572000739548 453766043506276015 8898\\n\", \"366070689449360724 928290634811046396 8230\\n\", \"438133886369772308 942612870269666780 7193\\n\", \"10 10 10\\n\", \"16 16 256\\n\", \"1 1000000000000000000 1000000000\\n\", \"1000000000000000000 1000000000000000000 1000000000\\n\", \"1000000000 1000000000000000000 1000000000\\n\", \"1 1 4\\n\", \"1 999999999999999999 1000000000\\n\", \"1 1000000000000000000 999999990\\n\", \"1 1000000000000000000 999999984\\n\", \"1 1000000000000000000 324325\\n\", \"1 1000000000000000000 999999523\\n\", \"1 243 3\\n\", \"62769392426654367 567152589733560993 688813\\n\", \"1 1000000000000000000 690852001\\n\", \"1 1000000000000000000 918745157\\n\", \"1 1000000000000000000 131299843\\n\", \"2861381721051425 2861381721051425 1234\\n\"], \"outputs\": [\"1 2 4 8 \", \"-1\", \"28554 815330916 \", \"313325401 \", \"97969 30664297 9597924961 \", \"116964 40001688 13680577296 \", \"10000 100000 1000000 10000000 100000000 1000000000 10000000000 \", \"79507 3418801 147008443 6321363049 \", \"16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 1073741824 2147483648 4294967296 8589934592 17179869184 34359738368 68719476736 137438953472 274877906944 \", \"59049 177147 531441 1594323 4782969 14348907 43046721 129140163 387420489 1162261467 3486784401 10460353203 31381059609 94143178827 282429536481 \", \"64 256 1024 4096 16384 65536 262144 1048576 4194304 16777216 67108864 268435456 1073741824 4294967296 17179869184 68719476736 274877906944 1099511627776 \", \"1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 1073741824 2147483648 4294967296 8589934592 17179869184 34359738368 68719476736 137438953472 274877906944 549755813888 1099511627776 2199023255552 \", \"5 25 \", \"1 90 \", \"4624 314432 21381376 1453933568 98867482624 \", \"2809 148877 7890481 418195493 22164361129 \", \"198765 \", \"144 1728 20736 248832 2985984 35831808 429981696 5159780352 61917364224 743008370688 \", \"-1\", \"1 \", \"-1\", \"-1\", \"-1\", \"-1\", \"-1\", \"-1\", \"10 \", \"-1\", \"1 1000000000 1000000000000000000 \", \"1000000000000000000 \", \"1000000000 1000000000000000000 \", \"1 \", \"1 1000000000 \", \"1 999999990 999999980000000100 \", \"1 999999984 999999968000000256 \", \"1 324325 105186705625 34114678301828125 \", \"1 999999523 999999046000227529 \", \"1 3 9 27 81 243 \", \"326816522793383797 \", \"1 690852001 477276487285704001 \", \"1 918745157 844092663510954649 \", \"1 131299843 17239648771824649 \", \"-1\"]}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/614/A",
  "starter_code": ""
}