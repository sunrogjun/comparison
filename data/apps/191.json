{
  "task_id": "APPS/191",
  "problem_id": 191,
  "prompt": "A girl named Sonya is studying in the scientific lyceum of the Kingdom of Kremland. The teacher of computer science (Sonya's favorite subject!) invented a task for her.\n\nGiven an array $a$ of length $n$, consisting only of the numbers $0$ and $1$, and the number $k$. Exactly $k$ times the following happens:   Two numbers $i$ and $j$ are chosen equiprobable such that ($1 \\leq i < j \\leq n$).  The numbers in the $i$ and $j$ positions are swapped. \n\nSonya's task is to find the probability that after all the operations are completed, the $a$ array will be sorted in non-decreasing order. She turned to you for help. Help Sonya solve this problem.\n\nIt can be shown that the desired probability is either $0$ or it can be represented as $\\dfrac{P}{Q}$, where $P$ and $Q$ are coprime integers and $Q \\not\\equiv 0~\\pmod {10^9+7}$.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($2 \\leq n \\leq 100, 1 \\leq k \\leq 10^9$)\u00a0\u2014 the length of the array $a$ and the number of operations.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 1$)\u00a0\u2014 the description of the array $a$.\n\n\n-----Output-----\n\nIf the desired probability is $0$, print $0$, otherwise print the value $P \\cdot Q^{-1}$ $\\pmod {10^9+7}$, where $P$ and $Q$ are defined above.\n\n\n-----Examples-----\nInput\n3 2\n0 1 0\n\nOutput\n333333336\nInput\n5 1\n1 1 1 0 0\n\nOutput\n0\nInput\n6 4\n1 0 0 1 1 0\n\nOutput\n968493834\n\n\n-----Note-----\n\nIn the first example, all possible variants of the final array $a$, after applying exactly two operations: $(0, 1, 0)$, $(0, 0, 1)$, $(1, 0, 0)$, $(1, 0, 0)$, $(0, 1, 0)$, $(0, 0, 1)$, $(0, 0, 1)$, $(1, 0, 0)$, $(0, 1, 0)$. Therefore, the answer is $\\dfrac{3}{9}=\\dfrac{1}{3}$.\n\nIn the second example, the array will not be sorted in non-decreasing order after one operation, therefore the answer is $0$.",
  "solutions": "[\"N, T = list(map(int, input().split()))\\nA = [int(a) for a in input().split()]\\nif sum(A) > N//2:\\n    A = [1-a for a in A][::-1]\\nK = sum(A)\\nS = sum(A[-K:])\\nM = K + 1\\nP = 10**9+7\\ninv = pow(N*(N-1)//2, P-2, P)\\nX = [[0]*M for _ in range(M)]\\nfor i in range(M):\\n    if i > 0: X[i-1][i] = ((K-i+1)**2*inv)%P\\n    if i < M-1: X[i+1][i] = (N-2*K+i+1)*(i+1)*inv%P\\n    X[i][i] = (1-((K-i)**2*inv)-(N-2*K+i)*(i)*inv)%P\\n\\ndef ddd(n):\\n    for i in range(1, 100):\\n        if (n*i%P) < 100:\\n            return (n*i%P), i\\n    return -1, -1\\ndef poww(MM, n):\\n    if n == 1:\\n        return MM\\n    if n % 2:\\n        return mult(poww(MM, n-1), MM)\\n    return poww(mult(MM,MM), n//2)\\ndef mult(M1, M2):\\n    Y = [[0] * M for _ in range(M)]\\n    for i in range(M):\\n        for j in range(M):\\n            for k in range(M):\\n                Y[i][j] += M1[i][k] * M2[k][j]\\n                Y[i][j] %= P\\n    return Y\\n\\nX = poww(X, T)\\n\\nprint(X[S][K])\\n\", \"M = 10 ** 9 + 7\\n\\nn, k = map(int, input().split())\\na = list(map(int, input().split()))\\n\\nz, o = a.count(0), a.count(1)\\nd = pow(n * (n - 1) // 2, M - 2, M)\\n\\nif z > o:\\n    o, z = z, o\\n    a = [1 - x for x in a][::-1]\\n\\nres = [[0] * (z + 1) for i in range(z + 1)]\\ntf = [[0] * (z + 1) for i in range(z + 1)]\\nfor i in range(z + 1):\\n    res[i][i] = 1\\n    tf[i][i] = (z * (z - 1) // 2 + o * (o - 1) // 2 + i * (z - i) + (z - i) * (o - z + i)) * d % M\\n    if i < z: tf[i + 1][i] = (z - i) * (z - i) * d % M\\n    if i: tf[i - 1][i] = i * (o - z + i) * d % M\\n\\ndef mul(a, b):\\n    t = [[0] * (z + 1) for i in range(z + 1)]\\n    for i in range(z + 1):\\n        for k in range(z + 1):\\n            for j in range(z + 1):\\n                t[i][j] = (t[i][j] + a[i][k] * b[k][j]) % M\\n    return t\\n\\nwhile k:\\n    if k & 1:\\n        res = mul(res, tf)\\n    tf = mul(tf, tf)\\n    k >>= 1\\n\\nprint(res[-1][a[:z].count(0)])\", \"#!/usr/bin/env python\\n# -*- coding: utf-8 -*-\\n\\n\\\"\\\"\\\"Codeforces Round #553 (Div. 2)\\n\\nProblem F. Sonya and Informatics\\n\\n:author:         Kitchen Tong\\n:mail:    kctong529@gmail.com\\n\\nPlease feel free to contact me if you have any question\\nregarding the implementation below.\\n\\\"\\\"\\\"\\n\\n__version__ = '1.8'\\n__date__ = '2019-04-21'\\n\\nimport sys\\n\\n\\ndef binom_dp():\\n    dp = [[-1 for j in range(110)] for i in range(110)]\\n    def calculate(n, k):\\n        if n < k:\\n            return 0\\n        if n == k or k == 0:\\n            return 1\\n        if dp[n][k] > 0:\\n            return dp[n][k]\\n        else:\\n            dp[n][k] = calculate(n-1, k-1) + calculate(n-1, k)\\n        return dp[n][k]\\n    return calculate\\n\\ndef egcd(a, b):\\n    if a == 0:\\n        return (b, 0, 1)\\n    else:\\n        g, y, x = egcd(b % a, a)\\n        return (g, x - (b // a) * y, y)\\n\\ndef modinv(a, m):\\n    g, x, y = egcd(a, m)\\n    if g != 1:\\n        raise Exception('modular inverse does not exist')\\n    else:\\n        return x % m\\n\\ndef multiply(A, B, mod):\\n    if not hasattr(B[0], '__len__'):\\n        C = [sum(aij * B[j] % mod for j, aij in enumerate(ai)) for ai in A]\\n    else:\\n        C = [[0 for col in range(len(B[0]))] for row in range(len(A))]\\n        len_A = len(A)\\n        len_B = len(B)\\n        for row in range(len_A):\\n            if sum(A[row]) == 0:\\n                continue\\n            for col in range(len_B):\\n                C[row][col] = sum(A[row][k] * B[k][col]\\n                                  for k in range(len_B)) % mod\\n    return C\\n\\ndef memoize(func):\\n    memo = {}\\n    def wrapper(*args):\\n        M, n, mod = args\\n        if n not in memo:\\n            memo[n] = func(M, n, mod)\\n        return memo[n]\\n    return wrapper\\n\\n@memoize\\ndef matrix_pow(M, n, mod):\\n    # print(f'n is {n}')\\n    if n == 2:\\n        return multiply(M, M, mod)\\n    if n == 1:\\n        return M\\n    sub_M = matrix_pow(M, n//2, mod)\\n    if n % 2 == 0:\\n        return multiply(sub_M, sub_M, mod)\\n    return multiply(sub_M, matrix_pow(M, n - n//2, mod), mod)\\n\\ndef solve(n, k, a, binom, mod):\\n    ones = sum(a)\\n    zeros = n - ones\\n    M = [[0 for col in range(zeros+1)] for row in range(zeros+1)]\\n    for row in range(max(0, zeros-ones), zeros+1):\\n        pre_zeros = row\\n        pre_ones = zeros - pre_zeros\\n        post_zeros = pre_ones\\n        post_ones = ones - pre_ones\\n        M[row][row] = (pre_ones * post_ones + pre_zeros * post_zeros\\n                       + binom(zeros, 2) + binom(ones, 2))\\n        if row > max(0, zeros-ones):\\n            M[row-1][row] = pre_zeros * post_ones\\n        if row < zeros:\\n            M[row+1][row] = post_zeros * pre_ones\\n    M = [matrix_pow(M, k, mod)[-1]]\\n    b = [0] * (zeros + 1)\\n    b[zeros - sum(a[:zeros])] = 1\\n    C = multiply(M, b, mod)\\n    return C[-1]\\n\\n\\ndef main(argv=None):\\n    mod = int(1e9) + 7\\n    n, k = list(map(int, input().split()))\\n    a = list(map(int, input().split()))\\n    binom = binom_dp()\\n    P = solve(n, k, a, binom, mod)\\n    if P == 0:\\n        print(0)\\n    else:\\n        Q = pow(binom(n, 2), k, mod)\\n        print(P * modinv(Q, mod) % mod)\\n    return 0\\n\\n\\ndef __starting_point():\\n    STATUS = main()\\n    return(STATUS)\\n\\n\\n__starting_point()\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3 2\\n0 1 0\\n\",\n    \"5 1\\n1 1 1 0 0\\n\",\n    \"6 4\\n1 0 0 1 1 0\\n\",\n    \"3 2\\n1 1 1\\n\",\n    \"5 2\\n1 1 1 0 0\\n\",\n    \"6 4\\n0 0 1 1 1 1\\n\",\n    \"100 1000000000\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"7 723\\n1 0 1 1 0 0 1\\n\",\n    \"6 1000000000\\n1 1 1 1 1 1\\n\",\n    \"20 100\\n0 1 1 1 0 0 1 1 1 1 1 1 1 0 0 1 1 1 1 0\\n\",\n    \"10 10\\n1 0 1 0 1 0 1 0 1 0\\n\",\n    \"100 1000000000\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"2 1\\n0 1\\n\",\n    \"6 10101010\\n0 0 0 1 1 1\\n\",\n    \"2 1\\n1 0\\n\",\n    \"62 424941031\\n1 0 1 0 1 1 1 0 0 0 0 0 0 1 0 1 0 1 0 0 0 0 1 1 0 0 0 1 0 1 1 0 1 1 0 0 1 0 0 0 0 0 1 0 0 1 0 1 1 0 1 1 0 1 0 1 1 1 1 0 0 1\\n\",\n    \"95 205\\n1 1 0 0 1 1 1 1 1 0 0 0 0 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 0 0 0 1 0 0 0 1 0 0 1 0 1 0 1 0 1 0 0 1 0 1 0 0 0 0 1 0 1 0 0 0 0 1 1 0 1 0 0 0 0 0 1 1 0 1 0 1 0 1 1 1 1 1 1 0 1 1 1 0 1 0 0 1 1 1 1\\n\",\n    \"2 1\\n1 1\\n\",\n    \"2 1\\n0 0\\n\",\n    \"6 50550505\\n1 1 1 1 1 0\\n\",\n    \"69 708701895\\n1 1 1 0 1 0 0 1 1 0 0 1 1 1 1 0 1 1 1 0 0 0 1 0 0 1 0 0 1 1 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1 0 1 1 0 0 1 0 0 1 0 0 0 1 1 0 0 0 0 1 0 1 1 0 1\\n\",\n    \"93 208758396\\n0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"74 418\\n1 1 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 1 0 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 1 1 0 1 1 1 0\\n\",\n    \"45 841192216\\n0 1 1 0 0 1 1 1 1 1 1 1 0 0 1 0 0 0 0 0 0 0 1 0 1 0 1 0 1 1 0 0 1 1 0 0 1 0 1 1 1 0 0 0 0\\n\",\n    \"52 568367085\\n1 1 1 0 1 1 0 0 1 0 1 1 0 0 1 0 1 0 0 1 1 1 1 0 0 1 1 1 1 1 0 1 1 0 1 1 0 0 0 0 1 1 1 0 0 0 0 1 1 1 1 0\\n\",\n    \"71 1207\\n0 0 1 1 0 0 1 1 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 1 0 0 0 1 1 0 0 0 1 0 1 1 1 0 0 1 1 1 1 1 0 1 0 0 1 0 0 1 1 1 0 1 1 0 0 1 0 1 1 1 0 1 0 0 0 1 0\\n\",\n    \"59 34723\\n0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"39 67\\n1 0 1 0 1 1 0 0 1 1 1 1 0 1 1 1 0 0 1 0 1 0 0 0 0 0 1 0 1 1 1 0 0 1 1 1 1 0 1\\n\",\n    \"14 77644065\\n0 0 0 0 0 1 1 1 1 0 0 0 1 0\\n\",\n    \"8 4074\\n1 1 1 0 1 1 0 1\\n\",\n    \"41 885543234\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0\\n\",\n    \"15 2\\n0 1 0 0 0 1 0 0 0 1 0 0 1 0 0\\n\",\n    \"4 2\\n1 1 0 0\\n\",\n    \"98 207942770\\n0 0 0 0 0 0 0 0 1 1 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 1 1 1 1 1 1 0 0 1 1 0 1 1 1 1 0 0 1 1 1 0 1 1 0 0 1 1 1 1 1 1 1 1 0 1 0 0 1 0 0 0 0 1 1 0 1 0 1 1 0 0 0 0 1 0 1 0 1 1 1 0 0 1 0 1 1 1 0 1\\n\",\n    \"12 3\\n0 0 0 1 1 0 0 1 1 0 0 0\\n\",\n    \"15 780\\n0 1 0 1 1 1 1 1 0 0 0 0 1 0 1\\n\",\n    \"26 44790\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"88 51\\n0 1 0 0 1 1 1 0 1 1 0 1 0 0 1 1 0 1 1 0 1 0 0 1 1 0 0 0 0 1 0 0 1 0 0 0 0 1 1 1 1 0 1 0 1 1 1 0 0 0 0 1 1 1 0 1 0 1 0 0 1 0 0 1 0 0 0 1 1 0 1 0 1 0 1 0 1 0 0 1 1 0 0 0 0 0 1 1\\n\",\n    \"23 23\\n0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 1 1\\n\",\n    \"2 170421784\\n0 0\\n\",\n    \"50 230\\n0 1 0 0 1 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 1 1 0 1 1 0 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 1 0 0\\n\",\n    \"8 758298525\\n0 1 1 1 0 1 1 1\\n\",\n    \"4 16935781\\n0 0 0 0\\n\",\n    \"23 505\\n1 0 1 0 1 0 0 1 0 0 0 0 0 1 1 1 1 1 0 1 1 1 1\\n\",\n    \"28 298139068\\n1 1 0 0 1 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 0 0 1 0 1 1 1 0\\n\",\n    \"25 705\\n1 0 1 0 0 0 1 0 0 1 0 0 1 0 0 0 1 0 1 1 0 1 1 0 0\\n\",\n    \"54 505289730\\n0 0 0 0 0 1 1 1 1 1 0 0 0 0 0 0 1 0 0 1 1 0 1 0 0 1 0 0 0 1 1 1 0 1 1 0 0 0 0 1 0 1 1 0 1 0 0 0 0 1 0 1 1 1\\n\",\n    \"55 625625\\n0 1 0 1 1 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 0 1 1 0 1 0 0 1 0 0 1 0 1 1 0 1 1 0 1 1 1 0 1 0 1 1 1 0 0 0 1 1 0\\n\",\n    \"5 1000000000\\n0 0 0 1 1\\n\",\n    \"64 575757\\n0 0 0 0 0 1 0 0 1 1 0 0 1 0 1 1 0 0 0 1 0 1 0 1 0 1 1 1 0 1 0 0 0 0 0 0 1 0 1 1 1 0 1 1 1 0 1 1 0 1 1 1 0 1 1 0 0 0 0 1 0 1 1 1\\n\",\n    \"2 461613425\\n0 1\\n\",\n    \"91 445454545\\n0 1 1 1 0 0 1 1 0 1 1 0 0 0 0 1 1 0 0 0 0 1 0 1 1 0 1 0 0 1 1 0 0 1 1 1 0 1 1 1 1 0 1 0 1 0 0 1 1 1 0 0 0 1 0 0 0 0 1 1 1 0 0 1 1 0 1 1 0 0 0 1 0 1 1 1 0 0 1 0 1 0 0 1 1 1 1 1 1 0 0\\n\",\n    \"64 355856085\\n1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1\\n\",\n    \"93 915259084\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"5 9122\\n0 1 1 1 1\\n\",\n    \"92 1000000000\\n0 0 1 1 0 1 1 1 0 0 1 1 1 0 1 1 1 0 0 0 0 0 1 1 1 1 0 1 1 0 0 1 1 1 1 0 0 1 1 0 1 1 1 1 1 0 1 1 0 0 1 0 1 0 1 0 0 0 1 0 1 0 1 0 1 1 0 0 1 1 0 0 0 0 1 0 0 1 0 0 1 0 1 0 1 1 1 1 0 1 1 1\\n\",\n    \"38 6281\\n1 0 1 0 1 0 0 0 1 0 1 1 0 1 0 1 0 0 1 1 0 0 0 0 1 1 0 1 1 1 0 0 1 0 0 0 1 0\\n\",\n    \"90 405601721\\n0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"16 1000000000\\n0 0 0 0 0 1 0 0 0 1 0 1 1 1 1 1\\n\",\n    \"9 690557376\\n1 0 0 0 1 1 0 1 0\\n\",\n    \"8 772864\\n0 0 0 0 1 0 0 0\\n\",\n    \"91 761851245\\n0 1 0 1 1 1 0 0 1 1 0 1 0 1 1 1 0 1 0 0 1 0 1 0 1 1 0 1 0 1 0 0 0 0 0 0 1 0 1 0 1 1 1 0 1 1 1 1 0 1 0 0 0 1 1 0 1 1 1 0 0 1 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 0 1 1 1 0 1 0 1 0 0 0 0 1 1\\n\",\n    \"14 804858334\\n1 1 1 1 1 1 1 1 1 1 1 1 1 0\\n\",\n    \"67 47245433\\n0 1 0 0 0 1 0 0 1 0 0 1 1 0 0 1 0 0 0 0 0 1 1 0 1 0 0 0 1 0 0 0 1 1 1 0 1 1 0 0 1 1 0 1 0 0 1 0 0 0 1 1 0 0 1 0 1 1 1 1 1 1 1 0 1 0 0\\n\",\n    \"31 1000\\n0 0 0 0 0 0 0 1 1 0 1 1 0 0 1 1 1 1 1 0 0 0 1 0 0 0 0 0 0 1 0\\n\",\n    \"11 11111111\\n0 0 0 0 1 1 0 1 0 0 0\\n\",\n    \"89 1000000000\\n1 1 0 0 1 1 1 0 0 1 1 0 1 0 1 1 1 1 1 1 0 0 0 1 0 1 1 0 0 0 0 1 0 0 1 0 1 1 0 0 1 1 0 0 1 1 1 0 1 1 1 0 1 0 1 0 1 1 0 0 1 1 0 1 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1\\n\",\n    \"47 36889\\n0 0 0 0 1 1 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 1 0 1 0 1 0 0 1 0 0 1 0 0 0 0 1 1 0 0\\n\",\n    \"13 1\\n1 1 1 1 1 1 1 0 1 0 1 1 1\\n\",\n    \"69 1000000000\\n0 1 1 1 1 1 0 0 0 0 0 0 0 1 1 0 0 1 1 0 0 1 1 0 0 0 0 0 1 0 1 0 1 1 0 0 0 0 1 0 1 1 1 0 0 0 1 1 0 0 1 0 0 1 0 0 1 1 0 0 1 0 0 0 0 0 0 1 0\\n\",\n    \"26 458\\n1 0 0 1 1 1 0 1 1 0 1 0 0 0 0 1 1 1 0 1 0 0 1 1 0 1\\n\",\n    \"4 9545372\\n0 1 1 1\\n\",\n    \"22 1065\\n0 1 0 0 0 1 0 0 1 1 1 0 1 0 1 0 0 1 0 0 0 0\\n\",\n    \"52 816466148\\n0 0 1 1 0 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"88 99999999\\n1 1 0 0 1 0 0 0 1 0 0 1 0 1 0 0 0 1 1 1 0 0 0 0 0 1 1 1 0 0 0 1 1 1 1 0 0 1 0 1 0 0 0 0 0 0 1 1 1 0 0 1 0 0 1 1 1 0 0 1 1 1 0 0 1 1 1 1 1 1 1 1 0 0 1 1 0 1 0 0 1 0 1 1 0 0 0 0\\n\",\n    \"77 1000000000\\n1 1 1 1 0 1 1 1 0 0 1 1 1 0 1 1 1 1 1 0 0 1 1 0 1 1 1 0 1 1 1 0 1 0 0 0 1 1 0 1 1 1 1 1 0 1 1 1 1 0 0 1 1 0 1 0 0 1 1 0 0 0 1 0 1 1 0 1 0 0 0 0 1 1 0 1 1\\n\",\n    \"77 690082102\\n0 0 1 1 0 0 0 1 0 1 1 0 1 1 1 1 0 0 0 1 1 0 1 0 1 1 0 0 1 0 1 0 1 0 0 1 1 1 1 0 0 0 0 0 1 0 0 0 1 0 1 0 1 0 1 1 0 1 0 0 0 0 0 1 1 0 1 0 0 1 1 1 0 0 1 0 1\\n\"\n  ],\n  \"outputs\": [\n    \"333333336\",\n    \"0\",\n    \"968493834\",\n    \"1\",\n    \"280000002\",\n    \"163140742\",\n    \"1\",\n    \"943432053\",\n    \"1\",\n    \"95756105\",\n    \"335596758\",\n    \"1\",\n    \"0\",\n    \"335257169\",\n    \"1\",\n    \"207127441\",\n    \"563696530\",\n    \"1\",\n    \"1\",\n    \"975985364\",\n    \"203682599\",\n    \"238422110\",\n    \"729393563\",\n    \"899894444\",\n    \"833347856\",\n    \"21677943\",\n    \"750975962\",\n    \"398238624\",\n    \"499901229\",\n    \"436122735\",\n    \"126904105\",\n    \"0\",\n    \"111111112\",\n    \"357313797\",\n    \"764212377\",\n    \"672620496\",\n    \"1\",\n    \"122959231\",\n    \"109883453\",\n    \"1\",\n    \"755817224\",\n    \"97561468\",\n    \"1\",\n    \"749682909\",\n    \"46089768\",\n    \"541107651\",\n    \"499152797\",\n    \"566050219\",\n    \"400007841\",\n    \"46693839\",\n    \"0\",\n    \"946149403\",\n    \"972843467\",\n    \"731072361\",\n    \"907236024\",\n    \"758448092\",\n    \"623069108\",\n    \"140653691\",\n    \"205157554\",\n    \"33956123\",\n    \"240938600\",\n    \"351133152\",\n    \"673910319\",\n    \"6751531\",\n    \"376636619\",\n    \"900322483\",\n    \"649450374\",\n    \"882504914\",\n    \"0\",\n    \"154218920\",\n    \"686869628\",\n    \"368007311\",\n    \"134992006\",\n    \"892754580\",\n    \"944706678\",\n    \"436064901\",\n    \"79316649\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1151/F",
  "starter_code": ""
}