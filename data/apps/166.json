{
  "task_id": "APPS/166",
  "problem_id": 166,
  "prompt": "There is a matrix A of size x \u00d7 y filled with integers. For every $i \\in [ 1 . . x ]$, $j \\in [ 1 . . y ]$ A_{i}, j = y(i - 1) + j. Obviously, every integer from [1..xy] occurs exactly once in this matrix. \n\nYou have traversed some path in this matrix. Your path can be described as a sequence of visited cells a_1, a_2, ..., a_{n} denoting that you started in the cell containing the number a_1, then moved to the cell with the number a_2, and so on.\n\nFrom the cell located in i-th line and j-th column (we denote this cell as (i, j)) you can move into one of the following cells: (i + 1, j) \u2014 only if i < x;  (i, j + 1) \u2014 only if j < y;  (i - 1, j) \u2014 only if i > 1;  (i, j - 1) \u2014 only if j > 1.\n\nNotice that making a move requires you to go to an adjacent cell. It is not allowed to stay in the same cell. You don't know x and y exactly, but you have to find any possible values for these numbers such that you could start in the cell containing the integer a_1, then move to the cell containing a_2 (in one step), then move to the cell containing a_3 (also in one step) and so on. Can you choose x and y so that they don't contradict with your sequence of moves?\n\n\n-----Input-----\n\nThe first line contains one integer number n (1 \u2264 n \u2264 200000) \u2014 the number of cells you visited on your path (if some cell is visited twice, then it's listed twice).\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 the integers in the cells on your path.\n\n\n-----Output-----\n\nIf all possible values of x and y such that 1 \u2264 x, y \u2264 10^9 contradict with the information about your path, print NO.\n\nOtherwise, print YES in the first line, and in the second line print the values x and y such that your path was possible with such number of lines and columns in the matrix. Remember that they must be positive integers not exceeding 10^9.\n\n\n-----Examples-----\nInput\n8\n1 2 3 6 9 8 5 2\n\nOutput\nYES\n3 3\n\nInput\n6\n1 2 1 2 5 3\n\nOutput\nNO\n\nInput\n2\n1 10\n\nOutput\nYES\n4 9\n\n\n\n-----Note-----\n\nThe matrix and the path on it in the first test looks like this: [Image] \n\nAlso there exist multiple correct answers for both the first and the third examples.",
  "solutions": "[\"MAXN = 1000000000\\n\\nn = int(input())\\na = list(map(int, input().split()))\\n\\ndef solve1():\\t\\n\\tfor i in range(n-1):\\n\\t\\tif abs(a[i]-a[i+1]) != 1:\\n\\t\\t\\treturn False\\n\\tprint(\\\"YES\\\\n%d %d\\\" % (MAXN, 1))\\n\\treturn True\\n\\ndef solve2():\\n\\tw = -1\\n\\tfor i in range(n-1):\\n\\t\\td = abs(a[i]-a[i+1])\\n\\t\\tif d != 1:\\n\\t\\t\\tif w == -1:\\n\\t\\t\\t\\tw = d\\n\\t\\t\\telif w != d:\\n\\t\\t\\t\\treturn False\\n\\tif w <= 0:\\n\\t\\treturn False\\n\\tfor i in range(n-1):\\n\\t\\tif abs(a[i]-a[i+1]) == 1 and (a[i]-1)//w != (a[i+1]-1)//w:\\n\\t\\t\\treturn False\\n\\tprint(\\\"YES\\\\n%d %d\\\" % (MAXN, w))\\n\\treturn True\\n\\nif solve1():\\n\\tpass\\nelif solve2():\\n\\tpass\\nelse:\\n\\tprint(\\\"NO\\\")\", \"MAXN = 1000000000\\n\\nn = int(input())\\na = list(map(int, input().split()))\\n\\ndef solve1():\\t\\n\\tfor i in range(n-1):\\n\\t\\tif abs(a[i]-a[i+1]) != 1:\\n\\t\\t\\treturn False\\n\\tprint(\\\"YES\\\\n%d %d\\\" % (MAXN, 1))\\n\\treturn True\\n\\ndef solve2():\\n\\tw = -1\\n\\tfor i in range(n-1):\\n\\t\\td = abs(a[i]-a[i+1])\\n\\t\\tif d != 1:\\n\\t\\t\\tif w == -1:\\n\\t\\t\\t\\tw = d\\n\\t\\t\\telif w != d:\\n\\t\\t\\t\\treturn False\\n\\tif w <= 0:\\n\\t\\treturn False\\n\\tfor i in range(n-1):\\n\\t\\tif abs(a[i]-a[i+1]) == 1 and (a[i]-1)//w != (a[i+1]-1)//w:\\n\\t\\t\\treturn False\\n\\tprint(\\\"YES\\\\n%d %d\\\" % (MAXN, w))\\n\\treturn True\\n\\nif solve1():\\n\\tpass\\nelif solve2():\\n\\tpass\\nelse:\\n\\tprint(\\\"NO\\\")\", \"n = int(input())\\na = [int(x) for x in input().split()]\\n\\ny = []\\nfor s, t in zip(a, a[1:]):\\n    if abs(s - t) != 1 and s != t:\\n        y.append(abs(s - t))\\ny.append(1)\\ny = y[0]\\n\\nfor s, t in zip(a, a[1:]):\\n    if not(abs(s - t) == y or (abs(s - t) == 1 and min(s, t) % y != 0)):\\n        break\\nelse:\\n    print(\\\"YES\\\")\\n    print(\\\"{} {}\\\".format(10**9, y))\\n    return\\n\\nprint(\\\"NO\\\")\\n\", \"n = int(input())\\nwalk = list(map(int, input().split()))\\nMAXN = 1000000000\\ndef solve1():\\n    for i in range(n-1):\\n        if abs(walk[i+1]-walk[i]) != 1:\\n            return False\\n    print(\\\"YES\\\")\\n    print(MAXN, 1)\\n    return True\\n\\ndef solve2():\\n    colum = -1\\n    for i in range(n-1):\\n        diff = abs(walk[i+1]-walk[i])\\n        if diff != 1:\\n            if colum == -1:\\n                colum = diff\\n            elif colum != diff:\\n                return False\\n    if colum<=0:\\n        return False\\n    for i in range(n-1):\\n        if abs(walk[i+1]-walk[i]) == 1 and ((walk[i+1]-1)//colum != (walk[i]-1)//colum):\\n            return False\\n    print(\\\"YES\\\")\\n    print(MAXN,colum)\\n    return True\\n\\nif solve1():\\n    pass\\nelif solve2():\\n    pass\\nelse:\\n    print(\\\"NO\\\")\", \"n = int(input())\\na = list(map(int,input().split()))\\nx = 1\\ny = 10**9\\nif n == 1:\\n    print('YES')\\n    print(y,x)\\nelse:\\n    t = 0\\n    for i in range(1,n):\\n        s = a[i]-a[i-1]\\n        if s != 1 and s != -1:\\n            s = max(s,-s)\\n            if (x != 1 and x != s) or s == 0:\\n                print('NO')\\n                t = 1\\n                break\\n            x = s\\n    if t == 0 and x > 1:\\n        for i in range(1,n):\\n            if (a[i] % x == 0 and a[i-1] == a[i]+1) or (a[i-1] % x == 0 and a[i] == a[i-1]+1):\\n                print('NO')\\n                t = 1\\n                break\\n    if t == 0:\\n        print('YES')\\n        print(y,x)\", \"while True:\\n    n = int(input())\\n    path = list(map(int, input().split()))\\n\\n    eleminatedY = {1}\\n    y = 1\\n\\n    for i in range(n - 1):\\n\\n        diff = abs(path[i] - path[i + 1])\\n\\n        if diff == 0:\\n            print(\\\"NO\\\");return\\n\\n        if diff == 1:\\n            eleminatedY.add(min(path[i], path[i + 1]))\\n            if min(path[i], path[i + 1]) % y == 0 and y != 1:\\n                print(\\\"NO\\\");return\\n            continue\\n\\n        if y == diff:\\n            continue\\n\\n        for value in eleminatedY:\\n            if value % diff == 0:\\n                print(\\\"NO\\\");return\\n\\n        if y == 1:\\n            y = diff\\n            continue\\n        \\n        print(\\\"NO\\\");return\\n\\n    print(\\\"YES\\\\n{} {}\\\".format(1000000000, y))\\n            \\n    return\\n\", \"n=int(input())\\nm=list(map(int,input().split()))\\nx=1\\nfrom math import fabs\\nfor i in range(1,n):\\n    if not (-1<=m[i]-m[i-1]<=1):\\n        x=int(fabs(m[i]-m[i-1]))\\n        break\\nfor i in range(1,n):\\n        if not (fabs(m[i]-m[i-1])==x or (m[i]-1)//x==(m[i-1]-1)//x) or m[i-1]==m[i]:  \\n            print('NO')\\n            break\\nelse:\\n    print('YES')\\n    print(10**9,x)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"8\\n1 2 3 6 9 8 5 2\\n\",\n    \"6\\n1 2 1 2 5 3\\n\",\n    \"2\\n1 10\\n\",\n    \"3\\n1 2 2\\n\",\n    \"1\\n1\\n\",\n    \"1\\n6\\n\",\n    \"2\\n2 3\\n\",\n    \"2\\n1000000000 1\\n\",\n    \"4\\n3 2 4 2\\n\",\n    \"5\\n1 2 5 4 3\\n\",\n    \"2\\n1 1\\n\",\n    \"3\\n1 3 4\\n\",\n    \"1\\n1000000000\\n\",\n    \"6\\n1 4 5 6 3 2\\n\",\n    \"8\\n1 2 3 6 9 8 7 6\\n\",\n    \"9\\n4 3 2 1 5 6 7 8 9\\n\",\n    \"8\\n2 5 8 9 6 3 2 1\\n\",\n    \"4\\n1 2 1 3\\n\",\n    \"3\\n1 4 3\\n\",\n    \"5\\n1 2 3 4 1\\n\",\n    \"6\\n3 5 2 1 2 1\\n\",\n    \"2\\n1000000000 999999999\\n\",\n    \"3\\n2 4 3\\n\",\n    \"5\\n1 2 3 2 4\\n\",\n    \"6\\n10 8 6 4 2 1\\n\",\n    \"7\\n1 4 7 8 9 10 11\\n\",\n    \"8\\n1 2 3 2 3 4 3 8\\n\",\n    \"4\\n3 4 3 5\\n\",\n    \"4\\n1 4 3 2\\n\",\n    \"13\\n1 3 4 6 5 3 1 2 4 6 5 3 1\\n\",\n    \"3\\n1 3 2\\n\",\n    \"6\\n4 3 6 9 8 7\\n\",\n    \"6\\n1 2 4 3 5 6\\n\",\n    \"5\\n1 2 4 3 1\\n\",\n    \"5\\n1 2 4 3 5\\n\",\n    \"5\\n3 6 5 4 3\\n\",\n    \"37\\n94 7 32 29 57 22 11 70 57 61 12 75 93 24 4 47 98 43 99 22 50 32 37 64 80 9 40 87 38 70 17 41 77 76 20 66 48\\n\",\n    \"2\\n99999999 100000000\\n\",\n    \"5\\n3 4 5 6 2\\n\",\n    \"6\\n3 8 7 6 5 4\\n\",\n    \"10\\n999999999 999999998 999999997 999999996 999999995 999999994 999999993 999999992 999999991 999999990\\n\",\n    \"2\\n1000000000 999999998\\n\",\n    \"5\\n8 9 10 14 13\\n\",\n    \"4\\n1 3 2 4\\n\",\n    \"4\\n2 3 5 6\\n\",\n    \"5\\n1 2 3 4 2\\n\",\n    \"3\\n5 6 4\\n\",\n    \"1\\n1000000\\n\",\n    \"3\\n9 10 1\\n\",\n    \"28\\n1 3 5 7 9 10 8 6 4 2 1 2 4 3 5 6 8 7 9 10 8 7 5 6 4 3 1 2\\n\",\n    \"5\\n3 4 5 6 9\\n\",\n    \"3\\n6 8 7\\n\",\n    \"1\\n100000000\\n\",\n    \"6\\n2 4 6 5 6 5\\n\",\n    \"2\\n999999999 1000000000\\n\",\n    \"4\\n3 6 7 8\\n\",\n    \"23\\n92 34 58 40 76 3 38 66 76 23 85 36 47 43 22 46 98 72 97 80 57 77 96\\n\",\n    \"3\\n6 7 4\\n\",\n    \"4\\n1 2 4 3\\n\",\n    \"3\\n3 2 4\\n\",\n    \"5\\n1 4 3 2 1\\n\",\n    \"5\\n1 3 5 4 3\\n\",\n    \"3\\n19260816 19260817 19260818\\n\",\n    \"3\\n1 3 6\\n\",\n    \"2\\n999999998 1000000000\\n\",\n    \"8\\n2 4 6 5 6 5 3 4\\n\",\n    \"3\\n4 3 6\\n\",\n    \"2\\n246642 246641\\n\",\n    \"3\\n9 7 5\\n\",\n    \"10\\n1 2 1 2 1 2 1 2 1 2\\n\",\n    \"5\\n1 3 5 7 8\\n\",\n    \"4\\n1 10 9 10\\n\",\n    \"2\\n2 4\\n\",\n    \"8\\n1 2 4 3 5 6 8 7\\n\",\n    \"3\\n4 3 2\\n\",\n    \"3\\n3 2 1\\n\",\n    \"4\\n999 1000 2000 2001\\n\",\n    \"3\\n4 2 5\\n\",\n    \"2\\n500000000 1000000000\\n\",\n    \"3\\n4 5 7\\n\",\n    \"5\\n1 3 4 5 4\\n\",\n    \"7\\n550 555 554 553 554 555 560\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\n1000000000 3\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 9\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 1\\n\",\n    \"YES\\n1000000000 1\\n\",\n    \"YES\\n1000000000 1\\n\",\n    \"YES\\n1000000000 999999999\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"YES\\n1000000000 1\\n\",\n    \"YES\\n1000000000 3\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 3\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 1\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 5\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 1\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 1\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"YES\\n1000000000 1\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"YES\\n1000000000 1\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"YES\\n1000000000 1\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 1\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 1\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"YES\\n1000000000 1\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"YES\\n1000000000 2\\n\",\n    \"YES\\n1000000000 1\\n\",\n    \"YES\\n1000000000 1\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 500000000\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1000000000 5\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/954/C",
  "starter_code": ""
}