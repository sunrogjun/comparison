{
  "task_id": "APPS/142",
  "problem_id": 142,
  "prompt": "A New Year party is not a New Year party without lemonade! As usual, you are expecting a lot of guests, and buying lemonade has already become a pleasant necessity.\n\nYour favorite store sells lemonade in bottles of n different volumes at different costs. A single bottle of type i has volume 2^{i} - 1 liters and costs c_{i} roubles. The number of bottles of each type in the store can be considered infinite.\n\nYou want to buy at least L liters of lemonade. How many roubles do you have to spend?\n\n\n-----Input-----\n\nThe first line contains two integers n and L (1 \u2264 n \u2264 30; 1 \u2264 L \u2264 10^9)\u00a0\u2014 the number of types of bottles in the store and the required amount of lemonade in liters, respectively.\n\nThe second line contains n integers c_1, c_2, ..., c_{n} (1 \u2264 c_{i} \u2264 10^9)\u00a0\u2014 the costs of bottles of different types.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the smallest number of roubles you have to pay in order to buy at least L liters of lemonade.\n\n\n-----Examples-----\nInput\n4 12\n20 30 70 90\n\nOutput\n150\n\nInput\n4 3\n10000 1000 100 10\n\nOutput\n10\n\nInput\n4 3\n10 100 1000 10000\n\nOutput\n30\n\nInput\n5 787787787\n123456789 234567890 345678901 456789012 987654321\n\nOutput\n44981600785557577\n\n\n\n-----Note-----\n\nIn the first example you should buy one 8-liter bottle for 90 roubles and two 2-liter bottles for 30 roubles each. In total you'll get 12 liters of lemonade for just 150 roubles.\n\nIn the second example, even though you need only 3 liters, it's cheaper to buy a single 8-liter bottle for 10 roubles.\n\nIn the third example it's best to buy three 1-liter bottles for 10 roubles each, getting three liters for 30 roubles.",
  "solutions": "[\"3\\n# Copyright (C) 2017 Sayutin Dmitry.\\n#\\n# This program is free software; you can redistribute it and/or\\n# modify it under the terms of the GNU General Public License as\\n# published by the Free Software Foundation; version 3\\n#\\n# This program is distributed in the hope that it will be useful,\\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n# GNU General Public License for more details.\\n#\\n# You should have received a copy of the GNU General Public License\\n# along with this program; If not, see <http://www.gnu.org/licenses/>.\\n\\ndef solve(a, l):\\n    if l == 0:\\n        return 0\\n\\n    if l == 1:\\n        return a[0]\\n    \\n    k = 0\\n    while (2 ** k) < l:\\n        k += 1\\n    \\n    return min(a[k], a[k - 1] + solve(a, l - (2 ** (k - 1))))\\n    \\n\\ndef main():\\n    n, l = list(map(int, input().split()))\\n    a = list(map(int, input().split()))\\n\\n    for i in range(n - 2, -1, -1):\\n        if a[i] > a[i + 1]:\\n            a[i] = a[i + 1]\\n    \\n    for i in range(1, n):\\n        if a[i] > 2 * a[i - 1]:\\n            a[i] = 2 * a[i - 1]\\n\\n    while len(a) < 35:\\n        a.append(2 * a[len(a) - 1])\\n\\n    #print(a)\\n\\n    print(solve(a, l))\\n            \\nmain()\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\nn, L = map(int, input().split())\\nc = list(map(int, input().split()))\\na = [c[0]]\\n\\nfor i in range(1, 31):\\n  cand = [a[-1] * 2]\\n  if i < n: cand.append(c[i])\\n  a.append(min(cand))\\n\\nans = []\\nsum = 0\\n\\nfor i in reversed(range(31)):\\n  if L <= (1<<i):\\n    ans.append(sum + a[i])\\n  else:\\n    L -= (1<<i)\\n    sum += a[i]\\n  \\nprint(min(ans))\", \"n, m = map(int, input().split())\\nl = [int(x) for x in input().split()]\\nfor i in range(1, n):\\n    l[i] = min(l[i], 2*l[i - 1])\\nc = l + [l[-1] * 2 ** i for i in range(1, 32)]\\n\\ndef cost(x):\\n    ans = 0\\n    for i in range(32):\\n        if x & (1 << i):\\n            ans += c[i]\\n    return ans\\n\\nans = cost(m)\\nfor i in range(32):\\n    if not (m & (1 << i)):\\n        tmp = m - (m % (1 << i)) + (1 << i)\\n        ans = min(ans, cost(tmp))\\n\\nprint(ans)\", \"read = lambda: list(map(int, input().split()))\\nn, L = read()\\nc = list(read())\\nfor _ in range(5):\\n    for i in range(n - 2, -1, -1):\\n        c[i] = min(c[i], c[i + 1])\\n    for i in range(1, n):\\n        c[i] = min(c[i], c[i - 1] * 2)\\ncur = 0\\nans = 10 ** 30\\nL1 = L\\nfor i in range(n - 1, -1, -1):\\n    cnt = L1 // (2**i)\\n    cur += cnt * c[i]\\n    ans = min(ans, cur + c[i])\\n    L1 -= cnt * (2**i)\\nans = min(ans, cur)\\nfor i in range(n - 1, -1, -1):\\n    if (2**i)>=L:\\n        ans = min(ans, c[i])\\nprint(ans)\\n\", \"# -*- coding: utf-8 -*-\\n\\\"\\\"\\\"\\nCreated on Mon Jan  8 09:32:18 2018\\n\\n@author: yanni\\n\\\"\\\"\\\"\\n\\nn, L = [int(x) for x in input().split()]\\nc = [int(x) for x in input().split()]\\nsize = [2**p for p in range(n)]\\nfor index in range(n):\\n    if (index > 0):\\n        c[index] = min(c[index], c[index-1]*2)\\nfor index in range(n):\\n    if (index > 0):\\n        temp = n-1-index\\n        c[temp] = min(c[temp], c[temp+1])\\nposs = []\\nbase = 0\\nmaxindex = 0\\nwhile (size[maxindex] < L and maxindex < n-1):\\n    maxindex += 1\\nif (size[maxindex] < L):\\n    base = (L//size[maxindex]) * c[maxindex]\\n    L = L % size[maxindex]\\nif (L == 0):\\n    print(base)\\nelse:\\n    poss.append(base + c[maxindex])\\n    curr = base\\n    while (L > 0):\\n        while (size[maxindex] >= 2*L):\\n            maxindex -= 1\\n        poss.append(curr + c[maxindex])\\n        if (maxindex == 0):\\n            curr += c[0]\\n            L = 0\\n        else:\\n            L -= size[maxindex-1]\\n            curr += c[maxindex-1]\\n    poss.append(curr)\\n    print(min(poss))\\n    \\n        \\n\", \"def ii():\\n    return int(input())\\ndef mi():\\n    return map(int, input().split())\\ndef li():\\n    return list(mi())\\n\\nn, L = mi()\\nC = li()\\nfor i in range(1, n):\\n    C[i] = min(C[i], C[i-1] * 2)\\n\\nx = 2 ** (n-1)\\ny = 0\\nz = 10 ** 18\\nfor i in range(n-1, -1, -1):\\n    t = L // x\\n    y += C[i] * t\\n    z = min(z, y + C[i])\\n    L %= x\\n    x //= 2\\nz = min(z, y)\\nprint(z)\", \"#!/usr/bin/env python3\\n\\ndef main():\\n    n, needed = list(map(int, input().split()))\\n    costs = list(map(int, input().split()))\\n\\n    done = False\\n    while not done:\\n        done = True\\n        cur = costs[0]\\n        for i, x in enumerate(costs[1:], 1):\\n            cur <<= 1\\n            if cur < x:\\n                costs[i] = cur\\n                done = False\\n            else:\\n                cur = x\\n        for i in range(n - 2, -1, -1):\\n            if costs[i] > costs[i + 1]:\\n                costs[i] = costs[i + 1]\\n                done = False\\n\\n    def calc(total):\\n        result = 0\\n        for i in range(31):\\n            if total & 1 << i:\\n                if i < n:\\n                    result += costs[i]\\n                else:\\n                    result += costs[-1] << (i - n + 1)\\n        return result\\n\\n    result = calc(needed)\\n    for i in range(30, -1, -1):\\n        x = (needed >> i | 0x1) << i\\n        if x >= needed:\\n            result = min(result, calc(x))\\n\\n    print(result)\\n\\ntry:\\n    while True:\\n        main()\\nexcept EOFError:\\n    pass\\n\", \"from sys import stdin, stdout\\n\\n\\nsze = 100\\nINF = float('inf')\\n\\nn, l = map(int, stdin.readline().split())\\nc = list(map(int, stdin.readline().split()))\\nmay = [1 for i in range(sze)]\\n\\nfor i in range(n - 1, -1, -1):\\n    for j in range(i):\\n        if c[i] > c[j] * 2 ** (i - j):\\n            may[i] = 0\\n\\n\\n\\nans = INF\\n\\ncnt = 0\\nvalue = 0\\n\\nfor i in range(n - 1, -1, -1):\\n    if not may[i]:\\n        continue\\n    \\n    v = l - value\\n    \\n    if not v % (2 ** i):\\n        ans = min(ans, cnt + v * c[i] // (2 ** i))\\n    else:\\n        ans = min(ans, cnt + (v // (2 ** i) + 1) * c[i])\\n    \\n    cnt += v // (2 ** i) * c[i]\\n    value += (v // (2 ** i)) * (2 ** i)\\n\\nstdout.write(str(ans))\", \"n, l = map(int, input().split())\\np = list(map(int, input().split()))\\nd = []\\nd = [[p[i] / 2**i, i + 1] for i in range(n)]\\nd.sort(key = lambda x: x[0])\\nres = 10**18\\nq = l\\ncurres = 0\\nfor i in d:\\n\\tif i[1] == 1:\\n\\t\\tcurres += p[i[1] - 1] * q\\n\\t\\tres = min(res, curres)\\n\\t\\tbreak\\n\\tcurb = q // 2**(i[1] - 1)\\n\\tcurres += curb * p[i[1] - 1]\\n\\tres = min(res, curres + p[i[1] - 1])\\n\\tq %= 2**(i[1] - 1)\\nprint(res)\", \"n, l = map(int, input().split())\\narr = list(map(int, input().split()))\\nfor i in range(1, len(arr)):\\n\\tarr[i] = min(arr[i], arr[i - 1] * 2)\\nfor i in range(64):\\n\\tarr.append(arr[-1] * 2)\\ndp = 0\\nfor i in range(64):\\n\\tif ((l >> i) & 1):\\n\\t\\tdp += arr[i]\\n\\telse:\\n\\t\\tdp = min(dp, arr[i])\\nprint(dp)\", \"n, L = list(map(int, input().split()))\\npr = list(map(int, input().split()))\\nres = 0\\nposs = []\\nber = [(pr[i] / 2 ** i, i) for i in range(n)]\\nber.sort()\\nfor i in range(n):\\n    d = L // (2 ** ber[i][1])\\n    res += d * pr[ber[i][1]]\\n    L -= d * (2 ** ber[i][1])\\n    if L == 0:\\n        poss.append(res)\\n    poss.append(res + pr[ber[i][1]])\\nprint(min(poss))\\n\", \"n, L = [int(i) for i in input().split()]\\nc = [int(i) for i in input().split()]\\nfor i in range(1, n):\\n    if (c[i] > c[i-1] * 2):\\n        c[i] = c[i-1] * 2\\nans1 = 0\\nans2 = 0\\nans = 10**20\\nfor i in range(n-1, -1, -1):\\n    r1 = L // (2**i)\\n    r2 = (L + 2**i - 1) // (2**i)\\n    L -= (r1 * 2**i)\\n    ans1 = ans2 + r2 * c[i]\\n    ans2 += r1 * c[i]\\n    ans = min(ans, ans1)\\nans = min(ans, ans2)\\nprint(ans)\", \"n,L=map(int,input().split())\\n\\npowers=[]\\nfir=1\\nfor i in range(n):\\n    powers.append(fir)\\n    fir*=2\\n    \\nc=list(map(int,input().split()))\\n\\nfor i in range(1,n):\\n    c[i]=min(2*c[i-1],c[i])\\ncost=0\\nfincost=[]\\n#print(powers)\\nfor i in range(n-1,-1,-1):\\n    cost+=(L//powers[i])*c[i]\\n    L=L%powers[i]\\n    if(L==0):\\n        fincost.append(cost)\\n        \\n    else:\\n        fincost.append(cost+c[i])\\nprint(int(min(fincost)))\", \"def solve(l, costs):\\n\\tans = 0\\n\\tfor i in range(31, -1, -1):\\n\\t\\tif ((l >> i) & 1) == 1:\\n\\t\\t\\tans += min(costs[i + 1], costs[i] + solve(l - ex(2, i), costs))\\n\\t\\t\\tbreak\\n\\treturn ans\\n\\ndef ex(base, exp):\\n\\tans = 1\\n\\tfor i in range(exp):\\n\\t\\tans = ans * base\\n\\treturn ans\\n\\nn, l = str(input()).split(' ')\\nn, l = int(n), int(l)\\n\\ncosts = str(input()).split(' ')\\ncosts = [int(c) for c in costs]\\n\\nfor i in range(1, n):\\n\\tcosts[i] = min(costs[i], 2 * costs[i - 1])\\n\\t\\nfor i in range(len(costs), 32):\\n\\tcosts.append(2 * costs[i - 1])\\n\\nfor i in range(30, -1, -1):\\n\\tcosts[i] = min(costs[i], costs[i + 1])\\n\\t\\nprint(solve(l, costs))\\n\", \"\\nn, L = map(int, input().split())\\nc = [*map(int, input().split())]\\nrational = [True] * n\\nfor i in range(n):\\n\\tfor j in range(n):\\n\\t\\tif i < j and c[i] >= c[j]:\\n\\t\\t\\trational[i] = False\\n\\t\\tif i < j and c[i] * (2 ** (j - i)) <= c[j]:\\n\\t\\t\\trational[j] = False\\n\\ndef dfs(i, L):\\n\\tif i == 0: \\n\\t\\treturn L * c[0]\\n\\telif rational[i]:\\n\\t\\tLi = 2 ** i\\n\\t\\tif Li >= L:\\n\\t\\t\\treturn min(c[i], dfs(i - 1, L))\\n\\t\\telse:\\n\\t\\t\\treturn (L // Li * c[i]) + dfs(i, L % Li)\\n\\telse:\\n\\t\\treturn dfs(i - 1, L)\\n\\n\\nprint(dfs(n - 1, L))\", \"import sys\\n\\nn, L = list(map (int, sys.stdin.readline().split()))\\nc = list (map (int, sys.stdin.readline().split()))\\nfor i in range (1, n):\\n  c[i] = min (c[i], 2 * c[i-1])\\nfor i in range (n-2, -1, -1):\\n  c[i] = min (c[i], c[i+1])\\n#print (c)\\n\\n\\nres = L // 2 ** (n - 1) * c[n - 1]\\nL %= 2 ** (n - 1)\\ntres = 0\\nfor sh in range (n):\\n  if (L & (2 ** sh)) != 0:\\n    tres += c[sh]\\n  else:\\n    tres = min (tres, c[sh])\\n\\nres += tres\\nprint (res)\\n\", \"def solve(a1,b1, cur_sum, cur_L, idx):\\n    if cur_L == 0:\\n        return cur_sum\\n    if idx == len(a1)-1:\\n        if cur_L > 0:\\n            ost = cur_L%b1[-1] > 0\\n            if ost:\\n                cur_sum += a1[-1]\\n            cur_sum += a1[-1]* (cur_L//b1[-1])\\n            return cur_sum\\n        else:\\n            return cur_sum\\n    else:\\n        ost = cur_L%b1[idx] > 0\\n        if ost:\\n            s1 = solve(a1,b1, cur_sum+a1[idx]*((cur_L//b[idx]) + 1), 0,idx+1)\\n            s2 = solve(a1,b1, cur_sum+a1[idx]*((cur_L//b[idx])), cur_L % b1[idx],idx+1)\\n            return min(s1,s2)\\n        else:\\n            return solve(a1,b1, cur_sum+a1[idx]*((cur_L//b[idx])), cur_L % b1[idx],idx+1)\\n            \\n\\n            \\nn, L = list(map(int, input().split()))\\na = list(map(int,input().split()))\\nb = [2**i for i in range(len(a))]\\nfor i in range(len(a)):\\n        for j in range(len(a) - 1, i, -1):\\n            if a[j]/b[j] < a[j-1]/b[j-1]:\\n                a[j], a[j-1] = a[j-1], a[j]\\n                b[j], b[j-1] = b[j-1], b[j]\\nans = solve(a,b,0,L,0)\\nprint (ans)\\n\\n        \\n\", \"n, lt = (int(x) for x in input().split())\\ncosts = [int(x) for x in input().split()]\\n\\nc1 = costs[0]\\ncosts = costs[1:]\\n\\nmaincost = lt * c1\\nmainlen = lt\\nremcost = 0\\n\\ncurrv = 1\\nfor c in costs:\\n    currv *= 2\\n    nmainl = lt - (lt % currv)\\n    prevc = (maincost / mainlen) if maincost != 0 else 0\\n    if prevc > (c/currv):\\n\\n\\n        nremlen = mainlen - nmainl\\n        remcost += (maincost * nremlen // mainlen)\\n\\n        mainlen = nmainl\\n        maincost = mainlen * c // currv\\n\\n    if remcost > c:\\n        remcost = c\\nprint(maincost + remcost)\", \"n, lit = list(map(int, input().split()))\\ncost = list(map(int, input().split())) + ([1 << 100] * 33)\\nn = len(cost)\\nrlit = lit\\n\\nfor i in range(n):\\n    for j in range(i-1, -1, -1):\\n        cost[i] = min(cost[i], cost[j] * (1 << (i - j)))\\n\\nres = 0\\n\\nfor i in range(n):\\n    if (1 << i) & lit:\\n        res += cost[i]\\n\\nb = []\\n\\nwhile lit:\\n    b.append(lit % 2)\\n    lit //= 2\\n\\nrres = res\\n\\nfor i in range(len(b)-1, -1, -1):\\n    if b[i] == 1:\\n        for j in range(i-1, -1, -1):\\n            if b[j] == 0:\\n                add = cost[j]\\n                sub = 0\\n                for k in range(j-1, -1, -1):\\n                    if b[k] == 1:\\n                        sub += cost[k]\\n                res = min(res, rres+add-sub)\\n\\nfor i in range(n):\\n    if (1 << i) > rlit and cost[i] < res:\\n        res = cost[i]\\n\\nprint(res)\\n\", \"from itertools import permutations\\n\\nMOD = 10**9+7\\n\\ndef find_best(c):\\n    n = 2 ** len(c)\\n    best_c = c[0] * n\\n    best_i = 0\\n    for i, ci in enumerate(c):\\n        if n // (2**i) * c[i] < best_c:\\n            best_c = n // (2**i) * c[i]\\n            best_i = i\\n    return best_i\\n\\ndef main():\\n    n, l = [int(c) for c in input().split(' ')]\\n    c = [int(c) for c in input().split(' ')]\\n    ans = []\\n    cur_ans = 0\\n    while l:\\n        ind = find_best(c[:n])\\n        vol = 2**ind\\n        cnt = l // vol\\n        l %= vol\\n        cur_ans += cnt * c[ind]\\n        ans.append(cur_ans + (l % vol and c[ind] or 0))\\n        n = ind\\n    print(min(ans))\\n\\nwhile 1:\\n    main()\\n    break\\n# input()\\n\", \"INF = int(1e18)\\n\\ndef read_int():\\n    return list(map(int, input().split()))\\n\\n\\nn, l = read_int()\\ncosts = read_int()\\n\\nbottles = [(1 << i, c) for i, c in enumerate(costs)]\\nbottles.sort(key=lambda b: (b[1] / b[0], 1 / b[1]))\\n\\nmin_cost = dict()\\n\\ndef find_min_cost(l):\\n    if l == 0:\\n        return 0\\n    if l in min_cost:\\n        return min_cost[l]\\n    c = INF\\n    for b in bottles:\\n        c1 = (l + b[0] - 1) // b[0] * b[1]\\n        c2 = l // b[0] * b[1] + find_min_cost(l % b[0]) if l > b[0] else INF\\n        c = min(c, c1, c2)\\n    min_cost[l] = c\\n    return min_cost[l]\\n\\nprint(find_min_cost(l))\", \"n, l = map(int, input().split())\\nc = list(map(int, input().split()))\\n\\nv = []\\nfor i in range(n):\\n    v.append(2**i)\\nfrom math import ceil\\ndef sl(n,l,c, bl):\\n    #print(n, l, c, bl)\\n    s = []\\n    for i in range(n):\\n        if i not in bl:\\n            s.append((v[i], v[i]/c[i], c[i], i))\\n    sm = min(s, key=lambda x: -x[1])\\n    ct = ceil(l / sm[0])\\n    if sm[0] == 1:\\n        return ct*sm[2]\\n    ans = (ct-1)*sm[2]\\n    ans1 = min(sm[2], sl(n, l-(ct-1)*sm[0], c, bl + [sm[3]]))\\n    return ans + ans1\\nprint(sl(n, l, c, []))\", \"n,L=[int(i) for i in input().split()]\\nc=[int(i) for i in input().split()]\\ncostPerLemon=[]\\nans=12345678901234567890\\n\\nfor i in range(n):\\n\\tcostPerLemon.append(c[i]/2**i)\\n\\n\\nsize=n\\nmoney=0\\nwhile size>1:\\n\\ttarget=min(costPerLemon)\\n\\ti=costPerLemon.index(target)\\n\\t\\n\\ttimes=int(L/(2**i))\\n\\tmoney+=c[i]*times\\n\\tL-=(2**i)*times\\n\\t\\n\\tans=min(ans,money+c[i])\\n\\tsize=i\\n\\twhile len(costPerLemon)>size:\\n\\t\\tcostPerLemon.pop(-1)\\nmoney+=L*c[0]\\nans=min(ans,money)\\n\\nprint(ans)\\n\\n\", \"n, L = [int(k) for k in input().split(' ') if k]\\ndp = [int(k) for k in input().split(' ') if k]\\nfor i in range(1, n):\\n\\tdp[i] = min(2 * dp[i - 1], dp[i])\\nbinary = []\\nwhile L != 0:\\n\\tbinary.append(L % 2)\\n\\tL //= 2\\nwhile len(dp) < len(binary):\\n\\tdp.append(2 * dp[-1])\\ndef minify(p):\\n\\tresult = 999999999999999999999999999\\n\\tfor i in range(p + 1, len(dp)):\\n\\t\\tresult = min(result, dp[i])\\n\\tif p == 0:\\n\\t\\treturn min(result, (dp[p] if binary[p] else 0))\\n\\treturn min(result, (dp[p] if binary[p] else 0) + minify(p - 1))\\nprint(minify(len(binary) - 1))\\n\", \"n, L = list(map(int,input().split()))\\narr = [int(x) for x in input().split()]\\n\\ndef pos(x):\\n    ans = 0\\n    while(x):\\n        x //= 2\\n        ans += 1\\n    return ans - 1\\n\\ndef solve(ltr):\\n    if ltr == 0:\\n        return 0\\n    val = pos(ltr)\\n    if val + 1 < n:\\n        Bmin = min(arr[val + 1:])\\n    else:\\n        val = n - 1\\n        Bmin = 4e20\\n    minCost = 4e20\\n    amt = 0\\n    for i in range(val + 1):\\n        v = arr[i] / (2 ** i)\\n        if v <= minCost:\\n            minCost = v\\n            amt = i\\n    minCost = arr[amt]\\n    minCost *= ltr // (2 ** amt)\\n    return min(minCost + solve(ltr % ( 2 ** amt)), Bmin)\\n\\nprint(solve(L))\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4 12\\n20 30 70 90\\n\",\n    \"4 3\\n10000 1000 100 10\\n\",\n    \"4 3\\n10 100 1000 10000\\n\",\n    \"5 787787787\\n123456789 234567890 345678901 456789012 987654321\\n\",\n    \"30 792520535\\n528145579 682850171 79476920 178914057 180053263 538638086 433143781 299775597 723428544 177615223 959893339 639448861 506106572 807471834 42398440 347390133 65783782 988164990 606389825 877178711 513188067 609539702 558894975 271129128 956393790 981348376 608410525 61890513 991440277 682151552\\n\",\n    \"30 719520853\\n1 3 7 9 21 44 81 49 380 256 1592 1523 4711 6202 1990 48063 112547 210599 481862 1021025 2016280 643778 4325308 3603826 20964534 47383630 100267203 126018116 187142230 604840362\\n\",\n    \"30 604179824\\n501412684 299363783 300175300 375965822 55881706 96888084 842141259 269152598 954400269 589424644 244226611 443088309 914941214 856763895 380059734 9424058 97467018 912446445 609122261 773853033 728987202 239388430 617092754 182847275 385882428 86295843 416876980 952408652 399750639 326299418\\n\",\n    \"1 1000000000\\n1000000000\\n\",\n    \"1 1\\n1\\n\",\n    \"30 1000000000\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n\",\n    \"5 25\\n52 91 84 66 93\\n\",\n    \"10 660\\n2316 3782 9667 4268 4985 2256 6854 9312 4388 9913\\n\",\n    \"20 807689532\\n499795319 630489472 638483114 54844847 209402053 71113129 931903630 213385792 726471950 950559532 396028074 711222849 458354548 937511907 247071934 160971961 333550064 4453536 857363099 464797922\\n\",\n    \"30 842765745\\n2 2 2 4 6 8 12 12 18 28 52 67 92 114 191 212 244 459 738 1078 1338 1716 1860 1863 2990 4502 8575 11353 12563 23326\\n\",\n    \"1 1\\n1000000000\\n\",\n    \"1 1000000000\\n1\\n\",\n    \"30 1\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n\",\n    \"30 1000000000\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"30 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"1 570846883\\n300888960\\n\",\n    \"2 245107323\\n357416000 761122471\\n\",\n    \"3 624400466\\n824008448 698922561 760128125\\n\",\n    \"5 972921345\\n496871039 134331253 959524096 747165691 981088452\\n\",\n    \"8 700735368\\n931293374 652764228 183746499 853268148 653623691 684604018 902322304 186452621\\n\",\n    \"13 695896744\\n495801986 946818643 421711713 151976207 616318787 713653645 893406153 42255449 871957806 865208878 547381951 478062469 516417162\\n\",\n    \"21 186982676\\n261355063 273322266 663309548 981847874 432074163 204617748 86151188 381783810 725544703 947880176 870951660 226330358 680228931 959825764 972157951 874066182 208942221 587976360 749662969 377541340 841644620\\n\",\n    \"29 140874704\\n948286516 335531500 165926134 633474522 606947099 21370216 16126534 254131475 624116869 824903957 541685498 351709345 925541565 253434732 759289345 168754543 993046389 636985579 332772332 103110829 311797311 739860627 233674609 950017614 387656468 939870312 161573356 176555912 592529105\\n\",\n    \"6 566613866\\n1 3 3 16 11 13\\n\",\n    \"11 435675771\\n2 2 2 4 4 5 5 8 10 18 21\\n\",\n    \"13 688240686\\n2 4 1 15 7 1 34 129 295 905 1442 1198 3771\\n\",\n    \"15 645491742\\n2 2 2 2 3 3 4 8 10 14 19 37 42 74 84\\n\",\n    \"29 592983020\\n2 3 7 8 30 45 125 132 124 61 1231 1626 7470 14538 18828 35057 34820 219967 359159 362273 1577550 2434174 1736292 15104217 17689384 39467552 50809520 13580992 414752454\\n\",\n    \"29 42473833\\n13 18 21 32 45 72 134 203 320 342 400 565 1039 1093 2142 3383 5360 7894 13056 17053 26524 38453 63285 102775 156618 252874 304854 600862 857837\\n\",\n    \"28 48504243\\n1 1 6 1 32 37 125 212 187 676 1679 771 485 9030 1895 26084 109430 96769 257473 383668 645160 1550917 6195680 6309095 16595706 13231037 99591007 255861473\\n\",\n    \"28 17734553\\n13 22 33 59 93 164 166 308 454 532 771 898 1312 2256 3965 5207 6791 13472 13793 26354 47030 68133 118082 199855 221897 257395 417525 536230\\n\",\n    \"27 358801274\\n2 3 6 10 2 30 124 35 249 268 79 4013 1693 3522 17730 17110 52968 235714 155787 405063 1809923 667660 2266461 14291190 15502027 54103386 14154765\\n\",\n    \"27 437705674\\n13 13 21 21 25 31 49 83 148 243 246 263 268 282 475 867 1709 3333 4587 5947 11467 22629 25843 31715 34392 45690 47657\\n\",\n    \"26 519355202\\n2 2 6 3 4 23 124 115 312 883 526 3158 2901 14398 797 8137 127577 112515 54101 426458 877533 3978708 6725849 5496068 14408348 27866871\\n\",\n    \"26 707933691\\n13 17 31 44 69 70 89 158 246 320 605 934 1635 2364 4351 8660 10262 11664 14090 18908 35845 51033 59963 78775 117479 179510\\n\",\n    \"25 269843721\\n1 4 5 12 6 16 123 195 374 475 974 2303 4109 8890 16632 64699 71115 251461 476703 447854 2042296 3095451 2796629 13478163 13314670\\n\",\n    \"25 978161707\\n13 22 24 34 66 73 145 287 289 521 693 996 1230 1486 1517 2663 3770 3776 5286 7953 15775 30877 42848 84850 114828\\n\",\n    \"5 304398130\\n328619601 758941829 198270024 713154224 371680309\\n\",\n    \"10 354651161\\n676522959 11809337 625434179 312329830 399019943 545095979 566206452 292370104 819250687 361397475\\n\",\n    \"10 907948615\\n369010656 907829481 622481545 200317148 960270397 26028213 655060035 796833494 123373353 324969455\\n\",\n    \"10 590326547\\n540224591 578261545 271951966 787805881 165741203 795359732 547118852 746648763 284153835 602102300\\n\",\n    \"20 264504887\\n256244331 292829612 807171068 120710 900798902 214013876 575261859 40214283 293542999 366877272 353675296 705322168 205009788 86530854 620744650 766826836 240331588 700218303 406369581 649737981\\n\",\n    \"20 749478720\\n148277091 195065491 92471169 473441125 104827125 387256363 959435633 241640 395794406 734016994 107553118 129783960 812331272 999596018 837854100 215240378 598412225 653614923 933185587 845929351\\n\",\n    \"20 628134337\\n706690396 73852246 47785764 655257266 217430459 211108098 623632685 631391825 628008556 962083938 616573502 326152383 7023992 288143889 264733804 886206130 342256543 779010688 657787839 476634612\\n\",\n    \"20 708413057\\n985177466 224645388 772550594 994150052 856456221 65855795 599129505 903908498 200612104 575185982 507918207 574454347 607410366 738301336 274020952 556522307 665003603 363184479 760246523 952436964\\n\",\n    \"20 228553575\\n966247381 207786628 69006100 269956897 359963312 510868514 95130877 473280024 180071136 34097367 898985854 981155909 369570614 803892852 773207504 603654899 500850166 632114017 442730466 348136258\\n\",\n    \"25 975185569\\n680624205 925575600 711019438 10306 879760994 355425133 204004301 536007340 585477874 216944098 296555029 104013726 892946593 309410720 689188172 687796636 375461496 689356349 680367324 137692780 879054435 925597905 677631315 592123801 742526898\\n\",\n    \"30 16804972\\n38413642 603358594 93465125 772633637 516421484 75369617 249460374 6747 89975200 3230679 944379663 407211965 820471861 763861258 4711346 787274019 447412797 861015104 104795044 430023687 445411345 316560503 908322702 232775431 33149898 101978638 453254685 587956325 920401353 237657930\\n\",\n    \"30 939625169\\n799744449 316941501 911543330 868167665 272876554 951480855 826347879 102948940 684991931 833689399 277289558 186462 220073415 602419892 22234767 320279157 908288280 357866038 758158565 784960311 772460297 956631291 623631325 328145434 76400621 637950037 63094834 358429163 210185094 824743978\\n\",\n    \"30 649693919\\n523756282 905125099 661420695 854128708 504404014 33547776 632846834 593955985 19432317 644543651 552904895 988070696 321825330 923971248 718082642 900061181 310986828 14810582 525301 623288859 578749693 424452633 901712228 411022879 757920556 825042513 796572495 544557755 747250675 987028137\\n\",\n    \"30 941342434\\n719914212 905507045 191898825 570606628 687781371 937025497 673960221 557202851 29071681 518803370 894863536 212709126 614432746 924724833 699415275 748075226 796159664 198063404 56538360 649136911 46540367 337023198 45896775 548611961 777908744 873523820 99863819 335685200 503317538 894159729\\n\",\n    \"30 810430346\\n807519316 377786333 874568334 100500951 872031247 252690899 923103133 769288634 300502982 184749135 481527896 932556233 978317077 980235169 677287 308980653 527243473 763242606 219639015 712288933 901059456 30978091 127839849 9946626 456644060 226102694 611552752 816642473 434613587 723611518\\n\",\n    \"30 187125289\\n660214771 614231774 943973836 50780694 214277957 695192266 425421684 100830325 236002350 233594142 318777769 611117973 758216803 141783036 487402819 42225289 132824573 354540681 64152506 838447015 853800951 605421421 151364012 455396619 928950961 236389207 47829341 743089941 577129072 792900471\\n\",\n    \"30 129428748\\n954910836 756938357 407311375 992660029 134837594 230127140 815239978 545145316 559077075 373018190 923169774 981420723 349998683 971610245 428903049 879106876 229199860 842029694 817413103 141736569 236414627 263122579 394309719 946134085 550877425 544748100 732982715 933907937 67960170 145090225\\n\",\n    \"30 12544876\\n528459681 350718911 432940853 266976578 679316371 959899124 158423966 471112176 136348553 752311334 979696813 624253517 374825117 338804760 506350966 717644199 528671610 10427712 256677344 288800318 711338213 778230088 616184102 968447942 275963441 257842321 753599064 812398057 815035849 207576747\\n\",\n    \"30 7\\n476599619 58464676 796410905 224866489 780155470 404375041 576176595 767831428 598766545 225605178 819316136 781962412 217423411 484904923 194288977 597593185 181464481 65918422 225080972 53705844 584415879 463767806 845989273 434760924 477902363 145682570 721445310 803966515 927906514 191883417\\n\",\n    \"30 9324\\n205304890 806562207 36203756 437374231 230840114 828741258 227108614 937997270 74150322 673068857 353683258 757136864 274921753 418595773 638411312 307919005 304470011 439118457 402187013 371389195 981316766 26764964 293610954 177952828 49223547 718589642 982551043 395151318 564895171 138874187\\n\",\n    \"30 512443535\\n2 10 30 20 26 9 2 4 24 25 4 27 27 9 13 30 30 5 3 24 10 4 14 14 8 3 2 22 25 25\\n\",\n    \"30 553648256\\n2 3 5 9 17 33 65 129 257 513 1025 2049 4097 8193 16385 32769 65537 131073 262145 524289 1048577 2097153 4194305 8388609 16777217 33554433 67108865 134217729 268435457 536870913\\n\",\n    \"30 536870912\\n2 3 5 9 17 33 65 129 257 513 1025 2049 4097 8193 16385 32769 65537 131073 262145 524289 1048577 2097153 4194305 8388609 16777217 33554433 67108865 134217729 268435457 536870913\\n\",\n    \"30 504365056\\n2 3 5 9 17 33 65 129 257 513 1025 2049 4097 8193 16385 32769 65537 131073 262145 524289 1048577 2097153 4194305 8388609 16777217 33554433 67108865 134217729 268435457 536870913\\n\",\n    \"30 536870913\\n2 3 5 9 17 33 65 129 257 513 1025 2049 4097 8193 16385 32769 65537 131073 262145 524289 1048577 2097153 4194305 8388609 16777217 33554433 67108865 134217729 268435457 536870913\\n\",\n    \"30 536870911\\n2 3 5 9 17 33 65 129 257 513 1025 2049 4097 8193 16385 32769 65537 131073 262145 524289 1048577 2097153 4194305 8388609 16777217 33554433 67108865 134217729 268435457 536870913\\n\",\n    \"30 571580555\\n2 3 5 9 17 33 65 129 257 513 1025 2049 4097 8193 16385 32769 65537 131073 262145 524289 1048577 2097153 4194305 8388609 16777217 33554433 67108865 134217729 268435457 536870913\\n\",\n    \"1 1000000000\\n1\\n\",\n    \"4 8\\n8 4 4 1\\n\",\n    \"2 3\\n10 1\\n\",\n    \"30 915378355\\n459233266 779915330 685344552 78480977 949046834 774589421 94223415 727865843 464996500 268056254 591348850 753027575 142328565 174597246 47001711 810641112 130836837 251339580 624876035 850690451 290550467 119641933 998066976 791349365 549089363 492937533 140746908 265213422 27963549 109184295\\n\",\n    \"3 7\\n20 20 30\\n\",\n    \"1 1000000000\\n1000000000\\n\",\n    \"5 787787787\\n1 2 3 4 5\\n\",\n    \"2 3\\n10 5\\n\",\n    \"28 146201893\\n79880639 962577454 837935105 770531287 992949199 401766756 805281924 931353274 246173135 378375823 456356972 120503545 811958850 126793843 720341477 413885800 272086545 758855930 979214555 491838924 465216943 706180852 786946242 646685999 436847726 625436 360241773 620056496\\n\",\n    \"5 9\\n2 100 100 10 13\\n\",\n    \"1 134217728\\n1000000000\\n\",\n    \"1 536870912\\n1000000000\\n\",\n    \"5 5\\n34 22 21 20 30\\n\",\n    \"1 787787787\\n1\\n\",\n    \"7 7\\n34 22 21 20 30 20 20\\n\",\n    \"5 5\\n34 22 21 25 30\\n\",\n    \"5 787787787\\n123456789 234567890 345678901 456789012 1\\n\",\n    \"6 6\\n34 22 21 25 30 35\\n\"\n  ],\n  \"outputs\": [\n    \"150\\n\",\n    \"10\\n\",\n    \"30\\n\",\n    \"44981600785557577\\n\",\n    \"371343078\\n\",\n    \"87393281\\n\",\n    \"564859510\\n\",\n    \"1000000000000000000\\n\",\n    \"1\\n\",\n    \"2000000000\\n\",\n    \"186\\n\",\n    \"13164\\n\",\n    \"27447142368\\n\",\n    \"42251\\n\",\n    \"1000000000\\n\",\n    \"1000000000\\n\",\n    \"1000000000\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"171761524945111680\\n\",\n    \"87605278957368000\\n\",\n    \"118656089186285061\\n\",\n    \"59657618590751221\\n\",\n    \"1020734127854016\\n\",\n    \"87737726572314\\n\",\n    \"134782258380\\n\",\n    \"338129268\\n\",\n    \"230186887\\n\",\n    \"8934765\\n\",\n    \"21507522\\n\",\n    \"3309432\\n\",\n    \"61009202\\n\",\n    \"304854\\n\",\n    \"5610124\\n\",\n    \"257395\\n\",\n    \"27680968\\n\",\n    \"333599\\n\",\n    \"25264103\\n\",\n    \"3829673\\n\",\n    \"101191398\\n\",\n    \"6718647\\n\",\n    \"7071174590398871\\n\",\n    \"250332233709431\\n\",\n    \"437565141462561\\n\",\n    \"655248513971940\\n\",\n    \"327898333295\\n\",\n    \"1209345077739\\n\",\n    \"571078505096\\n\",\n    \"1287105522843\\n\",\n    \"151787408488\\n\",\n    \"43630079726\\n\",\n    \"34613997\\n\",\n    \"766068050\\n\",\n    \"1213432868\\n\",\n    \"1443990241\\n\",\n    \"964822722\\n\",\n    \"143488023\\n\",\n    \"67960170\\n\",\n    \"207576747\\n\",\n    \"53705844\\n\",\n    \"26764964\\n\",\n    \"16\\n\",\n    \"553648259\\n\",\n    \"536870913\\n\",\n    \"504365061\\n\",\n    \"536870915\\n\",\n    \"536870913\\n\",\n    \"571580565\\n\",\n    \"1000000000\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"111854196\\n\",\n    \"60\\n\",\n    \"1000000000000000000\\n\",\n    \"246183685\\n\",\n    \"10\\n\",\n    \"3127180\\n\",\n    \"12\\n\",\n    \"134217728000000000\\n\",\n    \"536870912000000000\\n\",\n    \"20\\n\",\n    \"787787787\\n\",\n    \"20\\n\",\n    \"25\\n\",\n    \"49236737\\n\",\n    \"25\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/913/C",
  "starter_code": ""
}