{
  "task_id": "APPS/221",
  "problem_id": 221,
  "prompt": "Long story short, shashlik is Miroslav's favorite food. Shashlik is prepared on several skewers simultaneously. There are two states for each skewer: initial and turned over.\n\nThis time Miroslav laid out $n$ skewers parallel to each other, and enumerated them with consecutive integers from $1$ to $n$ in order from left to right. For better cooking, he puts them quite close to each other, so when he turns skewer number $i$, it leads to turning $k$ closest skewers from each side of the skewer $i$, that is, skewers number $i - k$, $i - k + 1$, ..., $i - 1$, $i + 1$, ..., $i + k - 1$, $i + k$ (if they exist). \n\nFor example, let $n = 6$ and $k = 1$. When Miroslav turns skewer number $3$, then skewers with numbers $2$, $3$, and $4$ will come up turned over. If after that he turns skewer number $1$, then skewers number $1$, $3$, and $4$ will be turned over, while skewer number $2$ will be in the initial position (because it is turned again).\n\nAs we said before, the art of cooking requires perfect timing, so Miroslav wants to turn over all $n$ skewers with the minimal possible number of actions. For example, for the above example $n = 6$ and $k = 1$, two turnings are sufficient: he can turn over skewers number $2$ and $5$.\n\nHelp Miroslav turn over all $n$ skewers.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\leq n \\leq 1000$, $0 \\leq k \\leq 1000$)\u00a0\u2014 the number of skewers and the number of skewers from each side that are turned in one step.\n\n\n-----Output-----\n\nThe first line should contain integer $l$\u00a0\u2014 the minimum number of actions needed by Miroslav to turn over all $n$ skewers. After than print $l$ integers from $1$ to $n$ denoting the number of the skewer that is to be turned over at the corresponding step.\n\n\n-----Examples-----\nInput\n7 2\n\nOutput\n2\n1 6 \n\nInput\n5 1\n\nOutput\n2\n1 4 \n\n\n\n-----Note-----\n\nIn the first example the first operation turns over skewers $1$, $2$ and $3$, the second operation turns over skewers $4$, $5$, $6$ and $7$.\n\nIn the second example it is also correct to turn over skewers $2$ and $5$, but turning skewers $2$ and $4$, or $1$ and $5$ are incorrect solutions because the skewer $3$ is in the initial state after these operations.",
  "solutions": "[\"n, k = map(int, input().split())\\nif n <= k + k + 1:\\n    print(1)\\n    print((n + 1) // 2)\\nelse:\\n    answer = -1\\n    answer_n = 10**100\\n    for i in range(min(k + 1, n)):\\n        t = n - (k + i + 1)\\n        if t % (k + k + 1) >= k + 1:\\n            if 2 + t // (k + k + 1) < answer_n:\\n                answer = i + 1\\n                answer_n = 2 + t // (k + k + 1)\\n        if t % (k + k + 1) == 0:\\n            if 1 + t // (k + k + 1) < answer_n:\\n                answer = i + 1\\n                answer_n = 1 + t // (k + k + 1)            \\n    print(answer_n)\\n    while answer <= n:\\n        print(answer, end = ' ')\\n        answer += k + k + 1\\n        \", \"#import sys\\n#sys.stdin = open(\\\"in.txt\\\", \\\"r\\\")\\n\\nn, k = map(int, input().split())\\none = k*2+1\\n\\nans = 0\\nif n % one == 0: ans = n // one\\nelse: ans = n // one + 1\\nprint(ans)\\ncnt = 1\\narr = []\\nt = one//2 + 1\\nminus = 0\\nwhile cnt <= ans:\\n    if t > n:\\n        minus = t - n\\n    arr += [t]\\n    #print(\\\"%d\\\" % t, end=\\\" \\\")\\n    t += one\\n    cnt += 1\\n\\nfor s in arr:\\n    print(\\\"%d\\\" % (s-minus), end=\\\" \\\")\\n\", \"n, k = map(int, input().split())\\nans = []\\nif (n % (2 * k + 1) >= (k + 1) or n % (2 * k + 1) == 0):\\n    for i in range(n):\\n        if (i % (2 * k + 1) == k):\\n            ans.append(i)\\nelse:\\n    ans.append(0)\\n    for i in range(k + 1, n):\\n        if (i % (2 * k + 1) == 0):\\n            ans.append(i)\\nprint(len(ans))\\nfor el in ans:\\n    print(el + 1, end=' ')\", \"def __starting_point():\\n    n, k = map(int, input().split())\\n    width = 2 * k + 1\\n    rem = n % width\\n    print(n // width + bool(rem))\\n    shift = k if 0 < rem <= k else 0\\n    current = k + 1 - shift\\n    while current <= n:\\n        print(current, end=\\\" \\\")\\n        current += width\\n    print()\\n\\n__starting_point()\", \"#!/usr/bin/env python3\\nn, k = list(map(int, input().split()))\\nx = 2*k+1\\nr = (n - 1) // x + 1\\nd = r*x-n\\ns = max(1, k+1-d)\\nprint(r)\\nprint(' '.join([str(s+x*i) for i in range(r)]))\\n\", \"n,k=map(int,input().strip().split())\\nf=2*k+1\\ng=n//f\\nh=n%f\\nif (h==0):\\n    print (g)\\n    c1=k+1\\n    print (c1,end=\\\" \\\")\\n    for i in range(1,g):\\n        print (c1+f*i,end=\\\" \\\")\\n    print()\\n    return\\nif (h>k):\\n    print (g+1)\\n    e=h-k\\n    print (e,end=\\\" \\\")\\n    for i in range(1,g+1):\\n        print (e+f*i,end=\\\" \\\")\\n    print ()\\n    return\\nif (h<=k):\\n    print (g+1)\\n    t=h+2*k+1\\n    e=1\\n    print (1,end=\\\" \\\")\\n    for i in range(1,g+1):\\n        print (e+f*i,end=\\\" \\\")\\n    print ()\\n    return\", \"n, k = [int(i) for i in input().split()]\\n\\n'''\\n1 2 3 4 5 6 7\\n1 2 3 | 4 5 6 7\\nsplit into 2k groups\\n\\nif last group < k then problem\\n\\nif k = 3, n = 7\\n\\n1 2 3 4 5 6 7\\n\\n1 2 3 4 5\\n\\nfirst sz varies from k+1 to 2*k+1\\n\\n\\n1 (k+1 - 2k+1) + x(2*k) + 1(2k+1 - k+1)\\n1 2 3 4 5 6 7 8 9 10\\n\\n11,2 = 1 6 10\\n8, 2 = 1 6\\n'''\\n\\nplaces, placee = 0, 0\\nans = 2*n\\nfor start in range(k+1, 2*k+2):\\n    for end in range(k+1, 2*k+2):\\n        if (n - (start) - (end))%(2*k+1) == 0:\\n            if 2 + (n-(start)-(end))//(2*k+1) < ans:\\n                ans = min(ans, 2 + (n-(start)-(end))//(2*k+1))\\n                places = start\\n                placee = end\\n\\nprint(ans)\\nprint(places-k, end=' ')\\nif ans>1:\\n    for j in range((n-places-placee)//(2*k+1)):\\n        print(places-k + (j+1)*(2*k+1),end=' ')\\n    last = placee - k -1 \\n    print(n-last)\\n    #print(places - k + (j+1)*(2*k+1)) \\n\", \"n,k = map(int, input().split())\\nrem = n % (2*k+1)\\n\\nif n <= k+1:\\n\\tans = [1]\\nelif rem <= k and rem != 0:\\n\\tans = range(k+1-(k+1-rem), n+1, 2*k+1)\\nelse:\\n\\tans = range(k+1, n+1, 2*k+1)\\n\\nprint(len(ans))\\nprint(' '.join(str(k) for k in ans))\", \"\\ndef mi():\\n\\treturn map(int, input().split())\\n\\nn,k = mi()\\n\\nt = 2*k+1\\nfirst = (t+1)//2\\nout = []\\nwhile first<=n:\\n\\tout.append(first)\\n\\tfirst+=t\\nif out==[]:\\n\\tout = [n]\\nif len(out) and (out[-1]+k<n):\\n\\tout.append(n)\\n\\nif len(out)>1 and out[-1]-k<=out[-2]+k:\\n\\tdiff = (out[-2]+k)-(out[-1]-k)+1\\n\\tif diff:\\n\\t\\tfor i in range(len(out)-1):\\n\\t\\t\\tout[i]-=diff\\nprint (len(out))\\nprint (*out)\", \"s=input().split()\\nn,k=int(s[0]),int(s[1])\\nl=2*k+1\\nm=n%l\\nif m==0:\\n    m=2*k+1\\nif m<=k+1:\\n    pos=1\\nelse:\\n    pos=m-k\\nres=n//l\\nif n%l!=0:\\n    res+=1\\nprint(res)\\nfor i in range(res):\\n    print(pos+l*i,end=\\\" \\\")\\nprint(\\\"\\\")\\n\", \"\\nn, k = map(int, input().split())\\n\\nif n <= 2 * k + 1:\\n\\tprint(1)\\n\\tprint(n // 2 + 1)\\n\\treturn\\n\\nl = 2 * (k + 1)\\nr = 2 * (2 * k + 1)\\ncnt = 0\\nwhile not (l <= n <= r):\\n\\tcnt += 1\\n\\tl += 2 * k + 1\\n\\tr += 2 * k + 1\\n\\nprint(cnt + 2)\\n\\nm = n - cnt * (2 * k + 1)\\na = m // 2\\nans = [a - k - 1]\\nr = ans[0] + k\\n\\nwhile r < n - 1:\\n\\tif r + k + 1 < n:\\n\\t\\tans.append(r + k + 1)\\n\\tr = ans[-1] + k\\n\\nfor i in ans:\\n\\tprint(i + 1, end=' ')\\nprint()\", \"import math\\nn,k=map(int,input().split())\\np=math.ceil(n/(2*k + 1))\\na=[]\\nt=max(1,k+1-(2*k +1 - n%(2*k + 1)) )\\nif n%(2*k + 1)==0:\\n    t=k+1\\nfor i in range(p):\\n    a.append(t)\\n    t+=(2*k + 1)\\nprint(p)\\nprint(*a)\", \"from math import *\\nn,k=list(map(int,input().split()))\\nif(k>=n):\\n    print(1)\\n    print(1)\\nelse:\\n    arr=[]\\n    count=ceil(n/(2*k+1))\\n    val1=n%(2*k+1)\\n    if(val1>=k+1 or val1==0):\\n        i=0\\n        val=0\\n    else:\\n        i=1\\n        val=k+1-(k+1-val1)+k\\n        arr.append(k+1-(k+1-val1))\\n    while(i<count):\\n        if(val+k+1<=n):\\n            arr.append(val+k+1)\\n        else:\\n            arr.append(n)\\n        val+=2*k+1\\n        i+=1\\n    print(count)\\n    print(*arr)\\n\", \"n, k = [int(v) for v in input().split()]\\nif 2 * k + 1 >= n:\\n    ans = [n // 2]\\nelse:\\n    rem = n % (2 * k + 1)\\n    if rem == 0:\\n        ans = list(range(k, n, 2 * k + 1))\\n    else:\\n        ans = list(range(rem // 2, n, 2 * k + 1))\\n\\nprint(len(ans))\\nprint(' '.join(str(v + 1) for v in ans))\\n\", \"import math\\nn,k=map(int,input().split())\\n\\n\\na=math.ceil(n/(2*k+1))\\nprint(a)\\n\\nx=a*(2*k+1)-n\\n\\nif x>=k:\\n    start=1\\nelse:\\n    start=1+(k-x)\\n\\nfor i in range(start,n+1,2*k+1):\\n    print(i,end=\\\" \\\")\\n\\n\\n\\n\\n\\n\", \"n, k = map(int, input().split())\\nfor i in range(k + 1):\\n    #print(i + 1 + k)\\n    ost = n - (i + 1 + k)\\n    ost = ost % (k * 2 + 1)\\n    #print(ost)\\n    if k + 1 <= ost or ost == 0:\\n        ans = []\\n        for j in range(i, n, k * 2 + 1):\\n            ans.append(j + 1)\\n    #print(ans)\\nif k == 0:\\n    ans = [i + 1 for i in range(n)]\\nprint(len(ans))\\nprint(*ans)\", \"\\nn,k=tuple(map(int,input().strip().split(\\\" \\\")))\\nl=0\\narr=[]\\ncu=0\\nyo=n%((2*k)+1)\\nif(yo>=k+1 or yo==0):\\n    for t in range(k+1,n+1,(2*k)+1):\\n        arr.append(t)\\nelse:\\n    for t in range(1,n+1,(2*k)+1):\\n        arr.append(t)\\nprint(len(arr))\\nfor k in arr:\\n    print(k,\\\" \\\",end='')\\n\", \"n, k = map(int, input().split())\\n\\nr = n % (2*k + 1)\\n\\nout = []\\n\\nif r >= k + 1:\\n    cnt = r - k\\n    while cnt < n:\\n        out.append(cnt)\\n        cnt += 2*k + 1\\nelse:\\n    cut1 = (r + 2*k + 1) // 2\\n    cut2 = (r + 2*k + 2) // 2\\n    cnt = cut1 - k\\n    if cnt == 0:\\n        cnt += k + 1\\n    while cnt <= n:\\n        out.append(cnt)\\n        cnt += 2*k + 1\\n\\nprint(len(out))\\nout = map(str, out)\\nprint(' '.join(out))\", \"import math\\n\\nn, k = map(int, input().split())\\nans = []\\ni = k + 1\\nif i > n:\\n    print(1)\\n    print(math.ceil(n / 2))\\n    return\\nwhile i <= n:\\n    ans.append(i)\\n    i += 2 * k + 1\\nif ans[-1] + k < n:\\n    ned = 2 * k - (n - ans[-1]) + 1\\n    print(len(ans) + 1)\\n    for i in ans:\\n        print(i - ned, end = \\\" \\\")\\n    print(n)\\nelse:\\n    print(len(ans))\\n    print(*ans)\\n\", \"n,k=list(map(int,input().split()))\\n#b=[i for i in range(1,n+1)]\\nr=n%(2*k+1)\\na=[]\\nif n<=2*k+1:\\n    a.append((n+1)//2)\\n    print(len(a))\\n    print(*a)\\n    return\\nif r>=k+1 or r==0:\\n    l=[i for i in range(k+1,n+1,2*k+1)]\\n    print(len(l))\\n    print(*l)\\nelse:\\n    d=k+1-r\\n    s=k+1-d\\n    l=[i for i in range(s,n+1,2*k+1)]\\n    print(len(l))\\n    print(*l)\\n\", \"from functools import reduce\\n\\nn, k = map(int, input().split())\\n\\nflip = 2*k+1\\n\\nl = -(-n//flip)\\n\\nmax = (k+1) + (l-1) * flip\\ni = k+1\\nif max > n:\\n\\ti -= (max-n)\\n\\narr = []\\n# if n%flip > k:\\n\\t# i = k+1\\nwhile i <= n:\\n\\tarr.append(i)\\n\\ti += flip\\n# else:\\n\\t# i = 1\\n\\t# while i <= n:\\n\\t\\t# arr.append(i)\\n\\t\\t# i += flip\\n\\ns = reduce(lambda x, y : str(x)+' '+str(y), arr)\\nprint(l)\\nprint(s)\", \"n, k = map(int, input().split())\\na = 1000000\\naf = []\\nfor i in range(k+1):\\n    f = []\\n    for j in range(i+1, n+1, 2*k+1):\\n        f.append(j)\\n    if i+1 > n:\\n        break\\n    if f[-1]+k >= n:\\n        if a > len(f):\\n            a = len(f)\\n            af = f[:]\\nprint(a)\\nprint(*af)\", \"from math import ceil\\n\\nn, k = map(int, input().split(' '))\\n\\ncover = 2 * k + 1\\n\\nturns = ceil(n / cover)\\nprint(turns)\\n\\nshift = turns * cover - n\\nfirst_index = k - shift\\n\\nif first_index >= 0:\\n    for i in range(turns):\\n        print(first_index + 1 + i * cover, end=' ')\\nelse:\\n    for i in range(turns):\\n        print(0 + 1 + i * cover, end=' ')\", \"n,k = list(map(int,input().split()))\\nans=[]\\nif n%(2*k+1)>=k+1 or n%(2*k+1)==0:\\n    i=k+1\\n    while i<=n:\\n        ans.append(i)\\n        i+=2*k+1\\nelse:\\n    i=1\\n    while i<=n:\\n        ans.append(i)\\n        i+=2*k+1\\nprint(len(ans))\\nprint(*ans)\\n\", \"n, k = map(int, input().split())\\nif n % (2 * k + 1) == 0 or n % (2 * k + 1) >= k + 1:\\n    if n % (2 * k + 1) == 0:\\n        print(n // (2 * k + 1))\\n    else:\\n        print(n // (2 * k + 1) + 1)\\n    j = k + 1\\n    while j <= n:\\n        print(j, end = ' ')\\n        j += 2 * k + 1\\nelse:\\n    print(n // (2 * k + 1) + 1)\\n    j = 1\\n    while j <= n:\\n        print(j, end = ' ')\\n        j += 2 * k + 1\\n\"]",
  "input_output": "{\"inputs\": [\"7 2\\n\", \"5 1\\n\", \"10 0\\n\", \"10 1\\n\", \"10 10\\n\", \"11 10\\n\", \"100 2\\n\", \"100 200\\n\", \"1000 1000\\n\", \"1000 31\\n\", \"1 0\\n\", \"2 0\\n\", \"3 0\\n\", \"4 0\\n\", \"5 0\\n\", \"15 0\\n\", \"153 0\\n\", \"1 1\\n\", \"2 1\\n\", \"3 1\\n\", \"4 1\\n\", \"5 1\\n\", \"15 1\\n\", \"153 1\\n\", \"1 2\\n\", \"2 2\\n\", \"3 2\\n\", \"4 2\\n\", \"5 2\\n\", \"15 2\\n\", \"153 2\\n\", \"1 3\\n\", \"2 3\\n\", \"3 3\\n\", \"4 3\\n\", \"5 3\\n\", \"15 3\\n\", \"153 3\\n\", \"1 4\\n\", \"2 4\\n\", \"3 4\\n\", \"4 4\\n\", \"5 4\\n\", \"15 4\\n\", \"153 4\\n\", \"1000 4\\n\", \"1 5\\n\", \"2 5\\n\", \"3 5\\n\", \"4 5\\n\", \"5 5\\n\", \"15 5\\n\", \"153 5\\n\", \"1000 5\\n\", \"3 1\\n\", \"5 2\\n\", \"1 4\\n\", \"1 1\\n\", \"1 6\\n\", \"8 3\\n\", \"1 2\\n\", \"5 3\\n\", \"7 3\\n\", \"39 4\\n\", \"4 2\\n\", \"20 4\\n\", \"6 4\\n\", \"1 3\\n\", \"1 0\\n\", \"11 2\\n\"], \"outputs\": [\"2\\n1 6 \\n\", \"2\\n1 4 \\n\", \"10\\n1 2 3 4 5 6 7 8 9 10 \\n\", \"4\\n1 4 7 10 \\n\", \"1\\n10\\n\", \"1\\n11\\n\", \"20\\n3 8 13 18 23 28 33 38 43 48 53 58 63 68 73 78 83 88 93 98 \\n\", \"1\\n100\\n\", \"1\\n1000\\n\", \"16\\n28 91 154 217 280 343 406 469 532 595 658 721 784 847 910 973 \\n\", \"1\\n1\\n\", \"2\\n1 2 \\n\", \"3\\n1 2 3 \\n\", \"4\\n1 2 3 4 \\n\", \"5\\n1 2 3 4 5 \\n\", \"15\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \\n\", \"153\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 \\n\", \"1\\n1\\n\", \"1\\n2\\n\", \"1\\n2\\n\", \"2\\n1 4 \\n\", \"2\\n1 4 \\n\", \"5\\n2 5 8 11 14 \\n\", \"51\\n2 5 8 11 14 17 20 23 26 29 32 35 38 41 44 47 50 53 56 59 62 65 68 71 74 77 80 83 86 89 92 95 98 101 104 107 110 113 116 119 122 125 128 131 134 137 140 143 146 149 152 \\n\", \"1\\n1\\n\", \"1\\n2\\n\", \"1\\n3\\n\", \"1\\n3\\n\", \"1\\n3\\n\", \"3\\n3 8 13 \\n\", \"31\\n2 7 12 17 22 27 32 37 42 47 52 57 62 67 72 77 82 87 92 97 102 107 112 117 122 127 132 137 142 147 152 \\n\", \"1\\n1\\n\", \"1\\n2\\n\", \"1\\n3\\n\", \"1\\n4\\n\", \"1\\n4\\n\", \"3\\n1 8 15 \\n\", \"22\\n3 10 17 24 31 38 45 52 59 66 73 80 87 94 101 108 115 122 129 136 143 150 \\n\", \"1\\n1\\n\", \"1\\n2\\n\", \"1\\n3\\n\", \"1\\n4\\n\", \"1\\n5\\n\", \"2\\n3 12 \\n\", \"17\\n5 14 23 32 41 50 59 68 77 86 95 104 113 122 131 140 149 \\n\", \"112\\n1 10 19 28 37 46 55 64 73 82 91 100 109 118 127 136 145 154 163 172 181 190 199 208 217 226 235 244 253 262 271 280 289 298 307 316 325 334 343 352 361 370 379 388 397 406 415 424 433 442 451 460 469 478 487 496 505 514 523 532 541 550 559 568 577 586 595 604 613 622 631 640 649 658 667 676 685 694 703 712 721 730 739 748 757 766 775 784 793 802 811 820 829 838 847 856 865 874 883 892 901 910 919 928 937 946 955 964 973 982 991 1000 \\n\", \"1\\n1\\n\", \"1\\n2\\n\", \"1\\n3\\n\", \"1\\n4\\n\", \"1\\n5\\n\", \"2\\n2 13 \\n\", \"14\\n5 16 27 38 49 60 71 82 93 104 115 126 137 148 \\n\", \"91\\n5 16 27 38 49 60 71 82 93 104 115 126 137 148 159 170 181 192 203 214 225 236 247 258 269 280 291 302 313 324 335 346 357 368 379 390 401 412 423 434 445 456 467 478 489 500 511 522 533 544 555 566 577 588 599 610 621 632 643 654 665 676 687 698 709 720 731 742 753 764 775 786 797 808 819 830 841 852 863 874 885 896 907 918 929 940 951 962 973 984 995 \\n\", \"1\\n2\\n\", \"1\\n3\\n\", \"1\\n1\\n\", \"1\\n1\\n\", \"1\\n1\\n\", \"2\\n1 8 \\n\", \"1\\n1\\n\", \"1\\n4\\n\", \"1\\n4\\n\", \"5\\n2 11 20 29 38 \\n\", \"1\\n3\\n\", \"3\\n1 10 19 \\n\", \"1\\n5\\n\", \"1\\n1\\n\", \"1\\n1\\n\", \"3\\n1 6 11 \\n\"]}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1040/B",
  "starter_code": ""
}