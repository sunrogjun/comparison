{
  "task_id": "APPS/583",
  "problem_id": 583,
  "prompt": "This is an easier version of the problem. In this version, $n \\le 500$.\n\nVasya is an experienced developer of programming competitions' problems. As all great minds at some time, Vasya faced a creative crisis. To improve the situation, Petya gifted him a string consisting of opening and closing brackets only. Petya believes, that the beauty of the bracket string is a number of its cyclical shifts, which form a correct bracket sequence.\n\nTo digress from his problems, Vasya decided to select two positions of the string (not necessarily distinct) and swap characters located at this positions with each other. Vasya will apply this operation exactly once. He is curious what is the maximum possible beauty he can achieve this way. Please help him.\n\nWe remind that bracket sequence $s$ is called correct if:   $s$ is empty;  $s$ is equal to \"($t$)\", where $t$ is correct bracket sequence;  $s$ is equal to $t_1 t_2$, i.e. concatenation of $t_1$ and $t_2$, where $t_1$ and $t_2$ are correct bracket sequences. \n\nFor example, \"(()())\", \"()\" are correct, while \")(\" and \"())\" are not.\n\nThe cyclical shift of the string $s$ of length $n$ by $k$ ($0 \\leq k < n$) is a string formed by a concatenation of the last $k$ symbols of the string $s$ with the first $n - k$ symbols of string $s$. For example, the cyclical shift of string \"(())()\" by $2$ equals \"()(())\".\n\nCyclical shifts $i$ and $j$ are considered different, if $i \\ne j$.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($1 \\le n \\le 500$), the length of the string.\n\nThe second line contains a string, consisting of exactly $n$ characters, where each of the characters is either \"(\" or \")\".\n\n\n-----Output-----\n\nThe first line should contain a single integer\u00a0\u2014 the largest beauty of the string, which can be achieved by swapping some two characters.\n\nThe second line should contain integers $l$ and $r$ ($1 \\leq l, r \\leq n$)\u00a0\u2014 the indices of two characters, which should be swapped in order to maximize the string's beauty.\n\nIn case there are several possible swaps, print any of them.\n\n\n-----Examples-----\nInput\n10\n()()())(()\n\nOutput\n5\n8 7\n\nInput\n12\n)(()(()())()\n\nOutput\n4\n5 10\n\nInput\n6\n)))(()\n\nOutput\n0\n1 1\n\n\n\n-----Note-----\n\nIn the first example, we can swap $7$-th and $8$-th character, obtaining a string \"()()()()()\". The cyclical shifts by $0, 2, 4, 6, 8$ of this string form a correct bracket sequence.\n\nIn the second example, after swapping $5$-th and $10$-th character, we obtain a string \")(())()()(()\". The cyclical shifts by $11, 7, 5, 3$ of this string form a correct bracket sequence.\n\nIn the third example, swap of any two brackets results in $0$ cyclical shifts being correct bracket sequences.",
  "solutions": "[\"n = int(input())\\nst = input()\\ns = [0 if c == \\\"(\\\" else 1 for c in st]\\nif n % 2 != 0 or sum(s) != n//2:\\n    print(0)\\n    print(1,1)\\n    return\\nmaxx = 0\\nind = (0,0)\\nmaxshift = 0\\nfor shift in range(n):\\n    stack = 0\\n    x1 = -1\\n    x2 = -1\\n    sumzero = 0\\n    for i,c in enumerate(s):\\n        if s[(i+shift)%n] == 0:\\n            stack+=1\\n        else:\\n            stack-=1\\n        if stack == 0:\\n            sumzero+=1\\n        if stack < 0:\\n            x1 = i\\n            break\\n    stack = 0\\n    for i in range(n-1, -1, -1):\\n        if s[(i+shift)%n] == 1:\\n            stack+=1\\n        else:\\n            stack-=1\\n        if stack < 0:\\n            x2 = i\\n            break\\n    if x1 == -1 and x2 == -1 and stack == 0:\\n        if sumzero > maxx:\\n            maxx=sumzero\\n            ind = (0,0)\\n    if x1 == -1 or x2 == -1 or x1 == x2:\\n        continue\\n    stack = 0\\n    corr = True\\n    ans = 0\\n    for i in range(n):\\n        c = s[(i+shift)%n]\\n        \\n        if i == x1 or i == x2:\\n            c = 1-c\\n        if c == 0:\\n            stack += 1\\n        else:\\n            stack -= 1\\n        if stack == 0:\\n            ans+=1\\n        if stack == -1:\\n            corr = False\\n            break\\n    \\n    if not corr or stack > 0:\\n        continue\\n    if ans > maxx:\\n        maxshift = shift\\n        maxx = ans\\n        ind = ((x1+shift)%n, (x2+shift)%n)\\nprint(maxx)\\nprint(ind[0]+1,ind[1]+1)\\n\", \"n = int(input())\\ns = list(input())\\nr = -1\\nl = n\\nroot = []\\n\\ndef find_right(node):\\n    nonlocal l,r,s,n\\n    while n:\\n        r += 1\\n        n -= 1\\n        if s[r] == '(':\\n            node[2].append([r,-1,[]])\\n            find_right(node[2][-1])\\n        else:\\n            node[1] = r\\n            return True\\n    return False\\n\\ndef find_left(node):\\n    nonlocal l,r,s,n\\n    while n:\\n        l -= 1\\n        n -= 1\\n        if s[l] == ')':\\n            node[2].append([-1,l,[]])\\n            find_left(node[2][-1])\\n        else:\\n            node[0] = l\\n            return True        \\n    return False\\n\\nis_correct = True\\nwhile n:\\n    r += 1\\n    n -= 1\\n    if s[r]=='(':\\n        root.append([r,-1,[]])\\n        is_correct &= find_right(root[-1])\\n    else:\\n        root = [[-1,r,root]]       \\n        is_correct &= find_left(root[-1])\\n\\nsol = [[0,1,1]]\\nif is_correct:        \\n    sol.append([len(root), 1, 1])\\n    for child in root:\\n        sol.append([len(child[2])+1, child[0]+1, child[1]+1])\\n        for gr_child in child[2]:\\n            if len(gr_child[2]):\\n                sol.append([len(root)+len(gr_child[2])+1, gr_child[0]+1, gr_child[1]+1])\\n            \\nprint('%d\\\\n%d %d'%tuple(max(sol)))\", \"n = int(input().strip())\\ns= input().strip()\\nss= 0\\nmina = 0\\nti = 0\\nfor k in range(len(s)):\\n    if(s[k] == \\\"(\\\"):\\n        ss+=1\\n    else:\\n        ss-=1\\n    if(ss<0):\\n        ti = k+1\\n        ss = 0\\ns=s[ti:]+s[:ti]\\nss= 0\\nfor k in range(len(s)):\\n    if(s[k] == \\\"(\\\"):\\n        ss+=1\\n    else:\\n        ss-=1\\n    if(ss<0):\\n        print(0)\\n        print(1,1)\\n        break\\nelse:\\n    if(ss == 0):\\n      pre=[0 for k in range(len(s))]\\n      for k  in range(len(s)):\\n          if (s[k] == \\\"(\\\"):\\n              ss += 1\\n          else:\\n              ss -= 1\\n          pre[k] = ss\\n      tt = 0\\n      a =(1,1)\\n      for k in range(0,len(s)):\\n          if(pre[k] == 0):\\n              tt+=1\\n      maxi= tt\\n      g =0\\n      gg =0\\n      while(gg<len(s)):\\n          if(pre[gg] == 0):\\n                  if(gg != g+1):\\n                      yy = g+1\\n                      y = g+1\\n                      q = 0\\n                      while(yy<gg):\\n                          if(pre[yy] == 1):\\n                              if(yy !=y+1):\\n                                  rr = y+1\\n                                  r  = y+1\\n                                  h = 0\\n                                  while(rr<yy):\\n                                      if(pre[rr] == 2):\\n                                          h+=1\\n                                      rr+=1\\n\\n                                  if(tt+h+1>maxi):\\n                                      maxi = tt + h + 1\\n                                      a=(y,yy)\\n                              q+=1\\n                              y = yy+1\\n                              yy = y\\n                          else:\\n                              yy+=1\\n\\n                      if (q + 1 > maxi):\\n                          maxi = q+1\\n                          a = (g, gg)\\n                  g= gg+1\\n                  gg= g\\n          else:\\n               gg+=1\\n      print(maxi)\\n      print((a[0]+ti)%len(s)+1,(a[1]+ti)%len(s)+1)\\n\\n\\n\\n\\n    else:\\n        print(0)\\n        print(1,1)\\n\\n\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"10\\n()()())(()\\n\",\n    \"12\\n)(()(()())()\\n\",\n    \"6\\n)))(()\\n\",\n    \"10\\n(()(()))()\\n\",\n    \"26\\n((()))(()()()()()()()()())\\n\",\n    \"1\\n(\\n\",\n    \"499\\n)(()))))(())(((())())()()(())))(()))))(())))()())()(((((()))()(())()()((()()(()())())))()(())()))())(())()(())))))((())()(((()))(())(()(())(()((()))()()((())()()))()((((()()((()))(()())()()(())((()())(()()()(()(()))(()(((()(())(()))())(((()()(((())((()()((((())(()(()((())(((()()()))(((()()))()(()()))))))((((((((()(((()()())(()))(()())))()))())())(((()))())))(())(()))()(((((()))())())))))())))()()(()()))(())())(())((((()(()())(()()()))())(()()(()()))((()(())()((()()())()()(())))(()()()(()())(())\\n\",\n    \"500\\nn\",\n    \"500\\nn\",\n    \"500\\nn\",\n    \"500\\nn\",\n    \"500\\nn\",\n    \"500\\n(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((\\n\",\n    \"500\\nn\",\n    \"500\\nn\",\n    \"500\\n)()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()(\\n\",\n    \"4\\n))((\\n\",\n    \"4\\n()()\\n\",\n    \"4\\n)()(\\n\",\n    \"10\\n(())())()(\\n\",\n    \"10\\n))))((((()\\n\",\n    \"10\\n())(((()))\\n\",\n    \"11\\n)(())(((())\\n\",\n    \"10\\n)()()()()(\\n\",\n    \"50\\n()())()))()())((())))(((((()))(((()))((((()(()))))\\n\",\n    \"51\\n))((((((((()))(())()(()(()())()(()(())(())()())))))\\n\",\n    \"50\\n)()()()()()()()()()()()()()()()()()()()()()()()()(\\n\",\n    \"50\\n(((((((((((((((((((((((()))))))))))))))))))))))))(\\n\",\n    \"100\\n)))))))(((((((((((((((((((((((((((((((((((((((((((((((((()))))))))))))))))))))))))))))))))))))))))))\\n\",\n    \"100\\n)(((((()())((())((())((()))())))))(())())()((())))(()()))(((((((()())())()(()())(((())())())())()))(\\n\",\n    \"100\\n()()()()()()()()()()())(()()()()()()()()()()()()()()()()()()()())(()()()()()()()()()()()()()()()()()\\n\",\n    \"100\\n((()()))(()()))(())))((()((()()))(()))())((()(())(((())())((()))())))((()(())((())(())())))(()((())(\\n\",\n    \"100\\n))()()(())()()(()()())((()()())())((())())((()))(())()((()))((())())()((()())())(()())(())(()(()))((\\n\",\n    \"101\\n(())))))()))()())(()))((())))((())(()()()(()()((()()((()((())))((()))()(())(()(())((()))(()))()(((()(\\n\",\n    \"100\\n)()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()(\\n\",\n    \"500\\nn\",\n    \"500\\nn\",\n    \"500\\nn\",\n    \"500\\nn\",\n    \"498\\n)())()(()()))())())()((()())((((()))()((()())()))())())))((()(()())))())())(()()(())())(((()))()))))(((((()())(()))(()((()(((()()()(()((()()))(((((((())((())((())(()(((()))())(((((())())())(())(((())(((()))))(())())()()((((())())()(((((()))())())(()))))))((((()())))((()()()))())()))())())(()()()())())((())(((())())((())()()(((()())())())))(((()))(())(((()()))()())))()))()()())))()()))()))))())()(((()()()))())(()))((()(()(())((((()()())(((((()))()((((((((()((()))()))())()))((())))(()(())(()()))\\n\",\n    \"497\\n)()()((()((()()())(((()()(())(()(((()(()((())()()()()())((()()(()))(()(((()))((()()(((()(((((())(()))())))(()())))())((((((((())))))()))))((())))((()((()((((()()))())()())())(()))(())())())())))()()))()()()(((())())(()())))()(((((((((())))))(((((((()))()()))(()()())())())(())()((()()()((())))(())()()()(()))(((((((((())((())))))()))))(((((()())(((((()()()))()()(()())(())())(()(()()()()(())(()()(()())())((())(())(())))))(())((((()))))))())()((()()()(()())())())()))))))()()(())))))())()(()))()))\\n\"\n  ],\n  \"outputs\": [\n    \"5\\n8 7\\n\",\n    \"4\\n5 10\\n\",\n    \"0\\n1 1\\n\",\n    \"4\\n4 7\\n\",\n    \"10\\n7 26\\n\",\n    \"0\\n1 1\\n\",\n    \"0\\n1 1\\n\",\n    \"54\\n230 239\\n\",\n    \"27\\n420 147\\n\",\n    \"33\\n23 42\\n\",\n    \"57\\n31 46\\n\",\n    \"152\\n489 496\\n\",\n    \"3\\n400 397\\n\",\n    \"3\\n16 13\\n\",\n    \"0\\n1 1\\n\",\n    \"250\\n2 2\\n\",\n    \"2\\n4 1\\n\",\n    \"2\\n1 1\\n\",\n    \"2\\n2 2\\n\",\n    \"4\\n1 4\\n\",\n    \"3\\n6 3\\n\",\n    \"3\\n5 10\\n\",\n    \"0\\n1 1\\n\",\n    \"5\\n2 2\\n\",\n    \"5\\n23 14\\n\",\n    \"0\\n1 1\\n\",\n    \"25\\n2 2\\n\",\n    \"3\\n1 48\\n\",\n    \"3\\n9 6\\n\",\n    \"7\\n59 50\\n\",\n    \"29\\n66 23\\n\",\n    \"8\\n95 20\\n\",\n    \"23\\n24 31\\n\",\n    \"0\\n1 1\\n\",\n    \"50\\n2 2\\n\",\n    \"9\\n102 263\\n\",\n    \"13\\n357 418\\n\",\n    \"23\\n473 18\\n\",\n    \"102\\n448 457\\n\",\n    \"6\\n102 417\\n\",\n    \"0\\n1 1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1248/D1",
  "starter_code": ""
}