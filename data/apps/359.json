{
  "task_id": "APPS/359",
  "problem_id": 359,
  "prompt": "Arkadiy has lots square photos with size a \u00d7 a. He wants to put some of them on a rectangular wall with size h \u00d7 w. \n\nThe photos which Arkadiy will put on the wall must form a rectangular grid and the distances between neighboring vertically and horizontally photos and also the distances between outside rows and columns of photos to the nearest bound of the wall must be equal to x, where x is some non-negative real number. Look on the picture below for better understanding of the statement.\n\n [Image] \n\nArkadiy haven't chosen yet how many photos he would put on the wall, however, he want to put at least one photo. Your task is to determine the minimum value of x which can be obtained after putting photos, or report that there is no way to put positive number of photos and satisfy all the constraints. Suppose that Arkadiy has enough photos to make any valid arrangement according to the constraints.\n\nNote that Arkadiy wants to put at least one photo on the wall. The photos should not overlap, should completely lie inside the wall bounds and should have sides parallel to the wall sides.\n\n\n-----Input-----\n\nThe first line contains three integers a, h and w (1 \u2264 a, h, w \u2264 10^9) \u2014 the size of photos and the height and the width of the wall.\n\n\n-----Output-----\n\nPrint one non-negative real number \u2014 the minimum value of x which can be obtained after putting the photos on the wall. The absolute or the relative error of the answer must not exceed 10^{ - 6}.\n\nPrint -1 if there is no way to put positive number of photos and satisfy the constraints.\n\n\n-----Examples-----\nInput\n2 18 13\n\nOutput\n0.5\n\nInput\n4 4 4\n\nOutput\n0\n\nInput\n3 4 3\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example Arkadiy can put 7 rows of photos with 5 photos in each row, so the minimum value of x equals to 0.5.\n\nIn the second example Arkadiy can put only 1 photo which will take the whole wall, so the minimum value of x equals to 0.\n\nIn the third example there is no way to put positive number of photos and satisfy the constraints described in the statement, so the answer is -1.",
  "solutions": "[\"a,h,w=(int(x) for x in input().split())\\nif h==w:\\n    if a<h:\\n        n=w//a\\n        x=(w-a*n)/(n+1)\\n        print(x)\\n    elif a==h:\\n        print(0)\\n    else:\\n        print(-1)\\nelse:\\n    for i in range(100):\\n        if h>w:\\n            w,h=h,w\\n        if w>h+a*2:\\n            w=w-h-a\\n    if h>w:\\n        w,h=h,w \\n    m=h//a\\n    s=(w-h)//a\\n    r=0\\n    if m<s or s==0:\\n        for i in range(m,0,-1):\\n            x=(h-a*i)/(i+1)\\n            w1=w-x\\n            a1=a+x\\n            q=w1%a1\\n            if q<0.00000001 or a1-q<0.0000001:\\n                r=1\\n                break\\n        if r==0:\\n            print(-1)\\n        else:\\n            print(x)\\n    else:\\n        for i in range(s,0,-1):\\n            x=(w-h-i*a)/i\\n            w1=w-x\\n            a1=a+x\\n            q=w1%a1\\n            if q<0.00000001:\\n                r=1\\n                break\\n        if r==0:\\n            print(-1)\\n        else:\\n            print(x)\", \"def gcd(a,b):\\n    if b==0:return a\\n    else:return gcd(b,a%b)\\na,h,w=list(map(int,input().split()))\\ng=gcd(a+h,a+w)\\nt=(a+w)//g\\nq=((w//a+1)//t)*t-1\\nif q<=0:print(-1)\\nelse:print(\\\"%.9lf\\\"%((w-q*a)/(q+1)))\\n\", \"def gcd(a,b):\\n    if(b==0):return a;\\n    else: return gcd(b,a%b);\\ndef main():\\n    a,h,w=map(int,input().split());\\n    x=gcd(a+h,a+w);\\n    y=(a+w)//x;\\n    z=((w//a+1)//y)*y-1;\\n    if(z<=0): print(\\\"-1\\\");\\n    else: print(\\\"%.10lf\\\"%((1.00*w-z*a)/(z+1)));\\nmain();\", \"def gcd(n,m):\\n    if m==0:return n\\n    else:return gcd(m,n%m)\\na,h,w=map(int,input().split())\\ng=gcd(a+h,a+w)\\ns=(a+w)//g\\nt=((w//a+1)//s)*s-1\\nif t<=0:print(-1)\\nelse:print(\\\"%.10lf\\\"%((w-t*a)/(t+1)))\", \"def gcd(x,y):\\n    if y==0:return x\\n    else:return gcd(y,x%y)\\nA,H,W=map(int,input().split())\\nG=gcd(A+H,A+W)\\nS=(A+W)//G\\nT=((W//A+1)//S)*S-1\\nif T<=0:print(-1)\\nelse:print(\\\"%.10lf\\\"%((W-T*A)/(T+1)))\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 18 13\\n\",\n    \"4 4 4\\n\",\n    \"3 4 3\\n\",\n    \"9 81 23\\n\",\n    \"11 21 21\\n\",\n    \"55 178 996\\n\",\n    \"8 81 60\\n\",\n    \"3 1000000000 1000000000\\n\",\n    \"1000000000 1000000000 1000000000\\n\",\n    \"1 1000000000 1000000000\\n\",\n    \"6 1000000000 1000000000\\n\",\n    \"6 1000000000 956431324\\n\",\n    \"546 182989 371991\\n\",\n    \"45 654489 357075\\n\",\n    \"97259 999895180 999895180\\n\",\n    \"453145 999531525 999531525\\n\",\n    \"2233224 998602326 998602326\\n\",\n    \"8710006 993275594 993275594\\n\",\n    \"599950915 648757793 648757793\\n\",\n    \"85556375 910931345 910931345\\n\",\n    \"263288720 933114664 933114664\\n\",\n    \"1 1 1\\n\",\n    \"2 1 1\\n\",\n    \"1000000000 1 1\\n\",\n    \"1000000000 1 1000000000\\n\",\n    \"1000000000 1000000000 1\\n\",\n    \"3 3 6\\n\",\n    \"500000000 1000000000 1000000000\\n\",\n    \"369635700 359542423 359542423\\n\",\n    \"9294381 967160417 967160417\\n\",\n    \"77810521 953603507 953603507\\n\",\n    \"56392069 977149846 977149846\\n\",\n    \"29940914 962870226 962870226\\n\",\n    \"98457054 957936620 957936620\\n\",\n    \"26781706 947683080 947683080\\n\",\n    \"95297847 943912393 943912393\\n\",\n    \"599950915 648757793 648757793\\n\",\n    \"878532463 907519567 907519567\\n\",\n    \"452081307 790635695 790635695\\n\",\n    \"320597448 968719119 968719119\\n\",\n    \"894146292 146802543 146802543\\n\",\n    \"322470944 972242878 972242878\\n\",\n    \"896019789 208002095 208002095\\n\",\n    \"469568633 681052815 681052815\\n\",\n    \"338084774 564168943 564168943\\n\",\n    \"18926797 930932717 930932717\\n\",\n    \"234739357 906319479 906319479\\n\",\n    \"488724368 443674657 443674657\\n\",\n    \"380555977 422333785 422333785\\n\",\n    \"77 844667647 844667647\\n\",\n    \"7 908904220 908904220\\n\",\n    \"2 999999999 999999999\\n\",\n    \"7 999999999 999999999\\n\",\n    \"17 999999999 999999999\\n\",\n    \"6 4 4\\n\"\n  ],\n  \"outputs\": [\n    \"0.50000000000000000000\\n\",\n    \"0.00000000000000000000\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"5.00000000000000000000\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"0.00000000299999980413\\n\",\n    \"0.00000000000000000000\\n\",\n    \"0.00000000000000000000\\n\",\n    \"0.00000002400000020941\\n\",\n    \"-1\\n\",\n    \"235.00000000000000000000\\n\",\n    \"1.50000000000000000000\\n\",\n    \"7.06740589436958543956\\n\",\n    \"157.20761559385573491454\\n\",\n    \"783.92410714272409677505\\n\",\n    \"2912.26086956448853015900\\n\",\n    \"24403439.00000000000000000000\\n\",\n    \"5033417.72727273404598236084\\n\",\n    \"35812126.00000000000000000000\\n\",\n    \"0.00000000000000000000\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"0.00000000000000000000\\n\",\n    \"0.00000000000000000000\\n\",\n    \"-1\\n\",\n    \"5188.50476190447807312012\\n\",\n    \"1529019.61538460850715637207\\n\",\n    \"1026926.27777777612209320068\\n\",\n    \"144272.06060606241226196289\\n\",\n    \"7182313.40000000596046447754\\n\",\n    \"286760.27777777612209320068\\n\",\n    \"8623177.00000000000000000000\\n\",\n    \"24403439.00000000000000000000\\n\",\n    \"14493552.00000000000000000000\\n\",\n    \"169277194.00000000000000000000\\n\",\n    \"1731693.75000000000000000000\\n\",\n    \"-1\\n\",\n    \"1207511.50000000000000000000\\n\",\n    \"-1\\n\",\n    \"105742091.00000000000000000000\\n\",\n    \"113042084.50000000000000000000\\n\",\n    \"70393.28000000119209289551\\n\",\n    \"50525352.00000000000000000000\\n\",\n    \"-1\\n\",\n    \"20888904.00000000000000000000\\n\",\n    \"0.00000492264608453752\\n\",\n    \"0.00000000000000000000\\n\",\n    \"0.00000000200000016548\\n\",\n    \"0.00000003500000023138\\n\",\n    \"0.00000010199999778138\\n\",\n    \"-1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/774/G",
  "starter_code": ""
}