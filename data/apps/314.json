{
  "task_id": "APPS/314",
  "problem_id": 314,
  "prompt": "Bran and his older sister Arya are from the same house. Bran like candies so much, so Arya is going to give him some Candies.\n\nAt first, Arya and Bran have 0 Candies. There are n days, at the i-th day, Arya finds a_{i} candies in a box, that is given by the Many-Faced God. Every day she can give Bran at most 8 of her candies. If she don't give him the candies at the same day, they are saved for her and she can give them to him later.\n\nYour task is to find the minimum number of days Arya needs to give Bran k candies before the end of the n-th day. Formally, you need to output the minimum day index to the end of which k candies will be given out (the days are indexed from 1 to n).\n\nPrint -1 if she can't give him k candies during n given days.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 10000).\n\nThe second line contains n integers a_1, a_2, a_3, ..., a_{n} (1 \u2264 a_{i} \u2264 100).\n\n\n-----Output-----\n\nIf it is impossible for Arya to give Bran k candies within n days, print -1.\n\nOtherwise print a single integer\u00a0\u2014 the minimum number of days Arya needs to give Bran k candies before the end of the n-th day.\n\n\n-----Examples-----\nInput\n2 3\n1 2\n\nOutput\n2\nInput\n3 17\n10 10 10\n\nOutput\n3\nInput\n1 9\n10\n\nOutput\n-1\n\n\n-----Note-----\n\nIn the first sample, Arya can give Bran 3 candies in 2 days.\n\nIn the second sample, Arya can give Bran 17 candies in 3 days, because she can give him at most 8 candies per day.\n\nIn the third sample, Arya can't give Bran 9 candies, because she can give him at most 8 candies per day and she must give him the candies within 1 day.",
  "solutions": "[\"#!/bin/python\\n\\nn, k = list(map(int, input().split()))\\np = list(map(int, input().split()))\\n\\na, b = 0, 0\\nfor i in range(n):\\n    a += p[i]\\n    x = min(8, a)\\n    b += x\\n    a -= x\\n    if b >= k:\\n        print(i+1)\\n        break\\nelse:\\n    print(-1)\\n\", \"def list_input():\\n    return list(map(int,input().split()))\\ndef map_input():\\n    return list(map(int,input().split()))\\ndef map_string():\\n    return input().split()\\n    \\nn,k = map_input()\\na = list_input()\\ncur = 0\\ncnt = 1\\nfor i in a:\\n  cur += i\\n  if cur >= 8:\\n    cur -= 8\\n    k -= 8\\n  else:\\n    k -= cur\\n    cur = 0\\n  if k <= 0:\\n    break\\n  cnt += 1\\nif k <= 0:\\n  print(cnt)\\nelse:\\n  print(-1)\\n  \\n\", \"N,K = list(map(int,input().split()))\\na = [int(i) for i in input().split()]\\n\\nstore = 0\\ns = 0\\nfor day in range(N):\\n    store+=a[day]\\n    x = min(8,store)\\n    s +=x\\n    store -=x\\n    if s>=K:\\n        break\\n\\nif s>=K:\\n    print(day+1)\\nelse:\\n    print(-1)\\n\", \"n,k=map(int,input().split())\\nl=list(map(int,input().split()))\\ncur=0\\nfor i in range(n):\\n    cur+=l[i]\\n    k-=min(cur,8)\\n    cur-=min(cur,8)\\n    if k<=0:\\n        print(i+1)\\n        break\\nelse:\\n    print(-1)\", \"n, k = map(int, input().split())\\n\\nl = list(map(int, input().split()))\\n\\ncnt = 0\\nans = 0\\n\\nfor a in l:\\n\\tans += 1\\n\\tcnt += a;\\n\\tgt = min(8, min(cnt, k))\\n\\tk -= gt\\n\\tcnt -= gt\\n\\tif k == 0:\\n\\t\\tprint(ans)\\n\\t\\treturn\\n\\nprint(-1)\", \"from sys import stdin, stdout\\n\\nn, k = list(map(int, stdin.readline().split()))\\nvalues = list(map(int, stdin.readline().split()))\\ncnt = 0\\nsweet = 0\\n\\nfor i in range(n):\\n    cnt += values[i]\\n    \\n    v = min(min(cnt, 8), k - sweet)\\n    sweet += v \\n    cnt -= v\\n    \\n    if sweet == k:\\n        stdout.write(str(i + 1))\\n        break\\nelse:\\n    stdout.write('-1')\\n\", \"n,k = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\n\\narya = 0\\nbran = 0\\n\\nfor i,a in enumerate(A):\\n    arya += a \\n    bran += min(arya, 8)\\n    arya -= min(arya, 8)\\n    if bran >= k:\\n        print(i+1)\\n        return\\n\\nprint(-1)\\n\", \"n,k=list(map(int,input().split()))\\nl=list(map(int,input().split()))\\ndays=0\\nstock=0\\nwhile(k>0 and days<n):\\n\\tstock+=l[days]\\n\\tk-=min(stock,8)\\n\\tstock-=min(stock,8)\\n\\tdays+=1\\nif(k>0):\\n\\tprint(-1)\\nelse:\\n\\tprint(days)\", \"\\n\\n\\ndef main():\\n    n, k = (int(x) for x in input().split())\\n    xs = [int(x) for x in input().split()]\\n\\n    counter = 0\\n    arya = 0\\n    bran = 0\\n\\n    for i, x in enumerate(xs):\\n        arya += x\\n\\n        give = min(arya, 8)\\n        arya -= give\\n        bran += give\\n\\n        if bran >= k:\\n            break\\n\\n    if bran >= k:\\n        print(i+1)\\n    else:\\n        print(-1)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n\\n\\n__starting_point()\", \"n, m = list(map(int, input().split()))\\nz = list(map(int, input().split()))\\nans = 0\\nctr = 0\\nleft = 0\\nwhile ctr < m:\\n    if ans >= n:\\n        print(-1)\\n        return\\n    else:\\n        z[ans] += left\\n        ctr += min(8, z[ans])\\n        left = z[ans] - min(8, z[ans])\\n    ans += 1\\nprint(ans)\\n\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n\\ntot = 0\\nremain = 0\\ni = 0\\nwhile i < n:\\n    if a[i] + remain <= 8:\\n        tot += a[i] + remain\\n        remain = 0\\n    else:\\n        tot += 8\\n        remain += a[i] - 8\\n    if tot >= k:\\n        print(i+1)\\n        break\\n    i += 1\\nif i == n:\\n    print(-1)\\n\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n\\nans = -1\\nca = 0\\ncb = 0\\nfor i in range(n):\\n    ca += a[i]\\n    c = min(ca, 8)\\n    ca -= c\\n    cb += c\\n    if k <= cb:\\n        ans = i + 1\\n        break\\n\\nprint(ans)\\n\", \"def main():\\n\\tn, k = list(map(int, input().split()))\\n\\tcandies = list(map(int, input().split()))\\n\\n\\trest = 0\\n\\tgiven = 0\\n\\tfor i in range(n):\\n\\t\\trest += candies[i]\\n\\t\\tif rest >= 8:\\n\\t\\t\\tgiven += 8\\n\\t\\t\\trest -= 8\\n\\t\\telse:\\n\\t\\t\\tgiven += rest\\n\\t\\t\\trest = 0\\n\\n\\t\\tif given >= k:\\n\\t\\t\\tprint(i + 1)\\n\\t\\t\\tbreak\\n\\n\\t\\tif i == n - 1:\\n\\t\\t\\tprint(-1)\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\", \"q,w=list(map(int,input().split()))\\na=list(map(int,input().split()))\\nif (w>8*q)|(w>sum(a)):\\n    print(-1)\\nelse:\\n    s=0\\n    i=0\\n    while (w>0)&(i<q):\\n        s+=a[i]\\n        w-=min(8,s)\\n        s-=min(8,s)\\n        i+=1\\n    if w<=0:\\n        print(i)\\n    else:\\n        print(-1)\\n\", \"from sys import stdin\\ni = [[int(y) for y in x.rstrip().split()] for x in stdin.readlines()]\\nk = i[0][1]\\ndays = i[1]\\nremaining = 0\\nfor i,x in enumerate(days):\\n    k-= min(8,x+remaining)\\n    remaining = x+remaining - min(8,x+remaining)\\n    if k<=0:\\n        print(i+1)\\n        break\\nelse:\\n    print (-1)\", \"#py3com\\n#pycom\\n#ciphereck\\n#t=int(input())\\n#n=list(map(int,input().split()))\\n#a,b=map(int,input().split())\\n#print(n)\\n#print(a)\\n# n.sort()\\n#print(*ans) to print list with spaces without brackets\\nn,k=list(map(int,input().split()))\\na=list(map(int,input().split()))\\nd=0\\nc=0\\nt=0\\nwhile t<k:\\n  if d==n:\\n    d+=1\\n    break\\n  c+=a[d]\\n  g=min(8,c)\\n  t+=g\\n  d+=1\\n  c=c-g\\nif d==n+1:\\n  print(-1)\\nelse:\\n  print(d)\\n\", \"import sys\\n\\ndef r():\\n    return list(map(int, input().split()))\\n\\nn, k = list(map(int, input().split()))\\na = r()\\n\\nsum = 0\\ncnt = 0\\nfor i in range(n):\\n    sum += a[i]\\n    cnt += min(8, sum)\\n    sum = max(0, sum-8)\\n    if (cnt >= k):\\n        print(i+1)\\n        return\\n\\nprint(-1)\\n\", \"def main():\\n    N, K = list(map(int, input().split()))\\n    nums = list(map(int, input().split()))\\n\\n    aran = 0\\n    bran = 0\\n    for n in range(N):\\n        aran += nums[n]\\n        x = min(aran, 8)\\n        aran -= x\\n        bran += x\\n        if bran >= K:\\n            print(n+1)\\n            return\\n\\n    print(-1)\\n    return\\n        \\n\\ndef __starting_point():\\n    # nonlocal stime\\n    # stime = time.clock()\\n    main()\\n\\n\\n__starting_point()\", \"n, k = input().split()\\nn, k = int(n), int(k)\\narray = list(map(int, input().split()))\\n\\ntotal = 0\\nsaved = 0\\nfound = False\\n\\nfor day in range(n):\\n    saved += array[day]\\n    \\n    given = min(saved, 8)\\n    total += given\\n    saved -= given\\n\\n    if total >= k:\\n        found = True\\n        print(day+1)\\n        break\\n    \\nif not found:\\n    print(-1)\\n\", \"n, k = map(int, input().split())\\na = list(map(int, input().split()))\\n\\ns = 0\\nres = 0\\nans = -1\\nfor i in range(n):\\n    s += a[i]\\n    res += min(s, 8)\\n    s -= min(s, 8)\\n    if res >= k:\\n        ans = i + 1\\n        break\\n\\nprint(ans)\", \"split = lambda: list(map(int, input().split()))\\na, b = split()\\ncandies = split()\\np = q = 0\\nfor x in range(a):\\n    p += candies[x]\\n    s = min(8, p)\\n    p -= s\\n    q += s\\n    if q >= b:\\n        print(x + 1)\\n        break\\nelse:\\n    print(-1)\", \"#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n\\nimport sys\\nimport re\\nimport math\\nimport collections\\nimport itertools\\nimport functools\\n\\nDEBUG = True\\nDEBUG = False\\n\\ndef dbg(*args):\\n    if DEBUG:\\n        print(\\\"DBG: \\\", file=sys.stderr, end=\\\"\\\")\\n        print(*args, file=sys.stderr)\\n\\n\\n\\ndef main():\\n    N, K = map(int, input().split())\\n    A = list(map(int, input().split()))\\n\\n    candy_a = 0;\\n    candy_b = 0;\\n    for day in range(N):\\n        candy_a += A[day]\\n        if candy_a > 8:\\n            candy_b += 8\\n            candy_a -= 8\\n        else:\\n            candy_b += candy_a\\n            candy_a  = 0\\n\\n        if candy_b >= K:\\n            print(day+1)\\n            return\\n\\n    print(-1)\\n\\ndef __starting_point(): main()\\n\\n__starting_point()\", \"n, k = list(map(int, input().split()))\\ncnt, day = 0, 0\\na = list(map(int, input().split()))\\nwhile k > 0:\\n    try:\\n        cnt += a[day]\\n    except IndexError:\\n        print(-1)\\n        return\\n    x = min(8, cnt)\\n    cnt -= x\\n    k -= x\\n    day += 1\\nprint(day)\\n\\n\", \"import sys, os\\n\\nn, k = map(int, input().split())\\ndata =list(map(int, input().split()))\\nres = 0\\nresu = 0\\nfor i in range(n):\\n    res += data[i]\\n    r = min(res, 8)\\n    res -= r\\n    resu += r\\n    if resu >= k:\\n        print(i + 1)\\n        return\\n        sys.exit\\n        os.abort()\\nprint(-1)\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\na1, a2 = 0, 0\\nans = False\\n\\nfor i in range(n):\\n    a1 += a[i]\\n    a2 += min(8, a1)\\n    a1 -= min(8, a1)\\n    if a2 >= k:\\n        ans = i + 1\\n        break\\n\\nif ans:\\n    print(ans)\\nelse:\\n    print(-1)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 3\\n1 2\\n\",\n    \"3 17\\n10 10 10\\n\",\n    \"1 9\\n10\\n\",\n    \"10 70\\n6 5 2 3 3 2 1 4 3 2\\n\",\n    \"20 140\\n40 4 81 40 10 54 34 50 84 60 16 1 90 78 38 93 99 60 81 99\\n\",\n    \"30 133\\n3 2 3 4 3 7 4 5 5 6 7 2 1 3 4 6 7 4 6 4 7 5 7 1 3 4 1 6 8 5\\n\",\n    \"40 320\\n70 79 21 64 95 36 63 29 66 89 30 34 100 76 42 12 4 56 80 78 83 1 39 9 34 45 6 71 27 31 55 52 72 71 38 21 43 83 48 47\\n\",\n    \"50 300\\n5 3 11 8 7 4 9 5 5 1 6 3 5 7 4 2 2 10 8 1 7 10 4 4 11 5 2 4 9 1 5 4 11 9 11 2 7 4 4 8 10 9 1 11 10 2 4 11 6 9\\n\",\n    \"37 30\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"100 456\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\n\",\n    \"90 298\\n94 90 98 94 93 90 99 98 90 96 93 96 92 92 97 98 94 94 96 100 93 96 95 98 94 91 95 95 94 90 93 96 93 100 99 98 94 95 98 91 91 98 97 100 98 93 92 93 91 100 92 97 95 95 97 94 98 97 99 100 90 96 93 100 95 99 92 100 99 91 97 99 98 93 90 93 97 95 94 96 90 100 94 93 91 92 97 97 97 100\\n\",\n    \"7 43\\n4 3 7 9 3 8 10\\n\",\n    \"99 585\\n8 2 3 3 10 7 9 4 7 4 6 8 7 11 5 8 7 4 7 7 6 7 11 8 1 7 3 2 10 1 6 10 10 5 10 2 5 5 11 6 4 1 5 10 5 8 1 3 7 10 6 1 1 3 8 11 5 8 2 2 5 4 7 6 7 5 8 7 10 9 6 11 4 8 2 7 1 7 1 4 11 1 9 6 1 10 6 10 1 5 6 5 2 5 11 5 1 10 8\\n\",\n    \"30 177\\n8 7 5 8 3 7 2 4 3 8 11 3 9 11 2 4 1 4 5 6 11 5 8 3 6 3 11 2 11 8\\n\",\n    \"19 129\\n3 3 10 11 4 7 3 8 10 2 11 6 11 9 4 2 11 10 5\\n\",\n    \"100 100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"13 104\\n94 55 20 96 86 76 13 71 13 1 32 76 69\\n\",\n    \"85 680\\n61 44 55 6 30 74 27 26 17 45 73 1 67 71 39 32 13 25 79 66 4 59 49 28 29 22 10 17 98 80 36 99 52 24 59 44 27 79 29 46 29 12 47 72 82 25 6 30 81 72 95 65 30 71 72 45 39 16 16 89 48 42 59 71 50 58 31 65 91 70 48 56 28 34 53 89 94 98 49 55 94 65 91 11 53\\n\",\n    \"100 458\\n3 6 4 1 8 4 1 5 4 4 5 8 4 4 6 6 5 1 2 2 2 1 7 1 1 2 6 5 7 8 3 3 8 3 7 5 7 6 6 2 4 2 2 1 1 8 6 1 5 3 3 4 1 4 6 8 5 4 8 5 4 5 5 1 3 1 6 7 6 2 7 3 4 8 1 8 6 7 1 2 4 6 7 4 8 8 8 4 8 7 5 2 8 4 2 5 6 8 8 5\\n\",\n    \"98 430\\n4 7 6 3 4 1 7 1 1 6 6 1 5 4 6 1 5 4 6 6 1 5 1 1 8 1 6 6 2 6 8 4 4 6 6 8 8 7 4 1 2 4 1 5 4 3 7 3 2 5 7 7 7 2 2 2 7 2 8 7 3 4 5 7 8 3 7 6 7 3 2 4 7 1 4 4 7 1 1 8 4 5 8 3 1 5 3 5 2 1 3 3 8 1 3 5 8 6\\n\",\n    \"90 80\\n6 1 7 1 1 8 6 6 6 1 5 4 2 2 8 4 8 7 7 2 5 7 7 8 5 5 6 3 3 8 3 5 6 3 4 2 6 5 5 3 3 3 8 6 6 1 8 3 6 5 4 8 5 4 3 7 1 3 2 3 3 7 7 7 3 5 2 6 2 3 6 4 6 5 5 3 2 1 1 7 3 3 4 3 4 2 1 2 3 1\\n\",\n    \"89 99\\n7 7 3 5 2 7 8 8 1 1 5 7 7 4 1 5 3 4 4 8 8 3 3 2 6 3 8 2 7 5 8 1 3 5 3 6 4 3 6 2 3 3 4 5 1 6 1 7 7 7 6 7 7 7 8 8 8 2 1 7 5 8 6 7 7 4 7 5 7 8 1 3 5 8 7 1 4 2 5 8 3 4 4 5 5 6 2 4 2\\n\",\n    \"50 700\\n4 3 2 8 8 5 5 3 3 4 7 2 6 6 3 3 8 4 2 4 8 6 5 4 5 4 5 8 6 5 4 7 2 4 1 6 2 6 8 6 2 5 8 1 3 8 3 8 4 1\\n\",\n    \"82 359\\n95 98 95 90 90 96 91 94 93 99 100 100 92 99 96 94 99 90 94 96 91 91 90 93 97 96 90 94 97 99 93 90 99 98 96 100 93 97 100 91 100 92 93 100 92 90 90 94 99 95 100 98 99 96 94 96 96 99 99 91 97 100 95 100 99 91 94 91 98 98 100 97 93 93 96 97 94 94 92 100 91 91\\n\",\n    \"60 500\\n93 93 100 99 91 92 95 93 95 99 93 91 97 98 90 91 98 100 95 100 94 93 92 91 91 98 98 90 93 91 90 96 92 93 92 94 94 91 96 94 98 100 97 96 96 97 91 99 97 95 96 94 91 92 99 95 97 92 98 90\\n\",\n    \"98 776\\n48 63 26 3 88 81 27 33 37 10 2 89 41 84 98 93 25 44 42 90 41 65 97 1 28 69 42 14 86 18 96 28 28 94 78 8 44 31 96 45 26 52 93 25 48 39 3 75 94 93 63 59 67 86 18 74 27 38 68 7 31 60 69 67 20 11 19 34 47 43 86 96 3 49 56 60 35 49 89 28 92 69 48 15 17 73 99 69 2 73 27 35 28 53 11 1 96 50\\n\",\n    \"100 189\\n15 14 32 65 28 96 33 93 48 28 57 20 32 20 90 42 57 53 18 58 94 21 27 29 37 22 94 45 67 60 83 23 20 23 35 93 3 42 6 46 68 46 34 25 17 16 50 5 49 91 23 76 69 100 58 68 81 32 88 41 64 29 37 13 95 25 6 59 74 58 31 35 16 80 13 80 10 59 85 18 16 70 51 40 44 28 8 76 8 87 53 86 28 100 2 73 14 100 52 9\\n\",\n    \"99 167\\n72 4 79 73 49 58 15 13 92 92 42 36 35 21 13 10 51 94 64 35 86 50 6 80 93 77 59 71 2 88 22 10 27 30 87 12 77 6 34 56 31 67 78 84 36 27 15 15 12 56 80 7 56 14 10 9 14 59 15 20 34 81 8 49 51 72 4 58 38 77 31 86 18 61 27 86 95 36 46 36 39 18 78 39 48 37 71 12 51 92 65 48 39 22 16 87 4 5 42\\n\",\n    \"90 4\\n48 4 4 78 39 3 85 29 69 52 70 39 11 98 42 56 65 98 77 24 61 31 6 59 60 62 84 46 67 59 15 44 99 23 12 74 2 48 84 60 51 28 17 90 10 82 3 43 50 100 45 57 57 95 53 71 20 74 52 46 64 59 72 33 74 16 44 44 80 71 83 1 70 59 61 6 82 69 81 45 88 28 17 24 22 25 53 97 1 100\\n\",\n    \"30 102\\n55 94 3 96 3 47 92 85 25 78 27 70 97 83 40 2 55 12 74 84 91 37 31 85 7 40 33 54 72 5\\n\",\n    \"81 108\\n61 59 40 100 8 75 5 74 87 12 6 23 98 26 59 68 27 4 98 79 14 44 4 11 89 77 29 90 33 3 43 1 87 91 28 24 4 84 75 7 37 46 15 46 8 87 68 66 5 21 36 62 77 74 91 95 88 28 12 48 18 93 14 51 33 5 99 62 99 38 49 15 56 87 52 64 69 46 41 12 92\\n\",\n    \"2 16\\n10 6\\n\",\n    \"2 8\\n7 8\\n\",\n    \"2 9\\n4 8\\n\",\n    \"3 19\\n9 9 1\\n\",\n    \"4 32\\n9 9 9 5\\n\",\n    \"2 15\\n14 1\\n\",\n    \"2 3\\n3 3\\n\",\n    \"3 10\\n10 1 1\\n\",\n    \"12 20\\n3 16 19 10 1 6 17 8 6 20 1 4\\n\",\n    \"4 15\\n14 3 3 3\\n\",\n    \"5 40\\n10 10 10 10 1\\n\",\n    \"4 31\\n9 9 8 5\\n\",\n    \"4 31\\n20 7 1 1\\n\",\n    \"2 10\\n9 1\\n\",\n    \"10 50\\n100 10 1 1 1 1 1 1 1 1\\n\",\n    \"2 11\\n10 2\\n\",\n    \"3 21\\n10 10 1\\n\",\n    \"2 2\\n1 2\\n\",\n    \"3 2\\n1 8 8\\n\",\n    \"2 11\\n10 1\\n\",\n    \"2 16\\n12 4\\n\",\n    \"3 11\\n9 2 2\\n\",\n    \"3 11\\n4 3 4\\n\",\n    \"2 13\\n7 6\\n\",\n    \"3 24\\n14 3 4\\n\",\n    \"2 13\\n10 3\\n\",\n    \"3 11\\n9 2 1\\n\",\n    \"2 15\\n12 3\\n\",\n    \"2 14\\n11 4\\n\"\n  ],\n  \"outputs\": [\n    \"2\",\n    \"3\",\n    \"-1\",\n    \"-1\",\n    \"18\",\n    \"30\",\n    \"40\",\n    \"-1\",\n    \"30\",\n    \"57\",\n    \"38\",\n    \"-1\",\n    \"-1\",\n    \"-1\",\n    \"-1\",\n    \"100\",\n    \"13\",\n    \"85\",\n    \"100\",\n    \"98\",\n    \"18\",\n    \"21\",\n    \"-1\",\n    \"45\",\n    \"-1\",\n    \"97\",\n    \"24\",\n    \"21\",\n    \"1\",\n    \"13\",\n    \"14\",\n    \"2\",\n    \"2\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"2\",\n    \"1\",\n    \"2\",\n    \"4\",\n    \"2\",\n    \"5\",\n    \"4\",\n    \"-1\",\n    \"2\",\n    \"7\",\n    \"2\",\n    \"3\",\n    \"2\",\n    \"2\",\n    \"2\",\n    \"2\",\n    \"2\",\n    \"3\",\n    \"2\",\n    \"-1\",\n    \"2\",\n    \"2\",\n    \"2\",\n    \"2\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/839/A",
  "starter_code": ""
}