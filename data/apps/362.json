{
  "task_id": "APPS/362",
  "problem_id": 362,
  "prompt": "You are given a regular polygon with $n$ vertices labeled from $1$ to $n$ in counter-clockwise order. The triangulation of a given polygon is a set of triangles such that each vertex of each triangle is a vertex of the initial polygon, there is no pair of triangles such that their intersection has non-zero area, and the total area of all triangles is equal to the area of the given polygon. The weight of a triangulation is the sum of weigths of triangles it consists of, where the weight of a triagle is denoted as the product of labels of its vertices.\n\nCalculate the minimum weight among all triangulations of the polygon.\n\n\n-----Input-----\n\nThe first line contains single integer $n$ ($3 \\le n \\le 500$) \u2014 the number of vertices in the regular polygon.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum weight among all triangulations of the given polygon.\n\n\n-----Examples-----\nInput\n3\n\nOutput\n6\n\nInput\n4\n\nOutput\n18\n\n\n\n-----Note-----\n\nAccording to Wiki: polygon triangulation is the decomposition of a polygonal area (simple polygon) $P$ into a set of triangles, i. e., finding a set of triangles with pairwise non-intersecting interiors whose union is $P$.\n\nIn the first example the polygon is a triangle, so we don't need to cut it further, so the answer is $1 \\cdot 2 \\cdot 3 = 6$.\n\nIn the second example the polygon is a rectangle, so it should be divided into two triangles. It's optimal to cut it using diagonal $1-3$ so answer is $1 \\cdot 2 \\cdot 3 + 1 \\cdot 3 \\cdot 4 = 6 + 12 = 18$.",
  "solutions": "[\"n = int(input())\\nans = 0\\nfor i in range(1, n - 1):\\n    ans += (i + 1) * (i + 2)\\nprint(ans)\", \"ii = lambda: int(input())\\nmi = lambda: map(int, input().split())\\nli = lambda: list(mi())\\n\\nn = ii()\\nans = 0\\nfor i in range(3, n + 1):\\n    ans += i * (i - 1)\\nprint(ans)\", \"n = int(input())\\nprint(n*(n - 1)*(n + 1)//3 - 2)\", \"n = int(input())\\nt = 0\\n\\nfor i in range(n-2):\\n    t += (i+2)*(i+3)\\n\\nprint(t)\", \"from collections import defaultdict as dd\\nimport math\\ndef nn():\\n\\treturn int(input())\\n\\ndef li():\\n\\treturn list(input())\\n\\ndef mi():\\n\\treturn list(map(int, input().split()))\\n\\ndef lm():\\n\\treturn list(map(int, input().split()))\\n\\n\\n\\n\\nn=nn()\\n\\ntotal=0\\n\\nfor i in range(n-2):\\n\\ttotal=total+1*(i+2)*(i+3)\\n\\nprint(total) \\n\", \"def li ():\\n\\treturn list (map (int, input ().split ()))\\n\\n\\ndef num ():\\n\\treturn map (int, input ().split ())\\n\\n\\ndef nu ():\\n\\treturn int (input ())\\n\\nmm = 1000000007\\n\\n\\ndef solve ():\\n\\tt = 1\\n\\tfor it in range (t):\\n\\t\\tn=nu()\\n\\t\\tcc=0\\n\\t\\tfor i in range(2,n):\\n\\t\\t\\tcc+=i*(i+1)\\n\\t\\tprint(cc)\\n\\n\\n\\ndef __starting_point():\\n\\tsolve ()\\n__starting_point()\", \"N = int(input())\\nans = 0\\nfor i in range(N-2):\\n    ans += (i+2)*(i+3)\\n\\nprint(ans)\\n\", \"# python template for atcoder1\\nimport sys\\nsys.setrecursionlimit(10**9)\\ninput = sys.stdin.readline\\n\\nN = int(input())\\nans = 0\\nfor i, j in zip(list(range(2, N+1)), list(range(3, N+1))):\\n    ans += i*j\\nprint(ans)\\n\", \"n=int(input())-2\\nprint(n*(n*n+6*n+11)//3)\", \"n=int(input())\\nans=0\\nfor i in range(2, n):\\n    ans+=i*(i+1)\\nprint(ans)\\n\", \"# stdin=open('input.txt')\\n\\n# def input():\\n# \\treturn stdin.readline()[:-1]\\n\\n# a, b = map(int, input().split())\\n\\n# l = list(map(int, input().split()))\\n\\n\\n# CODE BEGINS HERE.................\\n\\nans = 0\\nfor t in range(2, int(input())):\\n\\tans += t*(t + 1)\\n\\nprint(ans)\\n#CODE ENDS HERE....................\\n\\n\\n\\n\", \"n = int(input())\\nn = n - 1\\n\\nprint(n * (n + 1) * (2 * n + 1) // 6 + n * (n + 1) // 2 - 2)\", \"n = int(input())\\nm = 0\\nfor i in range(2, n):\\n\\tm += i * (i + 1)\\nprint(m)\", \"#JMD\\n#Nagendra Jha-4096\\n\\n \\nimport sys\\nimport math\\n\\n#import fractions\\n#import numpy\\n \\n###File Operations###\\nfileoperation=0\\nif(fileoperation):\\n    orig_stdout = sys.stdout\\n    orig_stdin = sys.stdin\\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\\n    sys.stdin = inputfile\\n    sys.stdout = outputfile\\n\\n###Defines...###\\nmod=1000000007\\n \\n###FUF's...###\\ndef nospace(l):\\n    ans=''.join(str(i) for i in l)\\n    return ans\\n \\n \\n \\n##### Main ####\\nt=1\\nfor tt in range(t):\\n    n=int(input())\\n    ans=0\\n    for i in range(2,n):\\n        ans+=i*(i+1)\\n    print(ans)\\n    #n,k,s= map(int, sys.stdin.readline().split(' '))\\n    #a=list(map(int,sys.stdin.readline().split(' ')))\\n    \\n    \\n#####File Operations#####\\nif(fileoperation):\\n    sys.stdout = orig_stdout\\n    sys.stdin = orig_stdin\\n    inputfile.close()\\n    outputfile.close()\", \"n=int(input())\\nans=0\\nfor i in range(2,n):\\n     ans+=i*(i+1)\\nprint(ans)\", \"n=int(input())\\nans=0\\nfor i in range(2,n,1):\\n\\tans+=i*(i+1);\\nprint(ans)\", \"a = int(input())\\nans = 0\\nfor i in range(a - 2):\\n    ans += (i + 2) * (i + 3)\\nprint(ans)\", \"#!/usr/bin/env python3\\nimport sys\\n\\ndef rint():\\n    return list(map(int, sys.stdin.readline().split()))\\n#lines = stdin.readlines()\\n\\nn = int(input())\\n\\nans = 0\\nfor i in range(2,n):\\n    ans += i*(i+1)\\n\\nprint(ans)\\n\", \"n = int(input())\\nprint(sum(i * (i - 1) for i in range(3, n + 1)))\\n\", \"n = int(input())\\nans = 0\\nfor i in range(2, n):\\n    ans += i * (i + 1)\\nprint(ans)\\n\", \"n = int(input())\\ncnt = 0\\nfor i in range(3, n + 1):\\n    cnt += i * (i - 1)\\nprint(cnt)\", \"n=int(input())\\nans=0\\nfor i in range(2,n):\\n    ans+=(i*(i+1))\\nprint(ans)\", \"import re, math, decimal, bisect\\ndef read(): return input().strip()\\ndef iread(): return int(input().strip())\\ndef viread(): return [int(_) for _ in input().strip().split()]\\n\\n# code goes here\\nn = iread()\\n_sum = 0\\nfor i in range(n - 2):\\n    _sum += (i + 2) * (i + 3)\\nprint(_sum)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"7\\n\",\n    \"8\\n\",\n    \"9\\n\",\n    \"10\\n\",\n    \"100\\n\",\n    \"101\\n\",\n    \"102\\n\",\n    \"103\\n\",\n    \"104\\n\",\n    \"105\\n\",\n    \"106\\n\",\n    \"107\\n\",\n    \"108\\n\",\n    \"109\\n\",\n    \"110\\n\",\n    \"500\\n\",\n    \"497\\n\",\n    \"494\\n\",\n    \"491\\n\",\n    \"488\\n\",\n    \"485\\n\",\n    \"482\\n\",\n    \"479\\n\",\n    \"476\\n\",\n    \"473\\n\",\n    \"470\\n\",\n    \"467\\n\",\n    \"464\\n\",\n    \"461\\n\",\n    \"458\\n\",\n    \"455\\n\",\n    \"452\\n\",\n    \"449\\n\",\n    \"446\\n\",\n    \"42\\n\",\n    \"69\\n\",\n    \"228\\n\",\n    \"233\\n\",\n    \"420\\n\",\n    \"368\\n\",\n    \"225\\n\",\n    \"11\\n\",\n    \"12\\n\",\n    \"13\\n\",\n    \"14\\n\",\n    \"135\\n\",\n    \"199\\n\",\n    \"137\\n\",\n    \"131\\n\",\n    \"130\\n\",\n    \"139\\n\"\n  ],\n  \"outputs\": [\n    \"6\\n\",\n    \"18\\n\",\n    \"38\\n\",\n    \"68\\n\",\n    \"110\\n\",\n    \"166\\n\",\n    \"238\\n\",\n    \"328\\n\",\n    \"333298\\n\",\n    \"343398\\n\",\n    \"353700\\n\",\n    \"364206\\n\",\n    \"374918\\n\",\n    \"385838\\n\",\n    \"396968\\n\",\n    \"408310\\n\",\n    \"419866\\n\",\n    \"431638\\n\",\n    \"443628\\n\",\n    \"41666498\\n\",\n    \"40920990\\n\",\n    \"40184428\\n\",\n    \"39456758\\n\",\n    \"38737926\\n\",\n    \"38027878\\n\",\n    \"37326560\\n\",\n    \"36633918\\n\",\n    \"35949898\\n\",\n    \"35274446\\n\",\n    \"34607508\\n\",\n    \"33949030\\n\",\n    \"33298958\\n\",\n    \"32657238\\n\",\n    \"32023816\\n\",\n    \"31398638\\n\",\n    \"30781650\\n\",\n    \"30172798\\n\",\n    \"29572028\\n\",\n    \"24680\\n\",\n    \"109478\\n\",\n    \"3950706\\n\",\n    \"4216366\\n\",\n    \"24695858\\n\",\n    \"16611886\\n\",\n    \"3796798\\n\",\n    \"438\\n\",\n    \"570\\n\",\n    \"726\\n\",\n    \"908\\n\",\n    \"820078\\n\",\n    \"2626798\\n\",\n    \"857070\\n\",\n    \"749318\\n\",\n    \"732288\\n\",\n    \"895158\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1140/D",
  "starter_code": ""
}