{
  "task_id": "APPS/182",
  "problem_id": 182,
  "prompt": "Carl is a beginner magician. He has a blue, b violet and c orange magic spheres. In one move he can transform two spheres of the same color into one sphere of any other color. To make a spell that has never been seen before, he needs at least x blue, y violet and z orange spheres. Can he get them (possible, in multiple actions)?\n\n\n-----Input-----\n\nThe first line of the input contains three integers a, b and c (0 \u2264 a, b, c \u2264 1 000 000)\u00a0\u2014 the number of blue, violet and orange spheres that are in the magician's disposal.\n\nThe second line of the input contains three integers, x, y and z (0 \u2264 x, y, z \u2264 1 000 000)\u00a0\u2014 the number of blue, violet and orange spheres that he needs to get.\n\n\n-----Output-----\n\nIf the wizard is able to obtain the required numbers of spheres, print \"Yes\". Otherwise, print \"No\".\n\n\n-----Examples-----\nInput\n4 4 0\n2 1 2\n\nOutput\nYes\n\nInput\n5 6 1\n2 7 2\n\nOutput\nNo\n\nInput\n3 3 3\n2 2 2\n\nOutput\nYes\n\n\n\n-----Note-----\n\nIn the first sample the wizard has 4 blue and 4 violet spheres. In his first action he can turn two blue spheres into one violet one. After that he will have 2 blue and 5 violet spheres. Then he turns 4 violet spheres into 2 orange spheres and he ends up with 2 blue, 1 violet and 2 orange spheres, which is exactly what he needs.",
  "solutions": "[\"a, b, c = list(map(int, input().split()))\\nx, y, z = list(map(int, input().split()))\\ncol = max(0, x - a) + max(0, y - b) + max(0, z - c)\\nsum = max(0, (a - x) // 2) + max(0, (b - y) // 2) + max(0, (c - z) // 2)\\nif sum >= col:\\n    print('Yes')\\nelse:\\n    print('No')\\n\", \"a, b, c = list(map(int, input().split(' ')))\\nd, e, f = list(map(int, input().split(' ')))\\n\\nex = []\\nneed = []\\nif a >= d:\\n    ex.append(a-d)\\nelse:\\n    need.append(d-a)\\nif b >= e:\\n    ex.append(b-e)\\nelse:\\n    need.append(e-b)\\nif c >= f:\\n    ex.append(c-f)\\nelse:\\n    need.append(f-c)\\n    \\nsumx = 0\\nfor i in ex:\\n    sumx += i // 2\\n\\nif sumx >= sum(need):\\n    print(\\\"Yes\\\")\\nelse:\\n    print(\\\"No\\\")\\n\", \"#!/usr/bin/env python3\\n\\ntry:\\n    while True:\\n        a, b, c = list(map(int, input().split()))\\n        x, y, z = list(map(int, input().split()))\\n        a -= x\\n        b -= y\\n        c -= z\\n        if sum(t >> 1 for t in (a, b, c) if t > 0) >= sum(-t for t in (a, b, c) if t < 0):\\n            print(\\\"Yes\\\")\\n        else:\\n            print(\\\"No\\\")\\n\\nexcept EOFError:\\n    pass\\n\", \"a, b, c = map(int, input().split())\\nx, y, z = map(int, input().split())\\nhave = 0\\nif a > x:\\n    have += (a - x) // 2\\nif b > y:\\n    have += (b - y) // 2\\nif c > z:\\n    have += (c - z) // 2\\n\\nneed = max(0, x - a) + max(0, y - b) + max(0, z - c)\\nif have >= need:\\n    print('Yes')\\nelse:\\n    print('No')\", \"a, b, c = list(map(int, input().split()))\\nx, y, z = list(map(int, input().split()))\\ndx = [a - x, b - y, c - z]\\nsplus = 0\\nsminus = 0\\nfor i in dx:\\n    if i > 0:\\n        splus += i // 2\\n    else:\\n        sminus += -i\\nif sminus == 0 or splus >= sminus:\\n    print('Yes')\\nelse:\\n    print('No')\\n\\n\", \"import math\\nOwn = list(map(int, input().split()))\\nReq = list(map(int, input().split()))\\n\\nDelta = 0\\nfor i in range(3):\\n    Delta += math.floor((Own[i] - Req[i])/2) if Own[i] > Req[i] else (Own[i]-Req[i])\\n\\nprint(\\\"Yes\\\" if Delta >= 0 else \\\"No\\\")\", \"a, b, c = tuple(map(int, input().split()))\\nx, y, z = tuple(map(int, input().split()))\\n\\nhave = 0\\nneed = 0\\n\\nif a > x:\\n    have += (a - x) // 2\\nelse:\\n    need += x - a\\n\\nif b > y:\\n    have += (b - y) // 2\\nelse:\\n    need += y - b\\n    \\nif c > z:\\n    have += (c - z) // 2\\nelse:\\n    need += z - c\\n\\nif need > have:\\n    print('No')\\nelse:\\n    print('Yes')\", \"a, b, c = list(map(int, input().split()))\\nx, y, z = list(map(int, input().split()))\\nif a >= x:\\n    a -= x\\n    x = 0\\nelse:\\n    x -= a\\n    a = 0\\n    \\n\\nif b >=y:\\n    b -= y\\n    y = 0\\nelse:\\n    y -= b\\n    b = 0\\n\\nif c >= z:\\n    c -= z\\n    z = 0\\nelse:\\n    z -= c\\n    c= 0\\n    \\nif a // 2 + b // 2 + c // 2 >= x + y + z:\\n    print('Yes')\\nelse:\\n    print('No')\\n\", \"a, b, c = map(int, input().split())\\nx, y, z = map(int, input().split())\\na -= x\\nb -= y\\nc -= z\\na, b, c = sorted([a, b, c])\\nk = max(0, c // 2)\\nc -= min(2 * k, -2 * a)\\na += min(k, -a)\\nif a < 0:\\n    k = max(0, b // 2)\\n    b -= min(2 * k, -2 * a)\\n    a += min(k, -a)\\nelif b < 0:\\n    k = max(0, c // 2)\\n    c -= min(2 * k, -2 * b)\\n    b += min(k, -b)\\nif a >= 0 and b >= 0 and c >= 0:\\n    print(\\\"Yes\\\")\\nelse:\\n    print(\\\"No\\\")\", \"have = list(map(int, input().split()))\\ngoal = list(map(int, input().split()))\\ndeficit = 0\\nmakeable = 0\\nfor i in range(3):\\n    if have[i] < goal[i]:\\n        deficit += goal[i] - have[i]\\n    else:\\n        makeable += (have[i] - goal[i]) // 2\\nprint('Yes' if makeable >= deficit else 'No')\\n\", \"has = list(map(int, input().split()))\\ntarget = list(map(int, input().split()))\\n\\noffer = []\\nfor i in range(3):\\n    if has[i] - target[i] > 0:\\n        offer.append(int((has[i] - target[i]) / 2))\\n    else:\\n        offer.append(int(has[i] - target[i]))\\n\\nif sum(offer) >= 0:\\n    print(\\\"Yes\\\")\\nelse:\\n    print(\\\"No\\\")\", \"__author__ = 'MoonBall'\\n\\nimport sys\\n# sys.stdin = open('data/A.in', 'r')\\nT = 1\\n\\ndef process():\\n    a = list(map(int, input().split()))\\n    b = list(map(int, input().split()))\\n    delta = 0\\n    sum_delta = 0\\n    for _a, _b in zip(a, b):\\n        if _a < _b:\\n            delta += _b - _a\\n        else:\\n            sum_delta += (_a - _b) // 2\\n\\n    print('Yes' if sum_delta >= delta else 'No')\\n\\n\\n\\n\\n\\n\\nfor _ in range(T):\\n    process()\\n\", \"read = lambda: map(int, input().split())\\na, b, c = read()\\nx, y, z = read()\\nm, n, k = x - a, y - b, z - c\\np = 0\\nq = 0\\nif m > 0: p += m\\nelse: q += (-m) // 2\\nif k > 0: p += k\\nelse: q += (-k) // 2\\nif n > 0: p += n\\nelse: q += (-n) // 2\\n\\nprint('Yes' if q >= p else 'No')\", \"a, b, c = map(int, input().split())\\nx, y, z = map(int, input().split())\\ns = (0 if a > x else x - a) + (0 if b > y else y - b) + (0 if c > z else z - c)\\nt = ((a - x) // 2 if a > x else 0) + ((b - y) // 2 if b > y else 0) + ((c - z) // 2 if c > z else 0)\\nprint('Yes' if t >= s else 'No')\", \"def f(x):\\n    return x if x <= 0 else x // 2\\n(a, b, c) = list(map(int, input().split()))\\n(x, y, z) = list(map(int, input().split()))\\n(n, m, k) = (a - x, b - y, c - z)\\nans = f(n) + f(m) + f(k)\\nif ans >= 0:\\n    print(\\\"Yes\\\")\\nelse:\\n    print(\\\"No\\\")\\n\\n\\n\", \"a,b,c = list([int(x) for x in input().split(' ')])\\nx,y,z = list([int(x) for x in input().split(' ')])\\n\\nif x-a>0 and y-b>0 and z-c>0:\\n    print('No')\\nelif x-a<=0 and y-b<=0 and z-c<=0:\\n    print('Yes')\\nelse:\\n    n = 0\\n    if a-x < 0:\\n        n+=x-a\\n    if b-y < 0:\\n        n+=y-b\\n    if c-z < 0:\\n        n+=z-c\\n\\n    t = 0\\n    if a-x >= 0:\\n        t+=(a-x)//2\\n    if b-y >= 0:\\n        t+=(b-y)//2\\n    if c-z >= 0:\\n        t+=(c-z)//2\\n\\n    if t >= n:\\n        print('Yes')\\n    else:\\n        print('No')\\n\", \"a = [int(x) for x in input().split()]\\nb = [int(x) for x in input().split()]\\nt, k = 0, 0\\nfor i in range(3):\\n    t += max(0, a[i] - b[i]) // 2\\n    if a[i] < b[i]:\\n        k += b[i] - a[i]\\nprint(\\\"Yes\\\" if t >= k else \\\"No\\\")\", \"a, b, c = [int(x) for x in input().split()]\\nx, y, z = [int(x) for x in input().split()]\\n\\ni = (a - x) // 2 if a > x else 0\\nj = (b - y) // 2 if b > y else 0\\nk = (c - z) // 2 if c > z else 0\\n\\nif max(x - a, 0) + max(y - b, 0) + max(z - c, 0) <= i + j + k:\\n\\tprint('Yes')\\nelse:\\n\\tprint('No')\\n\", \"#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n\\nimport time\\n\\n#   = input()\\n#   = int(input())\\n\\n#() = (i for i in input().split())\\n#   = [i for i in input().split()]\\n\\na = [int(i) for i in input().split()]\\nx = [int(i) for i in input().split()]\\n\\nstart = time.time()\\n\\nans = 0\\n\\nfor i in range(3):\\n    a[i] -= x[i]\\n    if a[i] > 0:\\n        ans += divmod(a[i], 2)[0]\\n    else:\\n        ans += a[i]\\n\\nif ans >=0:\\n    print(\\\"Yes\\\")\\nelse:\\n    print(\\\"No\\\")\\n\\nfinish = time.time()\\n#print(finish - start)\\n\", \"a, b, c = map(int, input().split())\\nx, y, z = map(int, input().split())\\nr = [a - x, b - y, c - z]\\nr.sort()\\nif r[2] < 0:\\n    print('No')\\nelif r[1] < 0:\\n    if r[2] // 2 >= -(r[0] + r[1]):\\n        print('Yes')\\n    else:\\n        print('No')\\nelif r[0] < 0:\\n    if r[2] // 2 + r[1] // 2 >= -r[0]:\\n        print('Yes')\\n    else:\\n        print('No')\\nelse:\\n    print('Yes')\", \"def main():\\n\\ta, b, c = list(map(int, input().split()))\\n\\tx, y, z = list(map(int, input().split()))\\n\\n\\taf = a - x\\n\\tbf = b - y\\n\\tcf = c - z\\n\\n\\tq = sorted([af, bf, cf])\\n\\n\\tif all(x < 0 for x in q):\\n\\t\\treturn False\\n\\n\\tif all(x >= 0 for x in q):\\n\\t\\treturn True\\n\\n\\tif q[0] < 0 and q[1] < 0:\\n\\t\\treturn q[2] // 2 >= -q[0] + -q[1]\\n\\n\\tif q[0] < 0:\\n\\t\\treturn q[1]//2 + q[2]//2 >= -q[0]\\n\\n\\nif main():\\n\\tprint('Yes')\\nelse:\\n\\tprint('No')\\n\", \"l=input().split()\\ns=input().split()\\nr=[0]*3\\nfor i in range(3):\\n    l[i]=int(l[i])\\n    s[i]=int(s[i])\\n    r[i]=l[i]-s[i]\\nk=0\\nm,n=0,0\\nfor i in range(3):\\n    if(r[i]>=0):\\n        m+=r[i]//2\\n    else:\\n        k+=1\\n        r[i]=-r[i]\\n        n+=r[i]\\nif(k==3):\\n    print(\\\"No\\\")\\nelse:\\n    if(m>=n):\\n        print(\\\"Yes\\\")\\n    else:\\n        print(\\\"No\\\")\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4 4 0\\n2 1 2\\n\",\n    \"5 6 1\\n2 7 2\\n\",\n    \"3 3 3\\n2 2 2\\n\",\n    \"0 0 0\\n0 0 0\\n\",\n    \"0 0 0\\n0 0 1\\n\",\n    \"0 1 0\\n0 0 0\\n\",\n    \"1 0 0\\n1 0 0\\n\",\n    \"2 2 1\\n1 1 2\\n\",\n    \"1 3 1\\n2 1 1\\n\",\n    \"1000000 1000000 1000000\\n1000000 1000000 1000000\\n\",\n    \"1000000 500000 500000\\n0 750000 750000\\n\",\n    \"500000 1000000 500000\\n750001 0 750000\\n\",\n    \"499999 500000 1000000\\n750000 750000 0\\n\",\n    \"500000 500000 0\\n0 0 500000\\n\",\n    \"0 500001 499999\\n500000 0 0\\n\",\n    \"1000000 500000 1000000\\n500000 1000000 500000\\n\",\n    \"1000000 1000000 499999\\n500000 500000 1000000\\n\",\n    \"500000 1000000 1000000\\n1000000 500001 500000\\n\",\n    \"1000000 500000 500000\\n0 1000000 500000\\n\",\n    \"500000 500000 1000000\\n500001 1000000 0\\n\",\n    \"500000 999999 500000\\n1000000 0 500000\\n\",\n    \"4 0 3\\n2 2 1\\n\",\n    \"0 2 4\\n2 0 2\\n\",\n    \"3 1 0\\n1 1 1\\n\",\n    \"4 4 1\\n1 3 2\\n\",\n    \"1 2 4\\n2 1 3\\n\",\n    \"1 1 0\\n0 0 1\\n\",\n    \"4 0 0\\n0 1 1\\n\",\n    \"0 3 0\\n1 0 1\\n\",\n    \"0 0 3\\n1 0 1\\n\",\n    \"1 12 1\\n4 0 4\\n\",\n    \"4 0 4\\n1 2 1\\n\",\n    \"4 4 0\\n1 1 3\\n\",\n    \"0 9 0\\n2 2 2\\n\",\n    \"0 10 0\\n2 2 2\\n\",\n    \"9 0 9\\n0 8 0\\n\",\n    \"0 9 9\\n9 0 0\\n\",\n    \"9 10 0\\n0 0 9\\n\",\n    \"10 0 9\\n0 10 0\\n\",\n    \"0 10 10\\n10 0 0\\n\",\n    \"10 10 0\\n0 0 11\\n\",\n    \"307075 152060 414033\\n381653 222949 123101\\n\",\n    \"569950 228830 153718\\n162186 357079 229352\\n\",\n    \"149416 303568 749016\\n238307 493997 190377\\n\",\n    \"438332 298094 225324\\n194220 400244 245231\\n\",\n    \"293792 300060 511272\\n400687 382150 133304\\n\",\n    \"295449 518151 368838\\n382897 137148 471892\\n\",\n    \"191789 291147 691092\\n324321 416045 176232\\n\",\n    \"286845 704749 266526\\n392296 104421 461239\\n\",\n    \"135522 188282 377041\\n245719 212473 108265\\n\",\n    \"404239 359124 133292\\n180069 184791 332544\\n\",\n    \"191906 624432 244408\\n340002 367217 205432\\n\",\n    \"275980 429361 101824\\n274288 302579 166062\\n\",\n    \"136092 364927 395302\\n149173 343146 390922\\n\",\n    \"613852 334661 146012\\n363786 326286 275233\\n\",\n    \"348369 104625 525203\\n285621 215396 366411\\n\",\n    \"225307 153572 114545\\n154753 153282 149967\\n\",\n    \"438576 124465 629784\\n375118 276028 390116\\n\",\n    \"447521 327510 158732\\n395759 178458 259139\\n\",\n    \"8 5 5\\n5 5 5\\n\",\n    \"100 100 100\\n1 1 1\\n\",\n    \"100 100 100\\n0 0 0\\n\",\n    \"3 2 3\\n2 3 2\\n\",\n    \"5 4 3\\n2 2 2\\n\",\n    \"14 9 8\\n12 5 10\\n\",\n    \"10 10 10\\n1 1 1\\n\",\n    \"6 3 3\\n3 3 3\\n\",\n    \"10 0 4\\n2 4 2\\n\",\n    \"100 100 100\\n2 2 2\\n\",\n    \"4 6 0\\n2 1 2\\n\",\n    \"4 6 3\\n4 2 3\\n\",\n    \"5 5 5\\n1 1 1\\n\",\n    \"41 17 34\\n0 19 24\\n\",\n    \"8 8 8\\n3 3 3\\n\",\n    \"7 7 1\\n1 1 2\\n\",\n    \"6 6 0\\n2 2 2\\n\",\n    \"5 5 5\\n2 2 2\\n\",\n    \"400 400 400\\n1 1 1\\n\",\n    \"4 4 4\\n2 2 2\\n\"\n  ],\n  \"outputs\": [\n    \"Yes\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/606/A",
  "starter_code": ""
}