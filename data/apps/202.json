{
  "task_id": "APPS/202",
  "problem_id": 202,
  "prompt": "Professor GukiZ makes a new robot. The robot are in the point with coordinates (x_1, y_1) and should go to the point (x_2, y_2). In a single step the robot can change any of its coordinates (maybe both of them) by one (decrease or increase). So the robot can move in one of the 8 directions. Find the minimal number of steps the robot should make to get the finish position.\n\n\n-----Input-----\n\nThe first line contains two integers x_1, y_1 ( - 10^9 \u2264 x_1, y_1 \u2264 10^9) \u2014 the start position of the robot.\n\nThe second line contains two integers x_2, y_2 ( - 10^9 \u2264 x_2, y_2 \u2264 10^9) \u2014 the finish position of the robot.\n\n\n-----Output-----\n\nPrint the only integer d \u2014 the minimal number of steps to get the finish position.\n\n\n-----Examples-----\nInput\n0 0\n4 5\n\nOutput\n5\n\nInput\n3 4\n6 1\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example robot should increase both of its coordinates by one four times, so it will be in position (4, 4). After that robot should simply increase its y coordinate and get the finish position.\n\nIn the second example robot should simultaneously increase x coordinate and decrease y coordinate by one three times.",
  "solutions": "[\"a, b = map(int, input().split())\\nd, c = map(int, input().split())\\nprint(max(abs(a - d), abs(b - c)))\", \"x1, y1 = list(map(int, input().split()))\\nx2, y2 = list(map(int, input().split()))\\n\\ndx = abs(x1 - x2)\\ndy = abs(y1 - y2)\\n\\nprint(max(dx, dy))\\n\", \"x1, x2 = map(int, input().split())\\nx3, x4 = map(int, input().split())\\na = abs(x2 - x4)\\nb = abs(x1 - x3)\\nprint(max(a, b))\", \"x1, y1 = map(int, input().split())\\nx2, y2 = map(int, input().split())\\nprint(max(abs(x1 - x2), abs(y1 - y2)))\", \"#!/usr/bin/env python3\\n\\ntry:\\n    while True:\\n        x1, y1 = list(map(int, input().split()))\\n        x2, y2 = list(map(int, input().split()))\\n        print(max(abs(x1 - x2), abs(y1 - y2)))\\n\\nexcept EOFError:\\n    pass\\n\", \"x,y = map(int,input().split())\\na,b = map(int,input().split())\\nprint(max(abs(x-a),abs(y-b)))\", \"#author=\\\"_rabbit\\\"\\na,b=list(map(int,input().split()))\\nc,d=list(map(int,input().split()))\\nprint(max(abs(a-c),abs(b-d)))\\n\", \"a,b=[int(x)for x in input().split()]\\nx,y=[int(x)for x in input().split()]\\nprint(max(abs(a-x),abs(b-y)))\", \"x1, y1 = map(int, input().split())\\nx2, y2 = map(int, input().split())\\nx = abs(x2 - x1)\\ny = abs(y2 - y1)\\nprint(max(x, y))\", \"x1,y1 = map(int,input().split())\\nx2,y2 = map(int,input().split())\\nprint (max(abs(x1-x2), abs(y1-y2)))\", \"3\\n\\n(x1, y1) = input().split()\\n(x1, y1) = (int(x1), int(y1))\\n(x2, y2) = input().split()\\n(x2, y2) = (int(x2), int(y2))\\n\\nprint(max(abs(x1-x2), abs(y1-y2)))\\n\", \"anitonezkousejkontrolovat = input()\\nvidimte = input()\\nzacatek = [int(n) for n in anitonezkousejkontrolovat.split()]\\nkonec = [int(n) for n in vidimte.split()]\\nrozdil1 = abs(zacatek[0]-konec[0])\\nrozdil2 = abs(zacatek[1]-konec[1])\\nprint(max(rozdil1,rozdil2))\\n\\n\", \"from math import *\\n\\ns1 , s2 = input().split()\\n\\nx1 = int(s1)\\ny1 = int(s2)\\n\\ns1 , s2 = input().split()\\n\\nx2 = int(s1)\\ny2 = int(s2)\\n\\n\\n\\n\\nprint( max ( abs(x1-x2) , abs(y1-y2)  ))\\n\", \"a,b=list(map(int,input().split(\\\" \\\")))\\nc,d=list(map(int,input().split(\\\" \\\")))\\nprint(max(abs(a-c),abs(b-d)))\\n\", \"x1,y1 = map(int,input().split())\\nx2,y2 = map(int,input().split())\\nx = abs(x1-x2)\\ny = abs(y1-y2)\\nb = max(x,y)\\nprint(b)\", \"a,b=map(int,input().split())\\nc,d=map(int,input().split())\\nma= max( abs(a-c),abs(b-d))\\nprint(ma)\", \"# -*- coding: utf-8 -*-\\n\\\"\\\"\\\"\\nCreated on Thu Jan 21 14:59:34 2016\\n\\n@author: kebl4230\\n\\\"\\\"\\\"\\nstart = [int(entry) for entry in input().split()]\\nend = [int(entry) for entry in input().split()]\\nx_dist = abs(start[0] - end[0])\\ny_dist = abs(start[1] - end[1])\\nresult = x_dist + y_dist - min(x_dist,y_dist) * (1 if (x_dist > 0 and y_dist > 0) else 0)\\nprint(result)\", \"from sys import stdin as fin\\n\\n# fin = open(\\\"ecr6a.in\\\", \\\"r\\\")\\n\\nx1, y1 = map(int, input().split())\\nx2, y2 = map(int, input().split())\\n\\nsx, sy = abs(x1 - x2), abs(y1 - y2)\\nprint(min(sx, sy) + abs(sx - sy))\", \"#A\\n\\nxi, yi = map(int,input().split())\\nxf, yf = map(int, input().split())\\nxf = abs(xf-xi)\\nyf = abs(yf-yi)\\nsteps = 0\\nif xf == yf:\\n    steps += xf\\nelif xf == 0:\\n    steps += yf\\nelif yf == 0:\\n    steps += xf\\nelse:\\n    reduce = min(xf,yf)\\n    steps += reduce\\n    steps += (max(xf,yf) - reduce)\\nprint(steps)\", \"x1, y1 = list(map(int, input().split()))\\nx2, y2 = list(map(int, input().split()))\\nprint(max(abs(x1 - x2), abs(y1 - y2)))\\n\", \"def __starting_point():\\n    x1, y1 = [int(x) for x in input().split()]\\n    x2, y2 = [int(x) for x in input().split()]\\n\\n    print( max( abs(x1-x2),abs(y1-y2) ) )\\n__starting_point()\", \"(x1,y1)=tuple(input().split())\\n(x2,y2)=tuple(input().split())\\n\\nprint(max(abs(int(x1)-int(x2)),abs(int(y1)-int(y2))))\", \"x1,y1=list(map(int,input().split(\\\" \\\")))\\nx2,y2=list(map(int,input().split(\\\" \\\")))\\n\\nresult1=max(x1,x2)-min(x1,x2)\\nresult2=max(y1,y2)-min(y1,y2)\\n\\nprint(max(result1,result2))\", \"read = lambda: list(map(int, input().split()))\\nx1, y1 = read()\\nx2, y2 = read()\\nprint(max(abs(y1 - y2), abs(x1 - x2)))\\n\", \"import math\\nx1, y1 = map(int, input().split())\\nx2, y2 = map(int, input().split())\\nd = 0\\nxd = math.fabs(x1-x2)\\nyd = math.fabs(y1-y2)\\nd =  int(max(xd ,yd))\\nprint(d)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"0 0\\n4 5\\n\",\n    \"3 4\\n6 1\\n\",\n    \"0 0\\n4 6\\n\",\n    \"1 1\\n-3 -5\\n\",\n    \"-1 -1\\n-10 100\\n\",\n    \"1 -1\\n100 -100\\n\",\n    \"-1000000000 -1000000000\\n1000000000 1000000000\\n\",\n    \"-1000000000 -1000000000\\n0 999999999\\n\",\n    \"0 0\\n2 1\\n\",\n    \"10 0\\n100 0\\n\",\n    \"1 5\\n6 4\\n\",\n    \"0 0\\n5 4\\n\",\n    \"10 1\\n20 1\\n\",\n    \"1 1\\n-3 4\\n\",\n    \"-863407280 504312726\\n786535210 -661703810\\n\",\n    \"-588306085 -741137832\\n341385643 152943311\\n\",\n    \"0 0\\n4 0\\n\",\n    \"93097194 -48405232\\n-716984003 -428596062\\n\",\n    \"9 1\\n1 1\\n\",\n    \"4 6\\n0 4\\n\",\n    \"2 4\\n5 2\\n\",\n    \"-100000000 -100000000\\n100000000 100000123\\n\",\n    \"5 6\\n5 7\\n\",\n    \"12 16\\n12 1\\n\",\n    \"0 0\\n5 1\\n\",\n    \"0 1\\n1 1\\n\",\n    \"-44602634 913365223\\n-572368780 933284951\\n\",\n    \"-2 0\\n2 -2\\n\",\n    \"0 0\\n3 1\\n\",\n    \"-458 2\\n1255 4548\\n\",\n    \"-5 -4\\n-3 -3\\n\",\n    \"4 5\\n7 3\\n\",\n    \"-1000000000 -999999999\\n1000000000 999999998\\n\",\n    \"-1000000000 -1000000000\\n1000000000 -1000000000\\n\",\n    \"-464122675 -898521847\\n656107323 -625340409\\n\",\n    \"-463154699 -654742385\\n-699179052 -789004997\\n\",\n    \"982747270 -593488945\\n342286841 -593604186\\n\",\n    \"-80625246 708958515\\n468950878 574646184\\n\",\n    \"0 0\\n1 0\\n\",\n    \"109810 1\\n2 3\\n\",\n    \"-9 0\\n9 9\\n\",\n    \"9 9\\n9 9\\n\",\n    \"1 1\\n4 3\\n\",\n    \"1 2\\n45 1\\n\",\n    \"207558188 -313753260\\n-211535387 -721675423\\n\",\n    \"-11 0\\n0 0\\n\",\n    \"-1000000000 1000000000\\n1000000000 -1000000000\\n\",\n    \"0 0\\n1 1\\n\",\n    \"0 0\\n0 1\\n\",\n    \"0 0\\n-1 1\\n\",\n    \"0 0\\n-1 0\\n\",\n    \"0 0\\n-1 -1\\n\",\n    \"0 0\\n0 -1\\n\",\n    \"0 0\\n1 -1\\n\",\n    \"10 90\\n90 10\\n\",\n    \"851016864 573579544\\n-761410925 -380746263\\n\",\n    \"1 9\\n9 9\\n\",\n    \"1000 1000\\n1000 1000\\n\",\n    \"1 9\\n9 1\\n\",\n    \"1 90\\n90 90\\n\",\n    \"100 100\\n1000 1000\\n\",\n    \"-1 0\\n0 0\\n\",\n    \"-750595959 -2984043\\n649569876 -749608783\\n\",\n    \"958048496 712083589\\n423286949 810566863\\n\",\n    \"146316710 53945094\\n-523054748 147499505\\n\",\n    \"50383856 -596516251\\n-802950224 -557916272\\n\",\n    \"-637204864 -280290367\\n-119020929 153679771\\n\",\n    \"-100 -100\\n-60 -91\\n\",\n    \"337537326 74909428\\n-765558776 167951547\\n\",\n    \"0 81\\n18 90\\n\",\n    \"283722202 -902633305\\n-831696497 -160868946\\n\",\n    \"1000 1000\\n-1000 1000\\n\",\n    \"5 6\\n4 8\\n\",\n    \"40572000 597493595\\n-935051731 368493185\\n\",\n    \"-5 5\\n5 5\\n\"\n  ],\n  \"outputs\": [\n    \"5\\n\",\n    \"3\\n\",\n    \"6\\n\",\n    \"6\\n\",\n    \"101\\n\",\n    \"99\\n\",\n    \"2000000000\\n\",\n    \"1999999999\\n\",\n    \"2\\n\",\n    \"90\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"10\\n\",\n    \"4\\n\",\n    \"1649942490\\n\",\n    \"929691728\\n\",\n    \"4\\n\",\n    \"810081197\\n\",\n    \"8\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"200000123\\n\",\n    \"1\\n\",\n    \"15\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"527766146\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"4546\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2000000000\\n\",\n    \"2000000000\\n\",\n    \"1120229998\\n\",\n    \"236024353\\n\",\n    \"640460429\\n\",\n    \"549576124\\n\",\n    \"1\\n\",\n    \"109808\\n\",\n    \"18\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"44\\n\",\n    \"419093575\\n\",\n    \"11\\n\",\n    \"2000000000\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"80\\n\",\n    \"1612427789\\n\",\n    \"8\\n\",\n    \"0\\n\",\n    \"8\\n\",\n    \"89\\n\",\n    \"900\\n\",\n    \"1\\n\",\n    \"1400165835\\n\",\n    \"534761547\\n\",\n    \"669371458\\n\",\n    \"853334080\\n\",\n    \"518183935\\n\",\n    \"40\\n\",\n    \"1103096102\\n\",\n    \"18\\n\",\n    \"1115418699\\n\",\n    \"2000\\n\",\n    \"2\\n\",\n    \"975623731\\n\",\n    \"10\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/620/A",
  "starter_code": ""
}