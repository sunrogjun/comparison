{
  "task_id": "APPS/267",
  "problem_id": 267,
  "prompt": "You are given two integers $l$ and $r$ ($l \\le r$). Your task is to calculate the sum of numbers from $l$ to $r$ (including $l$ and $r$) such that each number contains at most $k$ different digits, and print this sum modulo $998244353$.\n\nFor example, if $k = 1$ then you have to calculate all numbers from $l$ to $r$ such that each number is formed using only one digit. For $l = 10, r = 50$ the answer is $11 + 22 + 33 + 44 = 110$.\n\n\n-----Input-----\n\nThe only line of the input contains three integers $l$, $r$ and $k$ ($1 \\le l \\le r < 10^{18}, 1 \\le k \\le 10$) \u2014 the borders of the segment and the maximum number of different digits.\n\n\n-----Output-----\n\nPrint one integer \u2014 the sum of numbers from $l$ to $r$ such that each number contains at most $k$ different digits, modulo $998244353$.\n\n\n-----Examples-----\nInput\n10 50 2\n\nOutput\n1230\n\nInput\n1 2345 10\n\nOutput\n2750685\n\nInput\n101 154 2\n\nOutput\n2189\n\n\n\n-----Note-----\n\nFor the first example the answer is just the sum of numbers from $l$ to $r$ which equals to $\\frac{50 \\cdot 51}{2} - \\frac{9 \\cdot 10}{2} = 1230$. This example also explained in the problem statement but for $k = 1$.\n\nFor the second example the answer is just the sum of numbers from $l$ to $r$ which equals to $\\frac{2345 \\cdot 2346}{2} = 2750685$.\n\nFor the third example the answer is $101 + 110 + 111 + 112 + 113 + 114 + 115 + 116 + 117 + 118 + 119 + 121 + 122 + 131 + 133 + 141 + 144 + 151 = 2189$.",
  "solutions": "[\"\\n\\n\\nl, r, k =list(map(int,input().split()))\\n\\nd = {i:2**i for i in range(10)}\\n\\ncache = {}\\n\\ndef can(i, m):\\n    return d[i] & m\\n\\ndef calc(m):\\n    b = 1\\n    c = 0\\n    for i in range(10):\\n        if b & m:\\n            c += 1\\n        b *= 2\\n\\n    return c\\n\\ndef sm(ln, k, m, s='', first=False):\\n    if ln < 1:\\n        return 0, 1\\n\\n    if (ln, k, m, s, first) in cache:\\n        return cache[(ln, k, m, s, first)]\\n\\n    ans = 0\\n    count = 0\\n    base = 10 ** (ln-1)\\n\\n    use_new = calc(m) < k\\n\\n    if s:\\n        finish = int(s[0])+1\\n    else:\\n        finish = 10\\n\\n    for i in range(finish):\\n        if use_new or can(i, m):\\n            ss = s[1:]\\n            if i != finish-1:\\n                ss = ''\\n            nm = m | d[i]\\n            nfirst = False\\n            if i == 0 and first:\\n                nm = m\\n                nfirst = True\\n            nexta, nextc = sm(ln-1, k, nm, ss, nfirst)\\n            ans += base * i * nextc + nexta\\n            count += nextc\\n\\n#    print(ln, k, m, s, first, ans, count)\\n    cache[(ln, k, m, s, first)] = (ans, count)\\n\\n    return ans, count\\n\\ndef call(a, k):\\n    s = str(a)\\n    return sm(len(s), k, 0, s, True)[0]\\n\\n\\n#print(call(r, k) - call(l-1, k))\\nprint((call(r, k) - call(l-1, k)) % 998244353)\\n\", \"\\nMOD = 998244353\\n\\n\\ndef pop_count(x) :\\n    ans = 0\\n    while (x > 0) :\\n        ans = ans + x % 2\\n        x = x // 2\\n    return ans\\n\\ndef check(x, k) :\\n    mask = 0\\n    nx = int(x)\\n    while (nx > 0) :\\n        mask = mask | (1 << (nx % 10))\\n        nx = nx // 10\\n    if (pop_count(mask) <= k) :\\n        return x\\n    return 0\\n\\npop = []\\np10 = []\\nf = [[0 for j in range(1 << 10)] for i in range(20)]\\nw = [[0 for j in range(1 << 10)] for i in range(20)]\\ndef prepare() : \\n    p10.append(1)\\n    for i in range(20) :\\n        p10.append(p10[i] * 10 % MOD)\\n    for i in range(1 << 10) :\\n        pop.append(pop_count(i))\\n    w[0][0] = 1\\n    for i in range(1, 20) :\\n        for j in range(1 << 10) :\\n            for use in range(10) : \\n                w[i][j | (1 << use)] = (w[i][j | (1 << use)] + w[i - 1][j]) % MOD\\n                f[i][j | (1 << use)] = (f[i][j | (1 << use)] + w[i - 1][j] * use * p10[i - 1] + f[i - 1][j]) % MOD\\n\\ndef solve(x, k) :\\n    sx = [int(d) for d in str(x)] \\n    n = len(sx) \\n    ans = 0\\n    for i in range(1, n) :\\n        for use in range(1, 10) :\\n            for mask in range(1 << 10) : \\n                if (pop[(1 << use) | mask] <= k) :\\n                    ans = (ans + f[i - 1][mask] + use * w[i - 1][mask] % MOD * p10[i - 1]) % MOD\\n    cmask = 0\\n    csum = 0\\n    for i in range(n) :\\n        cdig = sx[i]\\n        for use in range(cdig) : \\n            if (i == 0 and use == 0) :\\n                continue\\n            nmask = cmask | (1 << use)\\n            for mask in range(1 << 10) : \\n                if (pop[nmask | mask] <= k) :\\n                    ans = (ans + f[n - i - 1][mask] + (csum * 10 + use) * w[n - i - 1][mask] % MOD * p10[n - i - 1]) % MOD\\n        cmask |= 1 << cdig\\n        csum = (10 * csum + cdig) % MOD\\n    return ans\\n\\nprepare()\\nl, r, k = list(map(int, input().split()))\\nans = (check(r, k) + solve(r, k) - solve(l, k) + MOD) % MOD\\nprint(ans)\\n    \\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"10 50 2\\n\",\n    \"1 2345 10\\n\",\n    \"101 154 2\\n\",\n    \"427896435961371452 630581697708338740 1\\n\",\n    \"631407936591454868 864125387239952999 1\\n\",\n    \"1395 6977 1\\n\",\n    \"1 999999999999999999 1\\n\",\n    \"99999999999999999 999999999999999999 1\\n\",\n    \"266540997167959147 266540997168158399 1\\n\",\n    \"39103072800020527 149197464503937853 2\\n\",\n    \"150023703387053981 698704065228345187 2\\n\",\n    \"2115 5821 2\\n\",\n    \"1 999999999999999999 2\\n\",\n    \"99999999999999999 999999999999999999 2\\n\",\n    \"267367244641009867 267367244641757963 2\\n\",\n    \"873681750788412714 891185268154312782 3\\n\",\n    \"309910710656928853 892011507037428910 3\\n\",\n    \"4666 8243 3\\n\",\n    \"1 999999999999999999 3\\n\",\n    \"99999999999999999 999999999999999999 3\\n\",\n    \"268193483524125995 268193483524390232 3\\n\",\n    \"409801034949911895 708260424481837606 4\\n\",\n    \"144489384350353745 410627273833028023 4\\n\",\n    \"3510 4371 4\\n\",\n    \"1 999999999999999999 4\\n\",\n    \"99999999999999999 999999999999999999 4\\n\",\n    \"269019726702209419 269019726703022500 4\\n\",\n    \"542839106765197089 928416801745511006 5\\n\",\n    \"929243044923594430 979068062338745932 5\\n\",\n    \"2354 7795 5\\n\",\n    \"1 999999999999999999 5\\n\",\n    \"99999999999999999 999999999999999999 5\\n\",\n    \"269845965585325547 269845965585654768 5\\n\",\n    \"377417784753589277 670404605395885936 6\\n\",\n    \"671230848573969360 813646736032170824 6\\n\",\n    \"1199 1219 6\\n\",\n    \"1 999999999999999999 6\\n\",\n    \"99999999999999999 999999999999999999 6\\n\",\n    \"270672213058376267 270672213059287037 6\\n\",\n    \"189020376486452345 988624421592238351 7\\n\",\n    \"189846615369568473 648225414020563011 7\\n\",\n    \"3147 4644 7\\n\",\n    \"1 999999999999999999 7\\n\",\n    \"99999999999999999 999999999999999999 7\\n\",\n    \"271498451941492395 271498451941727817 7\\n\",\n    \"707636143282051457 823203099580630539 8\\n\",\n    \"259432050859212086 708462382165167585 8\\n\",\n    \"772 1991 8\\n\",\n    \"1 999999999999999999 8\\n\",\n    \"99999999999999999 999999999999999999 8\\n\",\n    \"272324690824608523 272324690825360086 8\\n\",\n    \"226251910077650569 657781773274055430 9\\n\",\n    \"94010733142571570 227078148960766697 9\\n\",\n    \"836 4196 9\\n\",\n    \"1 999999999999999999 9\\n\",\n    \"99999999999999999 999999999999999999 9\\n\",\n    \"273150934002691947 273150934002992354 9\\n\",\n    \"299877849271027626 687486864689028806 10\\n\",\n    \"688313103572144934 736106804844576469 10\\n\",\n    \"2001 3111 10\\n\",\n    \"1 999999999999999999 10\\n\",\n    \"99999999999999999 999999999999999999 10\\n\",\n    \"996517375802030519 996517375802227037 10\\n\",\n    \"999999999999999999 999999999999999999 1\\n\",\n    \"999999999999999999 999999999999999999 10\\n\"\n  ],\n  \"outputs\": [\n    \"1230\\n\",\n    \"2750685\\n\",\n    \"2189\\n\",\n    \"716070897\\n\",\n    \"36080276\\n\",\n    \"22220\\n\",\n    \"983438501\\n\",\n    \"58281903\\n\",\n    \"0\\n\",\n    \"652117623\\n\",\n    \"359774681\\n\",\n    \"953555\\n\",\n    \"5400611\\n\",\n    \"425213690\\n\",\n    \"0\\n\",\n    \"662001527\\n\",\n    \"463439289\\n\",\n    \"11278019\\n\",\n    \"885414096\\n\",\n    \"193997641\\n\",\n    \"0\\n\",\n    \"346722484\\n\",\n    \"315972011\\n\",\n    \"3396711\\n\",\n    \"91933959\\n\",\n    \"538106038\\n\",\n    \"0\\n\",\n    \"922721676\\n\",\n    \"615230478\\n\",\n    \"27615429\\n\",\n    \"787554016\\n\",\n    \"826894420\\n\",\n    \"0\\n\",\n    \"68887051\\n\",\n    \"931406488\\n\",\n    \"25389\\n\",\n    \"662023136\\n\",\n    \"864210218\\n\",\n    \"0\\n\",\n    \"925283456\\n\",\n    \"682259668\\n\",\n    \"5835459\\n\",\n    \"488500709\\n\",\n    \"248180658\\n\",\n    \"476834003\\n\",\n    \"214464109\\n\",\n    \"917376096\\n\",\n    \"1685430\\n\",\n    \"966886744\\n\",\n    \"113971493\\n\",\n    \"980039966\\n\",\n    \"483661761\\n\",\n    \"931911077\\n\",\n    \"8456276\\n\",\n    \"897567189\\n\",\n    \"206378688\\n\",\n    \"863888810\\n\",\n    \"285886436\\n\",\n    \"26341059\\n\",\n    \"2839716\\n\",\n    \"357607302\\n\",\n    \"228265307\\n\",\n    \"795592963\\n\",\n    \"716070897\\n\",\n    \"716070897\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1073/E",
  "starter_code": ""
}