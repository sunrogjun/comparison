{
  "task_id": "APPS/513",
  "problem_id": 513,
  "prompt": "Gerald is very particular to eight point sets. He thinks that any decent eight point set must consist of all pairwise intersections of three distinct integer vertical straight lines and three distinct integer horizontal straight lines, except for the average of these nine points. In other words, there must be three integers x_1, x_2, x_3 and three more integers y_1, y_2, y_3, such that x_1 < x_2 < x_3, y_1 < y_2 < y_3 and the eight point set consists of all points (x_{i}, y_{j}) (1 \u2264 i, j \u2264 3), except for point (x_2, y_2).\n\nYou have a set of eight points. Find out if Gerald can use this set?\n\n\n-----Input-----\n\nThe input consists of eight lines, the i-th line contains two space-separated integers x_{i} and y_{i} (0 \u2264 x_{i}, y_{i} \u2264 10^6). You do not have any other conditions for these points.\n\n\n-----Output-----\n\nIn a single line print word \"respectable\", if the given set of points corresponds to Gerald's decency rules, and \"ugly\" otherwise.\n\n\n-----Examples-----\nInput\n0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2\n\nOutput\nrespectable\n\nInput\n0 0\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n\nOutput\nugly\n\nInput\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n\nOutput\nugly",
  "solutions": "[\"X=[]\\nY=[]\\nPoints=[]\\nk=False\\nfor i in range(8):\\n    x,y=list(map(int,input().split()))\\n    X.append(x)\\n    Y.append(y)\\n    if([x,y] in Points):\\n        k=True\\n    Points.append([x,y])\\nX.sort()\\nY.sort()\\n\\nif(len(set(X))!=3 or len(set(Y))!=3 or k):\\n    print(\\\"ugly\\\")\\n\\nelif(X.count(X[0])!=3 or X.count(X[3])!=2 or X.count(X[5])!=3):\\n    print(\\\"ugly\\\")\\n\\nelif(Y.count(Y[0])!=3 or Y.count(Y[3])!=2 or Y.count(Y[5])!=3):\\n    print(\\\"ugly\\\")\\n\\nelif([X[3],Y[3]] in Points):\\n    print(\\\"ugly\\\")\\n\\nelse:\\n    print(\\\"respectable\\\")\\n\", \"#f = open('data.txt')\\nlists=[]\\ndicts={}\\nsets = set()\\n\\nfor i in range(8):\\n    lists.append(tuple(input().split()))\\n'''for x in f:\\n    lists.append(tuple(x.split()))'''\\nfor x in lists:\\n    sets.add(x)\\n    \\nif len(sets) == 8:\\n    for x in range(8):\\n        count = dicts.get(int(lists[x][0]),0)\\n        dicts[int(lists[x][0])] = count+1\\n\\n    if len(list(dicts.keys()))==3:\\n        temp = sorted(dicts.items())\\n        if temp[0][1]==3 and temp[1][1] == 2 and temp[2][1] ==3:\\n            dicts.clear()\\n            for x in range(8):\\n                count = dicts.get(int(lists[x][1]),0)\\n                dicts[int(lists[x][1])] = count+1\\n            if len(list(dicts.keys()))==3:\\n                temp = sorted(dicts.items())\\n                if temp[0][1]==3 and temp[1][1] == 2 and temp[2][1] ==3:\\n                    print('respectable')\\n                else:\\n                    print('ugly')\\n            else:\\n                print('ugly')\\n        else:\\n            print('ugly')\\n\\n    else:\\n        print('ugly')\\nelse:\\n    print('ugly')\\n\", \"X = dict()\\nY = dict()\\nA = set()\\n\\nfor i in range(8):\\n    x, y = list(map(int, input().split()))\\n\\n    if (x, y) in A:\\n        print('ugly')\\n        return\\n    else:\\n        A.add((x, y))\\n    \\n    if x in X:\\n        X[x] += 1\\n    else:\\n        X[x] = 1\\n\\n    if y in Y:\\n        Y[y] += 1\\n    else:\\n        Y[y] = 1\\n\\nX = [(i, X[i]) for i in X]\\nY = [(i, Y[i]) for i in Y]\\nX.sort()\\nY.sort()\\n\\nif len(X) == 3 and len(Y) == 3 and X[0][1] == 3 and X[1][1] == 2 and X[2][1] == 3 and Y[0][1] == 3 and Y[1][1] == 2 and Y[2][1] == 3:\\n    print('respectable')\\nelse:\\n    print('ugly')\\n\", \"#input = open('input.txt', 'r')\\n#output = open('output.txt', 'w')\\n\\nxx = set()\\nyy = set()\\nl = set()\\nfor i in range(8):\\n    a = list(map(int, input().split()))\\n    x, y = a[0], a[1]\\n    l.add((x, y))\\n    xx.add(x)\\n    yy.add(y)\\n\\nok = 1\\nif (len(xx) != 3) or (len(yy) != 3) or (len(l) != 8): ok = 0\\nelse:\\n    ax = list(xx)\\n    ay = list(yy)\\n    ax.sort()\\n    ay.sort()\\n    if (ax[1], ay[1]) in l: ok = 0\\n\\n\\nif ok == 1:\\n    print('respectable')\\nelse:\\n    print('ugly')\\n    \\n#input.close()\\n#output.close()\\n\", \"class Point:\\n    def __init__(self, x_p, y_p):\\n        self.x = x_p\\n        self.y = y_p\\n        \\n\\npoints = []\\nsub_x = []\\nsub_y = []\\nkey = False\\nfor i in range(8):\\n    x, y = list(map(int, input().split()))\\n    if ([x, y] in points):\\n        key = True\\n    if x not in sub_x:\\n        sub_x.append(x)\\n    if y not in sub_y:\\n        sub_y.append(y)\\n    points.append([x, y])\\nsub_x.sort()\\nsub_y.sort()\\nif (key):\\n    print('ugly')\\nelse:\\n    if (len(sub_x) == 3) and (len(sub_y) == 3):\\n        if ([sub_x[1], sub_y[1]] in points):\\n            print('ugly')\\n        else:\\n            print('respectable')\\n    else:\\n        print('ugly')\\n\", \"from collections import namedtuple\\n\\nPoint = namedtuple('Point', ['x', 'y'])\\nanswers = ['respectable', 'ugly']\\n\\nps = []\\n\\nfor _ in range(8):\\n    x, y = input().split(' ')\\n    ps.append(Point(int(x), int(y)))\\n\\nps.sort()\\n\\ndef parallelline(lA, lB):\\n    pAA, pAB, pAC = lA\\n    pBA, pBB, pBC = lB\\n    if pAA.x == pAB.x and pAA.x == pAC.x:\\n        if pBA.x == pBB.x and pBA.x == pBC.x:\\n            if pAA.y == pBA.y and pAB.y == pBB.y and pAC.y == pBC.y:\\n                if pAA.y != pAB.y and pAA.y != pAC.y:\\n                   return True\\n    if pAA.y == pAB.y and pAA.y == pAC.y:\\n        if pBA.y == pBB.y and pBA.y == pBC.y:\\n            if pAA.x == pBA.x and pAB.x == pBB.x and pAC.x == pBC.x:\\n                if pAA.x != pAB.x and pAA.x != pAC.x:\\n                     return True\\n    return False\\n\\nif parallelline((ps[0], ps[1], ps[2]), (ps[5], ps[6], ps[7])) and parallelline((ps[0], ps[3], ps[5]), (ps[2], ps[4], ps[7])):\\n    print(answers[0])\\nelse:\\n    print(answers[1])\\n\", \"u=set()\\nv=set()\\nw=set()\\ns=set()\\ndef work():\\n    nonlocal u,v\\n    if len(u)<3 or len(v)<3:\\n        return(0)\\n    u = sorted(list(u))\\n    v = sorted(list(v))\\n    for i in range(3):\\n        for j in range(3):\\n            if i!=1 or j!=1:\\n                w.add((u[i],v[j]))\\n    return(w == s)\\n\\nfor i in range(8):\\n    x,y = list(map(int,input().split()))\\n    s.add((x,y))\\n    u.add(x)\\n    v.add(y)\\n    \\nif work():\\n    print(\\\"respectable\\\")\\nelse:\\n    print(\\\"ugly\\\")\\n\", \"inp_arr = [tuple(map(int, input().split())) for i in range(8)]\\nx_set = set()\\ny_set = set()\\nfor x, y in inp_arr:\\n    x_set.add(x)\\n    y_set.add(y)\\n\\nif len(x_set) == len(y_set) == 3:\\n    ugly = False\\n    x_sort, y_sort = sorted(x_set), sorted(y_set)\\n    for x in x_sort:\\n        for y in y_sort:\\n            if (x, y) != (x_sort[1], y_sort[1]) and (x, y) not in inp_arr:\\n                ugly = True\\nelse:\\n    ugly = True\\nprint(\\\"ugly\\\" if ugly else \\\"respectable\\\")\", \"lines = [tuple(map(int,input().split())) for i in range(8)]\\nx_set = set()\\ny_set = set()\\n\\nfor x, y in lines:\\n    x_set.add(x)\\n    y_set.add(y)\\n\\nif len(x_set) == len(y_set) == 3:\\n    flag = False\\n    x_sort, y_sort = sorted(x_set), sorted(y_set)\\n    for x in x_sort:\\n        for y in y_sort:\\n            if(x, y) != (x_sort[1], y_sort[1]) and (x, y)not in lines:\\n                flag = True\\n\\nelse:\\n    flag = True\\n\\nprint(\\\"ugly\\\" if flag else \\\"respectable\\\")\\n\", \"x = []\\ny = []\\nall = []\\nfor i in range(8):\\n\\txx, yy = map(int, input().split())\\n\\tx.append(xx)\\n\\ty.append(yy)\\n\\tall.append((xx, yy))\\nsx = set(x)\\nsy = set(y)\\nif len(sx) % 3 != 0 or len(sy) % 3 != 0:\\n\\tprint('ugly')\\nelse:\\n\\tsx = sorted(list(sx))\\n\\tsy = sorted(list(sy))\\n\\t# print(sx)\\n\\t# print(sy)\\n\\tfor i in range(3):\\n\\t\\tfor j in range(3):\\n\\t\\t\\tif i == 1 and j == 1:\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tif not (sx[i], sy[j]) in all:\\n\\t\\t\\t\\tprint('ugly')\\n\\t\\t\\t\\treturn\\n\\tprint('respectable')\", \"v = []\\nfor i in range(0, 8):\\n    x, y = list(map(int, input().split()))\\n    v.append((x, y))\\n\\nv.sort()\\nif v[0][0] == v[1][0] == v[2][0] and v[3][0] == v[4][0] and v[5][0] == v[6][0] == v[7][0] and v[0][1] == v[3][1] == v[5][1] and v[1][1] == v[6][1] and v[2][1] == v[4][1] == v[7][1] and v[0][0] != v[3][0] != v[7][0] and v[0][1] != v[1][1] != v[2][1]: print('respectable')\\nelse: print('ugly')\\n\", \"\\ndef check():\\n    l = []\\n    for i in range(8):\\n        x, y = list(map(int, input().split()))\\n        l += [[x, y]]\\n\\n    xSet = set()\\n    ySet = set()\\n    for x, y in l:\\n        xSet.add(x)\\n        ySet.add(y)\\n\\n    if len(xSet) != 3 or len(ySet) != 3:\\n        return False\\n\\n    xList = sorted(list(xSet))\\n    yList = sorted(list(ySet))\\n\\n    z = []\\n    for x in xList:\\n        for y in yList:\\n            if x == xList[1] and y == yList[1]:\\n                pass\\n            else:\\n                z += [[x, y]]\\n\\n    z.sort()\\n    l.sort()\\n    return z == l\\n\\n\\nif check():\\n    print(\\\"respectable\\\")\\nelse:\\n    print(\\\"ugly\\\")\\n\", \"x, y = [0] * 8, [0] * 8\\nfor i in range(8): x[i], y[i] = map(int, input().split())\\nfor i in range(8):\\n    for j in range(i):\\n        if x[i] == x[j] and y[i] == y[j]:\\n            print(\\\"ugly\\\")\\n            break\\n    else:\\n        continue\\n    break\\nelse:        \\n    x.sort()\\n    y.sort()\\n    if (x[0] == x[1] == x[2] and x[3] == x[4] and x[5] == x[6] == x[7] and\\n        y[0] == y[1] == y[2] and y[3] == y[4] and y[5] == y[6] == y[7] and\\n        x[2] != x[3] and x[4] != x[5] and y[2] != x[3] and y[4] != x[5]):\\n        print(\\\"respectable\\\")\\n    else: print(\\\"ugly\\\")\", \"l = [[int(c) for c in input().split()] for i in range(8)]\\nxs = sorted(set([p[0] for p in l]))\\nys = sorted(set([p[1] for p in l]))\\nif len(xs) != 3 or len(ys) != 3:\\n    print(\\\"ugly\\\")\\nelse:\\n    done = False\\n    for x in range(3):\\n        for y in range(3):\\n            if x == y == 1: continue\\n            if [xs[x],ys[y]] not in l:\\n                print(\\\"ugly\\\")\\n                done = True\\n                break\\n        if done: break\\n    if not done:\\n        print(\\\"respectable\\\")\", \"v = []\\n\\nfor i in range(0,8):\\n    x, y  = list(map(int, input().split()))\\n    v.append((x,y))\\n\\nv.sort()\\n\\nif v[0][0] == v[1][0] == v[2][0] \\\\\\n    and v[3][0] == v[4][0] \\\\\\n    and v[5][0] == v[6][0] == v[7][0] \\\\\\n    and v[0][1] == v[3][1] == v[5][1] \\\\\\n    and v[1][1] == v[6][1] \\\\\\n    and v[2][1] == v[4][1] == v[7][1] \\\\\\n    and v[0][0] != v[3][0] != v[7][0] \\\\\\n    and v[0][1] != v[1][1] != v[2][1]: \\n        print(\\\"respectable\\\")\\nelse : \\n    print(\\\"ugly\\\")\\n\\n\\n\\n\\n\", \"l = []\\nfor i in range(8):\\n    x, y = [int(x) for x in input().split()]\\n    l.append( (x,y) )\\n\\nl.sort()\\nlx = []\\nlx.append( l[0][0] )\\nlx.append( l[3][0] )\\nlx.append( l[6][0] )\\nly = []\\nly.append( l[0][1] )\\nly.append( l[1][1] )\\nly.append( l[2][1] )\\n\\neps = [(x, y) for x in lx for y in ly]\\neps.pop( 4 )\\n\\nif( l==eps and lx[0]!=lx[1] and lx[0]!=lx[2] and lx[1]!=lx[2]\\n\\tand ly[0]!=ly[1] and ly[0]!=ly[2] and ly[1]!=ly[2]):\\n    print(\\\"respectable\\\")\\nelse:\\n    print(\\\"ugly\\\")\\n\", \"def solve():\\n    S = set()\\n    x = [-1] * 3\\n    y = [-1] * 3\\n    xc = [0] * 3\\n    yc = [0] * 3\\n    i = 0\\n    for i in range(8):\\n        xi, yi = list(map(int, input().split()))\\n        if str([xi, yi]) in S:\\n            return 0\\n        S.add(str([xi, yi]))\\n        j = 0\\n        while j < 3:\\n            if x[j] == -1:\\n                x[j] = xi\\n                xc[j] += 1\\n                break\\n            elif x[j] == xi:\\n                xc[j] += 1\\n                break\\n            j += 1\\n        if j == 3:\\n            return 0\\n        j = 0\\n        while j < 3:\\n            if y[j] == -1:\\n                y[j] = yi\\n                yc[j] += 1\\n                break\\n            elif y[j] == yi:\\n                yc[j] += 1\\n                break\\n            j += 1\\n        if j == 3:\\n            return 0\\n    i = 0\\n    while i < 3:\\n        if xc[i] == 2:\\n            x[i], x[1] = x[1], x[i]\\n            xc[i], xc[1] = xc[1], xc[i]\\n            break\\n        i += 1\\n    if i == 3:\\n        return 0\\n    if xc[0] != 3 or xc[2] != 3:\\n        return 0\\n    if x[0] > x[2]:\\n        x[0], x[2] = x[2], x[0]\\n    if x[0] > x[1] or x[1] > x[2]:\\n        return 0\\n    i = 0\\n    while i < 3:\\n        if yc[i] == 2:\\n            y[i], y[1] = y[1], y[i]\\n            yc[i], yc[1] = yc[1], yc[i]\\n            break\\n        i += 1\\n    if i == 3:\\n        return 0\\n    if yc[0] != 3 or yc[2] != 3:\\n        return 0\\n    if y[0] > y[2]:\\n        y[0], y[2] = y[2], y[0]\\n    if y[0] > y[1] or y[1] > y[2]:\\n        return 0\\n    return 1\\n\\nif solve() == 1:\\n    print('respectable')\\nelse:\\n    print('ugly')\\n\", \"l = []\\nfor i in range(8):\\n    x, y = list(map(int, input().split()))\\n    l.append( (x, y) )\\n\\nl.sort()\\nlx = []\\nlx.append( l[0][0] )\\nlx.append( l[3][0] )\\nlx.append( l[5][0] )\\nly = []\\nly.append( l[0][1] )\\nly.append( l[1][1] )\\nly.append( l[2][1] )\\n\\neps = [(x, y) for x in lx for y in ly]\\neps.pop( 4 )\\n\\nif l == eps and lx[0] != lx[1] and lx[0] != lx[2] and lx[1] != lx[2] and \\\\\\n        ly[0] != ly[1] and ly[0] != ly[2] and ly[1] != ly[2]:\\n    print('respectable')\\nelse:\\n    print('ugly')\\n\", \"pairs = []\\nfor i in range (8):\\n  tmp = list (map (int, input().split()))\\n  pairs.append (tmp)\\npairs.sort ()\\n\\ndef judge ():\\n  return (pairs[0][0] < pairs[3][0] < pairs[5][0] and\\n          pairs[0][1] < pairs[1][1] < pairs[2][1] and\\n          pairs[0][0] == pairs[1][0] == pairs[2][0] and\\n          pairs[3][0] == pairs[4][0] and\\n          pairs[5][0] == pairs[6][0] == pairs[7][0] and\\n          pairs[0][1] == pairs[5][1] and\\n          pairs[1][1] == pairs[6][1] and\\n          pairs[2][1] == pairs[7][1] and\\n          pairs[0][1] == pairs[3][1] and\\n          pairs[2][1] == pairs[4][1])\\n\\nif judge ():\\n  print ('respectable')\\nelse:\\n  print ('ugly')\\n\", \"x=[None]*10\\ny=[None]*10\\nt=[]\\nxc=[]\\nyc=[]\\nf=False\\nfor i in range(8):\\n    x[i],y[i]=list(map(int,input().split()))\\n    if (x[i],y[i])in t: f=True\\n    t.append((x[i],y[i]))\\n    if not(x[i]  in xc): xc.append(x[i])\\n    if y[i] not in yc:yc.append(y[i])\\n            \\n\\n\\nif (len(xc)!=3)or(len(yc)!=3)or f: print('ugly')\\nelse:\\n             yc.sort()\\n             xc.sort()\\n             if (xc[1],yc[1])in t:print('ugly')\\n             else: print('respectable')\\n\", \"def main(temp):\\n\\tnums = []\\n\\tfor item in temp:\\n\\t\\tif item not in nums:\\n\\t\\t\\tnums.append(item)\\n\\t\\telse:\\n\\t\\t\\treturn 'ugly'\\n\\tXs = [item[0] for item in nums]\\n\\tYs = [item[1] for item in nums]\\n\\tXset = list(set(Xs))\\n\\tYset = list(set(Ys))\\n\\n\\tif len(Xset)!=3 or len(Yset)!=3:\\n\\t\\treturn 'ugly'\\n\\n\\tXset.sort()\\n\\tYset.sort()\\n\\n\\ta,b,c = Xs.count(Xset[0]), Xs.count(Xset[1]), Xs.count(Xset[2])\\n\\tq,w,e = Ys.count(Yset[0]), Ys.count(Yset[1]), Ys.count(Yset[2])\\n\\n\\tif a==c==q==e==3 and b==w==2:\\n\\t\\treturn 'respectable'\\n\\telse:\\n\\t\\treturn 'ugly'\\n\\ndef init():\\n\\tnums = []\\n\\tfor i in range(8):\\n\\t\\tnums.append(list(map(int, input().split())))\\n\\n\\tprint(main(nums))\\n\\ninit()\", \"t = [tuple(map(int, input().split())) for i in range(8)]\\nt.sort()\\ns = t[0][0] < t[3][0] < t[5][0] and t[0][1] < t[1][1] < t[2][1] and t[0][0] == t[1][0] == t[2][0] and t[3][0] == t[4][0] and t[5][0] == t[6][0] == t[7][0] and t[0][1] == t[3][1] == t[5][1] and t[1][1] == t[6][1] and t[2][1] == t[4][1] == t[7][1]\\nprint(['ugly','respectable'][s]) \\n\", \"ar = [tuple(map(int, input().split(' '))) for i in range(8)]\\nar.sort()\\nprint('respectable' if ar[0][0]==ar[1][0]==ar[2][0] and ar[3][0]==ar[4][0] and ar[5][0]==ar[6][0]==ar[7][0] and ar[0][1]==ar[3][1]==ar[5][1] and ar[1][1]==ar[6][1] and ar[2][1]==ar[4][1]==ar[7][1] and ar[0][0]<ar[3][0]<ar[5][0] and ar[0][1]<ar[1][1]<ar[2][1] else 'ugly')\\n\", \"d = [{}, {}]\\nt = []\\n\\nfor i in range(8):\\n    x, y = [int(x) for x in input().split()]\\n    if [x, y] in t:\\n        print(\\\"ugly\\\")\\n        return\\n    t.append([x, y])\\n    if x not in d[0]:\\n        d[0][x] = 1\\n    else:\\n        d[0][x] += 1\\n    if y not in d[1]:\\n        d[1][y] = 1\\n    else:\\n        d[1][y] += 1\\n\\nif (len(d[0]) == 3) and (len(d[1]) == 3):\\n    a, b = [], []\\n    for k in sorted(d[0]):\\n        a.append(d[0][k])\\n    for k in sorted(d[1]):\\n        b.append(d[1][k])\\n    if (a == [3, 2, 3]) and (b == [3, 2, 3]):\\n        print(\\\"respectable\\\")\\n    else:\\n        print(\\\"ugly\\\")\\nelse:\\n    print(\\\"ugly\\\")\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n\",\n    \"0 0\\n1 0\\n2 0\\n3 0\\n4 0\\n5 0\\n6 0\\n7 0\\n\",\n    \"1 1\\n1 2\\n1 3\\n2 1\\n2 2\\n2 3\\n3 1\\n3 2\\n\",\n    \"0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n0 0\\n\",\n    \"1000000 1000000\\n1000000 999999\\n1000000 999998\\n999999 1000000\\n999999 999998\\n999998 1000000\\n999998 999999\\n999998 999998\\n\",\n    \"0 0\\n1 0\\n0 1\\n1 1\\n0 2\\n1 2\\n0 3\\n1 3\\n\",\n    \"0 0\\n2 1\\n1 0\\n0 2\\n2 2\\n1 0\\n2 1\\n0 2\\n\",\n    \"0 0\\n2 1\\n1 0\\n0 2\\n2 2\\n1 0\\n2 1\\n0 2\\n\",\n    \"791649 383826\\n10864 260573\\n504506 185571\\n899991 511500\\n503197 876976\\n688727 569035\\n343255 961333\\n439355 759581\\n\",\n    \"750592 335292\\n226387 434036\\n299976 154633\\n593197 600998\\n62014 689355\\n566268 571630\\n381455 222817\\n50555 288617\\n\",\n    \"716334 42808\\n211710 645370\\n515258 96837\\n14392 766713\\n439265 939607\\n430602 918570\\n845044 187545\\n957977 441674\\n\",\n    \"337873 813442\\n995185 863182\\n375545 263618\\n310042 130019\\n358572 560779\\n305725 729179\\n377381 267545\\n41376 312626\\n\",\n    \"803784 428886\\n995691 328351\\n211844 386054\\n375491 74073\\n692402 660275\\n366073 536431\\n485832 941417\\n96032 356022\\n\",\n    \"999231 584954\\n246553 267441\\n697080 920011\\n173593 403511\\n58535 101909\\n131124 924182\\n779830 204560\\n684576 533111\\n\",\n    \"666888 741208\\n685852 578759\\n211123 826453\\n244759 601804\\n670436 748132\\n976425 387060\\n587850 804554\\n430242 805528\\n\",\n    \"71768 834717\\n13140 834717\\n13140 991083\\n880763 386898\\n71768 386898\\n880763 991083\\n880763 834717\\n13140 386898\\n\",\n    \"941532 913025\\n941532 862399\\n686271 913025\\n686271 862399\\n686271 461004\\n941532 461004\\n908398 862399\\n908398 913025\\n\",\n    \"251515 680236\\n761697 669947\\n251515 669947\\n761697 680236\\n251515 476629\\n761697 476629\\n453296 669947\\n453296 476629\\n\",\n    \"612573 554036\\n195039 655769\\n472305 655769\\n612573 655769\\n195039 160740\\n472305 160740\\n472305 554036\\n612573 160740\\n\",\n    \"343395 788566\\n171702 674699\\n171702 788566\\n971214 788566\\n343395 9278\\n971214 9278\\n343395 674699\\n971214 674699\\n\",\n    \"38184 589856\\n281207 447136\\n281207 42438\\n38184 42438\\n38184 447136\\n880488 589856\\n281207 589856\\n880488 42438\\n\",\n    \"337499 89260\\n337499 565883\\n603778 89260\\n603778 565883\\n234246 89260\\n603778 17841\\n337499 17841\\n234246 17841\\n\",\n    \"180952 311537\\n180952 918548\\n126568 918548\\n180952 268810\\n732313 918548\\n126568 311537\\n126568 268810\\n732313 311537\\n\",\n    \"323728 724794\\n265581 165113\\n323728 146453\\n265581 146453\\n591097 146453\\n265581 724794\\n323728 165113\\n591097 165113\\n\",\n    \"642921 597358\\n922979 597358\\n127181 616833\\n642921 828316\\n922979 828316\\n127181 597358\\n922979 616833\\n127181 828316\\n\",\n    \"69586 260253\\n74916 203798\\n985457 203798\\n74916 943932\\n985457 943932\\n69586 943932\\n985457 260253\\n69586 203798\\n\",\n    \"57930 637387\\n883991 573\\n57930 573\\n57930 499963\\n399327 573\\n399327 637387\\n883991 637387\\n883991 499963\\n\",\n    \"52820 216139\\n52820 999248\\n290345 216139\\n290345 999248\\n308639 216139\\n308639 999248\\n52820 477113\\n308639 477113\\n\",\n    \"581646 464672\\n493402 649074\\n581646 649074\\n214619 649074\\n581646 252709\\n214619 252709\\n214619 464672\\n493402 252709\\n\",\n    \"787948 77797\\n421941 615742\\n421941 77797\\n400523 77797\\n400523 111679\\n787948 615742\\n400523 615742\\n787948 111679\\n\",\n    \"583956 366985\\n759621 567609\\n756846 567609\\n759621 176020\\n583956 567609\\n583956 176020\\n759621 366985\\n756846 176020\\n\",\n    \"0 50000\\n0 0\\n0 1000000\\n50000 0\\n50000 1000000\\n1000000 0\\n1000000 50000\\n1000000 1000000\\n\",\n    \"0 8\\n0 9\\n0 10\\n1 8\\n3 8\\n3 8\\n3 9\\n3 10\\n\",\n    \"0 1\\n0 1\\n0 2\\n1 1\\n1 2\\n2 1\\n2 1\\n2 2\\n\",\n    \"1 2\\n1 3\\n1 4\\n2 2\\n2 4\\n4 2\\n4 2\\n4 4\\n\",\n    \"0 0\\n0 1\\n0 2\\n0 0\\n1 2\\n2 0\\n2 1\\n2 2\\n\",\n    \"0 0\\n0 0\\n0 0\\n1 1\\n1 1\\n2 2\\n2 2\\n2 2\\n\",\n    \"0 0\\n0 0\\n0 2\\n1 1\\n1 2\\n2 0\\n2 1\\n2 2\\n\",\n    \"0 0\\n0 1\\n0 3\\n1 0\\n1 3\\n2 0\\n2 2\\n2 3\\n\",\n    \"0 0\\n0 1\\n0 2\\n1 0\\n1 2\\n3 0\\n3 1\\n3 2\\n\",\n    \"1 1\\n1 2\\n1 5\\n2 1\\n2 5\\n5 1\\n5 2\\n5 5\\n\",\n    \"1 1\\n1 2\\n1 2\\n2 3\\n2 1\\n3 3\\n3 1\\n3 3\\n\",\n    \"0 0\\n0 0\\n1 0\\n0 1\\n2 1\\n1 2\\n2 2\\n2 2\\n\",\n    \"1 1\\n1 1\\n1 3\\n2 1\\n2 3\\n3 2\\n3 2\\n3 3\\n\",\n    \"1 0\\n1 0\\n1 0\\n2 3\\n2 3\\n3 4\\n3 4\\n3 4\\n\"\n  ],\n  \"outputs\": [\n    \"respectable\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"respectable\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"respectable\\n\",\n    \"respectable\\n\",\n    \"respectable\\n\",\n    \"respectable\\n\",\n    \"respectable\\n\",\n    \"respectable\\n\",\n    \"respectable\\n\",\n    \"respectable\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"respectable\\n\",\n    \"respectable\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\",\n    \"ugly\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/334/B",
  "starter_code": ""
}