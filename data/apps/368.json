{
  "task_id": "APPS/368",
  "problem_id": 368,
  "prompt": "A and B are preparing themselves for programming contests.\n\nTo train their logical thinking and solve problems better, A and B decided to play chess. During the game A wondered whose position is now stronger.\n\nFor each chess piece we know its weight:   the queen's weight is 9,  the rook's weight is 5,  the bishop's weight is 3,  the knight's weight is 3,  the pawn's weight is 1,  the king's weight isn't considered in evaluating position. \n\nThe player's weight equals to the sum of weights of all his pieces on the board.\n\nAs A doesn't like counting, he asked you to help him determine which player has the larger position weight.\n\n\n-----Input-----\n\nThe input contains eight lines, eight characters each \u2014 the board's description.\n\nThe white pieces on the board are marked with uppercase letters, the black pieces are marked with lowercase letters.\n\nThe white pieces are denoted as follows: the queen is represented is 'Q', the rook \u2014 as 'R', the bishop \u2014 as'B', the knight \u2014 as 'N', the pawn \u2014 as 'P', the king \u2014 as 'K'.\n\nThe black pieces are denoted as 'q', 'r', 'b', 'n', 'p', 'k', respectively.\n\nAn empty square of the board is marked as '.' (a dot). \n\nIt is not guaranteed that the given chess position can be achieved in a real game. Specifically, there can be an arbitrary (possibly zero) number pieces of each type, the king may be under attack and so on.\n\n\n-----Output-----\n\nPrint \"White\" (without quotes) if the weight of the position of the white pieces is more than the weight of the position of the black pieces, print \"Black\" if the weight of the black pieces is more than the weight of the white pieces and print \"Draw\" if the weights of the white and black pieces are equal.\n\n\n-----Examples-----\nInput\n...QK...\n........\n........\n........\n........\n........\n........\n...rk...\n\nOutput\nWhite\n\nInput\nrnbqkbnr\npppppppp\n........\n........\n........\n........\nPPPPPPPP\nRNBQKBNR\n\nOutput\nDraw\n\nInput\nrppppppr\n...k....\n........\n........\n........\n........\nK...Q...\n........\n\nOutput\nBlack\n\n\n\n-----Note-----\n\nIn the first test sample the weight of the position of the white pieces equals to 9, the weight of the position of the black pieces equals 5.\n\nIn the second test sample the weights of the positions of the black and the white pieces are equal to 39.\n\nIn the third test sample the weight of the position of the white pieces equals to 9, the weight of the position of the black pieces equals to 16.",
  "solutions": "[\"a = 0\\nb = 0\\nx = {'Q': 9, 'q':9, 'R':5, 'r':5, 'B':3, 'b':3, 'N':3, 'n':3, 'P': 1, 'p': 1}\\nfor i in range(8):\\n    t = [i for i in input()]\\n    for i in t:\\n        if ord(i) >= 97 and i in x:\\n            a += x[i]\\n        elif i in x:\\n            b += x[i]\\nif a == b:\\n    print(\\\"Draw\\\")\\nelif a < b:\\n    print(\\\"White\\\")\\nelse:\\n    print(\\\"Black\\\")\", \"A = [''] * 8\\nb = 0\\nw = 0\\ndef count(v):\\n    nonlocal w, b\\n    if v == 'Q':\\n        w += 9\\n    elif v == 'R':\\n        w += 5\\n    elif v == 'B':\\n        w += 3\\n    elif v == 'N':\\n        w += 3\\n    elif v == 'P':\\n        w += 1\\n    elif v == 'q':\\n        b += 9\\n    elif v == 'r':\\n        b += 5\\n    elif v == 'b':\\n        b += 3\\n    elif v == 'n':\\n        b += 3\\n    elif v == 'p':\\n        b += 1\\nfor i in range(8):\\n    A[i] = input()\\n    for j in range(8):\\n        count(A[i][j])\\nif b > w:\\n    print(\\\"Black\\\")\\nelif b == w:\\n    print(\\\"Draw\\\")\\nelse:\\n    print(\\\"White\\\")\\n\", \"board = list(input()+input()+input()+input()+input()+input()+input()+input())\\nw = 0\\nb = 0\\nw += 9*board.count('Q')\\nw += 5*board.count('R')\\nw += 3*board.count('N')\\nw += 3*board.count('B')\\nw += board.count('P')\\n\\nb += 9*board.count('q')\\nb += 5*board.count('r')\\nb += 3*board.count('n')\\nb += 3*board.count('b')\\nb += board.count('p')\\n\\nif w > b:\\n    print(\\\"White\\\")\\n\\nelif w == b:\\n    print(\\\"Draw\\\")\\n\\nelse:\\n    print(\\\"Black\\\")\\n\", \"S = dict()\\nS['Q'] = 9\\nS['R'] = 5\\nS['B'] = 3\\nS['N'] = 3\\nS['P'] = 1\\nS['K'] = 0\\nS['q'] = -9\\nS['r'] = -5\\nS['b'] = -3\\nS['n'] = -3\\nS['p'] = -1\\nS['k'] = 0\\n\\nscore = 0\\nfor i in range(8) :\\n    x = input()\\n    for j in x :\\n        if j in S :\\n            score += S[j]\\n\\nif score > 0 :\\n    print(\\\"White\\\")\\nelif score == 0 :\\n    print(\\\"Draw\\\")\\nelse :\\n    print(\\\"Black\\\")\\n\", \"w = 0\\nb = 0\\nfor i in range(8):\\n    st = input()\\n    for j in st:\\n        if j == 'Q':\\n            w+=9\\n        if j == 'R':\\n            w+=5    \\n        if j == 'B':\\n            w+=3                \\n        if j == 'N':\\n            w+=3                    \\n        if j == 'P':\\n            w+=1      \\n        if j == 'q':\\n            b+=9\\n        if j == 'r':\\n            b+=5    \\n        if j == 'b':\\n            b+=3                \\n        if j == 'n':\\n            b+=3                    \\n        if j == 'p':\\n            b+=1      \\nif w > b:\\n    print('White')\\nelif w < b:\\n    print('Black')\\nelse:\\n    print('Draw')\\n\", \"desc = []\\nfor i in range (8):\\n    input_str = input()\\n    desc.append(input_str)\\nw, b = 0, 0\\n\\\"\\\"\\\" \\u0432\\u0435\\u0441 \\u0444\\u0435\\u0440\\u0437\\u044f \\u0440\\u0430\\u0432\\u0435\\u043d 9,\\n\\u0432\\u0435\\u0441 \\u043b\\u0430\\u0434\\u044c\\u0438 \\u0440\\u0430\\u0432\\u0435\\u043d 5,\\n\\u0432\\u0435\\u0441 \\u0441\\u043b\\u043e\\u043d\\u0430 \\u0440\\u0430\\u0432\\u0435\\u043d 3,\\n\\u0432\\u0435\\u0441 \\u043a\\u043e\\u043d\\u044f \\u0440\\u0430\\u0432\\u0435\\u043d 3,\\n\\u0432\\u0435\\u0441 \\u043f\\u0435\\u0448\\u043a\\u0438 \\u0440\\u0430\\u0432\\u0435\\u043d 1, \\\"\\\"\\\"\\nfor i in range (8):\\n    for j in range(8):\\n        if desc[i][j]=='Q':\\n            w += 9\\n        elif desc[i][j]=='q':\\n            b += 9\\n        elif desc[i][j]=='R':\\n            w += 5\\n        elif desc[i][j]=='r':\\n            b += 5\\n        elif desc[i][j]=='B':\\n            w += 3\\n        elif desc[i][j]=='b':\\n            b += 3\\n        elif desc[i][j]=='N':\\n            w += 3\\n        elif desc[i][j]=='n':\\n            b += 3\\n        elif desc[i][j]=='P':\\n            w += 1\\n        elif desc[i][j]=='p':\\n            b += 1\\n        else:\\n            pass\\nif w>b:\\n    print (\\\"White\\\")\\nelif b>w:\\n    print (\\\"Black\\\")\\nelse:\\n    print (\\\"Draw\\\")\\n#\\u0444\\u0435\\u0440\\u0437\\u044c \\u043e\\u0431\\u043e\\u0437\\u043d\\u0430\\u0447\\u0430\\u0435\\u0442\\u0441\\u044f \\u0441\\u0438\\u043c\\u0432\\u043e\\u043b\\u043e\\u043c 'Q', \\u043b\\u0430\\u0434\\u044c\\u044f \\u2014 'R', \\u0441\\u043b\\u043e\\u043d \\u2014 'B', \\u043a\\u043e\\u043d\\u044c \\u2014 'N', \\u043f\\u0435\\u0448\\u043a\\u0430 \\u2014 'P', \\u043a\\u043e\\u0440\\u043e\\u043b\\u044c \\u2014 'K'.\\n\", \"desk = [list(input()) for i in range(8)]\\nC = {'q' : 9, 'r' : 5, 'b' : 3, 'n' : 3, 'p' : 1, 'k' : 0, '.' : 0}\\np1 = 0\\np2 = 0\\nfor x in desk:\\n    for x2 in x:\\n        if x2.isupper():\\n            p2 += C[x2.lower()]\\n        else:\\n            p1 += C[x2]\\nif p1 == p2:\\n    print('Draw')\\nelse:\\n    print('White' if p2 > p1 else 'Black')\\n    \\n\", \"figures = {'q': 9, 'r': 5, 'b': 3, 'n': 3, 'p': 1, 'k': 0}\\n\\nblack_w, white_w = 0, 0\\nfor _ in range(0, 8):\\n    row = input().strip()\\n    for c in row:\\n        if c.lower() in figures:\\n            if c.lower() == c:\\n                black_w += figures[c]\\n            else:\\n                white_w += figures[c.lower()]\\n\\nif black_w == white_w:\\n    print('Draw')\\nelif black_w > white_w:\\n    print('Black')\\nelse:\\n    print('White')\", \"p = {'K': 0, 'Q': 9, 'R': 5, 'B': 3, 'N': 3, 'P': 1, '.': 0}\\nw = [0, 0]\\nfor r in range(8):\\n    for ch in input():\\n        if ch != '.':\\n            w[ch.islower()] += p[ch.upper()]\\nif w[0] == w[1]:\\n    print('Draw')\\nelse:\\n    print('White' if w[0] > w[1] else 'Black')\\n\", \"import sys\\nread = lambda t=int: list(map(t,sys.stdin.readline().split()))\\narray = lambda *ds: [array(*ds[1:]) for _ in range(ds[0])] if ds else 0\\n\\nval = {'q':9,'r':5,'b':3,'n':3,'p':1}\\ns = ''.join(sys.stdin.readline() for _ in range(8))\\nres = 0\\nfor c in s:\\n    if c.islower():\\n        res += val.get(c, 0)\\n    else:\\n        res -= val.get(c.lower(), 0)\\n\\nif res == 0:\\n    print(\\\"Draw\\\")\\nif res < 0:\\n    print(\\\"White\\\")\\nif res > 0:\\n    print(\\\"Black\\\")\\n\", \"def main():\\n    bw = [0, 0]\\n    for _ in range(8):\\n        for c in input():\\n            if c.isalpha():\\n                bw[c.isupper()] += {'Q': 9, 'R': 5, 'B': 3, 'N': 3, 'P': 1, 'K': 0}[c.upper()]\\n    if bw[0] < bw[1]:\\n        print(\\\"White\\\")\\n    elif bw[0] > bw[1]:\\n        print(\\\"Black\\\")\\n    else:\\n        print(\\\"Draw\\\")\\n\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"i=0\\nl=''\\nwhile i<8:\\n    l+=input()\\n    i+=1\\nw=l.count('Q')*9+l.count('R')*5+l.count('B')*3+l.count('N')*3+l.count('P')\\nb=l.count('q')*9+l.count('r')*5+l.count('b')*3+l.count('n')*3+l.count('p')\\nif w>b:\\n    print('White')\\nelif b>w:\\n    print('Black')\\nelse:\\n    print('Draw')\\n        \\n\", \"m = []\\n\\nf = {\\n    '.': 0,\\n    'q': -9,\\n    'r': -5,\\n    'b': -3,\\n    'n': -3,\\n    'p': -1,\\n    'k': 0,\\n    'Q': 9,\\n    'R': 5,\\n    'B': 3,\\n    'N': 3,\\n    'P': 1,\\n    'K': 0,\\n}\\n\\nfor i in range(8):\\n    m.append(list(input()))\\n\\ncnt = 0\\n\\nfor s in m:\\n    for c in s:\\n        if c in f:\\n            cnt += f[c]\\n\\n\\nif cnt > 0:\\n    print('White')\\nelif cnt < 0:\\n    print('Black')\\nelse:\\n    print('Draw')\", \"import sys\\n# sys.stdin = open('in.txt')\\nR = lambda: map(int, input().split())\\n\\nscore={'q':9, 'r':5, 'b':3, 'n':3, 'p':1, 'k':0,\\n       'Q':-9,'R':-5,'B':-3,'N':-3,'P':-1,'K':0, '.':0}\\n\\nsum=0\\nfor _ in range(8):\\n    for c in input():\\n        sum+=score[c]\\n\\nif sum==0:\\n    print(\\\"Draw\\\")\\nelif sum>0:\\n    print(\\\"Black\\\")\\nelse:\\n    print(\\\"White\\\")\", \"r = dict()\\nsb = 0\\nsw = 0\\nr['Q'] = r['q'] = 9\\nr['B'] = r['b'] = 3\\nr['K'] = r['k'] = 0\\nr['N'] = r['n'] = 3\\nr['p'] = r['P'] = 1\\nr['R'] = r['r'] = 5\\n\\ns1 = 'prqkbn'\\ns2 = s1.upper()\\n\\nfor i in range(8):\\n    t = input()\\n    for k in t:\\n        if k in s1:\\n            sb += r[k]\\n        else:\\n            if k in s2:\\n                sw += r[k]\\nif sw == sb:\\n    print('Draw')\\nelif sw > sb:\\n    print('White')\\nelse:\\n    print('Black')\\n\", \"import sys\\nw=0\\nb=0\\nfor i in range(8):\\n  n=list(sys.stdin.readline())\\n  for j in n:\\n    if j=='q':\\n      w=w+9\\n    if j=='Q':\\n      b=b+9\\n    if j=='r':\\n      w=w+5\\n    if j=='R':\\n      b=b+5\\n    if j=='b':\\n      w=w+3\\n    if j=='B':\\n      b=b+3\\n    if j=='n':\\n      w=w+3\\n    if j=='N':\\n      b=b+3\\n    if j=='p':\\n      w=w+1\\n    if j=='P':\\n      b=b+1\\t  \\nif w<b:  print(\\\"White\\\")\\nelif w>b:  print(\\\"Black\\\")\\nelse:  print(\\\"Draw\\\")\", \"w = 0\\nb = 0\\nfor j in range(8):\\n    c = input()\\n    for i in range(8):\\n        if c[i] == 'Q':\\n            w += 9\\n        if c[i] == 'R':\\n            w += 5\\n        if c[i] == 'B' or c[i] == 'N':\\n            w += 3\\n        if c[i] == 'P':\\n            w += 1\\n        if c[i] == 'q':\\n            b += 9\\n        if c[i] == 'r':\\n            b += 5\\n        if c[i] == 'b' or c[i] == 'n':\\n            b += 3\\n        if c[i] == 'p':\\n            b += 1\\nif w > b:\\n    print('White')\\nelif b != w:\\n    print('Black')\\nelse:\\n    print('Draw')\\n\", \"def black(a):\\n    m = 0\\n    for i in a:\\n        i = list(i)\\n        for ii in i:\\n            if ii == \\\"r\\\":\\n                m += 5\\n            if ii == \\\"q\\\":\\n                m += 9\\n            if ii == \\\"b\\\":\\n                m += 3\\n            if ii == \\\"n\\\":\\n                m += 3\\n            if ii == \\\"p\\\":\\n                m += 1\\n            if ii == \\\"k\\\":\\n                m += 0\\n    return m\\ndef white(a):\\n    m = 0\\n    for i in a:\\n        i = list(i)\\n        for ii in i:\\n            if ii == \\\"R\\\":\\n                m += 5\\n            if ii == \\\"Q\\\":\\n                m += 9\\n            if ii == \\\"B\\\":\\n                m += 3\\n            if ii == \\\"N\\\":\\n                m += 3\\n            if ii == \\\"P\\\":\\n                m += 1\\n            if ii == \\\"K\\\":\\n                m += 0\\n    return m\\n\\nb = []\\ni = 0\\nwhile i<8:\\n    a = input()\\n    b.append(a)\\n    i+=1\\nif white(b)>black(b):\\n    print(\\\"White\\\")\\nif black(b)>white(b):\\n    print(\\\"Black\\\")\\nif black(b)==white(b):\\n    print(\\\"Draw\\\")\\n\", \"ws = dict(list(zip(\\\"qrbnp\\\", (9, 5, 3, 3, 1))))\\nwhite = black = 0\\nfor ch in [ch for ch in str.join(\\\"\\\", [input() for _ in range(8)]) if ch.lower() not in \\\".k\\\"]:\\n\\n    if str.isupper(ch):\\n\\n        white += ws[ch.lower()]\\n\\n    else:\\n\\n        black += ws[ch]\\n\\nif black > white:\\n\\n    print(\\\"Black\\\")\\n\\nelif black < white:\\n\\n    print(\\\"White\\\")\\n\\nelse:\\n\\n    print(\\\"Draw\\\")\\n\", \"s = [\\\"\\\"] * 8\\nfor i in range(0,8):\\n\\ts[i] = input()\\nwhite = {}\\nblack = {}\\nwhite['Q'] = 9\\nwhite['R'] = 5\\nwhite['B'] = 3\\nwhite['N'] = 3\\nwhite['P'] = 1\\nwhite['q'] = 0\\nwhite['r'] = 0\\nwhite['b'] = 0\\nwhite['n'] = 0\\nwhite['p'] = 0\\nwhite['.'] = 0\\nwhite['K'] = 0\\nwhite['k'] = 0\\nblack['Q'] = 0\\nblack['R'] = 0\\nblack['B'] = 0\\nblack['N'] = 0\\nblack['P'] = 0\\nblack['q'] = 9\\nblack['r'] = 5\\nblack['b'] = 3\\nblack['n'] = 3\\nblack['p'] = 1\\nblack['.'] = 0\\nblack['K'] = 0\\nblack['k'] = 0\\nw = 0\\nb = 0\\nfor i in range(0,8):\\n\\tfor j in range(0,8):\\n\\t\\tw = w+white[s[i][j]]\\n\\t\\tb = b+black[s[i][j]]\\nif w>b:\\n\\tprint(\\\"White\\\")\\nelif w<b:\\n\\tprint(\\\"Black\\\")\\nelse:\\n\\tprint(\\\"Draw\\\")\", \"# sorry for the source code iam a newbie in Python\\nchess = []\\nfor i in range(8):\\n    chess.append(input())\\ns = 'qrbnpk'\\nw = [9,5,3,3,1,0]\\nD = dict(list(zip(s,w)))\\nD1 = dict(list(zip(s.upper(),w)))\\ndic = dict.fromkeys(s,0)\\ndic2 = dict.fromkeys(s.upper(),1)\\ndic2.update(dic)\\nres = [0,0]\\nfor i in range(8):\\n    for j in range(8):\\n        if chess[i][j] != '.':\\n            res[dic2[chess[i][j]]] += D[chess[i][j].lower()]\\nfirst = res[0]\\nsec = res[1]\\nif first > sec:\\n    print ('Black')\\nelif first == sec:\\n    print ('Draw')\\nelse:\\n    print ('White')\\n\", \"__author__ = 'Krishna'\\n\\nvalues = {'q': 9, 'r': 5, 'b': 3, 'n': 3, 'p': 1, 'k': 0}\\nwhiteStrength = 0\\nblackStrength = 0\\nfor i in range(8):\\n    for piece in input():\\n        if ord('a') <= ord(piece) <= ord('z'):\\n            blackStrength += values.get(piece)\\n        elif ord('A') <= ord(piece) <= ord('Z'):\\n            whiteStrength += values.get(piece.lower())\\nif whiteStrength > blackStrength:\\n    print(\\\"White\\\")\\nelif whiteStrength == blackStrength:\\n    print(\\\"Draw\\\")\\nelse:\\n    print(\\\"Black\\\")\\n\", \"u = 0\\nv = 0\\ndef f(c):\\n    nonlocal u\\n    nonlocal v\\n    if c == 'Q':\\n        u += 9\\n    elif c == 'R':\\n        u += 5\\n    elif c == 'B':\\n        u += 3\\n    elif c == 'N':\\n        u += 3\\n    elif c == 'P':\\n        u += 1\\n    elif c == 'q':\\n        v += 9\\n    elif c == 'r':\\n        v += 5\\n    elif c == 'b':\\n        v += 3\\n    elif c == 'n':\\n        v += 3\\n    elif c == 'p':\\n        v += 1\\n\\nfor i in range(8):\\n    for c in input():\\n        f(c)\\n\\nif u == v:\\n    print('Draw')\\nelif u > v:\\n    print('White')\\nelse:\\n    print('Black')\\n\\n\\n\", \"import string\\n\\nwp, bp = 0, 0\\nfor i in range(8):\\n    inStr = input()\\n    for p in list(inStr):\\n        if not p=='.':\\n            lp = p.lower()\\n            points = {'q':9, 'r':5, 'b':3, 'n':3, 'p':1, 'k':0}[lp]\\n            if not p.islower():\\n                wp = wp + points\\n            else:\\n                bp = bp + points\\n\\nwp > bp and print('White') or wp == bp and print('Draw') or wp < bp and print('Black')\", \"white = { 'Q' : 9, 'R' : 5, 'B' : 3, 'N' : 3, 'P' : 1 , 'K' : 0 }\\nblack = { 'q' : 9, 'r' : 5, 'b' : 3, 'n' : 3, 'p' : 1 , 'k' : 0 }\\n\\nimport string\\n\\nwhite_w = 0\\nblack_w = 0\\n\\nfor i in range(8):\\n    line = input()\\n    for c in line:\\n        if c != '.':\\n            if c in string.ascii_uppercase:\\n                white_w += white[c]\\n            else:\\n                black_w += black[c]\\n\\nif white_w > black_w:\\n    print(\\\"White\\\",end=\\\"\\\")\\nelif white_w < black_w:\\n    print(\\\"Black\\\",end=\\\"\\\")\\nelse:\\n    print(\\\"Draw\\\",end=\\\"\\\")\\n    \\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"...QK...\\n........\\n........\\n........\\n........\\n........\\n........\\n...rk...\\n\",\n    \"rnbqkbnr\\npppppppp\\n........\\n........\\n........\\n........\\nPPPPPPPP\\nRNBQKBNR\\n\",\n    \"rppppppr\\n...k....\\n........\\n........\\n........\\n........\\nK...Q...\\n........\\n\",\n    \"....bQ.K\\n.B......\\n.....P..\\n........\\n........\\n........\\n...N.P..\\n.....R..\\n\",\n    \"b....p..\\nR.......\\n.pP...b.\\npp......\\nq.PPNpPR\\n..K..rNn\\nP.....p.\\n...Q..B.\\n\",\n    \"...Nn...\\n........\\n........\\n........\\n.R....b.\\n........\\n........\\n......p.\\n\",\n    \"...p..Kn\\n.....Pq.\\n.R.rN...\\n...b.PPr\\np....p.P\\n...B....\\np.b.....\\n..N.....\\n\",\n    \"q.......\\nPPPPPPPP\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"q.......\\nPPPPPPPP\\nP.......\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"q.......\\nPPPPPPPP\\nPP......\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"r.......\\nPPPP....\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"r.......\\nPPPPP...\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"r.......\\nPPPPPP..\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"b.......\\nPP......\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"b.......\\nPPP.....\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"b.......\\nPPPP....\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"n.......\\nPP......\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"n.......\\nPPP.....\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"n.......\\nPPPP....\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"Q.......\\npppppppp\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"Q.......\\npppppppp\\np.......\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"Q.......\\npppppppp\\npp......\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"R.......\\npppp....\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"R.......\\nppppp...\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"R.......\\npppppp..\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"B.......\\npp......\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"B.......\\nppp.....\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"B.......\\npppp....\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"N.......\\npp......\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"N.......\\nppp.....\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"N.......\\npppp....\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"qqqqqqqq\\nqqqqqqqq\\nqqqqqqqq\\nqqqqqqqq\\nqqqqqqqq\\nqqqqqqqq\\nqqqqqqqq\\nqqqqqqqq\\n\",\n    \"QQQQQQQQ\\nQQQQQQQQ\\nQQQQQQQQ\\nQQQQQQQQ\\nQQQQQQQQ\\nQQQQQQQQ\\nQQQQQQQQ\\nQQQQQQQQ\\n\",\n    \"qqqqqqqq\\nqqqqqqqq\\nqqqqqqqq\\nqqqqqqqq\\nQQQQQQQQ\\nQQQQQQQQ\\nQQQQQQQQ\\nQQQQQQQQ\\n\",\n    \"..KQBN..\\n........\\n........\\n....q...\\n..p.....\\n....k...\\n........\\n........\\n\",\n    \"..K....Q\\n........\\n....q...\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"KKKKKKK.\\n........\\n........\\n........\\n........\\n........\\n........\\nq.......\\n\",\n    \"QQQQQQQQ\\nQQQQQQQQ\\n........\\n........\\n........\\n........\\nrrrrrr..\\nrrrrrrrr\\n\",\n    \"........\\n........\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"P.......\\n........\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"...b....\\n...np...\\n........\\n........\\n........\\n...N....\\n...B....\\n...R....\\n\",\n    \"........\\n........\\n........\\n........\\n........\\n........\\nNN......\\n........\\n\",\n    \"........\\n........\\n........\\n........\\n........\\n........\\n........\\n.......n\\n\",\n    \"n.......\\nn.......\\nn.......\\nn.......\\nn.......\\nn.......\\nn.......\\nn.......\\n\",\n    \"NNNNNNNN\\nNNNNNNNN\\nNNNNNNNN\\nNNNNNNNN\\nNNNNNNNN\\nNNNNNNNN\\nKk......\\nq.......\\n\",\n    \"........\\nNN......\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"K.......\\n........\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"Q.......\\nkkk.....\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"Kn......\\n........\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"........\\n........\\n........\\n........\\n........\\n........\\n........\\nn.......\\n\",\n    \"KKKKKKKK\\npppppppp\\n........\\n........\\n........\\n........\\n........\\n........\\n\",\n    \"........\\n...b....\\n........\\n........\\n........\\n........\\n........\\n.......K\\n\",\n    \"........\\n........\\n........\\n........\\n........\\n........\\n........\\n......Kp\\n\",\n    \"........\\n........\\n........\\n........\\n........\\n........\\n........\\n.......Q\\n\",\n    \"........\\n........\\n........\\n........\\n........\\n........\\n........\\n......Bp\\n\"\n  ],\n  \"outputs\": [\n    \"White\\n\",\n    \"Draw\\n\",\n    \"Black\\n\",\n    \"White\\n\",\n    \"White\\n\",\n    \"White\\n\",\n    \"Black\\n\",\n    \"Black\\n\",\n    \"Draw\\n\",\n    \"White\\n\",\n    \"Black\\n\",\n    \"Draw\\n\",\n    \"White\\n\",\n    \"Black\\n\",\n    \"Draw\\n\",\n    \"White\\n\",\n    \"Black\\n\",\n    \"Draw\\n\",\n    \"White\\n\",\n    \"White\\n\",\n    \"Draw\\n\",\n    \"Black\\n\",\n    \"White\\n\",\n    \"Draw\\n\",\n    \"Black\\n\",\n    \"White\\n\",\n    \"Draw\\n\",\n    \"Black\\n\",\n    \"White\\n\",\n    \"Draw\\n\",\n    \"Black\\n\",\n    \"Black\\n\",\n    \"White\\n\",\n    \"Draw\\n\",\n    \"White\\n\",\n    \"Draw\\n\",\n    \"Black\\n\",\n    \"White\\n\",\n    \"Draw\\n\",\n    \"White\\n\",\n    \"White\\n\",\n    \"White\\n\",\n    \"Black\\n\",\n    \"Black\\n\",\n    \"White\\n\",\n    \"White\\n\",\n    \"Draw\\n\",\n    \"White\\n\",\n    \"Black\\n\",\n    \"Black\\n\",\n    \"Black\\n\",\n    \"Black\\n\",\n    \"Black\\n\",\n    \"White\\n\",\n    \"White\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/519/A",
  "starter_code": ""
}