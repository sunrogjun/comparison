{
  "task_id": "APPS/94",
  "problem_id": 94,
  "prompt": "Alexander is learning how to convert numbers from the decimal system to any other, however, he doesn't know English letters, so he writes any number only as a decimal number, it means that instead of the letter A he will write the number 10. Thus, by converting the number 475 from decimal to hexadecimal system, he gets 11311 (475 = 1\u00b716^2 + 13\u00b716^1 + 11\u00b716^0). Alexander lived calmly until he tried to convert the number back to the decimal number system.\n\nAlexander remembers that he worked with little numbers so he asks to find the minimum decimal number so that by converting it to the system with the base n he will get the number k.\n\n\n-----Input-----\n\nThe first line contains the integer n (2 \u2264 n \u2264 10^9). The second line contains the integer k (0 \u2264 k < 10^60), it is guaranteed that the number k contains no more than 60 symbols. All digits in the second line are strictly less than n.\n\nAlexander guarantees that the answer exists and does not exceed 10^18.\n\nThe number k doesn't contain leading zeros.\n\n\n-----Output-----\n\nPrint the number x (0 \u2264 x \u2264 10^18)\u00a0\u2014 the answer to the problem.\n\n\n-----Examples-----\nInput\n13\n12\n\nOutput\n12\nInput\n16\n11311\n\nOutput\n475\nInput\n20\n999\n\nOutput\n3789\nInput\n17\n2016\n\nOutput\n594\n\n\n-----Note-----\n\nIn the first example 12 could be obtained by converting two numbers to the system with base 13: 12 = 12\u00b713^0 or 15 = 1\u00b713^1 + 2\u00b713^0.",
  "solutions": "[\"n=int(input())\\ns=input()\\npw=[1]\\nlast=1\\nfor i in range(70):\\n    if (last>1e19):\\n        break\\n    pw.append(last*n)\\n    last=last*n\\ndp=[1e19]*100\\nfor i in range(100):\\n    dp[i]=[1e19]*100\\ndp[len(s)][0]=0\\nfor i in range(len(s),-1,-1):\\n    for power in range(0,len(pw)):\\n        cur=''\\n        for j in range(i-1,-1,-1):\\n            cur=s[j]+cur\\n            if (int(cur)>n or int(cur)*pw[power]>1e19):\\n                break;\\n            if ((cur[0]!='0' or len(cur)==1) and int(cur)<n):\\n                dp[j][power+1]=min(dp[j][power+1],dp[i][power]+int(cur)*pw[power])\\nprint(min(dp[0]))\", \"n = int(input())\\nK = input()\\nm = len(K)\\n\\ninf = 10 ** 100\\n\\ndp = [inf] * (m + 1)\\ndp[0] = 0\\n\\nfor i in range(m):\\n\\tif K[i] == '0':\\n\\t\\tdp[i + 1] = min(dp[i + 1], dp[i] * n + int(K[i]))\\n\\telse:\\n\\t\\tval = 0\\n\\t\\tfor j in range(i, m):\\n\\t\\t\\tval = val * 10 + int(K[j])\\n\\t\\t\\tif val >= n: break\\n\\t\\t\\tdp[j + 1] = min(dp[j + 1], dp[i] * n + val)\\n\\nprint(dp[m])\\n\\n\", \"#!/usr/bin/env python\\n# -*- coding: utf-8 -*-\\n\\nn = int(input())\\nk = int(input())\\n\\narr = []\\nidx = 0\\nwhile k > 0:\\n    while 10 ** idx <= k and k % (10 ** idx) < n:\\n        idx += 1\\n    if k % (10 ** idx) >= n:\\n        idx -= 1\\n    while idx > 1 and k % (10 ** idx) == k % (10 ** (idx - 1)):\\n        idx -= 1\\n    arr.append(k % (10 ** idx))\\n    k //= (10 ** idx)\\n    idx = 0\\nmul = 1\\nsm = 0\\nfor item in arr:\\n    sm += item * mul\\n    mul *= n\\nprint(sm)\\n\", \"n = int(input())\\nk = list(map(int, list(input())))\\nm = len(k)\\nrec = [0] * (m + 1)\\nfor i in range(m):\\n  u = rec[i] * n\\n  if k[i] > 0:\\n    d = 0\\n    for j in range(i, m):\\n      d = d*10 + k[j]\\n      if d >= n: break\\n      if rec[j+1]: rec[j+1] = min(rec[j+1], u+d)\\n      else: rec[j+1] = u+d\\n      #print(d, j+1, rec)\\n  else:    \\n    if rec[i+1]: rec[i+1] = min(rec[i+1], u)\\n    else: rec[i+1] = u\\n    #print(i, rec)\\nprint(rec[-1])\\n\\n\\n\", \"def check(s, n):\\n    ans = 0\\n    if s != \\\"\\\":\\n        ans = int(s)\\n        \\n    return ans < n\\n\\nn = int(input())\\nk = input()\\n\\ns = \\\"\\\"\\ni = len(k) - 1\\n\\nans = 0\\nadd = 1\\nwhile i >= 0:\\n    while i >= 0 and check(k[i] + s, n):\\n        s = k[i] + s\\n        i -= 1\\n    while len(s) > 1 and s[0] == '0':\\n        s = s[1:]\\n        i += 1\\n\\n    \\n    ans += int(s) * add\\n    add *= n\\n    s = \\\"\\\"\\n\\nprint(ans)\", \"import sys\\n\\ndpp = [[0] * 100 for i in range(100)]\\nused = [[0] * 100 for i in range(100)]\\ninf = (1 << 300)\\n\\ndef dp(pos, i):\\n    if pos >= k:\\n        return '0'\\n    hh = n ** i\\n    if pos == k - 1:\\n        return str(int(s[pos]) * hh)\\n    if used[pos][i]:\\n        return dpp[pos][i]\\n    used[pos][i] = 1\\n    temp = s[pos]\\n    ans = inf\\n    best = '999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999'\\n    ctr = pos\\n    while int(temp) < n:\\n        if (temp[0] == '0' and len(temp) > 1):\\n            if ctr == k - 1:\\n                break\\n            ctr += 1\\n            temp = s[ctr] + temp\\n            continue\\n        tt = dp(ctr + 1, i + 1)\\n        gg = str(int(tt) + int(temp) * hh)\\n        if (int(gg) < ans):\\n            ans = int(gg)\\n            best = gg\\n        if ctr == k - 1:\\n            break\\n        ctr += 1\\n        temp = s[ctr] + temp\\n    dpp[pos][i] = best\\n    return best\\n    \\n\\nn = int(input())\\ns = input()[::-1]\\nk = len(s)\\nprint(int(dp(0, 0)))\\n\\n\\n\", \"n = int(input())\\nk = input()\\npos = len(k)\\nans = []\\nwhile pos > 0:\\n    tmp = 0\\n    l = pos-1\\n    mark = l\\n    while l >= 0:\\n        a = int(k[l:pos])\\n        if a >= n:\\n            break\\n        else:\\n            if a != tmp: mark = l\\n            tmp = a\\n            l -= 1\\n            \\n    if tmp == 0:\\n        pos -= 1\\n        ans.append(0)\\n    else:\\n        pos = mark\\n        ans.append(tmp)\\n\\naans = 0\\nfor i in ans[::-1]:\\n    aans = aans*n + i\\n\\nprint(aans)\\n\", \"# I'm feeling greedy\\nbase = int(input())\\nnum = input()\\n\\nresult = 0\\nplace_value = 1\\nend = len(num)\\nwhile end > 0:\\n    begin = end - 1\\n    good_begin = begin\\n    while begin >= 0:\\n        if int(num[begin:end]) >= base:\\n            break\\n        elif num[begin] != '0':\\n            good_begin = begin\\n        begin -= 1\\n    begin = good_begin\\n    result += place_value * int(num[begin:end])\\n    place_value *= base\\n    end = begin\\n\\nprint(result)\\n\", \"base = int(input())\\nnum = input()\\n\\na = 0\\nn = ''\\nl = []\\nsk = len(str(base))\\nwhile num:\\n    nn = num[-sk:]\\n    j = 0\\n    while int(nn) >= base:\\n        j += 1\\n        nn = nn[1:]\\n    while len(nn) > 1 and nn[0] == '0':\\n        j += 1\\n        nn = nn[1:]\\n    l.append(int(nn))\\n    num = num[:-sk+j]\\n    \\np = 1\\nfor n in l:\\n    a += p * n\\n    p *= base\\nprint(a)\\n\", \"def solve(n, k):\\n    dp = [420] * (len(k) + 1)\\n    dp[-1] = 0\\n    idx = len(k) - 1\\n    n_num = int(n)\\n    while idx >= 0:\\n        if k[idx] != '0':\\n            for shift in range(1, len(k) - idx + 1):\\n                ok = int(k[idx:idx+shift]) < n_num\\n                if ok:\\n                    dp[idx] = min(\\n                        dp[idx], 1 + dp[idx+shift]\\n                    )\\n                else:\\n                    break\\n        else:\\n            dp[idx] = 1 + dp[idx+1]\\n        idx -= 1\\n    digits = list()\\n    idx = 0\\n    while idx < len(k):\\n        shift = 1\\n        while idx + shift <= len(k):\\n            if dp[idx+shift]+1 == dp[idx]:\\n                digits.append(int(k[idx:idx+shift]))\\n                break\\n            else:\\n                shift += 1\\n        idx += shift\\n    tot_res, n_pow = 0, 1\\n    for el in reversed(digits):\\n        tot_res += n_pow * el\\n        n_pow *= n_num\\n    return tot_res\\n\\nN = input()\\nK = input()\\nprint(solve(N, K))\\n\", \"n = int(input())\\ns = input()\\n\\nprr = []\\nwhile len(s)>0:\\n    k = 0\\n    for i in range(len(s)-1,-1,-1):\\n        if(s[i]=='0'):\\n            continue\\n        if(int(s[i:])>=n or len(s[i:])>len(str(n))):\\n            k = i+1\\n            while(k<len(s) and s[k]=='0'):\\n                k += 1\\n            if(k==len(s)):\\n                k = len(s)-1\\n            break\\n#    print(k)\\n    prr.append(int(s[k:]))\\n    s = s[:k]\\n#print(prr)\\nsum = 0\\nfor i in range(len(prr)-1, -1, -1):\\n    sum *= n\\n    sum += prr[i]\\n\\nprint(sum)\", \"n = int(input())\\nk = input().strip()\\npower = [1]\\nfor i in range(20):\\n    power.append(power[-1] * 10)\\ndp = [10 ** 18] * len(k)\\nfor i in range(len(k)):\\n    for j in range(min(10, i + 1)):\\n        if k[i - j] == '0' and j > 0:\\n            continue\\n        s = int(k[i - j:i + 1])\\n        if s >= n:\\n            break\\n        if i - j > 0:\\n            dp[i] = min(dp[i], dp[i - j - 1] * n + s)\\n        else:\\n            dp[i] = min(dp[i], s)\\nprint(dp[len(k) - 1])\\n\", \"n=input()\\nl=len(n)\\nn,k=int(n),input()\\nK,d,ans=[],1,0\\nwhile k:\\n    ll=l    \\n    while ll>len(k) or int(k[-ll:])>=n or k[-ll]==\\\"0\\\": \\n        if ll>1: ll-=1\\n        else: break\\n    K+=[int(k[-ll:])];\\n    k=k[:-ll]\\nfor x in K:\\n    ans+=x*d; d=d*n\\nprint(ans)\\n    \\n    \\n    \\n\", \"#n = int(input())\\n#n, m = map(int, input().split())\\nn = input()\\ns = input()\\n#c = list(map(int, input().split()))\\nk = len(n)\\nn = int(n)\\na = []\\ni = len(s) - 1\\nl = 0\\nwhile i - k + 1>= 0:\\n    if int(s[i - k + 1:i + 1]) < n:\\n        z = len(str(int((s[i - k + 1:i + 1]))))\\n        a.append(int(s[i - z + 1:i + 1]))\\n        i -= z\\n    else:\\n        z = len(str(int((s[i - k + 2:i + 1]))))\\n        a.append(int(s[i - z + 1:i + 1]))\\n        i -= z \\nelse:\\n    if i > - 1  and int(s[0:i + 1]) < n :\\n        a.append(int(s[0:i + 1]))\\n        i -= k\\n\\nfor i in range(len(a)):\\n    l += a[i] * (n ** i)\\nprint(min(l, 10**18))\", \"n=int(input())\\n#print(n)\\nd=input()\\nl=len(d)\\ndp=[[0,0] for i in range(0,l+1)]\\ndp[l-1]=[ord(d[l-1])-ord('0'),1]\\nfor i in range(1,l):\\n\\tw=l-1-i;\\n\\tm=(ord(d[w])-ord('0'))*(n**i)+dp[w+1][0]\\n\\tdp[w]=[m,i+1];\\n\\tif (d[w]=='0'):\\n\\t\\tdp[w][0]=dp[w+1][0]\\n\\t\\tdp[w][1]=dp[w+1][1]+1\\n\\t\\tcontinue\\n\\tfor j in range(w,l):\\n\\t\\tsubs=int(d[w:j+1])\\n\\t\\tu=dp[j+1]\\n\\t\\tif subs<n:\\n\\t\\t\\tre=subs*(n**u[1])+u[0]\\n\\t\\t\\tif re<dp[w][0] or (re==dp[w][0] and 1+u[1]<dp[w][1]):\\n\\t\\t\\t\\tdp[w][0]=re\\n\\t\\t\\t\\tdp[w][1]=1+u[1]\\n\\t\\telse:\\n\\t\\t\\tbreak\\nprint(dp[0][0])\\n\", \"def main():\\n    QWE = 'trick'\\n    INF = 10 ** 18 + 9\\n    EPS = 10 ** -7\\n\\n    import sys, math\\n    #fi = open('input.txt', 'r')\\n    #fo = open('output.txt', 'w+')\\n    #fi = open(QWE +\\\".in\\\", \\\"r\\\")\\n    #fo = open(QWE + \\\".out\\\", \\\"w+\\\")\\n    \\n    n = input()\\n    ln = len(n)\\n    n = int(n);\\n    s = input()\\n    m = len(s)\\n    d = [0] * (m + 1)\\n    for i in range(1, m + 1):\\n        d[i] = INF\\n        for j in range(max(1, i - ln), i + 1):\\n            if s[j - 1] != '0' or j == i:\\n                q = int(s[j - 1: i])\\n                if q < n:\\n                    d[i] = min(d[i], d[j - 1] * n + q)\\n    print(d[m])\\n    #print(d)\\n\\nmain()\\n\", \"def getint(a):\\n\\treturn int(''.join(map(str, a)))\\n\\nb = int(input())\\ns = input()\\ns = list(map(int, list(s)))\\n\\nn = len(s)\\n\\nDP = [(-1,0) for i in range(n+1)]\\n\\nfor i in range(n-1, -1, -1):\\n\\tpass\\n\\t# print(\\\"At {}\\\".format(i))\\n\\tfor j in range(i+1, n+1):\\n\\t\\ta = getint(s[i:j])\\n\\t\\tpass\\n\\t\\t# print(a)\\n\\n\\t\\tif(a >= b):\\n\\t\\t\\tbreak\\n\\n\\t\\tif(a > 9):\\n\\t\\t\\tt = DP[j]\\n\\n\\t\\t\\ta = a * (b ** t[1])\\n\\n\\t\\t\\tif(t[0] != -1):\\n\\t\\t\\t\\ta += t[0]\\n\\n\\t\\t\\tp = (a, t[1] + 1)\\n\\n\\t\\t\\tif(DP[i][0] == -1):\\n\\t\\t\\t\\tDP[i] = p\\n\\t\\t\\telse:\\n\\t\\t\\t\\tif(DP[i][0] > p[0]):\\n\\t\\t\\t\\t\\tDP[i] = p\\n\\t\\telse:\\n\\t\\t\\tt = DP[j]\\n\\n\\t\\t\\ta = a * (b ** t[1])\\n\\n\\t\\t\\tif(t[0] != -1):\\n\\t\\t\\t\\ta += t[0]\\n\\n\\t\\t\\tp = (a, t[1] + 1)\\n\\n\\t\\t\\tif(DP[i][0] == -1):\\n\\t\\t\\t\\tDP[i] = p\\n\\t\\t\\telse:\\n\\t\\t\\t\\tif(DP[i][0] > p[0]):\\n\\t\\t\\t\\t\\tDP[i] = p\\n\\tpass\\n\\t# print(\\\"DP {}\\\".format(DP[i]))\\n\\nfor i in range(n):\\n\\tpass\\n\\t# print(DP[i])\\n\\nprint(DP[0][0])\", \"3\\n\\n# BEGIN template\\nimport sys\\nimport re\\nimport pprint\\n\\ndef dbg(x,y=''):\\n  if len(y) > 0: y += ' = '\\n  sys.stderr.write('\\\\n>>> '+y+pprint.pformat(x)+'\\\\n')\\n  sys.stderr.flush()\\n\\noo = 0x3f3f3f3f3f3f3f3f\\n# END template\\n\\ndef minn(x,y):\\n  if x[0] < y[0]: return x\\n  if x[0] > y[0]: return y\\n  if x[1] < y[1]: return x\\n  if x[1] > y[1]: return y\\n  return x\\n\\ndef main():\\n  n = int(input())\\n  s = input()\\n  m = len(s)\\n  s = '0'+s\\n  power = [1]\\n  for i in range(1,61):\\n    power.append(power[i-1]*n)\\n  dp = [(int(1e70),int(1e70))]*65\\n  dp[m+1] = (0,0)\\n  for i in range(m,0,-1):\\n    if s[i] == '0':\\n      tmp = dp[i+1]\\n      dp[i] = (1+tmp[0],tmp[1])\\n      continue\\n    for j in range(i,min(m+1,i+9)):\\n      d = int(s[i:j+1])\\n      if d >= n: break\\n      tmp = dp[j+1]\\n      dp[i] = minn(dp[i],(1+tmp[0],d*power[tmp[0]]+tmp[1]))\\n  print(dp[1][1])\\n\\nmain()\\n\", \"\\nn=0\\nk=\\\"\\\"\\nmem=[[-1 for xx in range(66)] for yy in range(66)]\\n\\ndef go(ind,po):\\n    nonlocal n\\n    nonlocal k\\n    nonlocal mem\\n    if ind>=len(k):\\n        return 0\\n    if mem[ind][po] != -1:\\n        return mem[ind][po]\\n    for i in range(ind,len(k)):\\n        cur=int((k[ind:i+1])[::-1])\\n        if (cur>=n):\\n            break\\n        if (k[i]=='0' and i != ind):\\n            continue\\n        if (mem[ind][po]==-1):\\n            if(go(i+1,po+1)!=-1):\\n                mem[ind][po]=cur*pow(n,po)+go(i+1,po+1)\\n        else:\\n            if(go(i+1,po+1)!=-1):\\n                mem[ind][po]=min(mem[ind][po],cur*pow(n,po)+go(i+1,po+1))\\n    return mem[ind][po]\\n\\nn=int(input())\\nk=input()\\nk=k[::-1]\\n\\nprint(go(0,0))\\n\", \"import math\\n\\ndef binpow(x, y):\\n\\tret = 1\\n\\twhile y > 0:\\n\\t\\tif y % 2 == 1:\\n\\t\\t\\tret *= x\\n\\t\\tx *= x\\n\\t\\ty //= 2\\n\\treturn ret\\n\\n                   \\n\\nn = int(input())\\nk = input()       \\ndp = [[-1 for i in range(100)] for j in range(100)]\\n#dp[i][j] = min(i, j)\\ndp[len(k)][0] = 0;\\ntmp = 0\\nfor i in range(len(k), -1, -1):\\n\\tfor j in range(1, len(k) + 1):\\n\\t\\ttmp = 0\\n\\t\\tfor s in range(i, len(k)):\\n\\t\\t\\ttmp *= 10\\n\\t\\t\\ttmp += (ord(k[s]) - ord('0'));\\n\\t\\t\\tif tmp >= n:\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tif dp[s + 1][j - 1] != -1 and dp[i][j] == -1 or dp[s + 1][j - 1] + tmp * binpow(n, j - 1) < dp[i][j]:\\n\\t\\t\\t\\tdp[i][j] = dp[s + 1][j - 1] + tmp * binpow(n, j - 1); \\t\\t \\n\\t\\t\\tif s == i and k[s] == '0':\\n\\t\\t\\t\\tbreak\\n\\t\\t\\t\\n\\n#print(dp)\\nans = 10 ** 18 + 1\\nfor i in range(1, len(k) + 1):\\n\\tif dp[0][i] != -1:\\n\\t\\tans = min(ans, dp[0][i])\\nprint(ans)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"13\\n12\\n\",\n    \"16\\n11311\\n\",\n    \"20\\n999\\n\",\n    \"17\\n2016\\n\",\n    \"1000\\n1001\\n\",\n    \"1000\\n1000\\n\",\n    \"2\\n110111100000101101101011001110100111011001000000000000000000\\n\",\n    \"500\\n29460456244280453288\\n\",\n    \"1000000000\\n17289468142098080\\n\",\n    \"123\\n7719\\n\",\n    \"25\\n2172214240\\n\",\n    \"2\\n1110110101111000010001011110101001011001110000000010111010\\n\",\n    \"3\\n1210020121011022121222022012121212020\\n\",\n    \"4\\n32323300000100133222012211322\\n\",\n    \"5\\n4230423222300004320404110\\n\",\n    \"6\\n20201051430024130310350\\n\",\n    \"7\\n325503632564034033331\\n\",\n    \"8\\n17073735641412635372\\n\",\n    \"9\\n1733607167155630041\\n\",\n    \"10\\n996517375802030516\\n\",\n    \"11\\n1107835458761401923\\n\",\n    \"20\\n905191218118181710131111\\n\",\n    \"50\\n303521849112318129\\n\",\n    \"100\\n7226127039816418\\n\",\n    \"1000\\n839105509657869885\\n\",\n    \"7501\\n2542549323761022905\\n\",\n    \"10981\\n5149151039259677113\\n\",\n    \"123358\\n458270676485260235\\n\",\n    \"2567853\\n5247911636981396703\\n\",\n    \"56132425\\n3102369282985322\\n\",\n    \"378135456\\n42831383491941211\\n\",\n    \"3\\n110021012201002100122001102110010002\\n\",\n    \"23\\n12007622911918220\\n\",\n    \"456\\n82103391245145170\\n\",\n    \"7897\\n14412516641926184\\n\",\n    \"23156\\n27612518525717145\\n\",\n    \"467879\\n333380108424158040\\n\",\n    \"7982154\\n129530518193255487\\n\",\n    \"21354646\\n47160699363858581\\n\",\n    \"315464878\\n113635473256292967\\n\",\n    \"1000000000\\n17289468142098026\\n\",\n    \"4\\n200002312103012003212121020\\n\",\n    \"46\\n342836241940392925\\n\",\n    \"145\\n357987665524124\\n\",\n    \"1344\\n2498394521019605\\n\",\n    \"57974\\n3619236326439503\\n\",\n    \"215467\\n2082791630100848\\n\",\n    \"7956123\\n6718643712272358\\n\",\n    \"13568864\\n2513398972677784\\n\",\n    \"789765212\\n1039927282755769\\n\",\n    \"1000000000\\n7289468142097485\\n\",\n    \"5\\n22011100004310232330\\n\",\n    \"98\\n11291073236468\\n\",\n    \"364\\n284155255182196\\n\",\n    \"8742\\n111445644633405\\n\",\n    \"11346\\n573275516211238\\n\",\n    \"442020\\n13825031303078\\n\",\n    \"1740798\\n321470190942028\\n\",\n    \"25623752\\n25636131538378\\n\",\n    \"814730652\\n56899767577002\\n\",\n    \"6\\n5543321344052\\n\",\n    \"79\\n9653454753\\n\",\n    \"158\\n25832612364\\n\",\n    \"1675\\n11480678916\\n\",\n    \"12650\\n25380755475\\n\",\n    \"165726\\n465015206\\n\",\n    \"2015054\\n30501583737\\n\",\n    \"98000000\\n19440834812\\n\",\n    \"157137373\\n525141766938\\n\",\n    \"7\\n441214552\\n\",\n    \"294\\n2251151163\\n\",\n    \"2707\\n11341512\\n\",\n    \"76559\\n100147383\\n\",\n    \"124849\\n6172319\\n\",\n    \"7014809\\n73084644\\n\",\n    \"10849219\\n65200749\\n\",\n    \"905835986\\n371320\\n\",\n    \"1000000000\\n69204007\\n\",\n    \"8\\n2670\\n\",\n    \"25\\n71610\\n\",\n    \"1468\\n21107\\n\",\n    \"5723\\n4907\\n\",\n    \"251546\\n7278\\n\",\n    \"9\\n78\\n\",\n    \"13\\n41\\n\",\n    \"34\\n13\\n\",\n    \"45\\n22\\n\",\n    \"67\\n29\\n\",\n    \"130\\n100\\n\",\n    \"2\\n1\\n\",\n    \"4\\n1\\n\",\n    \"9\\n3\\n\",\n    \"13\\n9\\n\",\n    \"3215\\n3\\n\",\n    \"1000000000\\n6\\n\",\n    \"2\\n0\\n\",\n    \"1000000000\\n0\\n\",\n    \"378\\n1378\\n\",\n    \"378\\n380378377\\n\",\n    \"2\\n10000000000000000000000000\\n\",\n    \"2\\n10000000000000000000000000000\\n\",\n    \"2\\n100000000000000000000000\\n\"\n  ],\n  \"outputs\": [\n    \"12\",\n    \"475\",\n    \"3789\",\n    \"594\",\n    \"100001\",\n    \"100000\",\n    \"1000000000000000000\",\n    \"467528530570226788\",\n    \"17289468142098080\",\n    \"9490\",\n    \"26524975\",\n    \"267367244641009850\",\n    \"268193483524125978\",\n    \"269019726702209402\",\n    \"269845965585325530\",\n    \"270672213058376250\",\n    \"271498451941492378\",\n    \"272324690824608506\",\n    \"273150934002691930\",\n    \"996517375802030516\",\n    \"997343614685146644\",\n    \"738505167292405431\",\n    \"59962796634170079\",\n    \"7226127039816418\",\n    \"839105509657869885\",\n    \"805176557484307547\",\n    \"748054672922159638\",\n    \"860152492903254335\",\n    \"346042641011647808\",\n    \"10027171005317597\",\n    \"582652156959951259\",\n    \"68193483524125904\",\n    \"1781911903273803\",\n    \"1621222691867186\",\n    \"6062228032315859\",\n    \"3433598652149101\",\n    \"72980519445207316\",\n    \"82535003403725833\",\n    \"21776150370291089\",\n    \"35848000882710261\",\n    \"17289468142098026\",\n    \"9019726702208584\",\n    \"694167817136539\",\n    \"330396354354854\",\n    \"814487257688093\",\n    \"7079242212325439\",\n    \"966934630351661\",\n    \"4255926011071634\",\n    \"4621032639107192\",\n    \"821298450375293\",\n    \"7289468142097485\",\n    \"45965585242840\",\n    \"10007394522984\",\n    \"4993183241788\",\n    \"74498130012303\",\n    \"83675287784142\",\n    \"26973736400898\",\n    \"99531390411376\",\n    \"65689385274354\",\n    \"46358126945150\",\n    \"12975669536\",\n    \"27953623755\",\n    \"15908078858\",\n    \"8852883441\",\n    \"40587846725\",\n    \"770641106\",\n    \"6147498437\",\n    \"19052834812\",\n    \"82638887763\",\n    \"26508694\",\n    \"72564361\",\n    \"3071250\",\n    \"76682942\",\n    \"7688108\",\n    \"52188307\",\n    \"70296063\",\n    \"371320\",\n    \"69204007\",\n    \"1464\",\n    \"4785\",\n    \"4043\",\n    \"4907\",\n    \"7278\",\n    \"71\",\n    \"53\",\n    \"13\",\n    \"22\",\n    \"29\",\n    \"100\",\n    \"1\",\n    \"1\",\n    \"3\",\n    \"9\",\n    \"3\",\n    \"6\",\n    \"0\",\n    \"0\",\n    \"4992\",\n    \"65568783041\",\n    \"33554432\",\n    \"268435456\",\n    \"8388608\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/758/D",
  "starter_code": ""
}