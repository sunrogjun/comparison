{
  "task_id": "APPS/275",
  "problem_id": 275,
  "prompt": "Piegirl got bored with binary, decimal and other integer based counting systems. Recently she discovered some interesting properties about number $q = \\frac{\\sqrt{5} + 1}{2}$, in particular that q^2 = q + 1, and she thinks it would make a good base for her new unique system. She called it \"golden system\". In golden system the number is a non-empty string containing 0's and 1's as digits. The decimal value of expression a_0a_1...a_{n} equals to $\\sum_{i = 0}^{n} a_{i} \\cdot q^{n - i}$.\n\nSoon Piegirl found out that this system doesn't have same properties that integer base systems do and some operations can not be performed on it. She wasn't able to come up with a fast way of comparing two numbers. She is asking for your help.\n\nGiven two numbers written in golden system notation, determine which of them has larger decimal value.\n\n\n-----Input-----\n\nInput consists of two lines \u2014 one for each number. Each line contains non-empty string consisting of '0' and '1' characters. The length of each string does not exceed 100000.\n\n\n-----Output-----\n\nPrint \">\" if the first number is larger, \"<\" if it is smaller and \"=\" if they are equal.\n\n\n-----Examples-----\nInput\n1000\n111\n\nOutput\n<\n\nInput\n00100\n11\n\nOutput\n=\n\nInput\n110\n101\n\nOutput\n>\n\n\n\n-----Note-----\n\nIn the first example first number equals to $((\\sqrt{5} + 1) / 2)^{3} \\approx 1.618033988^{3} \\approx 4.236$, while second number is approximately 1.618033988^2 + 1.618033988 + 1 \u2248 5.236, which is clearly a bigger number.\n\nIn the second example numbers are equal. Each of them is  \u2248 2.618.",
  "solutions": "[\"u = v = 0\\na, b = input(), input()\\nn, m = len(a), len(b)\\nif n > m: b = '0' * (n - m) + b\\nelse: a = '0' * (m - n) + a\\nfor i in range(max(n, m)):\\n    u, v = v + u, u + int(a[i]) - int(b[i])\\n    if u > 1:\\n        print('>')\\n        return\\n    elif u < -1:\\n        print('<')\\n        return\\nd = 2 * v + u\\nif u == v == 0: print('=')\\nelif u >= 0 and d >= 0: print('>')\\nelif u <= 0 and d <= 0: print('<')\\nelse: print('>' if (u * u > v * (v + u)) ^ (u < 0) else '<')\", \"from itertools import dropwhile, chain\\n\\n\\ndef main():\\n    zeroes = lambda a: not a\\n    a, b = [list(chain([0, 0], dropwhile(zeroes, list(map(int, input())))))\\n            for _ in range(2)]\\n\\n    def tofib(l):\\n        i = 0\\n        while i < len(l) - 1:\\n            if l[i] > 0 and l[i + 1] > 0:\\n                l[i] -= 1\\n                l[i + 1] -= 1\\n                l[i - 1] += 1\\n                i -= 3\\n            i += 1\\n        return l\\n\\n    a = list(dropwhile(zeroes, tofib(a)))\\n    b = list(dropwhile(zeroes, tofib(b)))\\n\\n    if len(a) < len(b):\\n        print('<')\\n        return\\n    if len(a) > len(b):\\n        print('>')\\n        return\\n    for i in range(len(a)):\\n        if a[i] < b[i]:\\n            print('<')\\n            return\\n        if a[i] > b[i]:\\n            print('>')\\n            return\\n    print('=')\\n\\n\\ndef __starting_point():\\n    main()\\n\\n\\n__starting_point()\", \"u = v = 0\\na, b = input(), input()\\nn, m = len(a), len(b)\\nif n > m: b = '0' * (n - m) + b\\nelse: a = '0' * (m - n) + a\\nfor i in range(max(n, m)):\\n    u, v = v + u, u + int(a[i]) - int(b[i])\\n    if u > 1:\\n        print('>')\\n        return\\n    elif u < -1:\\n        print('<')\\n        return\\nd = 2 * v + u\\nif u == v == 0: print('=')\\nelif u >= 0 and d >= 0: print('>')\\nelif u <= 0 and d <= 0: print('<')\\nelse: print('>' if (u * u > v * (v + u)) ^ (u < 0) else '<')\", \"u = v = 0\\n\\na, b = input(), input()\\n\\nn, m = len(a), len(b)\\n\\nif n > m: b = '0' * (n - m) + b\\n\\nelse: a = '0' * (m - n) + a\\n\\nfor i in range(max(n, m)):\\n\\n    u, v = v + u, u + int(a[i]) - int(b[i])\\n\\n    if u > 1:\\n\\n        print('>')\\n\\n        return\\n\\n    elif u < -1:\\n\\n        print('<')\\n\\n        return\\n\\nd = 2 * v + u\\n\\nif u == v == 0: print('=')\\n\\nelif u >= 0 and d >= 0: print('>')\\n\\nelif u <= 0 and d <= 0: print('<')\\n\\nelse: print('>' if (u * u > v * (v + u)) ^ (u < 0) else '<')\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"from sys import stdin\\ns=list(stdin.readline().strip()[::-1])\\ns1=list(stdin.readline().strip()[::-1])\\ndef trans(s):\\n    s.append(\\\"0\\\")\\n    i=len(s)-1\\n    while i>1:\\n        while i>=len(s):\\n            s.append(\\\"0\\\")\\n        if s[i-1]==\\\"1\\\" and s[i-2]==\\\"1\\\":\\n            s[i]=\\\"1\\\"\\n            s[i-1]=\\\"0\\\"\\n            s[i-2]=\\\"0\\\"\\n            i+=2\\n        else:\\n            i-=1\\n    while len(s)>0 and s[-1]==\\\"0\\\":\\n        s.pop()\\n    return s\\ns=trans(s)\\ns1=trans(s1)\\nfor i in range(min(len(s),len(s1))):\\n    if s[i]==s1[i]:\\n        s[i]=\\\"0\\\"\\n        s1[i]=\\\"0\\\"\\nwhile len(s)>0 and s[-1]==\\\"0\\\":\\n    s.pop()\\nwhile len(s1)>0 and s1[-1]==\\\"0\\\":\\n    s1.pop()\\nif len(s)==len(s1):\\n    print(\\\"=\\\")\\nelif(len(s)>len(s1)):\\n    print(\\\">\\\")\\nelse:\\n    print(\\\"<\\\")\\n\", \"def clean(d):\\n    ans = ['0']\\n    for c in list(d):\\n        ans.append(c)\\n        i = len(ans) - 1 #find last index\\n        while i > 1 and ans[i-2]== '0' and ans[i - 1] == '1' and ans[i] == '1':\\n            ans[i - 2] = '1'\\n            ans[i - 1] = '0'\\n            ans[i] = '0'\\n            i -= 2\\n    return ''.join(ans).lstrip('0')\\n\\na = clean(input())\\nb = clean(input())\\n#print(a)\\n#print(b)\\nif a == b:\\n    print('=')\\nelif len(a) > len(b):\\n    print('>')\\nelif len(a) < len(b):\\n    print('<')\\nelif a > b: # now the length are equal\\n    print('>')\\nelse:\\n    print('<')\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"1000\\n111\\n\",\n    \"00100\\n11\\n\",\n    \"110\\n101\\n\",\n    \"0\\n0\\n\",\n    \"1\\n10\\n\",\n    \"11\\n10\\n\",\n    \"00111\\n10100\\n\",\n    \"00\\n1\\n\",\n    \"01\\n010\\n\",\n    \"111\\n00\\n\",\n    \"1100\\n11\\n\",\n    \"0110\\n001\\n\",\n    \"1111\\n0110\\n\",\n    \"01010\\n0011\\n\",\n    \"0\\n1\\n\",\n    \"1\\n0\\n\",\n    \"1\\n1\\n\",\n    \"010000100010100000100010001000001100100010110000101010000010010011001111101101001\\n001011100001110101111001100110001011011100000000100111011010010011010100101011111\\n\",\n    \"11111001000\\n1011100100\\n\",\n    \"1001111010001100001010001010010010100010100011101101110011110101011000010111101100111000110110110010\\n01111001101111100111111001110110100101001111010001000000001001001111100101101100001101111111100111101\\n\",\n    \"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n0\\n\",\n    \"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1\\n\",\n    \"1\\n100000000000000000000000000000000000000000000000000\\n\",\n    \"1\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"11111111111111111111111111111111111111111111111111111111111111111111111111111111\\n1111111111111111111111111111111111111111111111111111111111111111111111111111111\\n\",\n    \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000\\n\",\n    \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n1011111111111111111111111111011011011001101111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n\",\n    \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n\",\n    \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n1011111111111111111111111111011011011001101111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n\",\n    \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n\",\n    \"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n0\\n\",\n    \"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1110\\n\",\n    \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000\\n\",\n    \"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1000\\n\",\n    \"1\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n0\\n\",\n    \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n10000\\n\",\n    \"10000100001000010000100001000010000100001000010000\\n1\\n\",\n    \"101001010101010101010100101010101010101010101001010101010100101010101010100101101010100101010100101010101001010101010101010100101010101010101010101001010101010100101010101010100101101010100101010100101010101001010101010101010100101010101010101010101001010101010100101010101010100101101010100101010100101010\\n1\\n\",\n    \"10100\\n01011\\n\",\n    \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n01111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n0000001010101011\\n\",\n    \"110010010101001001001010100100010101010101011111111111111010101000000000000000000010110111111110101010111111111111111111111111111111111\\n1011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n\",\n    \"1100\\n0111\\n\",\n    \"1111111111111111111111111111111111111111111111111\\n0\\n\",\n    \"1100100101010010010010101001000101010101010111111111111110101010000000000000000000101101111111101010101111111111111111111111111111111\\n1011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n\",\n    \"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n100000000000000000000\\n\",\n    \"100001000010000100001000010000100001000010000100001111111111111111111111111111111111111111111111111111111111111111111111\\n1\\n\",\n    \"11111111111111111111111111111111111111111111111111111111111111\\n1\\n\",\n    \"1011\\n0100\\n\",\n    \"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\\n\",\n    \"1000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000\\n1111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111001\\n000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011\\n\",\n    \"1000000000000000000000000\\n0101010101010101010101011\\n\",\n    \"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n1\\n\",\n    \"101010101010101010101010101010101010101010101010101010101010101010101010\\n1000000000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n0\\n\",\n    \"111\\n1000\\n\",\n    \"1000000000000000000000000000000000000000000000000\\n000\\n\",\n    \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n10\\n\",\n    \"111111111111111111111111111111111111111111111111\\n11\\n\",\n    \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n000\\n\",\n    \"101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010\\n1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"100000000000000000000000000000000000000000000000\\n0\\n\"\n  ],\n  \"outputs\": [\n    \"<\\n\",\n    \"=\\n\",\n    \">\\n\",\n    \"=\\n\",\n    \"<\\n\",\n    \">\\n\",\n    \"<\\n\",\n    \"<\\n\",\n    \"<\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \"<\\n\",\n    \">\\n\",\n    \"=\\n\",\n    \"=\\n\",\n    \">\\n\",\n    \"<\\n\",\n    \">\\n\",\n    \">\\n\",\n    \"<\\n\",\n    \"<\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \"<\\n\",\n    \">\\n\",\n    \"<\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \"<\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \"<\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \"<\\n\",\n    \"<\\n\",\n    \">\\n\",\n    \"=\\n\",\n    \">\\n\",\n    \"<\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\",\n    \">\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/457/A",
  "starter_code": ""
}