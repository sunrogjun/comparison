{
  "task_id": "APPS/115",
  "problem_id": 115,
  "prompt": "The Bad Luck Island is inhabited by three kinds of species: r rocks, s scissors and p papers. At some moments of time two random individuals meet (all pairs of individuals can meet equiprobably), and if they belong to different species, then one individual kills the other one: a rock kills scissors, scissors kill paper, and paper kills a rock. Your task is to determine for each species what is the probability that this species will be the only one to inhabit this island after a long enough period of time.\n\n\n-----Input-----\n\nThe single line contains three integers r, s and p (1 \u2264 r, s, p \u2264 100)\u00a0\u2014 the original number of individuals in the species of rock, scissors and paper, respectively.\n\n\n-----Output-----\n\nPrint three space-separated real numbers: the probabilities, at which the rocks, the scissors and the paper will be the only surviving species, respectively. The answer will be considered correct if the relative or absolute error of each number doesn't exceed 10^{ - 9}.\n\n\n-----Examples-----\nInput\n2 2 2\n\nOutput\n0.333333333333 0.333333333333 0.333333333333\n\nInput\n2 1 2\n\nOutput\n0.150000000000 0.300000000000 0.550000000000\n\nInput\n1 1 3\n\nOutput\n0.057142857143 0.657142857143 0.285714285714",
  "solutions": "[\"r, s, p = list(map(int, input().split()))\\ndp = [[[0] * (p+1) for _ in range(s+1)] for _ in range(r+1)]\\ndp[r][s][p] = 1\\ndef nCk(n, k):\\n    if n <= k:\\n        return 1\\n    res = 1\\n    for i in range(k):\\n        res *= n-i\\n    for i in range(k):\\n        res //= (i+1)\\n    return res\\n\\nC = [nCk(i, 2) for i in range(r+s+p+1)]\\nfor ri in range(r, -1, -1):\\n    for si in range(s, -1, -1):\\n        for pi in range(p, -1, -1):\\n            t = ri * si + si * pi + pi * ri\\n            if t == 0: continue\\n            if ri > 0:\\n                dp[ri-1][si][pi] += dp[ri][si][pi] * ri * pi / t\\n            if si > 0:\\n                dp[ri][si-1][pi] += dp[ri][si][pi] * ri * si / t\\n            if pi > 0:\\n                dp[ri][si][pi-1] += dp[ri][si][pi] * si * pi / t\\n        \\n        \\nr_sum = sum([dp[ri][0][0] for ri in range(r+1)])\\ns_sum = sum([dp[0][si][0] for si in range(s+1)])\\np_sum = sum([dp[0][0][pi] for pi in range(p+1)])\\nprint(r_sum, s_sum, p_sum)\\n\", \"r, s, p = map(int, input().split())\\nn = 101\\ng = lambda i, j, k: i + n * (j + n * k)\\nt = [0] * (n ** 3)\\nfor i in range(1, n):\\n    for j in range(n):\\n        for k in range(n):\\n            l = g(i, j, k)\\n            if j or k:\\n                x, y, z = g(i, j - 1, k), g(i - 1, j, k), g(i, j, k - 1)\\n                a, b, c = i * j, i * k, j * k\\n                t[l] = (a * t[x] + b * t[y] + c * t[z]) / (a + b + c)\\n            else: t[l] = 1\\nx, y, z = g(r, s, p), g(s, p, r), g(p, r, s)\\nprint(t[x], t[y], t[z])\", \"r, s, p = map(int, input().split())\\nn = 101\\nm = n * n\\nt = [0] * n * m\\nfor i in range(1, n):\\n    for j in range(n):\\n        for k in range(n):\\n            d = i + n * j + m * k\\n            a = i * j * t[d - n] + i * k * t[d - 1] + j * k * t[d - m]\\n            b = i * j + i * k + j * k\\n            t[d] = a / b if j or k else 1\\nprint(t[r + n * s + m * p], t[s + n * p + m * r], t[p + n * r + m * s])\", \"r, s, p = [int(x) for x in input().split()]\\ndp = [[[0 for i in range(105)] for j in range(105)] for k in range(105)]\\n\\ndp[r][s][p] = 1\\n\\nfor i in range(r, -1, -1):\\n    for j in range(s, -1, -1):\\n        for k in range(p,-1, -1):\\n\\n            dnr = i * j + j * k + i * k\\n\\n            if i > 0 and j > 0:\\n                dp[i][j - 1][k] += (i * j * dp[i][j][k]) / dnr\\n            if j > 0 and k > 0:\\n                dp[i][j][k - 1] += (j * k * dp[i][j][k]) / dnr\\n            if k > 0 and i > 0:\\n                dp[i - 1][j][k] += (k * i * dp[i][j][k]) / dnr\\n\\nroc, sci, pap = [0] * 3\\n\\nfor i in range(105):\\n    roc += dp[i][0][0]\\n    sci += dp[0][i][0]\\n    pap += dp[0][0][i]\\n\\n\\nprint(roc, sci, pap)\\n            \\n\\n            \\n\", \"r, s, p = [int(x) for x in input().split()]\\ndp = [[[0 for i in range(105)] for j in range(105)] for k in range(105)]\\n \\ndp[r][s][p] = 1\\n \\nfor i in range(r, -1, -1):\\n    for j in range(s, -1, -1):\\n        for k in range(p,-1, -1):\\n \\n            dnr = i * j + j * k + i * k\\n \\n            if i > 0 and j > 0:\\n                dp[i][j - 1][k] += (i * j * dp[i][j][k]) / dnr\\n            if j > 0 and k > 0:\\n                dp[i][j][k - 1] += (j * k * dp[i][j][k]) / dnr\\n            if k > 0 and i > 0:\\n                dp[i - 1][j][k] += (k * i * dp[i][j][k]) / dnr\\n \\nroc, sci, pap = [0] * 3\\n \\nfor i in range(105):\\n    roc += dp[i][0][0]\\n    sci += dp[0][i][0]\\n    pap += dp[0][0][i]\\n \\n \\nprint(roc, sci, pap)\", \"A, B, C = map(lambda x: int(x)+1, input().split())\\nM = max(max(A, B), C)\\np = [[[0] * (M) for i in range(M)] for j in range(M)]\\n\\nfor a in range(M):\\n    for b in range(M):\\n        for c in range(M):\\n            val=0    \\n            if a == 0 or b == 0:\\n                val=0\\n            elif c == 0:\\n                val=1\\n            else:\\n                div = a*b + b*c + c*a\\n                val = (a*b) / div * p[a][b-1][c] + \\\\\\n                      (b*c) / div * p[a][b][c-1] + \\\\\\n                      (a*c) / div * p[a-1][b][c]\\n            \\n            p[a][b][c]=val    \\n            \\nprint(p[A-1][B-1][C-1], p[B-1][C-1][A-1], p[C-1][A-1][B-1])        \"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 2 2\\n\",\n    \"2 1 2\\n\",\n    \"1 1 3\\n\",\n    \"3 2 1\\n\",\n    \"100 100 100\\n\",\n    \"1 100 100\\n\",\n    \"100 1 100\\n\",\n    \"100 100 1\\n\",\n    \"1 100 99\\n\",\n    \"99 1 100\\n\",\n    \"100 99 1\\n\",\n    \"100 1 99\\n\",\n    \"1 99 100\\n\",\n    \"99 100 1\\n\",\n    \"1 1 1\\n\",\n    \"100 100 2\\n\",\n    \"100 2 100\\n\",\n    \"2 100 100\\n\",\n    \"3 3 3\\n\",\n    \"44 54 32\\n\",\n    \"100 90 5\\n\",\n    \"90 5 100\\n\",\n    \"5 100 90\\n\",\n    \"100 5 90\\n\",\n    \"5 90 100\\n\",\n    \"90 100 5\\n\",\n    \"4 4 4\\n\",\n    \"35 38 78\\n\",\n    \"100 98 99\\n\",\n    \"98 100 99\\n\",\n    \"98 99 100\\n\",\n    \"100 99 98\\n\",\n    \"99 100 98\\n\",\n    \"99 98 100\\n\",\n    \"5 5 5\\n\",\n    \"100 100 99\\n\",\n    \"100 99 100\\n\",\n    \"99 100 100\\n\",\n    \"100 99 99\\n\",\n    \"99 100 99\\n\",\n    \"99 99 100\\n\",\n    \"19 18 23\\n\",\n    \"80 80 80\\n\",\n    \"80 80 78\\n\",\n    \"80 80 79\\n\",\n    \"80 80 81\\n\",\n    \"80 78 80\\n\",\n    \"80 79 80\\n\",\n    \"80 81 80\\n\",\n    \"78 80 80\\n\",\n    \"79 80 80\\n\",\n    \"81 80 80\\n\",\n    \"2 1 1\\n\",\n    \"1 2 1\\n\",\n    \"1 1 2\\n\",\n    \"2 2 1\\n\",\n    \"1 2 2\\n\",\n    \"1 2 3\\n\",\n    \"1 3 2\\n\",\n    \"2 3 1\\n\",\n    \"3 1 2\\n\",\n    \"2 1 3\\n\",\n    \"10 2 69\\n\",\n    \"99 99 99\\n\",\n    \"1 100 68\\n\",\n    \"1 100 69\\n\",\n    \"100 68 1\\n\",\n    \"100 69 1\\n\",\n    \"68 1 100\\n\",\n    \"69 1 100\\n\",\n    \"40 100 50\\n\",\n    \"41 100 50\\n\",\n    \"100 50 40\\n\",\n    \"100 50 41\\n\",\n    \"50 40 100\\n\",\n    \"50 41 100\\n\",\n    \"4 3 2\\n\",\n    \"3 3 2\\n\",\n    \"3 2 4\\n\",\n    \"3 2 3\\n\",\n    \"2 4 3\\n\",\n    \"2 3 3\\n\",\n    \"94 62 53\\n\",\n    \"92 42 99\\n\",\n    \"57 88 2\\n\",\n    \"49 85 47\\n\",\n    \"48 16 81\\n\",\n    \"39 96 87\\n\",\n    \"100 91 51\\n\",\n    \"90 92 97\\n\",\n    \"86 25 84\\n\",\n    \"80 1 89\\n\",\n    \"67 95 88\\n\",\n    \"50 93 89\\n\",\n    \"27 71 76\\n\",\n    \"18 47 22\\n\"\n  ],\n  \"outputs\": [\n    \"0.333333333333 0.333333333333 0.333333333333\\n\",\n    \"0.150000000000 0.300000000000 0.550000000000\\n\",\n    \"0.057142857143 0.657142857143 0.285714285714\\n\",\n    \"0.487662337662 0.072077922078 0.440259740260\\n\",\n    \"0.333333333333 0.333333333333 0.333333333333\\n\",\n    \"0.366003713151 0.633996286849 0.000000000000\\n\",\n    \"0.000000000000 0.366003713151 0.633996286849\\n\",\n    \"0.633996286849 0.000000000000 0.366003713151\\n\",\n    \"0.369700913626 0.630299086374 0.000000000000\\n\",\n    \"0.000000000000 0.369700913626 0.630299086374\\n\",\n    \"0.630299086374 0.000000000000 0.369700913626\\n\",\n    \"0.000000000000 0.362287378787 0.637712621213\\n\",\n    \"0.362287378787 0.637712621213 0.000000000000\\n\",\n    \"0.637712621213 0.000000000000 0.362287378787\\n\",\n    \"0.333333333333 0.333333333333 0.333333333333\\n\",\n    \"0.405362332237 0.000000000000 0.594637667763\\n\",\n    \"0.000000000000 0.594637667763 0.405362332237\\n\",\n    \"0.594637667763 0.405362332237 0.000000000000\\n\",\n    \"0.333333333333 0.333333333333 0.333333333333\\n\",\n    \"0.106782618787 0.143399200449 0.749818180764\\n\",\n    \"0.082441556638 0.000000001849 0.917558441513\\n\",\n    \"0.000000001849 0.917558441513 0.082441556638\\n\",\n    \"0.917558441513 0.082441556638 0.000000001849\\n\",\n    \"0.000000005097 0.850289405958 0.149710588945\\n\",\n    \"0.850289405958 0.149710588945 0.000000005097\\n\",\n    \"0.149710588945 0.000000005097 0.850289405958\\n\",\n    \"0.333333333333 0.333333333333 0.333333333333\\n\",\n    \"0.686231300287 0.301686382598 0.012082317115\\n\",\n    \"0.336951942791 0.350590779089 0.312457278120\\n\",\n    \"0.329240307786 0.316221888918 0.354537803296\\n\",\n    \"0.350590779089 0.312457278120 0.336951942791\\n\",\n    \"0.316221888918 0.354537803296 0.329240307786\\n\",\n    \"0.312457278120 0.336951942791 0.350590779089\\n\",\n    \"0.354537803296 0.329240307786 0.316221888918\\n\",\n    \"0.333333333333 0.333333333333 0.333333333333\\n\",\n    \"0.320730423530 0.341631521601 0.337638054869\\n\",\n    \"0.341631521601 0.337638054869 0.320730423530\\n\",\n    \"0.337638054869 0.320730423530 0.341631521601\\n\",\n    \"0.328877908413 0.346125932336 0.324996159251\\n\",\n    \"0.324996159251 0.328877908413 0.346125932336\\n\",\n    \"0.346125932336 0.324996159251 0.328877908413\\n\",\n    \"0.367367874268 0.441556405078 0.191075720654\\n\",\n    \"0.333333333333 0.333333333333 0.333333333333\\n\",\n    \"0.304007530347 0.347995449492 0.347997020160\\n\",\n    \"0.318598848470 0.340767700830 0.340633450700\\n\",\n    \"0.348184483745 0.325727680711 0.326087835544\\n\",\n    \"0.347995449492 0.347997020160 0.304007530347\\n\",\n    \"0.340767700830 0.340633450700 0.318598848470\\n\",\n    \"0.325727680711 0.326087835544 0.348184483745\\n\",\n    \"0.347997020160 0.304007530347 0.347995449492\\n\",\n    \"0.340633450700 0.318598848470 0.340767700830\\n\",\n    \"0.326087835544 0.348184483745 0.325727680711\\n\",\n    \"0.333333333333 0.133333333333 0.533333333333\\n\",\n    \"0.533333333333 0.333333333333 0.133333333333\\n\",\n    \"0.133333333333 0.533333333333 0.333333333333\\n\",\n    \"0.550000000000 0.150000000000 0.300000000000\\n\",\n    \"0.300000000000 0.550000000000 0.150000000000\\n\",\n    \"0.174025974026 0.692207792208 0.133766233766\\n\",\n    \"0.440259740260 0.487662337662 0.072077922078\\n\",\n    \"0.692207792208 0.133766233766 0.174025974026\\n\",\n    \"0.133766233766 0.174025974026 0.692207792208\\n\",\n    \"0.072077922078 0.440259740260 0.487662337662\\n\",\n    \"0.000000000001 0.979592460371 0.020407539628\\n\",\n    \"0.333333333333 0.333333333333 0.333333333333\\n\",\n    \"0.504856156201 0.495143843799 0.000000000000\\n\",\n    \"0.499807252268 0.500192747732 0.000000000000\\n\",\n    \"0.495143843799 0.000000000000 0.504856156201\\n\",\n    \"0.500192747732 0.000000000000 0.499807252268\\n\",\n    \"0.000000000000 0.504856156201 0.495143843799\\n\",\n    \"0.000000000000 0.499807252268 0.500192747732\\n\",\n    \"0.504950275130 0.003137391318 0.491912333552\\n\",\n    \"0.471692521594 0.003711367492 0.524596110914\\n\",\n    \"0.003137391318 0.491912333552 0.504950275130\\n\",\n    \"0.003711367492 0.524596110914 0.471692521594\\n\",\n    \"0.491912333552 0.504950275130 0.003137391318\\n\",\n    \"0.524596110914 0.471692521594 0.003711367492\\n\",\n    \"0.380033049657 0.128974183711 0.490992766632\\n\",\n    \"0.448942486085 0.194141929499 0.356915584416\\n\",\n    \"0.128974183711 0.490992766632 0.380033049657\\n\",\n    \"0.194141929499 0.356915584416 0.448942486085\\n\",\n    \"0.490992766632 0.380033049657 0.128974183711\\n\",\n    \"0.356915584416 0.448942486085 0.194141929499\\n\",\n    \"0.032741579903 0.688734095294 0.278524324802\\n\",\n    \"0.156634527800 0.841252178878 0.002113293322\\n\",\n    \"0.628039075774 0.000000000036 0.371960924190\\n\",\n    \"0.185241468442 0.036259808833 0.778498722726\\n\",\n    \"0.009800033922 0.990059771027 0.000140195051\\n\",\n    \"0.856896275913 0.001822013551 0.141281710536\\n\",\n    \"0.008569274339 0.316910121953 0.674520603708\\n\",\n    \"0.412664975931 0.267301641052 0.320033383016\\n\",\n    \"0.016023421282 0.983316299665 0.000660279053\\n\",\n    \"0.000000000000 0.404923676688 0.595076323312\\n\",\n    \"0.419687207048 0.074718763764 0.505594029188\\n\",\n    \"0.693218455167 0.011706551519 0.295074993314\\n\",\n    \"0.954421631610 0.002613537210 0.042964831180\\n\",\n    \"0.741659614574 0.008276779449 0.250063605977\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/540/D",
  "starter_code": ""
}