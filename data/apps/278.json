{
  "task_id": "APPS/278",
  "problem_id": 278,
  "prompt": "Pavel cooks barbecue. There are n skewers, they lay on a brazier in a row, each on one of n positions. Pavel wants each skewer to be cooked some time in every of n positions in two directions: in the one it was directed originally and in the reversed direction.\n\nPavel has a plan: a permutation p and a sequence b_1, b_2, ..., b_{n}, consisting of zeros and ones. Each second Pavel move skewer on position i to position p_{i}, and if b_{i} equals 1 then he reverses it. So he hope that every skewer will visit every position in both directions.\n\nUnfortunately, not every pair of permutation p and sequence b suits Pavel. What is the minimum total number of elements in the given permutation p and the given sequence b he needs to change so that every skewer will visit each of 2n placements? Note that after changing the permutation should remain a permutation as well.\n\nThere is no problem for Pavel, if some skewer visits some of the placements several times before he ends to cook. In other words, a permutation p and a sequence b suit him if there is an integer k (k \u2265 2n), so that after k seconds each skewer visits each of the 2n placements.\n\nIt can be shown that some suitable pair of permutation p and sequence b exists for any n.\n\n\n-----Input-----\n\nThe first line contain the integer n (1 \u2264 n \u2264 2\u00b710^5)\u00a0\u2014 the number of skewers.\n\nThe second line contains a sequence of integers p_1, p_2, ..., p_{n} (1 \u2264 p_{i} \u2264 n)\u00a0\u2014 the permutation, according to which Pavel wants to move the skewers.\n\nThe third line contains a sequence b_1, b_2, ..., b_{n} consisting of zeros and ones, according to which Pavel wants to reverse the skewers.\n\n\n-----Output-----\n\nPrint single integer\u00a0\u2014 the minimum total number of elements in the given permutation p and the given sequence b he needs to change so that every skewer will visit each of 2n placements.\n\n\n-----Examples-----\nInput\n4\n4 3 2 1\n0 1 1 1\n\nOutput\n2\n\nInput\n3\n2 3 1\n0 0 0\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example Pavel can change the permutation to 4, 3, 1, 2.\n\nIn the second example Pavel can change any element of b to 1.",
  "solutions": "[\"import sys\\n\\nn = int(input())\\np = [int(i) for i in input().split()]\\nb = [int(i) for i in input().split()]\\n\\nans = 0\\nnum_cycles = 0\\nchecked = set()\\n\\nfor i in range(n):\\n    if i in checked:\\n        continue\\n\\n    checked.add(i)\\n\\n    nxt = p[i] - 1\\n\\n    while nxt != i:\\n        checked.add(nxt)\\n        nxt = p[nxt] - 1\\n\\n    num_cycles += 1\\n\\nans += num_cycles if num_cycles != 1 else 0\\nans += (sum(b) % 2) == 0\\n\\nprint(ans)\", \"n = int(input())\\np = [int(i) for i in input().split()]\\nb = [int(i) for i in input().split()]\\nans = 0\\nvisited = [False for i in range(n)]\\nfor i in range(n):\\n    if visited[i]:\\n        continue\\n    ans += 1\\n    while not visited[i]:\\n        visited[i] = True\\n        i = p[i] - 1\\nif ans == 1:\\n    ans = 0\\nans += (sum(b) + 1) % 2\\nprint(ans)\\n\", \"read = lambda: list(map(int, input().split()))\\n\\nn = int(input())\\n\\np = list(read())\\n\\nb = list(read())\\n\\nans = (b.count(1) + 1) % 2\\n\\nwas = [0] * n\\n\\ncnt = 0\\n\\nfor i in range(n):\\n\\n    if not was[i]:\\n\\n        cnt += 1\\n\\n        v = i\\n\\n        while not was[v]:\\n\\n            was[v] = 1\\n\\n            v = p[v] - 1\\n\\nif cnt > 1: ans += cnt\\n\\nprint(ans)\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"import sys\\n \\nn = int(input())\\np = [int(i) for i in input().split()]\\nb = [int(i) for i in input().split()]\\n \\nans = 0\\nnum_cycles = 0\\nchecked = set()\\n \\nfor i in range(n):\\n    if i in checked:\\n        continue\\n \\n    checked.add(i)\\n \\n    nxt = p[i] - 1\\n \\n    while nxt != i:\\n        checked.add(nxt)\\n        nxt = p[nxt] - 1\\n \\n    num_cycles += 1\\n \\nans += num_cycles if num_cycles != 1 else 0\\nans += (sum(b) % 2) == 0\\n \\nprint(ans)\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\nclass Unionfind:\\n    def __init__(self, n):\\n        self.par = [-1]*n\\n        self.rank = [1]*n\\n    \\n    def root(self, x):\\n        p = x\\n        \\n        while not self.par[p]<0:\\n            p = self.par[p]\\n        \\n        while x!=p:\\n            tmp = x\\n            x = self.par[x]\\n            self.par[tmp] = p\\n        \\n        return p\\n    \\n    def unite(self, x, y):\\n        rx, ry = self.root(x), self.root(y)\\n        \\n        if rx==ry: return False\\n        \\n        if self.rank[rx]<self.rank[ry]:\\n            rx, ry = ry, rx\\n        \\n        self.par[rx] += self.par[ry]\\n        self.par[ry] = rx\\n    \\n        if self.rank[rx]==self.rank[ry]:\\n            self.rank[rx] += 1\\n    \\n    def is_same(self, x, y):\\n        return self.root(x)==self.root(y)\\n    \\n    def count(self, x):\\n        return -self.par[self.root(x)]\\n\\nn = int(input())\\np = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\nuf = Unionfind(n)\\n\\nfor i in range(n):\\n    uf.unite(i, p[i]-1)\\n\\nrs = set(uf.root(i) for i in range(n))\\n\\nif len(rs)==1:\\n    ans = 0\\nelse:\\n    ans = len(rs)\\n\\nif b.count(1)%2==0:\\n    ans += 1\\n\\nprint(ans)\", \"n = int(input())\\np = [int(i) for i in input().split()]\\nzeros = [int(i) for i in input().split()]\\n\\nans = 0\\n\\nif not sum(zeros) % 2:\\n    ans += 1\\n\\nvisited = [False for i in range(n)]\\n\\nciclos = 0\\nfor i in range(n):\\n    if not visited[i]:\\n        ciclos += 1\\n    j = i\\n    while not visited[j]:\\n        visited[j] = True\\n        j = p[j] - 1\\n\\nif ciclos == 1:\\n    ans += 0\\nelse:\\n    ans += ciclos\\n\\nprint(ans)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4\\n4 3 2 1\\n0 1 1 1\\n\",\n    \"3\\n2 3 1\\n0 0 0\\n\",\n    \"1\\n1\\n0\\n\",\n    \"2\\n1 2\\n0 0\\n\",\n    \"2\\n2 1\\n0 0\\n\",\n    \"2\\n1 2\\n0 1\\n\",\n    \"2\\n2 1\\n1 0\\n\",\n    \"2\\n1 2\\n1 1\\n\",\n    \"2\\n2 1\\n1 1\\n\",\n    \"5\\n2 1 3 4 5\\n1 0 0 0 1\\n\",\n    \"10\\n4 10 5 1 6 8 9 2 3 7\\n0 1 0 0 1 0 0 1 0 0\\n\",\n    \"20\\n10 15 20 17 8 1 14 6 3 13 19 2 16 12 4 5 11 7 9 18\\n0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0\\n\",\n    \"100\\n87 69 49 86 96 12 10 79 29 66 48 77 73 62 70 52 22 28 97 35 91 5 33 82 65 85 68 80 64 8 38 23 94 34 75 53 57 6 100 2 56 50 55 58 74 9 18 44 40 3 43 45 99 51 21 92 89 36 88 54 42 14 78 71 25 76 13 11 27 72 7 32 93 46 83 30 26 37 39 31 95 59 47 24 67 16 4 15 1 98 19 81 84 61 90 41 17 20 63 60\\n1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"1\\n1\\n1\\n\",\n    \"2\\n1 2\\n1 0\\n\",\n    \"2\\n2 1\\n0 1\\n\",\n    \"3\\n1 2 3\\n0 0 0\\n\",\n    \"3\\n1 2 3\\n1 0 0\\n\",\n    \"3\\n1 2 3\\n0 1 0\\n\",\n    \"3\\n1 2 3\\n1 1 0\\n\",\n    \"3\\n1 2 3\\n0 0 1\\n\",\n    \"3\\n1 2 3\\n1 0 1\\n\",\n    \"3\\n1 2 3\\n0 1 1\\n\",\n    \"3\\n1 2 3\\n1 1 1\\n\",\n    \"3\\n1 3 2\\n0 0 0\\n\",\n    \"3\\n1 3 2\\n1 0 0\\n\",\n    \"3\\n1 3 2\\n0 1 0\\n\",\n    \"3\\n1 3 2\\n1 1 0\\n\",\n    \"3\\n1 3 2\\n0 0 1\\n\",\n    \"3\\n1 3 2\\n1 0 1\\n\",\n    \"3\\n1 3 2\\n0 1 1\\n\",\n    \"3\\n1 3 2\\n1 1 1\\n\",\n    \"3\\n2 1 3\\n0 0 0\\n\",\n    \"3\\n2 1 3\\n1 0 0\\n\",\n    \"3\\n2 1 3\\n0 1 0\\n\",\n    \"3\\n2 1 3\\n1 1 0\\n\",\n    \"3\\n2 1 3\\n0 0 1\\n\",\n    \"3\\n2 1 3\\n1 0 1\\n\",\n    \"3\\n2 1 3\\n0 1 1\\n\",\n    \"3\\n2 1 3\\n1 1 1\\n\",\n    \"3\\n2 3 1\\n0 0 0\\n\",\n    \"3\\n2 3 1\\n1 0 0\\n\",\n    \"3\\n2 3 1\\n0 1 0\\n\",\n    \"3\\n2 3 1\\n1 1 0\\n\",\n    \"3\\n2 3 1\\n0 0 1\\n\",\n    \"3\\n2 3 1\\n1 0 1\\n\",\n    \"3\\n2 3 1\\n0 1 1\\n\",\n    \"3\\n2 3 1\\n1 1 1\\n\",\n    \"3\\n3 1 2\\n0 0 0\\n\",\n    \"3\\n3 1 2\\n1 0 0\\n\",\n    \"3\\n3 1 2\\n0 1 0\\n\",\n    \"3\\n3 1 2\\n1 1 0\\n\",\n    \"3\\n3 1 2\\n0 0 1\\n\",\n    \"3\\n3 1 2\\n1 0 1\\n\",\n    \"3\\n3 1 2\\n0 1 1\\n\",\n    \"3\\n3 1 2\\n1 1 1\\n\",\n    \"3\\n3 2 1\\n0 0 0\\n\",\n    \"3\\n3 2 1\\n1 0 0\\n\",\n    \"3\\n3 2 1\\n0 1 0\\n\",\n    \"3\\n3 2 1\\n1 1 0\\n\",\n    \"3\\n3 2 1\\n0 0 1\\n\",\n    \"3\\n3 2 1\\n1 0 1\\n\",\n    \"3\\n3 2 1\\n0 1 1\\n\",\n    \"3\\n3 2 1\\n1 1 1\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"2\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/756/A",
  "starter_code": ""
}