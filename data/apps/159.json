{
  "task_id": "APPS/159",
  "problem_id": 159,
  "prompt": "You are given an array of n elements, you must make it a co-prime array in as few moves as possible.\n\nIn each move you can insert any positive integral number you want not greater than 10^9 in any place in the array.\n\nAn array is co-prime if any two adjacent numbers of it are co-prime.\n\nIn the number theory, two integers a and b are said to be co-prime if the only positive integer that divides both of them is 1.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 1000) \u2014 the number of elements in the given array.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9) \u2014 the elements of the array a.\n\n\n-----Output-----\n\nPrint integer k on the first line \u2014 the least number of elements needed to add to the array a to make it co-prime.\n\nThe second line should contain n + k integers a_{j} \u2014 the elements of the array a after adding k elements to it. Note that the new array should be co-prime, so any two adjacent values should be co-prime. Also the new array should be got from the original array a by adding k elements to it.\n\nIf there are multiple answers you can print any one of them.\n\n\n-----Example-----\nInput\n3\n2 7 28\n\nOutput\n1\n2 7 9 28",
  "solutions": "[\"import fractions\\n\\nn = int(input())\\nA = [int(x) for x in input().split()]\\nB = []\\nfor i in range(n-1):\\n    B.append(A[i])\\n    if fractions.gcd(A[i], A[i+1]) != 1:\\n        B.append(1)\\nB.append(A[-1])\\nprint(len(B) - n)\\nprint(' '.join(map(str, B)))\\n\\n\\n\", \"from fractions import gcd\\n\\nn = int(input())\\na = list(map(int, input().split()))\\nprev = a[0]\\nk = 0\\nfor c in a[1:]:\\n    if gcd(prev, c) != 1:\\n        k += 1\\n    prev = c\\nprint(k)\\nprev = a[0]\\nfor c in a[1:]:\\n    print(prev, end=' ')\\n    if gcd(prev, c) != 1:\\n        print(1, end=' ')\\n    prev = c\\nprint(prev)\\n\", \"#!/usr/bin/env python3\\n\\nfrom fractions import gcd\\n\\ntry:\\n    while True:\\n        n = int(input())\\n        a = list(map(int, input().split()))\\n        result = [a[0]]\\n        for x in a[1:]:\\n            if gcd(x, result[-1]) != 1:\\n                result.append(1)\\n            result.append(x)\\n        print(len(result) - len(a))\\n        print(' '.join(map(str, result)))\\n\\nexcept EOFError:\\n    pass\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nc = 0\\ni = 0\\nwhile i < n - 1:\\n    x = a[i]\\n    y = a[i + 1]\\n    while y > 0:\\n        x, y = y, x % y\\n    if x > 1:\\n        a = a[:i + 1] + [1] + a[i + 1:]\\n        i += 2\\n        c += 1\\n        n += 1\\n    else:\\n        i += 1\\nprint(c)\\nprint(*a)\", \"from fractions import gcd\\n\\n\\ndef is_co_prime(x, y):\\n    return gcd(x, y) != 1\\n\\n\\ndef solve():\\n    N = int(input())\\n    L = list(map(int, input().split()))\\n\\n    ans = [str(L[0])]\\n\\n    x = 0\\n    for i in range(1, N):\\n        if is_co_prime(L[i], L[i - 1]):\\n            x += 1\\n            ans.append('1')\\n        ans.append(str(L[i]))\\n\\n    print(x)\\n    print(' '.join(ans))\\n\\n\\ndef __starting_point():\\n    solve()\\n\\n__starting_point()\", \"def mp():  return list(map(int,input().split()))\\ndef lt():  return list(map(int,input().split()))\\ndef pt(x):  print(x)\\ndef ip():  return input()\\ndef it():  return int(input())\\ndef sl(x):  return [t for t in x]\\ndef spl(x): return x.split()\\ndef aj(liste, item): liste.append(item)\\ndef bin(x):  return \\\"{0:b}\\\".format(x)\\n\\nn = it()\\nL = lt()\\ndef gcd(x,y):\\n    if x % y == 0:\\n        return y\\n    else:\\n        return gcd(y,x%y)\\nc = 0\\ni = 0\\nwhile i+1 < len(L):\\n    d = gcd(L[i],L[i+1])\\n    if d != 1:\\n        L.insert(i+1,1)\\n        c += 1\\n    i += 1\\nprint(c)\\nprint(' '.join([str(x) for x in L]))\\n        \\n\", \"from fractions import gcd\\nn, a, v = int(input()), list(map(int, input().split())), []\\nfor i, ai in enumerate(a):\\n    v.append(ai)\\n    if i < n - 1 and gcd(ai, a[i + 1]) > 1:\\n        v.append(1)\\nprint(len(v) - len(a))\\nprint(' '.join(map(str, v)))\", \"def gcd(a, b):\\n    if b == 0: return a\\n    else: return gcd(b, a % b)\\ndef __starting_point():\\n    n = int(input())\\n    A = list(map(int, input().split()))\\n    ans, cnt = [A[0]], 0\\n    for i in range(1, n):\\n        if gcd(A[i], A[i - 1]) != 1:\\n            ans.append(1)\\n            cnt += 1\\n        ans.append(A[i])\\n    print(cnt)\\n    print(' '.join(str(i) for i in ans))        \\n__starting_point()\", \"n = int(input())\\na = [int(s) for s in input().split()]\\n\\ndef evklid(a, b):\\n    while a!=0 and b!=0:\\n        if a > b:\\n            a = a % b\\n        else:\\n            b = b % a\\n    return a + b\\n\\n\\ns = ''\\nk = 0\\ns += str(a[0])\\nfor i in range(1, n):\\n    if evklid(a[i], a[i-1]) != 1:\\n        k += 1\\n        s += ' 1 ' + str(a[i])\\n    else:\\n        s += ' ' + str(a[i])\\nprint(k)\\nprint(s)\\n\", \"def prost(a, b):\\n\\ta, b = max(a, b), min(a,b)\\n\\twhile b!=0:\\n\\t\\ta = a%b\\n\\t\\ta, b = b, a\\n\\tif a==1:\\n\\t\\treturn (0)\\n\\telse:\\n\\t\\treturn (1)\\n\\nn = int(input())\\ns = input().split()\\nk = 0\\nfor i in range(len(s)-1):\\n\\tif prost(int(s[i]), int(s[i+1]))==1: \\n\\t\\ts[i] = s[i] + ' ' + '1'\\n\\t\\tk = k+1\\nprint (k)\\nprint (' '.join(x for x in s))\", \"input()\\n\\n\\ndef nod(a, b):\\n    while b:\\n        a, b = b, a % b\\n    return a\\n\\n\\ndef main():\\n    a = list(map(int, input().split()))\\n    out = []\\n    k = 0\\n    for i in range(0, len(a)-1):\\n        out.append(a[i])\\n        if nod(a[i], a[i+1]) != 1:\\n            out.append(1)\\n            k += 1\\n    out.append(a[len(a)-1])\\n    str_out = \\\" \\\".join(map(str, out))\\n    print(k)\\n    print(str_out)\\n\\nmain()\\n\", \"from math import gcd\\n\\nn = int(input())\\narr = list(map(int, input().split(' ')))\\narr2 = []\\n\\nfor i in range(len(arr)-1):\\n  if not gcd(arr[i], arr[i+1]) == 1:\\n    #print (arr[i], arr[i+1], gcd(arr[i], arr[i+1]))\\n    arr2.append(str(arr[i]))\\n    arr2.append(str(1))\\n  else:\\n    arr2.append(str(arr[i]))\\n\\narr2.append(str(arr[-1]))\\n\\nprint(len(arr2)-len(arr))\\nprint(' '.join(arr2))\\n\", \"from fractions import gcd\\nn = int(input())\\nl = list(map(int, input().split()))\\nans = 0\\nnew = [l[0]]\\nfor i in range(1, n):\\n    if gcd(l[i], l[i - 1]) != 1:\\n        ans += 1\\n        new.append(1)\\n    new.append(l[i])\\nprint(ans)\\nprint(*new)\", \"from fractions import gcd\\nn=int(input())\\ncount=0\\nip=list(map(int,input().split()))\\nop=[ip[0]]\\nif n==1:\\n    print(0)\\n    print(ip[0])\\nelse:\\n    for i in range(n-1):\\n        if gcd(ip[i],ip[i+1])!=1:\\n            for j in range(2,100000000):\\n                if gcd(ip[i],j)==1 and gcd(ip[i+1],j)==1:\\n                    op.append(j)\\n                    op.append(ip[i+1])                \\n                    count+=1\\n                    break\\n        else:\\n            op.append(ip[i+1])\\n    print(count)\\n    for i in op:\\n        print(i,end=' ')\\n\", \"def gcd(x, y):\\n    if x < y:\\n        t = x\\n        x = y\\n        y = t\\n    if x%y == 0:\\n        return y\\n    else:\\n        return gcd(y, x%y)\\n\\nn = int(input())\\na = input().split()\\nfor i in range(n):\\n    a[i] = int(a[i])\\nb = [a[0]]\\nk = 0\\nfor i in range(1, n):\\n    if gcd(a[i-1], a[i]) != 1:\\n        b.append(1)\\n        k += 1\\n    b.append(a[i])\\ns = str(b[0])\\nfor i in range(1, len(b)):\\n    s += ' ' + str(b[i])\\nprint(k)\\nprint(s)\\n\", \"n=int(input())\\nl=list(map(int,input().split()))\\nans=[str(l[0])]\\ndef gcd(a,b): \\n  while b: a,b=b,a%b\\n  return a\\nfor i in range(1,n): \\n  if gcd(l[i],l[i-1])>1: ans+=[\\\"1\\\"]\\n  ans+=[str(l[i])]\\nprint(len(ans)-n)\\nprint(' '.join(ans))\", \"n = int(input())\\nmass = list(map(int, input().split()))\\n\\ndef gcd(a, b):\\n    if b:\\n        return(gcd(b, a % b))\\n    else:\\n        return a\\n\\n#def add(a, b):\\n    #k = 1\\n    #while gcd(k, a) != 1\\n#print(tmp_mass)\\ni = 0\\nc = len(mass)\\ncount = 0\\nwhile i < c - 1:\\n    #print(i, c)\\n    k = gcd(mass[i], mass[i + 1])\\n    if k == 1:\\n        i+= 1\\n        continue\\n    else:\\n        count += 1\\n        mass.insert(i+1, 1)\\n        c += 1\\n        i += 2\\nprint(count)\\nprint(' '.join(map(str, mass)))\\n\", \"n = int(input())\\nmass = list(map(int, input().split()))\\n\\ndef gcd(a, b):\\n    if b:\\n        return(gcd(b, a % b))\\n    else:\\n        return a\\ni = 0\\nc = len(mass)\\ncount = 0\\nwhile i < c - 1:\\n    k = gcd(mass[i], mass[i + 1])\\n    if k == 1:\\n        i+= 1\\n        continue\\n    else:\\n        count += 1\\n        mass.insert(i+1, 1)\\n        c += 1\\n        i += 2\\nprint(count)\\nprint(' '.join(map(str, mass)))\\n\", \"import math\\nans=[]\\ncount=0\\nn=int(input())\\na=list(map(int,input().split()))\\nif n==1:\\n    print(0)\\n    print(a[0])\\n    return\\n    \\n\\nfor i in range(n-1):\\n    ans.append(str(a[i]))\\n    if math.gcd(a[i],a[i+1])!=1:\\n        count +=1\\n        ans.append('1')\\n\\n\\nans.append(str(a[i+1]))\\nprint(count)\\nprint(' '.join(ans))\\n\\n\\n    \\n\\n\", \"import math\\nn=int(input())\\nmas=[int(c) for c in  input().split()]\\nl=[]\\nm=mas[0]\\nfor i in range(n-1):\\n    if math.gcd(mas[i],mas[i+1])!=1:\\n        l.append(i+1)\\n       # print(l)\\nfor i in l[::-1]:\\n    mas.insert(i,1)\\nk=len(mas)-n\\nprint(k)\\nfor i in mas:\\n    print(i,end=' ')\\n\\n\", \"import fractions\\nimport sys\\nn=int(input())\\nl=list(map(int,input().split()))\\nans=[]\\nfor i in range(1,n):\\n    ans.append(l[i-1])\\n    if fractions.gcd(l[i],l[i-1])>1:\\n        ans.append(\\\"1\\\")\\nans.append(l[n-1])\\nprint(len(ans)-n)\\nfor i in ans:\\n    sys.stdout.write(str(i)+\\\" \\\")\", \"\\n\\n\\ndef gcd(x, y):\\n    if y == 0:\\n        return x\\n    return gcd(y, x % y)\\n    \\n    \\nn = int(input())\\n\\na = list(map(int, input().split()))\\n\\n\\nlast = 1\\nans = []\\n\\nfor i in range(n):\\n    if gcd(a[i], last) != 1:\\n        ans.append(1)\\n    ans.append(a[i])\\n    last = a[i]\\n\\n\\nprint(len(ans) - n)\\n\\nfor i in range(len(ans) - 1):\\n    print(ans[i], end = ' ')\\n\\n\\nprint(ans[len(ans) - 1])\\n\\n\\n\\n\\n    \\n    \\n\\n\\n\\n\\n\", \"from math import sqrt\\nn=int(input())\\na=[int(i) for i in input().split()]\\ninsert=[0]*n\\nans=[]\\ncnt=0\\n\\ndef is_co_prime(A,B) :\\n    t=A%B\\n    if t==0 :\\n        return B==1,B\\n    while True :\\n        A,B=B,t\\n        if A%B :\\n            t=A%B\\n        else :\\n            C=B\\n            break\\n    return C==1,C\\n\\nfor i in range(n-1) :\\n    check=is_co_prime(a[i],a[i+1])\\n    if check[0] : continue\\n    else :\\n        T=int(sqrt(check[1]))\\n        while True:\\n            if is_co_prime(a[i],T)[0] and is_co_prime(T,a[i+1])[0] :\\n                break\\n            T+=1\\n        insert[i]=T\\n        cnt+=1\\n\\nfor i in range(n):\\n    ans.append(a[i])\\n    if insert[i] :\\n        ans.append(insert[i])\\n\\nprint(cnt)\\nprint(\\\" \\\".join(map(str,ans)))\", \"def gcd(a, b):\\n    if b == 0:\\n        return a\\n    return gcd(b, a % b)\\n\\n\\ndef main():\\n    n = int(input())\\n    a = [int(x) for x in input().split()]\\n\\n    b = [a[0]]\\n    for i in range(1, n):\\n        if gcd(a[i - 1], a[i]) != 1:\\n            b.append(1)\\n        b.append(a[i])\\n\\n    print(len(b) - n)\\n    print(\\\" \\\".join(map(str, b)))\\n\\n\\nmain()\", \"n = int(input())\\na = list(map(int, input().split()))\\nb = []\\n\\ndef gcd(x, y) :\\n    while y :\\n        x, y = y, x % y\\n    return x + y\\n\\nfor i in range(0, n) :\\n    b.append(a[i])\\n    if i + 1 < n and gcd(a[i], a[i + 1]) != 1 : b.append(1)\\n\\nprint(len(b) - n)\\nfor x in b : print(x, end = ' ')\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3\\n2 7 28\\n\",\n    \"1\\n1\\n\",\n    \"1\\n548\\n\",\n    \"1\\n963837006\\n\",\n    \"10\\n1 1 1 1 1 1 1 1 1 1\\n\",\n    \"10\\n26 723 970 13 422 968 875 329 234 983\\n\",\n    \"10\\n319645572 758298525 812547177 459359946 355467212 304450522 807957797 916787906 239781206 242840396\\n\",\n    \"100\\n1 1 1 1 2 1 1 1 1 1 2 2 1 1 2 1 2 1 1 1 2 1 1 2 1 2 1 1 2 2 2 1 1 2 1 1 1 2 2 2 1 1 1 2 1 2 2 1 2 1 1 2 2 1 2 1 2 1 2 2 1 1 1 2 1 1 2 1 2 1 2 2 2 1 2 1 2 2 2 1 2 2 1 1 1 1 2 2 2 2 2 2 2 1 1 1 2 1 2 1\\n\",\n    \"100\\n591 417 888 251 792 847 685 3 182 461 102 348 555 956 771 901 712 878 580 631 342 333 285 899 525 725 537 718 929 653 84 788 104 355 624 803 253 853 201 995 536 184 65 205 540 652 549 777 248 405 677 950 431 580 600 846 328 429 134 983 526 103 500 963 400 23 276 704 570 757 410 658 507 620 984 244 486 454 802 411 985 303 635 283 96 597 855 775 139 839 839 61 219 986 776 72 729 69 20 917\\n\",\n    \"5\\n472882027 472882027 472882027 472882027 472882027\\n\",\n    \"2\\n1000000000 1000000000\\n\",\n    \"2\\n8 6\\n\",\n    \"3\\n100000000 1000000000 1000000000\\n\",\n    \"5\\n1 2 3 4 5\\n\",\n    \"20\\n2 1000000000 2 1000000000 2 1000000000 2 1000000000 2 1000000000 2 1000000000 2 1000000000 2 1000000000 2 1000000000 2 1000000000\\n\",\n    \"2\\n223092870 23\\n\",\n    \"2\\n100000003 100000003\\n\",\n    \"2\\n999999937 999999937\\n\",\n    \"4\\n999 999999937 999999937 999\\n\",\n    \"2\\n999999929 999999929\\n\",\n    \"2\\n1049459 2098918\\n\",\n    \"2\\n352229 704458\\n\",\n    \"2\\n7293 4011\\n\",\n    \"2\\n5565651 3999930\\n\",\n    \"2\\n997 997\\n\",\n    \"3\\n9994223 9994223 9994223\\n\",\n    \"2\\n99999998 1000000000\\n\",\n    \"3\\n1000000000 1000000000 1000000000\\n\",\n    \"2\\n130471 130471\\n\",\n    \"3\\n1000000000 2 2\\n\",\n    \"2\\n223092870 66526\\n\",\n    \"14\\n1000000000 1000000000 223092870 223092870 6 105 2 2 510510 510510 999999491 999999491 436077930 570018449\\n\",\n    \"2\\n3996017 3996017\\n\",\n    \"2\\n999983 999983\\n\",\n    \"2\\n618575685 773990454\\n\",\n    \"3\\n9699690 3 7\\n\",\n    \"2\\n999999999 999999996\\n\",\n    \"2\\n99999910 99999910\\n\",\n    \"12\\n1000000000 1000000000 223092870 223092870 6 105 2 2 510510 510510 999999491 999999491\\n\",\n    \"3\\n999999937 999999937 999999937\\n\",\n    \"2\\n99839 99839\\n\",\n    \"3\\n19999909 19999909 19999909\\n\",\n    \"4\\n1 1000000000 1 1000000000\\n\",\n    \"2\\n64006 64006\\n\",\n    \"2\\n1956955 1956955\\n\",\n    \"3\\n1 1000000000 1000000000\\n\",\n    \"2\\n982451707 982451707\\n\",\n    \"2\\n999999733 999999733\\n\",\n    \"3\\n999999733 999999733 999999733\\n\",\n    \"2\\n3257 3257\\n\",\n    \"2\\n223092870 181598\\n\",\n    \"3\\n959919409 105935 105935\\n\",\n    \"2\\n510510 510510\\n\",\n    \"3\\n223092870 1000000000 1000000000\\n\",\n    \"14\\n1000000000 2 1000000000 3 1000000000 6 1000000000 1000000000 15 1000000000 1000000000 1000000000 100000000 1000\\n\",\n    \"7\\n1 982451653 982451653 1 982451653 982451653 982451653\\n\",\n    \"2\\n100000007 100000007\\n\",\n    \"3\\n999999757 999999757 999999757\\n\",\n    \"3\\n99999989 99999989 99999989\\n\",\n    \"5\\n2 4 982451707 982451707 3\\n\",\n    \"2\\n20000014 20000014\\n\",\n    \"2\\n99999989 99999989\\n\",\n    \"2\\n111546435 111546435\\n\",\n    \"2\\n55288874 33538046\\n\",\n    \"5\\n179424673 179424673 179424673 179424673 179424673\\n\",\n    \"2\\n199999978 199999978\\n\",\n    \"2\\n1000000000 2\\n\",\n    \"3\\n19999897 19999897 19999897\\n\",\n    \"2\\n19999982 19999982\\n\",\n    \"2\\n10000007 10000007\\n\",\n    \"3\\n999999937 999999937 2\\n\",\n    \"5\\n2017 2017 2017 2017 2017\\n\",\n    \"2\\n19999909 39999818\\n\",\n    \"2\\n62615533 7919\\n\",\n    \"5\\n39989 39989 33 31 29\\n\",\n    \"2\\n1000000000 100000\\n\",\n    \"2\\n1938 10010\\n\",\n    \"2\\n199999 199999\\n\",\n    \"2\\n107273 107273\\n\",\n    \"3\\n49999 49999 49999\\n\",\n    \"2\\n1999966 1999958\\n\",\n    \"2\\n86020 300846\\n\",\n    \"2\\n999999997 213\\n\",\n    \"2\\n200000014 200000434\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n2 7 1 28\\n\",\n    \"0\\n1\\n\",\n    \"0\\n548\\n\",\n    \"0\\n963837006\\n\",\n    \"0\\n1 1 1 1 1 1 1 1 1 1\\n\",\n    \"2\\n26 723 970 13 422 1 968 875 1 329 234 983\\n\",\n    \"7\\n319645572 1 758298525 1 812547177 1 459359946 1 355467212 1 304450522 807957797 916787906 1 239781206 1 242840396\\n\",\n    \"19\\n1 1 1 1 2 1 1 1 1 1 2 1 2 1 1 2 1 2 1 1 1 2 1 1 2 1 2 1 1 2 1 2 1 2 1 1 2 1 1 1 2 1 2 1 2 1 1 1 2 1 2 1 2 1 2 1 1 2 1 2 1 2 1 2 1 2 1 2 1 1 1 2 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 1 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 1 1 2 1 2 1\\n\",\n    \"38\\n591 1 417 1 888 251 792 1 847 685 3 182 461 102 1 348 1 555 956 771 901 712 1 878 1 580 631 342 1 333 1 285 899 525 1 725 537 718 929 653 84 1 788 1 104 355 624 803 1 253 853 201 995 536 1 184 65 1 205 1 540 1 652 549 1 777 248 405 677 950 431 580 1 600 1 846 1 328 429 134 983 526 103 500 963 400 23 1 276 1 704 1 570 757 410 1 658 507 620 1 984 1 244 1 486 1 454 1 802 411 985 303 635 283 96 1 597 1 855 1 775 139 839 1 839 61 219 986 1 776 1 72 1 729 1 69 20 917\\n\",\n    \"4\\n472882027 1 472882027 1 472882027 1 472882027 1 472882027\\n\",\n    \"1\\n1000000000 1 1000000000\\n\",\n    \"1\\n8 1 6\\n\",\n    \"2\\n100000000 1 1000000000 1 1000000000\\n\",\n    \"0\\n1 2 3 4 5\\n\",\n    \"19\\n2 1 1000000000 1 2 1 1000000000 1 2 1 1000000000 1 2 1 1000000000 1 2 1 1000000000 1 2 1 1000000000 1 2 1 1000000000 1 2 1 1000000000 1 2 1 1000000000 1 2 1 1000000000\\n\",\n    \"1\\n223092870 1 23\\n\",\n    \"1\\n100000003 1 100000003\\n\",\n    \"1\\n999999937 1 999999937\\n\",\n    \"1\\n999 999999937 1 999999937 999\\n\",\n    \"1\\n999999929 1 999999929\\n\",\n    \"1\\n1049459 1 2098918\\n\",\n    \"1\\n352229 1 704458\\n\",\n    \"1\\n7293 1 4011\\n\",\n    \"1\\n5565651 1 3999930\\n\",\n    \"1\\n997 1 997\\n\",\n    \"2\\n9994223 1 9994223 1 9994223\\n\",\n    \"1\\n99999998 1 1000000000\\n\",\n    \"2\\n1000000000 1 1000000000 1 1000000000\\n\",\n    \"1\\n130471 1 130471\\n\",\n    \"2\\n1000000000 1 2 1 2\\n\",\n    \"1\\n223092870 1 66526\\n\",\n    \"10\\n1000000000 1 1000000000 1 223092870 1 223092870 1 6 1 105 2 1 2 1 510510 1 510510 999999491 1 999999491 436077930 1 570018449\\n\",\n    \"1\\n3996017 1 3996017\\n\",\n    \"1\\n999983 1 999983\\n\",\n    \"1\\n618575685 1 773990454\\n\",\n    \"1\\n9699690 1 3 7\\n\",\n    \"1\\n999999999 1 999999996\\n\",\n    \"1\\n99999910 1 99999910\\n\",\n    \"9\\n1000000000 1 1000000000 1 223092870 1 223092870 1 6 1 105 2 1 2 1 510510 1 510510 999999491 1 999999491\\n\",\n    \"2\\n999999937 1 999999937 1 999999937\\n\",\n    \"1\\n99839 1 99839\\n\",\n    \"2\\n19999909 1 19999909 1 19999909\\n\",\n    \"0\\n1 1000000000 1 1000000000\\n\",\n    \"1\\n64006 1 64006\\n\",\n    \"1\\n1956955 1 1956955\\n\",\n    \"1\\n1 1000000000 1 1000000000\\n\",\n    \"1\\n982451707 1 982451707\\n\",\n    \"1\\n999999733 1 999999733\\n\",\n    \"2\\n999999733 1 999999733 1 999999733\\n\",\n    \"1\\n3257 1 3257\\n\",\n    \"1\\n223092870 1 181598\\n\",\n    \"2\\n959919409 1 105935 1 105935\\n\",\n    \"1\\n510510 1 510510\\n\",\n    \"2\\n223092870 1 1000000000 1 1000000000\\n\",\n    \"11\\n1000000000 1 2 1 1000000000 3 1000000000 1 6 1 1000000000 1 1000000000 1 15 1 1000000000 1 1000000000 1 1000000000 1 100000000 1 1000\\n\",\n    \"3\\n1 982451653 1 982451653 1 982451653 1 982451653 1 982451653\\n\",\n    \"1\\n100000007 1 100000007\\n\",\n    \"2\\n999999757 1 999999757 1 999999757\\n\",\n    \"2\\n99999989 1 99999989 1 99999989\\n\",\n    \"2\\n2 1 4 982451707 1 982451707 3\\n\",\n    \"1\\n20000014 1 20000014\\n\",\n    \"1\\n99999989 1 99999989\\n\",\n    \"1\\n111546435 1 111546435\\n\",\n    \"1\\n55288874 1 33538046\\n\",\n    \"4\\n179424673 1 179424673 1 179424673 1 179424673 1 179424673\\n\",\n    \"1\\n199999978 1 199999978\\n\",\n    \"1\\n1000000000 1 2\\n\",\n    \"2\\n19999897 1 19999897 1 19999897\\n\",\n    \"1\\n19999982 1 19999982\\n\",\n    \"1\\n10000007 1 10000007\\n\",\n    \"1\\n999999937 1 999999937 2\\n\",\n    \"4\\n2017 1 2017 1 2017 1 2017 1 2017\\n\",\n    \"1\\n19999909 1 39999818\\n\",\n    \"1\\n62615533 1 7919\\n\",\n    \"1\\n39989 1 39989 33 31 29\\n\",\n    \"1\\n1000000000 1 100000\\n\",\n    \"1\\n1938 1 10010\\n\",\n    \"1\\n199999 1 199999\\n\",\n    \"1\\n107273 1 107273\\n\",\n    \"2\\n49999 1 49999 1 49999\\n\",\n    \"1\\n1999966 1 1999958\\n\",\n    \"1\\n86020 1 300846\\n\",\n    \"1\\n999999997 1 213\\n\",\n    \"1\\n200000014 1 200000434\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/660/A",
  "starter_code": ""
}