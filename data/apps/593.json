{
  "task_id": "APPS/593",
  "problem_id": 593,
  "prompt": "The country of Byalechinsk is running elections involving n candidates. The country consists of m cities. We know how many people in each city voted for each candidate.\n\nThe electoral system in the country is pretty unusual. At the first stage of elections the votes are counted for each city: it is assumed that in each city won the candidate who got the highest number of votes in this city, and if several candidates got the maximum number of votes, then the winner is the one with a smaller index.\n\nAt the second stage of elections the winner is determined by the same principle over the cities: the winner of the elections is the candidate who won in the maximum number of cities, and among those who got the maximum number of cities the winner is the one with a smaller index.\n\nDetermine who will win the elections.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n, m (1 \u2264 n, m \u2264 100) \u2014 the number of candidates and of cities, respectively.\n\nEach of the next m lines contains n non-negative integers, the j-th number in the i-th line a_{ij} (1 \u2264 j \u2264 n, 1 \u2264 i \u2264 m, 0 \u2264 a_{ij} \u2264 10^9) denotes the number of votes for candidate j in city i.\n\nIt is guaranteed that the total number of people in all the cities does not exceed 10^9.\n\n\n-----Output-----\n\nPrint a single number \u2014 the index of the candidate who won the elections. The candidates are indexed starting from one.\n\n\n-----Examples-----\nInput\n3 3\n1 2 3\n2 3 1\n1 2 1\n\nOutput\n2\nInput\n3 4\n10 10 3\n5 1 6\n2 2 2\n1 5 7\n\nOutput\n1\n\n\n-----Note-----\n\nNote to the first sample test. At the first stage city 1 chosen candidate 3, city 2 chosen candidate 2, city 3 chosen candidate 2. The winner is candidate 2, he gained 2 votes.\n\nNote to the second sample test. At the first stage in city 1 candidates 1 and 2 got the same maximum number of votes, but candidate 1 has a smaller index, so the city chose candidate 1. City 2 chosen candidate 3. City 3 chosen candidate 1, due to the fact that everyone has the same number of votes, and 1 has the smallest index. City 4 chosen the candidate 3. On the second stage the same number of cities chose candidates 1 and 3. The winner is candidate 1, the one with the smaller index.",
  "solutions": "[\"n, m = (int(x) for x in input().split())\\nwinners = [0] * n\\nfor i in range(m):\\n\\ta = [int(x) for x in input().split()]\\n\\twinners[a.index(max(a))] += 1\\nprint(winners.index(max(winners)) + 1)\\n\", \"n, m = map(int, input().split())\\nvotes = [0] * n\\nfor i in range(m):\\n    row = list(map(int, input().split()))\\n    rowmax = max(row)\\n    votes[row.index(rowmax)] += 1\\nvotmax = max(votes)\\nprint(votes.index(votmax) + 1)\", \"n, m = [int(i) for i in input().split()]\\na = []\\nb = [0] * n\\nfor i in range(m):\\n    a.append([int(j) for j in input().split()])\\n    k = 0\\n    for j in range(1, n):\\n        if a[-1][j] > a[-1][k]:\\n            k = j\\n    a[-1] = k\\n    b[k] += 1\\nq = max(b)\\nfor i in range(n):\\n    if b[i] == q:\\n        print(i + 1)\\n        return\\n\", \"n, m = [int(i) for i  in input().split()]\\nh = [0 for i in range(n)]\\nfor i in range(m):\\n    s = [int(i) for i  in input().split()]\\n    h[s.index(max(s))]+=1\\nprint(h.index(max(h))+1)\\n\", \"n, m = list(map(int, input().split()))\\np = [0] * n\\nfor i in range(m):\\n    a = list(map(int, input().split()))\\n    q = max(a)\\n    for t in range(n):\\n        if a[t] == q:\\n            r = t\\n            break\\n    p[t] += 1\\nq = max(p)\\nfor i in range(n):\\n    if p[i] == q:\\n        print(i + 1)\\n        break\\n\", \"n,m=list(map(int,input().split(' ')))\\nc=[]\\nfor i in range(m):\\n    c.append(list(map(int,input().split(' '))))\\nd=[]\\nfor i in range(n):\\n    d.append(0)\\nfor i in c:\\n    d[i.index(max(i))]+=1\\nprint(d.index(max(d))+1)\\n\", \"n, m = list(map(int, input().split()))\\nwon = [0] * n\\nvot = [list(map(int, input().split())) for i in range(m)]\\nfor i in range(m):\\n    ma = max(vot[i])\\n    for j in range(n):\\n        if vot[i][j] == ma:\\n            won[j] += 1\\n            break\\nma = max(won)\\nfor i in range(n):\\n    if ma == won[i]:\\n        print(i + 1)\\n        return\\n        \\n\", \"n,m=list(map(int,input().split()))\\nk=[0]*n\\nfor i in range(m):\\n  l=list(map(int,input().split()))\\n  t=max(l)\\n  k[l.index(t)]+=1\\nt=max(k)\\nprint(k.index(t)+1)\\n\", \"import collections\\ndef f():\\n    n,m  = [int(c) for c in input().split()]\\n\\n    r = []\\n    for i in range(m):\\n        a = [int(c) for c in input().split()]\\n        jj = a.index(max(a)) + 1\\n        r.append(jj)\\n\\n    c = collections.Counter(r)\\n    mm = 0\\n    for k in c:\\n        if c[k] > mm:\\n            mm = c[k]\\n\\n    for k in sorted(c.keys()):\\n        if c[k] == mm:\\n            return k\\n\\nprint(f())\", \"def won(l):\\n    l = list(l)\\n    return l.index(max(l))\\n\\ndef readline():\\n    return (int(i) for i in input().split())\\n\\nn, m = readline()\\nfirst_winners = (won(readline()) for i in range(m))\\n\\na = [0] * n\\nfor i in first_winners:\\n    a[i] += 1\\n\\nprint(won(a) + 1)\\n\", \"#import math\\nn,m=[int(x) for x in input().split(\\\" \\\")]\\nvictorias = [0 for x in range(n)]\\nfor i in range(m):\\n    puntajes=[int(x) for x in input().split(\\\" \\\")]\\n    ganador = puntajes.index(max(puntajes))\\n    victorias[ganador]+=1\\nprint(victorias.index(max(victorias))+1)\\n\", \"n, m = list(map(int, input().split()))\\nlst = [[int(x) for x in input().split()] for _ in range(m)]\\n\\ntmp_lst = []\\n\\nfor row in lst:\\n\\t\\n\\ttmp_lst.append(row.index(max(row)))\\n\\ntmp_tmp_lst = [0] * (n+7)\\n\\nfor x in tmp_lst:\\n\\ttmp_tmp_lst[x] += 1\\n\\n\\nprint(tmp_tmp_lst.index(max(tmp_tmp_lst))+1)\\n\", \"n, m = map(int, input().split())\\nanswer = [0] * n\\n\\nfor i in range(m):\\n    l = list(map(int, input().split()))\\n    answer[l.index(max(l))] += 1\\n\\nprint(answer.index(max(answer)) + 1)\", \"n, m = list(map(int,input().split()))\\nij = [list(map(int,input().split())) for i in range(m)]\\nni = [0] * n\\nfor i in range(m):\\n    maxi = 0\\n    num = 0\\n    for j in range(n):\\n        if ij[i][j] > maxi:\\n            maxi = ij[i][j]\\n            num = j\\n    ni[num] += 1\\nmaxi = 0\\nnum = 0\\nfor i in range(n):\\n    if ni[i] > maxi:\\n        maxi = ni[i]\\n        num = i\\nprint(num+1)\\n\", \"n,m = map(int,input().split())\\nb = [0] * (n+1)\\nfor i in range(m):\\n    a = list(map(int,input().split()))\\n    max_ = -1\\n    index_max = -1\\n    for j in range(len(a)):\\n        if (a[j] > max_):\\n            max_ = a[j]\\n            index_max = j\\n    b[index_max] += 1\\nmax_ = -1\\nindex_max = -1\\nfor i in range(len(b)-1):\\n    if (b[i] > max_):\\n        max_ = b[i]\\n        index_max = i\\nprint(index_max+1)\", \"n, m = [int(i) for i in input().split()]\\ncnt = list([0]*(n+1))\\nfor i in range(m):\\n    votes = [int(num) for num in input().split()]\\n    maxnum = max(votes)\\n    cnt[votes.index(maxnum)] += 1\\nmaxnum = max(cnt)\\nprint(cnt.index(maxnum)+1)\\n\", \"n, m = map(int, input().split())\\nresults = [ 0 ] * n\\nfor _ in range(m):\\n  votes = [ int(vote) for vote in input().split() ]\\n  maxvote = -1\\n  winnercity = -1\\n  for i in range(n):\\n    if votes[i] > maxvote:\\n      maxvote = votes[i]\\n      winnercity = i\\n  results[winnercity] += 1\\n\\nmaxvote = -1\\nwinnercity = -1\\nfor i in range(n):\\n  if results[i] > maxvote:\\n    maxvote = results[i]\\n    winnercity = i\\n\\nprint(winnercity+1)\", \"n,m = list(map(int, input().split()))\\ncandidates= n * [0]\\nfor i in range(0, m):\\n    l = list(map(int, input().split()))\\n    candidates[l.index(max(l))] += 1\\n\\n\\nprint (candidates.index(max(candidates)) + 1)\", \"\\nimport math\\nimport sys\\n\\nx=list(map(int,input().split()))\\nn=x[0]\\nm=x[1]\\n\\nW=[]\\nNW=[]\\n\\nfor i in range(0,n):\\n    NW.append(0)\\n\\n\\nfor i in range(0,m):\\n    l=list(map(int,input().split()))\\n    k=max(l)\\n    for j in range(0,n):\\n        if l[j] == k:\\n            w=j\\n            break\\n    W.append(w)\\n\\nfor i in range(0,m):\\n    NW[W[i]]+=1\\n\\nk=max(NW)\\n\\nfor i in range(0,n):\\n    if NW[i] == k:\\n        w=i+1\\n        break\\nprint(w)\\n    \\n\\n\\n    \\n\\n\\n    \\n\", \"n,m=[int(x) for x in input().split()]\\nL=[0]*(n+1)\\nfor i in range(m):\\n    l=[int(x) for x in input().split()]\\n    max=-1\\n    for i in range(n):\\n        if l[i]>max:\\n            maxval=i+1\\n            max=l[i]\\n    L[maxval]+=1\\nmax=-1\\nfor i in range(n+1):\\n    if L[i]>max:\\n        maxval=i\\n        max=L[i]\\nprint(maxval)\\n\", \"n, m = map(int, input().split(' '))\\na = []\\nfor i in range(m):\\n    a.append(list(map(int, input().split(' '))))\\n\\nv = [0]*n\\nfor aa in a:\\n    v[aa.index(max(aa))] += 1\\n\\nprint(v.index(max(v))+1)\", \"n,m = list(map(int, input().split()))\\na = []\\nansw = []\\nfor i in range(m):\\n    answ.append([])\\nfor i in range(m):\\n    a.append([])\\nfor i in range(m):\\n    a[i] = list(map(int, input().split()))\\nfor i in range(m):\\n    v = a[i]\\n    mn = max(v)\\n    k = 0\\n    for j in reversed(list(range(n))):\\n        if a[i][j] == mn:\\n            k = j\\n    answ[i] = k\\nansw_k = []\\nfor i in range(n):\\n    answ_k.append(0)\\nfor i in range(len(answ)):\\n    answ_k[answ[i]] += 1\\nmn = max(answ_k)\\nfor i in range(n):\\n    if answ_k[i] == mn:\\n        print(i+1)\\n        return\\n\", \"import sys; sys.setrecursionlimit(1000000)\\ndef solve():\\n    n,m, = rv()\\n    citieswon = [0] * n\\n    for city in range(m):\\n        a, = rl(1)\\n        index = 0\\n        for i in range(n):\\n            if a[i] > a[index]:\\n                index = i\\n        citieswon[index] += 1\\n    cityindex = 0\\n    for i in range(n):\\n        if citieswon[i] > citieswon[cityindex]:\\n            cityindex = i\\n    print(cityindex + 1)\\n\\n\\n\\n\\ndef rv(): return list(map(int, input().split()))\\ndef rl(n): return [list(map(int, input().split())) for _ in range(n)]\\nif sys.hexversion == 50594544 : sys.stdin = open(\\\"test.txt\\\")\\nsolve()\\n\\n\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3 3\\n1 2 3\\n2 3 1\\n1 2 1\\n\",\n    \"3 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7\\n\",\n    \"1 3\\n5\\n3\\n2\\n\",\n    \"3 1\\n1 2 3\\n\",\n    \"3 1\\n100 100 100\\n\",\n    \"2 2\\n1 2\\n2 1\\n\",\n    \"2 2\\n2 1\\n2 1\\n\",\n    \"2 2\\n1 2\\n1 2\\n\",\n    \"3 3\\n0 0 0\\n1 1 1\\n2 2 2\\n\",\n    \"1 1\\n1000000000\\n\",\n    \"5 5\\n1 2 3 4 5\\n2 3 4 5 6\\n3 4 5 6 7\\n4 5 6 7 8\\n5 6 7 8 9\\n\",\n    \"4 4\\n1 3 1 3\\n3 1 3 1\\n2 0 0 2\\n0 1 1 0\\n\",\n    \"4 4\\n1 4 1 3\\n3 1 2 1\\n1 0 0 2\\n0 1 10 0\\n\",\n    \"4 4\\n1 4 1 300\\n3 1 2 1\\n5 0 0 2\\n0 1 10 100\\n\",\n    \"5 5\\n15 45 15 300 10\\n53 15 25 51 10\\n5 50 50 2 10\\n1000 1 10 100 10\\n10 10 10 10 10\\n\",\n    \"1 100\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n\",\n    \"100 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"1 100\\n859\\n441\\n272\\n47\\n355\\n345\\n612\\n569\\n545\\n599\\n410\\n31\\n720\\n303\\n58\\n537\\n561\\n730\\n288\\n275\\n446\\n955\\n195\\n282\\n153\\n455\\n996\\n121\\n267\\n702\\n769\\n560\\n353\\n89\\n990\\n282\\n801\\n335\\n573\\n258\\n722\\n768\\n324\\n41\\n249\\n125\\n557\\n303\\n664\\n945\\n156\\n884\\n985\\n816\\n433\\n65\\n976\\n963\\n85\\n647\\n46\\n877\\n665\\n523\\n714\\n182\\n377\\n549\\n994\\n385\\n184\\n724\\n447\\n99\\n766\\n353\\n494\\n747\\n324\\n436\\n915\\n472\\n879\\n582\\n928\\n84\\n627\\n156\\n972\\n651\\n159\\n372\\n70\\n903\\n590\\n480\\n184\\n540\\n270\\n892\\n\",\n    \"100 1\\n439 158 619 538 187 153 973 781 610 475 94 947 449 531 220 51 788 118 189 501 54 434 465 902 280 635 688 214 737 327 682 690 683 519 261 923 254 388 529 659 662 276 376 735 976 664 521 285 42 147 187 259 407 977 879 465 522 17 550 701 114 921 577 265 668 812 232 267 135 371 586 201 608 373 771 358 101 412 195 582 199 758 507 882 16 484 11 712 916 699 783 618 405 124 904 257 606 610 230 718\\n\",\n    \"1 99\\n511\\n642\\n251\\n30\\n494\\n128\\n189\\n324\\n884\\n656\\n120\\n616\\n959\\n328\\n411\\n933\\n895\\n350\\n1\\n838\\n996\\n761\\n619\\n131\\n824\\n751\\n707\\n688\\n915\\n115\\n244\\n476\\n293\\n986\\n29\\n787\\n607\\n259\\n756\\n864\\n394\\n465\\n303\\n387\\n521\\n582\\n485\\n355\\n299\\n997\\n683\\n472\\n424\\n948\\n339\\n383\\n285\\n957\\n591\\n203\\n866\\n79\\n835\\n980\\n344\\n493\\n361\\n159\\n160\\n947\\n46\\n362\\n63\\n553\\n793\\n754\\n429\\n494\\n523\\n227\\n805\\n313\\n409\\n243\\n927\\n350\\n479\\n971\\n825\\n460\\n544\\n235\\n660\\n327\\n216\\n729\\n147\\n671\\n738\\n\",\n    \"99 1\\n50 287 266 159 551 198 689 418 809 43 691 367 160 664 86 805 461 55 127 950 576 351 721 493 972 560 934 885 492 92 321 759 767 989 883 7 127 413 404 604 80 645 666 874 371 718 893 158 722 198 563 293 134 255 742 913 252 378 859 721 502 251 839 284 133 209 962 514 773 124 205 903 785 859 911 93 861 786 747 213 690 69 942 697 211 203 284 961 351 137 962 952 408 249 238 850 944 40 346\\n\",\n    \"100 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2\\n\",\n    \"1 1\\n0\\n\",\n    \"2 1\\n0 0\\n\",\n    \"2 2\\n0 0\\n0 0\\n\",\n    \"2 2\\n1 2\\n0 0\\n\",\n    \"3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n\",\n    \"2 3\\n0 0\\n0 0\\n0 1\\n\",\n    \"3 2\\n1 1 3\\n0 0 0\\n\",\n    \"3 4\\n1 10 3\\n0 0 0\\n0 0 0\\n0 0 0\\n\",\n    \"2 4\\n2 1\\n1 2\\n0 0\\n1 2\\n\",\n    \"2 2\\n0 1\\n0 1\\n\",\n    \"2 3\\n1 2\\n0 0\\n2 1\\n\",\n    \"2 2\\n0 0\\n4 5\\n\",\n    \"3 2\\n10 15 20\\n0 0 0\\n\",\n    \"3 4\\n0 0 0\\n0 0 0\\n0 0 0\\n1 2 3\\n\",\n    \"3 3\\n0 0 0\\n0 0 0\\n0 0 1\\n\",\n    \"3 3\\n0 0 0\\n1 2 3\\n1 3 2\\n\",\n    \"3 1\\n0 0 0\\n\",\n    \"3 3\\n0 0 1\\n0 0 0\\n0 0 0\\n\"\n  ],\n  \"outputs\": [\n    \"2\",\n    \"1\",\n    \"1\",\n    \"3\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"5\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"54\",\n    \"1\",\n    \"34\",\n    \"100\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/570/A",
  "starter_code": ""
}