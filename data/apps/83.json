{
  "task_id": "APPS/83",
  "problem_id": 83,
  "prompt": "You are given an array of $n$ integers: $a_1, a_2, \\ldots, a_n$. Your task is to find some non-zero integer $d$ ($-10^3 \\leq d \\leq 10^3$) such that, after each number in the array is divided by $d$, the number of positive numbers that are presented in the array is greater than or equal to half of the array size (i.e., at least $\\lceil\\frac{n}{2}\\rceil$). Note that those positive numbers do not need to be an integer (e.g., a $2.5$ counts as a positive number). If there are multiple values of $d$ that satisfy the condition, you may print any of them. In case that there is no such $d$, print a single integer $0$.\n\nRecall that $\\lceil x \\rceil$ represents the smallest integer that is not less than $x$ and that zero ($0$) is neither positive nor negative.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($1 \\le n \\le 100$)\u00a0\u2014 the number of elements in the array.\n\nThe second line contains $n$ space-separated integers $a_1, a_2, \\ldots, a_n$ ($-10^3 \\le a_i \\le 10^3$).\n\n\n-----Output-----\n\nPrint one integer $d$ ($-10^3 \\leq d \\leq 10^3$ and $d \\neq 0$) that satisfies the given condition. If there are multiple values of $d$ that satisfy the condition, you may print any of them. In case that there is no such $d$, print a single integer $0$.\n\n\n-----Examples-----\nInput\n5\n10 0 -7 2 6\nOutput\n4\nInput\n7\n0 0 1 -1 0 0 2\n\nOutput\n0\n\n\n-----Note-----\n\nIn the first sample, $n = 5$, so we need at least $\\lceil\\frac{5}{2}\\rceil = 3$ positive numbers after division. If $d = 4$, the array after division is $[2.5, 0, -1.75, 0.5, 1.5]$, in which there are $3$ positive numbers (namely: $2.5$, $0.5$, and $1.5$).\n\nIn the second sample, there is no valid $d$, so $0$ should be printed.",
  "solutions": "[\"n=int(input())\\nar=list(map(int,input().split()))\\npos=0\\nneg=0\\nfor a in ar:\\n    if(a>0):pos+=1\\n    elif a<0:neg+=1\\nif(pos*2>=n):\\n    print(1)\\nelif neg*2>=n:\\n    print(-1)\\nelse:\\n    print(0)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\np = o = 0\\nfor i in a:\\n    if i > 0:\\n        p += 1\\n    elif i < 0:\\n        o += 1\\nif 2 * p >= n:\\n    print(1)\\nelif 2 * o >= n:\\n    print(-1)\\nelse:\\n    print(0)\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nminus = 0\\nplus = 0\\nfor el in a:\\n    if el > 0:\\n        minus += 1\\n    elif el < 0:\\n        plus += 1\\nif minus >= n // 2 + n % 2:\\n    print(1)\\nelif plus >= n // 2 + n % 2:\\n    print(-1)\\nelse:\\n    print(0)\\n\", \"import sys\\nfrom math import ceil\\n\\ninput = sys.stdin.readline\\n\\nn = int(input())\\na = map(int, input().split())\\n\\ncountPos = 0\\ncountNeg = 0\\n\\nfor i in a:\\n    if i > 0:\\n        countPos += 1\\n    if i < 0:\\n        countNeg += 1\\n\\nif countPos >= ceil(n/2):\\n    print(1)\\nelif countNeg >= ceil(n/2):\\n    print(-1)\\nelse:\\n    print(0)\", \"n = int(input())\\na = [int(v) for v in input().split()]\\n\\npos, neg, zero = 0, 0, 0\\nfor v in a:\\n    if v > 0:\\n        pos += 1\\n    elif  v <  0:\\n        neg +=  1\\n    else:\\n        zero += 1\\n\\nif  pos >= n / 2:\\n    print(1)\\nelif neg >= n / 2:\\n    print(-1)\\nelse:\\n    print(0)\\n\", \"n = int(input())\\nq = (n + 2 - 1) // 2\\ns = list(map(int, input().split()))\\nf = 0\\nfor i in s:\\n    if(i > 0):\\n        q -= 1\\n    elif(i < 0):\\n        f += 1\\nif(q <= 0):\\n    print(1)\\nelif(f >= (n + 2 - 1) // 2):\\n    print(-1)\\nelse:\\n    print(0)\", \"n = int(input())\\ncl = list(map(int, input().split()))\\na = 0\\nb = 0\\nfor x in cl:\\n    if x>0:\\n        a+=1\\n    if x<0:\\n        b+=1\\n\\nif n%2==0:\\n    k = n//2\\nelse:\\n    k = n//2+1\\n\\nif a>=k:\\n    print(1)\\nelif b>=k:\\n    print(-1)\\nelse:\\n    print(0)\\n\", \"n = int(input())\\nl = sorted([*list(map(int, input().split()))])\\n\\np = sum(1 for e in l if e > 0)\\nneg = sum(1 for e in l if e < 0)\\n\\nif p >= (n + 1)//2:\\n    res = 1\\nelif neg >= (n + 1) // 2:\\n    res = -1\\nelse:\\n    res = 0\\nprint(res)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\np = sum([1 for i in a if i > 0])\\nng = sum([1 for i in a if i < 0])\\n\\nif p >= n/2:\\n    print(1)\\nelif ng >= n/2:\\n    print(-1)\\nelse:\\n    print(0)\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\npos = sum(x > 0 for x in a)\\nneg = sum(x < 0 for x in a)\\n\\nneeded = (n + 1) // 2\\nif pos >= needed:\\n    print(\\\"1\\\")\\nelif neg >= needed:\\n    print(\\\"-1\\\")\\nelse:\\n    print(0)\", \"n = int(input())\\nai = list(map(int,input().split()))\\nnum = 0\\nnum2 = 0\\nfor i  in range(n):\\n    if ai[i] > 0:\\n        num += 1\\n    elif ai[i] < 0:\\n        num2 += 1\\nn2 = n//2 + n % 2\\nif num >= n2:\\n    print(1)\\nelif num2 >= n2:\\n    print(-1)\\nelse:\\n    print(0)\\n\", \"n = int(input())\\nA = list(map(int, input().split()))\\ncnt1, cnt2 = 0, 0\\nfor i in A:\\n    if i > 0:\\n        cnt1 += 1\\n    elif i < 0:\\n        cnt2 += 1\\nif cnt1 >= (n + 1) // 2:\\n    print(1)\\nelif cnt2 >= (n + 1) // 2:\\n    print(-1)\\nelse:print(0)\\n\", \"n = int(input())\\nli = list(map(int,input().split()))\\nplus = 0\\nminus = 0\\nfor i in li:\\n\\tif i>0:\\n\\t\\tplus += 1\\n\\tif i<0:\\n\\t\\tminus += 1\\nif plus >= (n+1)//2:\\n\\tprint(1)\\nelif minus >= (n+1)//2:\\n\\tprint(-1)\\nelse:\\n\\tprint(0)\\n\", \"N = int(input())\\nA = [int(a) for a in input().split()]\\n\\npos = 0\\nneg = 0\\nfor a in A:\\n    if a > 0:\\n        pos += 1\\n    elif a < 0:\\n        neg += 1\\n        \\nif pos >= (N+1)//2:\\n    print(1)\\nelif neg >= (N+1)//2:\\n    print(-1)\\nelse:\\n    print(0)\\n\", \"import math\\ndef A():\\n    n = int(input())\\n    a  =  [int(x) for x in input().split()]\\n    pos , neg = 0 , 0\\n    for i in a:\\n        if(i>0): pos+=1\\n        if(i<0): neg+=1\\n\\n    if(pos>= math.ceil(n/2)):\\n        print(1)\\n        return\\n    if(neg>= math.ceil(n/2)):\\n        print(-1)\\n        return\\n    print(0)\\nA()\\n\", \"#!/bin/python3\\n\\nimport math\\nimport os\\nimport random\\nimport re\\nimport sys\\n\\nn=int(input())\\nl=list(map(int,input().split()))\\na,b=0,0\\nfor i in l:\\n    if i>0:\\n        a+=1\\n    elif i<0:\\n        b+=1\\nt=(n+1)//2\\nif a>=t:\\n    print(1)\\nelif b>=t:\\n    print(-1)\\nelse:\\n    print(0)\", \"n=int(input())\\na=list(map(int,input().split()))\\np=0\\nflag=True\\nm=0\\nfor i in range(len(a)):\\n    if a[i]<0:\\n        m+=1\\n    if a[i]>0:\\n        p+=1\\nif m>p:\\n    if n//2+n%2<=m:\\n        print(-1)\\n        flag=False\\nelse:\\n    if n//2+n%2<=p:\\n        print(1)\\n        flag=False\\nif flag:\\n    print(0)\\n\", \"import math\\nn=int(input())\\na=[int(x) for x in input().split()]\\nco1=co2=co3=0\\nfor item in a:\\n    if item>0:\\n        co1+=1\\n    elif item<0:\\n        co2+=1\\n    else:\\n        co3+=1\\nif co1>=math.ceil(n/2):\\n    print(1)\\nelif co2>=math.ceil(n/2):\\n    print(-1)\\nelse:\\n    print(0)\\n        \\n\", \"n = int(input())\\na = [int(s) for s in input().split()]\\npol = 0\\nneg = 0\\nnul = 0\\n\\nfor el in a:\\n    if el > 0:\\n        pol += 1\\n    elif el < 0:\\n        neg += 1\\n    else:\\n        nul += 1\\n\\npolov = n//2 + n%2\\nd = 0\\nif pol >= polov:\\n    d = 1\\nelif neg >= polov:\\n    d = -1\\nprint(d)\", \"import sys,math,string\\ninput=sys.stdin.readline\\nfrom collections import deque\\nL=lambda : list(map(int,input().split()))\\nLs=lambda : list(input().split())\\nM=lambda : list(map(int,input().split()))\\nn=int(input())\\nl=L()\\ncp=0\\ncn=0\\ncz=0\\nfor i in range(n):\\n    if(l[i]>0):\\n        cp+=1\\n    elif(l[i]<0):\\n        cn+=1\\n    else:\\n        cz+=1\\nif(cp>=(n//2 +(n%2))):\\n    print(1)\\nelif(cn>=(n//2 +(n%2))):\\n    print(-1)\\nelse:\\n    print(0)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nx1, x2 = len([q for q in a if q > 0]), a.count(0)\\nx3 = n-x1-x2\\nif x1 >= (n+1)//2:\\n    print(1)\\nelif x3 >= (n+1)//2:\\n    print(-1)\\nelse:\\n    print(0)\\n\", \"n = int(input())\\na = [int(t) for t in input().split(' ')]\\nplus = len([t for t in a if t > 0])\\nminus = len([t for t in a if t < 0])\\n\\nif plus >= n // 2 + n % 2:\\n    print(1)\\nelif minus >= n // 2 + n % 2:\\n    print(-1)\\nelse:\\n    print(0)\\n\", \"n=int(input())\\narr=list(map(int,input().split()))\\ncount1=0\\ncount2=0\\ncount3=0\\nfor i in range(n):\\n\\tif(arr[i]==0):\\n\\t\\tcount1+=1\\n\\telif(arr[i]>0):\\n\\t\\tcount2+=1\\n\\telse:\\n\\t\\tcount3+=1\\nif(count2>=count1+count3):\\n\\tprint(1)\\nelif(count3>=count1+count2):\\n\\tprint(-1)\\nelse:\\n\\tprint(0)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"5\\n10 0 -7 2 6\\n\",\n    \"7\\n0 0 1 -1 0 0 2\\n\",\n    \"5\\n0 0 0 1 1\\n\",\n    \"1\\n777\\n\",\n    \"2\\n1 0\\n\",\n    \"100\\n39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39\\n\",\n    \"100\\n-322 -198 -448 -249 -935 614 67 -679 -616 430 -71 818 -595 -22 559 -575 -710 50 -542 -144 -977 672 -826 -927 457 518 603 -287 689 -45 -770 208 360 -498 -884 -161 -831 -793 -991 -102 -706 338 298 -897 236 567 -22 577 -77 -481 376 -152 861 559 190 -662 432 -880 -839 737 857 -614 -670 -423 -320 -451 -733 -304 822 -316 52 46 -438 -427 601 -885 -644 518 830 -517 719 643 216 45 -15 382 411 -424 -649 286 -265 -49 704 661 -2 -992 67 -118 299 -420\\n\",\n    \"100\\n621 862 494 -906 906 359 776 0 23 -868 863 -872 273 182 414 675 31 555 0 -423 468 517 577 892 117 664 292 11 105 589 173 455 711 358 229 -666 192 758 6 858 208 628 532 21 69 319 926 988 0 0 0 229 351 708 287 949 429 895 369 0 756 486 2 525 656 -906 742 284 174 510 747 227 274 103 50 -832 656 627 883 -603 927 989 797 463 615 798 832 535 562 517 194 697 661 176 814 -62 0 -886 239 221\\n\",\n    \"10\\n-62 0 94 -49 84 -11 -88 0 -88 94\\n\",\n    \"20\\n74 33 43 41 -83 -30 0 -20 84 99 83 0 64 0 57 46 0 18 94 82\\n\",\n    \"20\\n-892 0 -413 742 0 0 754 23 -515 -293 0 918 -711 -362 -15 -776 -442 -902 116 732\\n\",\n    \"20\\n355 -184 -982 -685 581 139 249 -352 -856 -436 679 397 653 325 -639 -722 769 345 -207 -632\\n\",\n    \"50\\n40 -84 25 0 21 44 96 2 -49 -15 -58 58 0 -49 4 8 13 28 -78 69 0 35 43 0 41 97 99 0 0 5 71 58 10 15 0 30 49 0 -66 15 64 -51 0 50 0 23 43 -43 15 6\\n\",\n    \"50\\n-657 0 -595 -527 -354 718 919 -770 -775 943 -23 0 -428 -322 -68 -429 -784 -981 -294 -260 533 0 0 -96 -839 0 -981 187 248 -56 -557 0 510 -824 -850 -531 -92 386 0 -952 519 -417 811 0 -934 -495 -813 -810 -733 0\\n\",\n    \"50\\n-321 -535 -516 -822 -622 102 145 -607 338 -849 -499 892 -23 -120 40 -864 -452 -641 -902 41 745 -291 887 -175 -288 -69 -590 370 -421 195 904 558 886 89 -764 -378 276 -21 -531 668 872 88 -32 -558 230 181 -639 364 -940 177\\n\",\n    \"50\\n-335 775 108 -928 -539 408 390 500 867 951 301 -113 -711 827 -83 422 -465 -355 -891 -957 -261 -507 930 385 745 198 238 33 805 -956 154 627 812 -518 216 785 817 -965 -916 999 986 718 55 698 -864 512 322 442 188 771\\n\",\n    \"50\\n-306 -646 -572 -364 -706 796 900 -715 -808 -746 -49 -320 983 -414 -996 659 -439 -280 -913 126 -229 427 -493 -316 -831 -292 -942 707 -685 -82 654 490 -313 -660 -960 971 383 430 -145 -689 -757 -811 656 -419 244 203 -605 -287 44 -583\\n\",\n    \"100\\n41 95 -57 5 -37 -58 61 0 59 42 45 64 35 84 11 53 5 -73 99 0 59 68 82 32 50 0 92 0 17 0 -2 82 86 -63 96 -7 0 0 -6 -86 96 88 81 82 0 41 9 0 67 88 80 84 78 0 16 66 0 17 56 46 82 0 11 -79 53 0 -94 73 12 93 30 75 89 0 56 90 79 -39 45 -18 38 52 82 8 -30 0 69 50 22 0 41 0 0 33 17 8 97 79 30 59\\n\",\n    \"100\\n0 -927 -527 -306 -667 -229 -489 -194 -701 0 180 -723 0 3 -857 -918 -217 -471 732 -712 329 -40 0 0 -86 -820 -149 636 -260 -974 0 732 764 -769 916 -489 -916 -747 0 -508 -940 -229 -244 -761 0 -425 122 101 -813 -67 0 0 0 707 -272 -435 0 -736 228 586 826 -795 539 -553 -863 -744 -826 355 0 -6 -824 0 0 -588 -812 0 -109 -408 -153 -799 0 -15 -602 0 -874 -681 440 579 -577 0 -545 836 -810 -147 594 124 337 -477 -749 -313\\n\",\n    \"100\\n-218 113 -746 -267 498 408 116 756 -793 0 -335 -213 593 -467 807 -342 -944 13 637 -82 -16 860 -333 -94 409 -149 -79 -431 -321 974 148 779 -860 -992 -598 0 -300 285 -187 404 -468 0 -586 875 0 0 -26 366 221 -759 -194 -353 -973 -968 -539 0 925 -223 -471 237 208 0 420 688 640 -711 964 661 708 -158 54 864 0 -697 -40 -313 -194 220 -211 108 596 534 148 -137 939 106 -730 -800 -266 433 421 -135 76 -51 -318 0 631 591 46 669\\n\",\n    \"100\\n-261 613 -14 965 -114 -594 516 -631 -477 -352 -481 0 -224 -524 -841 397 -138 -986 -442 -568 -417 -850 -654 -193 -344 -648 -525 -394 -730 -712 -600 0 188 248 -657 -509 -647 -878 175 -894 -557 0 -367 -458 -35 -560 0 -952 -579 -784 -286 -303 -104 -984 0 0 487 -871 223 -527 0 -776 -675 -933 -669 -41 683 0 508 -443 807 -96 -454 -718 -806 -512 -990 -179 -909 0 421 -414 0 -290 0 -929 -675 611 -658 319 873 -421 876 -393 -289 -47 361 -693 -793 -33\\n\",\n    \"50\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"50\\n-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\\n\",\n    \"50\\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\\n\",\n    \"50\\n-9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9 -9\\n\",\n    \"100\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"100\\n-39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39 -39\\n\",\n    \"20\\n-918 -369 -810 -162 486 558 459 -792 -153 756 54 279 324 369 -783 828 -522 -333 -288 -612\\n\",\n    \"50\\n-675 468 324 909 -621 918 954 846 369 -243 207 -756 225 -513 198 603 234 612 585 963 -396 801 -612 720 -432 -774 522 72 -747 -909 513 324 -27 846 -405 -252 -531 189 -36 -927 198 900 558 -711 702 -423 621 -945 -441 -783\\n\",\n    \"100\\n216 -900 99 198 -945 -936 234 243 990 702 -657 225 -594 414 -36 990 720 -558 774 -927 -234 432 -342 180 522 -225 -936 -945 639 -702 -117 -63 720 747 144 -117 855 396 90 486 828 612 423 90 -423 -486 -729 45 -216 486 -108 -432 459 -351 -504 -639 -72 981 468 -81 -891 -999 297 126 -684 -27 477 -405 828 -72 -729 540 657 -270 -603 -9 864 -738 -954 -378 378 324 693 -225 -783 405 -999 -144 45 -207 999 -846 -63 -945 -135 981 54 360 -135 -261\\n\",\n    \"100\\n-880 550 -605 -781 297 -748 209 385 429 748 -880 913 -924 -935 517 11 352 -99 -979 462 990 -495 -44 539 528 -22 -451 44 -781 451 792 275 -462 220 968 726 -88 385 55 77 341 715 275 -693 -880 616 440 -924 -451 -308 -770 -836 473 935 -660 957 418 -264 341 385 -55 -22 880 -539 539 -858 -121 165 -385 -198 99 -88 11 -231 -638 -440 814 -198 902 550 209 275 -319 -66 -176 -297 594 781 -33 -242 -385 -308 77 891 -781 0 -858 -22 825 -759\\n\",\n    \"100\\n39 351 -39 663 -312 741 624 -39 -702 897 -234 -624 195 -897 -273 -624 39 -546 -858 390 390 -273 -741 156 -78 624 -117 390 -975 -234 390 897 936 -897 351 351 234 117 -663 -819 390 468 234 234 -78 -351 -897 702 -195 975 273 -429 624 -273 312 39 -117 -702 -507 195 -312 507 -858 -117 -117 858 468 858 546 702 -858 702 117 -702 663 -78 -702 -741 897 585 429 -741 897 546 195 975 -234 -936 78 -156 819 -897 507 -702 -858 975 -507 858 -390 -117\\n\",\n    \"100\\n663 -408 -459 -255 204 -510 714 -561 -765 -510 765 -765 -357 -867 204 765 408 -153 255 459 306 -102 969 153 918 153 867 765 357 306 -663 918 408 357 714 561 0 459 255 204 867 -714 459 -51 102 -204 -816 -816 357 765 -459 -255 -357 153 408 510 -663 357 -714 408 867 -561 765 -153 969 663 612 51 867 -51 51 -663 204 153 969 663 -357 510 -714 714 -663 102 714 -255 -969 765 0 918 -612 -459 -204 0 306 102 663 -408 357 -510 -102 -510\\n\",\n    \"100\\n-711 632 -395 79 -474 -237 -632 -632 316 -948 0 474 -79 -711 869 869 -948 -79 -316 474 237 -395 948 395 -158 -158 -632 237 -711 -632 -395 0 -316 474 -474 395 -474 79 0 -553 395 -948 -553 474 632 -237 -316 -711 553 948 790 237 -79 -553 -632 553 158 158 158 -79 948 -553 -474 632 395 79 -632 632 -869 -158 632 -553 -553 237 395 -237 711 -316 -948 -474 -632 316 869 869 948 -632 0 -237 -395 -474 79 553 -79 -158 553 711 474 632 711 0\\n\",\n    \"100\\n0 1000 1000 1000 800 300 -500 900 400 -500 -900 400 400 -300 -300 -600 500 0 -500 600 -500 900 1000 -600 -200 300 -100 800 -800 0 200 400 0 -100 100 100 1000 -400 100 400 -900 -500 -900 400 -700 -400 800 -900 300 -300 -400 500 -900 1000 700 -200 500 400 -200 -300 -200 -600 -600 -800 300 -100 100 -1000 100 -800 -500 -800 0 100 900 -200 -100 -400 -500 0 -400 900 600 400 -200 100 400 800 -800 700 600 -200 1000 -400 -200 -200 100 -1000 700 -600\\n\",\n    \"20\\n-828 -621 -36 -225 837 126 981 450 522 -522 -684 684 -477 792 -846 -405 639 495 27 -387\\n\",\n    \"50\\n351 -729 -522 -936 -342 -189 -441 -279 -702 -369 864 873 -297 -261 -207 -54 -900 -675 -585 261 27 594 -360 702 -621 -774 729 846 864 -45 639 -216 -18 882 414 630 855 810 -135 783 -765 882 144 -477 -36 180 216 -180 -306 774\\n\",\n    \"100\\n-270 -522 -855 -324 387 -297 126 -387 -927 414 882 945 -459 396 261 -243 234 -270 315 999 477 -315 -972 -396 -81 -207 522 9 477 -459 -18 -234 909 225 -18 396 351 297 -540 -981 648 -657 360 945 -486 -396 288 -567 9 882 -495 -585 729 -405 -864 468 -18 -279 315 -234 9 -963 -639 -540 783 279 -27 486 441 -522 -441 675 -495 -918 405 63 324 -81 -198 216 189 234 -414 -828 -675 144 -954 288 810 90 -918 63 -117 594 -846 972 873 72 504 -756\\n\",\n    \"100\\n-473 517 517 154 -814 -836 649 198 803 -209 -363 759 -44 -242 -473 -715 561 451 -462 -110 -957 -792 462 132 -627 -473 363 572 -176 -935 -704 539 -286 22 374 286 451 748 -198 11 -616 319 264 -198 -638 -77 374 990 506 957 517 -297 -781 979 -121 539 -605 -264 946 869 616 -121 -792 -957 -22 528 715 869 506 -385 -869 121 -220 583 814 -814 33 -858 -121 308 825 55 -495 803 88 -187 -165 869 946 -594 -704 -209 11 770 -825 -44 -946 341 -330 -231\\n\",\n    \"100\\n-900 -700 400 200 -800 500 1000 500 -300 -300 -100 900 -300 -300 900 -200 900 -800 -200 1000 -500 -200 -200 500 100 500 100 -400 -100 400 -500 700 400 -900 -300 -900 -700 1000 -800 1000 700 -200 -400 -900 -1000 400 300 800 -200 300 -500 -700 200 -200 -900 800 100 -700 -800 900 -900 -700 500 600 -700 300 -100 1000 100 -800 -200 -600 200 600 -100 -500 900 800 500 -600 900 600 600 -1000 800 -400 -800 900 500 -300 -300 400 1000 400 -1000 -200 -200 -100 -200 -800\\n\",\n    \"20\\n0 0 0 -576 0 -207 0 -639 0 0 468 0 0 873 0 0 0 0 81 0\\n\",\n    \"50\\n-81 -405 630 0 0 0 0 0 891 0 0 0 0 0 -18 0 0 0 0 0 243 -216 0 702 0 -909 -972 0 0 0 -450 0 0 882 0 0 0 0 0 -972 0 0 0 0 -333 -261 945 -720 0 -882\\n\",\n    \"100\\n-972 0 -747 0 0 -918 396 0 0 -144 0 0 0 0 774 0 0 0 0 0 0 0 0 0 0 0 387 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 855 0 603 0 0 0 675 -675 621 0 0 0 -45 612 -549 -153 0 0 0 0 0 -486 0 0 0 0 0 0 -594 0 0 0 -225 0 -54 693 0 0 0 0 0 0 0 873 0 0 -198 0 0 0 0 558 0 918\\n\",\n    \"100\\n0 0 0 0 0 0 0 0 539 0 0 -957 0 0 0 -220 0 550 0 0 0 660 0 0 -33 0 0 -935 0 0 0 0 0 0 0 0 0 0 0 0 0 -55 297 0 0 0 0 0 836 0 -451 0 0 0 0 0 -176 0 0 0 0 0 0 792 -847 330 0 0 0 715 0 0 0 517 -682 0 0 0 0 0 0 0 0 506 484 0 -396 0 0 429 0 0 0 0 0 0 0 968 0 0\\n\",\n    \"100\\n0 0 0 0 0 0 0 0 0 0 0 600 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 900 100 0 0 0 1000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"100\\n49 0 -87 -39 0 0 -39 73 1 88 45 0 87 0 0 0 90 54 59 0 0 0 -96 -68 9 -26 0 68 21 59 -21 90 64 0 -62 78 -53 0 0 72 0 0 0 14 -79 87 0 75 0 97 77 0 37 0 1 18 0 0 0 30 47 39 0 -69 0 0 0 71 0 0 0 -85 0 44 0 0 0 -36 0 30 0 0 0 0 0 9 40 0 0 61 -35 0 0 0 0 -32 0 28 0 -100\\n\",\n    \"100\\n-801 -258 -829 0 -839 -920 0 0 979 -896 -581 -132 -945 -274 -538 117 0 27 0 469 129 0 -608 685 0 -915 273 -929 0 -418 -57 517 -230 -775 0 -839 475 -350 882 363 419 0 -120 0 -416 808 0 -726 286 0 0 -777 -80 -331 0 278 -328 0 -534 0 0 -581 -463 0 -244 0 -693 0 0 -754 120 -254 -237 0 -452 0 -478 -509 0 -688 0 911 -219 368 0 0 -598 0 -575 0 0 -897 0 0 0 0 373 0 490 950\\n\",\n    \"100\\n303 599 954 131 507 906 227 111 187 395 959 509 891 669 677 246 430 582 326 235 331 395 550 224 410 278 385 371 -829 514 600 451 337 786 508 939 548 23 583 342 870 585 16 914 482 619 781 583 683 913 663 727 329 170 475 557 356 8 342 536 821 348 942 486 497 732 213 659 351 -727 471 593 399 582 608 799 922 618 752 861 206 530 513 259 185 435 437 15 451 919 42 549 14 25 599 454 407 53 382 -540\\n\",\n    \"100\\n-246 -98 -29 -208 -305 -231 -309 -632 -255 -293 -810 -283 -962 -593 -203 -40 -910 -934 -640 -520 -481 -988 -774 -696 -700 -875 -418 -750 -193 -863 -163 -498 -77 -627 -786 -820 -469 -799 -50 -162 -938 -133 -842 -144 -383 -245 -983 -975 -279 -86 -725 -304 -313 -574 -509 -192 -110 -726 -789 -36 -151 -792 -285 -988 -617 -738 -462 -921 -882 -299 -379 -640 -762 -363 -41 -942 -693 -92 -912 -187 -614 -509 -225 -649 -443 -867 -503 -596 -757 -711 -864 -378 -974 -141 -491 -98 -506 -113 -322 -558\\n\",\n    \"100\\n34 -601 426 -318 -52 -51 0 782 711 0 502 746 -450 1 695 -606 951 942 14 0 -695 806 -195 -643 445 -903 443 523 -940 634 -229 -244 -303 -970 -564 -755 344 469 0 -293 306 496 786 62 0 -110 640 339 630 -276 -286 838 137 -508 811 -385 -784 -834 937 -361 -799 534 368 -352 -702 353 -437 -440 213 56 637 -814 -169 -56 930 720 -100 -696 -749 463 -32 761 -137 181 428 -408 0 727 -78 963 -606 -131 -537 827 951 -753 58 -21 -261 636\\n\",\n    \"100\\n642 -529 -322 -893 -539 -300 -286 -503 -750 0 974 -560 -806 0 294 0 -964 -555 501 -308 -160 -369 -175 0 -257 -361 -976 -6 0 836 915 -353 -134 0 -511 -290 -854 87 190 790 -229 27 -67 -699 -200 -589 443 -534 -621 -265 0 -666 -497 999 -700 -149 -668 94 -623 -160 -385 -422 88 -818 -998 -665 -229 143 133 241 840 0 -764 873 -372 -741 262 -462 -481 -630 0 848 -875 65 302 -231 -514 -275 -874 -447 195 -393 350 678 -991 -904 -251 0 -376 -419\\n\",\n    \"100\\n-48 842 18 424 -969 -357 -781 -517 -941 -957 -548 23 0 215 0 -649 -509 955 376 824 62 0 -5 674 890 263 -567 585 488 -862 66 961 75 205 838 756 514 -806 0 -884 692 0 301 -722 457 838 -649 -785 0 -775 449 -436 524 792 999 953 470 39 -61 0 860 65 420 382 0 11 0 117 767 171 0 577 185 385 387 -612 0 277 -738 -691 78 396 6 -766 155 119 -588 0 -724 228 580 200 -375 620 615 87 574 740 -398 698\\n\",\n    \"10\\n1 1 1 1 1 -1 -1 -1 -1 -1\\n\",\n    \"1\\n0\\n\",\n    \"3\\n-1 0 1\\n\",\n    \"3\\n0 0 -1\\n\",\n    \"4\\n2 2 -2 -2\\n\",\n    \"6\\n1 1 1 -1 -1 -1\\n\",\n    \"7\\n1 2 3 0 0 -1 -1\\n\",\n    \"5\\n0 1 2 -1 -2\\n\",\n    \"2\\n-1 0\\n\",\n    \"5\\n-1 -1 -1 -1 -1\\n\",\n    \"5\\n100 0 0 0 0\\n\",\n    \"4\\n1 1 -1 -1\\n\",\n    \"4\\n1 0 -1 -1\\n\",\n    \"1\\n-1\\n\",\n    \"5\\n1 1 -1 -1 0\\n\",\n    \"9\\n0 0 0 1 1 1 1 -1 -1\\n\",\n    \"2\\n-1 1\\n\",\n    \"4\\n0 0 -1 1\\n\",\n    \"5\\n1 1 0 0 -1\\n\",\n    \"4\\n1 -1 0 0\\n\",\n    \"4\\n-1 -1 0 1\\n\",\n    \"8\\n1 2 3 4 -1 -2 -3 -4\\n\",\n    \"6\\n-1 -1 -1 0 0 0\\n\",\n    \"3\\n-1 0 0\\n\",\n    \"5\\n-1 -2 -3 0 80\\n\",\n    \"8\\n-1 -1 1 0 0 0 0 0\\n\",\n    \"5\\n0 0 1 1 -1\\n\",\n    \"3\\n0 -1 1\\n\",\n    \"3\\n1 0 -1\\n\",\n    \"1\\n1000\\n\",\n    \"9\\n2 2 2 2 -3 -3 -3 -3 0\\n\",\n    \"4\\n-1 -1 0 0\\n\",\n    \"7\\n-1 -1 -1 1 1 0 0\\n\",\n    \"5\\n-1 -1 -1 0 0\\n\",\n    \"5\\n-1 -2 -3 -4 -5\\n\",\n    \"6\\n1 2 3 -1 -2 -3\\n\",\n    \"4\\n-1 -2 0 2\\n\",\n    \"5\\n-1 -1 0 0 0\\n\",\n    \"4\\n0 0 -1 -1\\n\",\n    \"6\\n0 0 1 1 -1 -1\\n\",\n    \"3\\n-1 -1 0\\n\",\n    \"6\\n-2 -1 0 0 0 0\\n\",\n    \"9\\n1 1 1 0 0 0 -1 -1 -1\\n\",\n    \"2\\n1 -1\\n\",\n    \"8\\n-1 -1 -1 -1 0 0 1 1\\n\",\n    \"6\\n1 1 0 0 -1 -1\\n\",\n    \"5\\n1 1 0 -1 -1\\n\",\n    \"9\\n1 2 3 -1 -2 -3 0 0 0\\n\",\n    \"5\\n2 2 -2 -2 0\\n\",\n    \"5\\n1 -1 0 0 0\\n\",\n    \"6\\n1 1 -1 -1 0 0\\n\",\n    \"4\\n0 1 0 -1\\n\",\n    \"5\\n-2 -2 -2 1 1\\n\",\n    \"7\\n1 1 1 0 -1 -1 -1\\n\"\n  ],\n  \"outputs\": [\n    \"1\",\n    \"0\",\n    \"0\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"-1\",\n    \"1\",\n    \"-1\",\n    \"1\",\n    \"-1\",\n    \"1\",\n    \"1\",\n    \"-1\",\n    \"-1\",\n    \"1\",\n    \"-1\",\n    \"1\",\n    \"-1\",\n    \"0\",\n    \"-1\",\n    \"1\",\n    \"-1\",\n    \"1\",\n    \"-1\",\n    \"0\",\n    \"-1\",\n    \"-1\",\n    \"1\",\n    \"-1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"-1\",\n    \"0\",\n    \"1\",\n    \"-1\",\n    \"1\",\n    \"1\",\n    \"-1\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"1\",\n    \"-1\",\n    \"0\",\n    \"-1\",\n    \"1\",\n    \"1\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"1\",\n    \"1\",\n    \"0\",\n    \"0\",\n    \"-1\",\n    \"-1\",\n    \"0\",\n    \"1\",\n    \"-1\",\n    \"-1\",\n    \"0\",\n    \"0\",\n    \"1\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"-1\",\n    \"1\",\n    \"-1\",\n    \"0\",\n    \"-1\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"1\",\n    \"0\",\n    \"-1\",\n    \"0\",\n    \"-1\",\n    \"-1\",\n    \"1\",\n    \"-1\",\n    \"0\",\n    \"-1\",\n    \"0\",\n    \"-1\",\n    \"0\",\n    \"0\",\n    \"1\",\n    \"-1\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"-1\",\n    \"0\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1130/A",
  "starter_code": ""
}