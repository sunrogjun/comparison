{
  "task_id": "APPS/63",
  "problem_id": 63,
  "prompt": "Vova again tries to play some computer card game.\n\nThe rules of deck creation in this game are simple. Vova is given an existing deck of n cards and a magic number k. The order of the cards in the deck is fixed. Each card has a number written on it; number a_{i} is written on the i-th card in the deck.\n\nAfter receiving the deck and the magic number, Vova removes x (possibly x = 0) cards from the top of the deck, y (possibly y = 0) cards from the bottom of the deck, and the rest of the deck is his new deck (Vova has to leave at least one card in the deck after removing cards). So Vova's new deck actually contains cards x + 1, x + 2, ... n - y - 1, n - y from the original deck.\n\nVova's new deck is considered valid iff the product of all numbers written on the cards in his new deck is divisible by k. So Vova received a deck (possibly not a valid one) and a number k, and now he wonders, how many ways are there to choose x and y so the deck he will get after removing x cards from the top and y cards from the bottom is valid?\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 10^9).\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 the numbers written on the cards.\n\n\n-----Output-----\n\nPrint the number of ways to choose x and y so the resulting deck is valid.\n\n\n-----Examples-----\nInput\n3 4\n6 2 8\n\nOutput\n4\n\nInput\n3 6\n9 1 14\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example the possible values of x and y are:\n\n  x = 0, y = 0;  x = 1, y = 0;  x = 2, y = 0;  x = 0, y = 1.",
  "solutions": "[\"n,k=map(int,input().split())\\nl=list(map(int,input().split()))\\npf=[]\\nneeded=[]\\nfor i in range(2,40000):\\n\\tif k%i==0:\\n\\t\\tpf.append(i)\\n\\t\\tc=0\\n\\t\\twhile k%i==0:\\n\\t\\t\\tk//=i\\n\\t\\t\\tc+=1\\n\\t\\tneeded.append(c)\\nif k>1:\\n\\tpf.append(k)\\n\\tneeded.append(1)\\npfl=len(pf)\\ncnt=[[0]*n for i in range(pfl)]\\nfor i in range(n):\\n\\tfor j in range(len(pf)):\\n\\t\\tc=0\\n\\t\\twhile l[i]%pf[j]==0:\\n\\t\\t\\tc+=1\\n\\t\\t\\tl[i]//=pf[j]\\n\\t\\tcnt[j][i]=c\\nhave=[sum(i) for i in cnt]\\npos=n\\ndef ok():\\n\\tfor i in range(len(pf)):\\n\\t\\tif have[i]<needed[i]:\\n\\t\\t\\treturn False\\n\\treturn True\\nif not ok():\\n\\tprint(0)\\n\\tquit()\\nfor i in range(n-1,0,-1):\\n\\tfor j in range(len(pf)):\\n\\t\\thave[j]-=cnt[j][i]\\n\\tif not ok():\\n\\t\\tfor j in range(len(pf)):\\n\\t\\t\\thave[j]+=cnt[j][i]\\n\\t\\tbreak\\n\\tpos=i\\nans=n-pos+1\\nfor x in range(n-1):\\n\\tfor j in range(len(pf)):\\n\\t\\thave[j]-=cnt[j][x]\\n\\tif pos==(x+1):\\n\\t\\tfor j in range(len(pf)):\\n\\t\\t\\thave[j]+=cnt[j][pos]\\n\\t\\tpos+=1\\n\\twhile pos<n:\\n\\t\\tif ok():\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tfor i in range(len(pf)):\\n\\t\\t\\t\\thave[i]+=cnt[i][pos]\\n\\t\\t\\tpos+=1\\n\\tif ok():\\n\\t\\tans+=n-pos+1\\n\\telse:\\n\\t\\tbreak\\nprint(ans)\", \"def gcd(a,b):\\n  if a == 0:\\n    return b\\n  return gcd(b%a,a)\\n\\nn,k = [int(x) for x in input().split()]\\na = [gcd(int(x),k) for x in input().split()]\\n\\nif k == 1:\\n  print(((n+1)*(n+2))//2-n-1)\\nelse:\\n  s = 0\\n  e = 0\\n  total = ((n+1)*(n+2))//2-1-n\\n  #print(total)\\n  #extra = {}\\n  c = 1\\n  \\n  while e < n:\\n    flag = False\\n    while c%k != 0 and e < n:\\n      total -= e-s\\n      c *= a[e]\\n      e += 1\\n    while c%k == 0 and s < e:\\n      c //= a[s]\\n      s += 1\\n  total -= e-s\\n  print(total)\\n\", \"import sys\\n\\n\\ndef get_primes(n: int):\\n    from itertools import chain\\n    from array import array\\n    primes = {2, 3}\\n    is_prime = (array('b', (0, 0, 1, 1, 0, 1, 0)) +\\n                array('b', (1, 0, 0, 0, 1, 0))*((n-1)//6))\\n\\n    for i in chain.from_iterable((list(range(5, n+1, 6)), list(range(7, n+1, 6)))):\\n        if is_prime[i]:\\n            primes.add(i)\\n            for j in range(i*3, n+1, i*2):\\n                is_prime[j] = 0\\n\\n    return is_prime, primes\\n\\n\\nn, k = list(map(int, input().split()))\\ncards = list(map(int, input().split()))\\n_, primes = get_primes(32000)\\n\\ndiv, div_cnt = [], []\\nfor p in primes:\\n    if k % p == 0:\\n        div.append(p)\\n        div_cnt.append(0)\\n        while k % p == 0:\\n            div_cnt[-1] += 1\\n            k //= p\\nif k > 1:\\n    div.append(k)\\n    div_cnt.append(1)\\n\\nm = len(div)\\nacc = [[0]*m for _ in range(n+1)]\\n\\nfor i, x in enumerate(cards, start=1):\\n    for j in range(m):\\n        acc[i][j] += acc[i-1][j]\\n        while x % div[j] == 0:\\n            acc[i][j] += 1\\n            x //= div[j]\\n\\nans = 0\\nj = 0\\nfor i in range(n):\\n    j = max(j, i+1)\\n    while j <= n and any(acc[j][k]-acc[i][k] < div_cnt[k] for k in range(m)):\\n        j += 1\\n    if j > n:\\n        break\\n    ans += n - j + 1\\n\\nprint(ans)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3 4\\n6 2 8\\n\",\n    \"3 6\\n9 1 14\\n\",\n    \"5 1\\n1 3 1 3 1\\n\",\n    \"5 1\\n5 5 5 5 5\\n\",\n    \"5 1\\n5 4 4 4 4\\n\",\n    \"100 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"100 1\\n3 3 2 1 1 2 1 2 3 4 1 5 2 4 5 1 1 3 2 3 4 2 1 3 4 4 5 5 1 5 2 5 3 3 1 1 1 3 2 2 3 4 4 4 4 3 1 3 5 3 3 3 3 2 3 2 2 3 3 1 2 4 3 2 2 5 3 1 5 2 2 5 1 2 1 1 5 1 5 2 4 5 3 4 2 5 4 2 2 5 5 5 3 3 5 3 4 3 3 1\\n\",\n    \"100 5\\n4 4 3 2 4 4 1 2 2 1 5 3 2 5 5 3 2 3 4 5 2 2 3 4 2 4 3 1 2 3 5 5 1 3 3 5 2 3 3 4 1 3 1 5 4 4 2 1 5 1 4 4 1 5 1 1 5 5 5 4 1 3 1 2 3 2 4 5 5 1 3 4 3 3 1 2 2 4 1 5 1 1 2 4 4 4 5 5 5 3 4 3 3 3 3 2 1 1 5 5\\n\",\n    \"100 6\\n4 4 1 1 1 1 3 3 5 5 4 2 2 4 3 4 4 5 5 4 5 1 3 1 5 4 5 1 2 5 5 2 2 4 2 4 4 2 5 5 3 3 1 3 3 5 2 3 1 4 1 4 4 1 5 5 1 2 3 2 3 3 5 3 4 2 3 4 3 1 5 3 5 5 3 5 4 4 3 1 1 2 1 2 1 3 2 4 3 2 1 4 3 1 1 5 1 5 4 3\\n\",\n    \"100 72\\n8 8 7 9 6 1 4 5 3 7 5 10 5 4 1 3 4 1 3 1 6 6 4 5 4 5 6 1 10 7 9 1 6 10 6 6 9 3 3 4 5 9 4 9 8 1 5 9 3 7 1 8 5 2 1 1 7 7 7 6 6 4 2 9 10 2 8 3 1 1 4 8 5 9 7 10 9 4 2 3 7 7 6 7 8 5 1 3 8 5 1 8 9 10 3 7 1 8 10 5\\n\",\n    \"100 72\\n3 2 1 3 3 3 4 3 5 5 2 5 1 2 2 2 1 4 1 5 1 4 5 4 3 1 4 3 4 4 1 4 4 3 4 1 4 4 5 2 2 3 3 5 4 5 4 2 4 3 1 1 1 4 5 5 3 1 5 3 4 4 5 3 5 1 4 3 2 2 1 4 2 1 3 2 4 2 1 4 4 1 3 4 4 4 1 5 5 2 5 2 3 1 5 1 1 1 2 3\\n\",\n    \"2 999634589\\n31607 31627\\n\",\n    \"1 1\\n1\\n\",\n    \"1 2\\n1\\n\",\n    \"1 3\\n1\\n\",\n    \"1 4\\n1\\n\",\n    \"1 5\\n3\\n\",\n    \"1 6\\n4\\n\",\n    \"1 7\\n2\\n\",\n    \"1 8\\n3\\n\",\n    \"1 9\\n5\\n\",\n    \"1 10\\n3\\n\",\n    \"2 1\\n1 1\\n\",\n    \"2 2\\n2 2\\n\",\n    \"2 3\\n1 2\\n\",\n    \"2 4\\n1 2\\n\",\n    \"2 5\\n1 1\\n\",\n    \"2 6\\n2 1\\n\",\n    \"2 7\\n1 4\\n\",\n    \"2 8\\n5 3\\n\",\n    \"2 9\\n2 2\\n\",\n    \"2 10\\n6 1\\n\",\n    \"3 1\\n1 1 1\\n\",\n    \"3 2\\n2 2 1\\n\",\n    \"3 3\\n2 1 2\\n\",\n    \"3 4\\n2 2 2\\n\",\n    \"3 5\\n1 1 2\\n\",\n    \"3 6\\n4 3 2\\n\",\n    \"3 7\\n3 4 1\\n\",\n    \"3 8\\n5 1 4\\n\",\n    \"3 9\\n3 2 1\\n\",\n    \"3 10\\n6 5 5\\n\",\n    \"4 1\\n1 1 1 1\\n\",\n    \"4 2\\n2 2 1 2\\n\",\n    \"4 3\\n2 1 1 1\\n\",\n    \"4 4\\n2 2 1 1\\n\",\n    \"4 5\\n2 3 2 1\\n\",\n    \"4 6\\n1 1 3 3\\n\",\n    \"4 7\\n1 1 2 2\\n\",\n    \"4 8\\n5 4 5 5\\n\",\n    \"4 9\\n1 1 4 2\\n\",\n    \"4 10\\n2 6 2 1\\n\",\n    \"5 1\\n1 1 1 1 1\\n\",\n    \"5 2\\n2 2 1 2 1\\n\",\n    \"5 3\\n2 1 1 2 1\\n\",\n    \"5 4\\n2 2 1 3 1\\n\",\n    \"5 5\\n2 3 1 1 3\\n\",\n    \"5 6\\n3 4 3 4 3\\n\",\n    \"5 7\\n3 1 3 2 4\\n\",\n    \"5 8\\n2 2 3 3 1\\n\",\n    \"5 9\\n3 1 3 3 4\\n\",\n    \"5 10\\n3 6 6 1 5\\n\",\n    \"6 1\\n1 1 1 1 1 1\\n\",\n    \"6 2\\n1 2 2 1 1 1\\n\",\n    \"6 3\\n2 2 2 2 1 2\\n\",\n    \"6 4\\n1 3 3 3 3 2\\n\",\n    \"6 5\\n2 3 3 2 1 2\\n\",\n    \"6 6\\n1 2 4 1 4 4\\n\",\n    \"6 7\\n2 2 4 3 2 1\\n\",\n    \"6 8\\n3 2 3 5 5 3\\n\",\n    \"6 9\\n1 4 1 2 1 1\\n\",\n    \"6 10\\n1 2 5 6 6 6\\n\",\n    \"7 1\\n1 1 1 1 1 1 1\\n\",\n    \"7 2\\n1 1 2 2 2 2 1\\n\",\n    \"7 3\\n2 2 1 1 2 2 2\\n\",\n    \"7 4\\n3 2 1 2 1 1 1\\n\",\n    \"7 5\\n2 3 3 3 2 3 2\\n\",\n    \"7 6\\n3 4 4 1 4 3 2\\n\",\n    \"7 7\\n4 2 4 4 1 4 4\\n\",\n    \"7 8\\n4 4 2 4 2 5 3\\n\",\n    \"7 9\\n2 1 3 4 4 5 4\\n\",\n    \"7 10\\n6 3 3 5 3 6 1\\n\",\n    \"8 1\\n1 1 1 1 1 1 1 1\\n\",\n    \"8 2\\n1 1 1 1 1 1 1 2\\n\",\n    \"8 3\\n1 1 2 2 1 1 2 2\\n\",\n    \"8 4\\n2 3 2 3 3 3 2 3\\n\",\n    \"8 5\\n1 3 1 2 2 2 1 3\\n\",\n    \"8 6\\n4 2 4 2 1 2 1 4\\n\",\n    \"8 7\\n2 2 1 4 4 4 2 2\\n\",\n    \"8 8\\n5 2 1 2 4 2 2 4\\n\",\n    \"8 9\\n4 4 2 2 5 5 4 1\\n\",\n    \"8 10\\n2 1 4 4 3 4 4 6\\n\",\n    \"9 1\\n1 1 1 1 1 1 1 1 1\\n\",\n    \"9 2\\n1 1 1 2 1 1 2 2 2\\n\",\n    \"9 3\\n1 1 1 2 2 1 1 2 1\\n\",\n    \"9 4\\n1 1 2 1 2 1 1 1 1\\n\",\n    \"9 5\\n3 2 3 2 3 1 1 3 2\\n\",\n    \"9 6\\n2 1 1 3 2 4 1 2 2\\n\",\n    \"9 7\\n4 3 2 1 2 3 3 4 4\\n\",\n    \"9 8\\n5 5 2 1 3 1 3 1 3\\n\",\n    \"9 9\\n2 4 1 4 4 3 3 4 1\\n\",\n    \"9 10\\n4 3 2 5 2 2 2 2 6\\n\",\n    \"10 1\\n1 1 1 1 1 1 1 1 1 1\\n\",\n    \"10 2\\n2 2 2 2 2 2 2 1 2 1\\n\",\n    \"10 3\\n2 2 1 1 2 2 2 2 1 2\\n\",\n    \"10 4\\n1 1 2 3 3 1 2 2 2 3\\n\",\n    \"10 5\\n3 3 2 2 3 1 1 1 3 1\\n\",\n    \"10 6\\n4 4 4 3 2 1 1 1 2 4\\n\",\n    \"10 7\\n4 2 2 2 3 3 2 4 4 3\\n\",\n    \"10 8\\n5 4 1 4 3 2 1 2 3 3\\n\",\n    \"10 9\\n1 2 3 4 5 2 3 5 5 4\\n\",\n    \"10 10\\n5 3 2 5 1 2 5 1 5 1\\n\",\n    \"1 1000000000\\n1\\n\",\n    \"1 1000000000\\n1000000000\\n\",\n    \"1 100000000\\n1000000000\\n\",\n    \"1 1\\n1000000000\\n\"\n  ],\n  \"outputs\": [\n    \"4\\n\",\n    \"1\\n\",\n    \"15\\n\",\n    \"15\\n\",\n    \"15\\n\",\n    \"5050\\n\",\n    \"5050\\n\",\n    \"4713\\n\",\n    \"4580\\n\",\n    \"4549\\n\",\n    \"4123\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"10\\n\",\n    \"9\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"15\\n\",\n    \"13\\n\",\n    \"0\\n\",\n    \"4\\n\",\n    \"0\\n\",\n    \"10\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"7\\n\",\n    \"3\\n\",\n    \"21\\n\",\n    \"14\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"11\\n\",\n    \"28\\n\",\n    \"24\\n\",\n    \"0\\n\",\n    \"8\\n\",\n    \"0\\n\",\n    \"15\\n\",\n    \"0\\n\",\n    \"18\\n\",\n    \"0\\n\",\n    \"10\\n\",\n    \"36\\n\",\n    \"8\\n\",\n    \"0\\n\",\n    \"10\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"21\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"45\\n\",\n    \"36\\n\",\n    \"0\\n\",\n    \"15\\n\",\n    \"0\\n\",\n    \"21\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"18\\n\",\n    \"23\\n\",\n    \"55\\n\",\n    \"53\\n\",\n    \"0\\n\",\n    \"26\\n\",\n    \"0\\n\",\n    \"27\\n\",\n    \"0\\n\",\n    \"24\\n\",\n    \"12\\n\",\n    \"35\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/818/E",
  "starter_code": ""
}