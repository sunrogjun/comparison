{
  "task_id": "APPS/285",
  "problem_id": 285,
  "prompt": "The teacher gave Anton a large geometry homework, but he didn't do it (as usual) as he participated in a regular round on Codeforces. In the task he was given a set of n lines defined by the equations y = k_{i}\u00b7x + b_{i}. It was necessary to determine whether there is at least one point of intersection of two of these lines, that lays strictly inside the strip between x_1 < x_2. In other words, is it true that there are 1 \u2264 i < j \u2264 n and x', y', such that:   y' = k_{i} * x' + b_{i}, that is, point (x', y') belongs to the line number i;  y' = k_{j} * x' + b_{j}, that is, point (x', y') belongs to the line number j;  x_1 < x' < x_2, that is, point (x', y') lies inside the strip bounded by x_1 < x_2. \n\nYou can't leave Anton in trouble, can you? Write a program that solves the given task.\n\n\n-----Input-----\n\nThe first line of the input contains an integer n (2 \u2264 n \u2264 100 000)\u00a0\u2014 the number of lines in the task given to Anton. The second line contains integers x_1 and x_2 ( - 1 000 000 \u2264 x_1 < x_2 \u2264 1 000 000) defining the strip inside which you need to find a point of intersection of at least two lines.\n\nThe following n lines contain integers k_{i}, b_{i} ( - 1 000 000 \u2264 k_{i}, b_{i} \u2264 1 000 000)\u00a0\u2014 the descriptions of the lines. It is guaranteed that all lines are pairwise distinct, that is, for any two i \u2260 j it is true that either k_{i} \u2260 k_{j}, or b_{i} \u2260 b_{j}.\n\n\n-----Output-----\n\nPrint \"Yes\" (without quotes), if there is at least one intersection of two distinct lines, located strictly inside the strip. Otherwise print \"No\" (without quotes).\n\n\n-----Examples-----\nInput\n4\n1 2\n1 2\n1 0\n0 1\n0 2\n\nOutput\nNO\nInput\n2\n1 3\n1 0\n-1 3\n\nOutput\nYES\nInput\n2\n1 3\n1 0\n0 2\n\nOutput\nYES\nInput\n2\n1 3\n1 0\n0 3\n\nOutput\nNO\n\n\n-----Note-----\n\nIn the first sample there are intersections located on the border of the strip, but there are no intersections located strictly inside it. [Image]",
  "solutions": "[\"k = []\\n\\nx = int(input())\\nc, d = list(map(int, input().split(' ')))\\nfor i in range(x):\\n    a, b = list(map(int, input().split(' ')))\\n    k.append([c*a+b, d*a+b])\\n\\nk.sort()\\nfor i in range(len(k)-1):\\n    if k[i+1][1] < k[i][1]:\\n        print(\\\"YES\\\")\\n        quit()\\nprint(\\\"NO\\\")\\n\", \"n = int(input())\\nx1, x2 = list(map(float, input().split()))\\nx1 += 1e-10\\nx2 -= 1e-10\\nlines = [tuple(map(float, input().split())) for _ in range(n)]\\nl1 = sorted((k * x1 + b, i) for i, (k, b) in enumerate(lines))\\nl2 = sorted((k * x2 + b, i) for i, (k, b) in enumerate(lines))\\nif [i for x, i in l1] == [i for x, i in l2]:\\n    print('NO')\\nelse:\\n    print('YES')\\n\", \"n = int(input())\\npoints = []\\nflag = False\\nx1, x2 = map(int, input().split())\\nfor i in range(n):\\n    a, b = map(int, input().split())\\n    points.append((a, b))\\n\\n\\np = []\\n\\nfor i in range(n):\\n    p.append((points[i][0] * x1 + points[i][1], points[i][0] * x2 + points[i][1]))\\n\\np.sort()\\nfor i in range(n - 1):\\n    if p[i][0] != p[i + 1][0]:\\n        if p[i][1] > p[i + 1][1]:\\n            flag = True\\nif flag:\\n    print('YES')\\nelse:\\n    print('NO')\", \"n=int(input())\\nl,r=list(map(int,input().split()))\\ni=0\\ns=[]\\nwhile i<n:\\n\\tk,b=list(map(int,input().split()))\\n\\ts.append([l*k+b,r*k+b])\\n\\ti+=1\\ns.sort()\\n\\ny=0\\ni=1\\nwhile i<n:\\n\\tif s[i-1][1]>s[i][1]:y=1\\n\\ti+=1\\nprint([\\\"NO\\\",\\\"YES\\\"][y])\\n\", \"def rline():\\n    return [int(i) for i in input().split()]\\n\\nN = int(input())\\nL, R = rline()\\nl = [rline() for i in range(N)]\\n\\natL = []\\natR = []\\n\\nfor i in range(N):\\n    k, b = l[i]\\n    atL.append((k*L + b, k, i))\\n    atR.append((k*R + b, -k, i))\\n\\natL.sort()\\natR.sort()\\natL = [i[2] for i in atL]\\natR = [i[2] for i in atR]\\n\\nprint([\\\"YES\\\", \\\"NO\\\"][atL == atR])\\n\", \"n = int(input())\\nx1, x2 = list(map(int, input().split(\\\" \\\")))\\n\\ndef intercepts(k, b):\\n    y1 = k*x1+b\\n    y2 = k*x2+b\\n    return [y1, y2]\\n\\ninter=[]\\nfor i in range (n):\\n    k, b = list(map(int, input().split(\\\" \\\")))\\n    inter += [intercepts(k, b)]\\n\\ninter.sort()\\nright=[]\\n\\nfor i in range (n):\\n    intercept = inter[i]\\n    right += [intercept[1]]\\n    \\nright2=[]\\nfor thing in right:\\n    right2+=[thing]\\nright.sort()\\n\\nif right == right2:\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\\n\\n\", \"n=int(input())\\ndone=False\\na,b=map(int,input().split())\\na+=1/4000000\\nb-=1/4000000\\nlol=[]\\nwow=[]\\nfor i in range(n):\\n    k,c=map(int,input().split())\\n    lol.append([k*a+c,i])\\n    wow.append([k*b+c,i])\\nwow.sort()\\nlol.sort()\\nfor i in range(n):\\n    if lol[i][1]!=wow[i][1]:\\n        print('YES')\\n        done=True\\n        break\\nif not done:\\n    print('NO')\", \"def cross(l1, l2, x2):\\n    return l2[0] * x2 + l2[1] < l1[0] * x2 + l1[1]\\n\\n\\ndef __starting_point():\\n    n = int(input())\\n    x1, x2 = list(map(int, input().split()))\\n    data = [tuple(map(int, input().split())) for i in range(n)]\\n\\n    data = list(sorted(data, key=lambda x: (x[0] * x1 + x[1], x[0] * x2 + x[1])))\\n    for i in range(len(data) - 1):\\n        if cross(data[i], data[i + 1], x2):\\n            print('YES')\\n            return\\n\\n    print('NO')\\n\\n__starting_point()\", \"n = int(input())\\na = input().split(\\\" \\\")\\nx1 = int(a[0])\\nx2 = int(a[1])\\ncoor1 = []\\ncoor2 = []\\neps = 0.000000001\\nfor i in range(n):\\n   a = input().split(\\\" \\\")\\n   k = int(a[0])\\n   b = int(a[1])\\n   coor1.append((k*(x1+eps) + b, i))\\n   coor2.append((k*(x2-eps) + b, i))\\n#print(coor1)\\n#print(coor2)\\ncoor1.sort()\\ncoor2.sort()\\n#print(coor1)\\n#print(coor2)\\ns = \\\"NO\\\"\\nfor i in range(len(coor1)):\\n    if (coor1[i][1] != coor2[i][1]):\\n        s = \\\"YES\\\"\\nprint(s)\\n            \\n\", \"n = int(input())\\na = list()\\nx1, x2 = list(map(int, input().split()))\\nfor i in range(n):\\n    k, b = list(map(int, input().split()))\\n    y1 = k * x1 + b\\n    y2 = k * x2 + b\\n    a.append((y1, y2))\\na.sort()\\nfl = 'NO'\\ny1m = a[0][0]\\ny2m = a[0][1]\\nfor y1, y2 in a:\\n    if y2 < y2m:\\n        fl = 'YES'\\n    else:\\n        y2m = max(y2m, y2)\\nprint(fl)\\n    \\n    \\n\", \"n = int(input())\\nx1, x2 = list(map(int, input().split()))\\nx1 += 10**-8\\nx2 -= 10**-8\\nlines = []\\nfor i in range(n):\\n    lines.append(list(map(int, input().split())))\\n\\nord_left = []\\nord_right = []\\nfor i in range(n):\\n    ord_left.append(lines[i][0] * x1 + lines[i][1])\\n    ord_right.append(lines[i][0] * x2 + lines[i][1])\\n\\n\\nenum_l = list(range(n))\\nenum_r = list(range(n))\\nenum_l.sort(key=lambda ord: ord_left[ord])\\nenum_r.sort(key=lambda ord: ord_right[ord])\\n\\n\\n\\nif enum_l == enum_r:\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\\n# for i in range(len(ord_right)):\\n#   line = ord_left[i][0]\\n\", \"def ur(k, x, b):\\n    return k * x + b\\n\\nn = int(input())\\nlst = []\\nx1, x2 = list(map(int, input().split()))\\nfor i in range(n):\\n    k, b = list(map(int, input().split()))\\n    lst.append((ur(k, x1, b), ur(k, x2, b)))\\nlst.sort()    \\nfor i in range(1, n):\\n    if (lst[i][0] > lst[i - 1][0] and lst[i][1] < lst[i - 1][1]) or (lst[i - 1][0] < lst[i][0] and lst[i - 1][1] > lst[i][1]):\\n        print('YES')\\n        break\\nelse:\\n    print('NO')\\n\", \"n = int(input())\\n\\nx1,x2 = list(map(float,input().split()))\\n\\narr = []\\n\\nfor i in range(n):\\n    p,q = list(map(float,input().split()))\\n    r1 = p * x1 + q\\n    r2 = p * x2 + q\\n    arr.append((r1,r2))\\n\\narr = sorted(arr)\\n\\nflag = False\\n\\nfor i in range(n-1):\\n    if arr[i][0] < arr[i+1][0] and arr[i][1] > arr[i+1][1]:\\n        flag = True\\n        break\\n\\nif flag:\\n    print('YES')\\nelse:\\n    print('NO')\\n\", \"import sys\\n\\n\\n#sys.stdin = open(\\\"input.txt\\\")\\n#sys.stdout = open(\\\"output.txt\\\", \\\"w\\\")\\n\\nn = int(input())\\n\\nk = []\\nb = []\\nx1, x2 = (int(i) for i in input().split())\\n\\nfor i in range(n):\\n\\tk1, b1 = (int(j) for j in input().split())\\n\\tk.append(k1)\\n\\tb.append(b1)\\n\\nzn = [(k[i]*x1 + b[i], k[i]*x2 + b[i]) for i in range(n)]\\n#print(zn)\\nzn.sort()\\nfound = False;\\nfor i in range(n - 1):\\n\\tif zn[i][1] > zn[i+1][1]:\\n\\t\\tfound = True\\n\\t\\tbreak\\n\\nif found:\\n\\tprint(\\\"YES\\\")\\nelse:\\n\\tprint(\\\"NO\\\")\", \"\\\"\\\"\\\"\\nCodeforces Round #329 (Div. 2)\\n\\nProblem 593 B. Anton and Lines\\n\\n@author yamaton\\n@date 2015-11-04\\n\\\"\\\"\\\"\\n\\nimport itertools as it\\nimport functools\\nimport operator\\nimport collections\\nimport math\\nimport sys\\n\\n\\nEPSILON = 0.0000001\\n\\ndef solve(x1, x2, kbs):\\n    at_x1 = [k*(x1 + EPSILON) + b for (k, b) in kbs]\\n    at_x2 = [k*(x2 - EPSILON) + b for (k, b) in kbs]\\n    order1 = [i for i, _ in sorted(enumerate(at_x1), key=operator.itemgetter(1))]\\n    print_stderr('at_x1:', at_x1)\\n    print_stderr('at_x2:', at_x2)\\n    return any(at_x2[i] > at_x2[j] for (i, j) in zip(order1, order1[1:]))\\n\\n\\ndef print_stderr(*args, **kwargs):\\n    print(*args, file=sys.stderr, **kwargs)\\n\\n\\ndef tf_to_yn(tf):\\n    return 'YES' if tf else 'NO'\\n\\n\\ndef main():\\n    n = int(input())\\n    [x1, x2] = [int(i) for i in input().strip().split()]\\n    kbs = [tuple(int(i) for i in input().strip().split()) for _ in range(n)]\\n    result = solve(x1, x2, kbs)\\n    print(tf_to_yn(result))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"\\\"\\\"\\\"\\nCodeforces Round #329 (Div. 2)\\n\\nProblem 593 B. Anton and Lines\\n\\n@author yamaton\\n@date 2015-11-04\\n\\\"\\\"\\\"\\n\\nimport itertools as it\\nimport functools\\nimport operator\\nimport collections\\nimport math\\nimport sys\\n\\n\\nEPSILON = 0.0000001\\n\\ndef solve(x1, x2, kbs, n):\\n    at_x1 = [k*(x1 + EPSILON) + b for (k, b) in kbs]\\n    at_x2 = [k*(x2 - EPSILON) + b for (k, b) in kbs]\\n    order1 = [i for _, i in sorted(zip(at_x1, it.count()))]\\n    print_stderr('at_x1:', at_x1)\\n    print_stderr('at_x2:', at_x2)\\n    return any(at_x2[i] > at_x2[j] for (i, j) in zip(order1, order1[1:]))\\n\\n\\ndef print_stderr(*args, **kwargs):\\n    print(*args, file=sys.stderr, **kwargs)\\n\\n\\ndef tf_to_yn(tf):\\n    return 'YES' if tf else 'NO'\\n\\n\\ndef main():\\n    n = int(input())\\n    [x1, x2] = [int(i) for i in input().strip().split()]\\n    kbs = [tuple(int(i) for i in input().strip().split()) for _ in range(n)]\\n    result = solve(x1, x2, kbs, n)\\n    print(tf_to_yn(result))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"# import sys\\n# sys.stdin = open(\\\"cf593b.in\\\")\\n\\nn = int(input())\\nx1, x2 = map(int, input().split())\\n\\nk, b = [], []\\nfor _ in range(n):\\n\\tkk, bb = map(int, input().split())\\n\\tk.append(kk)\\n\\tb.append(bb)\\n\\nat1 = sorted(range(n), key=lambda i: k[i] * (x1 + 1e-8) + b[i])\\nat2 = sorted(range(n), key=lambda i: k[i] * (x2 - 1e-8) + b[i])\\n\\nprint([\\\"YES\\\", \\\"NO\\\"][at1 == at2])\", \"\\\"\\\"\\\"\\nCodeforces Round #329 (Div. 2)\\n\\nProblem 593 B. Anton and Lines\\n\\n@author yamaton\\n@date 2015-11-04\\n\\\"\\\"\\\"\\n\\nimport itertools as it\\nimport functools\\nimport operator\\nimport collections\\nimport math\\nimport sys\\n\\n\\nEPSILON = 0.000000001\\n\\ndef solve(x1, x2, kbs):\\n    at_x1 = [k*(x1 + EPSILON) + b for (k, b) in kbs]\\n    at_x2 = [k*(x2 - EPSILON) + b for (k, b) in kbs]\\n    order1 = [i for i, _ in sorted(enumerate(at_x1), key=operator.itemgetter(1))]\\n    # print_stderr('at_x1:', at_x1)\\n    # print_stderr('at_x2:', at_x2)\\n    return any(at_x2[i] > at_x2[j] for (i, j) in zip(order1, order1[1:]))\\n\\n\\ndef print_stderr(*args, **kwargs):\\n    print(*args, file=sys.stderr, **kwargs)\\n\\n\\ndef tf_to_yn(tf):\\n    return 'YES' if tf else 'NO'\\n\\n\\ndef main():\\n    n = int(input())\\n    [x1, x2] = [int(i) for i in input().strip().split()]\\n    kbs = [tuple(int(i) for i in input().strip().split()) for _ in range(n)]\\n    result = solve(x1, x2, kbs)\\n    print(tf_to_yn(result))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n = int(input())\\nx, y = list(map(int,input().split()))\\nu, v = [], []\\nx += 0.0000001\\ny -= 0.0000001\\nfor i in range(n):\\n    k, m = list(map(int, input().split()))\\n    u += [(k*x+m, i)]\\n    v += [(k*y+m, i)]\\nu, v = sorted(u), sorted(v)\\nfor i in range(n):\\n    if  u[i][1] != v[i][1]:\\n        print('YES')\\n        break\\nelse:\\n    print('NO')\\n    \\n\", \"n=int(input())\\nX,Y=input().split()\\nX,Y=float(X)+1e-10,float(Y)-1e-10\\nL=[list(map(float,input().split())) for _ in range(n)]\\nprint('NO' if [i for x,i in sorted((k*X+b,i) for i,(k,b) in enumerate(L))] == [i for x,i in sorted((k*Y+b,i) for i,(k,b) in enumerate(L))] else 'YES')\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2\\n\",\n    \"2\\n1 3\\n1 0\\n-1 3\\n\",\n    \"2\\n1 3\\n1 0\\n0 2\\n\",\n    \"2\\n1 3\\n1 0\\n0 3\\n\",\n    \"2\\n0 1\\n-1000000 1000000\\n1000000 -1000000\\n\",\n    \"2\\n-1337 1888\\n-1000000 1000000\\n1000000 -1000000\\n\",\n    \"2\\n-1337 1888\\n-1000000 1000000\\n-999999 -1000000\\n\",\n    \"15\\n30 32\\n-45 1\\n-22 -81\\n4 42\\n-83 -19\\n97 70\\n55 -91\\n-45 -64\\n0 64\\n11 96\\n-16 76\\n-46 52\\n0 91\\n31 -90\\n6 75\\n65 14\\n\",\n    \"15\\n-1 3\\n2 -4\\n0 -6\\n-2 -5\\n0 -1\\n-1 -2\\n3 6\\n4 4\\n0 -4\\n1 5\\n5 -4\\n-5 -6\\n3 -6\\n5 -3\\n-1 6\\n-3 -1\\n\",\n    \"5\\n-197 -126\\n0 -94\\n-130 -100\\n-84 233\\n-173 -189\\n61 -200\\n\",\n    \"2\\n9 10\\n-7 -11\\n9 2\\n\",\n    \"3\\n4 11\\n-2 14\\n2 -15\\n-8 -15\\n\",\n    \"2\\n1 2\\n2 -2\\n0 2\\n\",\n    \"10\\n1 3\\n1 5\\n1 2\\n1 4\\n1 6\\n1 3\\n1 7\\n1 -5\\n1 -1\\n1 1\\n1 8\\n\",\n    \"10\\n22290 75956\\n-66905 -22602\\n-88719 12654\\n-191 -81032\\n0 -26057\\n-39609 0\\n0 51194\\n2648 88230\\n90584 15544\\n0 23060\\n-29107 26878\\n\",\n    \"2\\n-1337 1888\\n100000 -100000\\n99999 -100000\\n\",\n    \"2\\n-100000 100000\\n100000 100000\\n100000 99999\\n\",\n    \"2\\n-100000 100000\\n100000 -100000\\n99999 100000\\n\",\n    \"2\\n-100000 100000\\n100000 100000\\n100000 99876\\n\",\n    \"2\\n9 10\\n4 -10\\n-9 4\\n\",\n    \"3\\n4 7\\n7 9\\n0 10\\n-7 2\\n\",\n    \"4\\n-4 -3\\n4 -3\\n10 -9\\n5 -2\\n0 9\\n\",\n    \"5\\n8 9\\n0 -3\\n0 -6\\n-5 0\\n-7 -2\\n-4 9\\n\",\n    \"6\\n-7 8\\n6 -1\\n-10 -9\\n4 8\\n0 -2\\n-6 -1\\n3 -10\\n\",\n    \"7\\n5 7\\n6 4\\n-9 4\\n-7 5\\n1 -3\\n5 -2\\n7 -8\\n6 -8\\n\",\n    \"8\\n-10 -2\\n5 10\\n9 7\\n-8 -2\\n0 6\\n-9 0\\n-6 2\\n6 -8\\n-3 2\\n\",\n    \"9\\n9 10\\n8 -3\\n9 8\\n0 5\\n10 1\\n0 8\\n5 -5\\n-4 8\\n0 10\\n3 -10\\n\",\n    \"10\\n-1 0\\n-2 4\\n2 4\\n-3 -7\\n-2 -9\\n7 6\\n0 2\\n1 4\\n0 10\\n0 -8\\n-5 1\\n\",\n    \"11\\n3 8\\n0 -9\\n-8 -10\\n3 4\\n3 5\\n2 1\\n-5 4\\n0 -10\\n-7 6\\n5 -4\\n-9 -3\\n5 1\\n\",\n    \"3\\n0 2\\n10 0\\n0 0\\n8 2\\n\",\n    \"2\\n0 1000000\\n0 0\\n1000000 1000000\\n\",\n    \"2\\n515806 517307\\n530512 500306\\n520201 504696\\n\",\n    \"2\\n0 65536\\n65536 0\\n0 1\\n\",\n    \"3\\n1 3\\n-1 5\\n1 1\\n0 4\\n\",\n    \"2\\n0 1000000\\n1000000 1\\n1 2\\n\",\n    \"2\\n0 3\\n1 1\\n2 1\\n\",\n    \"2\\n0 1\\n1 0\\n2 0\\n\",\n    \"3\\n1 3\\n1 0\\n-1 3\\n0 10\\n\",\n    \"2\\n0 1000000\\n1000000 1000000\\n0 3\\n\",\n    \"2\\n0 1\\n1 0\\n-2 2\\n\",\n    \"2\\n5 1000000\\n1000000 5\\n5 5\\n\",\n    \"4\\n0 1\\n0 0\\n0 1\\n1 0\\n-1 1\\n\",\n    \"2\\n0 1000000\\n1000000 1000000\\n1 1\\n\",\n    \"3\\n0 1000000\\n1000000 999999\\n-1000000 1000000\\n1000000 1000000\\n\",\n    \"2\\n-1000000 1000000\\n2 3\\n1 3\\n\",\n    \"2\\n0 1000000\\n1000000 1\\n2 2\\n\",\n    \"2\\n-1 1\\n1 0\\n-1 0\\n\",\n    \"2\\n0 1000000\\n2200 1\\n0 0\\n\",\n    \"2\\n1 999999\\n999999 0\\n1 0\\n\",\n    \"2\\n0 1\\n1 0\\n-1 1\\n\",\n    \"2\\n0 1000000\\n999999 999999\\n0 0\\n\",\n    \"7\\n0 1\\n0 -1\\n3 0\\n5 0\\n2 0\\n4 0\\n1 0\\n0 100\\n\",\n    \"2\\n0 1000000\\n1000000 0\\n0 100\\n\",\n    \"4\\n0 1\\n-1 2\\n0 1\\n1 0\\n-1 0\\n\",\n    \"3\\n0 1\\n0 1\\n0 10\\n2 0\\n\",\n    \"4\\n0 1\\n3 0\\n2 0\\n1 0\\n-1 3\\n\",\n    \"2\\n0 1000000\\n10000 0\\n100000 1\\n\",\n    \"5\\n-2 2\\n2 0\\n0 100000\\n0 10000\\n0 1000\\n0 0\\n\",\n    \"2\\n0 1000000\\n0 0\\n2200 1\\n\",\n    \"2\\n0 1000000\\n1 0\\n1000000 1\\n\",\n    \"2\\n2 5\\n2 -4\\n3 -6\\n\",\n    \"2\\n-1 1\\n0 0\\n0 1\\n\",\n    \"2\\n900000 1000000\\n900000 1000000\\n1000000 900000\\n\"\n  ],\n  \"outputs\": [\n    \"NO\",\n    \"YES\",\n    \"YES\",\n    \"NO\",\n    \"NO\",\n    \"YES\",\n    \"NO\",\n    \"NO\",\n    \"YES\",\n    \"NO\",\n    \"NO\",\n    \"YES\",\n    \"NO\",\n    \"NO\",\n    \"NO\",\n    \"YES\",\n    \"NO\",\n    \"NO\",\n    \"NO\",\n    \"NO\",\n    \"NO\",\n    \"NO\",\n    \"NO\",\n    \"YES\",\n    \"YES\",\n    \"YES\",\n    \"NO\",\n    \"YES\",\n    \"YES\",\n    \"YES\",\n    \"NO\",\n    \"NO\",\n    \"YES\",\n    \"YES\",\n    \"YES\",\n    \"NO\",\n    \"NO\",\n    \"YES\",\n    \"NO\",\n    \"YES\",\n    \"NO\",\n    \"YES\",\n    \"NO\",\n    \"YES\",\n    \"YES\",\n    \"YES\",\n    \"YES\",\n    \"NO\",\n    \"NO\",\n    \"YES\",\n    \"NO\",\n    \"NO\",\n    \"YES\",\n    \"NO\",\n    \"YES\",\n    \"YES\",\n    \"NO\",\n    \"YES\",\n    \"NO\",\n    \"NO\",\n    \"NO\",\n    \"NO\",\n    \"NO\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/593/B",
  "starter_code": ""
}