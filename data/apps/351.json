{
  "task_id": "APPS/351",
  "problem_id": 351,
  "prompt": "Makes solves problems on Decoforces and lots of other different online judges. Each problem is denoted by its difficulty \u2014 a positive integer number. Difficulties are measured the same across all the judges (the problem with difficulty d on Decoforces is as hard as the problem with difficulty d on any other judge). \n\nMakes has chosen n problems to solve on Decoforces with difficulties a_1, a_2, ..., a_{n}. He can solve these problems in arbitrary order. Though he can solve problem i with difficulty a_{i} only if he had already solved some problem with difficulty $d \\geq \\frac{a_{i}}{2}$ (no matter on what online judge was it).\n\nBefore starting this chosen list of problems, Makes has already solved problems with maximum difficulty k.\n\nWith given conditions it's easy to see that Makes sometimes can't solve all the chosen problems, no matter what order he chooses. So he wants to solve some problems on other judges to finish solving problems from his list. \n\nFor every positive integer y there exist some problem with difficulty y on at least one judge besides Decoforces.\n\nMakes can solve problems on any judge at any time, it isn't necessary to do problems from the chosen list one right after another.\n\nMakes doesn't have too much free time, so he asked you to calculate the minimum number of problems he should solve on other judges in order to solve all the chosen problems from Decoforces.\n\n\n-----Input-----\n\nThe first line contains two integer numbers n, k (1 \u2264 n \u2264 10^3, 1 \u2264 k \u2264 10^9).\n\nThe second line contains n space-separated integer numbers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint minimum number of problems Makes should solve on other judges in order to solve all chosen problems on Decoforces.\n\n\n-----Examples-----\nInput\n3 3\n2 1 9\n\nOutput\n1\n\nInput\n4 20\n10 3 6 3\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example Makes at first solves problems 1 and 2. Then in order to solve the problem with difficulty 9, he should solve problem with difficulty no less than 5. The only available are difficulties 5 and 6 on some other judge. Solving any of these will give Makes opportunity to solve problem 3.\n\nIn the second example he can solve every problem right from the start.",
  "solutions": "[\"R=lambda:list(map(int,input().split()))\\nn,k=R()\\na=sorted(R())\\nb=0\\nfor i in a:\\n  while i>k+k:\\n    k+=k\\n    b+=1\\n  k=max(k,i)\\nprint(b)\\n\", \"\\nimport sys\\n#sys.stdin=open(\\\"data.txt\\\")\\ninput=sys.stdin.readline\\n\\nn,k=list(map(int,input().split()))\\n\\nans=0\\nfor i in sorted(map(int,input().split())):\\n    while i>2*k:\\n        ans+=1\\n        k*=2\\n    k=max(k,i)\\n\\nprint(ans)\\n\", \"n,k=list(map(int,input().split()))\\nx=0\\nfor d in sorted(map(int,input().split())):\\n    while 2*k<d:\\n        k*=2\\n        x+=1\\n    k=max(k,d)\\nprint(x)\\n\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n\\na.sort()\\ncurr = 0\\nans = 0\\nwhile curr < len(a):\\n    if k >= a[curr] / 2:\\n        k = max(k, a[curr])\\n        curr += 1\\n    else:\\n        ans += 1\\n        k *= 2\\n\\nprint(ans)\\n\", \"n, k = list(map(int, input().split()))\\na = sorted(map(int, input().split()), reverse = True)\\nwhile len(a) > 0 and a[-1] <= k:\\n    a.pop()\\n\\na.append(k)\\nans = 0\\nwhile len(a) > 1:\\n    u, v= a[-1], a[-2]\\n    while u * 2 < v:\\n        ans += 1\\n        u *= 2\\n    a.pop()\\nprint(ans)\\n\", \"n, k = list(map(int, input().split()))\\ns = [int(i) for i in input().split()]\\ns.sort()\\nans = 0\\nfor i in s:\\n    while k<i/2:\\n        ans+=1\\n        k=2*k\\n    k = max(k, i)\\nprint(ans)\\n\\n\", \"from sys import stdin, stdout\\nEPS = 10 ** (-20)\\nINF = float('inf')\\nsize = 10 ** 6\\n\\nn, k = map(int, stdin.readline().split())\\nvalues = sorted(list(map(int, stdin.readline().split())))\\ni = 0\\nans = 0\\n\\nwhile i < n:\\n    if 2 * k >= values[i]:\\n        k = max(k, values[i])\\n        i += 1\\n    else:\\n        k *= 2\\n        ans += 1\\n\\nstdout.write(str(ans))\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\na = list(sorted(a))\\nd = k\\nans = 0\\nfor ai in a:\\n    while 2 * d < ai:\\n        d *= 2\\n        ans += 1\\n    d = max(d, ai)\\n\\nprint(ans)\\n\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\na.sort()\\nans = 0\\nfor i in range(n):\\n    while (k * 2 < a[i]):\\n        k *= 2\\n        ans += 1\\n    k = max(k, a[i])\\nprint(ans)\\n    \\n\", \"n, k = map(int, input().split())\\na = list(map(int, input().split()))\\na.sort()\\n\\nresult = 0\\n\\nfor d in a:\\n\\twhile d > 2*k:\\n\\t\\tk *= 2\\n\\t\\tresult += 1\\n\\tk = max(d, k)\\n\\nprint(result)\", \"import sys\\n\\ndef main():\\n    n, k = map(int,sys.stdin.readline().split())\\n    a = list(map(int,sys.stdin.readline().split()))\\n    \\n    a = sorted(a)\\n\\n    ans = 0\\n    for i in range(n):\\n        if k*2>=a[i]:\\n            k = max(k,a[i])\\n        else:\\n            t = a[i]\\n            while t>k*2:\\n                if t%2==1:\\n                    t= int(t/2)+1\\n                else:\\n                    t = int(t/2)\\n                ans+=1\\n            k = a[i]\\n\\n    print(ans)\\n\\nmain()\", \"n,k = map(int,input().split())\\nA = list(map(int,input().split()))\\nA.sort()\\ncnt = 0\\nfor a in A:\\n\\twhile a > 2 * k:\\n\\t\\tcnt += 1\\n\\t\\tk *= 2\\n\\tk = max(k, a)\\nprint(cnt)\", \"n, k = list(map(int, input().split()))\\ns = sorted(tuple(map(int, input().split())))\\nmax = k\\nans = 0\\nfor a in s:\\n    if a > max:\\n        while max < a / 2:\\n            max = max * 2\\n            ans = ans + 1\\n        max = a\\nprint(ans)\\n\", \"import math \\ndef main():\\n    n, k = list(map(int, input().split()))\\n    P = list(map(int, input().split()))\\n    P.sort()\\n\\n    M = k\\n    count = 0\\n    for num in P:\\n        f = math.ceil(math.log2(num/M)) - 1\\n        # print(num/M, f)\\n        if f < 1:\\n            pass\\n        else:\\n            count += f\\n        M = max(M, num)\\n    print(count)\\n\\ndef __starting_point():\\n    # nonlocal stime\\n    # stime = time.clock()\\n    main()\\n\\n__starting_point()\", \"n, k = list(map(int, input().split()))\\naa = sorted(map(int, input().split()))\\n\\nansw = 0\\n\\nfor a in aa:\\n    while 2 * k < a:\\n        k *= 2\\n        answ += 1\\n    k = max(k, a)\\n\\nprint(answ)\\n\", \"import math\\n\\nI = lambda: list(map(int, input().split()))\\nn, k = I()\\na = list(I())\\n# print(a)\\nans = 0\\nfor task in sorted(a):\\n    if math.ceil(task/2) <= k:\\n        k = max(task, k)\\n        continue\\n    else:\\n        while not math.ceil(task/2) <= k:\\n            ans += 1\\n            k *= 2\\n        k = task\\n\\nprint(ans)\\n\\n\", \"n, k = map(int, input().split(' '))\\nproblems = list(map(int, input().split(' ')))\\n\\nproblems.sort()\\n# easy = []\\n\\n# for i in range(len(problems)):\\n# \\tif problems[i] > k:\\n# \\t\\tproblems = problems[i:]\\n# \\t\\tbreak\\n\\nmax_solved = k\\nproblem_index = 0\\nn_has_to_solve = 0\\n\\nwhile problem_index < n:\\n\\tif problems[problem_index] <= max_solved * 2:\\n\\t\\tmax_solved = max(max_solved, problems[problem_index])\\n\\t\\tproblem_index += 1\\n\\telse:\\n\\t\\tmax_solved *= 2\\n\\t\\tn_has_to_solve += 1\\n\\nprint(n_has_to_solve)\", \"\\ndef MultiJudge(l,p):\\n\\tcount=0\\n\\tbefore=True\\n\\tl.sort()\\n\\th=[x for x in l if x<=2*p]\\n\\tif len(h) >0 and max(h)>p:\\n\\t\\tp=max(h)\\n\\tb=[x for x in l if x>2*p]\\n\\twhile len(b)>0:\\n\\t\\th=[x for x in l if x<=2*p]\\n\\t\\tb=[x for x in l if x>2*p]\\n\\t\\tif len(h) >0 and max(h)>p:\\n\\t\\t\\tp=max(h)\\n\\t\\t\\tbefore=False\\n\\t\\t#b=[x for x in l if x>2*p]\\n\\t\\tif len(b)>0 and before:\\n\\t\\t\\tp=p*2\\n\\t\\t\\tcount+=1\\n\\t\\tbefore=True\\n\\tprint(count)\\n\\np=int(input().split()[1])\\nl=[int(x) for x in input().split()]\\nMultiJudge(l,p)\", \"read = lambda: map(int, input().split())\\nn, k = read()\\na = sorted(read())\\ncur = k\\nans = 0\\nfor i in a:\\n    while cur * 2 < i:\\n        cur *= 2\\n        ans += 1\\n    cur = max(cur, i)\\nprint(ans)\", \"n, k = map(int, input().split())\\na = sorted(list(map(int, input().split())))\\nanswer = 0\\nfor elem in a:\\n    while 2 * k < elem:\\n        k *= 2\\n        answer += 1\\n    k = max(k, elem)\\nprint(answer)\", \"n, k = map(int, input().split())\\na = sorted(map(int, input().split()))\\nt = 0\\nx = 0\\nwhile max(a) > 2*k:\\n  while a[x] <= 2*k:\\n    x += 1\\n  if x > 0:\\n    k = max(k, a[x-1])\\n  while 2*k < a[x]:\\n    k *= 2\\n    t += 1\\nprint(t)\", \"n, k = map(int, input().split())\\n\\nl = sorted([int(x) for x in input().split()])\\n\\nans = 0\\n\\nfor i in range(len(l)):\\n        while 2 * k < l[i]:\\n                        ans += 1\\n                        k *= 2\\n        k = max(k, l[i])\\n        \\nprint(ans)\", \"n, k = map(int, input().split(\\\" \\\"))\\n\\narr = sorted([int(i) for i in input().split(\\\" \\\")])\\n\\nanswer = 0\\nfor i in range(n):\\n    while 2 * k < arr[i]:\\n        answer += 1\\n        k *= 2\\n    k = max(k, arr[i])\\n\\nprint(answer)\", \"n,k=map(int,input().split())\\nans=0\\nfor i in sorted(map(int,input().split())):\\n while i>2*k:\\n  ans+=1\\n  k*=2\\n k=max(k,i)\\nprint(ans)\", \"def judge():\\n    count = 0\\n    S = input()\\n    T = input()\\n    sList = S.split()\\n    sList = [int(i) for i in sList]\\n    tList = T.split()\\n    n = sList[0]\\n    k = sList[1]\\n    tList = [int(i) for i in tList]\\n    uList = sorted(tList)\\n    for num in uList:\\n        if (2*k >= num):\\n            if (k<num):\\n                k = num\\n            pass\\n        else:\\n            while True:\\n                k = 2*k\\n                count += 1\\n                if (2*k >= num):\\n                    if (k < num):\\n                        k = num\\n                    break\\n    print(count)\\n\\n\\njudge()\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3 3\\n2 1 9\\n\",\n    \"4 20\\n10 3 6 3\\n\",\n    \"1 1000000000\\n1\\n\",\n    \"1 1\\n3\\n\",\n    \"50 100\\n74 55 33 5 83 24 75 59 30 36 13 4 62 28 96 17 6 35 45 53 33 11 37 93 34 79 61 72 13 31 44 75 7 3 63 46 18 16 44 89 62 25 32 12 38 55 75 56 61 82\\n\",\n    \"100 10\\n246 286 693 607 87 612 909 312 621 37 801 558 504 914 416 762 187 974 976 123 635 488 416 659 988 998 93 662 92 749 889 78 214 786 735 625 921 372 713 617 975 119 402 411 878 138 548 905 802 762 940 336 529 373 745 835 805 880 816 94 166 114 475 699 974 462 61 337 555 805 968 815 392 746 591 558 740 380 668 29 881 151 387 986 174 923 541 520 998 947 535 651 103 584 664 854 180 852 726 93\\n\",\n    \"2 1\\n1 1000000000\\n\",\n    \"29 2\\n1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383 32767 65535 131071 262143 524287 1048575 2097151 4194303 8388607 16777215 33554431 67108863 134217727 268435455 536870911\\n\",\n    \"1 1\\n1000000000\\n\",\n    \"7 6\\n4 20 16 14 3 17 4\\n\",\n    \"2 1\\n3 6\\n\",\n    \"1 1\\n20\\n\",\n    \"5 2\\n86 81 53 25 18\\n\",\n    \"4 1\\n88 55 14 39\\n\",\n    \"3 1\\n2 3 6\\n\",\n    \"3 2\\n4 9 18\\n\",\n    \"5 3\\n6 6 6 13 27\\n\",\n    \"5 1\\n23 8 83 26 18\\n\",\n    \"3 1\\n4 5 6\\n\",\n    \"3 1\\n1 3 6\\n\",\n    \"1 1\\n2\\n\",\n    \"3 2\\n4 5 6\\n\",\n    \"5 1\\n100 200 400 1000 2000\\n\",\n    \"2 1\\n1 4\\n\",\n    \"4 1\\n2 4 8 32\\n\",\n    \"2 10\\n21 42\\n\",\n    \"3 3\\n1 7 13\\n\",\n    \"3 1\\n1 4 6\\n\",\n    \"2 2\\n2 8\\n\",\n    \"1 1\\n4\\n\",\n    \"2 2\\n8 16\\n\",\n    \"3 1\\n4 8 16\\n\",\n    \"3 1\\n3 6 9\\n\",\n    \"2 1\\n4 8\\n\",\n    \"2 2\\n7 14\\n\",\n    \"1 4\\n9\\n\",\n    \"5 3\\n1024 4096 16384 65536 536870913\\n\",\n    \"2 5\\n10 11\\n\",\n    \"2 2\\n3 6\\n\",\n    \"2 2\\n8 11\\n\",\n    \"3 19905705\\n263637263 417905394 108361057\\n\",\n    \"4 25\\n100 11 1 13\\n\",\n    \"10 295206008\\n67980321 440051990 883040288 135744260 96431758 242465794 576630162 972797687 356406646 547451696\\n\",\n    \"4 2\\n45 44 35 38\\n\",\n    \"1 2\\n9\\n\",\n    \"3 6\\n13 26 52\\n\",\n    \"9 30111088\\n824713578 11195876 458715185 731769293 680826358 189542586 550198537 860586039 101083021\\n\",\n    \"3 72014068\\n430005292 807436976 828082746\\n\",\n    \"3 165219745\\n737649884 652879952 506420386\\n\",\n    \"2 60669400\\n95037700 337255240\\n\",\n    \"4 28\\n34 1 86 90\\n\",\n    \"2 1\\n5 10\\n\",\n    \"2 1\\n4 1000000000\\n\",\n    \"2 1\\n2 3\\n\",\n    \"2 1\\n3 5\\n\",\n    \"3 3\\n1 5 20\\n\",\n    \"9 1\\n1 2 4 9 15 32 64 128 1024\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"29\\n\",\n    \"27\\n\",\n    \"29\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"7\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"24\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"28\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"4\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/825/C",
  "starter_code": ""
}