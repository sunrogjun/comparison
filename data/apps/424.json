{
  "task_id": "APPS/424",
  "problem_id": 424,
  "prompt": "Alice and Bob begin their day with a quick game. They first choose a starting number X_0 \u2265 3 and try to reach one million by the process described below. \n\nAlice goes first and then they take alternating turns. In the i-th turn, the player whose turn it is selects a prime number smaller than the current number, and announces the smallest multiple of this prime number that is not smaller than the current number.\n\nFormally, he or she selects a prime p < X_{i} - 1 and then finds the minimum X_{i} \u2265 X_{i} - 1 such that p divides X_{i}. Note that if the selected prime p already divides X_{i} - 1, then the number does not change.\n\nEve has witnessed the state of the game after two turns. Given X_2, help her determine what is the smallest possible starting number X_0. Note that the players don't necessarily play optimally. You should consider all possible game evolutions.\n\n\n-----Input-----\n\nThe input contains a single integer X_2 (4 \u2264 X_2 \u2264 10^6). It is guaranteed that the integer X_2 is composite, that is, is not prime.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimum possible X_0.\n\n\n-----Examples-----\nInput\n14\n\nOutput\n6\n\nInput\n20\n\nOutput\n15\n\nInput\n8192\n\nOutput\n8191\n\n\n\n-----Note-----\n\nIn the first test, the smallest possible starting number is X_0 = 6. One possible course of the game is as follows:   Alice picks prime 5 and announces X_1 = 10  Bob picks prime 7 and announces X_2 = 14. \n\nIn the second case, let X_0 = 15.   Alice picks prime 2 and announces X_1 = 16  Bob picks prime 5 and announces X_2 = 20.",
  "solutions": "[\"from math import floor, sqrt\\nimport bisect\\n\\nimport math\\n\\n\\ndef rwh_primes2(n):\\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\\n    \\\"\\\"\\\" Input n>=6, Returns a list of primes, 2 <= p < n \\\"\\\"\\\"\\n    correction = (n%6>1)\\n    n = {0:n,1:n-1,2:n+4,3:n+3,4:n+2,5:n+1}[n%6]\\n    sieve = [True] * (n//3)\\n    sieve[0] = False\\n    for i in range(int(n**0.5)//3+1):\\n      if sieve[i]:\\n        k=3*i+1|1\\n        sieve[      ((k*k)//3)      ::2*k]=[False]*((n//6-(k*k)//6-1)//k+1)\\n        sieve[(k*k+4*k-2*k*(i&1))//3::2*k]=[False]*((n//6-(k*k+4*k-2*k*(i&1))//6-1)//k+1)\\n    return [2,3] + [3*i+1|1 for i in range(1,n//3-correction) if sieve[i]]\\n\\n\\nk = int(input())\\n\\nprimes = rwh_primes2(k)\\n\\na = 1\\np2 = 2\\nfor i in primes[::-1]:\\n    if k%i == 0:\\n        p2 = i\\n        break\\n\\nxx = range(k-p2+1, k+1)\\n#print(list(xx))\\nif p2>240:\\n    p1 = primes[bisect.bisect_left(primes, int(math.ceil(xx[0]/2)))]\\n    print(p1+1)\\nelse:\\n    ans = k\\n    p1 = 1\\n    for x1 in xx:\\n        for i in primes[::-1]:\\n\\n            if i >= x1:\\n                continue\\n\\n            if x1 % i == 0:\\n                p1 = i\\n                break\\n        ans = min(ans, x1-p1+1)\\n\\n    print(ans)\", \"x2 = int(input())\\n\\nn = 1000001\\nmax_prime_div = [0] * n\\nsieve = list(range(n))\\nsieve[1] = 0\\nfor i in sieve:\\n    if i > 1 and sieve[i]:\\n        for j in range(2 * i, n, i):\\n            sieve[j] = 0\\n            max_prime_div[j] = i\\n\\nmin_x0 = n\\nfor x in range(x2 - max_prime_div[x2] + 1, x2 + 1):\\n    max_div = max_prime_div[x]\\n    tmp = x - max_div + 1\\n    if max_div and tmp < min_x0:\\n        min_x0 = tmp\\nprint(min_x0)\", \"x2 = int(input())\\n\\nn = 1000001\\nmax_prime_div = [0] * n\\nsieve = list(range(n))\\nsieve[1] = 0\\nfor i in sieve:\\n    if sieve[i]:\\n        for j in range(2 * i, n, i):\\n            sieve[j] = 0\\n            max_prime_div[j] = i\\n\\nmin_x0 = n\\nfor x in range(x2 - max_prime_div[x2] + 1, x2 + 1):\\n    max_div = max_prime_div[x]\\n    tmp = x - max_div + 1\\n    if max_div and tmp < min_x0:\\n        min_x0 = tmp\\n    if max_div and x // max_div == 2:\\n        break\\nprint(min_x0)\", \"import array\\n\\nx2 = int(input())\\n\\nn = 1000001\\nmax_prime_div = array.array('i', [0] * n)\\nsieve = array.array('i', list(range(n)))\\nsieve[1] = 0\\nfor i in sieve:\\n    if sieve[i]:\\n        for j in range(2 * i, n, i):\\n            sieve[j] = 0\\n            max_prime_div[j] = i\\n\\nmin_x0 = n\\nfor x in range(x2 - max_prime_div[x2] + 1, x2 + 1):\\n    max_div = max_prime_div[x]\\n    tmp = x - max_div + 1\\n    if max_div and tmp < min_x0:\\n        min_x0 = tmp\\n    if max_div and x // max_div == 2:\\n        break\\nprint(min_x0)\", \"import array\\n\\nx2 = int(input())\\n\\nn = 1000001\\nmax_prime_div = array.array('i', [0] * n)\\nsieve = array.array('i', list(range(n)))\\nsieve[1] = 0\\nfor i in sieve:\\n    if sieve[i]:\\n        for j in range(2 * i, n, i):\\n            sieve[j] = 0\\n            max_prime_div[j] = i\\n\\nmin_x0 = n\\nfor x in range(x2 - max_prime_div[x2] + 1, x2 + 1):\\n    max_div = max_prime_div[x]\\n    tmp = x - max_div + 1\\n    if max_div and tmp < min_x0:\\n        min_x0 = tmp\\n    if max_div and x // max_div == 2:\\n        break\\nprint(min_x0)\", \"x=int(input())\\np=[1]*(x+1)\\na=2\\np[0]=0\\np[1]=0\\nwhile a<=x:\\n    if p[a]:\\n        for i in range(a**2,x+1,a):\\n            p[i]=0\\n    a+=1\\nc=[]\\nfor i in range(2,len(p)-1):\\n    if p[i]:\\n        c.append(i)\\nfor i in range(len(c)-1,-1,-1):\\n    if not x%c[i]:\\n        low=c[i]\\n        break\\nposs=[i for i in range(max(x-low+1,3),x)]\\nans=poss[0]\\nl=0\\nr=1\\ntry:\\n    while poss[0]>=c[r+1]*2:\\n        r+=1\\nexcept IndexError:\\n    ...\\nfor i in poss:\\n    while i-c[l]+1>=ans:\\n        l+=1\\n    if c[r]*2<=i:\\n        r+=1\\n    if l>r:\\n        break\\n    for j in range(l,r+1):\\n        if not i%c[j] and i-c[j]>1:\\n            ans=min(ans,i-c[j]+1)\\nprint(ans)\", \"x=int(input())\\np=[1]*(x+1)\\na=2\\np[0]=0\\np[1]=0\\nwhile a<=x:\\n    if p[a]:\\n        for i in range(a**2,x+1,a):\\n            p[i]=0\\n    a+=1\\nc=[]\\nfor i in range(2,len(p)-1):\\n    if p[i]:\\n        c.append(i)\\nfor i in range(len(c)-1,-1,-1):\\n    if not x%c[i]:\\n        low=c[i]\\n        break\\nposs=[i for i in range(max(x-low+1,3),x)]\\nans=poss[0]\\nl=0\\nr=1\\ntry:\\n    while poss[0]>=c[r+1]*2:\\n        r+=1\\nexcept IndexError:\\n    ...\\nfor i in poss:\\n    while i-c[l]+1>=ans:\\n        l+=1\\n    if c[r]*2<=i:\\n        r+=1\\n    if l>r:\\n        break\\n    for j in range(l,r+1):\\n        if not i%c[j] and i-c[j]>1:\\n            ans=min(ans,i-c[j]+1)\\nprint(ans)\", \"n = int(input())\\n\\nsiv = [0 for _ in range(n + 1)]\\n\\nfor i in range(2, n + 1):\\n    if siv[i] == 0:\\n        for j in range(i + i, n + 1, i):\\n            siv[j] = i\\n    siv[i] = i - siv[i] + 1;\\n\\nans = n\\nfor i in range(siv[n], n + 1):\\n    ans = min(ans, siv[i])\\n\\nprint(ans)\\n\", \"x2 = int(input())\\n\\ns = [-1] * (x2 + 1)\\nfor i in range(2, x2+1):\\n\\tif s[i] == -1:\\n\\t\\tfor j in range(i, x2+1, i):\\n\\t\\t\\ts[j] = i\\n\\t\\nans = x2\\nfor x1 in range(x2 - s[x2] + 1, x2 + 1):\\n\\tx0 = x1 - s[x1] + 1\\n\\tif x0 > 1:\\n\\t\\tans = min(ans, x0)\\n\\nprint(ans)\\n\", \"nmax = 1000010\\nprimes = [0 for i in range(nmax)]\\n\\ndef get_primes():\\n    nonlocal primes\\n\\n    n = 2\\n    while n < nmax:\\n        num = 2*n\\n        while num < nmax:\\n            primes[num] = n\\n            num += n\\n        num = n + 1\\n        while num < nmax and primes[num] != 0 :\\n            num += 1\\n        n = num\\n\\ndef algo(x2):\\n    nonlocal primes\\n\\n    p2 = primes[x2]\\n    min_x1 = x2-p2+1\\n    min_x0 = nmax\\n\\n    for x1 in range(min_x1, x2+1):\\n        p1 = primes[x1]\\n        x0 = x1 - p1 + 1\\n\\n        if x0 < min_x0:\\n            min_x0 = x0\\n            # print(\\\"p1 is \\\", p1, \\\" for \\\", x0)\\n    return min_x0\\n\\n\\nx2 = int(input().strip())\\nget_primes()\\nprint(algo(x2))\\n\", \"x2 = int(input())\\ns = [-1] * (x2+1)\\nfor i in range(2, x2+1):\\n    if s[i] == -1:\\n        for j in range(i, x2+1, i):\\n            s[j] = i;\\nans = x2\\nfor x1 in range(x2-s[x2]+1, x2+1):\\n    x0 = x1 - s[x1] + 1\\n    if x0 > 1:\\n        ans = min(ans, x0)\\nprint(ans)\\n\", \"from sys import stdin\\nmaxn = 1000006\\nprime = [0] * maxn\\ndef getPrimes():\\n    n = 2\\n    while(n < maxn):\\n        num = n*2\\n        while(num < maxn):\\n            prime[num] = n\\n            num += n\\n        num = n + 1\\n        while(  num < maxn and prime[num]!= 0 ):\\n            num += 1\\n        n = num\\n\\n\\ndef main():\\n    getPrimes()\\n    n = int(stdin.readline().strip())\\n    a = 0\\n    b = prime[n]\\n    x0 = 9999999\\n    for i in range(n-b+1,n+1):\\n        \\n        a = prime[i]\\n        x0 = min(i-a+1,x0)\\n        #print(\\\"i\\\",i,\\\"prime[i]\\\",prime[i],\\\"x0\\\",x0)\\n    print(x0)\\n\\nmain()\\n\", \"n = int(input())\\n\\nans = n\\n\\nf = [0]*(n+1)\\n\\nfor i in range(2, n+1):\\n\\n    if f[i]==0:\\n\\n        for j in range(i*2, n+1, i):\\n\\n            f[j] = i\\n\\n    f[i] = i-f[i]+1\\n\\nfor i in range(f[n], n+1):\\n\\n    ans = min(ans, f[i])\\n\\nprint(ans)\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"def max_less_prime_divisor(n): # 1 for primes\\n    d, max_d = 2, 1\\n    while d * d <= n:\\n        while n % d == 0:\\n            max_d = d\\n            n //= d\\n        d += 1\\n    return n if n != 1 and max_d != 1 else max_d\\n\\nn = int(input())\\nm = n - max_less_prime_divisor(n) + 1\\nanswer = m\\nis_prime = [True] * m\\nfor i in range(2, m):\\n    if is_prime[i]:\\n        d = (m - 1) - (m - 1) % i\\n        if d + i <= n:\\n            answer = min(answer, d + 1)\\n        for j in range(i * i, m, i):\\n            is_prime[j] = False\\nprint(answer)\\n    \\n\", \"n = int(input())\\n\\nis_prime = [True] * n\\nfor i in range(2, n):\\n    if is_prime[i]:\\n        for j in range(i * i, n, i):\\n            is_prime[j] = False\\nprimes = [i for i in range(2, n) if is_prime[i]]\\n\\nm = n - 1\\nfor p in primes:\\n    if n % p == 0:\\n        m = n - p\\n\\nanswer = m + 1\\nfor p in primes:\\n    if p > m:\\n        break\\n    d = m - m % p\\n    if d + p <= n:\\n        answer = min(answer, d + 1)\\nprint(answer)\\n    \\n\", \"n = int(input())\\n\\nis_prime = [True] * n\\nfor i in range(2, n):\\n    if is_prime[i]:\\n        for j in range(i * i, n, i):\\n            is_prime[j] = False\\nprimes = [i for i in range(2, n) if is_prime[i]]\\n\\nm = n - 1\\nfor p in primes:\\n    if n % p == 0:\\n        m = n - p\\n\\nanswer = m + 1\\nfor p in primes:\\n    if p > m:\\n        break\\n    d = m - m % p\\n    if d + p <= n:\\n        answer = min(answer, d + 1)\\nprint(answer)\\n    \\n\", \"n = int(input())\\nis_prime = [True] * n\\nfor i in range(2, n):\\n    if is_prime[i]:\\n        for j in range(i * i, n, i):\\n            is_prime[j] = False\\nprimes = [i for i in range(2, n) if is_prime[i]]\\nm = n - 1\\nfor p in primes:\\n    if n % p == 0:\\n        m = n - p\\nanswer = m + 1\\nfor p in primes:\\n    if p > m:\\n        break\\n    d = m - m % p\\n    if d + p <= n:\\n        answer = min(answer, d + 1)\\nprint(answer)\\n\", \"x = int(input())\\nn = x\\nvis = [False for i in range(n+1)]\\nflag = [0 for i in range(n+1)]\\nfor i in range(2, n+1):\\n    if not vis[i]:\\n        for j in range(i+i, n+1, i):\\n            vis[j] = True\\n            flag[j] = i\\nans = x\\nfor i in range(x - flag[x] + 1, x+1):\\n    ans = min(ans, i - flag[i] + 1)\\nprint(ans)\\n\", \"# By Sieve of Erastoteles\\ndef getPrimes(n):\\n\\tprimes = [0 for _ in range(n + 1)] # Initialize 'primes' in 0\\n\\tfor i in range(2, n + 1): # n + 1 is the last we will need\\n\\t    if not primes[i]: # if it is zero, apply algorithm\\n\\t        for j in range(2*i, n + 1, i):\\n\\t            primes[j] = i\\n\\t    primes[i] = i - primes[i] + 1; # Game\\n\\t# print(primes)\\n\\treturn primes\\n\\nx2 = int(input())\\nprimes = getPrimes(x2)\\n\\nres = x2\\nfor i in range(primes[x2], x2 + 1):\\n\\tres = min(res, primes[i])\\n\\nprint(res)\", \"n = int(input())\\n\\nsiv = [0 for _ in range(n+1)]\\n\\nfor i in range(2, n+1):\\n    if siv[i] == 0:\\n        for j in range(i+i, n+1, i):\\n            siv[j] = i\\n    siv[i] = i - siv[i] + 1;\\n\\nresult = n\\nfor i in range(siv[n], n + 1):\\n    result = min(result, siv[i])\\n\\nprint(result)\", \"x = int(input())\\n\\narr = [0 for i in range(x + 1)]\\n\\nfor i in range(2, x+1):\\n    if(arr[i] == 0):\\n        for j in range(i + i, x + 1, i):\\n            arr[j] = i\\n    arr[i] = i - arr[i] + 1;\\n\\nresult = x\\nfor i in range(arr[x], x + 1):\\n    result = min(result, arr[i])\\n\\nprint(result)\\n\", \"lectura = int(input())\\nlista0 = [0]*(lectura+1)\\nfor i in range(2, lectura+1):\\n    #print(\\\"i= \\\"+str(i))\\n    if lista0[i]==0:\\n        for j in range(2*i, lectura+1, i):\\n            #print(\\\"j= \\\"+str(j))\\n            lista0[j] = i\\n    lista0[i] = i-lista0[i]+1\\nconclusion = lectura\\nfor i in range(lista0[lectura], lectura+1):\\n    conclusion = min(conclusion, lista0[i])\\nprint(conclusion)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"14\\n\",\n    \"20\\n\",\n    \"8192\\n\",\n    \"1000000\\n\",\n    \"959806\\n\",\n    \"1452\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"8\\n\",\n    \"9\\n\",\n    \"10\\n\",\n    \"12\\n\",\n    \"15\\n\",\n    \"16\\n\",\n    \"110880\\n\",\n    \"166320\\n\",\n    \"221760\\n\",\n    \"277200\\n\",\n    \"332640\\n\",\n    \"498960\\n\",\n    \"554400\\n\",\n    \"665280\\n\",\n    \"720720\\n\",\n    \"510510\\n\",\n    \"570570\\n\",\n    \"690690\\n\",\n    \"959818\\n\",\n    \"959878\\n\",\n    \"959902\\n\",\n    \"974847\\n\",\n    \"974859\\n\",\n    \"974931\\n\",\n    \"885481\\n\",\n    \"896809\\n\",\n    \"908209\\n\",\n    \"935089\\n\",\n    \"720721\\n\",\n    \"690691\\n\",\n    \"959903\\n\",\n    \"974932\\n\",\n    \"935090\\n\",\n    \"524288\\n\",\n    \"524289\\n\",\n    \"524286\\n\",\n    \"531441\\n\",\n    \"531442\\n\",\n    \"531440\\n\",\n    \"81\\n\",\n    \"999958\\n\",\n    \"2048\\n\"\n  ],\n  \"outputs\": [\n    \"6\\n\",\n    \"15\\n\",\n    \"8191\\n\",\n    \"998677\\n\",\n    \"239958\\n\",\n    \"1206\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"7\\n\",\n    \"7\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"8\\n\",\n    \"11\\n\",\n    \"55440\\n\",\n    \"110879\\n\",\n    \"110880\\n\",\n    \"138600\\n\",\n    \"166320\\n\",\n    \"332639\\n\",\n    \"415798\\n\",\n    \"498958\\n\",\n    \"540538\\n\",\n    \"255248\\n\",\n    \"285282\\n\",\n    \"460455\\n\",\n    \"239958\\n\",\n    \"239978\\n\",\n    \"239978\\n\",\n    \"324954\\n\",\n    \"324978\\n\",\n    \"324980\\n\",\n    \"442272\\n\",\n    \"447944\\n\",\n    \"453632\\n\",\n    \"467064\\n\",\n    \"355298\\n\",\n    \"342864\\n\",\n    \"479702\\n\",\n    \"470060\\n\",\n    \"463950\\n\",\n    \"524287\\n\",\n    \"174768\\n\",\n    \"262110\\n\",\n    \"526737\\n\",\n    \"262490\\n\",\n    \"265704\\n\",\n    \"76\\n\",\n    \"250008\\n\",\n    \"1959\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/923/A",
  "starter_code": ""
}