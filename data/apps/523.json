{
  "task_id": "APPS/523",
  "problem_id": 523,
  "prompt": "Returning back to problem solving, Gildong is now studying about palindromes. He learned that a palindrome is a string that is the same as its reverse. For example, strings \"pop\", \"noon\", \"x\", and \"kkkkkk\" are palindromes, while strings \"moon\", \"tv\", and \"abab\" are not. An empty string is also a palindrome.\n\nGildong loves this concept so much, so he wants to play with it. He has $n$ distinct strings of equal length $m$. He wants to discard some of the strings (possibly none or all) and reorder the remaining strings so that the concatenation becomes a palindrome. He also wants the palindrome to be as long as possible. Please help him find one.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n \\le 100$, $1 \\le m \\le 50$) \u2014 the number of strings and the length of each string.\n\nNext $n$ lines contain a string of length $m$ each, consisting of lowercase Latin letters only. All strings are distinct.\n\n\n-----Output-----\n\nIn the first line, print the length of the longest palindrome string you made.\n\nIn the second line, print that palindrome. If there are multiple answers, print any one of them. If the palindrome is empty, print an empty line or don't print this line at all.\n\n\n-----Examples-----\nInput\n3 3\ntab\none\nbat\n\nOutput\n6\ntabbat\n\nInput\n4 2\noo\nox\nxo\nxx\n\nOutput\n6\noxxxxo\n\nInput\n3 5\nhello\ncodef\norces\n\nOutput\n0\n\n\nInput\n9 4\nabab\nbaba\nabcd\nbcde\ncdef\ndefg\nwxyz\nzyxw\nijji\n\nOutput\n20\nababwxyzijjizyxwbaba\n\n\n\n-----Note-----\n\nIn the first example, \"battab\" is also a valid answer.\n\nIn the second example, there can be 4 different valid answers including the sample output. We are not going to provide any hints for what the others are.\n\nIn the third example, the empty string is the only valid palindrome string.",
  "solutions": "[\"n, m = map(int, input().split())\\n\\np = ''\\nq = []\\n\\narr = [input() for __ in range(n)]\\ns = set(arr)\\nfor z in arr:\\n    if z == z[::-1]:\\n        p = z\\n    else:\\n        if z not in s: continue\\n        if z[::-1] in s:\\n            s.remove(z)\\n            s.remove(z[::-1])\\n            q += z,\\n\\nres = ''.join(q)\\nres = res + p + res[::-1]\\nprint(len(res))\\nprint(res)\", \"n,m = [int(i) for i in input().split()]\\ns = [input() for i in range(n)]\\nans = \\\"\\\"\\ni = 0\\nmid = \\\"\\\"\\nwhile i < len(s):\\n    l = s.pop()\\n    if l[::-1] == l:\\n        if len(mid) < len(l):\\n            mid = l\\n    elif l[::-1] in s:\\n        s.remove(l[::-1])\\n        ans += l\\n\\nprint(len(ans)*2+len(mid))\\nprint(ans+mid+ans[::-1])\", \"from collections import defaultdict\\nn,m=list(map(int,input().split()))\\ndict=defaultdict(int)\\nlarr=''\\nrarr=''\\nmxeq=''\\nmxln=0\\nfor _ in range(n):\\n    s=input()\\n    if dict[s[::-1]]==1:\\n        rarr+=s\\n        larr=s[::-1]+larr\\n        del dict[s[::-1]]\\n    elif s==s[::-1]:\\n        if len(s)>mxln:\\n            mxln=len(s)\\n            mxeq=s\\n    else:\\n        dict[s]=1\\n\\nfarr=larr+mxeq+rarr\\nprint(len(farr))\\nprint(farr)\\n\\n\\n\", \"n, m = list(map(int, input().split()))\\nar = []\\nfor _ in range(n):\\n    ar.append(input())\\nans1 = ''\\nans2 = ''\\nkek = set()\\nfor i in range(n):\\n    for j in range(i + 1, n):\\n        if ar[i] == ar[j][::-1]:\\n            ans1 += ar[i]\\n            ans2 = ar[j] + ans2\\n            kek.add(ar[i])\\nfor i in range(n):\\n    if ar[i] == ar[i][::-1] and ar[i] not in kek:\\n        ans1 += ar[i]\\n        break\\nprint(len(ans1) + len(ans2))\\nprint(ans1 + ans2)\", \"n, m = list(map(int, input().split()))\\ns = []\\nfor i in range(n):\\n\\ts.append(input())\\n\\nA, B = '', ''\\nM = ''\\nd = {}\\n\\nfor i in range(n):\\n\\tfor j in range(i+1, n):\\n\\t\\tif s[i][::-1] == s[j] and i not in d and j not in d:\\n\\t\\t\\tA = A + s[i]\\n\\t\\t\\tB = s[j] + B\\n\\t\\t\\t\\n\\t\\t\\td[i] = True\\n\\t\\t\\td[j] = True\\n\\nfor i in range(n):\\n\\tif s[i][::-1] == s[i] and i not in d:\\n\\t\\tM = s[i]\\n\\nprint(len(A) + len(M) + len(B))\\nprint(A + M + B)\\n\", \"from math import *\\n\\nn,m = map(int,input().split())\\na = []\\nfor y in range(n):\\n\\ta.append(input())\\nx = [0 for i in range(n)]\\nt = \\\"\\\"\\nfor i in range(n):\\n\\tfor j in range(i+1,n):\\n\\t\\tif(x[j] == 1 or x[i] == 1): continue\\n\\t\\tif(a[i] == a[j][::-1]):\\n\\t\\t\\tt = a[i] + t + a[j]\\n\\t\\t\\t#print(t)\\n\\t\\t\\tx[i] = 1\\n\\t\\t\\tx[j] = 1\\n#print(t)\\nfor i in range(n):\\n\\tif(x[i] == 1): continue\\n\\tif(a[i] == a[i][::-1]):\\n\\t\\tt = t[:len(t)//2]+a[i]+t[len(t)//2:]\\n\\t\\tbreak\\nprint(len(t))\\nprint(t)\", \"from bisect import bisect_left as bl\\nfrom bisect import bisect_right as br\\nimport heapq\\nimport math\\nfrom collections import *\\nfrom functools import reduce,cmp_to_key\\nimport sys\\ninput = sys.stdin.readline\\n \\nM = mod = 10**9 + 7\\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\\ndef inv_mod(n):return pow(n, mod - 2, mod)\\n \\ndef li():return [int(i) for i in input().rstrip('\\\\n').split()]\\ndef st():return input().rstrip('\\\\n')\\ndef val():return int(input().rstrip('\\\\n'))\\ndef li2():return [i for i in input().rstrip('\\\\n').split(' ')]\\ndef li3():return [int(i) for i in input().rstrip('\\\\n')]\\n\\n\\nn,m = li()\\nl = []\\nfor i in range(n):l.append(st())\\nl.sort()\\ncnt = Counter()\\nfor i in l:\\n    cnt[i] += 1\\ntoadd = []\\nd1 = ''\\nfor i in cnt:\\n    if cnt[i]:\\n        if i == i[::-1]:\\n            toadd.append(i*(cnt[i]//2))\\n            cnt[i] -= 2*(cnt[i]//2)\\n            if cnt[i] and len(i)>len(d1):\\n                d1 = i\\n                cnt[i] -= 1\\n        elif cnt[i[::-1]]:\\n            toadd.append(i)\\n            cnt[i]-=1\\n            cnt[i[::-1]]-=1\\n        elif i == i[::-1] and len(i)>len(d1):\\n            d1 = i\\n            cnt[i] -= 1\\ns = ''\\nfor i in toadd:\\n    s += i\\ns = s + d1 + s[::-1]\\nprint(len(s))\\nprint(s)\\n\", \"num, n = map(int, input().split())\\n\\na = []\\nb = []\\ncenter = \\\"\\\"\\n\\nfor i in range(num):\\n    s = input()\\n    if s[::-1] == s:\\n        center = s\\n    if s[::-1] in a:\\n        b.append(s)\\n    else:\\n        a.append(s)\\n\\nans = \\\"\\\"\\n\\nfor x in b:\\n    ans += x\\n\\nans = ans + center + ans[::-1]\\n\\nprint(len(ans))\\nprint(ans)\", \"n,m = map(int,input().split())\\n\\npair = []\\nown = []\\nmentu = []\\nfor _ in range(n):\\n    s = list(input())\\n    if s == s[::-1]:\\n        own.append(s)\\n    else:\\n        if s[::-1] in mentu:\\n            pair.append(s)\\n        else:\\n            mentu.append(s)\\nk = 1 if own else 0\\nprint(k * m + len(pair) * 2 * m)\\nans = \\\"\\\"\\nfor s in pair:\\n    ans += \\\"\\\".join(s)\\nif own:\\n    for s in own[0]:\\n        ans += \\\"\\\".join(s)\\nfor s in pair[::-1]:\\n    ans += \\\"\\\".join(s[::-1])\\nprint(ans)\", \"def solve(N, M, A):\\n    strs = set(A)\\n    used = set()\\n    forward = []\\n    mid = []\\n\\n    for x in strs:\\n        rev = x[::-1]\\n        if x == rev:\\n            mid.append(x)\\n        elif rev in strs and x not in used:\\n            forward.append(x)\\n            used.add(x)\\n            used.add(rev)\\n\\n    front = \\\"\\\".join(forward)\\n    back = front[::-1]\\n    if mid:\\n        ret = front + next(iter(mid)) + back\\n    else:\\n        ret = front + back\\n    return str(len(ret)) + \\\"\\\\n\\\" + ret\\n\\n\\ndef __starting_point():\\n\\n    N, M = list(map(int, input().split()))\\n    A = []\\n    for i in range(N):\\n        S = input()\\n        assert len(S) == M\\n        A.append(S)\\n    ans = solve(N, M, A)\\n    print(ans)\\n\\n__starting_point()\", \"n,m = list(map(int,input().split()))\\n\\ns = [input() for i in range(n)]\\n\\nd = {}\\nfor i in s:\\n\\ttry:\\n\\t\\td[i] += 1\\n\\texcept:\\n\\t\\td[i] = 1\\n\\n\\nrevis = []\\npal = \\\"\\\"\\n\\nfor i in d:\\n\\trevi = i[::-1]\\n\\t# print(revi,i)\\n\\n\\tif revi == i:\\n\\t\\tif d[i]&1:\\n\\t\\t\\tif len(i) > len(pal):\\n\\t\\t\\t\\tpal = i\\n\\t\\telse:\\n\\t\\t\\tx = d[i]//2\\n\\t\\t\\tfor j in range(x):\\n\\t\\t\\t\\trevis.append(i)\\n\\telse:\\n\\t\\tif revi in d:\\n\\t\\t\\tx = min(d[i], d[revi])\\n\\t\\t\\td[i] -= x\\n\\t\\t\\td[revi] -= x\\n\\t\\t\\tfor j in range(x):\\n\\t\\t\\t\\trevis.append(i)\\n\\nss = \\\"\\\"\\nfor i in revis:\\n\\tss += i\\nss = ss + pal + ss[::-1]\\n\\nprint(len(ss))\\nprint(ss)\\n\", \"n, m = map(int, input().split())\\nK = list(set(input() for _ in range(n)))\\nn = len(K)\\n\\ndef is_pal(S):\\n    nonlocal m\\n    ret = True\\n    for i in range(m//2+1):\\n        if S[i] != S[-i-1]:\\n            ret = False\\n    return ret\\n\\nans = \\\"\\\"\\n\\nfor k in K:\\n    if is_pal(k):\\n        ans = k\\n        break\\n\\nfor i in range(n - 1):\\n    for j in range(i + 1, n):\\n        if K[i] == K[j][::-1]:\\n            ans = K[i] + ans + K[j]\\n            break\\n\\nprint(len(ans))\\nprint(ans)\", \"def palindrome(s):\\n    for i in range(len(s)//2):\\n        if s[i] != s[len(s)-1-i]:\\n            return False\\n\\n    return True\\n\\ndef main():\\n    n,m = list(map(int,input().split()))\\n    strings = []\\n    for i in range(n):\\n        strings.append(input())\\n        \\n    pairs = []\\n    alone = []\\n    for i in range(n):\\n        found = False\\n        s1 = strings[i]\\n        for j in range(i+1,n):\\n            s2 = strings[j][::-1]\\n            #print(s1,s2)\\n            if s1 == s2:\\n                found = True\\n                pairs.append((s1,strings[j]))\\n                break\\n            \\n        if not found:\\n            if palindrome(s1):\\n                alone.append(s1)\\n\\n    #print(pairs)\\n    s = ''\\n    for i in pairs:\\n        s += i[0]\\n\\n    while len(alone) > 1:\\n        alone.pop()\\n        \\n    for i in alone:\\n        s += i\\n\\n    pairs.reverse()\\n    for i in pairs:\\n        s += i[1]\\n\\n    print(len(s))\\n    print(s)\\n\\nmain()\\n\", \"def main():\\n    import sys\\n    input = sys.stdin.readline\\n\\n    N, M = list(map(int, input().split()))\\n    has_rev = {}\\n    pal = []\\n    for _ in range(N):\\n        s = input().rstrip('\\\\n')\\n        s_rev = s[::-1]\\n        if s == s_rev:\\n            pal.append(s)\\n        else:\\n            if s_rev in has_rev:\\n                has_rev[s_rev] = 1\\n            else:\\n                has_rev[s] = 0\\n    ans = []\\n    for s in has_rev:\\n        if has_rev[s]:\\n            ans.append(s)\\n    if ans:\\n        ans = ''.join(ans)\\n        ans_rev = ans[::-1]\\n    else:\\n        ans = ''\\n        ans_rev = ''\\n    if pal:\\n        ans = ans + pal[0] + ans_rev\\n        print(len(ans))\\n        print(ans)\\n    else:\\n        ans = ans + ans_rev\\n        print(len(ans))\\n        print(ans)\\n\\n\\n\\n\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n,m=map(int,input().split())\\nls=set()\\nfinal=\\\"\\\"\\nfor i in range(n):\\n    s=input()\\n    if(s[::-1] in ls):\\n        ls.remove(s[::-1])\\n        final=s+final+s[::-1]\\n    else:\\n        ls.add(s)\\nfor s in ls:\\n    flag=True\\n    for i in range(m//2):\\n        if(s[i]!=s[m-i-1]):\\n            flag=False\\n    if(flag):\\n        final=final[0:len(final)//2]+s+final[len(final)//2:]\\n        break\\nprint(len(final))    \\nprint(final)        \", \"n,m = map(int,input().split())\\ndata = [input() for _ in range(n)]\\ndata_rev = [x[::-1] for x in data]\\n\\nnow = \\\"\\\"\\nans = 0\\nfor i in range(n):\\n    for j in range(i+1,n):\\n        if data[i] == data_rev[j]:\\n            now = data[i] + now + data[j]\\n\\nans = len(now)\\nfor i in range(n):\\n    if data[i] == data_rev[i]:\\n        now2 = data[i]\\n        for j in range(n):\\n            if j == i:continue\\n            for k in range(j+1,n):\\n                if k == i:continue\\n                if data[j] == data_rev[k]:\\n                    now2 = data[j] + now2 + data[k]\\n        if ans < len(now2):\\n            now = now2\\n            ans = len(now2)\\n\\nprint(ans)\\nprint(now)\", \"import sys\\ninput = sys.stdin.readline\\nfrom collections import Counter\\n\\nN, M = map(int, input().split())\\nSs = [input().rstrip() for _ in range(N)]\\n\\nC = Counter(Ss)\\n\\nans1 = \\\"\\\"\\nonly_used = \\\"\\\"\\nfor S in Ss:\\n    Is = S[::-1]\\n    if S != Is:\\n        if Is in C and C[Is] > 0:\\n            C[Is] -= 1\\n            C[S] -= 1\\n            ans1 += S\\n    else:\\n        if S in C and C[Is] > 1:\\n            C[S] -= 2\\n            ans1 += S\\n        elif S in C and C[Is] == 1:\\n            C[S] = 0\\n            only_used = S\\n\\nans = ans1 + only_used + ans1[::-1]\\nprint(len(ans))\\nprint(ans)\", \"n, m = list(map(int, input().split()))\\nk = set()\\ns = \\\"\\\"\\nans = \\\"\\\"\\nfor i in range(n):\\n    new_s = input()\\n    if new_s[::-1] in k:\\n        ans += new_s\\n    elif new_s == new_s[::-1]:\\n        s = new_s\\n    k.add(new_s)\\nprint(2 * len(ans) + len(s))\\nprint(ans + s + ans[::-1])\\n\", \"n, m = list(map(int, input().split()))\\nstrings = []\\npal = []\\npairs = []\\n\\nfor i in range(n):\\n    s = input()\\n    r = s[::-1]\\n    if s == r:\\n        pal.append(s)\\n    else:\\n        if r in strings:\\n            pairs.insert(0, s)\\n            pairs.append(r)\\n            strings.remove(r)\\n        else:\\n            strings.append(s)\\nl = len(pairs)\\nans = ''\\nfor i in range(l // 2):\\n    ans += pairs[i]\\nif pal:\\n    ans += max(pal, key=lambda a: len(a))\\nfor i in range(l // 2):\\n    ans += pairs[l // 2 + i]\\nprint(len(ans))\\nprint(ans)\\n\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3 3\\ntab\\none\\nbat\\n\",\n    \"4 2\\noo\\nox\\nxo\\nxx\\n\",\n    \"3 5\\nhello\\ncodef\\norces\\n\",\n    \"9 4\\nabab\\nbaba\\nabcd\\nbcde\\ncdef\\ndefg\\nwxyz\\nzyxw\\nijji\\n\",\n    \"5 6\\najwwja\\nfibwwz\\nbjwker\\ndfjsep\\nzwwbif\\n\",\n    \"7 3\\nbob\\nmqf\\nsik\\nkld\\nfwe\\nfnz\\ndlk\\n\",\n    \"6 3\\nwji\\niwn\\nfdp\\nnwi\\nsdz\\nwow\\n\",\n    \"1 48\\nyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\\n\",\n    \"26 1\\nz\\ny\\nx\\nw\\nv\\nu\\nt\\ns\\nr\\nq\\np\\no\\nn\\nm\\nl\\nk\\nj\\ni\\nh\\ng\\nf\\ne\\nd\\nc\\nb\\na\\n\",\n    \"4 2\\nzz\\nvv\\nzv\\nvz\\n\",\n    \"8 3\\nttt\\nttq\\ntqt\\nqtq\\nqqq\\ntqq\\nqqt\\nqtt\\n\",\n    \"13 4\\nhhhm\\nmhmh\\nmmhh\\nhmhm\\nmhhm\\nhmmm\\nhhhh\\nmmmm\\nhmmh\\nhhmm\\nmmhm\\nhhmh\\nmhmm\\n\",\n    \"15 4\\njjhj\\nhjhh\\njjjh\\njjjj\\nhjhj\\nhjjj\\nhhhh\\nhhjh\\njhjh\\nhhhj\\njhhh\\njhjj\\nhjjh\\njjhh\\nhhjj\\n\",\n    \"19 6\\nbbsssb\\nbbsbsb\\nbbssbb\\nbssbbs\\nsbbbsb\\nsbbssb\\nsbsbss\\nssbsbb\\nbssssb\\nsssbsb\\nbbbbbs\\nsssbss\\nbsssbb\\nbssbbb\\nsssssb\\nbbbsbs\\nsbbbbb\\nbbbsss\\nssbbbs\\n\",\n    \"19 5\\nassaa\\nsaaas\\naaass\\nassss\\nsssas\\nasasa\\nsasss\\naasaa\\nsasaa\\nsasas\\nassas\\nsssss\\nasass\\naaasa\\nasaaa\\nssaaa\\naaaas\\naasas\\naassa\\n\",\n    \"20 8\\ngggxgggg\\nxxxggxxg\\nxxgggxgx\\nxxggxgxg\\ngxxxxxxg\\ngxggxxxg\\nxxgxxxgx\\ngggxgggx\\nxgxxggxx\\ngxgggxgg\\nggxxggxg\\nxxggxxxg\\nxgggxgxg\\nxgggxxxx\\nxxggxggg\\ngxgxxxgx\\nggxgxxxx\\nggggxxgg\\nggggxxgx\\nxxgxxgxx\\n\",\n    \"16 9\\nviiviiviv\\nivviivivv\\nivvivviiv\\nivvvvvivv\\nviviiivvv\\nivivivvii\\niiiiiivvi\\niiviviivv\\niiiiviviv\\niviviiiii\\nvivviviiv\\nviivivivi\\niivvvvivv\\niivviivvv\\niiviiviiv\\nivviiiiiv\\n\",\n    \"15 10\\nhhhlhhllhh\\nlllhlhllhl\\nllhhllllhh\\nlhhhhllllh\\nlhhhllhlll\\nllhhlhhhlh\\nllhhhhhlhh\\nhlllhhhhll\\nhhlhhhhlll\\nlhhllhhlll\\nlhlhhllhhh\\nhhlllhhhhl\\nllllllhllh\\nlhhhlhllll\\nhlhllhlhll\\n\",\n    \"19 11\\niijijiiiiii\\njjjjjjjjiji\\njjijjiiijij\\nijjjjiiijij\\njijijiijijj\\niijiijiijij\\niiijjijijjj\\njjjjjjiiiij\\niiiiijjiiii\\njiijiijjjjj\\niiiiijiijji\\niijijjjijji\\njijjjiijijj\\nijjijiiijjj\\nijijjjijjij\\nijjjiiijjjj\\nijjijiiijji\\niijjjijiiii\\niijijjijjjj\\n\",\n    \"9 2\\nss\\nat\\nst\\ntt\\nta\\nsa\\nas\\nts\\naa\\n\",\n    \"9 2\\naa\\nii\\nkk\\nia\\nak\\nik\\nai\\nka\\nki\\n\",\n    \"8 2\\nya\\nyp\\naa\\nap\\npa\\npp\\nyy\\npy\\n\",\n    \"16 13\\nejlvcbnfwcufg\\nbmvnpbzrtcvts\\nuxkanaezbvqgq\\nsqaqpfuzqdfpg\\noxwudrawjxssu\\nsicswzfzknptx\\nrmutvsxzrdene\\nfmeqzuufksowc\\nerterswsretre\\napwvlfulvfahg\\ngybyiwjwhvqdt\\nouvkqcjjdnena\\ncwoskfuuzqemf\\nqkyfapjycrapc\\ncmjurbzlfuihj\\nrnjtncwjzonce\\n\",\n    \"17 14\\nufkgjuympyvbdt\\ninohechmqqntac\\npnrthedikyelhu\\nkibretxzbokkul\\nagmpxldeaicfip\\najxhqqbgqiaujf\\ncvaoithqvhqzmp\\ngltyuliiluytlg\\nfjlyvpggpvyljf\\negoyzxewwwwkdc\\nukasrncwnxmwzh\\nilwjzvnerjygvm\\nhrhttsttcgrbaw\\npmzqhvqhtioavc\\nazzvicbnvvujrg\\ntczhcacvevibkt\\ngvhhusgdjifmmu\\n\",\n    \"18 15\\nhprpaepyybpldwa\\npoveplrjqgbrirc\\ninsvahznhlugdrc\\nawdlpbyypeaprph\\ngurilzdjrfrfdnt\\nkqxtzzdddrzzwva\\ndvrjupbgvfysjis\\nvcehqrjsjrqhecv\\nefcudkqpcsoxeek\\nghnyixevvhaniyw\\nwaylplvlkfwyvfy\\nhvcxvkdmdkvxcvh\\nswvvohscareynep\\ncljjjrxwvmbhmdx\\nmmnrmrhxhrmrnmm\\nrkvlobbtpsyobtq\\ntjguaaeewdhuzel\\nodewcgawocrczjc\\n\",\n    \"17 14\\niqjzbmkkmbzjqi\\nflaajsyoyjqbta\\nzvkqmwyvyvqrto\\nohqsfzzjqzirgh\\neqlkoxraesjfyn\\nsxsnqmgknyrtzh\\nhctwrsetmqnspz\\npzrdlfzqfgyggt\\nfpppuskqkafddl\\nvqzozehbutyudm\\ncprzqnxhyhpucu\\nekbauejlymnlun\\natbqjyoysjaalf\\nzpsnqmtesrwtch\\ntssovnhzbvhmrd\\ngzgybjgrrypgyw\\nawpkcwyswerzar\\n\",\n    \"19 15\\nkzxrduectwevzya\\nrvbbobbwbbobbvr\\nfnrsfapipafsrnf\\najrgjayyijtakwo\\nszcbqnxerrckvmq\\nqwqcjnklyhqzwlv\\nqtljkxivuuquagh\\nzmoatzyyuvxvvhn\\nqevycxrkxxztjqu\\nffcoecqrultafej\\nayzvewtceudrxzk\\nsdvfbzlbqpneilp\\njefatlurqceocff\\nwtkfzdlenlrupbn\\ncxlehlbfqxuxehh\\npdnorfgpiftfidf\\nhvpcirhwigzmwee\\njkyqsfzgttackpr\\npfcoduejjsmgekv\\n\",\n    \"21 16\\nbouivksewcfbggsi\\nucisrymoomyrsicu\\nlbfnxsbmumdwnvdz\\nkqhxcvtpdxdwcxzx\\nutukvguzuickqgbc\\nqwagyohxthiilhmk\\ntrgvhvvttvvhvgrt\\nnxvwzbdimdzkjqgb\\njfqmhvbflacvocaq\\naboijsvharstfygt\\niirhlhuggqewuyiy\\nqacovcalfbvhmqfj\\nwmmdwejepfxojarg\\neyyfdcqpbsfkxqed\\nvlcezvrrmnxkvyfy\\nsgdgrvtimaacwmnp\\nomlspljvkpytqoay\\nhezwngleelgnwzeh\\nasthcgrdjscygqlz\\nhatzcsjktartsctc\\nyfyvkxnmrrvzeclv\\n\",\n    \"18 15\\ntouncxctlwjlnix\\ncrdhfensgnoxsqs\\nauckexocydmizxi\\nqtggbkrcwsdabnn\\nskqkditatcinnij\\neoyixhclebzgvab\\nugwazjibyjxkgio\\npfqwckybokoboml\\naagasbbbrsnlgfm\\nqvjeqybuigwoclt\\ntzxognenxqkbcuu\\nxjluzkcigarbjzi\\nbavgzbelchxiyoe\\nnprzcwsbswczrpn\\nizjbragickzuljx\\nbnmukiouinxhrfw\\nkoytmudzyrmiktj\\nnnbadswcrkbggtq\\n\",\n    \"21 16\\nivmdykxgzpmpsojj\\nlsacbvwkzrihbxae\\nwcwvukyhtrgmimaq\\nebzvsaushchiqugo\\njnpxszhkapzlexcg\\nishppvuydabnmcor\\ndublllwaawlllbud\\nnznmhodswuhvcybg\\nvfucufwyywfucufv\\nllxpiainiamylrwm\\nbgfembyqiswnxheb\\nxarywsepptlzqywj\\nicpjbiovfkhxbnkk\\nbwndaszybdwlllbn\\nwgzhopfdluolqcbs\\nzevijfwyyvzwimod\\neaxbhirzkwvbcasl\\ndomiwzvyywfjivez\\nukoehxfhrinomhxf\\nmwrlymainiaipxll\\nfxkafzyelkilisjc\\n\",\n    \"24 17\\ngdnaevfczjayllndr\\nwmuarvqwpbhuznpxz\\nlurusjuzrkxmdvfhw\\nyckftntrvdatssgbb\\nzxpnzuhbpwqvraumw\\nwaxuutbtbtbtuuxaw\\ndgwjcwilgyrgpohnr\\ntrcttthipihtttcrt\\ncmbovzvfgdqlfkfqp\\nqbgqnzkhixnnvzvqi\\nqiursxnedmveeuxdq\\nrdnllyajzcfveandg\\nbzwxilleapxzcxmde\\ncxcfjzlfdtytldtqf\\nyhukzlipwduzwevmg\\nrorwbyuksboagybcn\\nambwnlhroyhjfrviw\\nuhkfyflnnnlfyfkhu\\noqujycxjdwilbxfuw\\nkjvmprbgqlgptzdcg\\nntvbvmwtoljxorljp\\nwivrfjhyorhlnwbma\\nukeawbyxrsrsgdhjg\\nlkstfcrcpwzcybdfp\\n\",\n    \"17 14\\ntzmqqlttfuopox\\ndlgvbiydlxmths\\ndxnyijdxjuvvej\\nnfxqnqtffqnojm\\nrkfvitydhceoum\\ndycxhtklifleqe\\nldjflcylhmjxub\\nurgabqqfljxnps\\nshtmxldyibvgld\\nosjuvluhehilmn\\nwtdlavffvaldtw\\nabjixlbuwfyafp\\naojogsmvdzyorp\\nsicdoeogurcwor\\nocxbhsfmhmumef\\ndqxmxaadjwhqus\\nclwotgqvdwcbar\\n\",\n    \"19 15\\nvckwliplqlghsrj\\nijodcwwahmyhlcw\\nvmxtpfqfucsrlkj\\nurfpsqvvghujktj\\ndqzjhsahqclpdnk\\ngxkkfjpgksgvosn\\ntdzghaxmubitpho\\nauspvsdadsvpsua\\njrshglqlpilwkcv\\nmczlxjpwkjkafdq\\nogoiebrhicgygyw\\nmqvfljsycyjgmry\\nrypgirpkaijxjis\\nfdqqybfabhektcz\\nqjlgcyyvgybkfob\\nfgdacgwkwtzmxaw\\nbeodeawdxtjkmul\\nuvofthzdouykfbm\\nfohvezsyszevhof\\n\",\n    \"21 16\\nnmonvcjsrzaaptwq\\ngwfqpwpzpomihwrk\\nwpddhveysfqnahtp\\napudlvvoovvldupa\\nrmmdkvxhbaatqbix\\nnuylrmomksyzfvqj\\ntehasluuazwsubot\\nkvmtoacwfvgaswjc\\nkzeqgpbbvbkopdep\\nuuqfkyksskykfquu\\ncdvgblxukhlauyrt\\nqufnzzgoyrinljba\\nwawqpunycdjrtugt\\njainpkxzzxkpniaj\\nbqxflkftillbhziu\\nypdoaowbvafxcavr\\nffsnmnwxarihoetb\\nvkjeolamwejtoeyb\\nuizhbllitfklfxqb\\nenmimfyotwwxlubl\\njdapubmqhivhvtpk\\n\",\n    \"19 15\\njbrkxvujnnbqtxl\\nnccimzpijbvkgsw\\nthkzoeuqubgqmyg\\ngawdqgcmsyyqjqi\\ntpmtyqywcibpmsx\\ncdizsrcxbyxgjhy\\nhbdtwfbigjgjvvx\\nzsgqmcnzpyjtptx\\nsdunabpxjgmjini\\npegfxzgxgzxfgep\\ndadoreolxiexykr\\nwlammhynkmvknbf\\ncwnddcwxvttsrkf\\nllqpdraducfzraa\\nxjobmfjbqnvzgen\\ntanxwnfblurruuz\\nxvvjgjgibfwtdbh\\nzuurrulbfnwxnat\\ndbyznxuogfpdooq\\n\",\n    \"23 16\\nhguaqgtvkgjujqsw\\nourwjkcqcyhwopbx\\nmbzsqzrdrexcyteq\\nikymlzfsglgnrrsk\\nhrkgfbszibphqxug\\nwtahnxkohpjtgqxw\\njqukumpdalhatcuw\\nyeykmsvzalxjkpet\\ncytqzyfmbrdfzksn\\nmxnlbjvghjzukfqq\\nrekvgjgifopxchgw\\nnqezefubkbwkquxn\\ntwytadlousxwkyrw\\nunovmzyhjyydnzyu\\nubpegcvfelmnkxfx\\nhpgbwhlmmlhwbgph\\npusmzqjvwcrxckxi\\nooetmunvipomrexv\\npcetnonmmnontecp\\ntewdbezylmzkjrvo\\nksrrnglgsfzlmyki\\ntliczkoxzeypchxm\\nwuctahladpmukuqj\\n\",\n    \"21 16\\nogkkdydrhzgavqkc\\niqaxpnpsjdvgkrrz\\ntewguczyqcisoqzh\\npeqnniumbtkxbyks\\nwsqyouoxwktyrcjo\\nrvoezvxklbyaeuzn\\niolswzrxjomtadts\\neycdlpicgozjcigd\\nwrsbhqcffrsphnmh\\nncjsrocnbxuuerot\\npxalvbzhtirkcbqk\\ndgicjzogcipldcye\\nlymeaolddloaemyl\\ntfcknbkxzfcuiycj\\njnirwmlmvxtmgnma\\nojcrytkwxouoyqsw\\nsivatxubbohsutgi\\nuxzptbnuymgogsqs\\nvxhpocemmsltfnas\\nizbrffhfzwroasyl\\nnzueayblkxvzeovr\\n\",\n    \"18 15\\nragnnivnpxztdrs\\nvkyxdmkucqqbpug\\nitkvrrlnlmtjqcr\\nxyxdblwlwlbdxyx\\nwkyzxwlbrdbqkem\\nihaamxlwxksuzog\\nutzglkmjsnvajkt\\nxpscnineyfjbtiz\\ndansieshwouxwed\\ngpesrpjnjjfhvpn\\nlytyezeofixktph\\nqcmqoukytsxdkvj\\ntkjavnsjmklgztu\\naekyzxlyqanqfzp\\nduqoshteikxqgzl\\nptqylxvlzxlgdhj\\nktresxutnpspgix\\nnzyzrihyzbelvac\\n\",\n    \"21 16\\nfumufbuqukamthau\\nwrvomjqjmzmujnhx\\nqgsmvvkmvkosktvp\\nzifwbktvdtceafla\\niwhwzjoxpmfengim\\njzvtjjshhsjjtvzj\\nektvzejyypqdglgp\\nhazzzvyqzcfrhlew\\nrrmnojzxdisryhlf\\nydhwyvjbbjvywhdy\\ndcbwaeidaibouinw\\nkzamfhfzywfulczz\\nqqnxvlaaqtwnujzx\\ntvziydcmzomoumhz\\njalitflajnnojsho\\npxnvfqubwwrbtflh\\nwelhrfczqyvzzzah\\ncmzuycjmflasndrt\\niquvnxxqyyhhabdw\\nkdemxeezdudoolsl\\nmsmvkvpwyshrtmfc\\n\",\n    \"24 17\\nmhcuaxurtqranxfzs\\nuvkvuufjvabbhphfr\\npvecnayhshocfcteo\\nnxpzsisqaqsiszpxn\\nectznpabcztyqidmg\\nuonnubzlvqovzarun\\ntdfoxciotaewhxaky\\npfdiagdzhacyttkdq\\nbvafrpvllatsdohrx\\nymjramutquyxaldxi\\nigzbnrrayqklxvrct\\nmpfaoooffuptrvpob\\nwhyeubpfcbfnaqmgt\\nkkvrolvfrrgyjtxvs\\nsxvytjtdpmoiqmrco\\nqpybyiznrnziybypq\\nosqtsegisigestqso\\npwdbqdwvwrwsntzgn\\ninnhvyozrobihcxms\\nvhyehewofkpywdsyp\\nocrmqiompdtjtyvxs\\naojkeenmaxymwsuto\\nkkddoxvljvlfrywwf\\nntvhgwbtqbivbppzo\\n\",\n    \"21 16\\nqrunmhntskbkettu\\niljrukpcgdyzfbyk\\nrivdpsimmucsovvt\\npomwlbeecucszzmn\\nsadqtntuieyxyrlf\\nkybfzydgcpkurjli\\nmhnslegyceewirxd\\nmqekpftantmdjcyf\\nocziqcwnsxdnzyee\\nwjprnaxrhwwjsgtk\\nvmwednvvvvndewmv\\nbaulcpgwypwkhocn\\nlvlcoumjcgtmetqq\\nqvcbnuesqlqspayl\\nzywarsfzdulycrsk\\nyevkxvgfkxaarshu\\nphpytewxkgarmpjk\\nqoiuwdzjxuyjyzvn\\nnvzyjyuxjzdwuioq\\nwitjhtpepmunlvzl\\nvxzuvllrhbrhvuek\\n\",\n    \"24 17\\nzndmakqspbruuzsta\\nnvacnkaubelqshjle\\ngzvbehvxuxvhebvzg\\nohnqptaomnrqltjpb\\nbrxlqhayktxoovmfw\\nyxodyrfutnofhoydu\\nznnnrxnueijnbgkyh\\njuzlmpnwtoxbhesft\\nugiakrtzkpavxrntw\\nrzbjnfyrsnrybsgdl\\nhivnuuhrwfwlhhdbf\\nprjbnmwxftlmtbfjr\\nmsuznhixqorujbwas\\nufuoquqdalffvvkuf\\nudyohfontufrydoxy\\njsrawuqtapdqhsniy\\nvphlnhoiirfsadsof\\nldgsbyrnsryfnjbzr\\ntlsngxmxzhmwrqtfp\\nafmeaepzxqcbxphly\\npexlxzqtydcturlis\\nsawbjuroqxihnzusm\\nrkczcixiyhmnwgcsu\\nchswoyhmadcdpsobh\\n\",\n    \"1 1\\na\\n\",\n    \"1 50\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\",\n    \"1 50\\naaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaa\\n\"\n  ],\n  \"outputs\": [\n    \"6\\ntabbat\\n\",\n    \"6\\noxxxxo\\n\",\n    \"0\\n\\n\",\n    \"20\\nababwxyzijjizyxwbaba\\n\",\n    \"18\\nfibwwzajwwjazwwbif\\n\",\n    \"9\\nkldbobdlk\\n\",\n    \"9\\niwnwownwi\\n\",\n    \"48\\nyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\\n\",\n    \"1\\na\\n\",\n    \"6\\nzvvvvz\\n\",\n    \"15\\nttqtqqqqqqqtqtt\\n\",\n    \"28\\nmhmhmmhhmmhmhmmhmhmmhhmmhmhm\\n\",\n    \"52\\njjhjhjhhjjjhhjhjhhhjjjhhhjjhhhjjjhhhjhjhhjjjhhjhjhjj\\n\",\n    \"42\\nbbsssbbssbbsbbbbbsbssssbsbbbbbsbbssbbsssbb\\n\",\n    \"55\\nassaaaaasssssassasaaaaasasssssasaaaaasassasssssaaaaassa\\n\",\n    \"8\\nxxgxxgxx\\n\",\n    \"0\\n\\n\",\n    \"0\\n\\n\",\n    \"0\\n\\n\",\n    \"14\\natstsaaaaststa\\n\",\n    \"14\\niaakikkkkikaai\\n\",\n    \"10\\nypapyypapy\\n\",\n    \"39\\nfmeqzuufksowcerterswsretrecwoskfuuzqemf\\n\",\n    \"42\\ncvaoithqvhqzmpfjlyvpggpvyljfpmzqhvqhtioavc\\n\",\n    \"45\\nhprpaepyybpldwammnrmrhxhrmrnmmawdlpbyypeaprph\\n\",\n    \"70\\nflaajsyoyjqbtahctwrsetmqnspziqjzbmkkmbzjqizpsnqmtesrwtchatbqjyoysjaalf\\n\",\n    \"75\\nkzxrduectwevzyaffcoecqrultafejfnrsfapipafsrnfjefatlurqceocffayzvewtceudrxzk\\n\",\n    \"80\\njfqmhvbflacvocaqvlcezvrrmnxkvyfyhezwngleelgnwzehyfyvkxnmrrvzeclvqacovcalfbvhmqfj\\n\",\n    \"105\\nqtggbkrcwsdabnneoyixhclebzgvabxjluzkcigarbjzinprzcwsbswczrpnizjbragickzuljxbavgzbelchxiyoennbadswcrkbggtq\\n\",\n    \"112\\nlsacbvwkzrihbxaellxpiainiamylrwmzevijfwyyvzwimodvfucufwyywfucufvdomiwzvyywfjivezmwrlymainiaipxlleaxbhirzkwvbcasl\\n\",\n    \"119\\ngdnaevfczjayllndrwmuarvqwpbhuznpxzambwnlhroyhjfrviwuhkfyflnnnlfyfkhuwivrfjhyorhlnwbmazxpnzuhbpwqvraumwrdnllyajzcfveandg\\n\",\n    \"42\\ndlgvbiydlxmthswtdlavffvaldtwshtmxldyibvgld\\n\",\n    \"45\\nvckwliplqlghsrjfohvezsyszevhofjrshglqlpilwkcv\\n\",\n    \"48\\nbqxflkftillbhziujainpkxzzxkpniajuizhbllitfklfxqb\\n\",\n    \"75\\nhbdtwfbigjgjvvxtanxwnfblurruuzpegfxzgxgzxfgepzuurrulbfnwxnatxvvjgjgibfwtdbh\\n\",\n    \"80\\nikymlzfsglgnrrskjqukumpdalhatcuwpcetnonmmnontecpwuctahladpmukuqjksrrnglgsfzlmyki\\n\",\n    \"112\\nwsqyouoxwktyrcjorvoezvxklbyaeuzneycdlpicgozjcigdlymeaolddloaemyldgicjzogcipldcyenzueayblkxvzeovrojcrytkwxouoyqsw\\n\",\n    \"45\\nutzglkmjsnvajktxyxdblwlwlbdxyxtkjavnsjmklgztu\\n\",\n    \"48\\nhazzzvyqzcfrhlewydhwyvjbbjvywhdywelhrfczqyvzzzah\\n\",\n    \"51\\nsxvytjtdpmoiqmrcoosqtsegisigestqsoocrmqiompdtjtyvxs\\n\",\n    \"80\\niljrukpcgdyzfbykqoiuwdzjxuyjyzvnvmwednvvvvndewmvnvzyjyuxjzdwuioqkybfzydgcpkurjli\\n\",\n    \"119\\nyxodyrfutnofhoydurzbjnfyrsnrybsgdlmsuznhixqorujbwasgzvbehvxuxvhebvzgsawbjuroqxihnzusmldgsbyrnsryfnjbzrudyohfontufrydoxy\\n\",\n    \"1\\na\\n\",\n    \"50\\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\",\n    \"0\\n\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1304/B",
  "starter_code": ""
}