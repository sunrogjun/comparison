{
  "task_id": "APPS/308",
  "problem_id": 308,
  "prompt": "Mr. Bender has a digital table of size n \u00d7 n, each cell can be switched on or off. He wants the field to have at least c switched on squares. When this condition is fulfilled, Mr Bender will be happy.\n\nWe'll consider the table rows numbered from top to bottom from 1 to n, and the columns \u2014 numbered from left to right from 1 to n. Initially there is exactly one switched on cell with coordinates (x, y) (x is the row number, y is the column number), and all other cells are switched off. Then each second we switch on the cells that are off but have the side-adjacent cells that are on.\n\nFor a cell with coordinates (x, y) the side-adjacent cells are cells with coordinates (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1).\n\nIn how many seconds will Mr. Bender get happy?\n\n\n-----Input-----\n\nThe first line contains four space-separated integers n, x, y, c (1 \u2264 n, c \u2264 10^9;\u00a01 \u2264 x, y \u2264 n;\u00a0c \u2264 n^2).\n\n\n-----Output-----\n\nIn a single line print a single integer \u2014 the answer to the problem.\n\n\n-----Examples-----\nInput\n6 4 3 1\n\nOutput\n0\n\nInput\n9 3 8 10\n\nOutput\n2\n\n\n\n-----Note-----\n\nInitially the first test has one painted cell, so the answer is 0. In the second test all events will go as is shown on the figure. [Image].",
  "solutions": "[\"x, y, n, c = 0, 0, 0, 0\\ndef suma_impares(m):\\n\\treturn m * m\\ndef suma_n(m):\\n\\treturn m * (m - 1) // 2\\ndef cnt(t):\\n\\tu, d, l, r = x + t, x - t, y - t, y + t\\n\\tsuma = t ** 2 + (t + 1) ** 2\\n\\tif u > n: suma -= suma_impares(u - n)\\n\\tif d < 1: suma -= suma_impares(1 - d)\\n\\tif l < 1: suma -= suma_impares(1 - l)\\n\\tif r > n: suma -= suma_impares(r - n)\\n\\tif 1 - l > x - 1 and 1 - d > y - 1:\\n\\t\\tsuma += suma_n(2 - l - x)\\n\\tif r - n > x - 1 and 1 - d > n - y:\\n\\t\\tsuma += suma_n(r - n - x + 1)\\n\\tif 1 - l > n - x and u - n > y - 1:\\n\\t\\tsuma += suma_n(1 - l - n + x)\\n\\tif u - n > n - y and r - n > n - x:\\n\\t\\tsuma += suma_n(u - n - n + y)\\n\\treturn suma\\n\\t\\nn, x, y, c = input().split()\\nn, x, y, c = int(n), int(x), int(y), int(c)\\n#for i in range(10):\\n#\\tprint(i, cnt(i))\\nini, fin = 0, int(1e9)\\ncont = int(1e9)\\nwhile cont > 0:\\n\\tm = ini\\n\\tpaso = cont // 2\\n\\tm += paso\\n\\tif cnt(m) < c:\\n\\t\\tini = m + 1\\n\\t\\tcont -= paso + 1\\n\\telse:\\n\\t\\tcont = paso\\nprint(ini)\", \"import sys\\nii = lambda: sys.stdin.readline().strip()\\nidata = lambda: [int(x) for x in ii().split()]\\nsdata = lambda: list(ii())\\n\\ndef solve():\\n    n, x, y, c = idata()\\n    r = n ** 2\\n    l = -1\\n    while l + 1 < r:\\n        middle = (l + r) // 2\\n        ans = 1 + 2 * (middle + 1) * middle\\n        ans -= pow(middle - n + y, 2) if middle - n + y > 0 else 0\\n        ans -= pow(middle + 1 - y, 2) if middle + 1 - y > 0 else 0\\n        ans -= pow(middle - n + x, 2) if middle - n + x > 0 else 0\\n        ans -= pow(middle + 1 - x, 2) if middle + 1 - x > 0 else 0\\n        d = 1 + n - x + y\\n        if middle >= d:\\n            ans += (middle - d + 1) * (middle - d + 2) // 2\\n        d = 2 + 2 * n - y - x\\n        if middle >= d:\\n            ans += (middle - d + 1) * (middle - d + 2) // 2\\n        d = 1 + n - y + x\\n        if middle >= d:\\n            ans += (middle - d + 1) * (middle - d + 2) // 2\\n        d = x + y\\n        if middle >= d:\\n            ans += (middle - d + 1) * (middle - d + 2) // 2\\n        if ans >= c:\\n            r = middle\\n        else:\\n            l = middle\\n    print(r)\\n    return\\n\\nfor t in range(1):\\n    solve()\"]",
  "input_output": "{\n  \"inputs\": [\n    \"6 4 3 1\\n\",\n    \"9 3 8 10\\n\",\n    \"9 4 3 10\\n\",\n    \"9 8 2 10\\n\",\n    \"1 1 1 1\\n\",\n    \"10 7 2 7\\n\",\n    \"8 2 6 10\\n\",\n    \"8 1 2 10\\n\",\n    \"6 1 4 10\\n\",\n    \"1000000 951981 612086 60277\\n\",\n    \"1000000 587964 232616 62357\\n\",\n    \"1000000 948438 69861 89178\\n\",\n    \"1000000000 504951981 646612086 602763371\\n\",\n    \"1000000000 81587964 595232616 623563697\\n\",\n    \"1000000000 55 60 715189365\\n\",\n    \"1000000000 85 61 857945620\\n\",\n    \"1000000000 55 85 423654797\\n\",\n    \"1000000000 63 65 384381709\\n\",\n    \"1000000000 44 30 891773002\\n\",\n    \"1000000000 6 97 272656295\\n\",\n    \"1000000000 999999946 999999941 715189365\\n\",\n    \"1000000000 999999916 999999940 857945620\\n\",\n    \"1000000000 999999946 999999916 423654797\\n\",\n    \"1000000000 999999938 999999936 384381709\\n\",\n    \"1000000000 55 999999941 715189365\\n\",\n    \"1000000000 85 999999940 857945620\\n\",\n    \"1000000000 55 999999916 423654797\\n\",\n    \"1000000000 63 999999936 384381709\\n\",\n    \"1000000000 44 999999971 891773002\\n\",\n    \"1000000000 6 999999904 272656295\\n\",\n    \"1000000000 999999946 60 715189365\\n\",\n    \"1000000000 999999916 61 857945620\\n\",\n    \"1000000000 999999946 85 423654797\\n\",\n    \"1000000000 999999938 65 384381709\\n\",\n    \"1000000000 999999957 30 891773002\\n\",\n    \"548813503 532288332 26800940 350552333\\n\",\n    \"847251738 695702891 698306947 648440371\\n\",\n    \"891773002 152235342 682786380 386554406\\n\",\n    \"812168727 57791401 772019566 644719499\\n\",\n    \"71036059 25478942 38920202 19135721\\n\",\n    \"549 198 8 262611\\n\",\n    \"848 409 661 620581\\n\",\n    \"892 364 824 53858\\n\",\n    \"813 154 643 141422\\n\",\n    \"72 40 68 849\\n\",\n    \"958 768 649 298927\\n\",\n    \"800 305 317 414868\\n\",\n    \"721 112 687 232556\\n\",\n    \"522 228 495 74535\\n\",\n    \"737 231 246 79279\\n\",\n    \"6 4 3 36\\n\",\n    \"9 3 8 55\\n\",\n    \"9 4 3 73\\n\",\n    \"9 8 2 50\\n\",\n    \"1 1 1 1\\n\",\n    \"10 7 2 7\\n\",\n    \"8 2 6 20\\n\",\n    \"8 1 2 64\\n\",\n    \"6 1 4 15\\n\",\n    \"8 8 3 1\\n\"\n  ],\n  \"outputs\": [\n    \"0\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"174\\n\",\n    \"177\\n\",\n    \"211\\n\",\n    \"17360\\n\",\n    \"17657\\n\",\n    \"37707\\n\",\n    \"41279\\n\",\n    \"28970\\n\",\n    \"27600\\n\",\n    \"42159\\n\",\n    \"23250\\n\",\n    \"37707\\n\",\n    \"41279\\n\",\n    \"28970\\n\",\n    \"27600\\n\",\n    \"37707\\n\",\n    \"41279\\n\",\n    \"28970\\n\",\n    \"27600\\n\",\n    \"42159\\n\",\n    \"23250\\n\",\n    \"37707\\n\",\n    \"41279\\n\",\n    \"28970\\n\",\n    \"27600\\n\",\n    \"42159\\n\",\n    \"13239\\n\",\n    \"18006\\n\",\n    \"13902\\n\",\n    \"17954\\n\",\n    \"3093\\n\",\n    \"635\\n\",\n    \"771\\n\",\n    \"183\\n\",\n    \"299\\n\",\n    \"25\\n\",\n    \"431\\n\",\n    \"489\\n\",\n    \"556\\n\",\n    \"249\\n\",\n    \"199\\n\",\n    \"6\\n\",\n    \"7\\n\",\n    \"8\\n\",\n    \"7\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"13\\n\",\n    \"3\\n\",\n    \"0\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/255/D",
  "starter_code": ""
}