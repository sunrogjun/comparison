{
  "task_id": "APPS/379",
  "problem_id": 379,
  "prompt": "Hongcow likes solving puzzles.\n\nOne day, Hongcow finds two identical puzzle pieces, with the instructions \"make a rectangle\" next to them. The pieces can be described by an n by m grid of characters, where the character 'X' denotes a part of the puzzle and '.' denotes an empty part of the grid. It is guaranteed that the puzzle pieces are one 4-connected piece. See the input format and samples for the exact details on how a jigsaw piece will be specified.\n\nThe puzzle pieces are very heavy, so Hongcow cannot rotate or flip the puzzle pieces. However, he is allowed to move them in any directions. The puzzle pieces also cannot overlap.\n\nYou are given as input the description of one of the pieces. Determine if it is possible to make a rectangle from two identical copies of the given input. The rectangle should be solid, i.e. there should be no empty holes inside it or on its border. Keep in mind that Hongcow is not allowed to flip or rotate pieces and they cannot overlap, i.e. no two 'X' from different pieces can share the same position.\n\n\n-----Input-----\n\nThe first line of input will contain two integers n and m (1 \u2264 n, m \u2264 500), the dimensions of the puzzle piece.\n\nThe next n lines will describe the jigsaw piece. Each line will have length m and will consist of characters '.' and 'X' only. 'X' corresponds to a part of the puzzle piece, '.' is an empty space.\n\nIt is guaranteed there is at least one 'X' character in the input and that the 'X' characters form a 4-connected region.\n\n\n-----Output-----\n\nOutput \"YES\" if it is possible for Hongcow to make a rectangle. Output \"NO\" otherwise.\n\n\n-----Examples-----\nInput\n2 3\nXXX\nXXX\n\nOutput\nYES\n\nInput\n2 2\n.X\nXX\n\nOutput\nNO\n\nInput\n5 5\n.....\n..X..\n.....\n.....\n.....\n\nOutput\nYES\n\n\n\n-----Note-----\n\nFor the first sample, one example of a rectangle we can form is as follows \n\n111222\n\n111222\n\n\n\nFor the second sample, it is impossible to put two of those pieces without rotating or flipping to form a rectangle.\n\nIn the third sample, we can shift the first tile by one to the right, and then compose the following rectangle: \n\n.....\n\n..XX.\n\n.....\n\n.....\n\n.....",
  "solutions": "[\"#!/usr/bin/env python3\\n\\ndef main():\\n    import re\\n\\n    n, m = list(map(int, input().split()))\\n    left = right = -1\\n    for i in range(n):\\n        mt = re.search(r\\\"X+\\\", input())\\n        if mt is not None:\\n            t = mt.start()\\n            if t != left != -1:\\n                print(\\\"NO\\\")\\n                break\\n            left = t\\n            t = mt.end()\\n            if t != right != -1:\\n                print(\\\"NO\\\")\\n                break\\n            right = t\\n    else:\\n        print(\\\"YES\\\")\\n\\nmain()\\n\", \"n, m = list(map(int, input().split()))\\npu = [input() for i in range(n)]\\ncors = []\\nres = True\\nfor string in pu:\\n    if \\\"X\\\" in string:\\n        if not len(cors):\\n            cors = string.find(\\\"X\\\"), string.rfind(\\\"X\\\")\\n        res = res and string.count(\\\"X\\\") == (cors[1] - cors[0] + 1) and string[cors[0]:cors[1] + 1] == \\\"X\\\" * (cors[1] - cors[0] + 1)\\nif res:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"n, m = list(map(int, input().split()))\\ng = [input() for _ in range(n)]\\nr, c = set(), set()\\nfor i in range(n):\\n    for j in range(m):\\n        if g[i][j] == 'X':\\n            r.add(i)\\n            c.add(j)\\ng = g[min(r):max(r)+1]\\ng = list([x[min(c): max(c) + 1] for x in g])\\n\\ngood = True\\nfor i in range(len(g)):\\n    for j in range(len(g[0])):\\n        if g[i][j] != 'X':\\n            good = False\\n            break\\nprint('YES' if good else 'NO')\\n\", \"h, w = map(int, input().split())\\n\\ng = [input() for _ in range(h)]\\n\\nmh = mw = 10000000\\nMh = Mw = 0\\n\\nfor i in range(h):\\n\\tfor j in range(w):\\n\\t\\tif(g[i][j] == 'X'):\\n\\t\\t\\tmh = min(mh, i)\\n\\t\\t\\tMh = max(Mh, i)\\n\\t\\t\\tmw = min(mw, j)\\n\\t\\t\\tMw = max(Mw, j)\\n\\nr = 'YES'\\n\\nfor i in range(h):\\n\\tfor j in range(w):\\n\\t\\tif (g[i][j] == 'X') != (mh <= i <= Mh and mw <= j <=Mw) :\\n\\t\\t\\tr = 'NO'\\n\\nprint(r)\", \"n, m = list(map(int, input().split()))\\nempthy = '.' * m\\nlast = ''\\nmistake = False\\n\\nfor i in range(n):\\n    s = input()\\n    if s != empthy:\\n        if last == '':\\n            last = s\\n        else:\\n            if last != s:\\n                mistake = True\\n                break\\n\\nif mistake:\\n    print('NO')\\nelse:\\n    print('YES')\\n\", \"n,m=map(int, input().split())\\nflag=False\\ns1=''\\nfor i in range(n):\\n  s=input()\\n  if s.find('X')>-1:\\n    if s1=='':\\n      s1=s\\n      flag=True\\n    elif s1==s:\\n      flag=True\\n    else:\\n      flag=False\\n      break\\nif flag:\\n  print('YES')\\nelse:\\n  print('NO')\", \"n, m = list(map(int, input().split()))\\na = []\\nfor i in range(n):\\n    a.append(input())\\n\\ninf = 10 ** 9\\np, q = inf, inf\\nr, s = -1, -1\\n\\nfor i in range(n):\\n    for j in range(m):\\n        if a[i][j] == 'X':\\n            p = min(p, i)\\n            q = min(q, j)\\n            r = max(r, i)\\n            s = max(s, j)\\n\\nok = True\\nfor i in range(n):\\n    for j in range(m):\\n        if a[i][j] == 'X':\\n            ok &= p <= i <= r and q <= j <= s\\n        if a[i][j] == '.':\\n            ok &= not (p <= i <= r and q <= j <= s)\\n\\nif ok:\\n    print('YES')\\nif not ok:\\n    print('NO')\\n\", \"n, m = map(int, input().split())\\na = [input() for i in range(n)]\\nx1, y1, x2, y2 = 100000, 100000, -1, -1\\nfor i in range(n):\\n    for j in range(m):\\n        if a[i][j] == \\\"X\\\":\\n            x1, y1 = min(j, x1), min(i, y1)\\n            x2, y2 = max(j, x2), max(i, y2)\\nf = True\\nfor i in range(y1, y2 + 1):\\n    for j in range(x1, x2 + 1):\\n        if a[i][j] != \\\"X\\\":\\n            f = False\\nif (not f) or ((x2 - x2) % m and (y2 - y1) % n):\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\", \"n, m = list(map(int, input().split()))\\ns = []\\nfor i in range(n):\\n    s += [input()]\\n\\ndef check():\\n    flag = False\\n    for i in range(n):\\n        for j in range(m):\\n            if s[i][j] == 'X':\\n                i1 = i\\n                j1 = j\\n                flag = True\\n                break\\n        if flag: break\\n\\n    flag = False\\n    for i in range(n-1, -1, -1):\\n        for j in range(m-1, -1, -1):\\n            if s[i][j] == 'X':\\n                i2 = i\\n                j2 = j\\n                flag = True\\n                break\\n        if flag: break\\n\\n    for i in range(n):\\n        for j in range(m):\\n            if i1 <= i <= i2 and j1 <= j <=j2:\\n                if s[i][j] != 'X':\\n                    return False\\n            else:\\n                if s[i][j] == 'X':\\n                    return False\\n    return True\\n\\nif check():\\n    print('YES')\\nelse:\\n    print('NO')\\n\", \"n,m = list(map(int,input().split()))\\ndic = {}\\nfor i in range(n):\\n    dic[i] = input()\\nfirst = False\\nfor i in range(n):\\n    for j in range(m):\\n        if dic[i][j] == 'X':\\n            corner1 = (i,j)\\n            first = True\\n            break\\n    if first:\\n        break\\nfor i in range(corner1[0],n+1):\\n    if i == n or dic[i][corner1[1]] == '.':\\n        corner2 = i-1\\n        break\\nfor i in range(corner1[1],m+1):\\n    if i == m or dic[corner1[0]][i] == '.':\\n        corner3 = i-1\\n        break\\nrec = True\\nfor i in range(n):\\n    for j in range(m):\\n        if i < corner1[0] or i > corner2 or j <corner1[1] or j > corner3:\\n            if dic[i][j] == 'X':\\n                rec = False\\n                break\\n        else:\\n            if dic[i][j] == '.':\\n                rec = False\\n                break\\nif rec:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"n,m = list(map(int, input().split()))\\nx_count = 0\\nstart_x = 0\\nstart_y = 0\\np = []\\nfor i in range(n):\\n    p.append(input())\\nstarted = False\\nfor i in range(n):\\n    for j in range(m):\\n        if p[i][j] == 'X':\\n            x_count += 1\\n        if p[i][j] == 'X' and not started:\\n            started = True\\n            start_x = i\\n            start_y = j\\nx_len = 0\\nfor i in range(start_x, n):\\n    if p[i][start_y] == \\\"X\\\":\\n        x_len += 1\\n    else:\\n        break\\ny_len = 0\\nfor i in range(start_y, m):\\n    if p[start_x][i] == \\\"X\\\":\\n        y_len += 1\\n    else:\\n        break\\nif x_len * y_len != x_count:\\n    print(\\\"NO\\\")\\n    return\\nfor i in range(start_x, start_x + x_len):\\n    for j in range(start_y, start_y + y_len):\\n        if p[i][j] != 'X':\\n            print(\\\"NO\\\")\\n            return\\nprint(\\\"YES\\\")\\n\", \"H, W = map(int, input().split())\\np = []\\nfor i in range(H):\\n    p.append(list(input()))\\n\\nl = u = +100500\\nb = r = -100500\\nfor i in range(H):\\n    for j in range(W):\\n        if p[i][j] == \\\"X\\\":\\n            l = min(l, j)\\n            r = max(r, j)\\n\\n            u = min(u, i)\\n            b = max(b, i)\\n\\n\\nfor i in range(u,b+1):\\n    for j in range(l,r+1):\\n        if p[i][j] == \\\".\\\":\\n            print(\\\"NO\\\")\\n            return\\n\\nprint(\\\"YES\\\")\", \"#!/usr/bin/env python3\\n\\n\\ndef main():\\n    n, m = list(map(int, input().split()))\\n\\n    left = None\\n    right = None\\n\\n    for _ in range(n):\\n        line = input().strip()\\n        cur_l = line.find(\\\"X\\\")\\n        if cur_l != -1:\\n            if left is None:\\n                left = cur_l\\n            else:\\n                if left != cur_l:\\n                    print(\\\"NO\\\")\\n                    return\\n            cur_r = line.rfind(\\\"X\\\")\\n            if right is None:\\n                right = cur_r\\n            else:\\n                if right != cur_r:\\n                    print(\\\"NO\\\")\\n                    return\\n            if '.' in line[cur_l:cur_r]:\\n                print(\\\"NO\\\")\\n                return\\n    print(\\\"YES\\\")\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n, m = map(int, input().split())\\nv = []\\n\\nfor i in range(n):\\n    line = input()\\n    v.append(line)\\n\\nu = n\\nd = 0\\nl = m\\nr = 0\\n    \\nfor i in range(n):\\n    for j in range(m):\\n        if v[i][j] == 'X':\\n            if i < u:\\n                u = i\\n            if i > d:\\n                d = i\\n            if j < l:\\n                l = j\\n            if j > r:\\n                r = j\\n                \\nfor i in range(u,d+1):\\n    for j in range(l, r+1):\\n        if v[i][j] == \\\".\\\":\\n            print(\\\"NO\\\")\\n            return\\n        \\nprint(\\\"YES\\\")\", \"# You lost the game.\\n\\nn,m = list(map(int, input().split()))\\nL = [str(input()) for _ in range(n)]\\n\\nx = y = ok = 0\\nfor i in range(n):\\n    for j in range(m):\\n        if L[i][j] == 'X':\\n            x = i\\n            y = j\\n            ok = 1\\n            break\\n    if ok:\\n        break\\nl = y\\nwhile l < m and L[x][l] == 'X':\\n    l += 1\\n\\nok = 0\\natt = 0\\nfor i in range(x+1, n):\\n    vu = 0\\n    for j in range(m):\\n        if L[i][j] == 'X':\\n            vu = 1\\n            if j < y or j >= l or att:\\n                ok = -1\\n                break\\n        else:\\n            if vu and j >= y and j < l:\\n                ok = -1\\n                break\\n            elif j >= y and j < l:\\n                att = 1\\n    if ok or vu == 0:\\n        break\\n\\nif ok == -1:\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\\n\\n\\n\\n        \\n\", \"n, m = [int(i) for i in input().split()]\\nfield = []\\nfor i in range(n):\\n    field.append(input().strip())\\nst_i = -1\\nst_j = -1\\nen_i = -1\\nen_j = -1\\nresult = \\\"YES\\\"\\ntop_left_found = False\\nfor i in range(n):\\n    for j in range(m):\\n        if not top_left_found and field[i][j] == 'X':\\n            top_left_found = True\\n            st_i = i\\n            st_j = j\\n            for k in range(i, n):\\n                if not 'X' in field[k] and en_i == -1:\\n                    en_i = k - 1;\\n            if en_i == -1:\\n                en_i = n - 1\\n        elif top_left_found:\\n            if i != st_i and en_j == -1:\\n                en_j = m - 1;\\n            if field[i][j] == '.' and i == st_i and en_j == -1:\\n                en_j = j - 1;\\n            elif en_j != -1 and field[i][j] == 'X' and ((j < st_j) or (j > en_j) or (i < st_i) or (i > en_i)):\\n                result = \\\"NO\\\"\\n            elif en_j != -1 and field[i][j] == '.' and ((st_j <= j <= en_j) and (st_i <= i <= en_i)):\\n                result = \\\"NO\\\"            \\nprint(result)\", \"def f():\\n    s=input().split()\\n    m=int(s[0])\\n    n=int(s[1])\\n    ss=[]\\n    for i in range(m):\\n        ss.append(input())\\n    for i in range(m):\\n        for j in range(n):\\n            if ss[i][j]=='X':\\n                return (ss,m,n,i,j)\\n\\ndef ff(ss,m,n):\\n    for k in range(m-1,-1,-1):\\n        for l in range(n-1,-1,-1):\\n            if ss[k][l]=='X':\\n                return (k,l)\\n\\nss,m,n,i,j=f()\\nk,l=ff(ss,m,n)\\nsss=[]\\nfor x in range(m):\\n    s=\\\"\\\"\\n    for y in range(n):\\n        if (i<=x and x<=k and j<=y and y<=l):\\n            s+=\\\"X\\\"\\n        else:\\n            s+=\\\".\\\"\\n    sss.append(s)\\nif(ss==sss):\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"import sys\\nn, m = list(map(int, input().split()))\\ngg = [input() for i in range(n)]\\nused = 0\\nfir = [-1, -1]\\nsec = [-1, -1]\\nfor i in range(n):\\n    for j in range(m):\\n        if gg[i][j] == 'X':\\n            if not used:\\n                used = 1\\n                fir = [i, j]\\n            sec = [i, j]\\nfor i in range(fir[0], sec[0] + 1):\\n    for j in range(fir[1], sec[1] + 1):\\n        if gg[i][j] == '.':\\n            print('NO')\\n            return\\nfor i in range(n):\\n    for j in range(m):\\n        if fir[0] <= i <= sec[0] and fir[1] <= j <= sec[1]:\\n            continue\\n        if gg[i][j] == 'X':\\n            print('NO')\\n            return\\nprint('YES')\\n\", \"n, m = map(int, input().split())\\n\\nss = \\\"\\\"\\n\\nfor i in range(n):\\n    s = str(input())\\n    if 'X' in s:\\n        if ss == \\\"\\\":\\n            ss = s\\n        else:\\n            if s == ss:\\n                pass\\n            else:\\n                print(\\\"NO\\\")\\n                return\\n\\nprint(\\\"YES\\\")\", \"n, m = list(map(int, input().split()))\\ngrid = []\\nfor _ in range(n):\\n    grid.append([c for c in input()])\\n\\ntop = n\\nbot = -1\\nleft = m\\nright = -1\\nfor row in range(n):\\n    for col in range(m):\\n        if grid[row][col] == 'X':\\n            top = min(top, row)\\n            bot = max(row, bot)\\n            left = min(col, left)\\n            right = max(col, right)\\n\\nfail = False\\nfor row in range(top, bot+1):\\n    for col in range(left, right + 1):\\n        if grid[row][col] != 'X':\\n            fail = True\\nprint('NO' if fail else 'YES')\\n\", \"n, m = list(map(int, input().split()))\\npieces = []\\ns = None\\nf = None\\nflag = True\\nopn = False\\nfor k in range(n):\\n    line = input()\\n    i = 0\\n    j = len(line) - 1\\n    \\n    while i < m:\\n        if line[i] == 'X':\\n            if not(s is None or i == s):\\n                flag = False\\n                break\\n            else:\\n                s = i\\n                break\\n        i += 1\\n    i = 0\\n    while i < m:\\n        if line[i] == 'X':\\n            if i != 0 and line[i - 1] == '.' and opn:\\n                flag = False\\n                break        \\n        if line[i] == '.' and i != 0 and line[i - 1] == 'X':\\n            opn = True\\n        i += 1\\n    opn = False\\n    while j > -1:\\n        if line[j] == 'X':\\n            if not(f is None or j == f):\\n                flag = False\\n                break\\n            else:\\n                f = j\\n                break\\n        j -= 1\\nif flag: print(\\\"YES\\\")\\nelse: print(\\\"NO\\\")\\n\\n\", \"n, m = list(map(int, input().split()))\\npuzz = []\\nfor _ in range(n):\\n    puzz.append([1 if x == 'X' else 0 for x in input()])\\nhor, ver = set(), set()\\nfor i, l in enumerate(puzz):\\n    for j, quad in enumerate(l):\\n        if quad:\\n            hor.add(i)\\n            ver.add(j)\\nans = True\\nfor i in hor:\\n    for j in ver:\\n        if not puzz[i][j]:\\n            ans = False\\n            break\\nprint('YES' if ans else 'NO')\\n\", \"import sys\\n\\nn, m = map(int, input().split())\\na = [[i for i in list(input())] for j in range(n)]\\nb = 0\\n\\nfor i in range(n):\\n    for j in range(m):\\n        if a[i][j] == 'X':\\n            nx = j\\n            ny = i\\n            b = 1\\n            break\\n    if b:\\n        break\\nb = 0\\nfor i in range(n - 1, -1, -1):\\n    for j in range(m - 1, -1, -1):\\n        if a[i][j] == 'X':\\n            dx = j\\n            dy = i\\n            b = 1\\n            break\\n    if b:\\n        break\\nb = 0\\nfor i in range(n):\\n    for j in range(m):\\n        if i >= ny and j >= nx and i <= dy and j <= dx:\\n            if a[i][j] != 'X' and b == 0:\\n                print('NO')\\n                b = 1\\n        elif a[i][j] == 'X' and b == 0:\\n            print('NO')\\n            b = 1              \\nif b == 0:\\n    print('YES')\", \"n, m = list(map(int, input().split()))\\n\\npzl = []\\nfor i in range(n):\\n\\tpzl.append(list(input()))\\n\\nleft = m + 1\\nright = -1\\nup = n + 1\\ndown = -1\\n\\nfor i in range(n):\\n\\tfor j in range(m):\\n\\t\\tif pzl[i][j] == 'X':\\n\\t\\t\\tif left > j:\\n\\t\\t\\t\\tleft = j\\n\\t\\t\\tif right < j:\\n\\t\\t\\t\\tright = j\\n\\t\\t\\tif up > i:\\n\\t\\t\\t\\tup = i\\n\\t\\t\\tif down < i:\\n\\t\\t\\t\\tdown = i\\n\\nansw = 'YES'\\nfor i in range(up, down + 1):\\n\\tfor j in range(left, right + 1):\\n\\t\\tif pzl[i][j] != 'X':\\n\\t\\t\\tansw = 'NO'\\nprint(answ)\\n\", \"def codeforces(piece):\\n    row_number = 0\\n    for row in piece:\\n        num = row.count('X')\\n        if num == 0:\\n            continue\\n        if row_number == 0:\\n            row_number = num\\n            continue\\n        if num != row_number:\\n            return 'NO'\\n\\n    col_number = 0\\n    cols = [[row[i] for row in piece] for i in range(len(piece[0]))]\\n    for col in cols:\\n        num = col.count('X')\\n        if num == 0:\\n            continue\\n        if col_number == 0:\\n            col_number = num\\n            continue\\n        if num != col_number:\\n            return 'NO'\\n\\n    return 'YES'\\n\\n\\nrows, _ = input().split()\\nrows = int(rows)\\npiece = []\\nfor _ in range(rows):\\n    line = input()\\n    piece.append(line)\\n\\nprint(codeforces(piece))\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 3\\nXXX\\nXXX\\n\",\n    \"2 2\\n.X\\nXX\\n\",\n    \"5 5\\n.....\\n..X..\\n.....\\n.....\\n.....\\n\",\n    \"1 500\\nn\",\n    \"10 1\\n.\\n.\\n.\\n.\\nX\\n.\\n.\\n.\\n.\\n.\\n\",\n    \"8 5\\nXX.XX\\nX.XXX\\nX.XXX\\nXXX.X\\nXX.XX\\nXX..X\\nXXX.X\\nXXXX.\\n\",\n    \"2 3\\nX..\\n...\\n\",\n    \"6 8\\nXXXXXX..\\nXXXXXXXX\\n.X.X..X.\\n.XXXX..X\\nXX.XXXXX\\nX...X..X\\n\",\n    \"10 2\\n.X\\n.X\\nXX\\nXX\\nX.\\nXX\\nX.\\nX.\\n..\\n..\\n\",\n    \"1 1\\nX\\n\",\n    \"3 3\\nXXX\\nX.X\\nX..\\n\",\n    \"3 3\\nXX.\\nXXX\\n.XX\\n\",\n    \"4 4\\nXXXX\\nXXXX\\nXX..\\nXX..\\n\",\n    \"3 3\\nX.X\\nX.X\\nXXX\\n\",\n    \"3 2\\nX.\\nXX\\n.X\\n\",\n    \"2 1\\nX\\nX\\n\",\n    \"1 2\\nXX\\n\",\n    \"2 3\\n.XX\\nXX.\\n\",\n    \"5 5\\nXXX..\\n.XXX.\\n..XXX\\nXXX..\\n.XXX.\\n\",\n    \"2 4\\nXX..\\n.XX.\\n\",\n    \"4 4\\nXXX.\\nXXX.\\nX.X.\\n..X.\\n\",\n    \"2 3\\nXX.\\n.XX\\n\",\n    \"3 5\\nXXXX.\\n.XXXX\\nXXXX.\\n\",\n    \"2 4\\nXXX.\\n.XXX\\n\",\n    \"3 3\\n...\\n.X.\\nXXX\\n\",\n    \"4 4\\nXX..\\n.XX.\\n..XX\\n....\\n\",\n    \"3 3\\n.X.\\nXX.\\nX..\\n\",\n    \"3 4\\nXXX.\\nX.X.\\nXXX.\\n\",\n    \"4 4\\n....\\n....\\n.XX.\\n..X.\\n\",\n    \"4 4\\n....\\n.XX.\\n..XX\\n....\\n\",\n    \"4 4\\n....\\n....\\n.XXX\\n..X.\\n\",\n    \"2 6\\nXXXXX.\\nXXXXXX\\n\",\n    \"3 3\\nX.X\\nXXX\\n.X.\\n\",\n    \"3 3\\nXXX\\nX.X\\n..X\\n\",\n    \"3 3\\n.XX\\nXX.\\n.XX\\n\",\n    \"3 3\\n.XX\\nXX.\\n...\\n\",\n    \"4 4\\nXX..\\n.XX.\\n....\\n....\\n\",\n    \"3 8\\n.XXXXXX.\\nXXX..XXX\\n.XXXXXX.\\n\",\n    \"3 3\\nXX.\\n.XX\\nXX.\\n\",\n    \"3 3\\n.XX\\nXX.\\nXX.\\n\",\n    \"5 5\\n.....\\n..XXX\\nXXX..\\n..XXX\\n.....\\n\",\n    \"4 4\\n....\\nXXX.\\nX.XX\\nXXX.\\n\",\n    \"5 5\\n.....\\n.XXX.\\n.X.XX\\n.....\\n.....\\n\",\n    \"2 2\\nX.\\nX.\\n\",\n    \"2 5\\n...XX\\n..XX.\\n\",\n    \"3 5\\nXXX..\\n.XXX.\\n..XXX\\n\",\n    \"2 6\\n...XXX\\n.XXX..\\n\",\n    \"5 5\\n.....\\n.XX..\\n..XX.\\n.....\\n.....\\n\",\n    \"5 5\\n.X.XX\\n.XXX.\\n.XXX.\\n.XXX.\\n.XXX.\\n\",\n    \"4 4\\n....\\n.XXX\\n..X.\\n.XX.\\n\",\n    \"4 4\\n....\\n.XX.\\nXX..\\n....\\n\",\n    \"2 4\\n..XX\\n.XX.\\n\",\n    \"3 6\\nXXX...\\n.XXX..\\n..XXX.\\n\",\n    \"3 4\\n.XXX\\nXXX.\\n.XXX\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/745/B",
  "starter_code": ""
}