{
  "task_id": "APPS/189",
  "problem_id": 189,
  "prompt": "Salem gave you $n$ sticks with integer positive lengths $a_1, a_2, \\ldots, a_n$.\n\nFor every stick, you can change its length to any other positive integer length (that is, either shrink or stretch it). The cost of changing the stick's length from $a$ to $b$ is $|a - b|$, where $|x|$ means the absolute value of $x$.\n\nA stick length $a_i$ is called almost good for some integer $t$ if $|a_i - t| \\le 1$.\n\nSalem asks you to change the lengths of some sticks (possibly all or none), such that all sticks' lengths are almost good for some positive integer $t$ and the total cost of changing is minimum possible. The value of $t$ is not fixed in advance and you can choose it as any positive integer. \n\nAs an answer, print the value of $t$ and the minimum cost. If there are multiple optimal choices for $t$, print any of them.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 1000$)\u00a0\u2014 the number of sticks.\n\nThe second line contains $n$ integers $a_i$ ($1 \\le a_i \\le 100$)\u00a0\u2014 the lengths of the sticks.\n\n\n-----Output-----\n\nPrint the value of $t$ and the minimum possible cost. If there are multiple optimal choices for $t$, print any of them.\n\n\n-----Examples-----\nInput\n3\n10 1 4\n\nOutput\n3 7\n\nInput\n5\n1 1 2 2 3\n\nOutput\n2 0\n\n\n\n-----Note-----\n\nIn the first example, we can change $1$ into $2$ and $10$ into $4$ with cost $|1 - 2| + |10 - 4| = 1 + 6 = 7$ and the resulting lengths $[2, 4, 4]$ are almost good for $t = 3$.\n\nIn the second example, the sticks lengths are already almost good for $t = 2$, so we don't have to do anything.",
  "solutions": "[\"n = int(input())\\na = list(map(int,input().split()))\\nt = 0\\nmn = 1000000000\\nfor i in range(1,100):\\n    cur = 0\\n    for j in range(n):\\n        cur += max(0,abs(i-a[j])-1)\\n    if cur < mn:\\n        mn = cur\\n        t = i\\nprint(t,mn)\\n\", \"n=int(input())\\na=[*map(int,input().split())]\\n\\nmcost = 10**8\\nans = 0\\n\\nfor i in range(1,101):\\n    tcost = 0\\n    for j in range(n):\\n        if a[j] > i:\\n            d = abs(a[j] - (i + 1))\\n        elif a[j] < i:\\n            d = abs(a[j] - (i - 1))\\n        else:\\n            d = 0\\n        tcost += d\\n    if tcost < mcost:\\n        mcost, ans = tcost , i\\n\\nprint(ans, mcost)\", \"n = int(input())\\ns = list(map(int,input().split()))\\na,b = -1,188888\\nfor t in range(1,101):\\n    mi = 0\\n    for i in range(n):\\n        mi += min(abs(s[i]-t),abs(s[i]-t-1),abs(s[i]-t+1))\\n    if b>mi:\\n        a,b = t,mi\\nprint(a,b)\", \"import math\\n\\nn = int(input())\\nA = [int(i) for i in input().split()]\\nA.sort()\\n\\nans = 10**18\\nval = 0\\nfor mid in range(1,100):\\n    cost = 0\\n    for i in range(n):\\n        cost += min(abs(A[i] - mid), abs(A[i]-mid+1), abs(A[i]-mid-1))\\n    if cost<ans:\\n        ans = cost\\n        val = mid\\n\\nprint(val, ans)\\n\", \"def read_nums():\\n    return [int(x) for x in input().split()]\\n\\n\\ndef compute_min_cost(t, nums):\\n    res = 0\\n    for num in nums:\\n        if abs(t - num) <= 1:\\n            continue\\n        res += abs(num - t) - 1\\n    return res\\n\\n\\ndef main():\\n    _ = read_nums()\\n\\n    costs = []\\n    nums = read_nums()\\n    for t in range(1, 101):\\n        min_cost = compute_min_cost(t, nums)\\n        costs.append((t, min_cost))\\n\\n    t, cost = sorted(costs, key=lambda x: x[1])[0]\\n    print(t, cost)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\\n\\nsys.setrecursionlimit(10**7)\\ninf = 10**20\\neps = 1.0 / 10**10\\nmod = 10**9+7\\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\\n\\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\\ndef LS(): return sys.stdin.readline().split()\\ndef I(): return int(sys.stdin.readline())\\ndef F(): return float(sys.stdin.readline())\\ndef S(): return input()\\ndef pf(s): return print(s, flush=True)\\n\\n\\ndef main():\\n    n = I()\\n    a = LI()\\n    mm = inf\\n    mi = 0\\n    for i in range(1,100):\\n        t = 0\\n        for c in a:\\n            if c < i:\\n                t += i-1-c\\n            elif c > i:\\n                t += c - 1 - i\\n        if mm > t:\\n            mi = i\\n            mm = t\\n\\n    return '{} {}'.format(mi, mm)\\n\\n\\n\\nprint(main())\\n\\n\", \"n=int(input())\\nl=list(map(int,input().split()))\\nmincost=100000\\nans=0\\nfor t in range(1,101):\\n    curcost=0\\n    for i in l:\\n        if i==t:\\n            continue\\n        else:\\n            curcost+=abs(t-i)-1\\n    if curcost<mincost:\\n        mincost=curcost\\n        ans=t\\nprint(ans,mincost)\", \"n = int(input())\\n\\narr = list(map(int, input().split()))\\narr.sort()\\n\\na = []\\nfor t in range(1, 101):\\n    tot = 0\\n    for item in arr:\\n        if (abs(item - t) >= 1):\\n            tot += abs(item - t) - 1\\n    \\n    a.append((tot, t))\\n\\na.sort()\\n\\nprint(a[0][1], a[0][0])\\n\", \"n = int(input())\\narr = [int(x) for x in input().split()]\\nt = []\\nfor i in range(101):\\n    s = 0\\n    for j in arr:\\n        s += max(0, abs(j - i) - 1)\\n    t.append(s)\\np = t[1:].index(min(t)) + 1\\nprint(p, min(t))\", \"n=int(input())\\nans=10**18\\nval=-1\\narr=list(map(int,input().split()))\\nfor i in range(1,102):\\n    valx=0\\n    for j in arr:\\n        if(abs(j-i)>1):\\n            valx+=abs(j-i)-1\\n    if(valx<ans):\\n        ans=valx\\n        val=i\\nprint(val,ans)\", \"n = int(input())\\na = list(map(int, input().split()))\\nans = 10 ** 8\\nansi = 0\\nfor i in range(1, 101):\\n\\ttmp = sum(min(abs(i - t - 1), abs(i - t + 1), abs(i - t)) for t in a)\\n\\tif tmp < ans:\\n\\t\\tans = tmp\\n\\t\\tansi = i\\nprint(ansi, ans)\", \"n = int(input())\\nl = [*map(int, input().split())]\\ndef f(a):\\n    return [sum(min(\\n        [abs(e - a), abs(e - (a - 1)), abs(e - (a + 1))]) for e in l), a]\\nres = [float('inf'), float('inf')]\\nfor a in range(1, 101):\\n    res = min(res, f(a))\\nprint(res[1], res[0])\", \"N = int(input())\\nnumber_list = list(map(int, input().split(' ')))\\nret = [0, 9999999]\\nfor n in range(1, 101):\\n    temp = 0\\n    for number in number_list:\\n        temp += max(0, abs(number - n) - 1)\\n    if ret[1] > temp:\\n        ret[0] = n\\n        ret[1] = temp\\n\\nprint(ret[0], ret[1])\\n\", \"n = int(input())\\na = [int(t) for t in input().split(' ')]\\n\\nmincost = 1000 * 100 + 1\\nbest_t = None\\nfor t in range(1, 101):\\n    cost = 0\\n    for x in a:\\n        cost += max(0, abs(x - t) - 1)\\n    if cost < mincost:\\n        mincost = cost\\n        best_t = t\\n\\nprint(best_t, mincost)\", \"n = int(input())\\na = [int(v) for v in input().split()]\\na.sort()\\n\\ndef cost1(v, t):\\n    if v < t - 1:\\n        return t - 1 - v\\n    elif v > t + 1:\\n        return v - (t + 1)\\n    else:\\n        return 0\\n\\nbest_t = None\\nbest_cost = 9999999999999\\n\\nfor t in range(1, 101):\\n    cost = sum(cost1(v, t) for v in a)\\n    if cost < best_cost:\\n        best_cost = cost\\n        best_t = t\\n\\nprint(best_t, best_cost)\\n\", \"n=int(input())\\n\\nl=list(map(int,input().split()))\\n\\nmaxx=10000000000\\ncur=0\\nfor i in range(1,101):\\n\\tnow=0\\n\\tfor j in range(n):\\n\\t\\tif l[j]<i:\\n\\t\\t\\tnow+=i-l[j]-1\\n\\t\\telif l[j]>i:\\n\\t\\t\\tnow+=l[j]-i-1\\n\\n\\tif now<maxx:\\n\\t\\tmaxx=now\\n\\t\\tcur=i\\n\\nprint(cur, maxx)\", \"from sys import stdin\\nn=int(stdin.readline().strip())\\n#n,m=map(int,stdin.readline().strip().split())\\ns=list(map(int,stdin.readline().strip().split()))\\ns.sort()\\nans=10**20\\nt1=-1\\nfor t in range(1,101):\\n    aux1=0\\n    for j in range(n):\\n        aux=102\\n        aux=min(aux,abs(1+t-s[j]))\\n        aux=min(aux,abs(t-1-s[j]))\\n        aux=min(aux,abs(t-s[j]))\\n        aux1+=aux\\n    if aux1<ans:\\n        ans=aux1\\n        t1=t\\nprint(t1,ans)\\n        \\n        \\n\", \"import math\\nn = int(input())\\nar = [*map(int, input().split(' '))]\\nmint,mincost = int(1e9),int(1e9)\\nfor i in range(1,105):\\n\\tcost = sum([min(abs(x-i), abs(x-i-1), abs(x-i+1)) for x in ar])\\n\\tif cost < mincost:\\n\\t\\tmincost = cost\\n\\t\\tmint = i\\nprint(int(mint), int(mincost))\", \"n = int(input())\\nl = list(map(int, input().split()))\\nans = [0] * 101\\nfor i in range(1, 101):\\n    for k in range(n):\\n        ans[i] += max(abs(l[k] - i) - 1, 0)\\ncnt = [100000000, 100000000]\\nfor i in range(1, 101):\\n    if cnt[1] > ans[i]:\\n        cnt[0] = i\\n        cnt[1] = ans[i]\\nprint(cnt[0], cnt[1])\", \"n=int(input())\\nar=list(map(int,input().split()))\\ndef f(i):\\n    ans=0\\n    for e in ar:\\n        if(e==i):continue\\n        else:ans+=abs(e-i)-1\\n    return ans\\na=float('inf')\\nb=0\\nfor x in range(1,1001):\\n    if(f(x)<a):\\n        a=f(x)\\n        b=x\\nprint(b,a)\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nmi = 10 ** 8\\nx = -1\\nfor i in range(1, 111):\\n    s = 0\\n    for j in range(n):\\n        if not i - 1 <= a[j] <= i + 1:\\n            if a[j] < i - 1:\\n                z = i - 1 - a[j]\\n            else:\\n                z = a[j] - i - 1\\n            s += z\\n    if s < mi:\\n        mi = s\\n        x = i\\nprint(x, mi)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3\\n10 1 4\\n\",\n    \"5\\n1 1 2 2 3\\n\",\n    \"1\\n5\\n\",\n    \"2\\n1 2\\n\",\n    \"3\\n1 1 1\\n\",\n    \"5\\n100 100 100 100 100\\n\",\n    \"113\\n86 67 31 33 72 100 88 63 16 12 79 80 76 45 31 96 44 10 24 33 53 11 56 100 23 57 9 48 28 73 18 48 12 89 73 9 51 11 82 94 90 92 34 99 54 58 33 67 35 87 58 90 94 64 57 80 87 99 84 99 20 1 63 12 16 40 50 95 33 58 7 23 71 89 53 15 95 29 71 16 65 21 66 89 82 30 6 45 6 66 58 32 27 78 28 42 8 61 10 26 7 55 76 65 100 38 79 1 23 81 55 58 38\\n\",\n    \"3\\n96 93 70\\n\",\n    \"4\\n100 54 93 96\\n\",\n    \"10\\n75 94 58 66 98 95 87 74 65 78\\n\",\n    \"10\\n89 65 98 94 52 71 67 88 70 79\\n\",\n    \"7\\n91 54 87 88 79 62 62\\n\",\n    \"8\\n94 56 100 70 91 79 74 60\\n\",\n    \"11\\n1 1 1 1 1 1 1 1 1 2 3\\n\",\n    \"2\\n1 3\\n\",\n    \"2\\n1 10\\n\",\n    \"2\\n1 100\\n\",\n    \"4\\n1 3 9 9\\n\",\n    \"2\\n2 4\\n\",\n    \"3\\n1 1 10\\n\",\n    \"4\\n2 2 2 4\\n\",\n    \"10\\n1 1 1 1 1 1 1 1 1 3\\n\",\n    \"10\\n1 1 1 1 1 1 1 1 2 3\\n\",\n    \"4\\n1 2 4 5\\n\",\n    \"6\\n1 1 2 10 11 11\\n\",\n    \"5\\n1 1 1 100 100\\n\",\n    \"6\\n1 4 10 18 20 25\\n\",\n    \"4\\n1 2 4 7\\n\",\n    \"2\\n3 5\\n\",\n    \"7\\n1 1 10 10 10 10 10\\n\",\n    \"4\\n1 2 70 71\\n\",\n    \"5\\n1 2 3 3 3\\n\",\n    \"3\\n2 2 5\\n\",\n    \"4\\n1 1 100 100\\n\",\n    \"1\\n1\\n\",\n    \"4\\n1 1 5 5\\n\",\n    \"4\\n1 2 19 20\\n\",\n    \"4\\n1 2 29 30\\n\",\n    \"4\\n1 1 9 9\\n\",\n    \"3\\n5 7 7\\n\",\n    \"4\\n1 3 3 3\\n\",\n    \"6\\n1 10 20 30 31 31\\n\",\n    \"3\\n3 3 5\\n\",\n    \"3\\n1 1 5\\n\",\n    \"2\\n1 6\\n\",\n    \"2\\n1 20\\n\",\n    \"7\\n4 4 4 7 7 7 7\\n\",\n    \"5\\n1 100 100 100 100\\n\",\n    \"4\\n1 1 1 5\\n\",\n    \"7\\n1 1 1 1 100 100 100\\n\",\n    \"3\\n1 4 4\\n\",\n    \"4\\n1 2 10 11\\n\",\n    \"11\\n2 11 13 14 18 20 20 21 22 23 25\\n\",\n    \"10\\n8 8 8 8 8 8 8 8 9 10\\n\",\n    \"3\\n1 100 100\\n\",\n    \"5\\n4 4 4 4 6\\n\",\n    \"10\\n5 5 5 5 5 5 5 5 5 9\\n\",\n    \"10\\n1 1 1 1 1 1 100 100 100 100\\n\",\n    \"2\\n7 14\\n\",\n    \"6\\n1 1 1 1 97 98\\n\",\n    \"100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\n\",\n    \"10\\n8 8 8 8 8 8 8 8 8 10\\n\",\n    \"4\\n1 1 10 10\\n\",\n    \"10\\n1 1 1 1 1 1 1 1 1 99\\n\",\n    \"4\\n1 2 8 8\\n\",\n    \"3\\n1 50 50\\n\",\n    \"4\\n1 2 9 10\\n\",\n    \"3\\n1 1 3\\n\",\n    \"10\\n1 1 1 1 1 1 1 1 1 9\\n\",\n    \"4\\n1 2 5 100\\n\",\n    \"5\\n1 1 1 97 98\\n\",\n    \"5\\n3 3 5 5 7\\n\",\n    \"5\\n1 2 9 9 12\\n\",\n    \"5\\n1 1 1 1 3\\n\",\n    \"2\\n66 100\\n\",\n    \"3\\n1 1 100\\n\",\n    \"11\\n3 4 9 13 39 53 53 58 63 82 83\\n\",\n    \"4\\n1 1 1 10\\n\"\n  ],\n  \"outputs\": [\n    \"3 7\\n\",\n    \"2 0\\n\",\n    \"4 0\\n\",\n    \"1 0\\n\",\n    \"1 0\\n\",\n    \"99 0\\n\",\n    \"54 2787\\n\",\n    \"92 24\\n\",\n    \"94 45\\n\",\n    \"76 104\\n\",\n    \"72 113\\n\",\n    \"78 82\\n\",\n    \"75 96\\n\",\n    \"2 0\\n\",\n    \"2 0\\n\",\n    \"2 7\\n\",\n    \"2 97\\n\",\n    \"4 10\\n\",\n    \"3 0\\n\",\n    \"2 7\\n\",\n    \"3 0\\n\",\n    \"2 0\\n\",\n    \"2 0\\n\",\n    \"3 2\\n\",\n    \"3 22\\n\",\n    \"2 194\\n\",\n    \"11 42\\n\",\n    \"3 4\\n\",\n    \"4 0\\n\",\n    \"9 14\\n\",\n    \"3 134\\n\",\n    \"2 0\\n\",\n    \"3 1\\n\",\n    \"2 194\\n\",\n    \"1 0\\n\",\n    \"2 4\\n\",\n    \"3 32\\n\",\n    \"3 52\\n\",\n    \"2 12\\n\",\n    \"6 0\\n\",\n    \"2 0\\n\",\n    \"21 55\\n\",\n    \"4 0\\n\",\n    \"2 2\\n\",\n    \"2 3\\n\",\n    \"2 17\\n\",\n    \"6 3\\n\",\n    \"99 97\\n\",\n    \"2 2\\n\",\n    \"2 291\\n\",\n    \"3 1\\n\",\n    \"3 14\\n\",\n    \"19 43\\n\",\n    \"9 0\\n\",\n    \"99 97\\n\",\n    \"5 0\\n\",\n    \"6 2\\n\",\n    \"2 388\\n\",\n    \"8 5\\n\",\n    \"2 189\\n\",\n    \"2 4850\\n\",\n    \"9 0\\n\",\n    \"2 14\\n\",\n    \"2 96\\n\",\n    \"3 9\\n\",\n    \"49 47\\n\",\n    \"3 12\\n\",\n    \"2 0\\n\",\n    \"2 6\\n\",\n    \"3 98\\n\",\n    \"2 189\\n\",\n    \"4 2\\n\",\n    \"8 14\\n\",\n    \"2 0\\n\",\n    \"67 32\\n\",\n    \"2 97\\n\",\n    \"52 261\\n\",\n    \"2 7\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1105/A",
  "starter_code": ""
}