{
  "task_id": "APPS/327",
  "problem_id": 327,
  "prompt": "Since Grisha behaved well last year, at New Year's Eve he was visited by Ded Moroz who brought an enormous bag of gifts with him! The bag contains n sweet candies from the good ol' bakery, each labeled from 1 to n corresponding to its tastiness. No two candies have the same tastiness.\n\nThe choice of candies has a direct effect on Grisha's happiness. One can assume that he should take the tastiest ones\u00a0\u2014 but no, the holiday magic turns things upside down. It is the xor-sum of tastinesses that matters, not the ordinary sum!\n\nA xor-sum of a sequence of integers a_1, a_2, ..., a_{m} is defined as the bitwise XOR of all its elements: $a_{1} \\oplus a_{2} \\oplus \\ldots \\oplus a_{m}$, here $\\oplus$ denotes the bitwise XOR operation; more about bitwise XOR can be found here.\n\nDed Moroz warned Grisha he has more houses to visit, so Grisha can take no more than k candies from the bag. Help Grisha determine the largest xor-sum (largest xor-sum means maximum happiness!) he can obtain.\n\n\n-----Input-----\n\nThe sole string contains two integers n and k (1 \u2264 k \u2264 n \u2264 10^18).\n\n\n-----Output-----\n\nOutput one number\u00a0\u2014 the largest possible xor-sum.\n\n\n-----Examples-----\nInput\n4 3\n\nOutput\n7\n\nInput\n6 6\n\nOutput\n7\n\n\n\n-----Note-----\n\nIn the first sample case, one optimal answer is 1, 2 and 4, giving the xor-sum of 7.\n\nIn the second sample case, one can, for example, take all six candies and obtain the xor-sum of 7.",
  "solutions": "[\"R=lambda:list(map(int,input().split()))\\nn,k=R()\\nif k==1:print(n)\\nelse:\\n    i=0\\n    while (1<<i)<=n:i+=1\\n    print((1<<i)-1)\\n\", \"n, k = map(int, input().split())\\nif k == 1:\\n    print(n)\\nelse:\\n    j = 1\\n    while j - 1 < n:\\n        j *= 2\\n    print(j - 1)\", \"from sys import stdin, stdout\\n\\nn,k = list(map(int, stdin.readline().rstrip().split()))\\n\\nif k==1:\\n    print(n)\\nelse:\\n    x=1\\n    while 2*x<=n:\\n        x*=2\\n    print(2*x-1)\\n\\n\", \"N, K = list(map(int, input().split()))\\n\\nif K == 1:\\n    print(N)\\nelse:\\n    cnt = 0\\n    while N > 0:\\n        N >>= 1\\n        cnt += 1\\n    print((1<<cnt)-1)\\n\", \"n, k = [int(v) for v in input().split()]\\n\\nif k == 1:\\n    print(n)\\nelse:\\n    nn = n\\n    p = 0\\n    while nn:\\n        nn //= 2\\n        p += 1\\n    print(2**p - 1)\\n\", \"n, k = list(map(int, input().split()))\\n\\nif k == 1:\\n\\tprint(n)\\nelse:\\n\\tbin_n = bin(n)[2:]\\n\\tmax_deg = len(bin_n)\\n\\tprint((1 << (max_deg)) - 1)\\n\", \"n, k= list(map(int,input().split()))\\n\\nr = 0\\nnn = n\\nwhile nn:\\n    nn >>= 1\\n    r += 1\\n\\nprint((1<<r)-1 if k>1 else n)\\n\", \"n, k = list(map(int, input().split()))\\n\\nif k == 1:\\n    print(n)\\nelse:\\n    print(int('1' * len(bin(n)[2:]), 2))\\n\", \"n,k = list(map(int, input().split(' ')))\\nx = 1\\nwhile x < n:\\n    x *= 2\\n\\nif x > n:\\n    x //= 2\\n\\nif k > 1:\\n    print(x + x - 1)\\nif k == 1:\\n    print(n)\\n\", \"n, k = map(int, input().split())\\nif k == 1:\\n    print(n)\\n    return\\nans = 1\\nwhile 2**ans <= n:\\n    ans += 1\\nans = 2**ans - 1\\nprint(ans)\", \"def problemB():\\n    n, k = list(map(int, input().strip().split()))\\n    if k == 1:\\n        print(n)\\n    else:\\n        bas = 1\\n        while n > 0:\\n            n //=2\\n            bas *=2\\n        print(bas-1)\\n\\n\\ndef __starting_point():\\n    problemB()\\n\\n__starting_point()\", \"def read():\\n    return list(map(int,input().split()))\\nn,k=read()\\nif k==1:\\n    print(n)\\nelse:\\n    ans=0\\n    for i in range(len(bin(n)[2:])):\\n        ans+=2**i\\n    print(ans)\\n        \\n        \\n\", \"import sys\\nsys.setrecursionlimit(1000000)\\nread = sys.stdin.readline\\n\\nN, K = map(int, read().split())\\nif K == 1:\\n    print(N)\\n    return\\nallOne = 1\\nwhile((allOne<<1) <= N):\\n    allOne <<= 1\\nallOne<<=1\\nallOne -= 1\\nprint(allOne)\", \"import sys\\nimport itertools\\nimport functools\\n\\ndef brute_exact(n, k):\\n    ar = list(range(1, n + 1))\\n    combinations = list(itertools.combinations(ar, k))\\n    if not combinations:\\n        return 0\\n    \\n    xor_conv = lambda ar: functools.reduce(lambda x,y : x^y, ar)\\n    return max([xor_conv(combination) for combination in combinations]) \\n\\ndef brute_atleast(n, k):\\n    return max([brute_exact(n, i) for i in range(1, k + 1)])\\n\\ndef solve(n, k):\\n    if k == 1:\\n        return n\\n    \\n    return 2**(n.bit_length()) - 1\\n\\ndef main():\\n    n, k = list(map(int, input().split()))\\n    print(solve(n, k))\\n\\t\\ndef __starting_point():\\n    main() \\n    \\n\\n__starting_point()\", \"n, k = map(int, input().split())\\n\\nif k == 1:\\n\\tprint(n)\\nelse:\\n\\tpr = 1;\\n\\twhile (pr <= n):\\n\\t\\tpr *= 2\\n\\tprint(pr - 1)\", \"n,k = map(int,input().split(\\\" \\\"))\\nif k == 1:\\n\\tprint(n)\\n\\nelse:\\n\\tnum = 1\\n\\twhile num <= n:\\n\\t\\tnum <<= 1\\n\\n\\tprint(num-1)\", \"n, k = list(map(int, input().split()))\\nif k == 1:\\n    print(n)\\nelse:\\n    ans = bin(n)[2:]\\n    ans = ans.replace(\\\"0\\\", \\\"1\\\")\\n    ans = int(ans, 2)\\n    print(ans)\\n\", \"n,k=map(int,input().split())\\nif k==1:\\n  print(n)\\nelse:\\n  bits=len(bin(n)[2:])\\n  print(2**bits-1)\", \"n, k = list(map(int, input().split()))\\ncnt = 0\\nif k == 1:\\n    print(n)\\n    return\\nwhile(n):\\n    n //= 2\\n    cnt += 1\\nans = 0\\nwhile(cnt):\\n    ans += 2 ** (cnt - 1)\\n    cnt -= 1\\nprint(ans)\\n\", \"n,k=[int(i)for i in input().split()]\\n\\nif k==1:\\n\\tprint(n)\\nelse:\\n\\tans=1\\n\\twhile ans<=n:\\n\\t\\tans*=2\\n\\tans-=1\\n\\tprint(ans)\\n\", \"n, k = list(map(int, input().split()))\\nif k == 1:\\n    print(n)\\nelse:\\n    i = 0\\n    while 2 ** (i + 1) <= n:\\n        i += 1\\n    ans = 2 ** (i + 1) - 1\\n    print(ans)\\n\", \"n, k = map(int, input().split())\\n\\nif k == 1:\\n    print(n)\\nelse:\\n    print(int(bin(n)[2:].replace('0', '1'), 2))\", \"n, k = list(map(int, input().split()))\\n\\nif k == 1:\\n    ans = n\\nelse:\\n    ans = 1\\n    while ans <= n:\\n        ans *= 2\\n    ans -= 1\\nprint(ans)\\n\", \"x, y = [int(x) for x in input().split()]  \\nif y==1:\\n    print(x)\\nelse:\\n    nb=x.bit_length()\\n    print((2**nb)-1)\", \"n,k=[int(x) for x in input().split()]\\nif k==1:\\n   print(n)\\n   return\\na=1\\ns=0\\nwhile a<=n:\\n   s+=a\\n   a*=2\\nprint(s)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4 3\\n\",\n    \"6 6\\n\",\n    \"2 2\\n\",\n    \"1022 10\\n\",\n    \"415853337373441 52\\n\",\n    \"75 12\\n\",\n    \"1000000000000000000 1000000000000000000\\n\",\n    \"1 1\\n\",\n    \"1000000000000000000 2\\n\",\n    \"49194939 22\\n\",\n    \"228104606 17\\n\",\n    \"817034381 7\\n\",\n    \"700976748 4\\n\",\n    \"879886415 9\\n\",\n    \"18007336 10353515\\n\",\n    \"196917003 154783328\\n\",\n    \"785846777 496205300\\n\",\n    \"964756444 503568330\\n\",\n    \"848698811 317703059\\n\",\n    \"676400020444788 1\\n\",\n    \"502643198528213 1\\n\",\n    \"815936580997298686 684083143940282566\\n\",\n    \"816762824175382110 752185261508428780\\n\",\n    \"327942415253132295 222598158321260499\\n\",\n    \"328768654136248423 284493129147496637\\n\",\n    \"329594893019364551 25055600080496801\\n\",\n    \"921874985256864012 297786684518764536\\n\",\n    \"922701224139980141 573634416190460758\\n\",\n    \"433880815217730325 45629641110945892\\n\",\n    \"434707058395813749 215729375494216481\\n\",\n    \"435533301573897173 34078453236225189\\n\",\n    \"436359544751980597 199220719961060641\\n\",\n    \"437185783635096725 370972992240105630\\n\",\n    \"438012026813180149 111323110116193830\\n\",\n    \"438838269991263573 295468957052046146\\n\",\n    \"439664513169346997 46560240538186155\\n\",\n    \"440490752052463125 216165966013438147\\n\",\n    \"441316995230546549 401964286420555423\\n\",\n    \"952496582013329437 673506882352402278\\n\",\n    \"1000000000000000000 1\\n\",\n    \"2147483647 1\\n\",\n    \"2147483647 2\\n\",\n    \"2147483647 31\\n\",\n    \"8 2\\n\",\n    \"3 3\\n\",\n    \"4 1\\n\",\n    \"10 2\\n\",\n    \"288230376151711743 2\\n\",\n    \"5 2\\n\",\n    \"576460752303423487 2\\n\",\n    \"36028797018963967 123\\n\",\n    \"1125899906842623 2\\n\",\n    \"576460752303423489 5\\n\",\n    \"288230376151711743 3\\n\",\n    \"36028797018963967 345\\n\",\n    \"18014398509481984 30\\n\",\n    \"8 8\\n\",\n    \"8 1\\n\"\n  ],\n  \"outputs\": [\n    \"7\\n\",\n    \"7\\n\",\n    \"3\\n\",\n    \"1023\\n\",\n    \"562949953421311\\n\",\n    \"127\\n\",\n    \"1152921504606846975\\n\",\n    \"1\\n\",\n    \"1152921504606846975\\n\",\n    \"67108863\\n\",\n    \"268435455\\n\",\n    \"1073741823\\n\",\n    \"1073741823\\n\",\n    \"1073741823\\n\",\n    \"33554431\\n\",\n    \"268435455\\n\",\n    \"1073741823\\n\",\n    \"1073741823\\n\",\n    \"1073741823\\n\",\n    \"676400020444788\\n\",\n    \"502643198528213\\n\",\n    \"1152921504606846975\\n\",\n    \"1152921504606846975\\n\",\n    \"576460752303423487\\n\",\n    \"576460752303423487\\n\",\n    \"576460752303423487\\n\",\n    \"1152921504606846975\\n\",\n    \"1152921504606846975\\n\",\n    \"576460752303423487\\n\",\n    \"576460752303423487\\n\",\n    \"576460752303423487\\n\",\n    \"576460752303423487\\n\",\n    \"576460752303423487\\n\",\n    \"576460752303423487\\n\",\n    \"576460752303423487\\n\",\n    \"576460752303423487\\n\",\n    \"576460752303423487\\n\",\n    \"576460752303423487\\n\",\n    \"1152921504606846975\\n\",\n    \"1000000000000000000\\n\",\n    \"2147483647\\n\",\n    \"2147483647\\n\",\n    \"2147483647\\n\",\n    \"15\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"15\\n\",\n    \"288230376151711743\\n\",\n    \"7\\n\",\n    \"576460752303423487\\n\",\n    \"36028797018963967\\n\",\n    \"1125899906842623\\n\",\n    \"1152921504606846975\\n\",\n    \"288230376151711743\\n\",\n    \"36028797018963967\\n\",\n    \"36028797018963967\\n\",\n    \"15\\n\",\n    \"8\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/912/B",
  "starter_code": ""
}