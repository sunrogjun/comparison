{
  "task_id": "APPS/214",
  "problem_id": 214,
  "prompt": "Bishwock is a chess figure that consists of three squares resembling an \"L-bar\". This figure can be rotated by 90, 180 and 270 degrees so it can have four possible states:\n\n \n\nXX   XX   .X   X.\n\nX.   .X   XX   XX\n\n \n\nBishwocks don't attack any squares and can even occupy on the adjacent squares as long as they don't occupy the same square. \n\nVasya has a board with $2\\times n$ squares onto which he wants to put some bishwocks. To his dismay, several squares on this board are already occupied by pawns and Vasya can't put bishwocks there. However, pawns also don't attack bishwocks and they can occupy adjacent squares peacefully.\n\nKnowing the positions of pawns on the board, help Vasya to determine the maximum amount of bishwocks he can put onto the board so that they wouldn't occupy the same squares and wouldn't occupy squares with pawns.\n\n\n-----Input-----\n\nThe input contains two nonempty strings that describe Vasya's board. Those strings contain only symbols \"0\" (zero) that denote the empty squares and symbols \"X\" (uppercase English letter) that denote the squares occupied by pawns. Strings are nonempty and are of the same length that does not exceed $100$.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the maximum amount of bishwocks that can be placed onto the given board.\n\n\n-----Examples-----\nInput\n00\n00\n\nOutput\n1\nInput\n00X00X0XXX0\n0XXX0X00X00\n\nOutput\n4\nInput\n0X0X0\n0X0X0\n\nOutput\n0\nInput\n0XXX0\n00000\n\nOutput\n2",
  "solutions": "[\"f = []\\nfor i in range(2):\\n    f.append(list(input()))\\n\\n\\nanswer = 0\\n\\nn = len(f[0])\\nfor i in range(n):\\n    if f[0][i] == f[1][i] == '0' and i + 1 < n:\\n        if f[0][i + 1] == '0':\\n            answer += 1\\n            f[0][i + 1] = 'X'\\n        elif f[1][i + 1] == '0':\\n            answer += 1\\n            f[1][i + 1] = 'X'\\n\\n    elif (f[1][i] == '0' or f[0][i] == '0') and i + 1 < n and f[0][i + 1] == f[1][i + 1] == '0':\\n        answer += 1\\n        f[0][i + 1] = f[1][i + 1] = 'X'\\n\\n\\nprint(answer)\\n\", \"3\\n\\ndef o(c):\\n    return c == '0'\\n\\n\\ndef solve(A, B, N):\\n    A += 'XXX'\\n    B += 'XXX'\\n\\n    i = 0\\n    c = 0\\n    while i < N:\\n        if (o(A[i]) and o(A[i + 1]) and o(A[i + 2])\\n            and o(B[i]) and o(B[i + 1]) and o(B[i + 2])):\\n            c += 2\\n            i += 3\\n            continue\\n\\n        x = len([x for x in [o(A[i]), o(A[i + 1]), o(B[i]), o(B[i + 1])] if x])\\n        if x >= 3:\\n            c += 1\\n            i += 2\\n            continue\\n\\n        i += 1\\n\\n    return c\\n\\n\\ndef main():\\n    A = input()\\n    B = input()\\n    N = len(A)\\n    assert len(B) == N\\n    print(solve(A, B, N))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"first = input()\\nsecond = input()\\nadad = list()\\nfor i in range(len(first)):\\n\\tnum = 0\\n\\tif first[i] == '0':\\n\\t\\tnum += 1\\n\\tif second[i] == '0':\\n\\t\\tnum += 1\\n\\tadad.append(num)\\n\\ncnt = 0\\nlast_fill = -1\\nfor i in range(1, len(adad)):\\n\\tif adad[i] + adad[i-1] == 3:\\n\\t\\tcnt += 1\\n\\t\\tadad[i] = adad[i-1] = 0\\n\\telif adad[i] + adad[i-1] == 4:\\n\\t\\tcnt += 1\\n\\t\\tadad[i] = 1\\n\\t\\tadad[i-1] = 0\\nprint(cnt)\\n\", \"s=input()\\nt=input()\\ndp=[]\\nn=len(s)\\na=[]\\nb=[]\\nfor i in range(n+1):\\n    dp.append((0,0))\\nfor i in range(n):\\n    a.append(s[i])\\n    b.append(t[i])\\nans=0\\nfor i in range(n):\\n    if a[i]=='0' and b[i]=='0':\\n        if i>0 and (a[i-1]=='0' or b[i-1]=='0'):\\n            if a[i-1]=='0':\\n                a[i]=b[i]=a[i-1]='X'\\n                ans+=1\\n            elif b[i-1]=='0':\\n                a[i]=b[i]=b[i-1]='X'\\n                ans+=1\\n        elif i+1<n:\\n            if a[i+1]=='0':\\n                a[i]=b[i]=a[i+1]='X'\\n                ans+=1\\n            elif b[i+1]=='0':\\n                a[i]=b[i]=b[i+1]='X'\\n                ans+=1\\nprint(ans)\\n\", \"S1 = input()\\nS2 = input()\\n\\nL = len(S1)\\n\\nmemo = {}\\ndef dfs(i, p1, p2):\\n    if i == L:\\n        return 0\\n    key = (i, p1, p2)\\n    if key in memo:\\n        return memo[key]\\n    r = 0\\n    if S1[i] == S2[i] == '0':\\n        if p1 > 0 or p2 > 0:\\n            if p1 > 0 < p2:\\n                r = max(dfs(i+1, 1, 0), dfs(i+1, 0, 1)) + 1\\n            else:\\n                r = dfs(i+1, 0, 0) + 1\\n        else:\\n            r = dfs(i+1, 1, 1)\\n    elif S1[i] == '0':\\n        if p1 > 0 and p2 > 0:\\n            r = dfs(i+1, 0, 0) + 1\\n        else:\\n            r = dfs(i+1, 1, 0)\\n    elif S2[i] == '0':\\n        if p1 > 0 and p2 > 0:\\n            r = dfs(i+1, 0, 0) + 1\\n        else:\\n            r = dfs(i+1, 0, 1)\\n    else:\\n        r = dfs(i+1, 0, 0)\\n    memo[key] = r\\n    return r\\nprint(dfs(0, 0, 0))\\n\", \"a2 = input()\\nb2 = input()\\na = []\\nb = []\\nfor i in range(len(a2)):\\n    a.append(a2[i])\\n    b.append(b2[i])\\nk = 0\\nfor i in range(len(a)):\\n    if i == 0 and (len(a) > 1):\\n        if a[0] == '0' and b[0] == '0' and a[1] == '0':\\n            a[0] = 'X'\\n            b[0] = 'X'\\n            a[1] = 'X'\\n            k += 1\\n        elif a[0] == '0' and b[0] == '0' and b[1] == '0':\\n            a[0] = 'X'\\n            b[0] = 'X'\\n            b[1] = 'X'\\n            k += 1\\n    elif i == len(a) - 1 and (len(a) > 1):\\n        if a[i] == '0' and b[i] == '0' and a[i - 1] == '0':\\n            a[i] = 'X'\\n            b[i] = 'X'\\n            a[i - 1] = 'X'\\n            k += 1\\n        elif a[i] == '0' and b[i] == '0' and b[i - 1] == '0':\\n            a[i] = 'X'\\n            b[i] = 'X'\\n            b[i - 1] = 'X'\\n            k += 1\\n    elif (len(a) > 1):\\n        if a[i] == '0' and b[i] == '0' and a[i - 1] == '0':\\n            a[i] = 'X'\\n            b[i] = 'X'\\n            a[i - 1] = 'X'\\n            k += 1\\n        elif a[i] == '0' and b[i] == '0' and b[i - 1] == '0':\\n            a[i] = 'X'\\n            b[i] = 'X'\\n            b[i - 1] = 'X'\\n            k += 1\\n        elif a[i] == '0' and b[i] == '0' and a[i + 1] == '0':\\n            a[i] = 'X'\\n            b[i] = 'X'\\n            a[i + 1] = 'X'\\n            k += 1\\n        elif a[i] == '0' and b[i] == '0' and b[i + 1] == '0':\\n            a[i] = 'X'\\n            b[i] = 'X'\\n            b[i + 1] = 'X'\\n            k += 1\\n    else:\\n         k = 0\\nprint(k)\\n\\n        \\n\", \"topboard = list(input())\\nbotboard = list(input())\\n\\nbish = 0\\nleft = 0\\nwhile left + 1 < len(topboard):\\n    if topboard[left] == '0' and botboard[left] == '0':\\n        if topboard[left+1] == '0':\\n            bish += 1\\n            topboard[left] = 'X'\\n            topboard[left+1] = 'X'\\n            botboard[left] = 'X'\\n        elif botboard[left+1] == '0':\\n            bish += 1\\n            topboard[left] = 'X'\\n            botboard[left] = 'X'\\n            botboard[left+1] = 'X'\\n    elif topboard[left+1] == '0' and botboard[left+1] == '0':\\n        if topboard[left] == '0':\\n            bish += 1\\n            topboard[left] = 'X'\\n            topboard[left+1] = 'X'\\n            botboard[left+1] = 'X'\\n        elif botboard[left] == '0':\\n            bish += 1\\n            topboard[left+1] = 'X'\\n            botboard[left] = 'X'\\n            botboard[left+1] = 'X'\\n\\n    left += 1\\n\\nprint(bish)\\n\", \"a = []\\na.append(input())\\na.append(input())\\ndp = [-200] * 4\\ndp[1 * (a[0][0] == 'X') + 2 * (a[1][0] == 'X')] = 0\\nfor i in range(1, len(a[0])):\\n\\todp = dp\\n\\tdp = [-200] * 4\\n\\tstate = 1 * (a[0][i] == 'X') + 2 * (a[1][i] == 'X')\\n\\tfor last_state in range(4):\\n\\t\\tdp[state] = max(dp[state], odp[last_state])\\n\\t\\tif last_state != 3 and state == 0:\\n\\t\\t\\tdp[3] = max(dp[3], odp[last_state] + 1)\\n\\t\\tif last_state == 0:\\n\\t\\t\\tif ((~state) & 1):\\n\\t\\t\\t\\tdp[state + 1] = max(dp[state + 1], odp[last_state] + 1)\\n\\t\\t\\tif ((~state) & 2):\\n\\t\\t\\t\\tdp[state + 2] = max(dp[state + 2], odp[last_state] + 1)\\nprint(max(max(dp[0], dp[1]), max(dp[2], dp[3])))\", \"s = [input(), input()]\\npc = [[s[0][i],s[1][i]].count('0') for i in range(len(s[0]))]\\nans = 0\\nfor i in range(len(pc) - 1):\\n  if pc[i] >= 2 and pc[i + 1] >= 1:\\n    ans += 1\\n    pc[i] -= 2\\n    pc[i + 1] -= 1\\n  elif pc[i] >= 1 and pc[i + 1] >= 2:\\n    ans += 1\\n    pc[i] -= 1\\n    pc[i + 1] -= 2\\nprint(ans)\\n\", \"a=list(input())\\nb=list(input())\\nn=len(a)\\nans=0\\nfor i in range(n-1):\\n    if(a[i+1]=='0' and a[i]=='0' and b[i]=='0'):\\n        ans+=1\\n        a[i]=a[i+1]=b[i]='X'\\n    elif(b[i+1]=='0' and a[i]=='0' and b[i]=='0'):\\n        ans+=1\\n        a[i]=b[i+1]=b[i]='X'\\n    elif(b[i+1]=='0' and a[i+1]=='0' and b[i]=='0'):\\n        ans+=1\\n        a[i+1]=b[i+1]=b[i]='X'\\n    elif(b[i+1]=='0' and a[i+1]=='0' and a[i]=='0'):\\n        ans+=1\\n        a[i+1]=b[i+1]=a[i]='X'\\nprint(ans)\", \"s1=input()\\ns2=input()\\ndp=[0 for i in range(len(s1))]\\nif (s1[0]==s2[0]) and (s1[0]=='0'):\\n    r=2\\nelif (s1[0]==s2[0]) and (s1[0]=='X'):\\n    r=0\\nelse:\\n    r=1\\nfor i in range(1,len(s1)):\\n    if (s1[i]==s2[i]) and (s1[i]=='X'):\\n        dp[i]=dp[i-1]\\n        r=0\\n    elif (s1[i]!=s2[i]) and (r<=1):\\n        dp[i]=dp[i-1]\\n        r=1\\n    elif ((s1[i]==s2[i]) and (s1[i]=='0')):\\n        if r==2:\\n            dp[i]=dp[i-1]+1\\n            r=1\\n        elif r==1:\\n            dp[i]=dp[i-1]+1\\n            r=0\\n        else:\\n            dp[i]=dp[i-1]\\n            r=2\\n    else:\\n        dp[i]=dp[i-1]+1\\n        r=0\\nprint(dp[len(s1)-1])\\n        \\n        \\n\\n\", \"board = []\\nboard.append(input())\\nboard.append(input())\\n\\nn = len(board[0])\\n\\ndp = [[0 for _ in range(n)] for _ in range(4)]\\n\\ninf = float('-inf')\\n\\nif board[0][0] == 'X':\\n    dp[0][0] = inf\\n    dp[2][0] = inf\\nif board[1][0] == 'X':\\n    dp[0][0] = inf\\n    dp[1][0] = inf\\n\\n\\n#print([dp[j][0] for j in range(4)])\\nfor i in range(1, n):\\n    prev_best = max(dp[j][i-1] for j in range(4))\\n    for j in range(4):\\n        dp[j][i] = prev_best\\n    if board[0][i] != 'X' or board[1][i] != 'X':\\n        dp[3][i] = max(dp[3][i], dp[0][i-1] + 1)\\n    if board[0][i] != 'X' and board[1][i] != 'X':\\n        dp[1][i] = max(dp[1][i], dp[0][i-1] + 1)\\n        dp[2][i] = max(dp[2][i], dp[0][i-1] + 1)\\n        dp[3][i] = max(dp[3][i], dp[1][i-1] + 1, dp[2][i-1] + 1)\\n    if board[0][i] == 'X':\\n        dp[0][i] = inf\\n        dp[2][i] = inf\\n    if board[1][i] == 'X':\\n        dp[0][i] = inf\\n        dp[1][i] = inf\\n    #print([dp[j][i] for j in range(4)])\\n\\nprint(max(max(dp[i][-1] for i in range(4)), 0))\\n\", \"a = [list(input()) for _ in range(2)]\\nn = 0\\nfor i in range(len(a[0])):\\n    bljet = 0\\n    if a[0][i] == a[1][i] and a[0][i] == '0':\\n        \\n        if i > 0:\\n            if a[0][i-1] == '0':\\n                a[0][i-1] = 'X'\\n                a[0][i] = 'X'\\n                a[1][i] = 'X'\\n                bljet = 1\\n            if not bljet and a[1][i-1] == '0':\\n                a[1][i-1] = 'X'\\n                a[0][i] = 'X'\\n                a[1][i] = 'X'\\n                bljet = 1\\n        if i+1 < len(a[0]):\\n            if not bljet and a[0][i+1] == '0':\\n                a[0][i+1] = 'X'\\n                a[0][i] = 'X'\\n                a[1][i] = 'X'\\n                bljet = 1\\n            if not bljet and a[1][i+1] == '0':\\n                a[1][i+1] = 'X'\\n                a[0][i] = 'X'\\n                a[1][i] = 'X'\\n                bljet = 1\\n        #print(a[0])\\n        #print(a[1])\\n        \\n    if bljet:\\n        n += 1\\nprint(n)\\n\", \"def read_input():\\n\\treturn map(int, input().split())\\n\\na = [list(input()), list(input())]\\nans = 0\\nn = len(a[0])\\n\\ni = 0\\nwhile i + 1 < n:\\n\\tcnt = sum(c == 'X' for c in [a[0][i], a[1][i], a[0][i + 1], a[1][i + 1]])\\n\\tif cnt > 1:\\n\\t\\ti += 1\\n\\t\\tcontinue\\n\\tif cnt == 1:\\n\\t\\tans += 1\\n\\t\\ti += 2\\n\\t\\tcontinue\\n\\tans += 1\\n\\ta[0][i + 1] = 'X'\\n\\ti += 1\\nprint(ans)\", \"\\n\\nA = []\\nA += [input()]\\nA += [input()]\\n\\nn = len(A[0])\\n\\nB = [[0 for _ in range(4)] for _ in range(n + 1)]\\n\\nB[0][0] = -1000\\nB[0][1] = -1000\\nB[0][2] = -1000\\nB[0][3] = 0\\n\\nfor i in range(1, n + 1):\\n    # 0\\n    if A[1][i - 1] == 'X':\\n        B[i][0] = -1000\\n    elif A[0][i - 1] == 'X':\\n        B[i][0] = max([B[i - 1][j] for j in range(4)])\\n    else:\\n        B[i][0] = max([B[i - 1][2] + 1] + [B[i - 1][0],\\n                                           B[i - 1][1], B[i - 1][3]])\\n\\n    # 1\\n    if A[0][i - 1] == 'X':\\n        B[i][1] = -1000\\n    elif A[1][i - 1] == 'X':\\n        B[i][1] = max([B[i - 1][j] for j in range(4)])\\n    else:\\n        B[i][1] = max([B[i - 1][2] + 1] + [B[i - 1][0],\\n                                           B[i - 1][1], B[i - 1][3]])\\n\\n    # 3\\n    if A[0][i - 1] == 'X' or A[1][i - 1] == 'X':\\n        B[i][2] = -1000\\n    else:\\n        B[i][2] = max([B[i - 1][j] for j in range(4)])\\n\\n    # 4\\n    if A[0][i - 1] == 'X' and A[1][i - 1] == 'X':\\n        B[i][3] = max([B[i - 1][j] for j in range(4)])\\n    elif A[0][i - 1] == 'X':\\n        B[i][3] = B[i - 1][2] + 1\\n    elif A[1][i - 1] == 'X':\\n        B[i][3] = B[i - 1][2] + 1\\n    else:\\n        B[i][3] = max([B[i - 1][j] for j in range(3)]) + 1\\n\\n\\n\\nprint(max([B[n][j] for j in range(4)]))\\n\", \"l1 = list(input().strip())\\nl2 = list(input().strip())\\nr = 0\\n\\nfor i in range(len(l1) - 1):\\n    if l1[i] == '0' and l2[i] == '0':\\n        if l2[i+1] == '0':\\n            l1[i] = 'X'\\n            l2[i] = 'X'\\n            l2[i+1] = 'X'\\n            r += 1\\n        elif l1[i+1] == '0':\\n            l1[i] = 'X'\\n            l2[i] = 'X'\\n            l1[i+1] = 'X'\\n            r += 1\\n    elif l1[i] == '0':\\n        if l1[i+1] == '0' and l2[i+1] == '0':\\n            l1[i] = 'X'\\n            l1[i+1] = 'X'\\n            l2[i+1] = 'X'\\n            r += 1\\n    elif l2[i] == '0':\\n        if l1[i+1] == '0' and l2[i+1] == '0':\\n            l2[i] = 'X'\\n            l1[i+1] = 'X'\\n            l2[i+1] = 'X'\\n            r += 1\\n\\nprint(r)\\n\", \"def go():\\n    matrix = []\\n    matrix.append(list(i for i in input()))\\n    matrix.append(list(i for i in input()))\\n    c = 0\\n    for i in range(len(matrix[0]) - 1):\\n        if matrix[0][i] == '0' and matrix[1][i] == '0':\\n            if matrix[0][i + 1] == '0':\\n                matrix[0][i] = 'X'\\n                matrix[1][i] = 'X'\\n                matrix[0][i + 1] = 'X'\\n                c += 1\\n            elif matrix[1][i + 1] == '0':\\n                matrix[0][i] = 'X'\\n                matrix[1][i] = 'X'\\n                matrix[1][i + 1] = 'X'\\n                c += 1\\n        elif matrix[0][i] == '0':\\n            if matrix[0][i + 1] == '0' and matrix[1][i + 1] == '0':\\n                matrix[0][i] = 'X'\\n                matrix[0][i + 1] = 'X'\\n                matrix[1][i + 1] = 'X'\\n                c += 1\\n        elif matrix[1][i] == '0':\\n            if matrix[0][i + 1] == '0' and matrix[1][i + 1] == '0':\\n                matrix[1][i] = 'X'\\n                matrix[0][i + 1] = 'X'\\n                matrix[1][i + 1] = 'X'\\n                c += 1\\n    return c\\n\\nprint(go())\\n\", \"r1=input()\\nr2=input()\\nn=len(r1)\\nl=[0]\\nfor i in range(n):\\n\\tif r1[i]=='0':\\n\\t\\tif r2[i]=='0':\\n\\t\\t\\tl.append(2)\\n\\t\\telse:\\n\\t\\t\\tl.append(1)\\n\\telse:\\n\\t\\tif r2[i]=='X':\\n\\t\\t\\tl.append(0)\\n\\t\\telse:\\n\\t\\t\\tl.append(-1)\\nl.append(0)\\ns=len(l)\\ncount=0\\nu=1\\ne=1\\nwhile(u<s-1):\\n\\tif l[u]==2 and e==1:\\n\\t\\tif l[u+1]==2:\\n\\t\\t\\te=2\\n\\t\\t\\tu=u+1\\n\\t\\t\\tcontinue\\n\\t\\telif (l[u+1]==1 or l[u+1]==-1):\\n\\t\\t\\tcount=count+1\\n\\t\\t\\tu=u+2\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\tu=u+2\\n\\t\\t\\tcontinue\\n\\tif l[u]==2 and e==2:\\n\\t\\tif l[u+1]==2:\\n\\t\\t\\tcount=count+2\\n\\t\\t\\tu=u+2\\n\\t\\t\\te=1\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\tcount=count+1\\n\\t\\t\\tu=u+1\\n\\t\\t\\te=1\\n\\t\\t\\tcontinue\\n\\tif l[u]==1 or l[u]==-1:\\n\\t\\tif l[u+1]==2:\\n\\t\\t\\tcount=count+1\\n\\t\\t\\tu=u+2\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\tu=u+1\\n\\t\\t\\tcontinue\\n\\tif l[u]==0:\\n\\t\\tu=u+1\\nprint (count)\", \"def ii():\\n    return int(input())\\ndef mi():\\n    return map(int, input().split())\\ndef li():\\n    return list(mi())\\n\\nss = [input().strip(), input().strip()]\\ns = [a + b for a, b in zip(ss[0], ss[1])] + ['XX']\\nn = len(s)\\n\\ndef solve(i, j):\\n    c = 0\\n    k = i\\n    while k < j - 1:\\n        if s[k] == '0X' and s[k + 1] == '00':\\n            c += 1\\n            k += 2\\n        elif s[k] == 'X0' and s[k + 1] == '00':\\n            c += 1\\n            k += 2\\n        elif s[k] == '00' and s[k + 1] == 'X0':\\n            c += 1\\n            k += 2\\n        elif s[k] == '00' and s[k + 1] == '0X':\\n            c += 1\\n            k += 2\\n        elif s[k] == '00' and s[k + 1] == '00':\\n            c += 1\\n            s[k + 1] = '0X'\\n            k += 1\\n        else:\\n            k += 1\\n    return c\\n\\ni = 0\\nc = 0\\nwhile i < n:\\n    if s[i] == 'XX':\\n        i += 1\\n        continue\\n    j = i + 1\\n    while s[j] != 'XX':\\n        j += 1\\n    c += solve(i, j)\\n    i = j\\nprint(c)\", \"def main():\\n    a, b = [i for i in input()], [i for i in input()]\\n    l = len(a)\\n    c = 0\\n    for i in range(l - 1):\\n        if a[i] == '0':\\n            if b[i] == '0':\\n                if a[i + 1] == '0':\\n                    c += 1\\n                    a[i], b[i], a[i + 1] = 1, 1, 1\\n                elif b[i + 1] == '0':\\n                    c += 1\\n                    a[i], b[i], b[i + 1] = 1, 1, 1\\n            elif a[i + 1] == '0' and b[i + 1] == '0':\\n                c += 1\\n                a[i], a[i + 1], b[i + 1] = 1, 1, 1\\n        elif b[i] == '0' and b[i + 1] == '0' and a[i + 1] == '0':\\n            c += 1\\n            b[i], a[i + 1], b[i + 1] = 1, 1, 1\\n    print(c)\\n    return 0\\nmain()\\n\", \"#!/usr/bin/env python3\\n\\nss = [input().strip() for _ in range(2)]\\nn = len(ss[0])\\n\\ncnt = 0\\nhad1 = False\\nhad2 = False\\n\\nfor i in range(n):\\n\\tccur = sum(s[i] == '0' for s in ss)\\n\\tif ccur == 2:\\n\\t\\tif had1:\\n\\t\\t\\tcnt += 1\\n\\t\\t\\thad1 = False\\n\\t\\telif had2:\\n\\t\\t\\tcnt += 1\\n\\t\\t\\thad2 = False\\n\\t\\t\\thad1 = True\\n\\t\\telse:\\n\\t\\t\\thad2 = True\\n\\telif ccur == 1:\\n\\t\\tif had1:\\n\\t\\t\\thad1 = True\\n\\t\\telif had2:\\n\\t\\t\\tcnt += 1\\n\\t\\t\\thad2 = False\\n\\t\\telse:\\n\\t\\t\\thad1 = True\\n\\telse:\\n\\t\\thad1 = False\\n\\t\\thad2 = False\\n\\t\\nprint (cnt)\\n\", \"l1=list(str(input()))\\nl2=list(str(input()))\\nn=len(l1)\\ncount=0\\nfor i in range(n-1):\\n    if l1[i]=='0' and l1[i+1]=='0':\\n        if l2[i]=='0':\\n            l1[i],l1[i+1],l2[i]='X','X','X'\\n            count+=1\\n        elif l2[i+1]=='0':\\n            l1[i],l1[i+1],l2[i+1]='X','X','X'\\n            count+=1\\n    if l2[i]=='0' and l2[i+1]=='0':\\n        if l1[i]=='0':\\n            l2[i],l2[i+1],l1[i]='X','X','X'\\n            count+=1\\n        elif l1[i+1]=='0':\\n            l2[i],l2[i+1],l1[i+1]='X','X','X'\\n            count+=1\\nprint(count)\", \"s1 = input()\\ns2 = input()\\n\\ndesk = [list(s1), list(s2)]\\n\\nln = len(s1)\\nans = 0\\n\\n\\ndef need(i):\\n    return [desk[0][i: i + 2], desk[1][i: i + 2]]\\n\\n\\nfor i in range(ln - 1):\\n    if need(i) == [['0', '0'], ['0', '0']] or need(i) == [['0', '0'], ['0', 'X']]:\\n        desk[0][i] = 'X'\\n        desk[0][i + 1] = 'X'\\n        desk[1][i] = 'X'\\n\\n    elif need(i) == [['0', '0'], ['X', '0']]:\\n        desk[0][i] = 'X'\\n        desk[0][i + 1] = 'X'\\n        desk[1][i + 1] = 'X'\\n\\n    elif need(i) == [['0', 'X'], ['0', '0']]:\\n        desk[0][i] = 'X'\\n        desk[1][i] = 'X'\\n        desk[1][i + 1] = 'X'\\n\\n    elif need(i) == [['X', '0'], ['0', '0']]:\\n        desk[0][i + 1] = 'X'\\n        desk[1][i] = 'X'\\n        desk[1][i + 1] = 'X'\\n\\n    else:\\n        continue\\n\\n    ans += 1\\n\\nprint(ans)\\n\", \"\\nl1=[]\\nl2=[]\\nfor i in input():\\n\\tl1.append(i)\\nfor i in input():\\n\\tl2.append(i)\\ncount=0\\t\\nc=0\\nwhile c<len(l1)-1:\\n\\tnewli=[l1[c],l1[c+1],l2[c],l2[c+1]]\\n\\ttry:\\n\\t\\tif l1[c]==l1[c+1]==l1[c+2]==l2[c]==l2[c+1]==l2[c+2]=='0':\\n\\t\\t\\tcount+=2\\n\\t\\t\\tc+=3\\n\\t\\t\\tcontinue\\n\\texcept:\\n\\t\\tpass\\n\\tif newli.count('0')>=3:\\n\\t\\tcount+=1\\n\\t\\tc+=2\\n\\telse:\\n\\t\\tc+=1\\t\\nprint(count)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"00\\n00\\n\",\n    \"00X00X0XXX0\\n0XXX0X00X00\\n\",\n    \"0X0X0\\n0X0X0\\n\",\n    \"0XXX0\\n00000\\n\",\n    \"0\\n0\\n\",\n    \"0\\nX\\n\",\n    \"X\\n0\\n\",\n    \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\",\n    \"0000X0XX000X0XXXX0X0XXXX000X0X0XX000XXX0X00XX00XX00X0000XX0XX00X0X00X0X00X0XX000XX00XXXXXXXXXXXXXXX0\\nX00XX0XX00XXXX00XXXX00XX0000000000XXX0X00XX0XX00XXX00X00X0XX0000X00XXXXXXX00X00000XXX00XXX00XXX0X0XX\\n\",\n    \"X\\nX\\n\",\n    \"X0\\n00\\n\",\n    \"0X\\n00\\n\",\n    \"00\\nX0\\n\",\n    \"00\\n0X\\n\",\n    \"XX\\nXX\\n\",\n    \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"00000\\n00000\\n\",\n    \"00000000\\nXXXXXXXX\\n\",\n    \"X00X0XXXX0\\nX0XXX0XX00\\n\",\n    \"00000XX0000000000000\\n0X00000XX0000X00X000\\n\",\n    \"XXX00XXX0XXX0X0XXXXX\\nXXX00XXX0XXX0X0XXXXX\\n\",\n    \"000X00000X00000X00000000000000\\n000X00000X00000X00000000000000\\n\",\n    \"00X0X00000X0X0X00X0X0XXX0000X0\\n0000000X00X000X000000000X00000\\n\",\n    \"000000000000000000000000000000000000000000\\n00X000X00X00X0000X0XX000000000X000X0000000\\n\",\n    \"X0XXX00XX00X0XXXXXXXX0X0X0XX0X0X0XXXXX00X0XXXX00XX000XX0X000XX000XX\\n0000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"0000000000000000000000000000X00000000000000XX0X00000X0000000000000000000000000000000000000\\n0000000000000000000000000X0000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"0000000000000000000000000000000000000X000000000000000000000X0X00000000000000000000000000000\\n000000000000000000000000000X0X0000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\nX0X00000000000000000000000000X000000000X0000X00X000000XX000000X0X00000000X000X000000X0000X00\\n\",\n    \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0XXXXXXXXXXXXXXXX0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\",\n    \"XXXXXXXXXXXXXXXXXXXXXXX0XXX000XXXX0XXXXXXXXXXXXXXXXXXXXXXXXX0XXXXXXXXXXXX0X0XXXXXXXXXXXXXXXXXX\\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"00000XX0000000000000000000000000000000000000000000X0000000X0000000000000X0000000000000000X00000\\n00000XX0000000000000000000000000000000000000000000X0000000X0000000000000X0000000000000000X00000\\n\",\n    \"000000000000000X0000000000000000000000000XX0000000000000000X00000000000000000000000X000000000000\\n000000000000000X0000000000000000000000000XX0000000000000000X00000000000000000000000X000000000000\\n\",\n    \"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n0000000000000000000X000X0000000000X00000000X00000000000000000000000000000000000000000000000000000000\\n\",\n    \"000000000000000000X00X000000000000000000000000000000000000000X00000000X0000000X0000000000000000000X0\\n000000000000000000X00X000000000000000000000000000000000000000X00000000X0000000X0000000000000000000X0\\n\",\n    \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0XX0XXXXXXXXXXXXXXXX0XXXXXXXXXXXXXXXXXXXXXXX0XXXXXXXXXXXX\\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0XX0XXXXXXXXXXXXXXXX0XXXXXXXXXXXXXXXXXXXXXXX0XXXXXXXXXXXX\\n\",\n    \"XXXXXXXXXXX0X00XXXXXXXXXXXXXXXXXXXX0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0XXXXXXXXXXX00XXXXXXXXX0X0XXX0XX\\nXXXXXXXXXXX0X00XXXXXXXXXXXXXXXXXXXX0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0XXXXXXXXXXX00XXXXXXXXX0X0XXX0XX\\n\",\n    \"0X0X0\\nX0X0X\\n\",\n    \"X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0\\n0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X\\n\",\n    \"X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0\\n0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X\\n\",\n    \"X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X\\n0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0\\n\",\n    \"0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X\\nX0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0X0\\n\",\n    \"00000000000000X0000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX00XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\",\n    \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX00\\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0\\n\",\n    \"00XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\nX0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\",\n    \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX0XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX00XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\\n\",\n    \"0000000000000000000000000000000000000000000000000000000000X0000000000000000000000000000000000000X000\\n0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000XX\\n000000000000000000000000000000000X00000000000000000X000000000000000000000000000000000000000000000000\\n\",\n    \"0000X00X000000X0000X00X00X0000000000X0000000X000X00000X0X000XXX00000000XX0XX000000000000X00000000000\\n000000000XX000000X00000X00X00X00000000000000000X0X000XX0000000000000X0X00X0000X0000X000000X0000000XX\\n\",\n    \"0000000000000000000000000000000000X0000000000000000000000000000000000000000000000000000000000000000\\n000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"00000000000000000000000000X000000000000000000000000000000000000000000X00000X0000X000000000000000000\\n000X0000000000X000000000000000000000X0000000000X0X0000000000000000000X00000000000000000000000000000\\n\",\n    \"000X00XX0XX0X00X0XX0XXXX00XXX0X00000000XXX0XXXXXXX0X00X00XX00X0XXX00000XXXX0XX00X00XXX00X0X0XXXX000\\nXXXXX000X0XXX000XXXXX0XX0000XX0XXX0XXX000XXX00XXXXX00X00XX0000X0XX0XX0XX000X0XX00X00XX00XX00X00XX0X\\n\",\n    \"X0X0XXXX0XXXXXXXXXX00XXXXXXXXXXXXXXXXXX0XXXXX0XX0X00X0XXXXXXX0X0XXXXXXXXX0X0X0XX0XX0000XXXX00XXX0XX\\nXX0XXXXXXX0X0X00XXXX0X000X0XXXXXX0XXX0X0XXXX0XXXXXXXXXXXXXX00XX00XXX0XXXXXXXXXX00XXXX0XXXX0XXXXXXXX\\n\",\n    \"000\\n000\\n\",\n    \"000000000000000000000\\n000000000000000000000\\n\",\n    \"00000000000000000000000000000000000000\\n00000000000000000000000000000000000000\\n\",\n    \"0000\\n00X0\\n\",\n    \"000\\n00X\\n\",\n    \"X000\\nX000\\n\",\n    \"X0000X000XX00000000000000000000XX000X0000X00X0X00XX000000000000X0000X0X0XX00\\n00X00XX00000000X0000000X000X000X0X0X00X000X0X0X0000X0000000X000XX000XX000X00\\n\",\n    \"0X00\\n0000\\n\",\n    \"0X0\\n000\\n\",\n    \"000000\\n000000\\n\",\n    \"X00X0\\n00000\\n\",\n    \"000\\n0X0\\n\",\n    \"X000\\n00X0\\n\",\n    \"X0000\\n00000\\n\",\n    \"X000X\\nX000X\\n\",\n    \"X0000X\\n00000X\\n\",\n    \"000000000000\\n000000000000\\n\",\n    \"00000\\n0000X\\n\"\n  ],\n  \"outputs\": [\n    \"1\",\n    \"4\",\n    \"0\",\n    \"2\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"18\",\n    \"0\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"0\",\n    \"66\",\n    \"3\",\n    \"0\",\n    \"2\",\n    \"10\",\n    \"1\",\n    \"17\",\n    \"12\",\n    \"23\",\n    \"24\",\n    \"57\",\n    \"58\",\n    \"55\",\n    \"2\",\n    \"7\",\n    \"56\",\n    \"59\",\n    \"64\",\n    \"65\",\n    \"60\",\n    \"0\",\n    \"2\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"66\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"0\",\n    \"66\",\n    \"65\",\n    \"49\",\n    \"65\",\n    \"62\",\n    \"16\",\n    \"4\",\n    \"2\",\n    \"14\",\n    \"25\",\n    \"2\",\n    \"1\",\n    \"2\",\n    \"33\",\n    \"2\",\n    \"1\",\n    \"4\",\n    \"2\",\n    \"1\",\n    \"2\",\n    \"3\",\n    \"2\",\n    \"3\",\n    \"8\",\n    \"3\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/991/D",
  "starter_code": ""
}