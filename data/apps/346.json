{
  "task_id": "APPS/346",
  "problem_id": 346,
  "prompt": "'Jeopardy!' is an intellectual game where players answer questions and earn points. Company Q conducts a simplified 'Jeopardy!' tournament among the best IT companies. By a lucky coincidence, the old rivals made it to the finals: company R1 and company R2. \n\nThe finals will have n questions, m of them are auction questions and n - m of them are regular questions. Each question has a price. The price of the i-th question is a_{i} points. During the game the players chose the questions. At that, if the question is an auction, then the player who chose it can change the price if the number of his current points is strictly larger than the price of the question. The new price of the question cannot be less than the original price and cannot be greater than the current number of points of the player who chose the question. The correct answer brings the player the points equal to the price of the question. The wrong answer to the question reduces the number of the player's points by the value of the question price.\n\nThe game will go as follows. First, the R2 company selects a question, then the questions are chosen by the one who answered the previous question correctly. If no one answered the question, then the person who chose last chooses again.\n\nAll R2 employees support their team. They want to calculate what maximum possible number of points the R2 team can get if luck is on their side during the whole game (they will always be the first to correctly answer questions). Perhaps you are not going to be surprised, but this problem was again entrusted for you to solve.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers n and m (1 \u2264 n, m \u2264 100;\u00a0m \u2264 min(n, 30)) \u2014 the total number of questions and the number of auction questions, correspondingly. The second line contains n space-separated integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^7) \u2014 the prices of the questions. The third line contains m distinct integers b_{i} (1 \u2264 b_{i} \u2264 n) \u2014 the numbers of auction questions. Assume that the questions are numbered from 1 to n.\n\n\n-----Output-----\n\nIn the single line, print the answer to the problem \u2014 the maximum points the R2 company can get if it plays optimally well. It is guaranteed that the answer fits into the integer 64-bit signed type.\n\n\n-----Examples-----\nInput\n4 1\n1 3 7 5\n3\n\nOutput\n18\n\nInput\n3 2\n10 3 8\n2 3\n\nOutput\n40\n\nInput\n2 2\n100 200\n1 2\n\nOutput\n400",
  "solutions": "[\"n, m =  list(map(int, input().split()))\\nprices =  list(map(int, input().split()))\\nauci = list(map(int, input().split()))\\n\\nscores = 0\\n\\n# m auc\\n# n - m default\\n\\nfor i in range(len(prices)):\\n    if (i+1) not in auci:\\n        scores += prices[i]\\n        prices[i] = 0\\n\\nra = []\\nfor i in prices:\\n    if i != 0:\\n        ra.append(i)\\nra.sort()\\nra = ra[::-1]\\n\\nfor i in ra:\\n    if i > scores:\\n        scores += i\\n    else:\\n        scores *= 2\\n\\nprint(scores)\\n#print(ra)\\n\", \"n, m = map(int, input().split())\\nprices = list(map(int, input().split()))\\nnormal = []\\nauct = []\\nq = list(map(int, input().split()))\\nsum = 0\\nfor i in range(n):\\n    if i + 1 in q:\\n        auct.append(prices[i])\\n    else:\\n        sum += prices[i]\\nauct = sorted(auct, reverse=True)\\nfor elem in auct:\\n    sum += max(elem, sum)\\nprint(sum)\", \"n, m = map(int, input().split())\\na = list(map(int, input().split()))\\nnums = set(list(map(int, input().split())))\\nstan = []\\nauct = []\\nfor i in range(len(a)):\\n    if i + 1 not in nums:\\n        stan.append(a[i])\\n    else:\\n        auct.append(a[i])\\nsm = sum(stan)\\nauct = list(reversed(sorted(auct)))\\nfor i in range(len(auct)):\\n    if sm >= auct[i]:\\n        if sm > auct[i]:\\n            sm *= 2\\n        else:\\n            sm += auct[i]\\n    else:\\n        sm += auct[i]\\nprint(sm)\", \"[n, m], q, a = list(map(int, input().split())), list(map(int, input().split())), list(map(int, input().split()))\\nans = sum(q[x - 1] for x in set(range(1, n + 1)) - set(a))\\nfor x in sorted(a, key = lambda x: q[x - 1], reverse = True):\\n    if q[x - 1] <= ans:\\n        ans <<= 1\\n    else:\\n        ans += q[x - 1]\\nprint(ans)\\n\", \"n, m = list(map(int, input().split()))\\nlst = list(map(int, input().split()))\\nau = list(map(int, input().split()))\\nres = sum(lst)\\nls = []\\nfor i in range(m): \\n    res -= lst[au[i] - 1]\\n    ls.append(lst[au[i] - 1])\\nls.sort(reverse = True)\\nfor i in range(len(ls)):\\n    res += max(ls[i], res)\\nprint(res)\\n\", \"n, m = tuple(map(int, str.split(input())))\\na = tuple(map(int, str.split(input())))\\nmi = tuple(map(int, str.split(input())))\\nms = sorted([a[i - 1] for i in mi], reverse=True)\\n\\npoints = 0\\nfor i, ai in enumerate(a):\\n\\n    if i + 1 not in mi:\\n\\n        points += ai\\n\\nfor m in ms:\\n\\n    if m > points:\\n\\n        points += m\\n\\n    else:\\n\\n        points += points\\n\\nprint(points)\\n\", \"n,m = map(int,input().split())\\nmat = list(map(int,input().split()))\\nauction = list(map(int,input().split()))\\naucpoint = [mat[i-1] for i in auction]\\naucpoint.sort(reverse = True)\\nfor i in auction:\\n    mat[i-1] = 0\\ns = sum(mat)\\nfor point in aucpoint:\\n    if s > point:\\n        s *= 2\\n    else: s += point\\nprint(s)\", \"n, m = map(int, input().split())\\na = list(map(int, input().split()))\\nb = [a[i - 1] for i in map(int, input().split())]\\nb.sort(reverse = True)\\ns = sum(a) - sum(b)\\nfor i in b: s += s if i < s else i\\nprint(s)\", \"n, m = map(int, input().split())\\nques = list(map(int,input().split()))\\nacutions = set(map(int, input().split()))\\n\\nacu = []\\npoints = 0\\n\\nfor i in range(n):\\n\\tif i + 1 in acutions:\\n\\t\\tacu.append(ques[i])\\n\\telse:\\n\\t\\tpoints += ques[i]\\n\\nacu.sort(reverse= True)\\n\\nfor a in acu:\\n\\tif points > a:\\n\\t\\tpoints += points\\n\\telse:\\n\\t\\tpoints += a\\n\\nprint(points)\", \"n, m = map(int, input().split())\\na = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\nfor i in range(len(b)):\\n    b[i] -= 1\\nb = set(b)\\nc = []\\nd = []\\nfor i in range(len(a)):\\n    if i in b:\\n        c.append(a[i])\\n    else:\\n        d.append(a[i])\\nsum = 0\\nfor i in range(len(d)):\\n    sum += d[i]\\nc = sorted(c)\\nif sum < c[-1]:\\n    sum += c[-1]\\n    sum *= (2**(len(c)-1))\\nelse:\\n    sum *= (2**len(c))\\nprint(sum)\", \"n, m = map(int, input().split())\\na = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\nc = []\\nans = 0\\nfor i in range(m):\\n    ans -= a[b[i] - 1]\\n    c.append(a[b[i] - 1])\\nans += sum(a)\\nc.sort()\\nc = c[::-1]\\nmx = ans\\nfor i in range(m + 1):\\n    x = (sum(c[:i])+ans)*(2**(m-i))\\n    if x > mx:\\n        mx = x\\n\\nprint(mx)\", \"from operator import itemgetter\\nR = lambda:map(int, input().split())\\nn, m = R()\\na = list(R())\\nb = [0] * n\\nfor i in R():\\n  b[i - 1] = 1\\na = sorted(enumerate(a), key=itemgetter(1), reverse=True)\\ns = sum(x for i, x in a if b[i] != 1)\\nfor i, x in a:\\n  if b[i] == 1:\\n    s += s if s > x else x\\nprint(s)\", \"n, m = map(int, input().split())\\na = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\nc = []\\nans = 0\\nfor i in range(m):\\n    ans -= a[b[i] - 1]\\n    c.append(a[b[i] - 1])\\nans += sum(a)\\nc.sort()\\nc = c[::-1]\\nmx = ans\\nfor i in range(m + 1):\\n    x = (sum(c[:i]) + ans) * (2 ** (m - i))\\n    if x > mx:\\n        mx = x\\nprint(mx)\", \"n, m = map(int, input().split())\\na = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\nc = []\\nans = 0\\n\\nfor i in range(m):\\n    ans -= a[b[i] - 1]\\n    c.append(a[b[i] - 1])\\nans += sum(a)\\nc.sort()\\nc = c[::-1]\\nmx = ans\\nfor i in range(m + 1):\\n    x = (sum(c[:i]) + ans) * (2 ** (m - i))\\n    if x > mx:\\n        mx = x\\nprint(mx)\", \"import sys\\nfrom itertools import *\\nfrom math import *\\nMAX = 10000000\\ndef solve():\\n    n, m = list(map(int, input().split()))\\n    quest = list(map(int, input().split()))\\n    auctindex = set(map(int, input().split()))\\n    aucts = list()\\n    firstsum = 0\\n    for i, q in enumerate(quest):\\n        if (i + 1) not in auctindex:\\n            firstsum+= q\\n        else:\\n            aucts.append(q)\\n    aucts.sort(reverse = True)\\n    for val in aucts:\\n        firstsum += max(firstsum, val)\\n    print(firstsum)\\n\\nif sys.hexversion == 50594544 : sys.stdin = open(\\\"test.txt\\\")\\nsolve()\\n\", \"# -*- coding: utf-8 -*-\\n\\\"\\\"\\\"\\nyl3 jeopardy\\n\\\"\\\"\\\"\\na=lambda :list(map(int,input().split()))\\nn,m=a()\\nsa=a()\\nsb=a()\\nau=[]\\n\\nfor i in reversed(sorted(sb)):\\n    au.append(sa.pop(i-1))\\nsu=sum(sa)\\nau.sort(reverse=True)\\nfor i in range(m):\\n    t=au.pop(0)\\n    if t>su:\\n        su+=t\\n    else:su*=2\\nprint(su)\", \"import sys\\n\\n\\ndef main():\\n    n, m = list(map(int, input().split()))\\n    a = list(map(int, input().split()))\\n    auction_questions = set(map(int, input().split()))\\n\\n    regular_a = [a[i] for i in range(len(a)) if (i + 1) not in auction_questions]\\n    auction_a = [a[i] for i in range(len(a)) if (i + 1) in auction_questions]\\n\\n    total_points = sum(regular_a)\\n    auction_a.sort(reverse=True)\\n    for a in auction_a:\\n        if a < total_points:\\n            total_points += total_points\\n        else:\\n            total_points += a\\n    print(total_points)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"from operator import itemgetter\\n\\nR = lambda:list(map(int, input().split()))\\n\\nn, m = R()\\n\\na = list(R())\\n\\nb = [0] * n\\n\\nfor i in R():\\n\\n  b[i - 1] = 1\\n\\na = sorted(enumerate(a), key=itemgetter(1), reverse=True)\\n\\ns = sum(x for i, x in a if b[i] != 1)\\n\\nfor i, x in a:\\n\\n  if b[i] == 1:\\n\\n    s += s if s > x else x\\n\\nprint(s)\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"n, m = list(map(int, input().split(' ')))\\ntmp = list(map(int, input().split(' ')))\\nm_nums = list([int(x)-1 for x in input().split(' ')])\\nm_list = [tmp[el] for el in m_nums]\\n_sum = sum(tmp)-sum(m_list)\\nm_list.sort()\\nwhile (m_list) and (m_list[len(m_list)-1] > _sum): _sum += m_list.pop()\\nprint(_sum * 2**(len(m_list)))\\n\", \"n , m = map(int,input().split())\\nque =list(map(int,input().split())) \\nauc = list(map(int,input().split()))\\ns = sum(que)\\naa=[]\\nfor i in auc:\\n    s-=que[i-1]\\n    aa.append(que[i-1])\\naa.sort()\\nfor i in aa[::-1]:\\n    if i<s:\\n        s*=2\\n    else:\\n        s+=i\\nprint(s)\", \"R = lambda :map(int, input().split())\\nn, m = R()\\na = list(R())\\nb = list(R())\\nli = []\\ncost = 0\\nfor i in range(1, n + 1):\\n    if i not in b:\\n        cost += a[i - 1]\\n    else:\\n        li.append(a[i - 1])\\nli.sort(reverse=True)\\nfor i in range(m):\\n    cost += max(cost, li[i])\\nprint(cost)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4 1\\n1 3 7 5\\n3\\n\",\n    \"3 2\\n10 3 8\\n2 3\\n\",\n    \"2 2\\n100 200\\n1 2\\n\",\n    \"1 1\\n1\\n1\\n\",\n    \"2 2\\n1 5\\n1 2\\n\",\n    \"5 3\\n5 8 7 1 9\\n2 5 3\\n\",\n    \"5 5\\n9 1 6 2 1\\n3 1 4 5 2\\n\",\n    \"25 5\\n66 41 91 33 86 67 38 79 49 7 77 54 29 19 22 48 63 37 11 100 8 6 47 27 26\\n12 14 1 23 18\\n\",\n    \"50 10\\n19098 20847 65754 94580 54808 57092 23130 15638 43645 52323 52822 65193 90139 69196 83680 70109 96772 35102 56685 6692 30738 74558 57144 24054 44447 51959 22847 18735 23534 821 5540 39948 7552 72425 23213 2770 98496 81096 84868 167 36408 26572 19351 82775 23225 35377 63193 58352 45111 60889\\n8 20 32 17 11 44 39 30 36 16\\n\",\n    \"2 1\\n19 4\\n1\\n\",\n    \"3 1\\n65 81 6\\n2\\n\",\n    \"5 1\\n72 32 17 46 82\\n2\\n\",\n    \"100 1\\n9 9 72 55 14 8 55 58 35 67 3 18 73 92 41 49 15 60 18 66 9 26 97 47 43 88 71 97 19 34 48 96 79 53 8 24 69 49 12 23 77 12 21 88 66 9 29 13 61 69 54 77 41 13 4 68 37 74 7 6 29 76 55 72 89 4 78 27 29 82 18 83 12 4 32 69 89 85 66 13 92 54 38 5 26 56 17 55 29 4 17 39 29 94 3 67 85 98 21 14\\n13\\n\",\n    \"25 24\\n1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 1\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\\n\",\n    \"30 30\\n6074511 9621540 9853685 9073323 6897794 9366449 1648254 3848902 8729661 9330982 9970280 1886362 5605123 3406494 501290 3140164 2406173 346072 1520895 441795 5271130 7576116 337766 6666108 953354 5085881 2876195 8036150 1251715 4952594\\n30 5 10 28 21 18 6 13 29 23 17 24 14 25 3 27 20 26 12 2 4 11 16 15 22 7 8 19 1 9\\n\",\n    \"50 30\\n6015200 8643865 4116771 6555197 304415 8580071 8414182 3089212 5684567 7595481 1272699 7127763 3309618 1410297 4349070 2027355 136702 6863504 1800751 5585842 5924142 5188269 4805201 9313209 8941399 5137060 4983630 8467668 1646260 7804684 8646497 7067118 6896291 9109696 6197162 1366002 1703718 3852639 8427694 552915 5001315 5238093 9152085 7288325 8115109 3800240 5658858 4392321 8244056 3275379\\n30 25 34 8 31 50 48 19 49 26 9 24 22 6 44 14 27 43 3 28 35 10 21 17 45 12 40 47 1 33\\n\",\n    \"1 1\\n1846236\\n1\\n\",\n    \"2 1\\n8912260 7309391\\n1\\n\",\n    \"3 1\\n9949628 37460 9989934\\n3\\n\",\n    \"5 3\\n1819638 2087365 162773 9531053 130978\\n3 1 4\\n\",\n    \"10 4\\n886062 1016649 67899 9999839 98342 64636 816991 263 1050987 1858\\n1 9 7 4\\n\",\n    \"10 10\\n1 652210 1 1 1 1 1 1 1 1\\n10 1 6 7 9 8 4 3 5 2\\n\",\n    \"50 5\\n223036 65304 301127 8945 10289 15638 260 246 68 14 23 6 3 2 8 2 1 392212 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 242747 1 1 1 243737 1 1 1 1 1 1 10000000 572890\\n18 50 38 42 49\\n\",\n    \"50 10\\n1103 17631 1582 250 6933 26 14434 6 2 1 1 1 1 1 3625 1 5909 1 1 1 1 1 1 1 1 1 1 1 1 7196 14842 1 1 1 1 1 1 12053 9999991 1 10502 1 1 1 1 1 1 1 1 1\\n41 15 17 1 5 31 7 38 30 39\\n\",\n    \"50 15\\n369 139 49 15 4 5 1 1 1 365 1 1 1 1 484 165 105 1 1 1 382 105 1 1 1 72 1 1 91 96 1 1 1 1 1 133 9997031 1 1 31 1 1 1 291 558 1 1 1 464 1\\n49 26 40 21 45 30 16 10 15 44 22 29 36 17 37\\n\",\n    \"50 18\\n20 23 54 4 1 1 15 50 56 1 1 71 1 1 1 1 1 15 8 1 12 1 1 1 1 1 76 1 19 11 55 42 1 1 1 1 1 9 1 30 5 1 1 1 20 1 1 1 1 9975634\\n9 18 7 45 27 32 12 41 31 8 3 30 21 19 40 38 29 50\\n\",\n    \"100 1\\n954110 7577191 694644 113513 467690 71415 25351 26000 37902 29150 2015 94 741 20 71 9 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 10000000 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n78\\n\",\n    \"100 5\\n502646 93620 4203 12132 2444 9620 6 201 4 20 10000000 1 6 9 472804 2 2 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 276285 518136 1 1 1 1 1 1 1 1 1 1 1 1 1 1 189005 1 1 1 1 1 1 1 1 1 1 1 1\\n73 72 15 88 11\\n\",\n    \"100 10\\n9999984 1396 8798 4760 3138 310 840 41 37 79 45 1 7 2 1 1 1 1 11032 1 1 1 11226 1 1 1 1 1 1 1 12147 1 1 1 1 1 1 16512 1 1 1 1 1 1 1 1 1 1 1 2658 1 1 1 1 7562 1 1 1 1 6207 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3334 1 1 1 1 1 1 1310 1 1 1 1 1 1 1 1 1\\n19 55 91 50 31 23 60 84 38 1\\n\",\n    \"100 15\\n380 122 2 18 5 2 3 242 1 1 1 1 1 64 1 1 1 1 1 198 323 284 1 419 1 225 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 584 1 1 1 55 9999036 1 1 1 1 1 1 1 1 447 1 1 471 1 1 1 1 1 1 1 374 1 1 1 1 1 1 1 1 1 1 1 273 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 68 1\\n22 45 49 24 26 62 70 82 21 20 59 14 99 8 50\\n\",\n    \"100 16\\n15 18 54 132 138 1 1 45 164 1 1 1 1 1 1 1 1 1 1 1 1 9999567 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 188 1 1 1 213 1 1 27 1 1 1 1 1 1 1 1 1 1 1 200 1 140 221 1 1 1 1 1 1 1 1 132 1 78 1 1 1 1 1 243 1 1 1 1 1 1 1 1 1 1 240 1 1 290 1 34 1 1 1 1 1 1\\n92 46 8 58 94 39 9 89 61 60 4 70 78 72 43 22\\n\",\n    \"3 1\\n1 2 4\\n1\\n\",\n    \"3 1\\n1 2 4\\n2\\n\",\n    \"3 1\\n1 2 4\\n3\\n\",\n    \"2 1\\n1 2\\n1\\n\",\n    \"2 1\\n1 2\\n2\\n\",\n    \"3 2\\n1 2 4\\n1 2\\n\",\n    \"3 2\\n1 2 4\\n3 2\\n\",\n    \"3 2\\n1 2 4\\n3 1\\n\",\n    \"3 3\\n4 2 1\\n1 3 2\\n\",\n    \"5 4\\n1 2 2 4 8\\n1 2 4 5\\n\",\n    \"3 2\\n10 7 1000\\n2 3\\n\",\n    \"4 2\\n2 2 4 8\\n3 4\\n\",\n    \"3 2\\n1 3 5\\n1 3\\n\",\n    \"3 2\\n10 1 12\\n2 3\\n\",\n    \"4 2\\n1 2 3 100\\n2 4\\n\",\n    \"3 2\\n10 5 200\\n2 3\\n\",\n    \"3 2\\n3 5 3\\n2 3\\n\",\n    \"3 2\\n5 4 100\\n2 3\\n\",\n    \"5 4\\n100 200 300 400 500\\n1 2 3 5\\n\",\n    \"3 2\\n100 200 180\\n1 2\\n\",\n    \"4 3\\n2 5 17 4\\n1 2 3\\n\",\n    \"5 2\\n2 2 4 7 15\\n4 5\\n\",\n    \"3 2\\n200 100 1000\\n2 3\\n\",\n    \"4 2\\n2 2 2 7\\n1 4\\n\",\n    \"8 4\\n2 2 2 2 1 2 3 9\\n5 6 7 8\\n\",\n    \"3 2\\n2 1 5\\n2 3\\n\"\n  ],\n  \"outputs\": [\n    \"18\\n\",\n    \"40\\n\",\n    \"400\\n\",\n    \"1\\n\",\n    \"10\\n\",\n    \"60\\n\",\n    \"144\\n\",\n    \"29056\\n\",\n    \"1880325120\\n\",\n    \"23\\n\",\n    \"152\\n\",\n    \"434\\n\",\n    \"8834\\n\",\n    \"70368752566272\\n\",\n    \"5352753316495360\\n\",\n    \"96888048737845248\\n\",\n    \"1846236\\n\",\n    \"16221651\\n\",\n    \"19977022\\n\",\n    \"46997584\\n\",\n    \"89995888\\n\",\n    \"333931520\\n\",\n    \"170000000\\n\",\n    \"5129995264\\n\",\n    \"163801350144\\n\",\n    \"1307536261120\\n\",\n    \"20000000\\n\",\n    \"170000000\\n\",\n    \"5129991680\\n\",\n    \"163834200064\\n\",\n    \"327675805696\\n\",\n    \"12\\n\",\n    \"10\\n\",\n    \"7\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"16\\n\",\n    \"10\\n\",\n    \"12\\n\",\n    \"16\\n\",\n    \"80\\n\",\n    \"2020\\n\",\n    \"24\\n\",\n    \"16\\n\",\n    \"44\\n\",\n    \"208\\n\",\n    \"420\\n\",\n    \"16\\n\",\n    \"210\\n\",\n    \"7200\\n\",\n    \"760\\n\",\n    \"84\\n\",\n    \"46\\n\",\n    \"2400\\n\",\n    \"22\\n\",\n    \"136\\n\",\n    \"14\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/413/C",
  "starter_code": ""
}