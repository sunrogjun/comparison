{
  "task_id": "APPS/206",
  "problem_id": 206,
  "prompt": "A frog is initially at position $0$ on the number line. The frog has two positive integers $a$ and $b$. From a position $k$, it can either jump to position $k+a$ or $k-b$.\n\nLet $f(x)$ be the number of distinct integers the frog can reach if it never jumps on an integer outside the interval $[0, x]$. The frog doesn't need to visit all these integers in one trip, that is, an integer is counted if the frog can somehow reach it if it starts from $0$.\n\nGiven an integer $m$, find $\\sum_{i=0}^{m} f(i)$. That is, find the sum of all $f(i)$ for $i$ from $0$ to $m$.\n\n\n-----Input-----\n\nThe first line contains three integers $m, a, b$ ($1 \\leq m \\leq 10^9, 1 \\leq a,b \\leq 10^5$).\n\n\n-----Output-----\n\nPrint a single integer, the desired sum.\n\n\n-----Examples-----\nInput\n7 5 3\n\nOutput\n19\n\nInput\n1000000000 1 2019\n\nOutput\n500000001500000001\n\nInput\n100 100000 1\n\nOutput\n101\n\nInput\n6 4 5\n\nOutput\n10\n\n\n\n-----Note-----\n\nIn the first example, we must find $f(0)+f(1)+\\ldots+f(7)$. We have $f(0) = 1, f(1) = 1, f(2) = 1, f(3) = 1, f(4) = 1, f(5) = 3, f(6) = 3, f(7) = 8$. The sum of these values is $19$.\n\nIn the second example, we have $f(i) = i+1$, so we want to find $\\sum_{i=0}^{10^9} i+1$.\n\nIn the third example, the frog can't make any jumps in any case.",
  "solutions": "[\"import math\\nm,a,b=map(int,input().split())\\ng=math.gcd(a,b)\\na1=a//g\\nb1=b//g\\nalls=g*(a1+b1-1)\\ndists=[0]+[-1]*(a1+b1-1)\\ndist=0\\nfar=0\\nwhile dist!=b1:\\n    if dist<b1:\\n        dist+=a1\\n        far=max(dist,far)\\n    else:\\n        dist-=b1\\n    if dists[dist]==-1:\\n        dists[dist]=far\\ntot=0\\nfor i in range(a1+b1):\\n    if i*g<=m and dists[i]*g<=m:\\n        tot+=(m+1-dists[i]*g)\\nif alls<m:\\n    mod=m%g\\n    times=m//g\\n    diff=times-a1-b1\\n    tot1=g*(diff*(diff+1)//2)+(mod+1)*(diff+1)\\n    tot+=tot1\\nprint(tot)\", \"from math import gcd\\n\\nm,a,b = list(map(int,input().split()))\\n\\ng = gcd(a,b)\\n\\nvis = [0]*(a+b+1)\\nvis[0] = 1\\n\\nnvis = 1\\n\\ncount = 0\\nlast = 0\\nt = 0\\nwhile True:\\n    #print(t, vis)\\n    if t >= b:\\n        #print('back')\\n        t -= b\\n        if vis[t]:\\n            break\\n        vis[t] = 1\\n        nvis += 1\\n    else:\\n        t += a\\n        if t > m:\\n            break\\n        if t > last:\\n            #print('forward', t - last, 'with', nvis)\\n            count += (t - last)*nvis\\n            last = t\\n        if vis[t]:\\n            break\\n        vis[t] = 1\\n        nvis += 1\\n    #print(nvis,count)\\n    #print('---')\\n\\nif t > m:\\n    # we're done\\n    count += (m - last + 1)*nvis\\nelse:\\n    def sumto(n):\\n        whole = n//g + 1\\n        r = whole*(whole+1)//2 * g\\n        corr = whole * (g-1 - (n%g))\\n        r -= corr\\n        return r\\n\\n    #S = 0\\n    #for i in range(last, m+1):\\n    #    S += i//g + 1\\n    #count += S\\n    #assert S == sumto(m) - sumto(last-1)\\n\\n    count += sumto(m) - sumto(last-1)\\n\\n#print(vis)\\nprint(count)\\n\", \"from collections import deque\\ndef gcd(a, b):\\n    b = abs(b)\\n    while b != 0:\\n        r = a%b\\n        a,b = b,r\\n    return a\\n\\nM, A, B = list(map(int, input().split()))\\nX = [1]+[0]*(10**6)\\nY = [0]\\ns = 1\\nt = 1\\ng = gcd(A, B)\\nfor N in range(1, M+1):\\n    if N >= A+B+g and (M-N+1) % g == 0:\\n        ss = Y[N-1]-Y[N-g-1]\\n        dd = (Y[N-1]-Y[N-2]) - (Y[N-g-1]-Y[N-g-2])\\n        t += ss*(M-N+1)//g + dd*g*((M-N+1)//g)*((M-N+1)//g+1)//2\\n        break\\n    elif N >= A and X[N-A]:\\n        que = deque([N])\\n        X[N] = 1\\n        s += 1\\n        while len(que):\\n            i = deque.pop(que)\\n            if i >= B and X[i-B] == 0:\\n                deque.append(que, i-B)\\n                X[i-B] = 1\\n                s += 1\\n            if i + A < N and X[i+A] == 0:\\n                deque.append(que, i+A)\\n                X[i+A] = 1\\n                s += 1\\n    t += s\\n    Y.append(t)\\nprint(t)\\n\\n\", \"M, a, b = map(int, input().split())\\nmod = 10**9+7\\nD = [mod]*a\\nmaxi = 0\\nD[0] = 0\\nQ = [0]\\ndef f(x, i):\\n    t = (x+1-i)//a\\n    r = (x+1-i)%a\\n    return a*t*(t+1)//2+r*(t+1)\\n\\nwhile Q:\\n    q = Q.pop()\\n    D[q] = maxi\\n    k = max(0, -((-(b-q))//a))\\n    maxi = max(maxi, q+k*a)\\n    if D[(q-b)%a] == mod and maxi <= M:\\n        Q.append((q-b)%a)\\nans = 0\\nfor i, d in enumerate(D):\\n    if d > M:\\n        continue\\n    ans += f(M, i) - f(d-1, i)\\nprint(ans)\", \"import sys\\nimport math\\ninput = sys.stdin.readline\\n\\ndef gcd(a, b):\\n    while b:\\n        a, b = b, a % b\\n    return a\\n\\nm,a,b=list(map(int,input().split()))\\n\\nGCD=gcd(a,b)\\n\\n\\n#when a>b,\\n\\nMODLIST=[-1]*a\\n\\nNOWMAX=a\\nNOW=a\\nMODLIST[0]=a\\nwhile True:\\n    \\n    while NOW-b>0 and MODLIST[(NOW-b)%a]==-1:\\n        NOW-=b\\n        MODLIST[NOW]=NOWMAX\\n\\n    NOW+=a\\n    NOWMAX=max(NOW,NOWMAX)\\n\\n    if MODLIST[(NOW-b)%a]!=-1:\\n        break\\n\\nANS=m+1#0\\nMAX=max(MODLIST)\\nfor i in range(1,min(m+1,MAX)):\\n    if MODLIST[i%a]==-1:\\n        continue\\n    ANS+=max((m+1-max(MODLIST[i%a],i)),0)\\n\\n    #print(ANS)\\n\\n\\nif MAX<=m:\\n    ANS+=(m-MAX+1+(m-m//GCD*GCD)+1)*((m//GCD*GCD-MAX)//GCD+1)//2\\n\\nprint(ANS)\\n    \\n\\n\\n    \\n    \\n    \\n\", \"from math import gcd\\nm, a, b = list(map(int, input().split()))\\nlast, x = 0, gcd(a, b)\\ns = [1]*(a+b+1)\\nq1, ans = 0, 1\\nmax1, s[0] = [[0, 1]], 0\\nwhile q1 < a+b:\\n    if q1 > b and s[q1-b]:\\n        ans += 1\\n        q1 -= b\\n        s[q1] = 0\\n    else:\\n        q1 += a\\n        if q1 > last:\\n            max1.append([q1, ans])\\n            last = q1\\n        if s[q1]:\\n            ans += 1\\n            s[q1] = 0\\nans1 = q1 = 0\\nfor q in range(min(m+1, a+b)):\\n    if max1[q1+1][0] == q:\\n        q1 += 1\\n    ans1 += max1[q1+1][1]\\nif m >= a+b:\\n    ans1 += (m//x+1)*(m % x+1)\\n    m -= m % x+1\\n    p, t = (a+b)//x, (m-a-b)//x\\n    ans1 += (t+1)*(t+2)//2*x\\n    ans1 += p*(t+1)*x\\nprint(ans1)\\n\", \"import math\\nm,a,b=list(map(int,(input().split())))\\nvis=[-1]*(a+b+5)\\nnow=0\\nmaxd=0\\nwhile True:\\n    vis[now]=maxd\\n    #print(now,maxd)\\n    if now>=b:\\n        now-=b\\n    else:\\n        now+=a\\n    if now==0:\\n        break\\n    maxd=max(maxd,now)\\nans=0\\n#for i in range(0,a+b):\\n    #print(vis[i])\\nfor i in range(0,a+b):\\n    if vis[i]!=-1:\\n        ans+=max(0,m-vis[i]+1)\\nrest=m-(a+b)+1\\nif m>=a+b:\\n    g=math.gcd(a,b)\\n    tmp=(rest//g)*g\\n    fir=rest-tmp\\n    lst=rest\\n    cnt=tmp//g+1\\n    ans+=(fir+lst)*cnt//2\\nprint(int(ans))\\n\", \"import math\\nm,a,b=list(map(int,(input().split())))\\nvis=[-1]*(a+b+5)\\nnow=0\\nmaxd=0\\nwhile True:\\n    vis[now]=maxd\\n    #print(now,maxd)\\n    if now>=b:\\n        now-=b\\n    else:\\n        now+=a\\n    if now==0:\\n        break\\n    maxd=max(maxd,now)\\nans=0\\n#for i in range(0,a+b):\\n    #print(vis[i])\\nfor i in range(0,a+b):\\n    if vis[i]!=-1:\\n        ans+=max(0,m-vis[i]+1)\\nrest=m-(a+b)+1\\nif m>=a+b:\\n    g=math.gcd(a,b)\\n    tmp=(rest//g)*g\\n    fir=rest-tmp\\n    lst=rest\\n    cnt=tmp//g+1\\n    ans+=(fir+lst)*cnt//2\\nprint(int(ans))\\n\", \"import math\\nM, A, B = list(map(int, input().split()))\\nbound = [10**9 + 7]*(A + B)\\nl, r = 0, 0\\nwhile True:\\n    bound[l] = r\\n    if l >= B:\\n        l -= B\\n    else:\\n        l += A\\n    r = max(r, l)\\n    if l == 0:\\n        break\\n\\nans = 0\\nfor i in range(0, A + B):\\n    if bound[i] <= M:\\n        ans += M - bound[i] + 1\\n\\nrem = M - (A + B) + 1\\nif M >= (A + B):\\n    g = math.gcd(A, B)\\n    up = (rem // g) * g\\n    lo = rem - up\\n    cnt = up // g + 1\\n    ans += (lo + rem) * cnt // 2\\nprint(ans)\\n\", \"import math\\nM, A, B = map(int, input().split())\\nbound = [10**9 + 7]*(A + B)\\nl, r = 0, 0\\nwhile True:\\n    bound[l] = r\\n    if l >= B:\\n        l -= B\\n    else:\\n        l += A\\n    r = max(r, l)\\n    if l == 0:\\n        break\\n\\nans = 0\\nfor i in range(0, A + B):\\n    if bound[i] <= M:\\n        ans += M - bound[i] + 1\\n\\nrem = M - (A + B) + 1\\nif M >= (A + B):\\n    g = math.gcd(A, B)\\n    up = (rem // g) * g\\n    lo = rem - up\\n    cnt = up // g + 1\\n    ans += (lo + rem) * cnt // 2\\nprint(ans)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"7 5 3\\n\",\n    \"1000000000 1 2019\\n\",\n    \"100 100000 1\\n\",\n    \"6 4 5\\n\",\n    \"172165 93846 84\\n\",\n    \"9978 99 98615\\n\",\n    \"9909 95875 20\\n\",\n    \"42651129 26190 16875\\n\",\n    \"5 8253 91700\\n\",\n    \"14712 8142 9912\\n\",\n    \"98898 1040 98615\\n\",\n    \"79674 62280 77850\\n\",\n    \"78139 77688 1161\\n\",\n    \"110518 69352 81284\\n\",\n    \"881706694 5710 56529\\n\",\n    \"863 99250 420\\n\",\n    \"9112063 50688 2640\\n\",\n    \"236009692 89900 300\\n\",\n    \"16145755 64220 70642\\n\",\n    \"997932 23910 14346\\n\",\n    \"9907037 55440 88480\\n\",\n    \"9695 9 85014\\n\",\n    \"99548 73888 32\\n\",\n    \"9742365 6750 90375\\n\",\n    \"95544 17793 8856\\n\",\n    \"2756 31707 63414\\n\",\n    \"936989 17028 92708\\n\",\n    \"9650984 18601 2090\\n\",\n    \"26 92701 7\\n\",\n    \"9980 78765 356\\n\",\n    \"10348323 355 83425\\n\",\n    \"952549276 31416 33000\\n\",\n    \"992869 410 9880\\n\",\n    \"96033 98622 100\\n\",\n    \"3 998 99486\\n\",\n    \"10652698 87345 1116\\n\",\n    \"303857 1990 4\\n\",\n    \"395013 59544 180\\n\",\n    \"1183 532 73416\\n\",\n    \"25 75060 2502\\n\",\n    \"4987696 29388 29865\\n\",\n    \"2531607 75419 14230\\n\",\n    \"4015 56658 19\\n\",\n    \"49277 166 8051\\n\",\n    \"9984950 40800 1152\\n\",\n    \"1710 11868 202\\n\",\n    \"96974 1 99004\\n\",\n    \"995676200 30 99370\\n\",\n    \"983 97020 105\\n\",\n    \"9331043 5355 81159\\n\",\n    \"99005952 94024 10220\\n\",\n    \"16965 51653 70\\n\",\n    \"997674659 8874 35496\\n\",\n    \"1647861 97967 10\\n\",\n    \"7526 35 7525\\n\",\n    \"68565 68564 1\\n\",\n    \"58200 198 58050\\n\",\n    \"14332 13672 1976\\n\",\n    \"7957 18 7956\\n\",\n    \"70343 66336 6910\\n\",\n    \"101407 95200 6448\\n\",\n    \"57986 4760 56440\\n\",\n    \"87728 689 87236\\n\",\n    \"79903 75251 7234\\n\",\n    \"107132 20930 92956\\n\",\n    \"97009 97008 129\\n\",\n    \"96538 95880 900\\n\",\n    \"7845 4410 7350\\n\",\n    \"79873 13 79872\\n\",\n    \"99573 99474 186\\n\",\n    \"112104 86760 69327\\n\",\n    \"76065 44280 39150\\n\",\n    \"58423 58422 9737\\n\",\n    \"22432 19298 5536\\n\"\n  ],\n  \"outputs\": [\n    \"19\\n\",\n    \"500000001500000001\\n\",\n    \"101\\n\",\n    \"10\\n\",\n    \"1735345812\\n\",\n    \"507929\\n\",\n    \"9910\\n\",\n    \"6737492081840\\n\",\n    \"6\\n\",\n    \"21284\\n\",\n    \"4761309\\n\",\n    \"97070\\n\",\n    \"108424\\n\",\n    \"151686\\n\",\n    \"680741853146475\\n\",\n    \"864\\n\",\n    \"78628667728\\n\",\n    \"278502953469621\\n\",\n    \"20303198570\\n\",\n    \"104545151\\n\",\n    \"87620910296\\n\",\n    \"5227761\\n\",\n    \"69626827\\n\",\n    \"126544822305\\n\",\n    \"157445948\\n\",\n    \"2757\\n\",\n    \"229896864\\n\",\n    \"222830431513\\n\",\n    \"27\\n\",\n    \"9981\\n\",\n    \"150833075049\\n\",\n    \"1718466614644254\\n\",\n    \"49284898280\\n\",\n    \"96034\\n\",\n    \"4\\n\",\n    \"6304015267729\\n\",\n    \"23081582946\\n\",\n    \"2117961170\\n\",\n    \"1956\\n\",\n    \"26\\n\",\n    \"4145604588400\\n\",\n    \"2250674901\\n\",\n    \"4016\\n\",\n    \"14453806\\n\",\n    \"519262873734\\n\",\n    \"1711\\n\",\n    \"4702123800\\n\",\n    \"49568555030448651\\n\",\n    \"984\\n\",\n    \"14510155272753\\n\",\n    \"2397840434982\\n\",\n    \"16966\\n\",\n    \"56083140668646\\n\",\n    \"1352925986505\\n\",\n    \"813132\\n\",\n    \"205695\\n\",\n    \"8583036\\n\",\n    \"18960\\n\",\n    \"1763140\\n\",\n    \"110424\\n\",\n    \"377984\\n\",\n    \"395386\\n\",\n    \"5657822\\n\",\n    \"150249\\n\",\n    \"353953\\n\",\n    \"98514\\n\",\n    \"243807\\n\",\n    \"11282\\n\",\n    \"245419010\\n\",\n    \"153074\\n\",\n    \"178619\\n\",\n    \"305610\\n\",\n    \"58436\\n\",\n    \"36753\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1146/D",
  "starter_code": ""
}