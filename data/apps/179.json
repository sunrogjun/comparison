{
  "task_id": "APPS/179",
  "problem_id": 179,
  "prompt": "Andrey thinks he is truly a successful developer, but in reality he didn't know about the binary search algorithm until recently. After reading some literature Andrey understood that this algorithm allows to quickly find a certain number $x$ in an array. For an array $a$ indexed from zero, and an integer $x$ the pseudocode of the algorithm is as follows:\n\nBinarySearch(a, x)\n  left = 0\n  right = a.size()\n  while left < right\n    middle = (left + right) / 2\n    if a[middle] <= x then\n      left = middle + 1\n    else\n      right = middle\n  \n  if left > 0 and a[left - 1] == x then\n    return true\n  else\n    return false\n\nNote that the elements of the array are indexed from zero, and the division is done in integers (rounding down).\n\nAndrey read that the algorithm only works if the array is sorted. However, he found this statement untrue, because there certainly exist unsorted arrays for which the algorithm find $x$!\n\nAndrey wants to write a letter to the book authors, but before doing that he must consider the permutations of size $n$ such that the algorithm finds $x$ in them. A permutation of size $n$ is an array consisting of $n$ distinct integers between $1$ and $n$ in arbitrary order.\n\nHelp Andrey and find the number of permutations of size $n$ which contain $x$ at position $pos$ and for which the given implementation of the binary search algorithm finds $x$ (returns true). As the result may be extremely large, print the remainder of its division by $10^9+7$.\n\n\n-----Input-----\n\nThe only line of input contains integers $n$, $x$ and $pos$ ($1 \\le x \\le n \\le 1000$, $0 \\le pos \\le n - 1$) \u2014 the required length of the permutation, the number to search, and the required position of that number, respectively.\n\n\n-----Output-----\n\nPrint a single number\u00a0\u2014 the remainder of the division of the number of valid permutations by $10^9+7$.\n\n\n-----Examples-----\nInput\n4 1 2\n\nOutput\n6\n\nInput\n123 42 24\n\nOutput\n824071958\n\n\n\n-----Note-----\n\nAll possible permutations in the first test case: $(2, 3, 1, 4)$, $(2, 4, 1, 3)$, $(3, 2, 1, 4)$, $(3, 4, 1, 2)$, $(4, 2, 1, 3)$, $(4, 3, 1, 2)$.",
  "solutions": "[\"MOD = 1000000007\\n\\n\\ndef f(n, cnt):\\n    \\\"\\\"\\\"\\n    n! / (n - cnt)!\\n    \\\"\\\"\\\"\\n    ans = 1\\n    for _ in range(cnt):\\n        ans = (ans * n) % MOD\\n        n -= 1\\n    return ans\\n\\n\\ndef main():\\n    n, x, pos = list(map(int, input().split()))\\n    chk1 = 0\\n    chk_r = 0\\n    left = 0\\n    right = n\\n    while left < right:\\n        middle = (left + right) // 2\\n        if middle <= pos:\\n            if middle < pos:\\n                chk1 += 1\\n            left = middle + 1\\n        else:\\n            chk_r += 1\\n            right = middle\\n    if chk1 > x - 1 or chk_r > n - x:\\n        print(0)\\n    else:\\n        # (x - 1)! / (x - 1 - chk1)! * (n - x)! / (n - x - chk_r)! * (n - chk1 - chk_r - 1)!\\n        rest = n - chk1 - chk_r - 1\\n        print(f(x - 1, chk1) * f(n - x, chk_r) * f(rest, rest) % MOD)\\n\\n\\nmain()\\n\", \"\\nn, x, p = list(map(int, input().split()))\\n\\nsmallc = 0\\nlargec = 0\\n\\nleft = 0\\nright = n\\nwhile left < right:\\n    mid = (left + right) // 2\\n    if mid < p:\\n        smallc += 1\\n        left = mid + 1\\n    elif mid > p:\\n        largec += 1\\n        right = mid\\n    else:\\n        left = mid + 1\\n\\nlargeAv = n - x\\nsmallAv = x - 1\\n\\n#print(smallc, smallAv)\\n#print(largec, largeAv)\\n\\nmod = 1000000007\\n\\ndef permutations(n, c):\\n    v = 1\\n    for i in range(n - c + 1, n + 1):\\n        v = (v * i) % mod\\n    return v\\n\\nv = permutations(largeAv, largec) * permutations(smallAv, smallc) % mod\\noc = n - (largec + smallc + 1)\\nv = v * permutations(oc, oc) % mod\\n\\n\\n#print(permutations(largeAv, largec), permutations(smallAv, smallc), permutations(oc, oc))\\nprint(v)\\n\", \"n,x,pos = list(map(int,input().split()))\\n\\na = [i for i in range(n)]\\n\\nzero = 0\\none = 0\\n\\nleft = 0\\nright = n\\nwhile left<right:\\n    middle = (left + right)//2\\n    if a[middle]<=pos:\\n        zero += 1\\n        left = middle+1\\n    else:\\n        one += 1\\n        right = middle\\n\\nres = 1\\nmod = 10**9+7\\nfor i in range(zero-1):\\n    res *= (x-1-i)\\n    res %= mod\\nfor i in range(one):\\n    res *= (n-x-i)\\n    res %= mod\\n\\nfor j in range(n-zero-one):\\n    res *= j+1\\n    res %= mod\\n\\nprint(res)\\n\", \"from math import factorial\\nmod = 1000000007\\n\\nn, x, pos = list(map(int, input().split()))\\nbiggerNeeded = 0\\nlowerNeeded = 0\\nleft = 0\\nright = n\\nwhile left < right:\\n    #print(left, right)\\n    middle = (left+right)//2\\n    if middle < pos:\\n        left = middle + 1\\n        lowerNeeded += 1\\n    elif middle > pos:\\n        right = middle\\n        biggerNeeded += 1\\n    else:\\n        left = middle + 1\\nif x+biggerNeeded > n or x-lowerNeeded <= 0:\\n    print(0)\\n    return\\nans = factorial(x-1) // factorial(x-1-lowerNeeded)\\nans %= mod\\nans *= factorial(n-x) // factorial(n-x-biggerNeeded)\\nans %= mod\\nans *= factorial(n-biggerNeeded-lowerNeeded-1)\\nans %= mod\\nprint(ans)\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\nMOD = 10 ** 9 + 7\\nN = 2000\\nfact = [0 for _ in range(N)]\\ninvfact = [0 for _ in range(N)]\\nfact[0] = 1\\nfor i in range(1, N):\\n    fact[i] = fact[i - 1] * i % MOD\\n\\ninvfact[N - 1] = pow(fact[N - 1], MOD - 2, MOD)\\n\\nfor i in range(N - 2, -1, -1):\\n    invfact[i] = invfact[i + 1] * (i + 1) % MOD\\ndef nCk(n, k):\\n    if k < 0 or n < k:\\n        return 0\\n    else:\\n        return fact[n] * invfact[k] * invfact[n - k] % MOD\\n\\ndef main():\\n    n, x, pos = map(int, input().split())\\n    b = 0\\n    s = 0\\n    l = 0\\n    r = n\\n    while l < r:\\n        m = (l + r) // 2\\n        if m <= pos:\\n            l = m + 1\\n            if m != pos:\\n                s += 1\\n        else:\\n            r = m\\n            if m != pos:\\n                b += 1\\n        \\n    b_cnt = n - x\\n    s_cnt = x - 1\\n    c = n - 1 - b - s\\n    ans = fact[c] * nCk(b_cnt, b) * nCk(s_cnt, s) * fact[b] * fact[s]\\n    print(ans % MOD)\\n    \\nfor _ in range(1):\\n    main()\", \"import sys\\ninput = sys.stdin.readline\\n\\nn,x,pos=list(map(int,input().split()))\\nmod=10**9+7\\n\\nANS=[0]*n\\n\\nleft=0\\nright=n\\n\\nwhile left<right:\\n    #print(left,right)\\n    middle=(left+right)//2\\n    if pos>=middle:\\n        ANS[middle]=-1\\n        left=middle+1\\n    else:\\n        ANS[middle]=1\\n        right=middle\\n\\nANS[pos]=9\\n#print(ANS)\\n\\nP=ANS.count(1)\\nM=ANS.count(-1)\\nMINUS=x-1\\nPLUS=n-x\\n\\nA=1\\nfor i in range(P):\\n    A=A*PLUS%mod\\n    PLUS-=1\\n\\n#print(A)\\nfor i in range(M):\\n    A=A*MINUS%mod\\n    MINUS-=1\\n\\n#print(A)\\n\\nfor i in range(1,n-P-M):\\n    A=A*i%mod\\n\\nprint(A)\\n\\n\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4 1 2\\n\",\n    \"123 42 24\\n\",\n    \"1 1 0\\n\",\n    \"1000 501 501\\n\",\n    \"1000 999 799\\n\",\n    \"2 1 1\\n\",\n    \"2 2 0\\n\",\n    \"3 1 2\\n\",\n    \"3 2 2\\n\",\n    \"3 3 1\\n\",\n    \"4 2 0\\n\",\n    \"4 3 2\\n\",\n    \"4 4 3\\n\",\n    \"7 1 1\\n\",\n    \"7 7 6\\n\",\n    \"7 2 4\\n\",\n    \"7 4 4\\n\",\n    \"8 4 1\\n\",\n    \"8 1 5\\n\",\n    \"8 8 7\\n\",\n    \"8 7 6\\n\",\n    \"8 3 0\\n\",\n    \"9 1 7\\n\",\n    \"9 9 5\\n\",\n    \"9 5 5\\n\",\n    \"9 4 4\\n\",\n    \"9 3 3\\n\",\n    \"10 1 1\\n\",\n    \"10 10 9\\n\",\n    \"10 5 5\\n\",\n    \"10 3 7\\n\",\n    \"10 4 4\\n\",\n    \"10 6 6\\n\",\n    \"10 7 7\\n\",\n    \"10 9 5\\n\",\n    \"74 16 54\\n\",\n    \"63 15 45\\n\",\n    \"54 4 47\\n\",\n    \"92 22 62\\n\",\n    \"82 15 14\\n\",\n    \"91 60 48\\n\",\n    \"91 51 5\\n\",\n    \"70 45 16\\n\",\n    \"61 21 16\\n\",\n    \"61 29 15\\n\",\n    \"69 67 68\\n\",\n    \"59 40 1\\n\",\n    \"98 86 39\\n\",\n    \"97 89 29\\n\",\n    \"78 66 16\\n\",\n    \"777 254 720\\n\",\n    \"908 216 521\\n\",\n    \"749 158 165\\n\",\n    \"535 101 250\\n\",\n    \"665 5 305\\n\",\n    \"856 406 675\\n\",\n    \"697 390 118\\n\",\n    \"539 246 0\\n\",\n    \"669 380 461\\n\",\n    \"954 325 163\\n\",\n    \"646 467 58\\n\",\n    \"542 427 258\\n\",\n    \"562 388 191\\n\",\n    \"958 817 269\\n\",\n    \"1000 888 888\\n\",\n    \"1000 2 2\\n\",\n    \"534 376 180\\n\",\n    \"1000 1 1\\n\",\n    \"1000 3 3\\n\",\n    \"1000 500 500\\n\",\n    \"1000 1000 999\\n\",\n    \"1000 501 50\\n\",\n    \"6 4 3\\n\",\n    \"3 2 1\\n\",\n    \"100 5 50\\n\",\n    \"999 490 499\\n\",\n    \"7 3 3\\n\",\n    \"10 7 5\\n\",\n    \"123 1 24\\n\",\n    \"5 5 2\\n\"\n  ],\n  \"outputs\": [\n    \"6\\n\",\n    \"824071958\\n\",\n    \"1\\n\",\n    \"646597996\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"6\\n\",\n    \"720\\n\",\n    \"720\\n\",\n    \"120\\n\",\n    \"216\\n\",\n    \"1440\\n\",\n    \"0\\n\",\n    \"5040\\n\",\n    \"720\\n\",\n    \"1440\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"5760\\n\",\n    \"7200\\n\",\n    \"8640\\n\",\n    \"362880\\n\",\n    \"362880\\n\",\n    \"43200\\n\",\n    \"70560\\n\",\n    \"90720\\n\",\n    \"43200\\n\",\n    \"90720\\n\",\n    \"0\\n\",\n    \"625981152\\n\",\n    \"581829795\\n\",\n    \"911648281\\n\",\n    \"628152721\\n\",\n    \"187724629\\n\",\n    \"233776714\\n\",\n    \"660447677\\n\",\n    \"578976138\\n\",\n    \"516359078\\n\",\n    \"252758304\\n\",\n    \"736622722\\n\",\n    \"384105577\\n\",\n    \"132656801\\n\",\n    \"673334741\\n\",\n    \"703501645\\n\",\n    \"57449468\\n\",\n    \"601940707\\n\",\n    \"849211382\\n\",\n    \"111877808\\n\",\n    \"400272219\\n\",\n    \"663368144\\n\",\n    \"844062514\\n\",\n    \"410139856\\n\",\n    \"921432102\\n\",\n    \"917113541\\n\",\n    \"214437899\\n\",\n    \"830066531\\n\",\n    \"935998075\\n\",\n    \"513948977\\n\",\n    \"644649893\\n\",\n    \"22779421\\n\",\n    \"984450056\\n\",\n    \"756641425\\n\",\n    \"606772288\\n\",\n    \"646597996\\n\",\n    \"756641425\\n\",\n    \"636821580\\n\",\n    \"12\\n\",\n    \"1\\n\",\n    \"469732450\\n\",\n    \"998308393\\n\",\n    \"288\\n\",\n    \"4320\\n\",\n    \"0\\n\",\n    \"0\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1436/C",
  "starter_code": ""
}