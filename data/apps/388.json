{
  "task_id": "APPS/388",
  "problem_id": 388,
  "prompt": "In the army, it isn't easy to form a group of soldiers that will be effective on the battlefield. The communication is crucial and thus no two soldiers should share a name (what would happen if they got an order that Bob is a scouter, if there are two Bobs?).\n\nA group of soldiers is effective if and only if their names are different. For example, a group (John, Bob, Limak) would be effective, while groups (Gary, Bob, Gary) and (Alice, Alice) wouldn't.\n\nYou are a spy in the enemy's camp. You noticed n soldiers standing in a row, numbered 1 through n. The general wants to choose a group of k consecutive soldiers. For every k consecutive soldiers, the general wrote down whether they would be an effective group or not.\n\nYou managed to steal the general's notes, with n - k + 1 strings s_1, s_2, ..., s_{n} - k + 1, each either \"YES\" or \"NO\".   The string s_1 describes a group of soldiers 1 through k (\"YES\" if the group is effective, and \"NO\" otherwise).  The string s_2 describes a group of soldiers 2 through k + 1.  And so on, till the string s_{n} - k + 1 that describes a group of soldiers n - k + 1 through n. \n\nYour task is to find possible names of n soldiers. Names should match the stolen notes. Each name should be a string that consists of between 1 and 10 English letters, inclusive. The first letter should be uppercase, and all other letters should be lowercase. Names don't have to be existing names\u00a0\u2014 it's allowed to print \"Xyzzzdj\" or \"T\" for example.\n\nFind and print any solution. It can be proved that there always exists at least one solution.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (2 \u2264 k \u2264 n \u2264 50)\u00a0\u2014 the number of soldiers and the size of a group respectively.\n\nThe second line contains n - k + 1 strings s_1, s_2, ..., s_{n} - k + 1. The string s_{i} is \"YES\" if the group of soldiers i through i + k - 1 is effective, and \"NO\" otherwise.\n\n\n-----Output-----\n\nFind any solution satisfying all given conditions. In one line print n space-separated strings, denoting possible names of soldiers in the order. The first letter of each name should be uppercase, while the other letters should be lowercase. Each name should contain English letters only and has length from 1 to 10.\n\nIf there are multiple valid solutions, print any of them.\n\n\n-----Examples-----\nInput\n8 3\nNO NO YES YES YES NO\n\nOutput\nAdam Bob Bob Cpqepqwer Limak Adam Bob Adam\nInput\n9 8\nYES NO\n\nOutput\nR Q Ccccccccc Ccocc Ccc So Strong Samples Ccc\nInput\n3 2\nNO NO\n\nOutput\nNa Na Na\n\n\n-----Note-----\n\nIn the first sample, there are 8 soldiers. For every 3 consecutive ones we know whether they would be an effective group. Let's analyze the provided sample output:  First three soldiers (i.e. Adam, Bob, Bob) wouldn't be an effective group because there are two Bobs. Indeed, the string s_1 is \"NO\".  Soldiers 2 through 4 (Bob, Bob, Cpqepqwer) wouldn't be effective either, and the string s_2 is \"NO\".  Soldiers 3 through 5 (Bob, Cpqepqwer, Limak) would be effective, and the string s_3 is \"YES\".  ...,  Soldiers 6 through 8 (Adam, Bob, Adam) wouldn't be effective, and the string s_6 is \"NO\".",
  "solutions": "[\"n, k = list(map(int, input().split()))\\na = input().split()\\nnames = [chr(ord(\\\"A\\\") + i) for i in range(26)] + [chr(ord(\\\"A\\\") + i) + chr(ord('a') + i) for i in range(26)]\\nans = [names[i] for i in range(n)]\\nfor i in range(k - 1, n):\\n\\tif a[i - k + 1] == \\\"NO\\\":\\n\\t\\tans[i] = ans[i - k + 1]\\nprint(*ans)\\n\", \"n, k = map(int, input().split())\\nnames = []\\nfor i in range(ord('a'), ord('z') + 1):\\n    names.append('A' + chr(i))\\nfor i in range(ord('a'), ord('z') + 1):\\n    names.append('B' + chr(i))\\npos = 0\\na = input().split()\\nans = []\\nfor i in range(k - 1):\\n    ans.append(names[pos])\\n    pos += 1\\nfor i in range(n - k + 1):\\n    if a[i] == \\\"YES\\\":\\n        ans.append(names[pos])\\n        pos += 1\\n    else:\\n        ans.append(ans[i])\\nprint(' '.join(ans))\", \"n, k = list(map(int, input().split()))\\ns = list(input().split())\\n\\ndef generate_name(n):\\n    s = ''\\n    for i in range(10):\\n        if (n == 0):\\n            break\\n        for j in range(26):\\n            n -= 1\\n            if (n == 0):\\n                s += chr(ord('A') + j)\\n                return s.title()\\n        s += 'Z'\\n    return s.title()\\n\\nnames = []\\nt = 1\\n\\nfor i in range(k - 1):\\n    names.append(generate_name(t))\\n    t += 1\\n\\nfor word in s:\\n    if word == 'YES':\\n        names.append(generate_name(t))\\n        t += 1\\n    else:\\n        names.append(names[-min(k - 1, len(names))])\\n\\nprint(' '.join(names))\\n\", \"n, k = map(int, input().split())\\ns = [i == \\\"YES\\\" for i in input().split()]\\n\\nr = []\\n\\nname = \\\"Aa\\\"\\n\\ndef nextName():\\n\\tnonlocal name\\n\\tif name[-1] == 'z': name = name + 'a'\\n\\telse: name = name[:-1] + chr(ord(name[-1]) + 1)\\n\\treturn name\\n\\nfor i in range(k-1):\\n\\tr.append(nextName())\\n\\nfor i in range(n-k+1):\\n\\tr.append(nextName() if s[i] else r[i])\\n\\nprint(*r)\", \"\\\"\\\"\\\"\\nATSTNG's ejudge Python3 solution template\\n(actual solution is below)\\n\\\"\\\"\\\"\\nimport sys, queue\\n\\ntry:\\n    import dev_act_ffc429465ab634  # empty file in directory\\n    DEV = True\\nexcept:\\n    DEV = False\\n\\ndef log(*s):\\n    if DEV: print('LOG', *s)\\n\\nclass EJudge:\\n    def __init__(self, problem=\\\"default\\\", reclim=1<<30):\\n        self.problem = problem\\n        sys.setrecursionlimit(reclim)\\n\\n    def use_files(self, infile='', outfile=''):\\n        if infile!='':\\n            self.infile = open(infile)\\n            sys.stdin = self.infile\\n        if infile!='':\\n            self.outfile = open(outfile, 'w')\\n            sys.stdout = self.outfile\\n\\n    def use_bacs_files(self):\\n        self.use_files(self.problem+'.in', self.problem+'.out')\\n\\n    def get_tl(self):\\n        while True: pass\\n\\n    def get_ml(self):\\n        tmp = [[[5]*100000 for _ in range(1000)]]\\n        while True: tmp.append([[5]*100000 for _ in range(1000)])\\n\\n    def get_re(self):\\n        s = (0,)[8]\\n\\n    def get_wa(self, wstr='blablalblah'):\\n        for _ in range(3): print(wstr)\\n        return\\n\\nclass IntReader:\\n    def __init__(self):\\n        self.ost = queue.Queue()\\n\\n    def get(self):\\n        return int(self.sget())\\n\\n    def sget(self):\\n        if self.ost.empty():\\n            for el in input().split():\\n                self.ost.put(el)\\n        return self.ost.get()\\n\\n    def release(self):\\n        res = []\\n        while not self.ost.empty():\\n            res.append(self.ost.get())\\n        return res\\n\\ndef tokenized(s):\\n    \\\"\\\"\\\" Parses given string into tokens with default rules \\\"\\\"\\\"\\n    word = []\\n\\n    for ch in s.strip():\\n        if ch == ' ':\\n            if word: yield ''.join(word); word = []\\n        elif 'a' <= ch <= 'z' or 'A' <= ch <= 'Z' or '0' <= ch <= '9':\\n            word.append(ch)\\n        else:\\n            if word: yield ''.join(word); word = []\\n            yield ch\\n\\n    if word: yield ''.join(word); word = []\\n\\n###############################################################################\\nej = EJudge(  )\\nint_reader = IntReader()\\nfmap = lambda f,*l: list(map(f,*l))\\nparse_int = lambda: fmap(int, input().split())\\n\\n# input\\nn, k = parse_int()\\n\\nseq = fmap(lambda x: x == \\\"YES\\\", input().split())\\n\\nnames = [chr(ord('A')+i) for i in range(25)] + ['S'+chr(ord('a')+i) for i in range(25)]\\nnames = names[:n]\\n\\nfor i in range(len(seq)):\\n    if not seq[i]:\\n        names[i+k-1] = names[i]\\n\\nprint(' '.join(names))\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\", \"def name(n):\\n\\treturn chr(ord('A') + n % 26) + chr(ord('a') + n // 26)\\n\\ndef main():\\n\\tn, k = map(int, input().split())\\n\\tarr = list(map(str, input().split()))\\n\\tif (arr.count(\\\"YES\\\") == 0):\\n\\t\\tfor i in range(n):\\n\\t\\t\\tprint(\\\"Max \\\", end = \\\"\\\")\\n\\t\\treturn\\n\\tans = [\\\"\\\" for i in range(n)]\\n\\tx = arr.index(\\\"YES\\\")\\n\\tfor i in range(k):\\n\\t\\tans[x + i] = name(i + x)\\n\\tfor i in range(x + 1, n - k + 1):\\n\\t\\tif (arr[i] == \\\"YES\\\"):\\n\\t\\t\\tans[i + k - 1] = name(i + k - 1)\\n\\t\\telse:\\n\\t\\t\\tans[i + k - 1] = ans[i]\\n\\n\\n\\tfor i in range(x - 1, -1, -1):\\n\\t\\tif (arr[i] == \\\"YES\\\"):\\n\\t\\t\\tans[i] = name(i)\\n\\t\\telse:\\n\\t\\t\\tans[i] = ans[i + k - 1]\\n\\tprint(*ans)\\n\\n\\nmain()\", \"def get(x):\\n    return chr(ord('A') + x // 26) + chr(ord('a') + x % 26)\\n\\nread = lambda: map(int, input().split())\\nn, k = read()\\na = input().split()\\nans = [0] * n\\nnum = 1\\nfor i in range(k - 1):\\n    ans[i] = num\\n    num += 1\\nfor i in range(k - 1, n):\\n    cur = a[i - k + 1]\\n    if cur == 'YES':\\n        num += 1\\n        ans[i] = num\\n    else:\\n        ans[i] = ans[i - k + 1]\\nres = ' '.join(map(str, [get(i) for i in ans]))\\nprint(res)\", \"def name(n):\\n    if n < 26:\\n        return chr(n + ord('A'))\\n    else:\\n        return chr(n - 26 + ord('A')) + 'a'\\n\\n\\nn, k = tuple(map(int, input().split()))\\ndata = list([x == 'YES' for x in input().split()])\\n\\nres = []\\nfor i in range(k-1):\\n    res.append(name(i))\\nfor i in range(k - 1, n):\\n    if data[i - k + 1]:\\n        res.append(name(i))\\n    else:\\n        res.append(res[i-k+1])\\nprint(' '.join(res))\\n\", \"n, k = list(map(int, input().split()))\\npossible_names = [a + b for a in 'QWERTYUIOPLKJHGFDSAZXCVBNM' for b in 'qwertyuioplkjhgfdsazxcvbnm']\\nnames = [possible_names.pop() for i in range(k - 1)]\\nfor word in input().split():\\n    if word == 'YES':\\n        names.append(possible_names.pop())\\n    else:\\n        names.append(names[-k + 1])\\nprint(*names)\\n\", \"import math, sys, itertools\\ndef main():\\n\\tn,k = map(int, input().split())\\n\\tlst = input().split()\\n\\td = []\\n\\tit = 0\\n\\titd = 0\\n\\tfor i in range(k):\\n\\t\\tif (it>25):\\n\\t\\t\\titd+=1\\n\\t\\t\\tit = 0\\n\\t\\td.append(chr(65+itd)+chr(97+it))\\n\\t\\tit+=1\\n\\t\\n\\tans = []\\n\\tfor i in range(k-1):\\n\\t\\tans.append(d.pop())\\n\\tfor i in range(k-1,n):\\n\\t\\tif lst[i-(k-1)]==\\\"NO\\\":\\n\\t\\t\\tans.append(ans[i-(k-1)])\\n\\t\\telse:\\n\\t\\t\\tans.append(d.pop())\\n\\t\\t\\td.append(ans[i-(k-1)])\\n\\tfor i in range(n):\\n\\t\\tprint(ans[i], end=' ')\\n\\tprint()\\n\\t\\t\\t\\n\\t\\n\\t\\t\\ndef __starting_point():\\n\\tmain()\\n\\n__starting_point()\", \"n, k = map(int, input().split())\\nl = [True if x == 'YES' else False for x in input().split()]\\n \\nres = list(range(k - 1))\\nfor i in l:\\n    if i:\\n        for j in range(k):\\n            if j not in res[-k+1:]:\\n                res.append(j)\\n                break\\n    else:\\n        res.append(res[-k + 1])\\n \\nnames = [chr(x) + chr(y) for x in range(ord('A'), ord('Z') + 1) for y in range(ord('a'), ord('z') + 1)]\\n \\nfor i in res:\\n    print(names[i], end=' ')\\nprint()\", \"n, k = map(int, input().split())\\nnames = []\\n\\ndef getNext(a):\\n    if a[1] == 'z':\\n        return chr(ord(a[0]) + 1) + 'a'\\n    else:\\n        return a[0] + chr(ord(a[1]) + 1)\\n\\na = list(input().split())\\nfor i in range(len(a)):\\n    a[i] = 1 if a[i] == 'YES' else 0\\n\\ntmp = 'Aa'\\nnames.append(tmp)\\nif a[0]:\\n    for i in range(k - 1):\\n        tmp = getNext(tmp)\\n        names.append(tmp)\\nelse:\\n    names.append(tmp)\\n    for i in range(k - 2):\\n        tmp = getNext(tmp)\\n        names.append(getNext(tmp))  \\n        \\nfor i in range(k, n):\\n    if a[i - k + 1]:\\n        tmp = getNext(tmp)\\n        names.append(getNext(tmp))\\n    else:\\n        names.append(names[i - k + 1])\\nprint(*names)\", \"n, k = list(map(int, input().split()))\\na = input().split()\\nuq_names = [chr(i) for i in range(ord('A'), ord('Z') + 1)]\\nuq_names += [s + 'a' for s in uq_names]\\nres = uq_names[:k - 1]\\nuni = k - 1\\nfor i, b in enumerate(a):\\n    if b == \\\"YES\\\":\\n        res.append(uq_names[uni])\\n        uni += 1\\n    else:\\n        res.append(res[i])\\nprint(' '.join(res))\\n\", \"def parent(x):\\n    nonlocal color\\n    y = x\\n    while color[x] != x:\\n        x = color[x]\\n    while y != x:\\n        color[y], y = x, color[y]    \\n    return x\\n\\ndef union(x, y):\\n    nonlocal color\\n    x = parent(x)\\n    y = parent(y)\\n    if size[x] < size[y]:\\n        x, y = y, x\\n    color[y] = x\\n    size[x] += size[y]\\n\\nn, k = map(int, input().split())\\na = input().split()\\nres = list(range(n))\\ncolor = list(range(n))\\nsize = [1] * n\\nfor i in range(n - k + 1):\\n    if a[i] == 'NO':\\n        union(i, i + k - 1)\\n\\nalph = ''.join(chr(i) for i in range(ord('a'), ord('z') + 1))\\nnames = [x+y for x in alph.upper() for y in alph] \\n\\nprint(*[names[x] for x in color])\", \"def solve(n, k, a):\\n    t = 0\\n    ans = [\\\"\\\" for i in range(n)] \\n    \\n    i = 0\\n    while ((i < len(a)) and (a[i] == 'NO')):\\n        ans[i] = names[0]\\n        i += 1\\n    \\n    if (i == len(a)):\\n        for j in range(i, i + k - 1):\\n            ans[j] = ans[0]\\n        return(ans)\\n    \\n    for j in range(i, i + k):\\n        ans[j] = names[t]\\n        t += 1\\n    \\n    while (i < len(a)):\\n        if (a[i] == 'NO'):\\n            ans[i + k - 1] = ans[i]\\n        else:\\n            ans[i + k - 1] = names[t]\\n            t += 1\\n        i += 1\\n\\n    return ans \\n\\n\\n\\n\\nnames = []\\nfor i in range(ord('A'), ord('Z')+ 1):\\n    for j in range(ord('a'), ord('z')+ 1):\\n        names.append(chr(i) + chr(j))\\n'''\\nimport random\\nfor i in range(100000):\\n    n = random.randint(2, 52)\\n    k = random.randint(2, n)\\n    a = [random.choice(['YES', 'NO']) for i in range(n - k)]\\n    ans = solve(n, k, a)\\n    for i in range(0, n - k):\\n        s = set(ans[i:i+k])\\n        is_diff = len(s) == k\\n        if (a[i] == 'YES'):\\n            if (len(s) != k):\\n                print(n, k)\\n                print(a)\\n                print(ans)\\n                exit\\n        if (a[i] == 'NO'):\\n            if (len(s) == k):\\n                print(n, k)\\n                print(a)\\n                print(ans)\\n                exit\\n'''     \\nn, k = list(map(int, input().strip().split()))\\nis_ok = input().strip().split()\\nans = solve(n, k, is_ok)\\nprint(*ans)\\n\\n\", \"#This code is dedicated to Olya S.\\nfrom random import*\\n\\nn,k=list(map(int,input().split()))\\ns=input().split()\\n\\nsoliders=['' for i in range(n)]\\n\\ndef newname():\\n    name=chr(randint(65,90))\\n    for i in range(9):\\n        name+=chr(randint(97,122))\\n    return name\\nif s[0]=='NO':\\n        soliders[0]=newname()\\n        soliders[1]=soliders[0]\\n        for j in range(2,2+k):\\n            if j>n-1:\\n               break\\n            soliders[j]=newname()\\nelse:\\n    for j in range(0,k):\\n        \\n        soliders[j]=newname()\\n    \\nfor i in range(1,n-k+1):\\n    if s[i]=='YES':\\n        soliders[i+k-1]=newname()\\n    else:\\n        soliders[i+k-1]=soliders[i]\\n    \\n            \\nprint(*soliders)\\n                \\n\\n\\n\\n\", \"n, k = [int(i) for i in input().split()]\\n#n, k = 50, 2\\ns = [i for i in input().split()]\\n#s = [\\\"YES\\\"] * 49\\nres = []\\nc1 = ord(\\\"A\\\")\\nc2 = ord(\\\"a\\\")\\nc3 = ord(\\\"a\\\")\\n\\nfor i in range(0, k-1):\\n    res1 = \\\"\\\"\\n    if (c1 == ord(\\\"Z\\\") and c2 == ord(\\\"z\\\")):\\n        res1 = chr(c1) + chr(c2) + chr(c3)\\n        c3 += 1\\n    elif (c1 == ord(\\\"Z\\\")):\\n        res1 = chr(c1) + chr(c2)\\n        c2 += 1\\n    else:\\n        res1 = chr(c1)\\n        c1 += 1\\n    res.append(res1)\\n\\n\\nfor i in range(len(s)):\\n    if s[i] == \\\"NO\\\":\\n        res.append(res[i])\\n    else:\\n        res1 = \\\"\\\"\\n        if (c1 == ord(\\\"Z\\\") and c2 == ord(\\\"z\\\")):\\n            res1 = chr(c1) + chr(c2) + chr(c3)\\n            c3 += 1\\n        elif (c1 == ord(\\\"Z\\\")):\\n            res1 = chr(c1) + chr(c2)\\n            c2 += 1\\n        else:\\n            res1 = chr(c1)\\n            c1 += 1\\n        res.append(res1)\\n\\n    #print(i, s[i], *res[i:])\\n\\n\\nfor i in res:\\n    print(i, end = \\\" \\\")\\n\", \"import sys\\n\\n\\n\\ndef main():\\n    names = []\\n    for i in range(26):        \\n        s = \\\"A\\\" + chr(ord('a')+i)\\n        s1 = \\\"X\\\" + chr(ord('a')+i)\\n        names.append(s)\\n        names.append(s1)\\n    \\n    n,k = map(int,sys.stdin.readline().split())\\n    r = list(sys.stdin.readline().split())\\n    res = [\\\"Ho\\\"]*n\\n    cur = 0\\n\\n    firstYes = -1\\n    for i in range(n-k+1):\\n        if r[i] == \\\"YES\\\":\\n            firstYes = i\\n            break\\n\\n    if firstYes == -1:\\n        print(\\\" \\\".join(res))\\n        return\\n\\n    for i in range(firstYes+1, firstYes+k):\\n        res[i] = names[cur]\\n        cur+=1\\n\\n    for i in range(firstYes+1, n-k+1):\\n        if r[i] == \\\"YES\\\":\\n            res[i+k-1] = names[cur]\\n            cur+=1\\n        else:\\n            res[i+k-1] = res[i]\\n\\n    print(\\\" \\\".join(res))\\n\\nmain()\", \"names = [i for i in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'] + [ 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'[i:i+2] for i in range(0, len('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz'), 2)]\\nn, k = map(int, input().split())\\nyes_no = input().split()\\nguess = names[:n]\\nfor i in range(len(yes_no)):\\n    if yes_no[i] == 'NO':\\n        guess[i + k - 1] = guess[i]\\nprint(' '.join(guess))\", \"n, k = map(int, input().split())\\nwords = []\\nfor i in range(ord('A'), ord('Z') + 1):\\n    for j in range(ord('a'), ord('z') + 1):\\n        words.append(chr(i) + chr(j))\\n\\nour = input().split()\\n \\nres = [i for i in range(n)]\\nfor j in range(50):\\n    for i in range(len(our)):\\n        if our[i] == 'NO':\\n            res[i] = res[i + k - 1]\\n\\nfor elem in res:\\n    print(words[elem],end=' ')\", \"names = list(\\\"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z Ab Bb Cb Db Eb Fb Gb Hb Ib Jb Kb Lb Mb Nb Ob Pb Qb Rb Sb Tb Ub Vb Wb Xb Gh Rg Df\\\".split())\\n\\nn, k = map(int, input().split())\\nA = list(input().split())\\nfind = False\\nans = [0] * n\\nfor i in range(n - k + 1):\\n\\ts = A[i]\\n\\tif find:\\n\\t\\tif s == \\\"YES\\\":\\n\\t\\t\\tc = 0\\n\\t\\t\\twhile (names[c] in ans[i:]):\\n\\t\\t\\t\\tc += 1\\n\\t\\t\\tans[i + k - 1] = names[c]\\n\\t\\telse:\\n\\t\\t\\tans[i + k - 1] = ans[i]\\n\\telse:\\n\\t\\tif s == \\\"NO\\\":\\n\\t\\t\\tans[i] = names[0]\\n\\t\\telse:\\n\\t\\t\\tnow = i\\n\\t\\t\\tfor j in range(k):\\n\\t\\t\\t\\tans[now] = names[j]\\n\\t\\t\\t\\tnow += 1\\n\\t\\t\\tfind = True\\nif not find:\\n\\tfor i in range(n - k + 1, n):\\n\\t\\tans[i] = names[0]\\nprint(\\\" \\\".join(ans))\", \"n,k = map(int,input().split())\\na = list(input().split())\\n\\nmem = []\\nmem2 = []\\nfor i in 'abcdefghijklmnopqrstuvwxyz':\\n    mem.append(i)\\n    mem.append('a'+i)\\n    mem2.append('b'+i)\\n    mem2.append('c'+i)\\ndp = [-1]*(n)\\nc = 0\\nc2 = 0\\nfor i in range(len(a)):\\n    if a[i] == \\\"NO\\\":\\n        if dp[i] == -1:\\n            dp[i] = mem2[c2]\\n            dp[i+k-1] = mem2[c2]\\n        else:    \\n            dp[i+k-1] = dp[i]\\n        c2 += 1\\n    else:\\n        for j in range(i,i+k):\\n            if (dp[j] == -1):\\n                dp[j] = mem[c]\\n                c += 1\\n\\nfor i in range(n):\\n    if dp[i] == -1:\\n        dp[i] = 'a'\\n            \\nfor i in dp:\\n    print(i[0].upper()+i[1:],end=' ')\\n\", \"import random\\n\\ndef random_str(rango, pos):\\n    while True:\\n        x = random.randint(65,90)\\n        string = chr(x)\\n        x = random.randint(1,10)\\n        for i in range(x - 1):\\n            rand = random.randint(97,122)\\n            string += chr(rand)\\n        if string not in rango:\\n            break\\n    return string\\n\\ndef print_array(array):   \\n    result = \\\"\\\"\\n    for string in array:\\n        result += string + \\\" \\\"\\n\\n    print(result)\\n    \\nn, k = map(int, input().strip().split(\\\" \\\"))\\n\\nstrings = input().strip().split(\\\" \\\")\\nsoldiers = [-1] * n\\n\\nfor i in range(n):\\n    soldiers[i] = random_str(soldiers, i)\\n\\npos = 0\\nfor string in strings:\\n    \\n    if string == \\\"NO\\\":        \\n        aux = soldiers[pos]\\n        soldiers[pos + k - 1] = aux  \\n              \\n    pos += 1\\n        \\nprint_array(soldiers)    \", \"# Description of the problem can be found at http://codeforces.com/contest/771/problem/B\\n\\nn, k = map(int, input().split())\\nl_o = input().split()\\n\\na_n = [\\\"A\\\"]\\nfor i in range(1, n):\\n    diff = i - 25 if i >= 25 else 0 \\n    a_n += [chr(ord(\\\"A\\\") + i - (26 if diff != 0 else 0)) + (\\\"\\\" if diff == 0 else chr(ord(\\\"a\\\") + diff))]\\n\\nfor i in range(n - k + 1):\\n    if l_o[i] == \\\"NO\\\":\\n        a_n[i + k - 1] = a_n[i]\\nprint(\\\" \\\".join(a_n))\", \"names = [chr(ord('A') + i) for i in range(26)]\\nnames += ['A' + chr(ord('a') + i) for i in range(26)]\\n\\nn, k = list(map(int, input().split()))\\na = input().split()\\n\\nfor i, a_i in enumerate(a):\\n    if a_i == 'NO':\\n        names[i+k-1] = names[i]\\n\\nprint(' '.join(names[:n]))\\n\\n\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"8 3\\nNO NO YES YES YES NO\\n\",\n    \"9 8\\nYES NO\\n\",\n    \"3 2\\nNO NO\\n\",\n    \"2 2\\nYES\\n\",\n    \"2 2\\nNO\\n\",\n    \"7 2\\nYES NO YES YES NO YES\\n\",\n    \"18 7\\nYES YES YES YES YES YES YES NO NO NO NO NO\\n\",\n    \"50 3\\nNO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO YES NO\\n\",\n    \"19 15\\nNO YES YES YES NO\\n\",\n    \"3 2\\nNO NO\\n\",\n    \"3 2\\nNO YES\\n\",\n    \"3 2\\nYES NO\\n\",\n    \"3 2\\nYES YES\\n\",\n    \"26 17\\nNO YES YES YES NO YES NO YES YES YES\\n\",\n    \"12 2\\nYES YES YES YES YES YES YES YES YES YES YES\\n\",\n    \"16 2\\nNO NO NO NO NO NO NO NO NO NO NO NO NO NO NO\\n\",\n    \"42 20\\nYES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES\\n\",\n    \"37 14\\nNO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO\\n\",\n    \"29 10\\nYES NO YES NO YES NO YES YES YES YES YES NO NO NO NO NO YES YES YES YES\\n\",\n    \"37 3\\nYES NO YES NO YES NO YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES NO NO YES NO NO YES YES YES YES NO\\n\",\n    \"44 11\\nNO NO YES NO YES NO YES YES YES YES YES YES YES YES YES YES YES YES YES NO YES YES YES YES YES NO NO YES NO NO YES YES YES NO\\n\",\n    \"50 49\\nNO YES\\n\",\n    \"50 49\\nYES YES\\n\",\n    \"50 49\\nNO NO\\n\",\n    \"50 49\\nYES NO\\n\",\n    \"46 42\\nNO YES YES YES NO\\n\",\n    \"45 26\\nYES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES\\n\",\n    \"45 26\\nNO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO NO\\n\",\n    \"50 3\\nNO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES\\n\",\n    \"50 2\\nNO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO\\n\",\n    \"50 3\\nNO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES YES YES YES YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES\\n\",\n    \"49 2\\nNO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO NO NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES NO YES\\n\",\n    \"35 22\\nNO NO NO NO NO NO NO NO NO NO NO NO NO NO\\n\",\n    \"46 41\\nYES YES YES YES YES YES\\n\",\n    \"12 4\\nYES YES NO NO NO NO NO YES YES\\n\",\n    \"50 2\\nYES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES\\n\",\n    \"50 4\\nYES YES YES YES YES NO YES YES YES YES NO NO YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES NO YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES\\n\",\n    \"34 5\\nYES YES YES YES YES NO YES YES YES YES NO NO YES YES YES NO NO YES NO YES YES YES YES YES YES YES YES YES YES YES\\n\",\n    \"50 43\\nYES NO YES NO YES YES YES YES\\n\",\n    \"38 30\\nNO NO YES NO YES NO NO NO NO\\n\",\n    \"50 50\\nNO\\n\",\n    \"50 50\\nYES\\n\",\n    \"5 3\\nYES NO YES\\n\",\n    \"30 2\\nYES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES\\n\",\n    \"50 50\\nYES\\n\",\n    \"27 27\\nYES\\n\",\n    \"28 2\\nYES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES\\n\",\n    \"50 2\\nYES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES\\n\",\n    \"8 3\\nYES NO YES NO YES NO\\n\",\n    \"42 30\\nNO YES YES NO NO YES NO YES NO YES NO NO YES\\n\",\n    \"50 49\\nYES YES\\n\",\n    \"50 3\\nYES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES YES\\n\",\n    \"7 5\\nYES NO YES\\n\",\n    \"8 4\\nNO YES NO YES NO\\n\",\n    \"50 50\\nNO\\n\",\n    \"50 48\\nYES NO YES\\n\",\n    \"29 14\\nYES NO YES NO NO YES YES NO NO YES YES NO NO YES YES YES\\n\",\n    \"10 3\\nNO YES NO YES NO YES NO YES\\n\",\n    \"10 5\\nYES NO YES NO YES NO\\n\"\n  ],\n  \"outputs\": [\n    \"Ab Ac Ab Ac Af Ag Ah Ag \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Ac \\n\",\n    \"Ab Ab Ab \\n\",\n    \"Ab Ac \\n\",\n    \"Ab Ab \\n\",\n    \"Ab Ac Ac Ae Af Af Ah \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ai Aj Ak Al Am \\n\",\n    \"Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Ab Ac Bx Ac \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ab Aq Ar As Af \\n\",\n    \"Ab Ab Ab \\n\",\n    \"Ab Ab Ad \\n\",\n    \"Ab Ac Ac \\n\",\n    \"Ab Ac Ad \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ab As At Au Af Aw Ah Ay Az Ba \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am \\n\",\n    \"Ab Ab Ab Ab Ab Ab Ab Ab Ab Ab Ab Ab Ab Ab Ab Ab \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Ac Am Ae Ao Ag Aq Ar As At Au Am Ae Ao Ag Aq Ba Bb Bc Bd \\n\",\n    \"Ab Ac Ad Ac Af Ac Ah Ac Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Ba Bb Be Bb Be Bh Bi Bj Bk Bj \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Ab Ac An Ae Ap Ag Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Au Bf Bg Bh Bi Bj Ba Bb Bm Bd Au Bp Bq Br Bi \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq Br Bs Bt Bu Bv Bw Ab By \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq Br Bs Bt Bu Bv Bw Bx By \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq Br Bs Bt Bu Bv Bw Ab Ac \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq Br Bs Bt Bu Bv Bw Bx Ac \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Ab Br Bs Bt Af \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq Br Bs Bt \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au \\n\",\n    \"Ab Ac Ab Ae Ab Ag Ab Ai Ab Ak Ab Am Ab Ao Ab Aq Ab As Ab Au Ab Aw Ab Ay Ab Ba Ab Bc Ab Be Ab Bg Ab Bi Ab Bk Ab Bm Ab Bo Ab Bq Ab Bs Ab Bu Ab Bw Ab By \\n\",\n    \"Ab Ab Ad Ad Af Af Ah Ah Aj Aj Al Al An An Ap Ap Ar Ar At At Av Av Ax Ax Az Az Bb Bb Bd Bd Bf Bf Bh Bh Bj Bj Bl Bl Bn Bn Bp Bp Br Br Bt Bt Bv Bv Bx Bx \\n\",\n    \"Ab Ac Ab Ae Ab Ag Ab Ai Ab Ak Ab Am Ab Ao Ab Aq Ab As Ab Au Ab Aw Ab Ay Ab Ba Ab Bc Bd Be Bf Bg Bf Bi Bf Bk Bf Bm Bf Bo Bf Bq Bf Bs Bf Bu Bf Bw Bf By \\n\",\n    \"Ab Ab Ad Ad Af Af Ah Ah Aj Aj Al Al An An Ap Ap Ar Ar At At Av Av Ax Ax Ax Ax Bb Bb Bd Bd Bf Bf Bh Bh Bj Bj Bl Bl Bn Bn Bp Bp Br Br Bt Bt Bv Bv Bx \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq Br Bs Bt Bu \\n\",\n    \"Ab Ac Ad Ae Af Ad Ae Af Ad Ae Al Am \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq Br Bs Bt Bu Bv Bw Bx By \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Ag Ak Al Am An Al Am Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bc Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq Br Bs Bt Bu Bv Bw Bx By \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ag Al Am An Ao Al Am Ar As At Am Ar Aw At Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq Br Ac Bt Ae Bv Bw Bx By \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Ab Ac Bg Ae Bi Ag Ah Ai Aj \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq Br Bs Bt Bu Bv Bw Bx Ab \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq Br Bs Bt Bu Bv Bw Bx By \\n\",\n    \"Ab Ac Ad Ac Af \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq Br Bs Bt Bu Bv Bw Bx By \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq Br Bs Bt Bu Bv Bw Bx By \\n\",\n    \"Ab Ac Ad Ac Af Ac Ah Ac \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Ab Bf Bg Ae Af Bj Ah Bl Aj Bn Al Am Bq \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq Br Bs Bt Bu Bv Bw Bx By \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq Br Bs Bt Bu Bv Bw Bx By \\n\",\n    \"Ab Ac Ad Ae Af Ac Ah \\n\",\n    \"Ab Ac Ad Ab Af Ad Ah Af \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq Br Bs Bt Bu Bv Bw Bx Ab \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ap Aq Ar As At Au Av Aw Ax Ay Az Ba Bb Bc Bd Be Bf Bg Bh Bi Bj Bk Bl Bm Bn Bo Bp Bq Br Bs Bt Bu Bv Bw Ac By \\n\",\n    \"Ab Ac Ad Ae Af Ag Ah Ai Aj Ak Al Am An Ao Ac Aq Ae Af At Au Ai Aj Ax Ay Am An Bb Bc Bd \\n\",\n    \"Ab Ac Ab Ae Ab Ag Ab Ai Ab Ak \\n\",\n    \"Ab Ac Ad Ae Af Ac Ah Ae Aj Ac \\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/771/B",
  "starter_code": ""
}