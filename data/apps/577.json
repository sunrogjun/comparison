{
  "task_id": "APPS/577",
  "problem_id": 577,
  "prompt": "Phoenix is picking berries in his backyard. There are $n$ shrubs, and each shrub has $a_i$ red berries and $b_i$ blue berries.\n\nEach basket can contain $k$ berries. But, Phoenix has decided that each basket may only contain berries from the same shrub or berries of the same color (red or blue). In other words, all berries in a basket must be from the same shrub or/and have the same color.\n\nFor example, if there are two shrubs with $5$ red and $2$ blue berries in the first shrub and $2$ red and $1$ blue berries in the second shrub then Phoenix can fill $2$ baskets of capacity $4$ completely:   the first basket will contain $3$ red and $1$ blue berries from the first shrub;  the second basket will contain the $2$ remaining red berries from the first shrub and $2$ red berries from the second shrub. \n\nHelp Phoenix determine the maximum number of baskets he can fill completely!\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($ 1\\le n, k \\le 500$)\u00a0\u2014 the number of shrubs and the basket capacity, respectively.\n\nThe $i$-th of the next $n$ lines contain two integers $a_i$ and $b_i$ ($0 \\le a_i, b_i \\le 10^9$)\u00a0\u2014 the number of red and blue berries in the $i$-th shrub, respectively.\n\n\n-----Output-----\n\nOutput one integer\u00a0\u2014 the maximum number of baskets that Phoenix can fill completely.\n\n\n-----Examples-----\nInput\n2 4\n5 2\n2 1\n\nOutput\n2\n\nInput\n1 5\n2 3\n\nOutput\n1\n\nInput\n2 5\n2 1\n1 3\n\nOutput\n0\n\nInput\n1 2\n1000000000 1\n\nOutput\n500000000\n\n\n\n-----Note-----\n\nThe first example is described above.\n\nIn the second example, Phoenix can fill one basket fully using all the berries from the first (and only) shrub.\n\nIn the third example, Phoenix cannot fill any basket completely because there are less than $5$ berries in each shrub, less than $5$ total red berries, and less than $5$ total blue berries.\n\nIn the fourth example, Phoenix can put all the red berries into baskets, leaving an extra blue berry behind.",
  "solutions": "[\"def check(k, aas, bs, a_rem, b_rem):\\n    if a_rem + b_rem < k:\\n        return False\\n    a_lo = k - b_rem\\n    a_hi = a_rem\\n\\n    rems = set()\\n    rems.add(0)\\n    for a, b in zip(aas, bs):\\n        if a + b < k:\\n            continue\\n        for i in range(max(0, k - b), min(a, k) + 1):\\n            rem = i % k\\n            for j in list(rems):\\n                rems.add((j + rem) % k)\\n    for rem in rems:\\n        if rem >= a_lo and rem <= a_hi:\\n            return True\\n    return False\\n\\n\\nn, k = [int(x) for x in input().split()]\\naas = []\\nbs = []\\na_total = 0\\nb_total = 0\\nfor i in range(n):\\n    a, b = [int(x) for x in input().split()]\\n    aas.append(a)\\n    bs.append(b)\\n    a_total += a\\n    b_total += b\\nans = a_total // k + b_total // k\\nif check(k, aas, bs, a_total % k, b_total % k):\\n    print(ans + 1)\\nelse:\\n    print(ans)\\n\", \"import sys\\nreadline = sys.stdin.readline\\n\\n\\ndef merge(A, B):\\n    res = A[:]\\n    for i in range(len(A)):\\n        if A[i]:\\n            for j in range(len(B)):\\n                if B[j]:\\n                    res[(i+j)%K] = 1\\n    return res\\n\\nN, K = map(int, readline().split())\\nR = 0\\nB = 0\\n\\nflag = False\\ntable = [0]*K\\ntable[0] = 1\\nfor _ in range(N):\\n    r, b = map(int, readline().split())\\n    R += r\\n    B += b\\n    if r >= K and b >= K:\\n        flag = True\\n    elif r+b >= K:\\n        st, en = max(0, K-b), min(K, r)\\n        t2 = [0]*K\\n        for i in range(st, en+1):\\n            t2[i%K] = 1\\n        table = merge(table, t2)\\nif flag:\\n    print((R+B)//K)\\nelif (R//K + B//K == (R+B)//K):\\n    print((R+B)//K)\\nelse:\\n    pr = R%K\\n    pb = B%K\\n    ans = R//K + B//K\\n    for i in range(K):\\n        if table[i]:\\n            if (pr-i)%K + (pb-K+i)%K < K:\\n                ans += 1\\n                break\\n    print(ans)\", \"import sys\\n\\nsys.setrecursionlimit(10 ** 6)\\nint1 = lambda x: int(x) - 1\\np2D = lambda x: print(*x, sep=\\\"\\\\n\\\")\\ndef II(): return int(sys.stdin.readline())\\ndef MI(): return map(int, sys.stdin.readline().split())\\ndef LI(): return list(map(int, sys.stdin.readline().split()))\\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\\ndef SI(): return sys.stdin.readline()[:-1]\\n\\ndef main():\\n    n,k=MI()\\n    ab=LLI(n)\\n    pre=1\\n    sa=sb=0\\n    mask=(1<<k)-1\\n    for a,b in ab:\\n        sa+=a\\n        sb+=b\\n        if a+b<k:continue\\n        mn=max(k-b,0)\\n        mx=min(a,k-1)\\n        now=pre\\n        for s in range(mn,mx+1):\\n            now|=pre<<s\\n        now|=now>>k\\n        now&=mask\\n        pre=now\\n        #print(bin(pre))\\n    ans=0\\n    for r in range(k):\\n        if pre >> r & 1: ans = max(ans, (sa - r) // k + (sb + r) // k)\\n    print(ans)\\n\\nmain()\", \"#!/usr/bin/env python3\\nfrom collections import defaultdict,deque\\nfrom heapq import heappush, heappop\\nfrom bisect import bisect_left, bisect_right\\nimport sys, random, itertools, math\\nsys.setrecursionlimit(10**5)\\ninput = sys.stdin.readline\\nsqrt = math.sqrt\\ndef LI(): return list(map(int, input().split()))\\ndef LF(): return list(map(float, input().split()))\\ndef LI_(): return list([int(x)-1 for x in input().split()])\\ndef II(): return int(input())\\ndef IF(): return float(input())\\ndef S(): return input().rstrip()\\ndef LS(): return S().split()\\ndef IR(n): return [II() for _ in range(n)]\\ndef LIR(n): return [LI() for _ in range(n)]\\ndef FR(n): return [IF() for _ in range(n)]\\ndef LFR(n): return [LI() for _ in range(n)]\\ndef LIR_(n): return [LI_() for _ in range(n)]\\ndef SR(n): return [S() for _ in range(n)]\\ndef LSR(n): return [LS() for _ in range(n)]\\nmod = 1000000007\\ninf = float('INF')\\n\\n#solve\\ndef solve():\\n    n, k = LI()\\n    ab = LIR(n)\\n    dp = [False] * k\\n    dp[0] = True\\n    A = 0\\n    B = 0\\n    for a, b in ab:\\n        ndp = dp[::1]\\n        A += a\\n        B += b\\n        for i in range(k):\\n            if dp[i]:\\n                for j in range(max((k - a), 1), min(k, (b + 1))):\\n                    ndp[(i+j)%k] = True\\n        dp = ndp[::1]\\n    ans = A // k + B // k\\n    for i in range(k):\\n        if dp[i]:\\n            ans = max(ans, (A + i) // k + (B - i) // k)\\n    print(ans)\\n    return\\n\\n\\n#main\\ndef __starting_point():\\n    solve()\\n\\n__starting_point()\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 4\\n5 2\\n2 1\\n\",\n    \"1 5\\n2 3\\n\",\n    \"2 5\\n2 1\\n1 3\\n\",\n    \"1 2\\n1000000000 1\\n\",\n    \"1 5\\n999999999 1\\n\",\n    \"1 5\\n2 2\\n\",\n    \"1 5\\n5 0\\n\",\n    \"4 8\\n11 5\\n1 4\\n1 4\\n1 6\\n\",\n    \"3 9\\n8 1\\n6 3\\n6 3\\n\",\n    \"3 5\\n1 5\\n5 0\\n3 1\\n\",\n    \"3 5\\n2 2\\n1 1\\n4 1\\n\",\n    \"3 5\\n0 4\\n4 2\\n0 0\\n\",\n    \"3 5\\n1 8\\n8 0\\n0 8\\n\",\n    \"3 5\\n1 1\\n0 2\\n7 1\\n\",\n    \"3 5\\n2 3\\n0 3\\n6 1\\n\",\n    \"3 4\\n7 0\\n0 3\\n3 3\\n\",\n    \"3 6\\n5 4\\n2 1\\n3 3\\n\",\n    \"3 9\\n7 2\\n0 0\\n5 5\\n\",\n    \"3 10\\n2 8\\n2 8\\n0 1\\n\",\n    \"4 7\\n4 3\\n2 5\\n2 5\\n2 5\\n\",\n    \"5 4\\n2 3\\n0 4\\n3 0\\n3 4\\n1 1\\n\",\n    \"5 9\\n8 1\\n5 4\\n8 1\\n9 0\\n7 2\\n\",\n    \"3 7\\n3 4\\n3 4\\n6 1\\n\",\n    \"6 9\\n0 0\\n3 6\\n0 0\\n0 0\\n3 6\\n5 4\\n\",\n    \"5 7\\n4 0\\n3 1\\n1 6\\n6 4\\n2 2\\n\",\n    \"5 4\\n5 4\\n5 3\\n4 3\\n3 6\\n1 4\\n\",\n    \"10 8\\n19 13\\n9 9\\n8 3\\n4 19\\n9 11\\n18 14\\n5 8\\n20 9\\n4 10\\n8 4\\n\",\n    \"15 5\\n19 6\\n10 15\\n19 2\\n12 17\\n13 17\\n0 18\\n11 13\\n4 13\\n12 9\\n20 9\\n8 17\\n10 5\\n0 1\\n3 2\\n18 15\\n\",\n    \"20 4\\n0 1\\n0 2\\n0 0\\n1 2\\n3 2\\n1 3\\n1 3\\n2 0\\n3 1\\n0 2\\n3 3\\n2 3\\n2 0\\n3 2\\n1 2\\n1 1\\n1 1\\n1 2\\n0 0\\n1 3\\n\",\n    \"5 500\\n87 43\\n44 29\\n15 58\\n94 29\\n65 7\\n\",\n    \"1 5\\n0 0\\n\",\n    \"1 5\\n4 0\\n\",\n    \"1 5\\n5 5\\n\",\n    \"1 5\\n8 7\\n\",\n    \"2 500\\n468 32\\n748346713 0\\n\",\n    \"5 10\\n3 7\\n10 0\\n2 8\\n1 9\\n898294589 0\\n\",\n    \"3 9\\n12 9\\n9 9\\n11 9\\n\",\n    \"3 9\\n17 17\\n15 0\\n14 0\\n\",\n    \"4 8\\n8 7\\n1 10\\n0 9\\n0 13\\n\",\n    \"5 6\\n5 8\\n2 2\\n0 5\\n6 2\\n10 2\\n\",\n    \"4 5\\n1 3\\n4 6\\n4 2\\n20 0\\n\",\n    \"2 5\\n3 0\\n11 1\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"500000000\\n\",\n    \"200000000\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"9\\n\",\n    \"25\\n\",\n    \"63\\n\",\n    \"14\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"1496694\\n\",\n    \"89829462\\n\",\n    \"6\\n\",\n    \"7\\n\",\n    \"6\\n\",\n    \"7\\n\",\n    \"8\\n\",\n    \"3\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1348/E",
  "starter_code": ""
}