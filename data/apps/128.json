{
  "task_id": "APPS/128",
  "problem_id": 128,
  "prompt": "It is a balmy spring afternoon, and Farmer John's n cows are ruminating about link-cut cacti in their stalls. The cows, labeled 1 through n, are arranged so that the i-th cow occupies the i-th stall from the left. However, Elsie, after realizing that she will forever live in the shadows beyond Bessie's limelight, has formed the Mischievous Mess Makers and is plotting to disrupt this beautiful pastoral rhythm. While Farmer John takes his k minute long nap, Elsie and the Mess Makers plan to repeatedly choose two distinct stalls and swap the cows occupying those stalls, making no more than one swap each minute.\n\nBeing the meticulous pranksters that they are, the Mischievous Mess Makers would like to know the maximum messiness attainable in the k minutes that they have. We denote as p_{i} the label of the cow in the i-th stall. The messiness of an arrangement of cows is defined as the number of pairs (i, j) such that i < j and p_{i} > p_{j}.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and k (1 \u2264 n, k \u2264 100 000)\u00a0\u2014 the number of cows and the length of Farmer John's nap, respectively.\n\n\n-----Output-----\n\nOutput a single integer, the maximum messiness that the Mischievous Mess Makers can achieve by performing no more than k swaps. \n\n\n-----Examples-----\nInput\n5 2\n\nOutput\n10\n\nInput\n1 10\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample, the Mischievous Mess Makers can swap the cows in the stalls 1 and 5 during the first minute, then the cows in stalls 2 and 4 during the second minute. This reverses the arrangement of cows, giving us a total messiness of 10.\n\nIn the second sample, there is only one cow, so the maximum possible messiness is 0.",
  "solutions": "[\"# You lost the game.\\nn,k = map(int, input().split())\\nr = 0\\nfor i in range(min(k,n//2)):\\n    r += (n-2*i-1) + (n-2*i-2)\\nprint(r)\", \"def main():\\n    n, k = map(int, input().split())\\n    if k > (n // 2):\\n        k = n // 2\\n    ans = 0\\n    for i in range(k):\\n        ans += 2 * (n - 2 * i - 2) + 1\\n    print(ans)\\n    \\nmain()\", \"n, k = [int(i) for i in input().split()]\\nans = 0\\nfor i in range(min(n // 2, k)):\\n    ans += (n - i * 2 - 2) * 2\\n    ans += 1\\nprint(ans)\", \"#!/usr/bin/env python3\\n\\nn, k = list(map(int, input().split()))\\n\\nk = min(k, n // 2)\\nprint(k * (n - k) + (n - 2 * k) * k + k * (k - 1))\\n\", \"n, k = list(map(int, input().split()))\\nk = min(k, n // 2)\\nprint((2 * n  - 2 * k - 1) * k)\\n\", \"n, k = list(map(int, input().split()))\\nif (k > n//2):\\n    k = n // 2\\nif n == 1 or k == 0:\\n    print(0)\\nelse:\\n    print(k * (2 * n - 2 * k - 1))\\n\", \"n,k=(int(z) for z in input().split())\\nif 2*k>=n-1:\\n\\tprint(n*(n-1)//2)\\nelse:\\n\\tprint(n*(n-1)//2-(n-2*k)*(n-2*k-1)//2)\", \"import sys\\nsys.setrecursionlimit(10000000)\\nfrom math import pi\\nn, k = map(int, input().split())\\nans = 0\\nfor i  in range(min(n//2, k)):\\n    ans += (n - 2*i-1) + (n-2*i-2)\\nprint(ans)\", \"#[int(i) for i in input().split()]\\nn, k = [int(i) for i in input().split()]\\ni = 0\\nres = 0\\nfor j in range(min(n // 2, k)):\\n    res += n - j - 1 - j\\n    res += n - 2 - j - j\\nprint(res)\\n\", \"3\\n\\ndef readln(): return list(map(int, input().split()))\\n\\ndef main():\\n    n, k = readln()\\n    if k >= n // 2:\\n        print((n - 1) * n // 2)\\n    else:\\n        k = n - 2 * k\\n        print((n - 1) * n // 2 - k * (k - 1) // 2)\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n,k = map(int, input().split())\\nper = n*(n-1)//2\\nif k >= (n//2):\\n    print(per)\\nelse:\\n    print(per - ((n-k*2-1) * (n-k*2)//2))\", \"s = input().split(' ')\\nn = int(s[0])\\nk = int(s[1])\\n\\nif(k > n / 2):\\n    print(n * (n - 1) // 2)\\nelse:\\n    print(2 * k * n - k * (2 * k + 1))\", \"n, k = list(map(int, input().split()))\\nc = [i for i in range(1, n+1)]\\nret = 0\\nm = n\\nfor i in range(min(k, n // 2)):\\n    ret += m - 1 + m - 2\\n    m -= 2\\nprint(ret)\\n\", \"n, k = map(int, input().split())\\n\\nresult = 0\\ncurVal = n\\nfor i in range(k):\\n    if curVal <= 1:\\n        break\\n    result += 2 * curVal - 3\\n    curVal -= 2\\n\\nprint(result)\", \"n, k = list(map(int, input().split()))\\ncnt = 0\\nwhile k > 0 and n >= 2:\\n    cnt += (n - 1) * 2 - 1\\n    n -= 2\\n    k -= 1\\nprint(cnt)\", \"n, k = list(map(int, input().split()))\\n\\nans = 0\\n\\ncur = 1\\nleft = n\\nwhile k > 0 and cur <= n // 2:\\n    ans += left + left - 3\\n    left -= 2\\n    cur += 1\\n    k -= 1\\n\\nprint(ans)\\n\", \"n, k = [int(s) for s in input().split()]\\nk = min(n // 2, k)\\n\\n\\nprint((2 * n - 2 * k - 1) * k)\\n\", \"n, k = list(map(int, input().split()))\\n\\na = [0] * (n+1)\\nfor i in range(1,n+1):\\n    a[i] = i\\n\\nm = min(k, n >> 1)\\nfor i in range(1,m+1):\\n    a[i], a[n-i+1] = a[n-i+1], a[i]\\n\\nA = (n * (n - 1)) >> 1\\nl = n - m - m\\nl = (l * (l - 1)) >> 1\\nprint(A - l)\\n\", \"import math\\ndata = input()\\nn, k = data.split(' ')\\n\\nn = int(n)\\nk = int(k)\\nm = n\\nchaos = 0\\nfor i in range(k):\\n    if i < math.floor(n/2):\\n        chaos += 2*m - 3\\n        m -= 2\\n    else:\\n        break\\nprint(chaos)\", \"n, k = map(int, input().split())\\nif n == 1:\\n    print(0)\\nelse:\\n    if k >= n // 2:\\n        print(n*(n-1)//2)\\n    else:\\n        s = 0\\n        for i in range(1, k + 1):\\n            s += 1 + 2 * (n - 2*i)\\n        print(s)\", \"#!/usr/bin/env python3\\n\\nn, k = [int(x) for x in input().split()]\\n\\n# 1 2 3 4 5\\n# 5 2 3 4 1\\n\\nif n == 1:\\n    print(0)\\nelse:\\n    result = 0\\n    l = n\\n    for i in range(0, min(n // 2, k)):\\n        result += (l - 1) + (l - 2)\\n        l -= 2\\n    print(result)\\n\", \"n,k = (int(i) for i in input().split())\\nans = 0\\nd = n\\nfor i in range(min(k,n//2)):\\n    ans+=(d*2-3)\\n    d-=2\\nprint(ans)\", \"number, time = map(int, input().split())\\nif time >= number // 2:\\n    ans = (number - 1) * number // 2\\nelse:\\n    ans = (number - 1 + number - time) * time // 2\\n    count = time\\n    for i in range(time + 1, number):\\n        ans += count\\n        if i >= number - time:\\n            count -= 1\\nprint(ans)\", \"n, k = list(map(int, input().split()))\\nk = min(k, n // 2)\\nans = 0\\nfor i in range(1, k + 1):\\n    ans += (n - i)\\nt = ans\\n\\nans += ((n - 2 * k) * k)\\n\\nprint(ans + (k * (k - 1) // 2))\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"5 2\\n\",\n    \"1 10\\n\",\n    \"100000 2\\n\",\n    \"1 1\\n\",\n    \"8 3\\n\",\n    \"7 1\\n\",\n    \"100000 40000\\n\",\n    \"1 1000\\n\",\n    \"100 45\\n\",\n    \"9 2\\n\",\n    \"456 78\\n\",\n    \"100000 50000\\n\",\n    \"100000 50001\\n\",\n    \"100000 50002\\n\",\n    \"100000 50003\\n\",\n    \"100000 49998\\n\",\n    \"100000 49997\\n\",\n    \"99999 49998\\n\",\n    \"99999 49997\\n\",\n    \"99999 49996\\n\",\n    \"99999 50000\\n\",\n    \"99999 50001\\n\",\n    \"99999 50002\\n\",\n    \"30062 9\\n\",\n    \"13486 3\\n\",\n    \"29614 7\\n\",\n    \"13038 8\\n\",\n    \"96462 6\\n\",\n    \"22599 93799\\n\",\n    \"421 36817\\n\",\n    \"72859 65869\\n\",\n    \"37916 5241\\n\",\n    \"47066 12852\\n\",\n    \"84032 21951\\n\",\n    \"70454 75240\\n\",\n    \"86946 63967\\n\",\n    \"71128 11076\\n\",\n    \"46111 64940\\n\",\n    \"46111 64940\\n\",\n    \"56500 84184\\n\",\n    \"60108 83701\\n\",\n    \"1 2\\n\",\n    \"1 3\\n\",\n    \"1 4\\n\",\n    \"1 5\\n\",\n    \"1 6\\n\",\n    \"2 1\\n\",\n    \"2 2\\n\",\n    \"2 3\\n\",\n    \"2 4\\n\",\n    \"2 5\\n\",\n    \"3 1\\n\",\n    \"3 2\\n\",\n    \"3 3\\n\",\n    \"3 4\\n\",\n    \"3 5\\n\",\n    \"4 1\\n\",\n    \"4 2\\n\",\n    \"4 3\\n\",\n    \"4 4\\n\",\n    \"4 5\\n\",\n    \"5 1\\n\",\n    \"5 3\\n\",\n    \"5 4\\n\",\n    \"5 5\\n\",\n    \"6 1\\n\",\n    \"6 2\\n\",\n    \"6 3\\n\",\n    \"7 2\\n\",\n    \"7 3\\n\",\n    \"7 4\\n\",\n    \"10 2\\n\",\n    \"60982 2\\n\",\n    \"23426 23\\n\",\n    \"444 3\\n\",\n    \"18187 433\\n\",\n    \"6895 3544\\n\",\n    \"56204 22352\\n\",\n    \"41977 5207\\n\",\n    \"78147 2321\\n\",\n    \"99742 62198\\n\",\n    \"72099 38339\\n\",\n    \"82532 4838\\n\",\n    \"79410 33144\\n\",\n    \"11021 3389\\n\",\n    \"66900 7572\\n\",\n    \"99999 49999\\n\",\n    \"100000 49999\\n\",\n    \"100000 100000\\n\",\n    \"100000 1\\n\",\n    \"4 100\\n\",\n    \"100000 1234\\n\"\n  ],\n  \"outputs\": [\n    \"10\\n\",\n    \"0\\n\",\n    \"399990\\n\",\n    \"0\\n\",\n    \"27\\n\",\n    \"11\\n\",\n    \"4799960000\\n\",\n    \"0\\n\",\n    \"4905\\n\",\n    \"26\\n\",\n    \"58890\\n\",\n    \"4999950000\\n\",\n    \"4999950000\\n\",\n    \"4999950000\\n\",\n    \"4999950000\\n\",\n    \"4999949994\\n\",\n    \"4999949985\\n\",\n    \"4999849998\\n\",\n    \"4999849991\\n\",\n    \"4999849980\\n\",\n    \"4999850001\\n\",\n    \"4999850001\\n\",\n    \"4999850001\\n\",\n    \"540945\\n\",\n    \"80895\\n\",\n    \"414491\\n\",\n    \"208472\\n\",\n    \"1157466\\n\",\n    \"255346101\\n\",\n    \"88410\\n\",\n    \"2654180511\\n\",\n    \"342494109\\n\",\n    \"879423804\\n\",\n    \"2725458111\\n\",\n    \"2481847831\\n\",\n    \"3779759985\\n\",\n    \"1330260828\\n\",\n    \"1063089105\\n\",\n    \"1063089105\\n\",\n    \"1596096750\\n\",\n    \"1806455778\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"6\\n\",\n    \"6\\n\",\n    \"6\\n\",\n    \"7\\n\",\n    \"10\\n\",\n    \"10\\n\",\n    \"10\\n\",\n    \"9\\n\",\n    \"14\\n\",\n    \"15\\n\",\n    \"18\\n\",\n    \"21\\n\",\n    \"21\\n\",\n    \"30\\n\",\n    \"243918\\n\",\n    \"1076515\\n\",\n    \"2643\\n\",\n    \"15374531\\n\",\n    \"23767065\\n\",\n    \"1513297456\\n\",\n    \"382917573\\n\",\n    \"351981971\\n\",\n    \"4974183411\\n\",\n    \"2599096851\\n\",\n    \"751762306\\n\",\n    \"3066847464\\n\",\n    \"51726307\\n\",\n    \"898455660\\n\",\n    \"4999850001\\n\",\n    \"4999949999\\n\",\n    \"4999950000\\n\",\n    \"199997\\n\",\n    \"6\\n\",\n    \"243753254\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/645/B",
  "starter_code": ""
}