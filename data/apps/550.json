{
  "task_id": "APPS/550",
  "problem_id": 550,
  "prompt": "When registering in a social network, users are allowed to create their own convenient login to make it easier to share contacts, print it on business cards, etc.\n\nLogin is an arbitrary sequence of lower and uppercase latin letters, digits and underline symbols (\u00ab_\u00bb). However, in order to decrease the number of frauds and user-inattention related issues, it is prohibited to register a login if it is similar with an already existing login. More precisely, two logins s and t are considered similar if we can transform s to t via a sequence of operations of the following types:   transform lowercase letters to uppercase and vice versa;  change letter \u00abO\u00bb (uppercase latin letter) to digit \u00ab0\u00bb and vice versa;  change digit \u00ab1\u00bb (one) to any letter among \u00abl\u00bb (lowercase latin \u00abL\u00bb), \u00abI\u00bb (uppercase latin \u00abi\u00bb) and vice versa, or change one of these letters to other. \n\nFor example, logins \u00abCodeforces\u00bb and \u00abcodef0rces\u00bb as well as \u00abOO0OOO00O0OOO0O00OOO0OO_lol\u00bb and \u00abOO0OOO0O00OOO0O00OO0OOO_1oI\u00bb are considered similar whereas \u00abCodeforces\u00bb and \u00abCode_forces\u00bb are not.\n\nYou're given a list of existing logins with no two similar amonst and a newly created user login. Check whether this new login is similar with any of the existing ones.\n\n\n-----Input-----\n\nThe first line contains a non-empty string s consisting of lower and uppercase latin letters, digits and underline symbols (\u00ab_\u00bb) with length not exceeding 50 \u00a0\u2014 the login itself.\n\nThe second line contains a single integer n (1 \u2264 n \u2264 1 000)\u00a0\u2014 the number of existing logins.\n\nThe next n lines describe the existing logins, following the same constraints as the user login (refer to the first line of the input). It's guaranteed that no two existing logins are similar.\n\n\n-----Output-----\n\nPrint \u00abYes\u00bb (without quotes), if user can register via this login, i.e. none of the existing logins is similar with it.\n\nOtherwise print \u00abNo\u00bb (without quotes).\n\n\n-----Examples-----\nInput\n1_wat\n2\n2_wat\nwat_1\n\nOutput\nYes\n\nInput\n000\n3\n00\nooA\noOo\n\nOutput\nNo\n\nInput\n_i_\n3\n__i_\n_1_\nI\n\nOutput\nNo\n\nInput\nLa0\n3\n2a0\nLa1\n1a0\n\nOutput\nNo\n\nInput\nabc\n1\naBc\n\nOutput\nNo\n\nInput\n0Lil\n2\nLIL0\n0Ril\n\nOutput\nYes\n\n\n\n-----Note-----\n\nIn the second sample case the user wants to create a login consisting of three zeros. It's impossible due to collision with the third among the existing.\n\nIn the third sample case the new login is similar with the second one.",
  "solutions": "[\"import sys\\n\\n\\ndef normalize(s):\\n    s = s.lower()\\n    s = s.replace(\\\"o\\\", \\\"0\\\")\\n    s = s.replace(\\\"l\\\", \\\"1\\\")\\n    s = s.replace(\\\"i\\\", \\\"1\\\")\\n    return s\\n\\n\\nquery = normalize(next(sys.stdin).strip())\\nn = int(next(sys.stdin).strip())\\n\\nfor line in sys.stdin:\\n    line = normalize(line.strip())\\n    if query == line:\\n        print(\\\"No\\\")\\n        return\\n\\nprint(\\\"Yes\\\")\\n\", \"s = input()\\n\\nn = int(input())\\nfor i in range(n):\\n    t = input()\\n    if len(s) != len(t):\\n        continue\\n    for j in range(len(t)):\\n        if t[j].lower() == s[j].lower():\\n            continue\\n        if t[j] in '0Oo' and s[j] in '0Oo':\\n            continue\\n        if s[j] in '1lILi' and t[j] in '1lILi':\\n            continue\\n        # print(s[j], t[j], s, t, i)\\n        break\\n    else:\\n        print('No')\\n        return\\nprint('Yes')\", \"needle = input().strip().lower()\\nn = int(input())\\ncurrent = []\\n\\nfor i in range(n):\\n\\ttemp = input().strip().lower()\\n\\tcurrent.append(temp)\\n\\nimport sys\\n\\ndef similar(s1, s2):\\n\\tif(len(s1) != len(s2)):return False\\n\\n\\tl = set(['1', 'l', 'L', 'i', 'I'])\\n\\to = set(['o', 'O', '0'])\\n\\n\\tfor i in range(len(s1)):\\n\\t\\tif(s1[i] == s2[i]):continue\\n\\t\\tif(s1[i] in l and s2[i] in l):continue\\n\\t\\tif(s1[i] in o and s2[i] in o):continue\\n\\t\\treturn False\\n\\n\\treturn True\\n\\n\\nfor item in current:\\n\\tif(similar(needle, item)):\\n\\t\\tprint(\\\"No\\\")\\n\\t\\treturn\\n\\nprint(\\\"Yes\\\")\", \"def makeUnique(s):\\n\\treturn s.lower().replace('i', '1').replace('o', '0').replace('l', '1')\\n\\nlogin = makeUnique(input())\\nfor i in range(int(input())):\\n\\tif makeUnique(input()) == login:\\n\\t\\tprint('No')\\n\\t\\treturn\\nprint('Yes')\", \"s=input()\\ndef f(a):\\n    a=a.lower()\\n    a=a.replace('o','0')\\n    a=a.replace('i','1')\\n    a=a.replace('l','1')\\n    return a\\ns=f(s)\\nq=int(input())\\nb=True\\nfor i in range(0,q):\\n    d=input()\\n    if s==f(d):\\n        b=False\\nprint('Yes' if b else 'No')\", \"#!/usr/bin/env python3\\n\\n\\ndef are_same(a, b):\\n    a = a.lower()\\n    b = b.lower()\\n    if a == b:\\n        return True\\n    if a in {'o', '0'}:\\n        return b in {'o', '0'}\\n    if a in {'1', 'l', 'i'}:\\n        return b in {'1', 'l', 'i'}\\n\\n\\ndef main():\\n    s = input()\\n    n = int(input())\\n    for _ in range(n):\\n        s1 = input()\\n\\n        if len(s1) == len(s) and all(are_same(x1, x2) for x1, x2 in zip(s, s1)):\\n            print('No')\\n            return\\n    print('Yes')\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"import sys\\na = input()\\nn = int(input())\\ns = ''\\nfor i in a:\\n    if (i == 'O') or (i == 'o'):\\n        s = s + '0'\\n    else:\\n        if (i == 'l') or (i == 'I') or (i == 'L') or (i == 'i'):\\n            s = s + '1'\\n        else:\\n            s = s + i.lower()\\nfor j in range(n):\\n    a = input()\\n    str = ''\\n    for i in a:\\n        if (i == 'O') or (i == 'o'):\\n            str = str + '0'\\n        else:\\n            if (i == 'l') or (i == 'I') or (i == 'L') or (i == 'i'):\\n                str = str + '1'\\n            else:\\n                str = str + i.lower()\\n    if s == str:\\n        print('No')\\n        return\\nprint('Yes')\\n\", \"def normalize_login(login):\\n    return login \\\\\\n        .lower() \\\\\\n        .replace(\\\"o\\\", \\\"0\\\") \\\\\\n        .replace(\\\"i\\\", \\\"1\\\") \\\\\\n        .replace(\\\"l\\\", \\\"1\\\")\\n\\n\\nnew_login = normalize_login(input())\\nn = int(input())\\nlogins = []\\nfor i in range(0, n):\\n    login = normalize_login(input())\\n    logins.append(login)\\n\\nprint(\\\"No\\\" if new_login in logins else \\\"Yes\\\")\\n\", \"def f(s,t):\\n    s=s.lower()\\n    t=t.lower()\\n    if len(s)!=len(t):\\n        return True\\n    for i in range(len(s)):\\n        if s[i]!=t[i]:\\n            w=[s[i],t[i]]\\n            w.sort()\\n            if w!=sorted(['o','0']) and w!=sorted(['i','l']) and w!=sorted(['i','1']) and w!=sorted(['l','1']):\\n                return True\\n    return False\\ns=input()\\nn=int(input())\\nq=True\\nfor i in range(n):\\n    t=input()\\n    q=q and f(s,t)\\nif q:\\n    print('Yes')\\nelse:\\n    print('No')\\n\", \"s = input()\\nn = int(input())\\nf = True\\n\\ndef is_sim(s1, s2):\\n    if len(s1) != len(s2):\\n        return False\\n    for i in range(len(s1)):\\n        if (s1[i].lower() == s2[i].lower()) or s1[i] + s2[i] in ['O0', '0O', 'o0', '0o'] or (s1[i] in ['1', 'l', 'I', 'i', 'L'] and s2[i] in ['1', 'l', 'I', 'i', 'L']):\\n            pass\\n        else:\\n            return False\\n    return True\\n            \\nfor i in range(n):\\n    t = input()\\n    if is_sim(s, t):\\n        f = False\\nprint('Yes' if f else 'No')\", \"import sys\\n\\n\\nequiv = {\\n    'o': 1, 'O': 1, '0': 1,\\n    '1': 2, 'l': 2, 'L': 2, 'i': 2, 'I': 2\\n}\\n\\n\\ndef compare(c1, c2):\\n    if ord(c1) > ord(c2):\\n        c1, c2 = c2, c1\\n\\n    e1, e2 = equiv.get(c1, 0), equiv.get(c2, 0)\\n    if e1 and e2 and e1 == e2:\\n        return True\\n\\n    if 'A' <= c1 <= 'Z' and chr(ord(c1) - ord('A') + ord('a')) == c2:\\n        return True\\n    \\n    return c1 == c2\\n\\n\\ndef cmps(s1, s2):\\n    if len(s1) != len(s2):\\n        return False\\n\\n    for c1, c2 in zip(s1, s2):\\n        if not compare(c1, c2):\\n            return False\\n\\n    return True\\n\\n\\ns = input()\\nn = int(input())\\n\\nfor _ in range(n):\\n    s_i = input()\\n    if cmps(s_i, s):\\n        print(\\\"No\\\")\\n        return\\n\\nprint(\\\"Yes\\\")\\n\", \"def read():\\n    return list(map(int,input().split()))\\ns=input()\\nfor i in range(len(s)):\\n    if s[i]=='0':\\n        s=s[:i]+'o'+s[i+1:]\\n    elif s[i]=='1' or s[i]=='i' or s[i]=='I':\\n        s=s[:i]+'l'+s[i+1:]\\na=[]\\nn=int(input())\\nfor i in range(n):\\n    c=input()\\n    for i in range(len(c)):\\n        if c[i]=='0':\\n            c=c[:i]+'o'+c[i+1:]\\n        elif c[i]=='1' or c[i]=='i' or c[i]=='I':\\n            c=c[:i]+'l'+c[i+1:]\\n    if c.capitalize()==s.capitalize():\\n        print('No')\\n        return\\nprint('Yes')\\n\\n    \\n        \\n\", \"log = input()\\nlog = log.lower()\\nlog = log.replace('0', 'o')\\nlog = log.replace('i','1' )\\nlog = log.replace('l','1' )\\na = int(input())\\nlogs = set()\\nfor i in range(a):\\n    s = input()\\n    s = s.lower()\\n    s = s.replace('0', 'o')\\n    s = s.replace('i','1' )\\n    s = s.replace('l','1' )\\n    logs.add(s)\\nif log in logs: print('No')\\nelse: print('Yes')\\n\", \"ss = input()\\nst = \\\"\\\"\\nfor j in range(len(ss)):\\n    c = ss[j]\\n    if 'A' <= c <= 'Z':\\n        c = chr(ord(c) + ord('a') - ord('A'))\\n    if c == 'o':\\n        c = '0'\\n    if c == 'l' or c == 'i':\\n        c = '1'\\n    st += c\\ns = st\\nn = int(input())\\nfor i in range(n):\\n    ss = input()\\n    st = \\\"\\\"\\n    for j in range(len(ss)):\\n        c = ss[j]\\n        if 'A' <= c <= 'Z':\\n            c = chr(ord(c) + ord('a') - ord('A'))\\n        if c == 'o':\\n            c = '0'\\n        if c == 'l' or c == 'i':\\n            c = '1'\\n        st += c\\n    if s == st:\\n        print(\\\"No\\\")\\n        return\\nprint(\\\"Yes\\\")\\n\", \"def unify_login(login):\\n    login = login.lower()\\n    login = login.replace('0', 'o')\\n    login = login.replace('l', '1')\\n    login = login.replace('i', '1')\\n    return login\\n\\n\\ns = unify_login(input())\\nn = int(input())\\n\\nlogins = set()\\n\\nfor i in range(n):\\n    logins.add(unify_login(input()))\\n\\nif s in logins:\\n    print('No')\\nelse:\\n    print('Yes')\\n\", \"s = input()\\nu = 0\\nfor i in range(int(input())):\\n    l = input()\\n    u = 0\\n    if len(l) == len(s):\\n        for j in range(len(l)):\\n            if l[j].lower() == s[j].lower() or (l[j] == '0' and s[j].lower() == 'o') or (s[j] == '0' and l[j].lower() == 'o') or (l[j] == '1' and (s[j].lower() == 'l' or s[j].upper() == 'I')) or (l[j].lower() == 'l' and (s[j] == '1' or s[j].upper() == 'I')) or (l[j].upper() == 'I' and (s[j].lower() == 'l' or s[j] == '1')):\\n                u += 1\\n            else:\\n                break\\n    if u == len(s):\\n        break\\nif u == len(s):\\n    print('No')\\nelse:\\n    print('Yes')\", \"def change(s):\\n    res = \\\"\\\"\\n    for i in range(len(s)):\\n        if s[i] == 'O' or s[i] == 'o':\\n            res += '0'\\n            continue\\n        if s[i] == 'l' or s[i] == 'L' or s[i] == 'i' or s[i] == 'I':\\n            res += '1'\\n            continue\\n        if s[i].isalpha() and s[i].isupper():\\n            res += s[i].lower()\\n            continue\\n        res += s[i]\\n    return res\\n\\n\\na = change(input())\\nn = int(input())\\nfor i in range(n):\\n    b = change(input())\\n    if a == b:\\n        print(\\\"No\\\")\\n        return\\nprint(\\\"Yes\\\")\\n\", \"s=str(input())\\nn=int(input())\\nfound = False\\nfor i in range(n):\\n    a = str(input())\\n    if len(a) == len(s):\\n        similar = True\\n        for j in range(len(a)):\\n            ac = a[j].capitalize()\\n            sc = s[j].capitalize()\\n            if ac != sc:\\n                if ac in ('0', 'O') and sc in ('0', 'O') or ac in ('1', 'I', 'L') and sc in ('1', 'I', 'L'):\\n                    similar = True\\n                else:\\n                    similar = False\\n                    break\\n        if similar:\\n            found = True\\nif found:\\n    print('No')\\nelse:\\n    print('Yes')\\n\", \"def f(s):\\n    ans = ''\\n    for i in s:\\n        if i == 'l' or i == 'L' or i == 'i' or i == 'I':\\n            ans += '1'\\n        elif 'a' <= i <= 'z':\\n            ans += i.upper()\\n        elif i == '0':\\n            ans += 'O'\\n        else:\\n            ans += i\\n    return ans\\n\\n\\ns = input()\\ns = f(s)\\nn = int(input())\\na = []\\nfor i in range(n):\\n    ss = input()\\n    a.append(f(ss))\\nif s in a:\\n    print('No')\\nelse:\\n    print('Yes')\\n#print(a)\\n\", \"def change(s):\\n    s = s.lower()\\n    s = s.replace('o', '0')\\n    s = s.replace('l', '1')\\n    s = s.replace('i', '1')\\n    return s\\n\\nlog = change(input())\\n\\nnum = int(input())\\nlogins = []\\nfor i in range(0, num):\\n    logins.append(change(input()))\\n\\nif log in logins:\\n    print('No')\\nelse:\\n    print('Yes')\\n\", \"l = input()\\nnew_login1 = l.upper().replace('O', '0').replace('l', '1').replace('I', '1')\\nnew_login2 = l.replace('O', '0').replace('l', '1').replace('I', '1').lower()\\nnew_login3 = l.lower().replace('O', '0').replace('l', '1').replace('I', '1')\\nlogins = []\\nn = int(input())\\nfor i in range(n):\\n    last = input()\\n    logins.append(last.upper().replace('O', '0').replace('l', '1').replace('I', '1'))\\n    logins.append(last.replace('O', '0').replace('l', '1').replace('I', '1').lower())\\n    logins.append(last.lower().replace('O', '0').replace('l', '1').replace('I', '1'))\\nprint('No' if new_login1 in logins or new_login2 in logins or new_login3 in logins else 'Yes')\\n\", \"def make_hash(string):\\n    return string.lower().replace('o', '0').replace('l', '1').replace('i', '1')\\n    \\ns = make_hash(input())\\nn = int(input())\\ne = []\\ngood = True\\nfor _ in range(n):\\n    t = input()\\n    if make_hash(t) == s:\\n        good = False\\nprint(\\\"Yes\\\" if good else \\\"No\\\")\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"1_wat\\n2\\n2_wat\\nwat_1\\n\",\n    \"000\\n3\\n00\\nooA\\noOo\\n\",\n    \"_i_\\n3\\n__i_\\n_1_\\nI\\n\",\n    \"La0\\n3\\n2a0\\nLa1\\n1a0\\n\",\n    \"abc\\n1\\naBc\\n\",\n    \"0Lil\\n2\\nLIL0\\n0Ril\\n\",\n    \"iloO\\n3\\niIl0\\noIl0\\nIooO\\n\",\n    \"L1il0o1L1\\n5\\niLLoLL\\noOI1Io10il\\nIoLLoO\\nO01ilOoI\\nI10l0o\\n\",\n    \"ELioO1lOoOIOiLoooi1iolul1O\\n7\\nOoEIuOIl1ui1010uiooOoi0Oio001L0EoEolO0\\nOLIoOEuoE11u1u1iLOI0oO\\nuEOuO0uIOOlO01OlEI0E1Oo0IO1LI0uE0LILO0\\nEOo0Il11iIOOOIiuOiIiiLOLEOOII001EE\\niOoO0LOulioE0OLIIIulli01OoiuOOOoOlEiI0EiiElIIu0\\nlE1LOE1Oil\\n1u0EOliIiIOl1u110il0l1O0u\\n\",\n    \"0blo7X\\n20\\n1oobb6\\nXIXIO2X\\n2iYI2\\n607XXol\\n2I6io22\\nOl10I\\nbXX0Lo\\nolOOb7X\\n07LlXL\\nlXY17\\n12iIX2\\n7lL70\\nbOo11\\n17Y6b62\\n0O6L7\\n1lX2L\\n2iYl6lI\\n7bXIi1o\\niLIY2\\n0OIo1X\\n\",\n    \"lkUL\\n25\\nIIfL\\nokl\\nfoo\\ni0U\\noko\\niIoU\\nUUv\\nvli\\nv0Uk\\n0Of\\niill\\n1vkl\\nUIf\\nUfOO\\nlvLO\\nUUo0\\nIOf1\\nlovL\\nIkk\\noIv\\nLvfU\\n0UI\\nkol\\n1OO0\\n1OOi\\n\",\n    \"L1lo\\n3\\nOOo1\\nL1lo\\n0lOl\\n\",\n    \"LIoooiLO\\n5\\nLIoooiLO\\nl0o01I00\\n0OOl0lLO01\\nil10i0\\noiloi\\n\",\n    \"1i1lQI\\n7\\nuLg1uLLigIiOLoggu\\nLLLgIuQIQIIloiQuIIoIO0l0o000\\n0u1LQu11oIuooIl0OooLg0i0IQu1O1lloI1\\nQuQgIQi0LOIliLOuuuioLQou1l\\nlLIO00QLi01LogOliOIggII1\\no0Ll1uIOQl10IL0IILQ\\n1i1lQI\\n\",\n    \"oIzz1\\n20\\n1TTl0O\\nloF0LT\\n1lLzo\\noi0Ov\\nFlIF1zT\\nzoITzx\\n0TIFlT\\nl1vllil\\nOviix1F\\nLFvI1lL\\nLIl0loz\\nixz1v\\n1i1vFi\\nTIFTol\\noIzz1\\nIvTl0o\\nxv1U0O\\niiiioF\\n1oiLUlO\\nxToxv1\\n\",\n    \"00L0\\n25\\n0il\\nIlkZ\\nL0I\\n00L0\\nBd0\\nZLd\\n0d1k\\nddk\\nIdl\\nkBd\\nkBOL\\nZ1lI\\nkBL\\nLOko\\noZ0i\\nZ1lO\\nLiOk\\niBld\\nLO0d\\ndIo\\nZ10\\n1k1i\\n0o0L\\nIoBd\\ni0B0\\n\",\n    \"Z\\n1\\nz\\n\",\n    \"0\\n1\\no\\n\",\n    \"0\\n1\\nO\\n\",\n    \"o\\n1\\n0\\n\",\n    \"o\\n1\\nO\\n\",\n    \"o\\n1\\no\\n\",\n    \"O\\n1\\no\\n\",\n    \"O\\n1\\n0\\n\",\n    \"1\\n1\\nl\\n\",\n    \"1\\n1\\nL\\n\",\n    \"1\\n1\\ni\\n\",\n    \"1\\n1\\nI\\n\",\n    \"1\\n1\\no\\n\",\n    \"i\\n1\\n1\\n\",\n    \"i\\n1\\nL\\n\",\n    \"i\\n1\\nl\\n\",\n    \"I\\n1\\nL\\n\",\n    \"I\\n1\\nl\\n\",\n    \"I\\n1\\n1\\n\",\n    \"l\\n1\\n1\\n\",\n    \"l\\n1\\nL\\n\",\n    \"l\\n1\\ni\\n\",\n    \"l\\n1\\nI\\n\",\n    \"L\\n1\\nl\\n\",\n    \"L\\n1\\n1\\n\",\n    \"L\\n1\\ni\\n\",\n    \"L\\n1\\nI\\n\"\n  ],\n  \"outputs\": [\n    \"Yes\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/928/A",
  "starter_code": ""
}