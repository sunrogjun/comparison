{
  "task_id": "APPS/572",
  "problem_id": 572,
  "prompt": "Limak is a little polar bear. He doesn't have many toys and thus he often plays with polynomials.\n\nHe considers a polynomial valid if its degree is n and its coefficients are integers not exceeding k by the absolute value. More formally:\n\nLet a_0, a_1, ..., a_{n} denote the coefficients, so $P(x) = \\sum_{i = 0}^{n} a_{i} \\cdot x^{i}$. Then, a polynomial P(x) is valid if all the following conditions are satisfied:  a_{i} is integer for every i;  |a_{i}| \u2264 k for every i;  a_{n} \u2260 0. \n\nLimak has recently got a valid polynomial P with coefficients a_0, a_1, a_2, ..., a_{n}. He noticed that P(2) \u2260 0 and he wants to change it. He is going to change one coefficient to get a valid polynomial Q of degree n that Q(2) = 0. Count the number of ways to do so. You should count two ways as a distinct if coefficients of target polynoms differ.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 200 000, 1 \u2264 k \u2264 10^9)\u00a0\u2014 the degree of the polynomial and the limit for absolute values of coefficients.\n\nThe second line contains n + 1 integers a_0, a_1, ..., a_{n} (|a_{i}| \u2264 k, a_{n} \u2260 0)\u00a0\u2014 describing a valid polynomial $P(x) = \\sum_{i = 0}^{n} a_{i} \\cdot x^{i}$. It's guaranteed that P(2) \u2260 0.\n\n\n-----Output-----\n\nPrint the number of ways to change one coefficient to get a valid polynomial Q that Q(2) = 0.\n\n\n-----Examples-----\nInput\n3 1000000000\n10 -9 -3 5\n\nOutput\n3\n\nInput\n3 12\n10 -9 -3 5\n\nOutput\n2\n\nInput\n2 20\n14 -7 19\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample, we are given a polynomial P(x) = 10 - 9x - 3x^2 + 5x^3.\n\nLimak can change one coefficient in three ways:  He can set a_0 =  - 10. Then he would get Q(x) =  - 10 - 9x - 3x^2 + 5x^3 and indeed Q(2) =  - 10 - 18 - 12 + 40 = 0.  Or he can set a_2 =  - 8. Then Q(x) = 10 - 9x - 8x^2 + 5x^3 and indeed Q(2) = 10 - 18 - 32 + 40 = 0.  Or he can set a_1 =  - 19. Then Q(x) = 10 - 19x - 3x^2 + 5x^3 and indeed Q(2) = 10 - 38 - 12 + 40 = 0. \n\nIn the second sample, we are given the same polynomial. This time though, k is equal to 12 instead of 10^9. Two first of ways listed above are still valid but in the third way we would get |a_1| > k what is not allowed. Thus, the answer is 2 this time.",
  "solutions": "[\"def convert_to_binary(coef):\\n    res = []\\n    n = len(coef)\\n    carry = 0\\n    i = 0\\n    while i < n + 1000:\\n        if i >= n and not carry:\\n            break\\n        cur = carry\\n        if i < n:\\n            cur += coef[i]\\n\\n        mod = cur % 2\\n        div = cur // 2\\n#        print(cur, div, mod)\\n\\n        res.append(mod)\\n\\n        carry = div\\n\\n        i += 1\\n    return res, carry\\n\\nn, k = list(map(int, input().split()))\\ncoef = list(map(int, input().split()))\\n\\nb, carry = convert_to_binary(coef)\\nref = False\\nif carry < 0:\\n    b, carry = convert_to_binary(list([-x for x in coef]))\\n    ref = True\\n\\n\\nlast = len(b) - 1\\nwhile b[last] != 1:\\n    last -= 1\\n\\nans = 0\\nfor i in range(0, n + 1):\\n    if last - i > 40:\\n        continue\\n\\n    cur = 0\\n    for j in range(i, last + 1):\\n        cur += b[j] * (2 ** (j - i))\\n\\n    new_coef = coef[i] - cur\\n    if ref:\\n        new_coef = coef[i] + cur\\n\\n    if abs(new_coef) > k:\\n        if b[i] == 1:\\n            break\\n        continue\\n\\n    if i == n and new_coef == 0:\\n        if b[i] == 1:\\n            break\\n        continue\\n\\n    ans += 1\\n    if b[i] == 1:\\n        break\\n\\n\\nprint(ans)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3 1000000000\\n10 -9 -3 5\\n\",\n    \"3 12\\n10 -9 -3 5\\n\",\n    \"2 20\\n14 -7 19\\n\",\n    \"5 5\\n0 -4 -2 -2 0 5\\n\",\n    \"6 10\\n-2 -1 7 -3 2 7 -6\\n\",\n    \"7 100\\n2 21 11 45 58 85 -59 38\\n\",\n    \"100 1000\\n-62 57 -27 -67 49 -10 66 -64 -36 -78 62 -75 -39 75 -47 -36 41 -88 62 -43 22 29 -20 58 40 16 71 -2 -87 12 86 -90 -92 67 -12 -48 -10 -26 78 68 22 -3 66 -95 -81 34 14 -76 -27 76 -60 87 -84 3 35 -60 46 -65 29 -29 2 -44 -55 18 -75 91 36 34 -86 53 59 -54 -29 33 -95 66 9 72 67 -44 37 44 32 -52 -34 -4 -99 58 7 -22 -53 11 10 10 -25 -100 -95 -27 43 -46 25\\n\",\n    \"1 5\\n5 -3\\n\",\n    \"1 10\\n-6 2\\n\",\n    \"5 10000\\n-160 3408 -4620 5869 7434 -6253\\n\",\n    \"10 1\\n0 0 0 0 0 0 0 0 0 0 1\\n\",\n    \"10 1\\n0 0 1 -1 1 0 0 1 1 -1 -1\\n\",\n    \"10 2\\n-2 -2 1 2 -1 -2 1 -2 1 2 -1\\n\",\n    \"20 100\\n52 -82 36 90 -62 -35 -93 -98 -80 -40 29 8 43 26 35 55 -56 -99 -17 13 11\\n\",\n    \"90 10\\n-4 2 2 5 -1 3 4 1 -2 10 -9 -2 -4 3 8 0 -8 -3 9 1 2 4 8 2 0 2 -10 4 -4 -6 2 -9 3 -9 -3 8 8 9 -7 -10 3 9 -2 -7 5 -7 -5 6 1 5 1 -8 3 8 0 -6 2 2 3 -10 2 1 4 8 -3 1 5 7 -7 -3 2 -2 -9 7 7 -2 7 -6 7 -3 2 -5 10 0 0 9 -1 -4 1 -8 4\\n\",\n    \"101 20\\n4 16 -5 8 -13 -6 -19 -4 18 9 -5 5 3 13 -12 -2 -1 -4 -13 14 2 15 -11 -17 -15 6 9 -15 -10 16 18 -7 8 -19 17 11 -6 -5 -16 -7 -14 5 -17 -6 18 19 -14 -5 1 11 -17 18 4 9 -1 19 1 8 9 -14 11 -8 -18 -12 15 14 -8 0 8 16 2 -20 -19 17 14 -2 3 -9 -13 4 6 -16 3 -12 19 -14 -8 -16 7 -4 5 9 17 7 -3 -15 6 18 -13 10 -8 2\\n\",\n    \"10 1000\\n-538 -553 -281 -270 209 -989 -418 486 330 725 -430\\n\",\n    \"30 1000\\n622 815 -733 -613 -741 571 -761 -432 -7 201 554 730 607 415 -453 820 161 147 406 875 -413 462 998 481 698 661 18 -331 752 -232 -72\\n\",\n    \"5 2000000\\n1038520 -406162 -106421 106958 -807010 850753\\n\",\n    \"10 1000000000\\n-857095622 -567296277 -923645190 -246044525 610990226 -617677619 -239569893 355377587 222686442 250110001 -200293692\\n\",\n    \"20 1000000000\\n-924490890 231431639 -579465017 -690485236 173663728 144784457 364609617 444830562 48833250 1095623 333652904 -901650010 -850265945 844112020 -9178988 -527869441 93581840 607677914 -521131467 -628140952 329057708\\n\",\n    \"2 2\\n1 1 -1\\n\",\n    \"2 2\\n1 1 -1\\n\",\n    \"2 2\\n-1 0 -2\\n\",\n    \"2 2\\n-1 -1 1\\n\",\n    \"2 2\\n1 1 -2\\n\",\n    \"3 2\\n2 -1 -1 1\\n\",\n    \"35 1000000000\\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536870912\\n\",\n    \"35 1000000000\\n-1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536870912\\n\",\n    \"35 1000000000\\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -536870912\\n\",\n    \"35 1000000000\\n-1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -536870912\\n\",\n    \"32 1000000000\\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536870912\\n\",\n    \"32 1000000000\\n-1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536870912\\n\",\n    \"32 1000000000\\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -536870912\\n\",\n    \"32 1000000000\\n-1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -536870912\\n\",\n    \"55 1000000000\\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536870912\\n\",\n    \"55 1000000000\\n-1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 536870912\\n\",\n    \"69 1000000000\\n1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -536870912\\n\",\n    \"69 1000000000\\n-1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -536870912\\n\",\n    \"61 10\\n0 1 0 0 1 1 0 0 0 1 1 1 0 1 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 1 1 0 0 1 0 1 0 0 1 1 1 0 1 0 1 0 1 0 1 0 0 1 0 1 1 0 0 1 0 1\\n\",\n    \"2 10\\n1 -2 1\\n\",\n    \"65 1\\n-1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"10\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/639/C",
  "starter_code": ""
}