{
  "task_id": "APPS/103",
  "problem_id": 103,
  "prompt": "JATC and his friend Giraffe are currently in their room, solving some problems. Giraffe has written on the board an array $a_1$, $a_2$, ..., $a_n$ of integers, such that $1 \\le a_1 < a_2 < \\ldots < a_n \\le 10^3$, and then went to the bathroom.\n\nJATC decided to prank his friend by erasing some consecutive elements in the array. Since he doesn't want for the prank to go too far, he will only erase in a way, such that Giraffe can still restore the array using the information from the remaining elements. Because Giraffe has created the array, he's also aware that it's an increasing array and all the elements are integers in the range $[1, 10^3]$.\n\nJATC wonders what is the greatest number of elements he can erase?\n\n\n-----Input-----\n\nThe first line of the input contains a single integer $n$ ($1 \\le n \\le 100$)\u00a0\u2014 the number of elements in the array.\n\nThe second line of the input contains $n$ integers $a_i$ ($1 \\le a_1<a_2<\\dots<a_n \\le 10^3$)\u00a0\u2014 the array written by Giraffe.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the maximum number of consecutive elements in the array that JATC can erase.\n\nIf it is impossible to erase even a single element, print $0$.\n\n\n-----Examples-----\nInput\n6\n1 3 4 5 6 9\n\nOutput\n2\nInput\n3\n998 999 1000\n\nOutput\n2\nInput\n5\n1 2 3 4 5\n\nOutput\n4\n\n\n-----Note-----\n\nIn the first example, JATC can erase the third and fourth elements, leaving the array $[1, 3, \\_, \\_, 6, 9]$. As you can see, there is only one way to fill in the blanks.\n\nIn the second example, JATC can erase the second and the third elements. The array will become $[998, \\_, \\_]$. Because all the elements are less than or equal to $1000$, the array is still can be restored. Note, that he can't erase the first $2$ elements.\n\nIn the third example, JATC can erase the first $4$ elements. Since all the elements are greater than or equal to $1$, Giraffe can still restore the array. Note, that he can't erase the last $4$ elements.",
  "solutions": "[\"n = int(input())\\na = [0] + list(map(int, input().split())) + [1001]\\nmx = 1\\np = 1\\nfor i in range(1, n + 2):\\n    if a[i] == a[i - 1] + 1:\\n        p += 1\\n        mx = max(p, mx)\\n    else:\\n        p = 1\\nprint(max(0, mx - 2))\", \"n = int(input())\\narr = [0] + list(map(int, input().split()))\\narr.append(1001)\\nmax_ = 0\\nkek = 0\\nfor i in range(1, len(arr)):\\n    if arr[i] - 1 == arr[i - 1]:\\n        kek += 1\\n    else:\\n        max_ = max(max_, kek - 1)\\n        kek = 0\\nmax_ = max(max_, kek - 1)\\nprint(max_)\\n\", \"def ii():\\n    return int(input())\\ndef mi():\\n    return map(int, input().split())\\ndef li():\\n    return list(mi())\\n\\nn = ii()\\na = li()\\na = [0] + a + [1001]\\nans = 0\\ni = 0\\nwhile i <= n:\\n    j = i + 1\\n    while j <= n + 1 and a[j] == a[j - 1] + 1:\\n        j += 1\\n    ans = max(ans, j - i - 2)\\n    i = j\\nprint(ans)\", \"#int(input())\\n#map(int,input().split())\\n#[list(map(int,input().split())) for i in range(q)]\\n#print(\\\"YES\\\" * ans + \\\"NO\\\" * (1-ans))\\nn = int(input())\\nai = [0] + list(map(int,input().split())) + [1001]\\nans = 0\\nnum = 1\\nfor i in range(1,n+2):\\n    if ai[i] == ai[i-1]+1:\\n        num += 1\\n    else:\\n        ans = max(ans,num - 2)\\n        num = 1\\nprint(max(ans,num - 2))\\n\", \"n = int(input())\\na = [0]\\na.extend(list(map(int, input().split())))\\na.append(1001)\\n\\nlongest = 0\\ni = 0\\n\\nwhile i < len(a):\\n    j = i + 1\\n    while j < len(a) and a[j-1] + 1 == a[j]:\\n        j += 1\\n    current = j - i - 2\\n    longest = max(longest, current)\\n    i = j\\n\\nprint(longest)\\n\", \"\\ndef main():\\n    buf = input()\\n    n = int(buf)\\n    buf = input()\\n    buflist = buf.split()\\n    a = list(map(int, buflist))\\n    a.insert(0, 0)\\n    a.append(1001)\\n    count = -1\\n    max_count = 0\\n    last_number = None\\n    for i, number in enumerate(a):\\n        if last_number == None:\\n            pass\\n        elif number == last_number + 1:\\n            count += 1\\n            if count > max_count:\\n                max_count = count\\n        else:\\n            count = -1\\n        last_number = number\\n    print(max_count)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n = int(input())\\nn += 2\\na = list(map(int, input().split()))\\na = [0] + a\\na = a + [1001]\\nind = 0\\nans = 0\\nwhile ind != n:\\n    now = 0\\n    while ind + 1 != n and a[ind] + 1 == a[ind + 1]:\\n        ind += 1\\n        now += 1\\n    ind += 1\\n    ans = max(ans, now - 1)\\nprint(ans)\\n\", \"n=int(input())\\ns=input().split()\\nl=[0]+[int(s[i]) for i in range(n)]+[1001]\\nmaxlen=0\\nprev=0\\ncnt=1\\nfor i in range(1,n+2):\\n    if prev==l[i]-1:\\n        cnt+=1\\n    else:\\n        maxlen=max(maxlen,cnt-2)\\n        cnt=1\\n    prev=l[i]\\nmaxlen=max(maxlen,cnt-2)\\nprint(maxlen)\\n\", \"n = int(input())\\narr = [int(x) for x in input().split()]\\nma = 0\\ncnt = 0\\nif len(arr) == 1000:\\n    print(1000)\\nelse:\\n    for i in range(len(arr) - 1):\\n        if arr[i + 1] == arr[i] + 1:\\n            cnt += 1\\n            if arr[i] == 1 or arr[i + 1] == 1000:\\n                cnt += 1\\n        else:\\n            ma = max(ma, cnt)\\n            cnt = 0\\nma = max(ma, cnt)\\nprint(max(0, ma - 1))\", \"n = int(input())\\narr = list(map(int, input().split()))\\nans = 0\\nfor i in range(n):\\n\\tfor j in range(i + 2, n):\\n\\t\\tif arr[j] - arr[i] == j - i:\\n\\t\\t\\tans = max(ans, j - i - 1)\\nfor i in range(n):\\n\\tif arr[i] == i + 1:\\n\\t\\tans = max(ans, i)\\nfor i in range(n):\\n\\tif n - i - 1 == 1000 - arr[i]:\\n\\t\\tans = max(ans, n - i - 1)\\nprint(ans)\", \"n = int(input())\\na = list(map(int, input().split()))\\nx = 0\\nfor i in range(n):\\n    if a[i] == 1:\\n        xm = 2\\n    else:\\n        xm = 1\\n    for j in range(i+1, n):\\n        if a[j]-a[j-1] == 1:\\n            xm += 1\\n            if a[j] == 1000:\\n                xm += 1\\n        else:\\n            break\\n    x = max(x, xm-2)\\nprint(x)\", \"n = int(input())\\narr = [0] + [int(x) for x in input().split()] + [1001]\\n\\narr2 = []\\nfor a, b in zip(arr, arr[1:]):\\n  arr2.append(b-a)\\n\\nlongest = 0\\ncurrent = 0\\nfor x in arr2:\\n  if x == 1:\\n    current += 1\\n  else:\\n    longest = max(longest, current)\\n    current = 0\\nlongest = max(longest, current)\\n\\nprint(max(longest - 1, 0))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nans = 0\\nfor i in range(0, n):\\n    for j in range(i + 1, n):\\n        if a[j] - a[i] == j - i:\\n            if a[j] == 1000 or a[i] == 1 and not (a[j] == 1000 and a[i] == 1):\\n                ans = max(j - i, ans)\\n            if a[j] == 1000 and a[i] == 1:\\n                ans = 1000\\n            else:\\n                ans = max(j - i - 1, ans)\\nprint(ans)\\n\", \"#!/usr/bin/env python3\\nfrom typing import Dict, List, Tuple\\n\\n\\ndef input_lst() -> List[int]:\\n    return [int(x) for x in input().split()]\\n\\ndef print_out(res: List[int]):\\n    print(' '.join([str(x) for x in res]))\\n\\n\\ndef main():\\n    n,  = (int(x) for x in input().split())\\n    a = input_lst()\\n\\n    l = 0\\n    l_max = 0\\n    if a[0] == 1:\\n        l+=1\\n\\n    for i in range(n-1):\\n        if a[i+1] - a[i] == 1:\\n            l+=1\\n        else:\\n            if l>0:\\n                l_max = max(l, l_max)\\n                l = 0\\n\\n    if l > 0:\\n        if a[-1] == 1000:\\n            l+=1\\n        l_max = max(l, l_max)\\n\\n    print(max(l_max-1, 0))\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n = int(input())\\na = [0] + [int(i) for i in input().split()] + [1001]\\nans = 0\\nfor j in range(1, n + 1):\\n    i = j\\n    f = 0\\n    while i < n + 1 and a[i] == a[i - 1] + 1 and a[i] == a[i + 1] - 1:\\n        f += 1\\n        i += 1\\n    ans = max(ans, f)\\nprint(ans)\", \"import sys\\ninput_file = sys.stdin\\n\\nn = int(input_file.readline())\\nlst = [0] + list(int(i) for i in input_file.readline().split()) + [1001]\\n#print(n, lst)\\nmaxi = 1\\nans = 1\\nfor i in range(1, len(lst)):\\n    if lst[i] == lst[i-1] + 1:\\n        ans += 1\\n    else:\\n        #print(ans)\\n        maxi = max(maxi, ans)\\n        ans = 1\\nmaxi = max(maxi, ans)\\n        \\n\\nprint(max(maxi-2, 0))\\n    \\n\", \"n=int(input())\\nA=list(map(int,input().split()))\\nA=[0]+A+[1001]\\n\\nANS=0\\ncount=0\\nfor i in range(1,n+1):\\n    if A[i]==A[i-1]+1 and A[i]==A[i+1]-1:\\n        count+=1\\n    else:\\n        ANS=max(ANS,count)\\n        count=0\\n\\nANS=max(ANS,count)\\nprint(ANS)\\n\", \"n = int(input())\\ns = list(map(int, input().split()))\\ns = [0] + s[:] + [1001]\\nc = 0\\nmaxc = 0\\nfor i in range(1, len(s)):\\n\\tif s[i] - s[i - 1] == 1:\\n\\t\\tc += 1\\n\\t\\tif c > maxc:\\n\\t\\t\\tmaxc = c-1\\n\\telse:\\n\\t\\tc = 0\\nprint(maxc)\", \"from sys import stdin, stdout\\nfrom math import sin, tan, cos, pi, atan2, sqrt, acos, atan, factorial\\n\\nn = int(stdin.readline())\\nvl = list(map(int, stdin.readline().split()))\\nans = 0\\n\\nfor i in range(n):\\n    cnt = 0\\n    while i + cnt < n and vl[i + cnt] == vl[i] + cnt:\\n        cnt += 1\\n    \\n    ans = max(ans, cnt - 2)\\n        \\n\\ncnt1 = 0\\nwhile cnt1 < n and vl[cnt1] == cnt1 + 1:\\n    cnt1 += 1\\n\\ncnt2 = 0\\nwhile cnt2 < n and vl[n - 1 - cnt2] == 10 ** 3 - cnt2:\\n    cnt2 += 1\\n\\nans = max(ans, max(cnt1, cnt2) - 1)\\nstdout.write(str(ans))\", \"# use this as the main template for python problems\\nfrom collections import Counter\\n\\ndef solution(n, arr):\\n    arr = [0] + arr\\n    arr.append(1001)\\n    \\n    best = 0\\n    count = 0\\n    for ind, val in enumerate(arr[:-2]):\\n        if(val+1 == arr[ind+1] and (val+2 == arr[ind+2])):\\n            count += 1\\n        else:\\n            if(best < count):\\n                best = count\\n            count = 0\\n    print(max(best, count))\\n\\n\\ndef __starting_point():\\n\\n    # single variables\\n    n = [int(val) for val in input().split()][0]\\n\\n    # vectors\\n    arr = [int(val) for val in input().split()]\\n\\n    # solve it!\\n    solution(n, arr)\\n\\n\\n__starting_point()\", \"n = int(input())\\na = list(map(int, input().split()))\\na = [0] + a + [1001]\\n\\nans = 0\\nfor i in range(len(a)):\\n    for j in range(i + 3, len(a) + 1):\\n        if a[i : j] == list(range(a[i], a[i] + j - i)):\\n            ans = max(ans, j - i - 2)\\n\\nprint(ans)\", \"n = int(input())\\na = [0] + list(map(int, input().split())) + [1001]\\nmax_ans = 0\\nans = 0\\n\\nfor i in range(1, len(a) - 1):\\n    #print('cur' , a[i])\\n    if a[i] == a[i - 1] + 1 and a[i] == a[i + 1] - 1:\\n        ans += 1\\n        #print('+1')\\n    else:\\n        #print(a[i], ans, max_ans)\\n        #print(max(ans, max_ans))\\n        max_ans = max(ans, max_ans)\\n        ans = 0\\n\\nprint(max(max_ans, ans))\\n\", \"def user99():\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n    b = [[] for i in range(n)]\\n\\n    ptr = 0\\n    for i in range(n):\\n        if i >= 1 and a[i - 1] + 1 != a[i]:\\n            ptr += 1\\n        b[ptr].append(a[i])\\n\\n    ans = 0\\n    for i in b:\\n        if len(i) == 0:\\n            continue;\\n        x = len(i) - 2\\n        if i[0] == 1: x += 1\\n        if i[-1] == 10**3: x += 1\\n        ans = max(ans, x)\\n\\n    print(ans)\\n\\nuser99()\", \"n = int(input())\\nA = [0] + list(map(int,  input().split())) + [1001]\\n\\nc = 0\\nans = 0\\nfor i in range(1,n+1):\\n  if A[i]-1 == A[i-1] and A[i]+1 == A[i+1]:\\n    c += 1\\n  else:\\n    c = 0\\n\\n  ans = max(ans, c)\\n\\nprint(ans)\\n \\n\\n\", \"n = int(input())\\na  = [0] + list(map(int, input().split())) + [1001]\\nres = 1\\ncur = 1\\n\\nfor i in range(n+1):\\n    if a[i+1] - a[i] == 1:\\n        cur += 1\\n    else:\\n        cur = 1\\n    res  = max(res, cur)\\nprint(max(0, res - 2))\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"6\\n1 3 4 5 6 9\\n\",\n    \"3\\n998 999 1000\\n\",\n    \"5\\n1 2 3 4 5\\n\",\n    \"1\\n1\\n\",\n    \"2\\n1 2\\n\",\n    \"2\\n999 1000\\n\",\n    \"9\\n1 4 5 6 7 100 101 102 103\\n\",\n    \"100\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\n\",\n    \"8\\n6 8 9 11 14 18 19 20\\n\",\n    \"2\\n1 7\\n\",\n    \"1\\n779\\n\",\n    \"5\\n3 8 25 37 43\\n\",\n    \"73\\n38 45 46 95 98 99 103 157 164 175 184 193 208 251 258 276 279 282 319 329 336 344 349 419 444 452 490 499 507 508 519 542 544 553 562 576 579 590 594 603 634 635 648 659 680 686 687 688 695 698 743 752 757 774 776 779 792 809 860 879 892 911 918 927 928 945 947 951 953 958 959 960 983\\n\",\n    \"15\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\\n\",\n    \"63\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63\\n\",\n    \"100\\n252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 409 410 425 426 604 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895\\n\",\n    \"95\\n34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 911 912 913\\n\",\n    \"90\\n126 239 240 241 242 253 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 600 601 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 934 935\\n\",\n    \"85\\n52 53 54 55 56 57 58 59 60 61 62 63 64 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 333 334 453 454 455 456 457 458 459 460 461 462 463 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624\\n\",\n    \"80\\n237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 408 409 410 411 412 413 414 415 416 417 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985\\n\",\n    \"70\\n72 73 74 75 76 77 78 79 80 81 82 354 355 356 357 358 359 360 361 362 363 364 365 366 367 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 764 765 766 767 768 769 770 794 795 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826\\n\",\n    \"75\\n327 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653\\n\",\n    \"60\\n12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 134 135 136 137 353 354 355 356 357 358 359 360 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815\\n\",\n    \"65\\n253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 533 614 615 864\\n\",\n    \"55\\n67 68 69 70 160 161 162 163 164 165 166 167 168 169 170 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 960\\n\",\n    \"50\\n157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 632 633 634 635 636 637 638\\n\",\n    \"45\\n145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 333 334 831 832 978 979 980 981\\n\",\n    \"100\\n901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000\\n\",\n    \"10\\n1 2 3 4 5 6 7 8 9 10\\n\",\n    \"10\\n991 992 993 994 995 996 997 998 999 1000\\n\",\n    \"39\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39\\n\",\n    \"42\\n959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000\\n\",\n    \"100\\n144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 198 199 200 201 202 203 204 205 206 207 208 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 376 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 904 905 997\\n\",\n    \"95\\n9 10 11 12 13 134 271 272 273 274 275 276 277 278 290 291 292 293 294 295 296 297 298 299 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 620 621 622 623 624 625 626 627 628 629 630 631 632 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 952\\n\",\n    \"90\\n20 21 22 23 24 25 56 57 58 59 60 61 62 63 64 84 85 404 405 406 407 408 409 410 420 421 422 423 424 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 491 492 588 589 590 652 653 654 655 656 657 754 755 756 757 758 759 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 982 983 984 985 986 987 988 989 990 991 992 995\\n\",\n    \"85\\n40 41 42 43 44 69 70 71 72 73 305 306 307 308 309 333 334 335 336 337 338 339 340 341 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 717 718 719 720 721 862 863 864 865 866 867 868 869 870 871 872 873 874 945 946 947 948 949 950\\n\",\n    \"80\\n87 88 89 90 91 92 93 94 95 96 97 98 99 173 174 175 176 177 178 179 180 184 185 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 550 551 552 553 554 555 650 702 703 704 705 706 707 708 709 710 727 728 729 730 731 798 799 800 831 832 833 869 870 980 981 982 983 984 985 986 987 988 989 990 991 992\\n\",\n    \"1\\n1000\\n\",\n    \"2\\n998 999\\n\",\n    \"2\\n3 4\\n\",\n    \"3\\n9 10 11\\n\",\n    \"6\\n4 5 6 7 8 9\\n\",\n    \"5\\n5 6 7 8 9\\n\",\n    \"8\\n1 2 5 6 7 8 9 11\\n\",\n    \"4\\n1 2 3 6\\n\",\n    \"4\\n1 2 3 66\\n\",\n    \"7\\n1 2 5 6 7 8 9\\n\",\n    \"2\\n2 4\\n\",\n    \"8\\n1 2 5 6 7 8 9 1000\\n\",\n    \"2\\n1 1000\\n\",\n    \"4\\n3 4 5 6\\n\",\n    \"5\\n2 3 4 5 6\\n\",\n    \"6\\n1 2 3 4 5 7\\n\",\n    \"6\\n1 996 997 998 999 1000\\n\",\n    \"5\\n1 2 3 4 6\\n\",\n    \"6\\n1 2 3 5 6 7\\n\",\n    \"3\\n3 4 5\\n\",\n    \"1\\n5\\n\",\n    \"3\\n2 3 4\\n\",\n    \"7\\n1 3 5 997 998 999 1000\\n\",\n    \"4\\n3 4 5 10\\n\",\n    \"3\\n997 998 999\\n\",\n    \"7\\n1 2 3 4 6 7 8\\n\",\n    \"2\\n2 3\\n\",\n    \"7\\n2 3 4 6 997 998 999\\n\",\n    \"1\\n2\\n\",\n    \"3\\n4 5 6\\n\",\n    \"2\\n5 6\\n\",\n    \"7\\n1 2 3 997 998 999 1000\\n\",\n    \"4\\n1 3 999 1000\\n\",\n    \"5\\n1 3 5 7 9\\n\",\n    \"6\\n1 2 3 4 5 10\\n\",\n    \"4\\n1 2 999 1000\\n\",\n    \"2\\n10 20\\n\",\n    \"5\\n2 3 4 5 10\\n\",\n    \"4\\n2 3 4 5\\n\",\n    \"42\\n35 145 153 169 281 292 299 322 333 334 358 382 391 421 436 447 464 467 478 491 500 538 604 667 703 705 716 718 724 726 771 811 827 869 894 895 902 912 942 961 962 995\\n\",\n    \"3\\n10 11 12\\n\",\n    \"7\\n1 2 3 4 6 9 18\\n\",\n    \"5\\n1 2 3 4 800\\n\",\n    \"5\\n1 2 3 4 1000\\n\",\n    \"5\\n1 997 998 999 1000\\n\",\n    \"6\\n1 2 6 7 8 9\\n\",\n    \"4\\n1 2 3 5\\n\",\n    \"9\\n1 2 3 7 8 9 10 11 13\\n\",\n    \"4\\n1 2 5 6\\n\",\n    \"6\\n1 2 5 6 7 8\\n\",\n    \"5\\n1 2 3 999 1000\\n\",\n    \"100\\n656 658 660 662 664 666 668 670 672 674 676 678 680 682 684 686 688 690 692 694 696 698 700 702 704 706 708 710 712 714 716 718 720 722 724 726 728 730 732 734 736 738 740 742 744 746 748 750 752 754 756 758 760 762 764 766 768 770 772 774 776 778 780 782 784 786 788 790 792 794 796 798 800 802 804 806 808 810 812 814 816 818 820 822 824 826 828 830 832 834 836 838 840 842 844 848 850 852 999 1000\\n\",\n    \"3\\n1 2 9\\n\",\n    \"8\\n2 3 4 5 997 998 999 1000\\n\",\n    \"9\\n1 2 3 4 6 7 9 10 12\\n\",\n    \"4\\n1 2 7 8\\n\",\n    \"3\\n1 2 5\\n\",\n    \"5\\n1 2 998 999 1000\\n\",\n    \"4\\n1 2 3 7\\n\",\n    \"7\\n2 4 6 997 998 999 1000\\n\",\n    \"5\\n1 2 3 5 6\\n\",\n    \"6\\n3 4 5 998 999 1000\\n\"\n  ],\n  \"outputs\": [\n    \"2\",\n    \"2\",\n    \"4\",\n    \"0\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"99\",\n    \"1\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"1\",\n    \"14\",\n    \"62\",\n    \"70\",\n    \"35\",\n    \"44\",\n    \"23\",\n    \"25\",\n    \"19\",\n    \"72\",\n    \"24\",\n    \"59\",\n    \"21\",\n    \"20\",\n    \"35\",\n    \"99\",\n    \"9\",\n    \"9\",\n    \"38\",\n    \"41\",\n    \"16\",\n    \"20\",\n    \"15\",\n    \"18\",\n    \"13\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"1\",\n    \"4\",\n    \"3\",\n    \"3\",\n    \"2\",\n    \"2\",\n    \"3\",\n    \"0\",\n    \"3\",\n    \"0\",\n    \"2\",\n    \"3\",\n    \"4\",\n    \"4\",\n    \"3\",\n    \"2\",\n    \"1\",\n    \"0\",\n    \"1\",\n    \"3\",\n    \"1\",\n    \"1\",\n    \"3\",\n    \"0\",\n    \"1\",\n    \"0\",\n    \"1\",\n    \"0\",\n    \"3\",\n    \"1\",\n    \"0\",\n    \"4\",\n    \"1\",\n    \"0\",\n    \"2\",\n    \"2\",\n    \"0\",\n    \"1\",\n    \"3\",\n    \"3\",\n    \"3\",\n    \"3\",\n    \"2\",\n    \"2\",\n    \"3\",\n    \"1\",\n    \"2\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"3\",\n    \"3\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"2\",\n    \"3\",\n    \"2\",\n    \"2\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1062/A",
  "starter_code": ""
}