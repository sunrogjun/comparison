{
  "task_id": "APPS/36",
  "problem_id": 36,
  "prompt": "Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \n\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\n\n\n-----Input-----\n\nThe only line of the input contains integer n (0 \u2264 n \u2264 10^18)\u00a0\u2014 the number of Ayrat's moves.\n\n\n-----Output-----\n\nPrint two integers x and y\u00a0\u2014 current coordinates of Ayrat coordinates.\n\n\n-----Examples-----\nInput\n3\n\nOutput\n-2 0\n\nInput\n7\n\nOutput\n3 2",
  "solutions": "[\"def f(n):\\n\\tleft, right = -1, n + 1\\n\\twhile right - left > 1:\\n\\t\\tmid = (left + right) // 2\\n\\t\\tx = 6 * mid * (mid + 1) // 2 + 5 * (mid + 1)\\n\\t\\tif x > n:\\n\\t\\t\\tright = mid\\n\\t\\telse:\\n\\t\\t\\tleft = mid\\n\\tif left >= 0:\\n\\t\\tmid = left\\n\\t\\tx = 6 * mid * (mid + 1) // 2 + 5 * (mid + 1)\\n\\t\\tn -= x\\n\\treturn (n, left + 1)\\n\\ndef main():\\n\\tn = int(input())\\n\\tn, k = f(n)\\n\\tx = k\\n\\ty = -2 * k\\n\\t\\n\\td = [k + 1] * 6\\n\\td[1] -= 1\\n\\tdx = [1, -1, -2, -1,  1, 2]\\n\\tdy = [2,  2,  0, -2, -2, 0]\\n\\t\\n\\tfor i in range(6):\\n\\t\\tx += min(d[i], n) * dx[i]\\n\\t\\ty += min(d[i], n) * dy[i]\\n\\t\\tn = max(0, n - d[i])\\n\\t\\n\\tprint(x, y)\\n\\n\\nmain()\\n\", \"from functools import reduce\\nfrom decimal import *\\nimport math\\nimport itertools\\n\\nclass pair(list):\\n    def __init__(self, a, b):\\n        list.__init__(self, (a, b))\\n    def __add__(self, q): return pair(self[0]+q[0], self[1]+q[1])\\n    def __sub__(self, q): return pair(self[0]-q[0], self[1]-q[1])\\n    def __mul__(self, k): return pair(k*self[0], k*self[1])\\n    def __neg__(self): return pair(-self[0], -self[1])\\n\\nsetcontext(ExtendedContext)\\ngetcontext().prec = 100\\na, b, c = pair(1,2), pair(-2,0), pair(-1,2)\\nn = int(input())\\nk = int(((Decimal(3 + 4*n) / Decimal(3)).sqrt() - Decimal(1)) // 2)\\nn1 = n - 3*k*(k+1)\\nx, y = n1//(k+1), n1%(k+1)\\nL = [c, b, -a, -c, -b, a]\\nM = [pair(0,0)] + list(itertools.accumulate(L))\\nif n1 == 0:\\n    ans = pair(2,0)*k\\nelse:\\n    ans = pair(2,0)*(k+1) + M[x]*(k+1) + L[x]*y\\nprint(ans[0], ans[1])\\n\", \"#!/usr/bin/env python3\\ndef binsearch(p, l, r): # (l,r], return the smallest n which p holds\\n    while l+1 != r:\\n        m = (l + r) // 2\\n        if p(m):\\n            r = m\\n        else:\\n            l = m\\n    return r\\nn = int(input())\\nif n == 0:\\n    print(0, 0)\\nelse:\\n    i = binsearch(lambda i: n <= 3*i*(i+1), 0, 10**18)\\n    acc = 3*(i-1)*i\\n    j = binsearch(lambda j: n <= acc + i*(j+1), -1, 6)\\n    k = n - acc - i*j - 1\\n    dy = [ 0, 2,  2,  0, -2, -2 ]\\n    dx = [ 2, 1, -1, -2, -1,  1 ]\\n    y = dy[(j+1)%6] + dy[j]*(i-1) + dy[(j+2)%6]*k\\n    x = dx[(j+1)%6] + dx[j]*(i-1) + dx[(j+2)%6]*k\\n    print(x, y)\\n\", \"import math\\ndef main(m):\\n    if m == 0:\\n        print(\\\"0 0\\\")\\n    else:\\n        x = math.floor(1/6*((12*m - 3)**0.5 + 3)) # Approx ?...\\n        while True:\\n            d = m - (x**3 - (x-1)**3)\\n            if (d < 0): x -= 1\\n            elif (d > x * 6 + 6): x += 1\\n            else: break\\n        s,r = divmod(d, x)\\n        #print(\\\"x:{}, d:{}, s:{}, r:{}\\\".format(x,d,s,r));\\n        if s == 0:\\n            print(\\\"{} {}\\\".format(2*x-r-1,2*r+2))\\n        elif s == 1:\\n            print(\\\"{} {}\\\".format(x-2*r-2,2*x))\\n        elif s == 2:\\n            print(\\\"{} {}\\\".format(-x-r-1,2*(x-r-1)))\\n        elif s == 3:\\n            print(\\\"{} {}\\\".format(-2*x+r+1,-2*r-2))\\n        elif s == 4:\\n            print(\\\"{} {}\\\".format(-x+2*r+2,-2*x))\\n        elif s == 5:\\n            print(\\\"{} {}\\\".format(x+r+1,-2*x+2*r+2))\\n            \\ndef __starting_point():\\n    main(int(input()))\\n\\n__starting_point()\", \"def layer(n):\\n    a = (-3 + (9+12*n)**0.5)//6\\n    a = int(a)\\n    a+=1\\n    while 3*a*(a+1) >= n:\\n        a-=1\\n    return a+1\\n\\nn = int(input())\\nif n == 0:\\n    print(0, 0)\\n    quit()\\n\\nl = layer(n)\\nbase = 3*(l-1)*l+1\\n# base = (2*l-1, 2)\\n\\na = [2*l, 0]\\nb = [l, 2*l]\\nbx = base + (l-1)\\nc = [-l, 2*l]\\ncx = bx + l\\nd = [-2*l, 0]\\ndx = cx + l\\ne = [-l, -2*l]\\nex = dx + l\\nf = [l, -2*l]\\nfx = ex + l\\nax = fx + l\\ndaa = abs(n-base+1)\\nda = abs(n-ax)\\ndb = abs(n-bx)\\ndc = abs(n-cx)\\ndd = abs(n-dx)\\nde = abs(n-ex)\\ndf = abs(n-fx)\\n\\nif (n <= bx):\\n    print(int((db*a[0]+daa*b[0])/(db+daa)), int((db*a[1]+daa*b[1])/(db+daa)))\\n    quit()\\n    \\nif (bx <= n <= cx):\\n    print(int((dc*b[0]+db*c[0])/(db+dc)), b[1])\\n    quit()\\n    \\nif (cx <= n <= dx):\\n    print(int((dd*c[0]+dc*d[0])/(dc+dd)), int((dd*c[1]+dc*d[1])/(dc+dd)))\\n    quit()\\n    \\nif (dx <= n <= ex):\\n    print(int((de*d[0]+dd*e[0])/(dd+de)), int((de*d[1]+dd*e[1])/(dd+de)))\\n    quit()\\n    \\nif (ex <= n <= fx):\\n    print(int((df*e[0]+de*f[0])/(de+df)), e[1])\\n    quit()\\n    \\nif (fx <= n <= ax):\\n    print(int((da*f[0]+df*a[0])/(df+da)), int((da*f[1]+df*a[1])/(df+da)))\\n    quit()\\n\", \"ru = (1,2)\\nr = (2,0)\\nrd = (1,-2)\\nld = (-1,-2)\\nl = (-2,0)\\nlu = (-1,2)\\nx, y = 0, 0\\nn = int(input())\\nl = -1\\nr = int(1e18)\\nwhile r - l > 1:\\n    m = (r + l)//2\\n    if 5 * m + 3 * m * (m - 1) > n: r = m\\n    else: l = m\\n    \\nx += l * (1)\\ny += l * (-2)\\nn -= 5 * l + 3 * l * (l - 1)\\nif n<r:\\n    x+= n * 1\\n    y+= n * (2)\\n    n = 0\\nelse:\\n    n -= r\\n    x+=r*1\\n    y+=r*2\\n    \\nif n<r-1:\\n    x+= n * (-1)\\n    y+= n * 2\\n    n = 0\\nelse:\\n    n -= l\\n    x+=l*(-1)\\n    y+=l*2\\nif n < r:\\n    x+=-2 * n\\n    n = 0\\nelse:\\n    n-=r\\n    x+=-2 * r\\nif n < r:\\n    x+=-1 * n\\n    y+=-2 * n\\n    n = 0\\nelse:\\n    n -= r\\n    x+=-1 * r\\n    y+=-2 * r\\n    \\nif n < r:\\n    x+=1 * n\\n    y+=-2 * n\\n    n = 0\\nelse:\\n    n -= r\\n    x += 1*r\\n    y += -2*r\\n    \\nif n < r:\\n    x+=2*n\\n    \\nprint(x, y)\\n    \\n\\n\\n\", \"from math import sqrt, ceil\\nfrom collections import namedtuple\\n\\ndef add(a, b):\\n    return a[0] + b[0], a[1] + b[1]\\n\\ndef count(p):\\n    return p * (3 * p + 2)\\n\\n\\ndef bin_search(n):\\n    l = 0\\n    r = ceil(sqrt(n))\\n    while r - l > 1:\\n        m = (l + r) // 2\\n        if count(m) > n:\\n            r = m - 1\\n        else:\\n            l = m\\n    if count(r) > n:\\n        return l\\n    else:\\n        return r\\n\\n\\ndef get_pos(n, p):\\n    if n < p: # /\\n        return add( (p - 1, -2 * p + 2), (n, 2 * n) ) \\n    n -= p\\n    if n < p - 1: # \\\\\\n        return add( (1 + 2 * (p - 1), 2), (-n, 2 * n) )\\n    n -= p - 1\\n    if n < p: # -\\n        return add( (p, 2 * p), (-2 * n, 0) )\\n    n -= p\\n    if n < p: # /\\n        return add( (-p, 2 * p), (-n, -2 * n) )\\n    n -= p\\n    if n < p: # \\\\\\n        return add( (-2 * p, 0), (n, -2 * n) )\\n    n -= p\\n    if n < p: # -\\n        return add( (-p, -2 * p), (2 * n, 0) )\\n    raise RuntimeError(\\\"You're a big guy\\\")\\n\\n\\nn = int(input())\\nif n == 0:\\n    print(0, 0)\\nelse:\\n    p = bin_search(n)\\n    start = count(p)\\n    #print(p, start)\\n    n -= start\\n    ans = get_pos(n, p + 1)\\n    print(ans[0], ans[1])\\n\", \"def sLayer(n):\\n\\treturn 3*n*(n+1)\\n\\ndef getLayer(N):\\n\\ta = 0\\n\\tb = 600000000\\n\\twhile b-a > 1:\\n\\t\\tn = (a+b)//2\\n\\t\\ttN = sLayer(n)\\n\\t\\tif tN > N:\\n\\t\\t\\tb = n\\n\\t\\telse:\\n\\t\\t\\ta = n\\n\\treturn a\\n\\nN = int(input())\\nif N == 0:\\n\\tprint(\\\"0 0\\\")\\n\\traise SystemExit\\n\\nN -= 1\\nlayer = getLayer(N)\\nN -= sLayer(layer)\\n\\nseg = N//(layer+1)\\nidx = N%(layer+1)\\n\\nsegDiff = [(-1,2), (-2,0), (-1,-2), (1,-2), (2,0), (1,2)]\\n\\nif seg == 0:\\n\\tx = 2*layer+1\\n\\ty = 2\\nelif seg == 1:\\n\\tx = -1+layer\\n\\ty = 2*(layer+1)\\nelif seg == 2:\\n\\tx = -2-layer\\n\\ty = 2*layer\\nelif seg == 3:\\n\\tx = -1-2*layer\\n\\ty = -2\\nelif seg == 4:\\n\\tx = 1-layer\\n\\ty = -2-2*layer\\nelif seg == 5:\\n\\tx = 2+layer\\n\\ty = -2*layer\\n\\nx += segDiff[seg][0]*idx\\ny += segDiff[seg][1]*idx\\nprint(\\\"%d %d\\\" % (x,y))\\n\", \"3\\n\\nimport math\\n\\ndef solve(n):\\n  if n == 0:\\n    return (0, 0)\\n\\n  k = int(0.5 * (-1 + math.sqrt(1 + 4 * n / 3.0))) + 10\\n  while 3 * k * (k + 1) >= n:\\n    k -= 1\\n \\n  n -= 3 * k * (k + 1) + 1\\n  x = 1 + 2 * k\\n  y = 2\\n\\n  lim = [k] + [k + 1] * 5\\n  dx = [-1, -2, -1, 1, 2, 1]\\n  dy = [2, 0, -2, -2, 0, 2]\\n\\n  i = 0\\n  while n > 0:\\n    t = min(n, lim[i])\\n    x += t * dx[i]\\n    y += t * dy[i]\\n    n -= t\\n    i += 1\\n\\n  return (x, y)\\n\\nx, y = solve(int(input()))\\nprint(x, y)\\n\\n# for i in range(21):\\n#   print(i, solve(i))\\n\\n\\n\", \"def main():\\n\\tn = int(input())\\n\\t(x, y) = solver(n)\\n\\tprint(x, y)\\n\\ndef solver(n):\\n\\trounds = int(quadraticEqPlus(3, 3, -n))\\n\\tn -= 3 * rounds * (rounds + 1)\\n\\tcurPoint = (2 * rounds, 0)\\n\\tcurRound = rounds + 1\\n\\t# go UpRight\\n\\t#if n >= 1:\\n\\t#\\tcurPoint = goUpRight()\\n\\tcircle = [(goUpRight, 1), (goUpLeft, curRound - 1), \\n\\t(goLeft, curRound), (goDownLeft, curRound), \\n\\t(goDownRight, curRound), (goRight, curRound), \\n\\t(goUpRight, curRound)]\\n\\tfor (func, steps) in circle:\\n\\t\\tif n >= steps:\\n\\t\\t\\tcurPoint = func(curPoint, steps)\\n\\t\\t\\tn -= steps\\n\\t\\telse:\\n\\t\\t\\tcurPoint = func(curPoint, n)\\n\\t\\t\\tn = 0\\n\\t\\t\\treturn curPoint\\n\\tassert(False)\\n\\ndef quadraticEqPlus(a, b, c):\\n\\treturn (-b + (b**2 - 4 * a * c)**0.5) / (2 * a)\\n\\n#print(quadraticEqPlus(3, 3, 0))\\ndef goUpLeft(point, steps):\\t\\n\\treturn (point[0] - steps, point[1] + 2 * steps)\\n\\ndef goLeft(point, steps):\\t\\n\\treturn (point[0] - 2 * steps, point[1])\\n\\ndef goDownLeft(point, steps):\\t\\n\\treturn (point[0] - steps, point[1] - 2 * steps)\\n\\ndef goDownRight(point, steps):\\t\\n\\treturn (point[0] + steps, point[1] - 2 * steps)\\n\\ndef goRight(point, steps):\\t\\n\\treturn (point[0] + 2 * steps, point[1])\\n\\ndef goUpRight(point, steps):\\t\\n\\treturn (point[0] + steps, point[1] + 2 * steps)\\n\\nmain()\\n#for n in range(21):\\n#\\tprint(solver(n))\\n\\n#print(solver(7))\\n\", \"from math import sqrt\\n\\n\\ndef hex(l):\\n    return 1 + 3*l*(l+1)\\n\\n\\ndef level(n):\\n    if n == 0:\\n        return 0, 0    \\n    l = int((-3. + sqrt(9. + 12.*(n-1))) / 6.)\\n    while hex(l) > n:\\n        l -= 1\\n    while hex(l+1) <= n:\\n        l += 1\\n    return l+1, n-hex(l)\\n\\n\\ndef coordinates(l, k):\\n    if l == 0:\\n        return 0, 0\\n    s, i = divmod(k, l)\\n    if s == 0:\\n        return 2*l - (i+1), 2*(i+1)\\n    elif s == 1:\\n        return l - 2*(i+1), 2*l\\n    elif s == 2:\\n        return -l - (i+1), 2*l-2*(i+1)\\n    elif s == 3:\\n        return -2*l + (i+1), -2*(i+1)\\n    elif s == 4:\\n        return -l + 2*(i+1), -2*l\\n    elif s == 5:\\n        return l + (i+1), -2*l+2*(i+1)\\n\\n\\ndef ayrat(n):\\n    l, k = level(n)\\n    return coordinates(l, k)\\n\\n\\ndef __starting_point():\\n    n = int(input())\\n    print(\\\"{} {}\\\".format(*ayrat(n)))\\n\\n__starting_point()\", \"#By Tianyi Chen\\nn=int(input())\\ndef j(i):\\n\\treturn 3*i*(i+1)<=n\\nhigh=10**18;low=0\\nwhile high-low>5:\\n\\tmid=high+low>>1\\n\\tif j(mid):low=mid\\n\\telse:high=mid\\nwhile j(low+1):low+=1\\nr=low\\nx=r<<1;y=0\\nn-=3*r*(r+1)\\nr+=1\\nif n:\\n\\tn-=1;x+=1;y+=2\\nif n:\\n\\tsub=min(n,r-1);n-=sub;x-=sub;y+=sub<<1\\nif n:\\n\\tsub=min(n,r);n-=sub;x-=sub<<1\\nif n:\\n\\tsub=min(n,r);n-=sub;x-=sub;y-=sub<<1\\nif n:\\n\\tsub=min(n,r);n-=sub;x+=sub;y-=sub<<1\\nif n:\\n\\tsub=min(n,r);n-=sub;x+=sub<<1\\nif n:\\n\\tsub=min(n,r);n-=sub;x+=sub;y+=sub<<1\\nprint(x,y)\", \"# Contest: 21 - Codeforces Rating >= 2200 (https://a2oj.com/ladder?ID=21)\\n# Problem: (25) Hexagons (Difficulty: 5) (http://codeforces.com/problemset/problem/615/E)\\n\\ndef rint():\\n    return int(input())\\n\\n\\ndef rints():\\n    return list(map(int, input().split()))\\n\\n\\nSIDES = [\\n    lambda c, v: (1 + 2 * c - v, 2 + 2 * v),\\n    lambda c, v: (-1 + c - 2 * v, 2 + 2 * c),\\n    lambda c, v: (-c - 2 - v, 2 * c - 2 * v),\\n    lambda c, v: (-1 - 2 * c + v, -2 - 2 * v),\\n    lambda c, v: (1 - c + 2 * v, -2 - 2 * c),\\n    lambda c, v: (2 + c + v, -2 * c + 2 * v),\\n]\\n\\nn = rint()\\nif n == 0:\\n    print(0, 0)\\n    return\\nn -= 1\\nl, h = 0, 10**9\\nwhile h - l > 1:\\n    m = (h + l) // 2\\n    if 3 * m * (m + 1) > n:\\n        h = m - 1\\n    else:\\n        l = m\\nc = h if 3 * h * (h + 1) <= n else l\\nn -= 3 * c * (c + 1)\\n\\nprint(*SIDES[n // (c + 1)](c, n % (c + 1)))\\n\", \"def __starting_point():\\n    n = int(input())\\n    l, r = 1, 10 ** 9\\n    x, mid = 0, 0\\n    while l <= r:\\n        mid = (l+r)//2\\n        if 3*mid*(mid-1) <= n:\\n            l = mid + 1\\n            x = mid\\n        else:\\n            r = mid - 1\\n    a, b = (n-3*x*(x-1))//x, (n-3*x*(x-1)) % x\\n    q, w = 0, 0\\n    if a == 0:\\n        q, w = 2*x, 0\\n        if b == 0:\\n            q = 2*x - 2\\n        else:\\n            q += -b\\n            w += 2*b\\n    elif a == 1:\\n        q, w = x-2*b, 2*x\\n    elif a == 2:\\n        q, w = -x-b, 2*x-2*b\\n    elif a == 3:\\n        q, w = -2*x+b, -2*b\\n    elif a == 4:\\n        q, w = -x+2*b, -2*x\\n    elif a == 5:\\n        q, w = x+b, -2*x+2*b\\n    print(q, w)\\n\\n\\n__starting_point()\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3\\n\",\n    \"7\\n\",\n    \"39\\n\",\n    \"14\\n\",\n    \"94\\n\",\n    \"60\\n\",\n    \"60\\n\",\n    \"59\\n\",\n    \"181994\\n\",\n    \"486639\\n\",\n    \"34514\\n\",\n    \"826594\\n\",\n    \"1000000000000000000\\n\",\n    \"854460\\n\",\n    \"164960\\n\",\n    \"618459\\n\",\n    \"496181994\\n\",\n    \"1000000000\\n\",\n    \"228939226\\n\",\n    \"973034514\\n\",\n    \"984826594\\n\",\n    \"19164960\\n\",\n    \"249781780\\n\",\n    \"851838979\\n\",\n    \"978618459\\n\",\n    \"871854460\\n\",\n    \"302486639\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"7\\n\",\n    \"8\\n\",\n    \"9\\n\",\n    \"10\\n\",\n    \"11\\n\",\n    \"12\\n\",\n    \"13\\n\",\n    \"14\\n\",\n    \"15\\n\",\n    \"16\\n\",\n    \"17\\n\",\n    \"18\\n\",\n    \"19\\n\",\n    \"20\\n\",\n    \"21\\n\",\n    \"22\\n\",\n    \"23\\n\",\n    \"24\\n\",\n    \"25\\n\",\n    \"26\\n\",\n    \"27\\n\",\n    \"28\\n\",\n    \"29\\n\",\n    \"30\\n\",\n    \"257947185131120683\\n\",\n    \"258773432604171403\\n\",\n    \"259599671487287531\\n\",\n    \"260425914665370955\\n\",\n    \"261252157843454379\\n\",\n    \"262078401021537803\\n\",\n    \"262904639904653932\\n\",\n    \"263730878787770060\\n\",\n    \"264557126260820780\\n\",\n    \"775736713043603670\\n\",\n    \"776562956221687094\\n\",\n    \"777389199399770518\\n\",\n    \"778215438282886646\\n\",\n    \"779041681460970070\\n\",\n    \"779867924639053494\\n\",\n    \"780694167817136918\\n\",\n    \"781520406700253046\\n\",\n    \"782346645583369174\\n\",\n    \"783172893056419894\\n\",\n    \"294352484134170081\\n\",\n    \"34761473798667069\\n\",\n    \"247761054921329978\\n\",\n    \"88904985049714519\\n\",\n    \"64695994584418558\\n\",\n    \"2999472947040002\\n\",\n    \"134013960807648841\\n\",\n    \"27719767248080188\\n\",\n    \"228296921967681448\\n\",\n    \"622704061396296670\\n\",\n    \"382830415035226081\\n\",\n    \"175683606088259879\\n\",\n    \"533568904697339792\\n\",\n    \"281824423976299408\\n\",\n    \"237223610332609448\\n\",\n    \"82638676376847406\\n\",\n    \"358538881902627465\\n\",\n    \"1941943667672759\\n\",\n    \"504819148029580024\\n\",\n    \"24271330411219667\\n\",\n    \"108364135632524999\\n\",\n    \"16796277375911920\\n\",\n    \"194403552286884865\\n\",\n    \"565840809656836956\\n\",\n    \"39010293491965817\\n\",\n    \"746407891412272132\\n\",\n    \"95626493228268863\\n\",\n    \"385078658398478614\\n\",\n    \"177207687885798058\\n\",\n    \"536222521732590352\\n\",\n    \"1571429132955632\\n\",\n    \"498549006180463098\\n\",\n    \"438594547809157461\\n\",\n    \"214071008058709620\\n\",\n    \"599060227806517999\\n\",\n    \"329939015655396840\\n\",\n    \"281523482448806534\\n\",\n    \"109561818187625921\\n\",\n    \"412565943716413781\\n\",\n    \"196006607922989510\\n\",\n    \"379604878823574823\\n\",\n    \"173500741457825598\\n\",\n    \"138919367769131398\\n\",\n    \"29974778103430162\\n\",\n    \"234685974076220810\\n\",\n    \"633227154929081648\\n\",\n    \"58101264340386100\\n\",\n    \"1718550904886625\\n\",\n    \"124444652733481603\\n\",\n    \"441000740540275741\\n\",\n    \"545168342596476149\\n\",\n    \"138919367769131403\\n\",\n    \"138919367984320752\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"6\\n\"\n  ],\n  \"outputs\": [\n    \"-2 0\\n\",\n    \"3 2\\n\",\n    \"5 6\\n\",\n    \"-2 -4\\n\",\n    \"8 8\\n\",\n    \"8 0\\n\",\n    \"8 0\\n\",\n    \"7 -2\\n\",\n    \"154 -492\\n\",\n    \"-33 806\\n\",\n    \"13 -214\\n\",\n    \"-769 562\\n\",\n    \"-418284973 -1154700538\\n\",\n    \"414 1068\\n\",\n    \"458 -20\\n\",\n    \"-797 -222\\n\",\n    \"21108 9228\\n\",\n    \"27596 -17836\\n\",\n    \"1516 17472\\n\",\n    \"27776 16488\\n\",\n    \"22704 -27064\\n\",\n    \"4864 384\\n\",\n    \"2815 18250\\n\",\n    \"8695 33702\\n\",\n    \"-15591 -36122\\n\",\n    \"31404 5384\\n\",\n    \"11555 -17054\\n\",\n    \"0 0\\n\",\n    \"1 2\\n\",\n    \"-1 2\\n\",\n    \"-2 0\\n\",\n    \"-1 -2\\n\",\n    \"1 -2\\n\",\n    \"2 0\\n\",\n    \"3 2\\n\",\n    \"2 4\\n\",\n    \"0 4\\n\",\n    \"-2 4\\n\",\n    \"-3 2\\n\",\n    \"-4 0\\n\",\n    \"-3 -2\\n\",\n    \"-2 -4\\n\",\n    \"0 -4\\n\",\n    \"2 -4\\n\",\n    \"3 -2\\n\",\n    \"4 0\\n\",\n    \"5 2\\n\",\n    \"4 4\\n\",\n    \"3 6\\n\",\n    \"1 6\\n\",\n    \"-1 6\\n\",\n    \"-3 6\\n\",\n    \"-4 4\\n\",\n    \"-5 2\\n\",\n    \"-6 0\\n\",\n    \"-5 -2\\n\",\n    \"-4 -4\\n\",\n    \"-3 -6\\n\",\n    \"-53995102 -586455096\\n\",\n    \"-438664202 297458800\\n\",\n    \"-252460838 -588330600\\n\",\n    \"-423141322 332249584\\n\",\n    \"-164822562 -590200144\\n\",\n    \"439863347 302538706\\n\",\n    \"-378326148 -427475264\\n\",\n    \"200309780 592993400\\n\",\n    \"489196540 209450068\\n\",\n    \"-794841963 -444342246\\n\",\n    \"-623135314 -788838484\\n\",\n    \"-328249537 -1018095738\\n\",\n    \"-719067659 -599137942\\n\",\n    \"-637165825 764022826\\n\",\n    \"559082192 -921270732\\n\",\n    \"7343027 1020257594\\n\",\n    \"-707743686 626107308\\n\",\n    \"797020774 -448632052\\n\",\n    \"604133660 -835484644\\n\",\n    \"-264428508 -626474244\\n\",\n    \"-107643660 215287324\\n\",\n    \"-287379568 574759144\\n\",\n    \"344296355 2\\n\",\n    \"146851396 293702780\\n\",\n    \"31620002 63239992\\n\",\n    \"-422711816 4\\n\",\n    \"-96124517 -192249026\\n\",\n    \"-275860421 551720850\\n\",\n    \"-911192665 10\\n\",\n    \"357225613 714451226\\n\",\n    \"-483988434 8\\n\",\n    \"-421730125 843460258\\n\",\n    \"-306498737 -612997466\\n\",\n    \"-281201952 -562403896\\n\",\n    \"-331941110 4\\n\",\n    \"-691412929 6\\n\",\n    \"-25442382 -50884744\\n\",\n    \"820421960 -4\\n\",\n    \"179893783 -2\\n\",\n    \"-380112498 8\\n\",\n    \"74824856 -149649712\\n\",\n    \"-509121532 4\\n\",\n    \"868593352 0\\n\",\n    \"-114032591 -228065170\\n\",\n    \"498801191 -997602386\\n\",\n    \"178537107 357074206\\n\",\n    \"358273010 -716546028\\n\",\n    \"486083238 -4\\n\",\n    \"-422777531 845555062\\n\",\n    \"45773778 4\\n\",\n    \"407655496 -815310984\\n\",\n    \"382358709 -764717418\\n\",\n    \"534254630 0\\n\",\n    \"-446863220 893726452\\n\",\n    \"-331631832 663263664\\n\",\n    \"306335045 612670094\\n\",\n    \"191103653 382207306\\n\",\n    \"370839563 741679126\\n\",\n    \"-255608161 511216338\\n\",\n    \"-355717526 711435056\\n\",\n    \"240486136 480972264\\n\",\n    \"-430378693 10\\n\",\n    \"99957958 199915904\\n\",\n    \"-279693865 559387730\\n\",\n    \"-459429777 -918859546\\n\",\n    \"-139165682 278331372\\n\",\n    \"23934291 -47868582\\n\",\n    \"203670197 -407340402\\n\",\n    \"-383406115 -766812218\\n\",\n    \"852579099 -2\\n\",\n    \"-430378698 0\\n\",\n    \"-215189349 -430378698\\n\",\n    \"1 2\\n\",\n    \"-1 2\\n\",\n    \"-1 -2\\n\",\n    \"1 -2\\n\",\n    \"2 0\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/615/E",
  "starter_code": ""
}