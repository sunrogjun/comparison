{
  "task_id": "APPS/48",
  "problem_id": 48,
  "prompt": "Bizon the Champion isn't just charming, he also is very smart.\n\nWhile some of us were learning the multiplication table, Bizon the Champion had fun in his own manner. Bizon the Champion painted an n \u00d7 m multiplication table, where the element on the intersection of the i-th row and j-th column equals i\u00b7j (the rows and columns of the table are numbered starting from 1). Then he was asked: what number in the table is the k-th largest number? Bizon the Champion always answered correctly and immediately. Can you repeat his success?\n\nConsider the given multiplication table. If you write out all n\u00b7m numbers from the table in the non-decreasing order, then the k-th number you write out is called the k-th largest number.\n\n\n-----Input-----\n\nThe single line contains integers n, m and k (1 \u2264 n, m \u2264 5\u00b710^5;\u00a01 \u2264 k \u2264 n\u00b7m).\n\n\n-----Output-----\n\nPrint the k-th largest number in a n \u00d7 m multiplication table.\n\n\n-----Examples-----\nInput\n2 2 2\n\nOutput\n2\n\nInput\n2 3 4\n\nOutput\n3\n\nInput\n1 10 5\n\nOutput\n5\n\n\n\n-----Note-----\n\nA 2 \u00d7 3 multiplication table looks like this:\n\n1 2 3\n\n2 4 6",
  "solutions": "[\"def main():\\n    from math import sqrt\\n    m, n, k = list(map(int, input().split()))\\n    if n < m:\\n        n, m = m, n\\n    lo, hi = 1, k + 1\\n    while lo + 1 < hi:\\n        mid = (lo + hi) // 2\\n        t = mid - 1\\n        v = min(int(sqrt(t)), m)\\n        tn, tm = (t - 1) // m, t // n\\n        vv = [t // i for i in range(tm + 1, v + 1)]\\n        if t // n * (n + m) + sum(vv) * 2 + max(min((tn - tm), len(vv)) * m, 0) - v * v - sum(\\n                vv[:max(min(tn - tm, len(vv)), 0)]) < k:\\n            lo = mid\\n        else:\\n            hi = mid\\n    print(lo)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"from sys import stdin\\n\\nn, m, k = [int(x) for x in stdin.readline().split()]\\nbe, en = 1, k + 1\\n\\nwhile be < en:\\n    mid = (be + en + 1) >> 1\\n    be1, cur = (mid + m - 1) // m, 0\\n    for i in range(1, be1):\\n        cur += m\\n\\n    for i in range(be1, n + 1):\\n        cur += (mid - 1) // i\\n\\n    if cur <= k - 1:\\n        be = mid\\n    else:\\n        en = mid - 1\\n\\nprint(be)\\n\", \"def works(X,N,M,K):\\n    #in each row, how many numbers are < X\\n    res = 0\\n    n = 1\\n    div = X/M\\n    while n < div:\\n        res += M\\n        n += 1\\n    while n < N+1:\\n        res += (X-1)//n\\n        n += 1\\n    return res\\n\\ndef solve():\\n    N, M, K = [int(s) for s in input().split()]\\n    left = 1\\n    right = K+1\\n    #we want the smallest smallest such that there are AT LEAST K-1 smaller numbers\\n    while right - left > 1:\\n        middle = (left+right)//2\\n        if works(middle,N,M,K) < K:\\n            left = middle\\n        else:\\n            right = middle\\n    #if there are exactly K-1 elements less than right, then this is our answer\\n    return left\\n\\n#for _ in range(getInt()):    \\nprint(solve())\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 2 2\\n\",\n    \"2 3 4\\n\",\n    \"1 10 5\\n\",\n    \"1 1 1\\n\",\n    \"10 1 7\\n\",\n    \"10 10 33\\n\",\n    \"500000 500000 1\\n\",\n    \"500000 500000 250000000000\\n\",\n    \"3 3 1\\n\",\n    \"3 3 2\\n\",\n    \"3 3 3\\n\",\n    \"3 3 5\\n\",\n    \"3 3 8\\n\",\n    \"3 3 9\\n\",\n    \"1 500000 74747\\n\",\n    \"500000 1 47474\\n\",\n    \"499975 499981 12345\\n\",\n    \"499997 499989 248758432143\\n\",\n    \"5 1 2\\n\",\n    \"2 2 4\\n\",\n    \"1 2 1\\n\",\n    \"2 44 36\\n\",\n    \"2 28 49\\n\",\n    \"3 48 30\\n\",\n    \"5 385 1296\\n\",\n    \"1 454 340\\n\",\n    \"1 450 399\\n\",\n    \"1 3304 218\\n\",\n    \"3 4175 661\\n\",\n    \"4 1796 2564\\n\",\n    \"2 33975 17369\\n\",\n    \"4 25555 45556\\n\",\n    \"5 17136 9220\\n\",\n    \"3 355632 94220\\n\",\n    \"5 353491 107977\\n\",\n    \"4 194790 114613\\n\",\n    \"47 5 157\\n\",\n    \"26 5 79\\n\",\n    \"40 2 3\\n\",\n    \"12 28 127\\n\",\n    \"32 12 132\\n\",\n    \"48 40 937\\n\",\n    \"45 317 6079\\n\",\n    \"18 459 7733\\n\",\n    \"38 127 1330\\n\",\n    \"25 1155 9981\\n\",\n    \"41 4600 39636\\n\",\n    \"20 2222 11312\\n\",\n    \"32 11568 36460\\n\",\n    \"48 33111 5809\\n\",\n    \"27 24692 71714\\n\",\n    \"46 356143 2399416\\n\",\n    \"25 127045 1458997\\n\",\n    \"41 246624 2596292\\n\",\n    \"264 3 775\\n\",\n    \"495 3 17\\n\",\n    \"252 5 672\\n\",\n    \"314 32 3903\\n\",\n    \"472 15 932\\n\",\n    \"302 39 4623\\n\",\n    \"318 440 57023\\n\",\n    \"403 363 932\\n\",\n    \"306 433 25754\\n\",\n    \"143 1735 246128\\n\",\n    \"447 4446 802918\\n\",\n    \"132 3890 439379\\n\",\n    \"366 45769 5885721\\n\",\n    \"123 37349 4224986\\n\",\n    \"427 46704 7152399\\n\",\n    \"357 184324 28748161\\n\",\n    \"187 425625 25103321\\n\",\n    \"345 423483 40390152\\n\",\n    \"4775 3 7798\\n\",\n    \"1035 2 2055\\n\",\n    \"3119 3 7305\\n\",\n    \"1140 18 11371\\n\",\n    \"4313 40 86640\\n\",\n    \"2396 24 55229\\n\",\n    \"2115 384 385536\\n\",\n    \"2376 308 665957\\n\",\n    \"4460 377 1197310\\n\",\n    \"2315 1673 225263\\n\",\n    \"1487 3295 736705\\n\",\n    \"3571 3828 7070865\\n\",\n    \"3082 23173 68350097\\n\",\n    \"1165 34678 7211566\\n\",\n    \"1426 26259 37212278\\n\",\n    \"2930 491026 923941798\\n\",\n    \"3191 454046 718852491\\n\",\n    \"1274 295345 301511265\\n\",\n    \"10657 3 9816\\n\",\n    \"38939 3 6757\\n\",\n    \"37107 4 28350\\n\",\n    \"19618 16 313726\\n\",\n    \"27824 40 906786\\n\",\n    \"46068 31 424079\\n\",\n    \"40716 482 14569037\\n\",\n    \"48922 150 653002\\n\",\n    \"37203 219 2355222\\n\",\n    \"23808 3322 48603931\\n\",\n    \"12090 2766 12261436\\n\",\n    \"20296 4388 29300901\\n\",\n    \"29699 38801 37684232\\n\",\n    \"17980 28231 221639883\\n\",\n    \"16148 39736 239320912\\n\",\n    \"35531 340928 9207622511\\n\",\n    \"43737 111829 865416726\\n\",\n    \"21980 353130 2233068545\\n\",\n    \"339697 4 1259155\\n\",\n    \"404625 2 132619\\n\",\n    \"226111 2 359116\\n\",\n    \"318377 38 7214261\\n\",\n    \"139863 21 1834174\\n\",\n    \"204791 41 8382971\\n\",\n    \"149281 382 51428462\\n\",\n    \"370768 123 15161219\\n\",\n    \"313975 448 85041752\\n\",\n    \"136614 3211 364472869\\n\",\n    \"201542 4833 512478332\\n\",\n    \"423029 1365 126620483\\n\",\n    \"110941 47433 2098952903\\n\",\n    \"175869 39014 3201917805\\n\",\n    \"397356 10518 874806404\\n\",\n    \"118728 168631 16269281609\\n\",\n    \"183656 409931 42943608085\\n\",\n    \"283422 407789 73398688052\\n\",\n    \"500000 500000 888888\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"7\\n\",\n    \"14\\n\",\n    \"1\\n\",\n    \"250000000000\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"6\\n\",\n    \"9\\n\",\n    \"74747\\n\",\n    \"47474\\n\",\n    \"1634\\n\",\n    \"225563648440\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"24\\n\",\n    \"42\\n\",\n    \"17\\n\",\n    \"711\\n\",\n    \"340\\n\",\n    \"399\\n\",\n    \"218\\n\",\n    \"361\\n\",\n    \"1232\\n\",\n    \"11580\\n\",\n    \"21868\\n\",\n    \"4039\\n\",\n    \"51393\\n\",\n    \"47290\\n\",\n    \"55015\\n\",\n    \"87\\n\",\n    \"42\\n\",\n    \"2\\n\",\n    \"49\\n\",\n    \"50\\n\",\n    \"364\\n\",\n    \"2160\\n\",\n    \"5684\\n\",\n    \"404\\n\",\n    \"3318\\n\",\n    \"10865\\n\",\n    \"3502\\n\",\n    \"8988\\n\",\n    \"1308\\n\",\n    \"18432\\n\",\n    \"598032\\n\",\n    \"548779\\n\",\n    \"751716\\n\",\n    \"741\\n\",\n    \"10\\n\",\n    \"328\\n\",\n    \"1345\\n\",\n    \"283\\n\",\n    \"1589\\n\",\n    \"19203\\n\",\n    \"175\\n\",\n    \"6500\\n\",\n    \"218316\\n\",\n    \"268036\\n\",\n    \"265096\\n\",\n    \"1841004\\n\",\n    \"2895390\\n\",\n    \"2256408\\n\",\n    \"9992350\\n\",\n    \"7534560\\n\",\n    \"11441760\\n\",\n    \"4254\\n\",\n    \"2040\\n\",\n    \"5024\\n\",\n    \"4830\\n\",\n    \"33496\\n\",\n    \"43102\\n\",\n    \"140250\\n\",\n    \"445248\\n\",\n    \"581462\\n\",\n    \"40950\\n\",\n    \"169290\\n\",\n    \"2696688\\n\",\n    \"51543000\\n\",\n    \"1745254\\n\",\n    \"33359110\\n\",\n    \"409544625\\n\",\n    \"267275676\\n\",\n    \"165699050\\n\",\n    \"5355\\n\",\n    \"3686\\n\",\n    \"13608\\n\",\n    \"311296\\n\",\n    \"518185\\n\",\n    \"131352\\n\",\n    \"7363656\\n\",\n    \"135716\\n\",\n    \"681502\\n\",\n    \"20824476\\n\",\n    \"3894264\\n\",\n    \"8862304\\n\",\n    \"6032628\\n\",\n    \"76707084\\n\",\n    \"76569666\\n\",\n    \"4761654318\\n\",\n    \"208223208\\n\",\n    \"638445948\\n\",\n    \"993876\\n\",\n    \"88413\\n\",\n    \"266010\\n\",\n    \"3108710\\n\",\n    \"833220\\n\",\n    \"8020256\\n\",\n    \"33762615\\n\",\n    \"4677246\\n\",\n    \"36070940\\n\",\n    \"209750632\\n\",\n    \"197440230\\n\",\n    \"32780826\\n\",\n    \"693548595\\n\",\n    \"1148848775\\n\",\n    \"222468766\\n\",\n    \"9092195490\\n\",\n    \"17438143800\\n\",\n    \"32237937640\\n\",\n    \"77856\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/448/D",
  "starter_code": ""
}