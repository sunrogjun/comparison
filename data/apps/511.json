{
  "task_id": "APPS/511",
  "problem_id": 511,
  "prompt": "Vasya is studying number theory. He has denoted a function f(a, b) such that:  f(a, 0) = 0;  f(a, b) = 1 + f(a, b - gcd(a, b)), where gcd(a, b) is the greatest common divisor of a and b. \n\nVasya has two numbers x and y, and he wants to calculate f(x, y). He tried to do it by himself, but found out that calculating this function the way he wants to do that might take very long time. So he decided to ask you to implement a program that will calculate this function swiftly.\n\n\n-----Input-----\n\nThe first line contains two integer numbers x and y (1 \u2264 x, y \u2264 10^12).\n\n\n-----Output-----\n\nPrint f(x, y).\n\n\n-----Examples-----\nInput\n3 5\n\nOutput\n3\n\nInput\n6 3\n\nOutput\n1",
  "solutions": "[\"from fractions import gcd\\nx, y = map(int, input().split())\\n\\na = int(x**.5 + 1)\\np = []\\nx1 = x\\nfor i in range(2, a + 1):\\n  if (x1 % i == 0):\\n    p.append(i)\\n    while (x1 % i == 0):\\n      x1 //= i\\nif (x1 > 1):\\n  p.append(x1)\\nans = 0\\nwhile (y != 0):\\n  r = gcd(x, y)\\n  x //= r\\n  y //= r\\n  max_can = 0\\n  for i in range(len(p)):\\n    if (x % p[i] == 0):\\n      max_can = max(max_can, y - y % p[i])\\n  ans += y - max_can\\n  y = max_can\\nprint(ans)\", \"def sqrt(n):\\n    return n**.5\\n\\ndef pfs(n):\\n    A = []\\n    while n % 2 == 0:\\n        A += [2]\\n        n //= 2\\n    return A + pfs_dummy(n, 3)\\ndef pfs_dummy(n, start):\\n    if n == 1: return []\\n    A = []\\n    for k in range(start, int(sqrt(n)+1), 2):\\n        if n % k == 0:\\n            while n % k == 0:\\n                A.append(k)\\n                n //= k\\n            return A + pfs_dummy(n, k+2)\\n    if len(A) == 0: return [n]\\n\\ndef gcd(a, b):\\n    if a > b:\\n        return gcd(b, a)\\n    if a == 0:\\n        return b\\n    if b == 0:\\n        return a\\n    return gcd(b % a, a)\\n\\n\\ns = input()\\nx = int(s.split()[0])\\ny = int(s.split()[1])\\n\\nd = gcd(x, y)\\nx //= d\\ny //= d\\n\\narr = pfs(x)\\nans = 0\\n\\nwhile y > 0:\\n    if x == 1:\\n        ans += y\\n        y = 0\\n        \\n    else:\\n        maxcand = -1\\n        for p in set(arr):\\n            maxcand = max(maxcand, y - (y % p))\\n        ans += (y - maxcand)\\n        y = maxcand\\n        e = gcd(x, y)\\n        x //= e\\n        y //= e\\n        arr1 = pfs(e)\\n        for pf in arr1:\\n            arr.remove(pf)\\n\\nprint(ans)\\n\", \"import sys\\nimport math\\nfrom fractions import gcd\\n\\n\\ndef prime_factors(n):\\n    res = []\\n    if n % 2 == 0:\\n        res.append(2)\\n    while n % 2 == 0:\\n        n //= 2\\n    for i in range(3, int(math.sqrt(n) + 1), 2):\\n        if n % i == 0:\\n            res.append(i)\\n        while n % i == 0:\\n            n //= i\\n    if n > 2:\\n        res.append(n)\\n    return res\\n\\n\\ndef main():\\n    a, b = list(map(int, sys.stdin.readline().split()))\\n    r = prime_factors(a)\\n    ans = 0\\n    while b > 1:\\n        g = gcd(a, b)\\n        b //= g\\n        a //= g\\n        v = 0\\n        for i in range(len(r)):\\n            if (a % r[i] == 0):\\n                v = max(v, b - b % r[i])\\n        ans += b - v\\n        b = v\\n\\n    if b == 1:\\n        ans += 1\\n\\n    print(ans)\\n\\n\\nmain()\\n# from fractions import gcd\\n# x, y = map(int, input().split())\\n#\\n# a = int(x**.5 + 1)\\n# p = []\\n# x1 = x\\n# for i in range(2, a + 1):\\n#   if (x1 % i == 0):\\n#     p.append(i)\\n#     while (x1 % i == 0):\\n#       x1 //= i\\n# if (x1 > 1):\\n#   p.append(x1)\\n# ans = 0\\n# while (y != 0):\\n#   r = gcd(x, y)\\n#   x //= r\\n#   y //= r\\n#   max_can = 0\\n#   for i in range(len(p)):\\n#     if (x % p[i] == 0):\\n#       max_can = max(max_can, y - y % p[i])\\n#   ans += y - max_can\\n#   y = max_can\\n# print(ans)\\n\", \"def bgcd(a,b):\\n    d=0\\n    while a%2==0 and b%2==0:\\n        a=a//2\\n        b=b//2\\n        d+=1\\n    while a!=b:\\n        if a%2==0:\\n            a=a//2\\n        elif b%2==0:\\n            b=b//2\\n        else:\\n            if a>b:\\n                a=(a-b)//2\\n            else:\\n                b=(b-a)//2\\n    g=a\\n    return g*2**d\\na,b=list(map(int,input().split()))\\ntj=[]\\naa=a\\ni=2\\nwhile i*i<=aa:\\n    if aa%i==0:\\n        d=0\\n        while aa%i==0:\\n            aa//=i\\n            d+=1\\n        tj.append([i,d,0])\\n    i+=1\\nif aa!=1:\\n    tj.append([aa,1,0])\\nii=0\\ngcd=1\\nif a==243220976099:\\n    b=0\\n    ii=580057\\nwhile b>0:\\n    f=-1\\n    for i in range(len(tj)):\\n        if tj[i][0]**(tj[i][2]+1)<=b and tj[i][2]<tj[i][1]:\\n            if f==-1 or f>b%tj[i][0]**(tj[i][2]+1):\\n                f=b%tj[i][0]**(tj[i][2]+1)\\n    if f==-1:\\n        ii+=b//gcd\\n        b=0\\n    elif f%gcd==0:\\n        b-=f\\n        ii+=f//gcd\\n        gcd=bgcd(a,b)\\n        for i in range(len(tj)):\\n            d=0\\n            gcdd=gcd\\n            while gcdd%tj[i][0]==0 and d<=tj[i][1]:\\n                gcdd//=tj[i][0]\\n                d+=1\\n            if tj[i][2]<d:\\n                tj[i][2]=d\\n        if f==0:\\n            b-=gcd\\n            ii+=1\\n    else:\\n        b-=(f//gcd+1)*gcd\\n        ii+=f//gcd+1\\nprint(ii)\\n\\n\\n        \\n    \\n\\n\\n\\n\\n\\n\\n\\n\\n\", \"a,b=list(map(int,input().split()))\\nA=[]\\nfor i in range(2,int(a**0.5)+1):\\n    while a%i==0:\\n        a//=i\\n        A.append(i)\\nif a!=1:\\n    A.append(a)\\n\\n#print(A)\\nout=0\\nwhile b>0:\\n    n=len(A)\\n    x=-1\\n    for i in range(n):\\n        if x==-1 or b%A[i]<b%A[x]:\\n            x=i\\n        \\n    if n==0:\\n        out+=b\\n        b=0\\n        break\\n\\n    A[x],A[n-1]=A[n-1],A[x]\\n    out+=b%A[n-1]\\n    b//=A.pop()\\nprint(out)\\n\\n\\t\\n\\t\\n\", \"from sys import stdin, stdout\\nfrom math import factorial\\nfrom math import log10\\n\\n\\n\\nINF = float('inf')\\n\\n\\ndef gcd(a, b):\\n    if not b:\\n        return a\\n    else:\\n        return gcd(b, a % b)\\n\\ndef f(a, b, u):\\n    if not b:\\n        return 0\\n    \\n    if not fact:\\n        return b // u\\n    \\n    mx = -INF\\n    \\n    for v in fact:\\n        if b - (b % (u * v)) > mx:\\n            mx =  max(mx, b - (b % (u * v)))\\n            cur = v\\n    \\n    while not mx and fact:\\n        fact.pop()\\n    \\n    if mx:\\n        fact.pop(fact.index(cur))\\n        return (b - mx) // u + f(a, mx, u * cur)\\n    else:\\n        return f(a, b, u)\\n\\na, b = map(int, stdin.readline().split())\\nfact = []\\n\\nq = gcd(a, b)\\n\\ni = 2\\nk = a // q\\n\\nwhile i * i <= a:\\n    while not k % i:\\n        fact.append(i)\\n        k //= i\\n    \\n    i += 1\\n    \\nif k != 1:\\n    fact.append(k)\\n    \\nstdout.write(str(f(a, b, q)))\", \"def gcd(a,b):\\n    #print(a,b)\\n    if b == 0:return a\\n    return gcd(b,a%b)\\ndef kmm(a,b):\\n    return a*b//gcd(a,b)\\na,b = list(map(int,input().split()))\\nt = 0\\nwhile b > 0:\\n    divi=[]\\n    for i in range(1,int(a**0.5)+1):\\n        if a%i == 0:\\n            divi.append(i)\\n            divi.append(a//i)\\n    divi.pop(0)\\n    mods = []\\n    for i in divi:\\n        mods.append(b%i)\\n    m = min(mods)\\n    #km = 1\\n    t += m\\n    b -= m\\n    b2 = b\\n    b //= gcd(a,b)\\n    a //= gcd(a,b2)\\n    #print(a,b)\\n    if a == 1:\\n        t+=b\\n        break\\nprint(t)\\n\", \"import sys\\nfrom math import sqrt, gcd\\nfrom itertools import product\\nfrom functools import reduce\\nfrom operator import mul\\n\\n\\ndef get_primes(n: int):\\n    from itertools import chain\\n    from array import array\\n    primes = [2, 3]\\n    is_prime = (array('b', (0, 0, 1, 1, 0, 1, 0)) +\\n                array('b', (1, 0, 0, 0, 1, 0))*((n-1)//6))\\n\\n    for i in chain.from_iterable((list(range(5, n+1, 6)), list(range(7, n+1, 6)))):\\n        if is_prime[i]:\\n            primes.append(i)\\n            for j in range(i*3, n+1, i*2):\\n                is_prime[j] = 0\\n\\n    return primes\\n\\n\\nx, y = list(map(int, input().split()))\\nprimes = get_primes(int(sqrt(x))+1)\\n_x = x\\n\\npfac, pfac_cnt = [], []\\nfor p in primes:\\n    if _x % p == 0:\\n        pfac.append(p)\\n        pfac_cnt.append(0)\\n        while _x % p == 0:\\n            pfac_cnt[-1] += 1\\n            _x //= p\\nif _x > 1:\\n    pfac.append(_x)\\n    pfac_cnt.append(1)\\n\\nif not pfac:\\n    print(y)\\n    return\\n\\n\\ndef solve(y, g):\\n    z = 0\\n    for ea in product(*(list(range(e+1)) for e in pfac_cnt)):\\n        divisor = reduce(mul, (p**e for p, e in zip(pfac, ea)))\\n        if divisor % g == 0 and divisor > g:\\n            z = max(z, divisor * (y // divisor))\\n\\n    return z\\n\\n\\nans = 0\\n\\nwhile y:\\n    g = gcd(x, y)\\n    z = solve(y, g)\\n    ans += (y - z) // g\\n    y = z\\n\\nprint(ans)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3 5\\n\",\n    \"6 3\\n\",\n    \"1000000009 1000000008\\n\",\n    \"1000000007 1000000006\\n\",\n    \"2000000018 2000000017\\n\",\n    \"1000000000000 1\\n\",\n    \"1000000000000 1000000000000\\n\",\n    \"1 1000000000000\\n\",\n    \"100000000000 100000000000\\n\",\n    \"1 100000000000\\n\",\n    \"100000000000 1\\n\",\n    \"1000000009 1000000000000\\n\",\n    \"1000000000000 1000000007\\n\",\n    \"124556361363 136616361\\n\",\n    \"153136316 5153643\\n\",\n    \"15316888 315347573\\n\",\n    \"153907320131 11351356\\n\",\n    \"3 135415909531\\n\",\n    \"1 157831805135\\n\",\n    \"1000000009 1000000010\\n\",\n    \"767389814 1136900240\\n\",\n    \"999966000289 999966000288\\n\",\n    \"150917076326 287596534405\\n\",\n    \"49544527863 318162327511\\n\",\n    \"999999999989 999999999988\\n\",\n    \"339860248091 167735311934\\n\",\n    \"414654652183 366894205623\\n\",\n    \"450002679907 706296532001\\n\",\n    \"243220976099 419527537895\\n\",\n    \"3 100000007\\n\",\n    \"999962000357 100000000000\\n\",\n    \"1000000007 1000000000000\\n\",\n    \"963761198400 999999999997\\n\",\n    \"3999999979 3999999978\\n\",\n    \"154210543621 542105421054\\n\",\n    \"191480607107 629918602611\\n\",\n    \"516832075292 844855235404\\n\",\n    \"598718273423 543198266606\\n\",\n    \"963761198400 787405476727\\n\",\n    \"283286197375 459489599842\\n\",\n    \"963761198400 33129788784\\n\",\n    \"104338884626 894039957000\\n\",\n    \"963761198400 394879907912\\n\",\n    \"324161862590 324161862595\\n\",\n    \"450002679907 2\\n\",\n    \"999999999958 999999999957\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"1\\n\",\n    \"1000000008\\n\",\n    \"1000000006\\n\",\n    \"1000000009\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1000000000000\\n\",\n    \"1\\n\",\n    \"100000000000\\n\",\n    \"1\\n\",\n    \"999992008\\n\",\n    \"4\\n\",\n    \"1617\\n\",\n    \"1288412\\n\",\n    \"59298\\n\",\n    \"16996\\n\",\n    \"45138636511\\n\",\n    \"157831805135\\n\",\n    \"2\\n\",\n    \"14254\\n\",\n    \"1999964\\n\",\n    \"14306025\\n\",\n    \"6965053451\\n\",\n    \"999999999988\\n\",\n    \"1843245188\\n\",\n    \"366894205623\\n\",\n    \"55285\\n\",\n    \"580057\\n\",\n    \"33333337\\n\",\n    \"200044\\n\",\n    \"999994006\\n\",\n    \"20\\n\",\n    \"3999999978\\n\",\n    \"96099620\\n\",\n    \"55476781293\\n\",\n    \"103412121\\n\",\n    \"1769375540\\n\",\n    \"45\\n\",\n    \"1409627228\\n\",\n    \"30\\n\",\n    \"40428\\n\",\n    \"21\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"499999999979\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/837/E",
  "starter_code": ""
}