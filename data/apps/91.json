{
  "task_id": "APPS/91",
  "problem_id": 91,
  "prompt": "Suppose you are performing the following algorithm. There is an array $v_1, v_2, \\dots, v_n$ filled with zeroes at start. The following operation is applied to the array several times \u2014 at $i$-th step ($0$-indexed) you can:   either choose position $pos$ ($1 \\le pos \\le n$) and increase $v_{pos}$ by $k^i$;  or not choose any position and skip this step. \n\nYou can choose how the algorithm would behave on each step and when to stop it. The question is: can you make array $v$ equal to the given array $a$ ($v_j = a_j$ for each $j$) after some step?\n\n\n-----Input-----\n\nThe first line contains one integer $T$ ($1 \\le T \\le 1000$) \u2014 the number of test cases. Next $2T$ lines contain test cases \u2014 two lines per test case.\n\nThe first line of each test case contains two integers $n$ and $k$ ($1 \\le n \\le 30$, $2 \\le k \\le 100$) \u2014 the size of arrays $v$ and $a$ and value $k$ used in the algorithm.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^{16}$) \u2014 the array you'd like to achieve.\n\n\n-----Output-----\n\nFor each test case print YES (case insensitive) if you can achieve the array $a$ after some step or NO (case insensitive) otherwise.\n\n\n-----Example-----\nInput\n5\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n\nOutput\nYES\nYES\nNO\nNO\nYES\n\n\n\n-----Note-----\n\nIn the first test case, you can stop the algorithm before the $0$-th step, or don't choose any position several times and stop the algorithm.\n\nIn the second test case, you can add $k^0$ to $v_1$ and stop the algorithm.\n\nIn the third test case, you can't make two $1$ in the array $v$.\n\nIn the fifth test case, you can skip $9^0$ and $9^1$, then add $9^2$ and $9^3$ to $v_3$, skip $9^4$ and finally, add $9^5$ to $v_2$.",
  "solutions": "[\"t = int(input())\\nfor _ in range(t):\\n    n,k = list(map(int,input().split()))\\n    a = list(map(int,input().split()))\\n    for i in range(60, -1, -1):\\n        m = k ** i\\n        for j in range(n):\\n            if a[j] >= m:\\n                a[j] -= m\\n                break\\n    if all(i == 0 for i in a):\\n        print('YES')\\n    else:\\n        print('NO')\\n\", \"from sys import stdin,stdout                           #\\nimport math                                            #\\nimport heapq                                           #\\n                                                       #\\nt = 1                                                  #\\ndef aint():                                            #\\n\\treturn int(input().strip())                        #\\ndef lint():                                            #\\n\\treturn list(map(int,input().split()))              #\\ndef fint():                                            #\\n\\treturn list(map(int,stdin.readline().split()))     #\\n                                                       #\\t\\n########################################################\\n\\ndef main():\\n\\tn,k=map(int,input().split())\\n\\tcnt=[0]*100\\n\\tfor i in lint():\\n\\t\\tfor j in range(60):\\n\\t\\t\\tcnt[j]+=i%k\\n\\t\\t\\ti//=k\\n\\tfor i in cnt:\\n\\t\\tif i>1:\\n\\t\\t\\tprint(\\\"NO\\\")\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\tprint(\\\"YES\\\")\\n\\nt=int(input())\\n\\n########################################################\\nfor i in range(t):                                     #\\n\\tmain()                                             #\", \"from sys import stdin\\nfor testcase in range(int(stdin.readline())):\\n    n, k = list(map(int, stdin.readline().split()))\\n    has_ans = True\\n    picked = set()\\n    for num in map(int, stdin.readline().split()):\\n        i = 0\\n        while (num > 0) and has_ans:\\n            while num % k == 0:\\n                num //= k\\n                i += 1\\n            if i in picked:\\n                has_ans = False\\n                break\\n            picked.add(i)\\n            num -= 1\\n        if not has_ans:\\n            break\\n    print('YES' if has_ans else 'NO')\\n\\n\", \"import sys\\ninput=lambda: sys.stdin.readline().rstrip()\\nt=int(input())\\nfor _ in range(t):\\n  n,k=list(map(int,input().split()))\\n  A=[int(i) for i in input().split()]\\n  B=[0]*100\\n  for a in A:\\n    ct=0\\n    while a:\\n      B[ct]+=a%k\\n      a//=k\\n      ct+=1\\n  print(\\\"YES\\\" if max(B)<=1 else \\\"NO\\\")\\n\", \"from math import inf\\nt = int(input())\\nfor q in range(t):\\n    n, k = [int(i) for i in input().split()]\\n    L = [int(i) for i in input().split()]\\n    F = [0] * 60\\n    for i in L:\\n        num = i\\n        step = 0\\n        while num:\\n            F[step] += num % k\\n            num //= k\\n            step += 1\\n    flag = True\\n    for i in F:\\n        if i > 1:\\n            flag = False\\n            break\\n    if flag:\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\n    \\n\", \"t = int(input())\\nfor case_num in range(t):\\n    n, k = list(map(int, input().split(' ')))\\n    a = list(map(int, input().split(' ')))\\n    d = dict()\\n    for i in a:\\n        num = i\\n        level = 0\\n        while num > 0:\\n            if not level in d:\\n                d[level] = 0\\n            d[level] += num % k\\n            num //= k\\n            level += 1\\n    ok = True\\n    for i in d:\\n        if d[i] > 1:\\n            ok = False\\n            break\\n    print(\\\"YES\\\" if ok else \\\"NO\\\")\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"5\\n4 100\\n0 0 0 0\\n1 2\\n1\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\\n\",\n    \"3\\n5 2\\n1 2 4 8 17\\n2 3\\n1 2\\n4 3\\n10 4 13 12\\n\",\n    \"1\\n1 10\\n10000000000000000\\n\",\n    \"1\\n1 100\\n10000000000000000\\n\",\n    \"1\\n2 2\\n2251799813685248 2251799813685248\\n\",\n    \"1\\n2 2\\n9007199254740992 9007199254740992\\n\",\n    \"1\\n2 2\\n1099511627776 1099511627776\\n\",\n    \"1\\n2 2\\n1125899906842624 1125899906842624\\n\",\n    \"1\\n2 2\\n1024 3072\\n\",\n    \"1\\n23 100\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\\n\",\n    \"1\\n2 10\\n5 20\\n\",\n    \"1\\n1 3\\n2\\n\",\n    \"2\\n1 16\\n100\\n1 16\\n1000\\n\",\n    \"1\\n1 9\\n18\\n\",\n    \"1\\n1 16\\n255\\n\",\n    \"1\\n1 16\\n1000\\n\",\n    \"1\\n1 4\\n3\\n\",\n    \"1\\n1 63\\n3735006104496620\\n\",\n    \"1\\n1 9\\n11\\n\",\n    \"1\\n1 8\\n12\\n\",\n    \"1\\n1 4\\n77\\n\",\n    \"1\\n1 6\\n3\\n\",\n    \"1\\n1 3\\n6\\n\",\n    \"1\\n1 4\\n9\\n\",\n    \"1\\n1 9\\n2\\n\",\n    \"1\\n1 5\\n4\\n\",\n    \"1\\n1 3\\n7\\n\",\n    \"1\\n2 4\\n100 1\\n\",\n    \"2\\n9 19\\n8502576973597188 9105058903836444 7163781177832759 8144600471655789 9301214079343755 3226532954663459 3517141006105818 7032582717385788 3894225654898315\\n30 53\\n418195493 148877 1174711139837 2809 3299763591802133 7890481 1 62259690411361 22164361129 53 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"1\\n28 2\\n281474976710656 0 281474976710656 70368752566272 2251799814733824 33554432 0 352118598795264 17600775979008 134217728 0 34359738368 0 1125900175278208 0 274884214784 65568 2 0 274877906944 8657182720 0 1099511627776 524288 140771848355840 4503599627370496 17592186044672 34359738896\\n\",\n    \"2\\n4 100\\n0 0 0 0\\n1 8\\n100\\n\",\n    \"5\\n4 100\\n0 0 0 0\\n1 5\\n3\\n3 4\\n1 4 1\\n3 2\\n0 1 3\\n3 9\\n0 59049 810\\n\",\n    \"1\\n1 4\\n2\\n\",\n    \"3\\n2 9\\n0 18\\n4 100\\n0 0 0 0\\n1 2\\n1\\n\",\n    \"1\\n2 4\\n9 16\\n\",\n    \"2\\n4 100\\n0 0 0 0\\n1 8\\n70\\n\",\n    \"1\\n1 24\\n137524409\\n\",\n    \"1\\n1 48\\n221184\\n\",\n    \"1\\n2 3\\n1 6\\n\",\n    \"1\\n2 3\\n6 9\\n\",\n    \"1\\n2 2\\n4398046511104 4398046511104\\n\",\n    \"1\\n3 6\\n5 6 36\\n\",\n    \"1\\n1 6\\n41\\n\",\n    \"1\\n2 9\\n747 81\\n\",\n    \"1\\n20 2\\n1099511627776 2199023255552 4398046511104 8796093022208 17592186044416 35184372088832 70368744177664 140737488355328 281474976710656 562949953421312 1125899906842624 1125899906842624 1125899906842624 1125899906842624 1125899906842624 1125899906842624 1125899906842624 1125899906842624 1125899906842624 1125899906842624\\n\",\n    \"1\\n1 9\\n83\\n\",\n    \"1\\n1 6\\n12\\n\",\n    \"1\\n1 42\\n622309758\\n\",\n    \"1\\n1 100\\n3\\n\",\n    \"1\\n1 7\\n14\\n\",\n    \"1\\n1 3\\n16\\n\",\n    \"1\\n2 2\\n1125899906842624 1125899906842625\\n\",\n    \"1\\n30 2\\n16777216 33554432 67108864 134217728 268435456 536870912 1073741824 2147483648 4294967296 8589934592 17179869184 34359738368 68719476736 137438953472 274877906944 549755813888 1099511627776 2199023255552 4398046511104 8796093022208 17592186044416 35184372088832 70368744177664 140737488355328 281474976710656 562949953421312 1125899906842624 2251799813685248 4503599627370496 9007199254740992\\n\",\n    \"1\\n1 9\\n5\\n\",\n    \"1\\n2 2\\n1099511627776 1099511627775\\n\",\n    \"1\\n1 5\\n27\\n\",\n    \"7\\n1 3\\n6\\n2 3\\n3 6\\n2 2\\n7 25\\n1 7\\n55\\n1 7\\n9\\n2 2\\n129 7\\n1 100\\n1000000000000000\\n\",\n    \"1\\n1 84\\n16665\\n\",\n    \"1\\n1 84\\n10000000000000000\\n\",\n    \"1\\n2 2\\n2147483648 2147483648\\n\",\n    \"1\\n1 16\\n100\\n\",\n    \"1\\n1 10\\n5\\n\",\n    \"2\\n1 3\\n2\\n2 10\\n5 20\\n\",\n    \"1\\n1 10\\n2\\n\",\n    \"1\\n1 36\\n536806176\\n\",\n    \"1\\n4 3\\n2 6 18 54\\n\",\n    \"1\\n1 3\\n15\\n\",\n    \"1\\n4 3\\n2 6 18 27\\n\",\n    \"1\\n2 3\\n9 6\\n\",\n    \"1\\n2 2\\n9007199254740993 1\\n\",\n    \"1\\n1 77\\n1692004854\\n\",\n    \"1\\n1 3\\n29\\n\",\n    \"1\\n1 100\\n1000000000000000\\n\",\n    \"8\\n2 2\\n1099511627776 1099511627775\\n1 3\\n6\\n2 3\\n3 6\\n2 2\\n7 25\\n1 7\\n55\\n1 7\\n9\\n2 2\\n129 7\\n1 100\\n1000000000000000\\n\",\n    \"1\\n2 3\\n18 3\\n\",\n    \"1\\n1 4\\n72\\n\",\n    \"1\\n1 12\\n11\\n\",\n    \"1\\n2 2\\n8 8\\n\",\n    \"2\\n30 2\\n1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912\\n1 3\\n6\\n\",\n    \"2\\n3 56\\n19 0 3\\n4 87\\n7570 0 0 87\\n\",\n    \"1\\n1 9\\n99\\n\",\n    \"1\\n1 100\\n99\\n\",\n    \"1\\n1 9\\n324\\n\",\n    \"2\\n2 2\\n9007199254740992 9007199254740992\\n2 2\\n9007199254740992 9007199254740992\\n\",\n    \"1\\n1 100\\n90\\n\",\n    \"8\\n1 3\\n0\\n1 3\\n1\\n1 3\\n2\\n1 3\\n3\\n1 3\\n4\\n1 3\\n5\\n1 3\\n6\\n1 3\\n7\\n\",\n    \"1\\n2 2\\n1125899906842623 562949953421312\\n\",\n    \"1\\n1 55\\n83733937890626\\n\",\n    \"1\\n2 100\\n10000 10011\\n\",\n    \"1\\n1 3\\n54\\n\",\n    \"1\\n2 100\\n1 10000000000000000\\n\",\n    \"1\\n1 41\\n1280\\n\",\n    \"1\\n1 100\\n9999999999999999\\n\",\n    \"1\\n2 79\\n156525431694479 1\\n\",\n    \"1\\n1 3\\n14\\n\",\n    \"1\\n2 2\\n4503599627370495 2251799813685248\\n\",\n    \"1\\n2 2\\n4503599627370496 4503599627370496\\n\",\n    \"1\\n2 2\\n10000000000000000 9007199254740992\\n\",\n    \"1\\n3 2\\n1 1 1\\n\",\n    \"1\\n3 2\\n4503599627370495 2251799813685248 0\\n\",\n    \"1\\n1 2\\n9007199254740991\\n\",\n    \"3\\n3 2\\n4503599627370495 2251799813685248 0\\n4 2\\n4503599627370495 2251799813685248 0 0\\n2 3\\n114514 1919810\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\nYES\\nNO\\nNO\\nYES\\n\",\n    \"NO\\nNO\\nNO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\nNO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\nYES\\n\",\n    \"NO\\n\",\n    \"YES\\nNO\\n\",\n    \"YES\\nNO\\nNO\\nNO\\nYES\\n\",\n    \"NO\\n\",\n    \"NO\\nYES\\nYES\\n\",\n    \"NO\\n\",\n    \"YES\\nNO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\nNO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\nNO\\n\",\n    \"NO\\nYES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\nNO\\n\",\n    \"NO\\n\",\n    \"YES\\nYES\\nNO\\nYES\\nYES\\nNO\\nNO\\nNO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\nNO\\nNO\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1312/C",
  "starter_code": ""
}