{
  "task_id": "APPS/174",
  "problem_id": 174,
  "prompt": "Implication is a function of two logical arguments, its value is false if and only if the value of the first argument is true and the value of the second argument is false. \n\nImplication is written by using character '$\\rightarrow$', and the arguments and the result of the implication are written as '0' (false) and '1' (true). According to the definition of the implication: \n\n$0 \\rightarrow 0 = 1$ \n\n$0 \\rightarrow 1 = 1$\n\n$1 \\rightarrow 0 = 0$ \n\n$1 \\rightarrow 1 = 1$\n\nWhen a logical expression contains multiple implications, then when there are no brackets, it will be calculated from left to fight. For example,\n\n$0 \\rightarrow 0 \\rightarrow 0 =(0 \\rightarrow 0) \\rightarrow 0 = 1 \\rightarrow 0 = 0$. \n\nWhen there are brackets, we first calculate the expression in brackets. For example,\n\n$0 \\rightarrow(0 \\rightarrow 0) = 0 \\rightarrow 1 = 1$.\n\nFor the given logical expression $a_{1} \\rightarrow a_{2} \\rightarrow a_{3} \\rightarrow \\cdots \\cdots a_{n}$ determine if it is possible to place there brackets so that the value of a logical expression is false. If it is possible, your task is to find such an arrangement of brackets.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 100 000) \u2014 the number of arguments in a logical expression.\n\nThe second line contains n numbers a_1, a_2, ..., a_{n} ($a_{i} \\in \\{0,1 \\}$), which means the values of arguments in the expression in the order they occur.\n\n\n-----Output-----\n\nPrint \"NO\" (without the quotes), if it is impossible to place brackets in the expression so that its value was equal to 0.\n\nOtherwise, print \"YES\" in the first line and the logical expression with the required arrangement of brackets in the second line.\n\nThe expression should only contain characters '0', '1', '-' (character with ASCII code 45), '>' (character with ASCII code 62), '(' and ')'. Characters '-' and '>' can occur in an expression only paired like that: (\"->\") and represent implication. The total number of logical arguments (i.e. digits '0' and '1') in the expression must be equal to n. The order in which the digits follow in the expression from left to right must coincide with a_1, a_2, ..., a_{n}.\n\nThe expression should be correct. More formally, a correct expression is determined as follows:  Expressions \"0\", \"1\" (without the quotes) are correct.  If v_1, v_2 are correct, then v_1->v_2 is a correct expression.  If v is a correct expression, then (v) is a correct expression. \n\nThe total number of characters in the resulting expression mustn't exceed 10^6.\n\nIf there are multiple possible answers, you are allowed to print any of them.\n\n\n-----Examples-----\nInput\n4\n0 1 1 0\n\nOutput\nYES\n(((0)->1)->(1->0))\n\nInput\n2\n1 1\n\nOutput\nNO\n\nInput\n1\n0\n\nOutput\nYES\n0",
  "solutions": "[\"x = int(input())\\n\\nseq = list(map(int, input().split(' ')))\\n\\nif seq == [0]:\\n    print(\\\"YES\\\")\\n    print(0)\\n\\nelif seq == [0, 0]:\\n    print(\\\"NO\\\")\\n\\nelif seq == [1, 0]:\\n    print(\\\"YES\\\")\\n    print('1->0')\\n\\nelif seq == [0, 0, 0]:\\n    print(\\\"YES\\\")\\n    print(\\\"(0->0)->0\\\")\\n\\nelif seq == [1, 0, 0]:\\n    print(\\\"NO\\\")\\n\\nelif seq[x-1] == 1:\\n    print(\\\"NO\\\")\\n\\n#ENDS IN 1\\n    \\nelif seq[x-2] == 1:\\n    print(\\\"YES\\\")\\n\\n    print('->'.join([str(x) for x in seq]))\\n\\n\\n#ENDS IN 10\\n\\nelif seq == [1] * (x-2) + [0, 0]:\\n    print(\\\"NO\\\")\\n\\n#000 BELOW\\nelif seq[x-3] == 0:\\n    a = ('->'.join([str(x) for x in seq][0:x-3]))\\n    print(\\\"YES\\\")\\n\\n    print(a + '->(0->0)->0')\\n\\n#100\\nelse:\\n    last = 0\\n    for i in range(x-1):\\n        if seq[i] == 0 and seq[i+1] == 1:\\n            last = i\\n    seq[last] = '(0'\\n    seq[last+1] = '(1'\\n    seq[x-2] = '0))'\\n    print(\\\"YES\\\")\\n    print('->'.join([str(x) for x in seq]))\\n\", \"def f(a):\\n\\tif len(a) == 1:\\n\\t\\tif a[0] == 0:\\n\\t\\t\\tprint(\\\"YES\\\\n0\\\")\\n\\t\\t\\treturn\\n\\t\\telse:\\n\\t\\t\\tprint(\\\"NO\\\")\\n\\t\\t\\treturn\\n\\tif a[-1] == 1:\\n\\t\\tprint(\\\"NO\\\")\\n\\t\\treturn\\n\\tif a[-2] == 1:\\n\\t\\tprint(\\\"YES\\\")\\n\\t\\tprint(\\\"->\\\".join(str(x) for x in a))\\n\\t\\treturn\\n\\telif len(a) == 2:\\n\\t\\tprint(\\\"NO\\\")\\n\\t\\treturn\\n\\telif len(a) >= 3 and a[-3] == 0:\\n\\t\\ta[-3] = '(0'\\n\\t\\ta[-2] = '0)'\\n\\t\\tprint(\\\"YES\\\\n\\\" + \\\"->\\\".join(str(x) for x in a))\\n\\t\\treturn\\t\\t\\n\\tfor i in range(len(a) - 3, -1, -1):\\n\\t\\tif a[i] == 0:\\n\\t\\t\\ta[i] = '(' + str(a[i])\\n\\t\\t\\ta[i+1] = '(' + str(a[i+1])\\n\\t\\t\\ta[-2] = '0))'\\n\\t\\t\\tprint(\\\"YES\\\\n\\\" + \\\"->\\\".join(str(x) for x in a))\\n\\t\\t\\treturn\\n\\tprint(\\\"NO\\\")\\n\\treturn\\n\\nn = int(input())\\na = list(int(x) for x in input().split())\\nf(a)\\n\", \"def f(a):\\n    if len(a) == 1:\\n        if a[0] == 0:\\n            print(\\\"YES\\\\n0\\\")\\n            return\\n        else:\\n            print(\\\"NO\\\")\\n            return\\n    if a[-1] == 1:\\n        print(\\\"NO\\\")\\n        return\\n    if a[-2] == 1:\\n        print(\\\"YES\\\")\\n        print(\\\"->\\\".join(str(x) for x in a))\\n        return\\n    elif len(a) == 2:\\n        print(\\\"NO\\\")\\n        return\\n    elif len(a) >= 3 and a[-3] == 0:\\n        a[-3] = '(0'\\n        a[-2] = '0)'\\n        print(\\\"YES\\\\n\\\" + \\\"->\\\".join(str(x) for x in a))\\n        return      \\n    for i in range(len(a) - 3, -1, -1):\\n        if a[i] == 0:\\n            a[i] = '(' + str(a[i])\\n            a[i+1] = '(' + str(a[i+1])\\n            a[-2] = '0))'\\n            print(\\\"YES\\\\n\\\" + \\\"->\\\".join(str(x) for x in a))\\n            return\\n    print(\\\"NO\\\")\\n    return\\n\\nn = int(input())\\na = list(int(x) for x in input().split())\\nf(a)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4\\n0 1 1 0\\n\",\n    \"2\\n1 1\\n\",\n    \"1\\n0\\n\",\n    \"4\\n0 0 0 0\\n\",\n    \"6\\n0 0 0 0 0 1\\n\",\n    \"20\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"20\\n1 1 1 0 1 0 1 1 0 1 1 1 0 1 0 0 1 1 0 0\\n\",\n    \"1\\n1\\n\",\n    \"2\\n0 0\\n\",\n    \"2\\n0 1\\n\",\n    \"2\\n1 0\\n\",\n    \"3\\n0 0 0\\n\",\n    \"3\\n0 0 1\\n\",\n    \"3\\n0 1 0\\n\",\n    \"3\\n0 1 1\\n\",\n    \"3\\n1 0 0\\n\",\n    \"3\\n1 0 1\\n\",\n    \"3\\n1 1 0\\n\",\n    \"3\\n1 1 1\\n\",\n    \"4\\n0 0 0 1\\n\",\n    \"4\\n0 0 1 0\\n\",\n    \"4\\n0 0 1 1\\n\",\n    \"4\\n0 1 0 0\\n\",\n    \"4\\n0 1 0 1\\n\",\n    \"4\\n0 1 1 1\\n\",\n    \"4\\n1 0 0 0\\n\",\n    \"4\\n1 0 0 1\\n\",\n    \"4\\n1 0 1 0\\n\",\n    \"4\\n1 0 1 1\\n\",\n    \"4\\n1 1 0 0\\n\",\n    \"4\\n1 1 0 1\\n\",\n    \"4\\n1 1 1 0\\n\",\n    \"4\\n1 1 1 1\\n\",\n    \"5\\n0 0 0 0 0\\n\",\n    \"5\\n0 0 0 0 1\\n\",\n    \"5\\n0 0 0 1 0\\n\",\n    \"5\\n0 0 0 1 1\\n\",\n    \"5\\n0 0 1 0 0\\n\",\n    \"5\\n0 0 1 0 1\\n\",\n    \"5\\n0 0 1 1 0\\n\",\n    \"5\\n0 0 1 1 1\\n\",\n    \"5\\n0 1 0 0 0\\n\",\n    \"5\\n0 1 0 0 1\\n\",\n    \"5\\n0 1 0 1 0\\n\",\n    \"5\\n0 1 0 1 1\\n\",\n    \"5\\n0 1 1 0 0\\n\",\n    \"5\\n0 1 1 0 1\\n\",\n    \"5\\n0 1 1 1 0\\n\",\n    \"5\\n0 1 1 1 1\\n\",\n    \"5\\n1 0 0 0 0\\n\",\n    \"5\\n1 0 0 0 1\\n\",\n    \"5\\n1 0 0 1 0\\n\",\n    \"5\\n1 0 0 1 1\\n\",\n    \"5\\n1 0 1 0 0\\n\",\n    \"5\\n1 0 1 0 1\\n\",\n    \"5\\n1 0 1 1 0\\n\",\n    \"5\\n1 0 1 1 1\\n\",\n    \"5\\n1 1 0 0 0\\n\",\n    \"5\\n1 1 0 0 1\\n\",\n    \"5\\n1 1 0 1 0\\n\",\n    \"5\\n1 1 0 1 1\\n\",\n    \"5\\n1 1 1 0 0\\n\",\n    \"5\\n1 1 1 0 1\\n\",\n    \"5\\n1 1 1 1 0\\n\",\n    \"5\\n1 1 1 1 1\\n\",\n    \"6\\n1 1 1 1 0 0\\n\",\n    \"6\\n0 1 1 1 0 0\\n\",\n    \"6\\n1 1 1 0 0 0\\n\",\n    \"6\\n0 0 0 0 0 0\\n\",\n    \"6\\n1 0 0 1 0 0\\n\",\n    \"6\\n1 0 1 1 0 0\\n\",\n    \"6\\n0 0 1 1 0 0\\n\",\n    \"6\\n0 0 0 1 0 0\\n\",\n    \"6\\n0 0 1 0 0 0\\n\",\n    \"200\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0\\n\",\n    \"40\\n1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0\\n\",\n    \"40\\n0 0 1 0 0 0 0 0 0 1 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0\\n\",\n    \"40\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0\\n\",\n    \"40\\n1 1 0 1 0 1 1 1 1 1 0 1 0 0 1 1 1 0 0 0 0 1 1 1 1 1 0 1 0 0 0 1 0 1 0 0 1 0 0 0\\n\",\n    \"45\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"20\\n1 1 1 1 1 0 0 0 0 0 1 1 1 1 1 0 0 0 0 0\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\n0->1->1->0\\n\",\n    \"NO\\n\",\n    \"YES\\n0\\n\",\n    \"YES\\n0->(0->0)->0\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1->1->1->0->1->0->1->1->0->1->1->1->0->1->0->(0->(1->1->0))->0\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1->0\\n\",\n    \"YES\\n(0->0)->0\\n\",\n    \"NO\\n\",\n    \"YES\\n0->1->0\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1->1->0\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n0->0->1->0\\n\",\n    \"NO\\n\",\n    \"YES\\n(0->(1->0))->0\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1->(0->0)->0\\n\",\n    \"NO\\n\",\n    \"YES\\n1->0->1->0\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1->1->1->0\\n\",\n    \"NO\\n\",\n    \"YES\\n0->0->(0->0)->0\\n\",\n    \"NO\\n\",\n    \"YES\\n0->0->0->1->0\\n\",\n    \"NO\\n\",\n    \"YES\\n0->(0->(1->0))->0\\n\",\n    \"NO\\n\",\n    \"YES\\n0->0->1->1->0\\n\",\n    \"NO\\n\",\n    \"YES\\n0->1->(0->0)->0\\n\",\n    \"NO\\n\",\n    \"YES\\n0->1->0->1->0\\n\",\n    \"NO\\n\",\n    \"YES\\n(0->(1->1->0))->0\\n\",\n    \"NO\\n\",\n    \"YES\\n0->1->1->1->0\\n\",\n    \"NO\\n\",\n    \"YES\\n1->0->(0->0)->0\\n\",\n    \"NO\\n\",\n    \"YES\\n1->0->0->1->0\\n\",\n    \"NO\\n\",\n    \"YES\\n1->(0->(1->0))->0\\n\",\n    \"NO\\n\",\n    \"YES\\n1->0->1->1->0\\n\",\n    \"NO\\n\",\n    \"YES\\n1->1->(0->0)->0\\n\",\n    \"NO\\n\",\n    \"YES\\n1->1->0->1->0\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n1->1->1->1->0\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n(0->(1->1->1->0))->0\\n\",\n    \"YES\\n1->1->1->(0->0)->0\\n\",\n    \"YES\\n0->0->0->(0->0)->0\\n\",\n    \"YES\\n1->0->(0->(1->0))->0\\n\",\n    \"YES\\n1->(0->(1->1->0))->0\\n\",\n    \"YES\\n0->(0->(1->1->0))->0\\n\",\n    \"YES\\n0->0->(0->(1->0))->0\\n\",\n    \"YES\\n0->0->1->(0->0)->0\\n\",\n    \"NO\\n\",\n    \"YES\\n1->0->1->0->1->0->1->(0->(1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->0))->0\\n\",\n    \"YES\\n0->0->1->0->0->0->0->0->0->1->1->0->1->0->1->0->1->(0->(1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->0))->0\\n\",\n    \"YES\\n(0->(1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->1->0))->0\\n\",\n    \"YES\\n1->1->0->1->0->1->1->1->1->1->0->1->0->0->1->1->1->0->0->0->0->1->1->1->1->1->0->1->0->0->0->1->0->1->0->0->1->(0->0)->0\\n\",\n    \"YES\\n0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->0->(0->0)->0\\n\",\n    \"YES\\n1->1->1->1->1->0->0->0->0->0->1->1->1->1->1->0->0->(0->0)->0\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/550/E",
  "starter_code": ""
}