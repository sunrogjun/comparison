{
  "task_id": "APPS/138",
  "problem_id": 138,
  "prompt": "Little girl Alyona is in a shop to buy some copybooks for school. She study four subjects so she wants to have equal number of copybooks for each of the subjects. There are three types of copybook's packs in the shop: it is possible to buy one copybook for a rubles, a pack of two copybooks for b rubles, and a pack of three copybooks for c rubles. Alyona already has n copybooks.\n\nWhat is the minimum amount of rubles she should pay to buy such number of copybooks k that n + k is divisible by 4? There are infinitely many packs of any type in the shop. Alyona can buy packs of different type in the same purchase.\n\n\n-----Input-----\n\nThe only line contains 4 integers n, a, b, c (1 \u2264 n, a, b, c \u2264 10^9).\n\n\n-----Output-----\n\nPrint the minimum amount of rubles she should pay to buy such number of copybooks k that n + k is divisible by 4.\n\n\n-----Examples-----\nInput\n1 1 3 4\n\nOutput\n3\n\nInput\n6 2 1 1\n\nOutput\n1\n\nInput\n4 4 4 4\n\nOutput\n0\n\nInput\n999999999 1000000000 1000000000 1000000000\n\nOutput\n1000000000\n\n\n\n-----Note-----\n\nIn the first example Alyona can buy 3 packs of 1 copybook for 3a = 3 rubles in total. After that she will have 4 copybooks which she can split between the subjects equally. \n\nIn the second example Alyuna can buy a pack of 2 copybooks for b = 1 ruble. She will have 8 copybooks in total.\n\nIn the third example Alyona can split the copybooks she already has between the 4 subject equally, so she doesn't need to buy anything.\n\nIn the fourth example Alyona should buy one pack of one copybook.",
  "solutions": "[\"n, a, b, c = map(int, input().split())\\nres = 10 ** 100\\nfor i in range(50):\\n    for j in range(50):\\n        for k in range(50):\\n            if (n + i + 2 * j + 3 * k) % 4 == 0:\\n                res = min(res, a * i + b * j + c * k)\\nprint(res)\", \"n, a, b, c = list(map(int, input().split()))\\na = [0, a, b, c]\\nfor _ in range(100):\\n    for i in range(4):\\n        for j in range(4):\\n            to = (i + j) % 4\\n            if a[to] > a[i] + a[j]:\\n                a[to] = a[i] + a[j]\\n\\nprint(a[(4 - n % 4) % 4])\\n\", \"n, a, b, c = list(map(int, input().split()))\\nans = int(1e18)\\nfor i in range(4):\\n    for j in range(2):\\n        for k in range(4):\\n            if (n + i + 2 * j + 3 * k) % 4 == 0:\\n                ans = min(ans, i * a + j * b + k * c)\\nprint(ans)\\n\", \"n,a,b,c=[int(i) for i in input().split()]\\nans=10**11\\nfor i in range(4):\\n    for j in range(4):\\n        for k in range(4):\\n            if (n+i+j*2+k*3)%4==0:\\n                ans=min(ans,a*i+b*j+c*k)\\nprint(ans)\\n\", \"n, a, b, c = list(map(int, input().split()))\\nif n % 4 == 0:\\n    print(0)\\nif n % 4 == 3:\\n    print(min(a, 3 * c, b + c))\\nif n % 4 == 2:\\n    print(min(b, 2 * a, 2 * c))\\nif n % 4 == 1:\\n    print(min(c, 3 * a, b + a))\", \"#!/usr/bin/env python3\\n\\ndef main():\\n    try:\\n        while True:\\n            n, a, b, c = list(map(int, input().split()))\\n            result = 1e20\\n            for ia in range(4):\\n                for ib in range(4):\\n                    for ic in range(4):\\n                        x = n + ia + (ib << 1) + ic * 3\\n                        if x & 0x3 == 0:\\n                            result = min(result, ia * a + ib * b + ic * c)\\n            print(result)\\n\\n    except EOFError:\\n        pass\\n\\nmain()\\n\", \"from math import *\\nfrom sys import *\\nfrom queue import *\\nfrom decimal import *\\n\\nn,a,b,c=(int(z) for z in input().split())\\nif(n%4==0):\\n  print(0)\\nelif(n%4==1):\\n  print(min(3*a,a+b,c))\\nelif(n%4==2):\\n  print(min(2*a,b,2*c))\\nelse:\\n  print(min(a,3*c,b+c))\", \"n, a, b, c = map(int,input().split())\\nost = (-n) % 4\\nif ost == 0:\\n    print(0)\\nelif ost == 1:\\n    print(min(a, 3 * c, b + c))\\nelif ost == 2:\\n    print(min(2 * a, b, 2 * c))\\nelse:\\n    print(min(3 * a, c, b + a))\", \"import math,sys,re,itertools,pprint,collections,copy\\nrs,ri,rai,raf=input,lambda:int(input()),lambda:list(map(int, input().split())),lambda:list(map(float, input().split()))\\n\\nn, a, b, c = rai()\\ns = float(\\\"inf\\\")\\n\\nfor ia in range(5):\\n    for ib in range(5):\\n        for ic in range(5):\\n            k = ia + 2*ib + 3*ic\\n            if (n + k) % 4 != 0:\\n                continue\\n            s = min(s, ia * a + ib * b + ic * c)\\n\\nprint(s)\\n\\n\", \"n, a, b, c = [int(x) for x in input().split()]\\n\\nmin_sum = 10 * (a + b + c)\\n\\nfor i in range(4):\\n    for j in range(4):\\n        for k in range(4):\\n            if (n + 1*i + 2*j + 3*k) % 4 == 0:\\n                min_sum = min(min_sum, i*a + j*b + k*c)\\n\\nprint(min_sum)\", \"n, a, b, c = list(map(int, input().split()))\\nk = 4 - (n % 4)\\nif k == 4:\\n    print(0)\\nelif k == 1:\\n    print(min(a, c * 3, b + c))\\nelif k == 2:\\n    print(min(2 * a, b, 2 * c))\\nelif k == 3:\\n    print(min(3 * a, c, b + a))\\n\", \"def solve():\\n    x=list(map(int,input().split()))\\n    remainder=x[0]%4\\n    if remainder==0:\\n        return 0;\\n    elif remainder==2:\\n        return min(2*x[1],x[2],2*x[3]);\\n    elif remainder==1:\\n        return min(3*x[1],x[1]+x[2],x[3]);\\n    else:\\n        return min(x[1],x[2]+x[3],x[3]*3);\\n\\n\\nprint(solve())\\n    \\n    \\n\", \"n, a, b, c = list(map(int, input().split()))\\n\\nsum = -1\\n\\nfor A in range(4):\\n    for B in range(3):\\n        for C in range(4):\\n            N = n + A + B * 2 + C * 3\\n            if N % 4 == 0:\\n                if sum == -1 or A * a + B * b + C * c < sum:\\n                    sum = A * a + B * b + C * c\\n\\nprint (sum)\\n\", \"n,a,b,c = (int(i) for i in input().split())\\nif n%4 == 0:\\n    print(0)\\nelse:\\n    ans = 10**11\\n    for i in range(5):\\n        for j in range(5):\\n            for k in range(5):\\n                if (n+i*1+j*2+k*3)%4 == 0:\\n                    ans = min(ans,i*a+b*j+c*k)\\n    print(ans)\", \"n, a, b, c = map(int, input().split())\\nif not n % 4:\\n    print(0)\\nelif n % 4 == 3:\\n    print(min(a, c + b, c * 3))\\nelif n % 4 == 2:\\n    print(min(2 * a, b, 2 * c))\\nelif n % 4 == 1:\\n    print(min(3 * a, b + a, c))\", \"n,a,b,c=[int(i) for i in input().split()]\\nif n%4==0:\\n    print(0)\\nif n%4==1:\\n    print(min(3*a,a+b,c))\\nif n%4==2:\\n    print(min(2*a,b,2*c))\\nif n%4==3:\\n    print(min(a,b+c,3*c))\", \"n,a,b,c = list(map(int, input().split()))\\nl = []\\nif (n%4==0):\\n    l = [0]\\nelif(n%4==1):\\n    l = [3*a,a+b,c]\\nelif(n%4==2):\\n    l = [2*a, b, 2*c]\\nelse:\\n    l = [a, b+c, 3*c]\\n\\nmini = min(l)\\nprint(mini)\\n\", \"n, a, b, c = map(int, input().split())\\nmn = 10 ** 12\\narr = [0, a, b, c]\\nfor i in range(30):\\n    for j in range(30):\\n        q = (4 - (n % 4 + i * 3 + j * 2) % 4) % 4\\n        mn = min(mn, arr[3] * i + arr[2] * j + arr[1] * q)\\nprint(mn)\", \"n, a, b, c = map(int, input().split())\\nif n % 4 == 0:\\n    print(0)\\nelif n % 4 == 1:\\n    print(min(c, a*3, a+b))\\nelif n % 4 == 2:\\n    print(min(c*2, b, a*2))\\nelse:#n % 4 == 3\\n    print(min(a, b+c, 3*c))\", \"n, a, b, c = list(map(int, input().split()))\\nres = 10000000000\\nfor i in range(10):\\n    for j in range(10):\\n        for k in range(10):\\n            if (n + i + j*2 + k*3)%4 == 0:\\n                res = min(res, i*a + j*b + k*c)\\n\\nprint(res)\\n\", \"n, one,two,three = (int(x) for x in input().split())\\n\\nn = n%4\\nif n == 3:\\n    print(min(one,3*three,two + three))\\nelif n == 2:\\n    print(min(2*one,two,2*three))\\nelif n == 1:\\n    print(min(3*one,two+one,three))\\nelse:\\n    print(0)\", \"n, a, b, c = map(int, input().split())\\nm = 10**12\\nfor i in range(30):\\n    for j in range(30):\\n        for k in range(30):\\n            if (n+i+2*j+3*k) % 4:\\n                continue\\n            m = min(m, i*a+j*b+k*c)\\nprint(m)\", \"3\\n\\nn,a,b,c = [int(x) for x in input().strip().split()]\\n\\nif n%4 == 0:\\n\\tprint(0)\\nelif n%4 == 1:\\n\\tprint(min(3*a,a+b,c))\\nelif n%4 == 2:\\n\\tprint(min(2*a,b,2*c))\\nelse:\\n\\tprint(min(a,b+c,3*c))\", \"n, a, b, c = list(map(int, input().split()))\\nif n % 4 == 0:\\n    print(0)\\nelif n % 4 == 1:\\n    print(min(3*a, a + b, c))\\nelif n % 4 == 2:\\n    print(min(2*a, b, 2 * c))\\nelif n % 4 == 3:\\n    print(min(a, b + c, 3 * c))\\n\\n\", \"\\\"\\\"\\\"\\nATSTNG's ejudge Python3 solution template\\n(actual solution is below)\\n\\\"\\\"\\\"\\nimport sys, queue\\n\\ntry:\\n    import dev_act_ffc429465ab634  # empty file in directory\\n    DEV = True\\nexcept:\\n    DEV = False\\n\\ndef log(*s):\\n    if DEV: print('LOG', *s)\\n\\nclass EJudge:\\n    def __init__(self, problem=\\\"default\\\", reclim=1<<30):\\n        self.problem = problem\\n        sys.setrecursionlimit(reclim)\\n\\n    def use_files(self, infile='', outfile=''):\\n        if infile!='':\\n            self.infile = open(infile)\\n            sys.stdin = self.infile\\n        if infile!='':\\n            self.outfile = open(outfile, 'w')\\n            sys.stdout = self.outfile\\n\\n    def use_bacs_files(self):\\n        self.use_files(self.problem+'.in', self.problem+'.out')\\n\\n    def get_tl(self):\\n        while True: pass\\n\\n    def get_ml(self):\\n        tmp = [[[5]*100000 for _ in range(1000)]]\\n        while True: tmp.append([[5]*100000 for _ in range(1000)])\\n\\n    def get_re(self):\\n        s = (0,)[8]\\n\\n    def get_wa(self, wstr='blablalblah'):\\n        for _ in range(3): print(wstr)\\n        return\\n\\nclass IntReader:\\n    def __init__(self):\\n        self.ost = queue.Queue()\\n\\n    def get(self):\\n        return int(self.sget())\\n\\n    def sget(self):\\n        if self.ost.empty():\\n            for el in input().split():\\n                self.ost.put(el)\\n        return self.ost.get()\\n\\n    def release(self):\\n        res = []\\n        while not self.ost.empty():\\n            res.append(self.ost.get())\\n        return res\\n\\n###############################################################################\\nej = EJudge(  )\\nint_reader = IntReader()\\nfmap = lambda f,*l: list(map(f,*l))\\nparse_int = lambda: fmap(int, input().split())\\n\\n# input\\nn,t1,t2,t3 = parse_int()\\nt3 = min(t3, t2+t1, t1*3)\\nt2 = min(t2, t1*2, t3*2)\\nt1 = min(t1, t3+t2, t3*3)\\n\\nn = n%4\\nif n==0: ans = 0\\nif n==1: ans = t3\\nif n==2: ans = t2\\nif n==3: ans = t1\\n\\nprint(ans)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"1 1 3 4\\n\",\n    \"6 2 1 1\\n\",\n    \"4 4 4 4\\n\",\n    \"999999999 1000000000 1000000000 1000000000\\n\",\n    \"1016 3 2 1\\n\",\n    \"17 100 100 1\\n\",\n    \"17 2 3 100\\n\",\n    \"18 1 3 3\\n\",\n    \"19 1 1 1\\n\",\n    \"999999997 999999990 1000000000 1000000000\\n\",\n    \"999999998 1000000000 999999990 1000000000\\n\",\n    \"634074578 336470888 481199252 167959139\\n\",\n    \"999999999 1000000000 1000000000 999999990\\n\",\n    \"804928248 75475634 54748096 641009859\\n\",\n    \"535590429 374288891 923264237 524125987\\n\",\n    \"561219907 673102149 496813081 702209411\\n\",\n    \"291882089 412106895 365329221 585325539\\n\",\n    \"757703054 5887448 643910770 58376259\\n\",\n    \"783332532 449924898 72235422 941492387\\n\",\n    \"513994713 43705451 940751563 824608515\\n\",\n    \"539624191 782710197 514300407 2691939\\n\",\n    \"983359971 640274071 598196518 802030518\\n\",\n    \"8989449 379278816 26521171 685146646\\n\",\n    \"34618927 678092074 895037311 863230070\\n\",\n    \"205472596 417096820 468586155 41313494\\n\",\n    \"19 5 1 2\\n\",\n    \"17 1 2 2\\n\",\n    \"18 3 3 1\\n\",\n    \"19 4 3 1\\n\",\n    \"936134778 715910077 747167704 219396918\\n\",\n    \"961764255 454914823 615683844 102513046\\n\",\n    \"692426437 48695377 189232688 985629174\\n\",\n    \"863280107 347508634 912524637 458679894\\n\",\n    \"593942288 86513380 486073481 341796022\\n\",\n    \"914539062 680293934 764655030 519879446\\n\",\n    \"552472140 509061481 586588704 452405440\\n\",\n    \"723325809 807874739 160137548 335521569\\n\",\n    \"748955287 546879484 733686393 808572289\\n\",\n    \"774584765 845692742 162011045 691688417\\n\",\n    \"505246946 439473295 30527185 869771841\\n\",\n    \"676100616 178478041 604076030 752887969\\n\",\n    \"701730093 477291299 177624874 930971393\\n\",\n    \"432392275 216296044 751173719 109054817\\n\",\n    \"458021753 810076598 324722563 992170945\\n\",\n    \"188683934 254114048 48014511 170254369\\n\",\n    \"561775796 937657403 280013594 248004555\\n\",\n    \"1000000000 1000000000 1000000000 1000000000\\n\",\n    \"3 10000 10000 3\\n\",\n    \"3 12 3 4\\n\",\n    \"3 10000 10000 1\\n\",\n    \"3 1000 1000 1\\n\",\n    \"3 10 10 1\\n\",\n    \"3 100 100 1\\n\",\n    \"3 100000 10000 1\\n\",\n    \"7 10 2 3\\n\",\n    \"3 1000 1000 2\\n\",\n    \"1 100000 1 100000\\n\",\n    \"7 4 3 1\\n\",\n    \"3 1000 1000 3\\n\",\n    \"3 1000 1 1\\n\",\n    \"3 10 1 1\\n\",\n    \"3 100000 1 1\\n\",\n    \"3 100 1 1\\n\",\n    \"3 100000 100000 1\\n\",\n    \"3 1000 1 100\\n\",\n    \"3 1000000000 1 1000000000\\n\",\n    \"3 1000 1 10\\n\",\n    \"3 200 1 100\\n\",\n    \"7 4 1 1\\n\",\n    \"7 4 12 1\\n\",\n    \"3 9 1 1\\n\",\n    \"3 10000000 1000000 1\\n\",\n    \"7 1000 1000 1\\n\",\n    \"3 10000 1 30\\n\",\n    \"3 1000 1 2\\n\",\n    \"7 12 6 1\\n\",\n    \"3 100000 1 1000\\n\",\n    \"7 1000 1000 3\\n\",\n    \"3 4 3 1\\n\",\n    \"3 3000000 1 100000\\n\",\n    \"3 3 1 1\\n\",\n    \"3 10 1 5\\n\",\n    \"3 2000 2000 1\\n\",\n    \"3 10000000 10000000 1\\n\",\n    \"3 5 1 1\\n\",\n    \"3 100 1 33\\n\",\n    \"7 9 2 7\\n\",\n    \"4448 2 3 6\\n\",\n    \"2228 1 6 3\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1000000000\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1000000000\\n\",\n    \"999999990\\n\",\n    \"335918278\\n\",\n    \"1000000000\\n\",\n    \"0\\n\",\n    \"524125987\\n\",\n    \"673102149\\n\",\n    \"585325539\\n\",\n    \"11774896\\n\",\n    \"0\\n\",\n    \"131116353\\n\",\n    \"8075817\\n\",\n    \"640274071\\n\",\n    \"405799987\\n\",\n    \"678092074\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"438793836\\n\",\n    \"307539138\\n\",\n    \"146086131\\n\",\n    \"347508634\\n\",\n    \"0\\n\",\n    \"764655030\\n\",\n    \"0\\n\",\n    \"335521569\\n\",\n    \"546879484\\n\",\n    \"691688417\\n\",\n    \"30527185\\n\",\n    \"0\\n\",\n    \"654916173\\n\",\n    \"216296044\\n\",\n    \"992170945\\n\",\n    \"48014511\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"9\\n\",\n    \"7\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"100000\\n\",\n    \"3\\n\",\n    \"9\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"101\\n\",\n    \"1000000000\\n\",\n    \"11\\n\",\n    \"101\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"31\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"1001\\n\",\n    \"9\\n\",\n    \"3\\n\",\n    \"100001\\n\",\n    \"2\\n\",\n    \"6\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"34\\n\",\n    \"9\\n\",\n    \"0\\n\",\n    \"0\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/740/A",
  "starter_code": ""
}