{
  "task_id": "APPS/204",
  "problem_id": 204,
  "prompt": "Monocarp has decided to buy a new TV set and hang it on the wall in his flat. The wall has enough free space so Monocarp can buy a TV set with screen width not greater than $a$ and screen height not greater than $b$. Monocarp is also used to TV sets with a certain aspect ratio: formally, if the width of the screen is $w$, and the height of the screen is $h$, then the following condition should be met: $\\frac{w}{h} = \\frac{x}{y}$.\n\nThere are many different TV sets in the shop. Monocarp is sure that for any pair of positive integers $w$ and $h$ there is a TV set with screen width $w$ and height $h$ in the shop.\n\nMonocarp isn't ready to choose the exact TV set he is going to buy. Firstly he wants to determine the optimal screen resolution. He has decided to try all possible variants of screen size. But he must count the number of pairs of positive integers $w$ and $h$, beforehand, such that $(w \\le a)$, $(h \\le b)$ and $(\\frac{w}{h} = \\frac{x}{y})$.\n\nIn other words, Monocarp wants to determine the number of TV sets having aspect ratio $\\frac{x}{y}$, screen width not exceeding $a$, and screen height not exceeding $b$. Two TV sets are considered different if they have different screen width or different screen height.\n\n\n-----Input-----\n\nThe first line contains four integers $a$, $b$, $x$, $y$ ($1 \\le a, b, x, y \\le 10^{18}$)\u00a0\u2014 the constraints on the screen width and height, and on the aspect ratio.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the number of different variants to choose TV screen width and screen height so that they meet the aforementioned constraints.\n\n\n-----Examples-----\nInput\n17 15 5 3\n\nOutput\n3\n\nInput\n14 16 7 22\n\nOutput\n0\n\nInput\n4 2 6 4\n\nOutput\n1\n\nInput\n1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\n\nOutput\n1000000063\n\n\n\n-----Note-----\n\nIn the first example, there are $3$ possible variants: $(5, 3)$, $(10, 6)$, $(15, 9)$.\n\nIn the second example, there is no TV set meeting the constraints.\n\nIn the third example, there is only one variant: $(3, 2)$.",
  "solutions": "[\"def gcd(a, b):\\n    while b:\\n        a, b = b, a % b\\n    return a\\n\\na, b, x, y = list(map(int, input().split()))\\n\\ng = gcd(x, y)\\nx //= g\\ny //= g\\n\\n\\nprint(min(a // x, b // y))\\n\", \"from sys import stdin, stdout\\n\\n\\ndef gcd(a, b):\\n    if not b:\\n        return a\\n    else:\\n        return gcd(b, a % b)\\n\\n\\na, b, x, y = map(int, stdin.readline().split())\\ng = gcd(x, y)\\nx //= g\\ny //= g\\n\\nl, r = 0, 10 ** 18 + 1\\nwhile r - l > 1:\\n    m = (l + r) >> 1\\n    \\n    if m * x <= a and m * y <= b:\\n        l = m\\n    else:\\n        r = m\\n\\nstdout.write(str(l))\", \"from math import gcd\\n\\na, b, x, y = map(int, input().split())\\nx, y = x // gcd(x, y), y // gcd(x, y)\\nprint(min(a // x, b // y))\", \"from fractions import gcd as g\\n\\n(a, b, x, y) = list(map(int, input().split()))\\n\\nk = g(x, y)\\n\\nx //= k\\ny //= k\\n\\nprint(min(a // x, b // y))\\n\", \"USE_STDIO = False\\n\\nif not USE_STDIO:\\n    try: import mypc\\n    except: pass\\n\\ndef gcd(x, y):\\n    if x % y == 0: return y\\n    return gcd(y, x % y)\\n\\ndef main():\\n    a, b, x, y = list(map(int, input().split(' ')))\\n    g = gcd(x, y)\\n    x, y = x // g, y // g\\n    ans = min(a // x, b // y)\\n    print(ans)\\n\\ndef __starting_point():\\n    main()\\n\\n\\n\\n\\n__starting_point()\", \"a, b, x, y = list(map(int, input().split()))\\n\\nfrom fractions import gcd\\n\\nx, y = x // gcd(x, y), y // gcd(x, y)\\n\\nprint(min(a // x, b // y))\\n\", \"import math\\nimport sys\\na, b, x, y = list(map(int, input().split()))\\ng = math.gcd(x, y)\\nx //= g\\ny //= g\\nl = 0\\nr = 10**18\\nwhile r - l > 1:\\n    mid = (r + l) // 2\\n    if x * mid > a or y * mid > b:\\n        r = mid\\n    else:\\n        l = mid\\nif x * r > a or y * r > b:\\n    print(l)\\nelse:\\n    print(r)\\n\", \"a,b,x,y = list(map(int,input().rsplit()))\\ndef gdc(a,b):\\n\\tif b == 0:\\n\\t\\treturn a\\n\\treturn gdc(b,a%b)\\n\\ng = gdc(x,y)\\nx //= g\\ny //= g\\n\\nprint(min(a//x,b//y))\", \"def gcd(a, b):\\n    while b:\\n        a, b = b, a % b\\n    return a\\n\\n\\na, b, x, y = map(int, input().split())\\nk = gcd(x, y)\\nx //= k\\ny //= k\\nprint(min(a // x, b // y))\", \"def gcd(x, y):\\n    return x if y == 0 else gcd(y, x % y)\\n\\na,b,x,y = list(map(int,input().split()))\\n\\n\\nval  = gcd(x, y)\\nx //= val\\ny //= val\\n\\na_min = a // x\\nb_min = b // y\\n\\nprint(min(a_min, b_min))\\n\", \"from copy import deepcopy\\nimport itertools\\nfrom bisect import bisect_left\\nfrom bisect import bisect_right\\nimport math\\nfrom collections import deque\\nfrom collections import Counter\\n\\n\\ndef read():\\n    return int(input())\\n\\n\\ndef readmap():\\n    return map(int, input().split())\\n\\n\\ndef readlist():\\n    return list(map(int, input().split()))\\n\\n\\na, b, x, y = readmap()\\n\\ng = math.gcd(x, y)\\n\\nprint(min(a // (x // g), b // (y // g)))\", \"#JMD\\n#Nagendra Jha-4096\\n\\n \\nimport sys\\nimport math\\n\\n#import fractions\\n#import numpy\\n \\n###File Operations###\\nfileoperation=0\\nif(fileoperation):\\n    orig_stdout = sys.stdout\\n    orig_stdin = sys.stdin\\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\\n    sys.stdin = inputfile\\n    sys.stdout = outputfile\\n\\n###Defines...###\\nmod=1000000007\\n \\n###FUF's...###\\ndef nospace(l):\\n    ans=''.join(str(i) for i in l)\\n    return ans\\n \\n \\n \\n##### Main ####\\nt=1\\nfor tt in range(t):\\n    #a=list(map(int,sys.stdin.readline().split(' ')))\\n    a,b,x,y= map(int, sys.stdin.readline().split(' '))\\n    g=math.gcd(x,y)\\n    x=x//g\\n    y=y//g\\n\\n    print(min(a//x,b//y))\\n    \\n#####File Operations#####\\nif(fileoperation):\\n    sys.stdout = orig_stdout\\n    sys.stdin = orig_stdin\\n    inputfile.close()\\n    outputfile.close()\", \"def gcd(a, b):\\n\\twhile b != 0:\\n\\t\\ta %= b\\n\\t\\ta, b = b, a\\n\\treturn a\\n\\na, b, x, y = [int(i) for i in input().split()]\\n\\ng = gcd(x, y)\\nx //= g\\ny //= g\\n\\nprint(min(a // x, b // y))\", \"a, b, x, y = list(map(int, input().split()))\\nfrom math import gcd\\ng = gcd(x, y)\\nx //= g\\ny //= g\\nprint(min(a // x, b // y))\\n\", \"#autogenerated (:'D)\\nread_numbers = lambda: list(map(int, input().split()))\\nINF = 1 << 64\\n\\n#main\\nfrom fractions import gcd\\n\\na, b, x, y = read_numbers()\\ng = gcd(x, y)\\nx, y = x // g, y // g\\nprint(min(a // x, b // y))\", \"from fractions import gcd\\n\\ndef __starting_point():\\n    a, b, x, y = list(map(int, input().split()))\\n    c = gcd(x, y)\\n    x, y = x // c, y // c\\n    answer = min(a // x, b // y)\\n    print(answer)\\n\\n__starting_point()\", \"import fractions\\n\\na, b, x, y = list(map(int, input().split()))\\n\\nd = fractions.gcd(x, y)\\nx //= d\\ny //= d\\nans = min(a // x, b // y)\\nprint(ans)\\n\", \"def gcd(x, y):\\n    if y == 0:\\n        return x\\n    else:\\n        return gcd(y, x%y)\\n\\na, b, x, y = map(int, input().split())\\n\\ng = gcd(x, y)\\nx //= g\\ny //= g\\n\\nprint(min(a//x, b//y))\", \"from sys import stdin,stdout,exit\\ndef sin(): \\n\\treturn stdin.readline().rstrip()\\ndef listInput():\\n\\treturn list(map(int,sin().split()))\\ndef printBS(li):\\n\\tif not li: return\\n\\tfor i in range(len(li)-1):\\n\\t\\tstdout.write(\\\"%d \\\"%(li[i]))\\n\\tstdout.write(\\\"%d\\\\n\\\"%(li[-1]))\\n\\na,b,x,y = listInput()\\nfrom fractions import gcd\\ng = gcd(x,y)\\nx//=g\\ny//=g\\nprint(min(a//x,b//y))\", \"\\\"\\\"\\\"#T=int(input())\\n#for i in range(0,T):\\nN=int(input())\\n#a,b=map(int,input().split())\\ns=[int(x) for x in input().split()]\\nmn=min(s)\\nmx=max(s)\\ndiff=mx-mn+1\\nans=diff-len(s)\\nprint(ans)\\n#for j in range(0,len(s)):\\\"\\\"\\\"\\n\\n\\nimport math\\na,b,x,y=list(map(int,input().split()))\\ng=math.gcd(x,y)\\nx=x//g\\ny=y//g\\na1=a//x\\na2=b//y\\nans=min(a1,a2)\\nprint(ans)\\n    \\n\", \"from math import gcd\\na,b,x,y=map(int,input().split())\\nr=gcd(x,y)\\nx//=r;y//=r\\nprint(min(a//x,b//y))\", \"from fractions import gcd\\na,b,x,y = list(map(int,input().split()))\\n\\ngcd_val = gcd(x, y)\\nx //= gcd_val\\ny //= gcd_val\\n\\nprint(min(a//x,b//y))\\n\", \"from math import gcd\\n\\na, b, x, y = map(int, input().split(' '))\\n\\ng = gcd(x, y)\\n\\nn1 = (a*g)//x\\nn2 = (b*g)//y\\n\\nprint(min(n1,n2))\", \"def gcd(a, b):\\n    while (b != 0):\\n        x = a % b\\n        a = b\\n        b = x\\n    return a\\n\\na, b, x, y = list(map(int, input().strip().split(' ')))\\n\\nd = gcd(x, y)\\nx1 = x // d\\nx2 = y // d\\n\\nprint(min(a//x1, b//x2))\\n\", \"import sys\\nfrom fractions import Fraction\\na,b,x,y=list(map(int,sys.stdin.readline().strip().split()))\\nf=str(Fraction(x,y)).split('/')\\nif(len(f)==1):\\n    x=int(f[0])\\n    y=1\\nelse:\\n    x=int(f[0])\\n    y=int(f[1])\\n\\nprint(min(int(a/x),int(b/y)))\\n\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"17 15 5 3\\n\",\n    \"14 16 7 22\\n\",\n    \"4 2 6 4\\n\",\n    \"1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\\n\",\n    \"1 1 1 1\\n\",\n    \"1000000000000000000 1000000000000000000 1000000000000000000 1000000000000000000\\n\",\n    \"3 3 2 4\\n\",\n    \"3 3 2 6\\n\",\n    \"1000000000000000000 1000000000 1000000000000000000 1000000000\\n\",\n    \"58 29 27 60\\n\",\n    \"27 68 94 30\\n\",\n    \"144528195586472793 10446456359175098 764897453635731472 213446506570409801\\n\",\n    \"145354434469588921 446675416227691239 504832165374736218 221558716891006574\\n\",\n    \"146180677647672345 468138913968516772 6298881766892948 923367383029480585\\n\",\n    \"147006920825755769 542505368524532032 208073625707521517 14411087792522426\\n\",\n    \"147833164003839193 978734324098080876 171380370006334775 22523289523184607\\n\",\n    \"148659402886955322 414963275376662424 30635495548814085 902968491117271450\\n\",\n    \"149485641770071450 851192235245178565 874621826044152778 488378180096620703\\n\",\n    \"150311889243122170 287421190818727409 837928574637933332 823487866450329936\\n\",\n    \"151138128126238298 947022187542019357 577863282081970781 831600068180992118\\n\",\n    \"925426546533829903 18916656036525111 656064699607651706 504175130621743249\\n\",\n    \"667266829466 1518201697184 23643010980 898976260568\\n\",\n    \"66 116 86 64\\n\",\n    \"1162212930906 1437938729466 2281245858132 1953656377395\\n\",\n    \"114 6 288 30\\n\",\n    \"1639979163162 1340495892562 2036036266388 3428977687772\\n\",\n    \"162 86 200 332\\n\",\n    \"126335330010 1260232924842 1082265520235 316350257105\\n\",\n    \"10 182 480 305\\n\",\n    \"301287041544 1311267722334 1925090137416 582114484904\\n\",\n    \"165 108 114 184\\n\",\n    \"1043706193704 1177988368866 2133416547786 1380684288366\\n\",\n    \"225 276 42 210\\n\",\n    \"1760355542088 1044709015401 1674331546848 2647835033212\\n\",\n    \"9 99 272 208\\n\",\n    \"2489889792360 924314563821 835883336325 4339921938905\\n\",\n    \"84 231 70 145\\n\",\n    \"219424042632 791035210353 5273494032066 418290299778\\n\",\n    \"280 104 158 114\\n\",\n    \"606209757964 135185624000 1875022910016 905391624870\\n\",\n    \"360 264 99 117\\n\",\n    \"1561742222476 104898922608 1477225799720 2031291351072\\n\",\n    \"72 72 312 64\\n\",\n    \"2534454556172 3927193117988 589501152415 3547767499745\\n\",\n    \"168 252 180 450\\n\",\n    \"3375849775910 3759581410230 1727984390290 1874681381962\\n\",\n    \"405 55 194 58\\n\",\n    \"4591740193030 3537449154450 1714308697782 442983863265\\n\",\n    \"25 260 129 285\\n\",\n    \"786155773670 3336791735150 1280120052592 1250148696512\\n\",\n    \"165 500 388 308\\n\",\n    \"2023521027270 3298933358415 137370252990 2592814018030\\n\",\n    \"285 245 270 270\\n\",\n    \"100000 1 3 2\\n\",\n    \"10000000000000 1 1 10000000000000\\n\",\n    \"1000000000000000000 1000000000000000000 1 2\\n\",\n    \"4 2 4 3\\n\",\n    \"100 81 10 9\\n\",\n    \"1 1 1 1000000000000000000\\n\",\n    \"1000000000000000000 1000000000000000000 1 1\\n\",\n    \"1000000000000000000 1000000000000000000 1 1000000000000000000\\n\",\n    \"1 1 1 100000000000000000\\n\",\n    \"1000000000000000000 1 1 1\\n\",\n    \"1000000000000000000 1000000000000000000 1 999999822000007597\\n\",\n    \"1 1000000000000000000 1 1000000000000000000\\n\",\n    \"3 60 3 4\\n\",\n    \"1 1 1000000000000000 1\\n\",\n    \"2 3 1000000000000000000 1\\n\",\n    \"20 5 10 7\\n\",\n    \"5 5 1 1\\n\",\n    \"1000000000000000000 1000000000000000000 1000000000000000000 11235955056173033\\n\",\n    \"281474976710656 1 1 281474976710656\\n\",\n    \"500 500 1000000000000000000 1\\n\",\n    \"2 2 1000000000000000000 2\\n\",\n    \"1000000000000000000 1000000000000000000 1000000000000000000 1\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1000000063\\n\",\n    \"1\\n\",\n    \"1000000000000000000\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1000000000\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"6\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"55\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"20\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"38\\n\",\n    \"50\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"8\\n\",\n    \"0\\n\",\n    \"9\\n\",\n    \"1\\n\",\n    \"12\\n\",\n    \"245\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"500000000000000000\\n\",\n    \"0\\n\",\n    \"9\\n\",\n    \"0\\n\",\n    \"1000000000000000000\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1041/B",
  "starter_code": ""
}