{
  "task_id": "APPS/146",
  "problem_id": 146,
  "prompt": "This morning, Roman woke up and opened the browser with $n$ opened tabs numbered from $1$ to $n$. There are two kinds of tabs: those with the information required for the test and those with social network sites. Roman decided that there are too many tabs open so he wants to close some of them.\n\nHe decided to accomplish this by closing every $k$-th ($2 \\leq k \\leq n - 1$) tab. Only then he will decide whether he wants to study for the test or to chat on the social networks. Formally, Roman will choose one tab (let its number be $b$) and then close all tabs with numbers $c = b + i \\cdot k$ that satisfy the following condition: $1 \\leq c \\leq n$ and $i$ is an integer (it may be positive, negative or zero).\n\nFor example, if $k = 3$, $n = 14$ and Roman chooses $b = 8$, then he will close tabs with numbers $2$, $5$, $8$, $11$ and $14$.\n\nAfter closing the tabs Roman will calculate the amount of remaining tabs with the information for the test (let's denote it $e$) and the amount of remaining social network tabs ($s$). Help Roman to calculate the maximal absolute value of the difference of those values $|e - s|$ so that it would be easy to decide what to do next.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($2 \\leq k < n \\leq 100$) \u2014 the amount of tabs opened currently and the distance between the tabs closed.\n\nThe second line consists of $n$ integers, each of them equal either to $1$ or to $-1$. The $i$-th integer denotes the type of the $i$-th tab: if it is equal to $1$, this tab contains information for the test, and if it is equal to $-1$, it's a social network tab.\n\n\n-----Output-----\n\nOutput a single integer \u2014 the maximum absolute difference between the amounts of remaining tabs of different types $|e - s|$.\n\n\n-----Examples-----\nInput\n4 2\n1 1 -1 1\n\nOutput\n2\n\nInput\n14 3\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\n\nOutput\n9\n\n\n\n-----Note-----\n\nIn the first example we can choose $b = 1$ or $b = 3$. We will delete then one tab of each type and the remaining tabs are then all contain test information. Thus, $e = 2$ and $s = 0$ and $|e - s| = 2$.\n\nIn the second example, on the contrary, we can leave opened only tabs that have social networks opened in them.",
  "solutions": "[\"n, k = list(map(int, input().split()))\\n\\nt = list(map(int, input().split()))\\n\\nd = [0 for _ in range(n)]\\n\\nfor _ in range(n):\\n  for i in range(n):\\n    if i % k != _ % k:\\n      d[_] += t[i]\\n\\nprint(max(abs(d[_]) for _ in range(n)))\\n\", \"n,k = list(map(int,input().split()))\\na = list(map(int,input().split()))\\nans = -100000000\\nfor i in range(k):\\n    cnt = 0\\n    for j in range(n):\\n        if j%k != i:\\n            cnt += a[j]\\n    ans = max(ans,abs(cnt))\\nprint(ans)            \\n\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nans = 0\\nfor b in range(n):\\n    closed = [b + i * k for i in range(-n, n)]\\n    closed = set(c for c in closed if 0 <= c < n)\\n    test = sum(a[i] == -1 and i not in closed for i in range(n))\\n    play = sum(a[i] == 1 and i not in closed for i in range(n))\\n    ans = max(ans, abs(test - play))\\n\\nprint(ans)\\n\", \"# = list(map(int, input().split()))\\n# = map(int, input().split())\\nn, k = list(map(int, input().split()))\\nz = list(map(int, input().split()))\\nans = -1\\nfor b in range(n):\\n    tans = 0\\n    for s in range(n):\\n        if (s - b) % k != 0:\\n            tans += z[s]\\n    if abs(tans) > ans:\\n        ans = abs(tans)\\nprint(ans)\\n\", \"n, k = list(map(int, input().split()))\\narr = [int(x) for x in input().split()]\\n\\ndef calculate(a):\\n    nonlocal arr\\n    e, s = 0, 0\\n    for i in range(a, n, k):\\n        if arr[i] == -1:\\n            e += 1\\n        else:\\n            s += 1\\n    e -= arr.count(-1)\\n    s -= arr.count(1)\\n    return abs(e - s)\\n\\nl = []\\nfor i in range(k):\\n    l.append(calculate(i))\\nprint(max(l))\\n\", \"n, k = list(map(int, input().split()))\\nl = list(map(int, input().split()))\\nmx = 0\\nfor b in range(n):\\n    s = []\\n    for i in range(n):\\n        if abs(b - i) % k:\\n            s.append(l[i])\\n    mx = max(mx, abs(sum(s)))\\nprint(mx)\\n\", \"#      \\nimport collections, atexit, math, sys, bisect \\n\\nsys.setrecursionlimit(1000000)\\ndef getIntList():\\n    return list(map(int, input().split()))    \\n\\ntry :\\n    #raise ModuleNotFoundError\\n    import numpy\\n    def dprint(*args, **kwargs):\\n        #print(*args, **kwargs, file=sys.stderr)\\n        # in python 3.4 **kwargs is invalid???\\n        print(*args,  file=sys.stderr)\\n    dprint('debug mode')\\nexcept Exception:\\n    def dprint(*args, **kwargs):\\n        pass\\n\\n\\n\\ninId = 0\\noutId = 0\\nif inId>0:\\n    dprint('use input', inId)\\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\nif outId>0:\\n    dprint('use output', outId)\\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\n    atexit.register(lambda :sys.stdout.close())     #idle \\u4e2d\\u4e0d\\u4f1a\\u6267\\u884c atexit\\n    \\nN, K = getIntList()\\n#print(N)\\nza = getIntList()\\nrr = 0\\nfor b  in range(K):\\n    r = 0\\n    for i in range(N):\\n        if i%K==b: continue\\n        r+= za[i]\\n    r = abs(r)\\n\\n    rr = max(r,rr)\\n\\nprint(rr)\\n\\n\\n\", \"n, k = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\nanswer = 0\\nfor i in range(k):\\n    B = A.copy()\\n    C = []\\n    for j in range(n):\\n        if j % k != i:\\n            C.append(B[j])\\n    a = C.count(1)\\n    b = C.count(-1)\\n    if abs(a - b) > answer:\\n        answer = abs(a - b)\\nprint(answer)\\n\", \"n, k = [int(v) for v in input().split()]\\nsigns = [int(v) for v in input().split()]\\n\\ntot_e = signs.count(1)\\ntot_s = signs.count(-1)\\n\\nans = 0\\n\\nfor b in range(k):\\n    me, ms = 0, 0\\n    for c in range(b, n, k):\\n        if signs[c] == 1:\\n            me += 1\\n        else:\\n            ms += 1\\n    ans = max(ans, abs((tot_e - me) - (tot_s - ms)))\\n\\nprint(ans)\\n\", \"n, k = map(int, input().split())\\na = list(map(int, input().split()))\\nt = 0\\ns = 0\\nfor i in range(n):\\n    if a[i] == 1:\\n        t += 1\\n    else:\\n        s += 1\\n\\nnum = 0\\nfor i in range(k):\\n    t1, s1 = t, s\\n    for j in range(i, n, k):\\n        if a[j] == 1:\\n            t1 -= 1\\n        else:\\n            s1 -= 1\\n\\n    num = max(num, abs(s1 - t1))\\n\\nprint(num)\", \"def f(k, c):\\n    e = s = 0\\n    for i in range(n):\\n        if (i-c)%k != 0:\\n            if a[i] == 1: \\n                e += 1\\n            else:\\n                s += 1\\n    #print(k, c, e,s)\\n    return abs(e-s)\\n\\nread = lambda: map(int, input().split())\\nn, k = read()\\na = list(read())\\nmx = 0\\nfor c in range(0, k):\\n    mx = max(mx, f(k,c))\\nprint(mx)\", \"n,k=[int(i) for i in input().split()]\\na=[int(i) for i in input().split()]\\ns=0\\nfor b in range(k):\\n\\tans=0\\n\\t\\n\\tfor i in range(1,n+1):\\n\\t\\tif (i-b)%k!=0:\\n\\t\\t\\tans+=a[i-1]\\n\\ts=max(s,abs(ans))\\nprint(s)\", \"\\ndef main():\\n    buf = input()\\n    buflist = buf.split()\\n    n = int(buflist[0])\\n    k = int(buflist[1])\\n    buf = input()\\n    buflist = buf.split()\\n    tab = list(map(int, buflist))\\n    test_count = 0\\n    social_count = 0\\n    for i in range(n):\\n        if tab[i] == 1:\\n            test_count += 1\\n        else:\\n            social_count += 1\\n    max_diff = 0\\n    for i in range(k):\\n        test_remaining = test_count\\n        social_remaining = social_count\\n        for j in range(i, n, k):\\n            if tab[j] == 1:\\n                test_remaining -= 1\\n            else:\\n                social_remaining -= 1\\n        diff = abs(test_remaining - social_remaining)\\n        if diff > max_diff:\\n            max_diff = diff\\n    print(max_diff)\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n\\nc = [0 for i in range(k)]\\ns = sum(a)\\nfor i in range(n):\\n    c[i % k] += a[i]\\n\\nans = -1\\nfor i in c:\\n    ans = max(ans, abs(s - i))\\nprint(ans)\\n\", \"from sys import stdin,stdout\\n\\nI = stdin.readline\\nP = stdout.write\\n\\nn,k = map(int,I().split())\\narr = [int(x) for x in I().split()]\\n\\ne = 0\\ns = 0\\nans = 0\\nfor i in arr:\\n    if(i == -1):\\n        s+=1\\n    else:e+=1\\n\\nfor i in range(0,k):\\n    ce = 0\\n    cs = 0\\n    for j in range(i,n,k):\\n        if(arr[j] == -1):\\n            cs+=1\\n        else:\\n            ce+=1\\n    x = e-ce\\n    y = s - cs\\n    if(abs(x-y)>ans):ans = abs(x-y)\\nprint(ans)\", \"n,k = [int(x) for x in input().split()]\\n\\nL = [int(x) for x in input().split()]\\n\\ntest = 0\\nfor i in L:\\n    if i == 1:\\n        test +=1\\n        \\nsocial = len(L)-test\\n\\nbest = 0\\n\\nfor i in range(0,k):\\n    tt = 0\\n    ts = 0\\n    j = 0\\n    while i+j*k < n:\\n        if L[i+j*k] == 1:\\n            tt += 1\\n        else:\\n            ts += 1\\n        j += 1\\n    best = max(abs(test-tt-social+ts),best)\\nprint(best)\", \"from operator import itemgetter\\n#int(input())\\n#map(int,input().split())\\n#[list(map(int,input().split())) for i in range(q)]\\n#print(\\\"YES\\\" * ans + \\\"NO\\\" * (1-ans))\\nn,k = list(map(int,input().split()))\\nar = list(map(int,input().split()))\\ne= 0\\ns = 0\\nans = 0\\nfor j in  range(k):\\n    e = 0\\n    s = 0\\n    for i in range(n):\\n        if i % k == j:\\n            continue\\n        if ar[i] == 1:\\n            e += 1\\n        else:\\n            s += 1\\n    ans = max(ans,abs(e-s))\\nprint(ans)\\n\", \"n,k=map(int,input().split())\\nl=list(map(int,input().split()))\\ne,s=0,0\\nfor i in l:\\n    if i == 1:\\n        e+=1\\n    else:\\n        s+=1\\nans=0\\nfor i in range(k):\\n    e1,s1=e,s\\n    for j in range(i,n,k):\\n        if l[j] ==1:\\n            e1-=1\\n        else:\\n            s1-=1\\n    ans=max(ans,abs(e1-s1))\\nprint(ans)\", \"n, k = map(int, input().split())\\na = list(map(int, input().split()))\\nansw = 0\\nfor b in range(n):\\n    sm = 0\\n    for i in range(n):\\n        if (i - b) % k:\\n            sm += a[i]\\n    answ = max(answ, abs(sm))\\nprint(answ)\", \"n, k = map(int, input().split())\\nmas = list(map(int, input().split()))\\nans = 0\\nfor b in range(k):\\n    m = 0\\n    for i in range(n):\\n        if i % k == b:\\n            continue\\n        m += mas[i]\\n    ans = max(ans, abs(m))\\nprint(ans)\", \"n, k = (int(x) for x in input().split())\\ntabs = [int(x) for x in input().split()]\\n\\n#print(n, k, tabs)\\n\\nmods = [sum(tabs[i::k]) for i in range(k)]\\n\\n#print(mods)\\n\\nsummods = sum(mods)\\nans = -1\\nfor i in range(k):\\n\\tcand = abs(summods - mods[i])\\n\\tif cand > ans:\\n\\t\\tans = cand\\n\\nprint(ans)\", \"import sys\\nfrom math import floor, ceil\\n\\ninput = sys.stdin.readline\\n\\nn, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n\\ntotBad = 0\\ntotGood = 0\\n\\nfor i in a:\\n    if i == -1:\\n        totBad += 1\\n    else:\\n        totGood += 1\\n\\nans = 0\\nfor i in range(k):\\n    curBad = 0\\n    curGood = 0\\n    for j in range(i, n, k):\\n        if a[j] == -1:\\n            curBad += 1\\n        else:\\n            curGood += 1 \\n    ans = max(ans, abs((totBad - curBad) - (totGood - curGood)))\\n\\nprint(ans)\\n\", \"n, k = list(map(int, input().split()))\\nt = list(map(int, input().split()))\\nsume = 0\\nsums = 0\\nans = None\\nfor i in range(n):\\n    if t[i] == 1: sume += 1\\n    else: sums += 1\\n        \\nfor b in range(k):\\n    tsume = sume\\n    tsums = sums\\n    for i in range(b, n, k):\\n        if t[i] == 1: tsume -= 1\\n        else: tsums -= 1\\n    if ans == None: ans = abs(tsums-tsume)\\n    else: ans = max(ans, abs(tsums-tsume))\\nprint(ans)\\n    \\n\", \"n,k=list(map(int,input().split()))\\nA=list(map(int,input().split()))\\n\\nANS=0\\nfor i in range(k):\\n    ex=0\\n    so=0\\n    for l in range(n):\\n        if l%k==i:\\n            continue\\n        if A[l]==1:\\n            ex+=1\\n        else:\\n            so+=1\\n\\n    if ANS<abs(ex-so):\\n        ANS=abs(ex-so)\\n\\nprint(ANS)\\n    \\n\", \"n, k = map(int, input().split())\\nmass = list(map(int, input().split()))\\ne = mass.count(1)\\ns = mass.count(-1)\\npopq = float('-inf')\\nfor b in range(0, k):\\n    e1=e\\n    s1=s\\n    for vkladki in range(b, n, k):\\n        if mass[vkladki] == 1:\\n            e1 -= 1\\n        else:\\n            s1 -= 1\\n    popq = max(popq, abs(e1-s1))\\nprint(popq)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4 2\\n1 1 -1 1\\n\",\n    \"14 3\\n-1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\\n\",\n    \"4 2\\n1 1 1 -1\\n\",\n    \"4 2\\n-1 1 -1 -1\\n\",\n    \"3 2\\n1 1 -1\\n\",\n    \"20 2\\n-1 1 -1 1 -1 -1 -1 1 -1 -1 -1 1 -1 -1 1 -1 -1 -1 1 1\\n\",\n    \"20 19\\n-1 -1 1 1 -1 1 1 -1 1 1 -1 1 -1 1 1 1 -1 1 -1 1\\n\",\n    \"20 7\\n-1 1 1 1 1 -1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 1 -1 1\\n\",\n    \"100 17\\n-1 -1 1 1 -1 -1 1 1 -1 -1 1 -1 1 1 -1 1 -1 1 1 1 -1 -1 1 1 -1 1 -1 1 -1 -1 1 -1 1 -1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1 1 1 1 -1 1 -1 -1 1 -1 -1 -1 1 -1 -1 -1 -1 1 -1 -1 1 1 -1 1 1 1 -1 1 -1 1 -1 -1 1 -1 1 -1 -1 -1 1 1 1 -1 -1 -1 1 1 1 1 -1 -1 1 1 1 -1 -1 1\\n\",\n    \"20 12\\n-1 1 1 1 1 1 1 -1 1 1 -1 1 -1 -1 -1 -1 1 1 1 -1\\n\",\n    \"20 17\\n-1 1 -1 1 1 1 -1 -1 -1 -1 -1 -1 1 -1 1 1 1 -1 1 -1\\n\",\n    \"36 2\\n1 1 1 1 1 1 -1 -1 -1 1 1 1 -1 -1 -1 1 1 -1 1 1 1 1 -1 1 -1 1 -1 1 -1 1 1 -1 -1 1 1 1\\n\",\n    \"36 35\\n-1 -1 1 1 1 1 -1 1 -1 1 1 -1 -1 -1 1 1 -1 1 -1 1 1 1 1 -1 -1 -1 1 1 1 -1 -1 -1 1 1 1 -1\\n\",\n    \"36 7\\n1 1 -1 1 1 1 1 -1 -1 1 1 -1 1 -1 1 -1 -1 1 1 1 -1 -1 1 1 1 1 -1 -1 1 -1 -1 -1 -1 1 1 -1\\n\",\n    \"36 12\\n-1 1 1 1 -1 -1 1 1 1 -1 1 -1 1 -1 -1 -1 -1 1 1 -1 -1 1 -1 1 -1 1 1 -1 1 -1 -1 -1 1 -1 -1 -1\\n\",\n    \"36 17\\n-1 1 -1 1 -1 -1 1 1 -1 1 1 -1 -1 -1 1 -1 -1 -1 -1 -1 1 -1 -1 1 1 1 1 -1 1 -1 1 -1 1 -1 -1 1\\n\",\n    \"36 22\\n1 1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 1 -1 1 1 -1 -1 -1 1 1 1 1 1 -1 -1 -1 1 1 1\\n\",\n    \"36 27\\n1 1 -1 -1 1 -1 -1 -1 1 1 -1 1 1 1 1 -1 -1 -1 1 -1 -1 -1 -1 -1 1 -1 1 -1 1 -1 -1 -1 -1 1 1 -1\\n\",\n    \"36 32\\n1 1 -1 -1 -1 1 -1 1 1 -1 1 1 1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 1 1 -1 -1 -1 1 1 1 1 -1 -1 -1\\n\",\n    \"52 2\\n1 1 -1 -1 -1 1 1 -1 1 1 1 1 -1 -1 -1 1 1 1 -1 -1 -1 1 1 -1 -1 1 -1 -1 -1 1 -1 -1 1 -1 -1 -1 -1 -1 1 -1 1 -1 -1 1 -1 1 -1 1 1 1 -1 -1\\n\",\n    \"52 51\\n1 -1 1 1 -1 -1 1 1 -1 -1 1 -1 -1 -1 1 1 1 1 1 1 1 1 1 1 -1 1 1 -1 -1 -1 -1 -1 -1 -1 1 -1 1 1 1 1 1 1 1 -1 -1 -1 1 -1 1 -1 -1 -1\\n\",\n    \"52 7\\n1 1 -1 -1 1 1 -1 -1 1 1 1 1 1 -1 1 -1 1 1 -1 -1 1 1 1 -1 1 -1 -1 1 -1 1 -1 -1 -1 -1 -1 -1 1 1 1 1 1 1 1 1 -1 1 -1 1 1 -1 1 1\\n\",\n    \"52 12\\n-1 1 -1 1 -1 -1 -1 1 -1 1 1 1 -1 1 1 1 -1 1 -1 -1 -1 -1 -1 -1 1 -1 -1 1 1 -1 -1 -1 1 -1 1 1 -1 1 1 -1 -1 1 1 1 -1 1 -1 -1 1 -1 1 -1\\n\",\n    \"52 17\\n-1 1 -1 1 -1 -1 -1 1 -1 1 -1 1 1 1 -1 1 -1 -1 1 1 -1 -1 1 -1 -1 1 -1 -1 -1 -1 1 -1 1 1 -1 -1 -1 1 1 -1 -1 -1 -1 -1 -1 1 -1 -1 1 1 1 1\\n\",\n    \"52 22\\n1 1 -1 1 1 1 -1 1 -1 -1 -1 1 1 -1 1 1 -1 -1 1 1 1 -1 -1 1 -1 1 -1 1 1 1 1 1 -1 -1 -1 1 1 -1 1 1 1 -1 -1 1 1 -1 1 1 -1 1 1 1\\n\",\n    \"52 27\\n1 1 -1 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 1 1 -1 1 -1 1 1 1 1 1 -1 1 1 -1 -1 1 -1 -1 -1 -1 -1 1 1 1 1 -1 1 -1 1 -1 -1 1 -1 1 -1 -1\\n\",\n    \"52 32\\n1 -1 -1 1 -1 1 1 -1 1 -1 1 -1 -1 1 1 -1 1 -1 -1 1 1 -1 -1 1 -1 1 1 -1 -1 1 1 1 1 1 1 -1 1 1 -1 1 -1 -1 -1 1 -1 1 1 -1 1 -1 -1 -1\\n\",\n    \"52 37\\n-1 -1 1 -1 -1 1 -1 -1 -1 1 1 -1 1 -1 -1 -1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 -1 1 1 1 1 1 -1 -1 1 -1 -1 1 1 1 -1 1 1 -1 1 -1 1 1\\n\",\n    \"52 42\\n-1 -1 -1 -1 1 -1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1 -1 -1 1 -1 1 -1 1 1 1 -1 1 -1 -1 -1 -1 -1 -1 -1 1 1 1 -1 -1 1 1 1 1 1 -1 -1 1 -1 1 1 1\\n\",\n    \"52 47\\n-1 -1 1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 1 1 -1 1 1 -1 1 1 1 1 1 -1 -1 1 -1 -1 1 1 -1 -1 -1 -1 -1 1 1 -1 1 1 1 -1 1 1 -1 -1 1 -1 1 1 -1\\n\",\n    \"68 2\\n-1 1 1 -1 1 -1 -1 1 -1 1 -1 1 -1 1 1 1 1 1 1 1 1 -1 -1 1 1 1 -1 1 1 -1 1 1 1 1 -1 -1 1 -1 -1 1 1 -1 1 1 1 1 -1 -1 1 1 -1 -1 -1 1 1 1 -1 -1 1 -1 -1 1 1 -1 1 1 -1 1\\n\",\n    \"68 67\\n-1 -1 1 1 -1 -1 1 -1 -1 1 -1 1 1 1 1 -1 1 -1 1 -1 1 -1 1 -1 1 1 1 -1 1 1 -1 1 1 1 1 1 1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 1 1 1 -1 -1 1 -1 1 -1 -1 1 1 -1 -1 1 -1 -1\\n\",\n    \"68 7\\n-1 1 1 -1 1 1 -1 1 1 -1 -1 1 1 1 -1 1 1 1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 1 1 -1 1 1 1 -1 1 -1 -1 -1 -1 1 1 1 1 -1 1 1 -1 1 1 1 1 -1 1 1 1 -1 1 1 1 -1 1 1 1 1 -1 1 -1\\n\",\n    \"68 12\\n-1 1 -1 1 -1 -1 1 -1 -1 -1 1 -1 1 1 1 -1 1 -1 1 -1 -1 1 1 1 -1 1 1 -1 1 1 -1 1 -1 -1 -1 1 1 -1 -1 -1 -1 1 -1 1 1 1 1 1 1 1 -1 1 -1 -1 1 1 1 -1 1 1 -1 1 1 1 1 -1 1 1\\n\",\n    \"68 17\\n-1 1 -1 1 -1 -1 -1 -1 1 1 1 -1 -1 1 -1 -1 -1 1 1 -1 1 -1 -1 1 1 -1 1 -1 1 -1 1 1 -1 1 -1 -1 1 1 -1 1 -1 1 -1 1 -1 1 1 1 1 -1 1 -1 -1 1 -1 1 1 1 -1 -1 1 1 -1 -1 1 1 1 -1\\n\",\n    \"68 22\\n1 1 -1 1 1 1 -1 1 1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 1 1 -1 1 1 1 1 1 1 1 1 -1 1 -1 -1 -1 -1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 1 1 1 1 -1 -1 1 -1 -1 1 1 -1 -1 -1 1 1 -1 1\\n\",\n    \"68 27\\n1 1 -1 1 1 1 -1 1 1 -1 -1 -1 1 -1 -1 1 -1 1 -1 -1 1 -1 -1 1 1 -1 1 -1 1 1 -1 1 1 -1 1 -1 1 -1 -1 -1 1 -1 -1 1 1 -1 1 -1 -1 -1 1 -1 1 1 -1 1 1 1 1 -1 -1 -1 1 1 1 -1 1 -1\\n\",\n    \"68 32\\n1 1 -1 -1 -1 -1 -1 -1 1 1 1 -1 1 1 1 1 -1 -1 1 -1 -1 -1 1 1 1 1 -1 1 -1 -1 1 -1 -1 1 1 -1 -1 1 1 -1 -1 -1 -1 1 1 1 -1 1 1 1 -1 -1 -1 1 -1 -1 -1 1 -1 -1 -1 1 -1 1 1 -1 1 1\\n\",\n    \"68 37\\n-1 -1 1 -1 1 -1 1 -1 -1 -1 1 -1 -1 1 -1 1 -1 1 -1 -1 -1 1 -1 1 -1 -1 -1 1 1 1 -1 1 -1 1 1 1 1 -1 1 -1 -1 -1 1 1 -1 1 -1 1 1 1 -1 1 -1 -1 -1 -1 -1 -1 1 1 1 -1 -1 -1 1 -1 -1 -1\\n\",\n    \"68 42\\n-1 -1 1 -1 -1 -1 1 -1 -1 1 -1 -1 -1 -1 -1 1 -1 1 -1 -1 1 -1 1 -1 1 1 1 -1 -1 -1 -1 -1 1 -1 -1 1 1 -1 1 -1 1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 -1 1 -1 1 -1 1 1 1 1 1 1\\n\",\n    \"68 47\\n-1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 1 1 -1 1 -1 -1 -1 1 -1 -1 1 -1 -1 -1 -1 -1 1 -1 -1 1 -1 1 -1 -1 -1 -1 1 1 1 -1 1 -1 1 -1 -1 -1 -1 -1 -1 1 -1 1 -1 -1 -1 -1 -1 -1 1 -1 1 1 -1 1 1 1 -1\\n\",\n    \"68 52\\n1 -1 1 -1 1 1 -1 1 -1 1 1 1 1 1 -1 1 -1 1 1 -1 1 1 1 -1 -1 -1 1 1 1 1 -1 -1 -1 1 1 -1 1 -1 -1 1 1 1 1 -1 1 1 1 1 1 -1 1 -1 -1 -1 -1 -1 1 -1 -1 1 -1 -1 -1 -1 -1 1 -1 -1\\n\",\n    \"68 57\\n1 -1 1 -1 1 1 -1 1 1 -1 1 1 -1 -1 1 -1 1 -1 -1 -1 1 -1 1 -1 1 -1 1 -1 -1 -1 1 -1 -1 -1 1 1 -1 -1 1 -1 1 1 -1 -1 1 1 1 1 1 1 -1 1 -1 1 -1 -1 1 1 1 -1 1 -1 -1 1 -1 -1 1 -1\\n\",\n    \"68 62\\n-1 -1 1 1 -1 -1 1 -1 1 1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 1 1 1 1 1 1 1 1 1 1 1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 1 1 -1 -1 1 1 -1 1 1 1 1 1 -1 -1 1 -1\\n\",\n    \"84 2\\n1 -1 1 -1 -1 -1 1 1 1 1 -1 -1 -1 1 -1 -1 -1 1 -1 -1 -1 1 -1 1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1 -1 -1 1 -1 1 -1 1 1 1 -1 1 -1 -1 -1 -1 -1 -1 -1 1 1 1 -1 -1 1 1 1 1 1 -1 -1 1 -1 1 1 1 1 -1 1 -1 1\\n\",\n    \"84 83\\n1 -1 1 1 1 -1 -1 -1 1 -1 1 -1 1 1 1 1 -1 -1 -1 -1 -1 -1 1 1 -1 -1 1 -1 -1 1 -1 1 -1 1 1 -1 1 1 -1 -1 -1 -1 -1 -1 1 1 -1 1 1 -1 1 1 -1 -1 1 1 -1 1 -1 1 -1 1 -1 1 -1 -1 -1 1 1 -1 1 1 1 -1 -1 1 1 -1 -1 1 1 1 1 -1\\n\",\n    \"84 7\\n-1 -1 1 -1 1 -1 1 1 -1 -1 -1 -1 1 1 -1 1 -1 -1 1 -1 1 -1 1 1 1 1 -1 1 -1 -1 1 1 1 1 1 1 1 -1 -1 -1 -1 1 1 1 1 -1 1 -1 1 -1 1 -1 1 1 -1 -1 -1 1 -1 1 -1 -1 1 -1 -1 -1 1 1 -1 1 1 1 -1 1 -1 1 -1 1 -1 1 -1 -1 1 -1\\n\",\n    \"84 12\\n-1 1 -1 -1 -1 1 -1 -1 -1 -1 1 1 -1 -1 -1 1 -1 -1 -1 1 -1 -1 -1 -1 1 -1 -1 1 -1 1 1 1 -1 1 1 1 1 1 -1 -1 1 1 -1 -1 -1 -1 1 1 -1 1 1 -1 -1 1 -1 1 -1 -1 1 -1 1 -1 -1 -1 1 1 -1 1 1 -1 1 -1 1 1 1 -1 1 -1 1 -1 1 1 -1 -1\\n\",\n    \"84 17\\n-1 1 1 -1 -1 1 -1 -1 1 1 1 1 1 -1 1 -1 -1 1 -1 1 1 1 -1 -1 -1 1 -1 -1 -1 1 -1 1 -1 1 1 -1 -1 -1 -1 -1 1 -1 -1 1 -1 -1 -1 1 -1 1 1 1 -1 1 1 1 1 1 -1 1 -1 -1 -1 -1 1 -1 1 1 -1 -1 1 -1 -1 -1 1 1 -1 1 -1 -1 -1 -1 1 1\\n\",\n    \"84 22\\n1 1 -1 -1 1 1 -1 -1 1 -1 -1 1 1 1 -1 1 -1 -1 1 1 -1 -1 -1 -1 -1 1 1 1 1 -1 1 -1 1 -1 -1 -1 1 -1 -1 -1 -1 -1 1 -1 1 1 1 -1 1 1 1 -1 1 1 -1 1 -1 1 -1 1 -1 1 1 -1 1 -1 1 1 1 1 -1 1 -1 1 1 1 1 -1 -1 1 -1 1 1 1\\n\",\n    \"84 27\\n1 1 1 1 1 1 1 -1 -1 1 -1 1 -1 1 1 -1 -1 1 1 1 -1 1 -1 -1 1 1 -1 1 1 1 -1 1 1 -1 -1 1 -1 1 -1 1 -1 -1 -1 -1 1 1 1 -1 1 -1 -1 1 1 1 1 1 -1 -1 -1 1 1 1 1 1 1 1 -1 1 1 1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 1 1 -1\\n\",\n    \"84 32\\n1 -1 1 1 -1 -1 1 1 -1 -1 1 1 -1 -1 -1 -1 -1 1 -1 1 1 1 -1 1 -1 1 1 -1 1 -1 -1 -1 -1 1 -1 1 1 -1 1 1 1 -1 -1 -1 1 -1 -1 1 -1 -1 -1 1 -1 1 -1 1 1 -1 -1 1 1 -1 -1 1 1 1 1 1 -1 1 1 1 -1 1 -1 1 -1 -1 -1 -1 -1 -1 -1 1\\n\",\n    \"84 37\\n-1 -1 1 1 1 -1 -1 1 -1 -1 1 1 1 1 1 -1 -1 1 -1 1 -1 1 -1 -1 1 1 1 1 1 -1 1 -1 -1 -1 -1 1 -1 -1 1 -1 1 1 1 -1 -1 -1 1 1 -1 1 1 -1 -1 -1 1 1 1 -1 1 -1 -1 -1 -1 -1 1 -1 1 1 1 -1 1 1 1 1 1 -1 -1 1 1 -1 1 1 -1 -1\\n\",\n    \"84 42\\n-1 -1 1 1 -1 1 -1 -1 -1 -1 -1 1 1 1 1 -1 -1 1 1 1 1 1 -1 1 1 1 -1 1 -1 1 -1 -1 1 1 1 1 -1 1 1 -1 -1 1 1 -1 -1 1 -1 -1 1 1 1 -1 1 -1 1 -1 1 -1 1 1 -1 1 1 -1 -1 -1 -1 1 -1 -1 -1 1 1 1 1 1 -1 -1 1 1 1 -1 1 -1\\n\",\n    \"84 47\\n-1 -1 1 1 -1 1 -1 1 1 -1 -1 -1 -1 -1 -1 1 1 -1 1 1 -1 -1 -1 1 -1 -1 1 -1 -1 -1 1 -1 1 1 1 -1 1 1 1 -1 -1 1 -1 -1 1 1 -1 -1 1 -1 1 1 1 -1 1 1 1 1 -1 -1 1 1 -1 1 -1 -1 1 1 -1 -1 -1 1 -1 1 1 1 -1 1 -1 1 -1 1 1 1\\n\",\n    \"84 52\\n1 -1 1 -1 1 1 1 -1 1 1 1 -1 -1 1 1 1 1 1 -1 1 1 1 -1 1 1 1 -1 1 -1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 1 -1 1 -1 1 1 -1 -1 1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 -1 -1 1 1 1 1 1 1 1 -1 -1 1 -1 -1 -1 1 -1 -1 -1 1 -1\\n\",\n    \"84 57\\n1 -1 1 -1 1 1 1 -1 -1 -1 1 -1 1 1 -1 1 1 -1 1 1 1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 1 -1 1 1 1 -1 1 -1 1 -1 1 1 1 -1 1 -1 1 1 -1 1 -1 1 -1 -1 -1\\n\",\n    \"84 62\\n-1 -1 1 -1 -1 -1 1 1 -1 1 -1 -1 1 -1 1 1 1 -1 1 1 -1 -1 1 1 -1 1 1 -1 1 1 1 1 1 1 1 1 -1 -1 -1 1 1 -1 -1 -1 -1 1 -1 -1 1 1 -1 1 1 1 1 -1 -1 1 -1 -1 -1 -1 1 1 -1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 1 1 -1 1\\n\",\n    \"84 67\\n-1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 1 1 1 -1 1 1 -1 1 1 1 1 -1 1 1 1 1 -1 -1 -1 -1 -1 1 1 1 -1 1 1 1 1 1 1 1 -1 1 1 1 -1 -1 -1 1 1 1 -1 -1 -1 -1 -1 1 1 1 -1 -1 1 1 1 1 -1 1 -1 1 1 -1 -1 -1 -1\\n\",\n    \"84 72\\n1 1 -1 -1 1 1 -1 1 -1 1 1 -1 -1 1 -1 1 1 -1 -1 1 -1 -1 1 -1 -1 -1 1 -1 1 -1 -1 -1 -1 -1 1 -1 1 1 -1 -1 -1 1 1 1 1 -1 -1 -1 -1 -1 1 -1 1 1 1 -1 1 -1 1 1 -1 1 -1 -1 -1 -1 -1 1 -1 1 1 -1 1 -1 -1 1 1 -1 -1 -1 1 1 1 -1\\n\",\n    \"84 77\\n1 1 -1 1 -1 1 -1 1 1 1 1 1 1 1 1 -1 1 1 1 1 -1 1 -1 -1 1 -1 1 -1 1 1 1 1 -1 1 1 -1 -1 1 -1 -1 -1 1 -1 -1 1 -1 -1 -1 -1 -1 1 1 -1 -1 1 -1 1 1 -1 -1 -1 1 1 1 -1 1 1 1 1 1 1 -1 -1 1 1 -1 1 -1 -1 -1 -1 -1 1 1\\n\",\n    \"84 82\\n1 1 -1 1 1 1 1 -1 1 -1 -1 1 1 -1 -1 -1 1 -1 -1 1 1 1 1 -1 1 -1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1 -1 1 1 1 1 1 1 -1 1 1 1 1 1 1 1 -1 -1 1 -1 1 -1 -1 1 1 -1 -1 -1 1 1 1 1 -1 -1 -1 -1 -1 -1 1 1 1 1 1 1 -1 1 -1 -1\\n\",\n    \"100 2\\n-1 -1 -1 -1 1 -1 -1 -1 -1 -1 1 1 -1 -1 1 -1 1 -1 -1 -1 1 -1 -1 1 -1 1 -1 -1 1 1 1 -1 -1 1 -1 -1 -1 1 1 1 -1 -1 -1 1 -1 1 1 -1 1 -1 -1 1 1 -1 1 -1 1 -1 1 1 -1 -1 -1 1 -1 -1 1 -1 1 -1 1 1 1 -1 1 -1 1 1 1 -1 1 1 -1 -1 -1 -1 1 1 1 1 1 1 1 -1 -1 -1 1 -1 1 -1\\n\",\n    \"100 99\\n-1 -1 -1 -1 1 1 -1 -1 -1 -1 -1 1 -1 1 -1 -1 1 -1 -1 1 -1 1 1 1 -1 -1 1 -1 1 -1 1 -1 1 1 -1 1 1 -1 -1 -1 1 1 -1 -1 1 -1 1 1 -1 1 1 -1 1 -1 1 -1 -1 1 1 1 1 -1 -1 -1 -1 -1 1 1 1 1 -1 -1 1 1 -1 1 -1 1 -1 -1 1 -1 1 1 1 1 -1 -1 -1 1 -1 1 -1 -1 -1 1 1 1 1 1\\n\",\n    \"100 7\\n-1 -1 -1 -1 1 -1 1 1 -1 -1 1 -1 1 -1 -1 -1 1 1 -1 -1 1 1 1 1 1 -1 1 1 1 1 -1 1 1 1 -1 1 1 1 1 -1 -1 -1 1 1 -1 1 1 -1 1 -1 -1 -1 1 1 -1 -1 1 -1 -1 -1 -1 1 1 -1 -1 1 1 -1 1 -1 1 1 -1 -1 -1 1 -1 1 1 1 -1 -1 -1 -1 1 -1 -1 -1 1 -1 -1 -1 1 1 -1 1 -1 -1 1 1\\n\",\n    \"100 12\\n-1 -1 1 1 -1 -1 1 1 1 -1 1 -1 -1 1 1 1 -1 -1 -1 -1 -1 -1 -1 1 1 1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 1 -1 -1 1 1 1 1 -1 1 1 -1 1 1 1 1 1 1 -1 1 -1 1 1 1 1 -1 -1 -1 1 1 1 -1 1 1 1 -1 1 1 -1 -1 -1 1 1 -1 -1 1 1 1 1 -1 1 1 -1 1 -1 1 1 1 1 1 -1 -1 -1 -1 -1\\n\",\n    \"100 22\\n1 -1 1 1 1 1 -1 -1 -1 -1 -1 -1 1 -1 1 1 -1 1 1 -1 1 -1 -1 1 -1 1 1 1 1 1 1 -1 1 1 -1 -1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 -1 -1 -1 1 1 -1 -1 1 1 -1 -1 -1 1 1 1 1 1 -1 1 -1 -1 -1 -1 -1 1 1 -1 1 -1 -1 1 1 -1 -1 -1 -1 -1\\n\",\n    \"100 27\\n1 1 1 -1 1 1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 1 -1 1 -1 1 -1 1 1 -1 1 -1 1 1 -1 -1 -1 1 1 1 -1 1 -1 -1 1 -1 1 -1 -1 -1 -1 1 1 -1 1 1 -1 1 -1 -1 -1 1 1 -1 1 -1 1 1 -1 -1 -1 1 1 -1 1 1 -1 1 1 -1 -1 -1 -1 1 1 -1 -1 1 -1 -1 1 -1 1 -1 -1 -1 -1 -1 -1 1 1 -1 -1 1\\n\",\n    \"100 32\\n1 1 1 -1 -1 -1 -1 -1 -1 1 1 -1 -1 1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 1 1 1 1 -1 1 1 -1 -1 1 1 1 -1 1 -1 -1 -1 -1 -1 1 1 1 -1 1 -1 1 1 1 1 -1 1 -1 1 1 -1 -1 1 -1 1 -1 -1 -1 1 -1 1 -1 -1 1 -1 1 1 1 1 1 1 1 -1 -1 1 1 -1 -1 1 -1 1 -1 -1 1 1 -1 -1 1 1 -1 1\\n\",\n    \"100 37\\n-1 1 -1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 -1 -1 -1 -1 1 1 1 1 -1 1 1 -1 1 1 1 1 -1 1 1 1 1 -1 1 1 1 1 -1 1 -1 -1 1 1 1 -1 -1 1 1 -1 1 1 -1 -1 -1 -1 1 1 -1 1 -1 -1 -1 1 1 1 -1 1 -1 1 1 1 -1 -1 -1 1 -1 -1 -1 1 1 -1 -1 -1 1 -1 -1 -1 1 1 1 -1 -1 1 -1 -1 -1 -1\\n\",\n    \"100 42\\n-1 1 -1 -1 -1 -1 1 1 1 1 -1 -1 1 1 -1 -1 1 1 1 1 -1 1 -1 -1 1 1 -1 -1 -1 -1 -1 1 1 1 -1 -1 -1 -1 1 1 1 1 1 1 1 -1 1 1 -1 1 -1 -1 -1 1 -1 1 1 1 1 -1 1 -1 1 1 -1 1 -1 1 1 -1 1 -1 1 -1 1 -1 1 1 -1 -1 -1 -1 1 1 -1 -1 1 -1 -1 1 1 1 1 -1 1 -1 1 1 1 1\\n\",\n    \"100 47\\n-1 1 -1 -1 -1 -1 -1 1 -1 -1 -1 1 -1 1 1 1 1 -1 -1 1 1 -1 -1 -1 -1 -1 -1 1 -1 -1 1 1 -1 -1 -1 1 1 -1 1 -1 1 1 -1 -1 -1 -1 1 1 1 -1 -1 1 -1 -1 -1 1 1 -1 -1 1 1 -1 1 -1 -1 -1 -1 1 -1 -1 1 -1 -1 -1 -1 1 -1 1 1 1 1 1 1 -1 1 1 -1 1 -1 -1 -1 1 -1 -1 1 1 -1 -1 1 -1\\n\",\n    \"100 52\\n1 1 -1 1 1 1 -1 -1 1 1 1 1 -1 -1 -1 -1 1 -1 1 1 -1 1 -1 -1 1 1 -1 -1 -1 1 -1 1 -1 1 1 1 -1 1 -1 -1 -1 1 -1 1 -1 1 -1 -1 1 -1 -1 1 1 -1 -1 1 1 -1 -1 1 -1 1 -1 -1 -1 -1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 1 -1 1 -1 -1 -1 -1 -1 1 -1 -1 1 1 -1 1 -1 -1 1 -1 1 1 1 1\\n\",\n    \"100 57\\n1 1 -1 1 1 1 -1 -1 -1 1 1 1 1 -1 1 1 1 1 1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 1 1 1 1 1 1 1 -1 -1 -1 -1 1 -1 1 1 -1 -1 -1 1 1 -1 1 -1 -1 1 1 1 1 -1 1 1 -1 1 -1 1 -1 1 1 1 -1 -1 -1 -1 1 1 -1 1 -1 -1 1 1 -1 1 -1 1 1 1 1 1 -1 -1 -1 1 -1 1 1 1 1 1\\n\",\n    \"100 62\\n-1 1 -1 1 -1 -1 -1 -1 -1 -1 -1 1 1 1 -1 1 1 -1 -1 1 -1 -1 -1 -1 -1 -1 1 1 1 1 1 -1 1 -1 1 1 1 -1 -1 -1 1 -1 -1 1 1 -1 1 1 -1 1 1 1 -1 -1 -1 1 -1 -1 1 1 1 -1 1 1 1 1 -1 1 -1 -1 1 1 1 -1 1 1 -1 -1 1 -1 1 1 1 1 1 1 1 -1 1 -1 1 -1 1 -1 -1 -1 -1 1 1 -1\\n\",\n    \"100 67\\n-1 -1 -1 1 -1 -1 1 -1 1 1 -1 1 -1 1 1 1 1 1 -1 1 -1 -1 -1 -1 1 -1 1 -1 1 -1 -1 -1 -1 -1 1 -1 -1 1 -1 1 1 -1 -1 1 -1 -1 -1 1 1 1 1 -1 -1 1 -1 1 -1 1 1 -1 -1 -1 1 -1 1 1 1 1 1 -1 1 -1 1 -1 1 -1 1 1 -1 1 -1 -1 1 -1 -1 1 1 -1 1 1 1 -1 1 1 -1 1 1 1 -1 1\\n\",\n    \"100 72\\n1 -1 -1 1 1 -1 1 1 1 -1 1 1 -1 -1 1 1 1 -1 1 1 1 -1 -1 1 -1 -1 -1 1 1 1 1 -1 -1 1 -1 -1 1 1 1 1 -1 -1 1 1 -1 1 1 -1 1 -1 -1 -1 1 1 -1 1 1 1 1 -1 -1 1 -1 1 1 -1 -1 1 -1 1 -1 1 1 1 1 1 -1 -1 1 1 -1 1 -1 1 -1 1 1 1 1 -1 -1 1 1 -1 1 -1 -1 1 -1 -1\\n\",\n    \"100 77\\n1 -1 1 -1 1 -1 -1 1 1 1 1 -1 1 -1 -1 -1 -1 1 1 1 -1 1 -1 -1 1 1 1 1 1 1 -1 -1 1 1 -1 1 -1 -1 -1 -1 -1 1 -1 1 1 1 1 -1 -1 -1 -1 1 1 1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 1 1 1 -1 1 -1 -1 -1 1 -1 -1 -1 -1 1 -1 1 -1 1 1 1 -1 1 -1 1\\n\",\n    \"100 82\\n1 -1 1 -1 -1 1 -1 -1 1 -1 -1 -1 1 1 1 1 -1 1 -1 1 1 -1 -1 1 1 -1 -1 -1 -1 -1 -1 1 1 -1 1 1 1 1 1 -1 1 1 -1 1 1 -1 -1 1 -1 1 -1 1 -1 1 -1 1 1 1 -1 -1 1 -1 1 -1 1 -1 1 1 1 -1 1 1 -1 1 -1 1 -1 -1 -1 -1 1 1 -1 -1 -1 -1 -1 1 -1 -1 1 1 -1 -1 1 -1 1 -1 -1 1\\n\",\n    \"100 87\\n-1 -1 1 -1 1 1 -1 1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 1 1 1 -1 1 -1 1 -1 1 1 1 1 1 -1 1 1 -1 1 1 1 1 1 -1 1 1 1 -1 1 -1 1 1 1 -1 -1 -1 -1 1 1 -1 1 1 -1 1 1 1 1 1 -1 -1 -1 -1 1 1 -1 -1 1 1 1 1 1 1 -1 -1 1 1 -1 -1 1 -1 -1 -1 1 -1 -1 1 -1 1 -1 1 -1 -1\\n\",\n    \"100 92\\n-1 -1 1 -1 -1 -1 1 -1 -1 -1 1 -1 -1 -1 1 -1 -1 1 1 1 -1 1 1 1 1 -1 1 1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 1 1 -1 -1 -1 1 -1 1 -1 1 1 -1 1 -1 1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 1 1 1 -1 1 1 1 -1 1 1 1 1 -1 1 -1 -1 1 1 -1 1 -1 1 -1 1 1 -1 1 1 -1 1 1 -1 -1 1 -1 1 1\\n\",\n    \"100 97\\n-1 -1 1 -1 -1 -1 1 -1 1 -1 1 -1 1 -1 -1 -1 -1 -1 -1 1 1 1 -1 1 -1 1 -1 -1 -1 -1 1 1 1 -1 -1 -1 1 1 1 1 1 -1 -1 1 -1 1 -1 1 -1 -1 -1 1 1 -1 1 1 -1 1 1 1 1 -1 -1 -1 1 -1 1 -1 1 1 -1 1 1 -1 1 1 1 1 -1 -1 -1 1 1 1 1 1 -1 1 1 -1 -1 -1 1 -1 -1 1 1 1 1 -1\\n\",\n    \"4 3\\n-1 1 -1 -1\\n\",\n    \"4 3\\n1 1 -1 1\\n\",\n    \"3 2\\n1 1 1\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"9\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"12\\n\",\n    \"6\\n\",\n    \"4\\n\",\n    \"10\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"8\\n\",\n    \"8\\n\",\n    \"8\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"11\\n\",\n    \"5\\n\",\n    \"11\\n\",\n    \"14\\n\",\n    \"6\\n\",\n    \"4\\n\",\n    \"16\\n\",\n    \"10\\n\",\n    \"6\\n\",\n    \"10\\n\",\n    \"5\\n\",\n    \"14\\n\",\n    \"12\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"12\\n\",\n    \"18\\n\",\n    \"26\\n\",\n    \"6\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"8\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"11\\n\",\n    \"9\\n\",\n    \"11\\n\",\n    \"19\\n\",\n    \"7\\n\",\n    \"7\\n\",\n    \"10\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"10\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"10\\n\",\n    \"12\\n\",\n    \"9\\n\",\n    \"14\\n\",\n    \"3\\n\",\n    \"7\\n\",\n    \"8\\n\",\n    \"18\\n\",\n    \"15\\n\",\n    \"7\\n\",\n    \"3\\n\",\n    \"13\\n\",\n    \"19\\n\",\n    \"10\\n\",\n    \"18\\n\",\n    \"6\\n\",\n    \"4\\n\",\n    \"16\\n\",\n    \"12\\n\",\n    \"4\\n\",\n    \"8\\n\",\n    \"8\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"2\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1100/A",
  "starter_code": ""
}