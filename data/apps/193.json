{
  "task_id": "APPS/193",
  "problem_id": 193,
  "prompt": "The determinant of a matrix 2 \u00d7 2 is defined as follows:$\\operatorname{det} \\left(\\begin{array}{ll}{a} & {b} \\\\{c} & {d} \\end{array} \\right) = a d - b c$\n\nA matrix is called degenerate if its determinant is equal to zero. \n\nThe norm ||A|| of a matrix A is defined as a maximum of absolute values of its elements.\n\nYou are given a matrix $A = \\left(\\begin{array}{ll}{a} & {b} \\\\{c} & {d} \\end{array} \\right)$. Consider any degenerate matrix B such that norm ||A - B|| is minimum possible. Determine ||A - B||.\n\n\n-----Input-----\n\nThe first line contains two integers a and b (|a|, |b| \u2264 10^9), the elements of the first row of matrix A. \n\nThe second line contains two integers c and d (|c|, |d| \u2264 10^9) the elements of the second row of matrix A.\n\n\n-----Output-----\n\nOutput a single real number, the minimum possible value of ||A - B||. Your answer is considered to be correct if its absolute or relative error does not exceed 10^{ - 9}.\n\n\n-----Examples-----\nInput\n1 2\n3 4\n\nOutput\n0.2000000000\n\nInput\n1 0\n0 1\n\nOutput\n0.5000000000\n\n\n\n-----Note-----\n\nIn the first sample matrix B is $\\left(\\begin{array}{ll}{1.2} & {1.8} \\\\{2.8} & {4.2} \\end{array} \\right)$\n\nIn the second sample matrix B is $\\left(\\begin{array}{ll}{0.5} & {0.5} \\\\{0.5} & {0.5} \\end{array} \\right)$",
  "solutions": "[\"def seg(x, y, h):\\n    A = [x - h, x + h]\\n    B = [y - h, y + h]\\n    Z = []\\n    for a in A:\\n        for b in B:\\n            Z.append(a * b)\\n    Z.sort()\\n    return (Z[0], Z[-1])\\n\\ndef check(a, b, c, d, h):\\n    x1, y1 = seg(a, d, h)\\n    x2, y2 = seg(b, c, h)\\n    return max(x1, x2) <= min(y1, y2)\\n\\na, b = list(map(int, input().split()))\\nc, d = list(map(int, input().split()))\\nl = 0\\nr = max(abs(a), abs(b), abs(c), abs(d))\\nfor i in range(100):\\n    m = (l + r) / 2\\n    if check(a, b, c, d, m):\\n        r = m\\n    else:\\n        l = m\\nprint((r + l) / 2)\\n\\n\", \"\\\"\\\"\\\"\\nCodeforces Looksery Cup 2015 Problem H\\n\\nAuthor  : chaotic_iak\\nLanguage: Python 3.4.2\\n\\\"\\\"\\\"\\n\\n################################################### SOLUTION\\n\\ndef minimize(m):\\n    ad = [m[0][0]*m[3][0], m[0][0]*m[3][1] + m[0][1]*m[3][0], m[0][1]*m[3][1]]\\n    bc = [m[1][0]*m[2][0], m[1][0]*m[2][1] + m[1][1]*m[2][0], m[1][1]*m[2][1]]\\n    det = [ad[0]-bc[0], ad[1]-bc[1], ad[2]-bc[2]]\\n    if det[0] != 0:\\n        disc = det[1]**2 - 4*det[0]*det[2]\\n        if disc < 0: return []\\n        return [(-det[1] + disc**.5) / (2*det[0]), (-det[1] - disc**.5) / (2*det[0])]\\n    if det[1] != 0:\\n        return [-det[2]/det[1]]\\n    if det[2] != 0:\\n        return []\\n    return [0]\\n\\ndef main():\\n    matrix = read() + read()\\n    import itertools\\n    r = range(4)\\n    ans = 10**18\\n    for i in range(5):\\n        for k in itertools.combinations(r, i):\\n            m = [((1 if j in k else -1), matrix[j]) for j in range(4)]\\n            for res in minimize(m):\\n                if abs(res) < ans: ans = abs(res)\\n    print(ans)\\n\\n\\n\\n#################################################### HELPERS\\n\\n\\n\\ndef read(mode=2):\\n    # 0: String\\n    # 1: List of strings\\n    # 2: List of integers\\n    inputs = input().strip()\\n    if mode == 0: return inputs\\n    if mode == 1: return inputs.split()\\n    if mode == 2: return list(map(int, inputs.split()))\\n\\ndef write(s=\\\"\\\\n\\\"):\\n    if s is None: s = \\\"\\\"\\n    if isinstance(s, list): s = \\\" \\\".join(map(str, s))\\n    s = str(s)\\n    print(s, end=\\\"\\\")\\n\\nwrite(main())\", \"store1=input(\\\"\\\").split(' ')\\na=int(store1[0])\\nb=int(store1[1])\\nstore2=input(\\\"\\\").split(' ')\\nc=int(store2[0])\\nd=int(store2[1])\\nlo=0\\nhi=2*10**18\\nwhile (hi-lo>10**-10*lo):\\n    mid=(hi+lo)/2.0\\n    mini=2*10**19\\n    maxi=-2*10**19\\n    for t in range ((1<<4)):\\n        store=[a, b, d, c]\\n        for k in range(4):\\n            if (((1<<k)&t)!=0):\\n                store[k]+=mid\\n            else:\\n                store[k]-=mid\\n        x=store[0]*store[2]-store[1]*store[3]\\n        if (x>=maxi):\\n            maxi=x\\n        if (x<=mini):\\n            mini=x\\n    if (mini<=maxi and maxi>=0 and mini<=0):\\n        hi=mid\\n    else:\\n        lo=mid\\nprint(lo)\\n\", \"EPS = 1e-11\\nINF = float(\\\"inf\\\")\\n\\n\\ndef multiply ( a , b ):\\n    m = INF\\n    M = -INF\\n    for i in range(2):\\n        for j in range(2):\\n            m = min(m, a[i] * b[j])\\n            M = max(M, a[i] * b[j])\\n\\n    return (m, M)\\n\\ndef intersect ( a , b ):\\n    return (a[0] <= b[1] and b[0] <= a[1])\\n\\n\\na, b = list(map(float, input().split()))\\nc, d = list(map(float, input().split()))\\n\\n\\nlo = 0\\nhi = 1e9\\n\\nnIters = 0\\nwhile nIters < 1000 and abs(lo - hi) > EPS:\\n    mi = (lo + hi) / 2\\n\\n    i1 = multiply((a - mi, a + mi), (d - mi, d + mi))\\n    i2 = multiply((b - mi, b + mi), (c - mi, c + mi))\\n\\n    if ( intersect(i1, i2) ):\\n        hi = mi\\n    else:\\n        lo = mi\\n\\n    nIters += 1\\n\\nprint(\\\"{:.10f}\\\".format(hi))\\n\", \"__author__ = '\\u0414\\u0430\\u043d\\u0438\\u043b\\u0430'\\na, b = list(map(int, input().split()))\\nc, d = list(map(int, input().split()))\\n\\ndef solve(x,y,z):\\n    if y**2 - 4*z*x < 0:\\n        return -10**27\\n    else:\\n        disi = y**2 - 4*z*x\\n        return min(abs((-y + disi**.5)/2*x), abs((-y - disi**.5)/2*x))\\n\\nif a*d-b*c == 0:\\n    print(0)\\nelse:\\n    det = a*d - b*c\\n    k = max(a + d + b + c, a - d + c - b, a - d - c + b, a + d - b - c, -a + d - b + c, -a + d - c + b, -a - d + b + c, -a - b - c - d)\\n    a1 = abs(det/k)\\n    ans = a1\\n    if solve(2, -a - d - c + b, det) != -10**27:\\n        ans = min(ans, solve(2, -a - d - c + b, det))\\n    if solve(2, -a - d + c - b, det) != -10**27:\\n        ans = min(ans, solve(2, -a - d + c - b, det))\\n    if solve(2, a + d + c - b, det)!= -10**27:\\n        ans = min(ans, solve(2, a + d + c - b, det))\\n    if solve(2, a + d - c + b, det)!= -10**27:\\n        ans = min(ans, solve(2, a + d - c + b, det))\\n    if solve(-2, -a + d - c - b, det)!= -10**27:\\n        ans = min(ans, solve(-2, -a + d - c - b, det))\\n    if solve(-2, a - d - c - b, det)!= -10**27:\\n        ans = min(ans, solve(-2, a - d - c - b, det))\\n    if solve(-2, -a + d + c + b, det)!= -10**27:\\n        ans = min(ans, solve(-2, -a + d + c + b, det))\\n    if solve(-2, a - d + c + b, det)!= -10**27:\\n        ans = min(ans, solve(-2, a - d + c + b, det))\\n    print(ans)\\n\\n\\n\", \"from decimal import *\\n\\ngetcontext().prec = 50\\na, b = list(map(int, input().split()))\\nc, d = list(map(int, input().split()))\\n\\nanswer = None\\n\\nfor k in range(1 << 4):\\n    le = Decimal(0)\\n    rg = Decimal(10 ** 11)\\n\\n    def f(t):\\n        fi = a\\n        if k & 1:\\n            fi += t\\n        else:\\n            fi -= t\\n\\n        fi *= (d + t if k & (1 << 1) else d - t)\\n\\n        se = (b + t if k & (1 << 2) else b - t)\\n        se *= (c + t if k & (1 << 3) else c - t)\\n\\n        return abs(fi - se)\\n\\n    for i in range(200):\\n        m1 = le + (rg - le) / Decimal(3)\\n        m2 = rg - (rg - le) / Decimal(3)\\n\\n        if f(m1) > f(m2):\\n            le = m1\\n        else:\\n            rg = m2\\n\\n    if f(le) < 1e-8:\\n        if answer == None:\\n            answer = le\\n        else:\\n            answer = min(answer, le)\\n\\nprint(answer)\\n\", \"a, b = map(int, input().split())\\nc, d = map(int, input().split())\\nl = 0\\nr = 10 ** 10\\nif (a * d == b * c):\\n    print(0)\\nelse:\\n    for i in range(10000):\\n        x = (l + r) / 2\\n        a1 = (a - x) * (d - x)\\n        a2 = (a + x) * (d + x)\\n        a3 = (a + x) * (d - x)\\n        a4 = (a - x) * (d + x)\\n        b1 = (b - x) * (c - x)\\n        b2 = (b + x) * (c + x)\\n        b3 = (b + x) * (c - x)\\n        b4 = (b - x) * (c + x)\\n        mna = min(a1, a2, a3, a4)\\n        mxa = max(a1, a2, a3, a4)\\n        mnb = min(b1, b2, b3, b4)\\n        mxb = max(b1, b2, b3, b4)\\n        if (mxa >= mnb and mxb >= mna):\\n            r = x\\n        else:\\n            l = x\\n    print('%0.10f' % x)\", \"from math import sqrt\\n\\ndef f(sa, sb, sc, sd, A, B, C, D):\\n    cA = sa * sd - sb * sc\\n    cB = sa * D + sd * A - sb * C - sc * B\\n    cC = A * D - B * C\\n    if cA == 0:\\n        if cB == 0:\\n            return 0 if cC == 0 else float(\\\"inf\\\")\\n        return abs(-cC / cB)\\n    Dis = cB * cB - 4 * cA * cC\\n    if Dis < 0:\\n        return float(\\\"inf\\\")\\n    x1 = (-cB + sqrt(Dis)) / (2 * cA)\\n    x2 = (-cB - sqrt(Dis)) / (2 * cA)\\n    return min(abs(x1), abs(x2))\\n\\ndef main():\\n    import sys\\n    \\n    A, B, C, D = [int(i) for i in sys.stdin.read().split()]\\n    result = float(\\\"inf\\\")\\n    for sa in [-1, 1]:\\n        for sb in [-1, 1]:\\n            for sc in [-1, 1]:\\n                for sd in [-1, 1]:\\n                    result = min(result, f(sa, sb, sc, sd, A, B, C, D))\\n    \\n    print(result)\\n    \\n    \\nmain()\\n\", \"store1=input(\\\"\\\").split(' ')\\na=int(store1[0])\\nb=int(store1[1])\\nstore2=input(\\\"\\\").split(' ')\\nc=int(store2[0])\\nd=int(store2[1])\\nlo=0\\nhi=2*10**18\\nwhile (hi-lo>10**-9*lo):\\n    mid=(hi+lo)/2.0\\n    mini=2*10**19\\n    maxi=-2*10**19\\n    for t in range ((1<<4)):\\n        store=[a, b, d, c]\\n        for k in range(4):\\n            if (((1<<k)&t)!=0):\\n                store[k]+=mid\\n            else:\\n                store[k]-=mid\\n        x=store[0]*store[2]-store[1]*store[3]\\n        if (x>=maxi):\\n            maxi=x\\n        if (x<=mini):\\n            mini=x\\n    if (mini<=maxi and maxi>=0 and mini<=0):\\n        hi=mid\\n    else:\\n        lo=mid\\nprint(lo)\", \"store1=input(\\\"\\\").split(' ')\\na=int(store1[0])\\nb=int(store1[1])\\nstore2=input(\\\"\\\").split(' ')\\nc=int(store2[0])\\nd=int(store2[1])\\nlo=0\\nhi=2*10**18\\nwhile (hi-lo>10**-9*lo):\\n    mid=(hi+lo)/2.0\\n    mini=2*10**19\\n    maxi=-2*10**19\\n    for t in range ((1<<4)):\\n        store=[a, b, d, c]\\n        for k in range(4):\\n            if (((1<<k)&t)!=0):\\n                store[k]+=mid\\n            else:\\n                store[k]-=mid\\n        x=store[0]*store[2]-store[1]*store[3]\\n        if (x>=maxi):\\n            maxi=x\\n        if (x<=mini):\\n            mini=x\\n    if (mini<=maxi and maxi>=0 and mini<=0):\\n        hi=mid\\n    else:\\n        lo=mid\\nprint(lo)\", \"__author__ = '\\u0414\\u0430\\u043d\\u0438\\u043b\\u0430'\\na, b = list(map(int, input().split()))\\nc, d = list(map(int, input().split()))\\n\\ndef solve(x,y,z):\\n    if y**2 - 4*z*x < 0:\\n        return -10**27\\n    else:\\n        disi = y**2 - 4*z*x\\n        return min(abs((-y + disi**.5)/2*x), abs((-y - disi**.5)/2*x))\\n\\nif a*d-b*c == 0:\\n    print(0)\\nelse:\\n    det = a*d - b*c\\n    k = max(a + d + b + c, a - d + c - b, a - d - c + b, a + d - b - c, -a + d - b + c, -a + d - c + b, -a - d + b + c, -a - b - c - d)\\n    a1 = abs(det/k)\\n    ans = a1\\n    print(ans)\\n\\n\\n\", \"a, b= list(map(int, input().split()))\\nc, d = list(map(int, input().split()))\\nif a * d - b * c == 0:\\n    print(0)\\nelse:\\n    curpos = a * d - b * c >= 0\\n    small = 0;\\n    large = 1e18\\n    for iteration in range(200):\\n        avg = (small + large) / 2\\n        works = False\\n        for ach in range(-1, 2, 2):\\n            for bch in range(-1, 2, 2):\\n                for cch in range(-1, 2, 2):\\n                    for dch in range(-1, 2, 2):\\n                        newpos = (a + ach * avg) * (d + dch * avg) - (b + bch * avg) * (c + cch * avg) >= 0\\n                        if newpos != curpos:\\n                            works = True\\n        if works:\\n            large = avg\\n        else:\\n            small = avg\\n    print(small)\\n\", \"a, b = map(int, input().split())\\nc, d = map(int, input().split())\\n\\nz = a * d - b * c\\nif z == 0:\\n    print(0)\\n    return\\nt = max(abs(a + b + c + d), abs(a + d - c - b), abs(a + c - b - d), abs(a + b - c - d))\\nprint(abs(z / t))\", \"from math import sqrt\\n\\ndef f(sa, sb, sc, sd, A, B, C, D):\\n    cA = sa * sd - sb * sc\\n    cB = sa * D + sd * A - sb * C - sc * B\\n    cC = A * D - B * C\\n    if cA == 0:\\n        if cB == 0:\\n            return 0 if cC == 0 else float(\\\"inf\\\")\\n        return abs(-cC / cB)\\n    return float(\\\"inf\\\")\\n\\ndef main():\\n    import sys\\n    \\n    A, B, C, D = [int(i) for i in sys.stdin.read().split()]\\n    result = float(\\\"inf\\\")\\n    for sa in [-1, 1]:\\n        for sb in [-1, 1]:\\n            for sc in [-1, 1]:\\n                for sd in [-1, 1]:\\n                    result = min(result, f(sa, sb, sc, sd, A, B, C, D))\\n    \\n    print(result)\\n    \\n    \\nmain()\", \"import sys\\nA, B, C, D = [int(i) for i in sys.stdin.read().split()]\\nif A * D - B * C == 0:\\n    result = 0\\nelse:\\n    result = float(\\\"inf\\\")\\n    for sa in [-1, 1]:\\n        for sb in [-1, 1]:\\n            for sc in [-1, 1]:\\n                for sd in [-1, 1]:\\n                    coefA = sa * sd - sb * sc\\n                    coefB = sa * D + sd * A - sb * C - sc * B\\n                    coefC = A * D - B * C\\n                    if coefA == 0 and coefB != 0:\\n                        v = -coefC / coefB\\n                        result = min(result, abs(v))\\nprint(result)\\n\", \"import sys\\nA, B, C, D = [int(i) for i in sys.stdin.read().split()]\\nif A * D - B * C == 0:\\n    print(0)\\nelse:\\n    k1 = abs(A + D + B + C)\\n    k2 = abs(A + D - B - C)\\n    k3 = abs(A - D + B - C)\\n    k4 = abs(A - D - B + C)\\n    print(abs(A * D - B * C) / max(k1, k2, k3, k4))\\n\", \"import sys\\nA, B, C, D = [int(i) for i in sys.stdin.read().split()]\\nif A == 0 and B == 0 and C == 0 and D == 0:\\n    print(0)\\nelse:\\n    k1 = abs(A + D + B + C)\\n    k2 = abs(A + D - B - C)\\n    k3 = abs(A - D + B - C)\\n    k4 = abs(A - D - B + C)\\n    print(abs(A * D - B * C) / max(k1, k2, k3, k4))\\n\", \"from decimal import *\\ngetcontext().prec = 20\\na, b = map(int, input().split(' '))\\nc, d = map(int, input().split(' '))\\n\\nlo = 0\\nhi = 10 ** 9\\n\\nhrd = 0\\nwhile abs(Decimal(lo) - Decimal(hi)) > 10 ** (-10) and hrd < 10000:\\n    mid = (lo + hi) / 2\\n\\n    a1 = a - mid\\n    a2 = a + mid\\n    b1 = b - mid\\n    b2 = b + mid\\n    c1 = c - mid\\n    c2 = c + mid\\n    d1 = d - mid\\n    d2 = d + mid\\n\\n    l = False\\n    h = False\\n    \\n    for i in [a1*d1, a1*d2, a2*d1, a2*d2]:\\n        for j in [b1*c1, b1*c2, b2*c1, b2*c2]:\\n            if i - j <= 0:\\n                l = True\\n            if i - j >= 0:\\n                h = True\\n\\n    if l and h:\\n        hi = mid\\n\\n    else:\\n        lo = mid\\n\\n    hrd += 1\\n\\n\\nprint(Decimal(hi))\", \"from decimal import *\\ngetcontext().prec = 20\\na, b = map(int, input().split(' '))\\nc, d = map(int, input().split(' '))\\n\\nlo = 0\\nhi = 10 ** 9\\n\\nhrd = 0\\nwhile abs(Decimal(lo) - Decimal(hi)) > 10 ** (-10) and hrd < 10000:\\n    mid = (lo + hi) / 2\\n\\n    a1 = a - mid\\n    a2 = a + mid\\n    b1 = b - mid\\n    b2 = b + mid\\n    c1 = c - mid\\n    c2 = c + mid\\n    d1 = d - mid\\n    d2 = d + mid\\n\\n    l = False\\n    h = False\\n    \\n    for i in [a1*d1, a1*d2, a2*d1, a2*d2]:\\n        for j in [b1*c1, b1*c2, b2*c1, b2*c2]:\\n            if i - j <= 0:\\n                l = True\\n            if i - j >= 0:\\n                h = True\\n\\n    if l and h:\\n        hi = mid\\n\\n    else:\\n        lo = mid\\n\\n    hrd += 1\\n\\n\\nprint(Decimal(lo))\", \"import math,string,itertools,fractions,heapq,collections,re,array,bisect\\nfrom itertools import chain, dropwhile, permutations, combinations\\nfrom collections import defaultdict, deque\\n\\ndef VI(): return list(map(int,input().split()))\\n\\n\\n\\n\\n\\ndef main(info=0):\\n    a,b = VI()\\n    c,d = VI()\\n\\n    # the problem intend was to use some optimization / binary search, but a\\n    # deterministic solution has been proposed and is used here.  idea: given\\n    # A, the matrix B is same as A, with +/-x at every element (plus/minus\\n    # depend on the signs of A elements. It's easiest to compute all possible\\n    # cases (only 4). Then, we can formulate the equation for the determinant\\n    # of this B, and set it to 0.\\n    # This leads to:\\n    #\\n    # det(B) == 0 == ad-bc-x(a+b+c+d)+x^2-x^2 == ad-bc-x(a+b+c+d)+x^2-x^2\\n    #\\n    # since the first two terms are the determinant of A, and the last two go\\n    # away, we get:\\n    #\\n    # 0 == det(A) - x(a+b+c+d)  <==>   x=det(A)/(a+b+c+d)\\n    #\\n    # after taking care of the other signs, one gets other potential solutions\\n    # below.\\n    #\\n    # However, as has been noted, it has not been proven that this is the\\n    # optimal solution. But it seems to be.\\n\\n    detA = a*d-b*c\\n\\n    denom = max(abs(a + b + c + d), abs(a + d - c - b),\\n                abs(a + c - b - d), abs(a + b - c - d))\\n    ans = 0 if detA == 0 else abs(detA/denom)\\n    print(ans)\\n\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"a, b = map(int, input().split())\\nc, d = map(int, input().split())\\nmn = min(a * d, b * c)\\nmx = max(a * d, b * c)\\nx = 10 ** 18\\nif (a + b + c + d) != 0:\\n    x = abs((b * c - a * d) / (a + b + c + d))\\nif (a + b - c - d) != 0:\\n    x = min(abs((b * c - a * d) / (a + b - c - d)), x)\\nif (a - b + c - d) != 0:\\n    x = min(abs((b * c - a * d) / (a - b + c - d)), x)\\nif (a - b - c + d) != 0:\\n    x = min(abs((b * c - a * d) / (a - b - c + d)), x)\\nif (a + b + c + d) == 0:\\n    x = 0\\n\\n\\nprint(x)\", \"a, b = [int(x) for x in input().split()]\\nc, d = [int(x) for x in input().split()]\\n\\ndef isCrossing(square1, square2):\\n    for vert in square1:\\n        if vert[0] == 0 or vert[1] == 0:\\n            return True\\n        if square2[0][1] <= vert[1] * square2[0][0] / vert[0] <= square2[1][1]:\\n            return True\\n        if square2[0][0] <= vert[0] * square2[0][1] / vert[1] <= square2[3][0]:\\n            return True\\n        if square2[3][1] <= vert[1] * square2[2][0] / vert[0] <= square2[2][1]:\\n            return True\\n        if square2[1][0] <= vert[0] * square2[1][1] / vert[1] <= square2[2][0]:\\n            return True\\n    for vert in square2:\\n        if vert[0] == 0 or vert[1] == 0:\\n            return True\\n        if square1[0][1] <= vert[1] * square1[0][0] / vert[0] <= square1[1][1]:\\n            return True\\n        if square1[0][0] <= vert[0] * square1[0][1] / vert[1] <= square1[3][0]:\\n            return True\\n        if square1[3][1] <= vert[1] * square1[2][0] / vert[0]<= square1[2][1]:\\n            return True\\n        if square1[1][0] <= vert[0] * square1[1][1] / vert[1]<= square1[2][0]:\\n            return True\\n    return False\\n\\ndef binSearch(left, right, a, b, c, d):\\n    m = (left + right) / 2\\n    eps = 10 ** -10\\n    while abs(m - left) > eps and abs(right - m) > eps:\\n        if isCrossing(([a - m, b - m], [a - m, b + m], [a + m, b + m], [a + m, b - m]),\\n                ([c - m, d - m], [c - m, d + m], [c + m, d + m], [c + m, d - m])):\\n            right = m\\n        else:\\n            left = m\\n        m = (left + right) / 2\\n        #print(left, m, right)\\n    return m\\n\\nprint(binSearch(10**-10, 2 * 10**9, a, b, c, d))\\n\", \"a, b = [int(x) for x in input().split()]\\nc, d = [int(x) for x in input().split()]\\n\\ndef isCrossing(square1, square2):\\n    for vert in square1:\\n        if vert[0] != 0 and square2[0][1] <= vert[1] * square2[0][0] / vert[0] <= square2[1][1]:\\n            return True\\n        if vert[1] != 0 and square2[0][0] <= vert[0] * square2[0][1] / vert[1] <= square2[3][0]:\\n            return True\\n        if vert[0] != 0 and square2[3][1] <= vert[1] * square2[2][0] / vert[0] <= square2[2][1]:\\n            return True\\n        if vert[1] != 0 and square2[1][0] <= vert[0] * square2[1][1] / vert[1] <= square2[2][0]:\\n            return True\\n    for vert in square2:\\n        if vert[0] != 0 and square1[0][1] <= vert[1] * square1[0][0] / vert[0] <= square1[1][1]:\\n            return True\\n        if vert[1] != 0 and square1[0][0] <= vert[0] * square1[0][1] / vert[1] <= square1[3][0]:\\n            return True\\n        if vert[0] != 0 and square1[3][1] <= vert[1] * square1[2][0] / vert[0]<= square1[2][1]:\\n            return True\\n        if vert[1] != 0 and square1[1][0] <= vert[0] * square1[1][1] / vert[1]<= square1[2][0]:\\n            return True\\n    return False\\n\\ndef binSearch(left, right, a, b, c, d):\\n    m = (left + right) / 2\\n    eps = 10 ** -10\\n    while abs(m - left) > eps and abs(right - m) > eps:\\n        if isCrossing(([a - m, b - m], [a - m, b + m], [a + m, b + m], [a + m, b - m]),\\n                ([c - m, d - m], [c - m, d + m], [c + m, d + m], [c + m, d - m])):\\n            right = m\\n        else:\\n            left = m\\n        m = (left + right) / 2\\n        #print(left, m, right)\\n    return m\\n\\nprint(binSearch(10**-10, 2 * 10**9, a, b, c, d))\\n\", \"a, b = map(int, input().split())\\nc, d = map(int, input().split())\\n\\nz = a * d - b * c\\nif z == 0:\\n    print(0)\\n    return\\nt = max(abs(a + b + c + d), abs(a + d - c - b), abs(a + c - b - d), abs(a + b - c - d))\\nprint(abs(z / t))\", \"a, b = list(map(int, input().split()))\\nc, d = list(map(int, input().split()))\\nz = a * d - b * c\\nif z == 0:\\n    print(0)\\n    return\\nt = max(abs(a + b + c + d), abs(a - b - c + d), abs(a - b + c - d), abs(a + b - c- d))\\nprint(abs(z / t))\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"1 2\\n3 4\\n\",\n    \"1 0\\n0 1\\n\",\n    \"1000000000 0\\n0 1000000000\\n\",\n    \"8205 9482\\n11 -63\\n\",\n    \"0 0\\n0 0\\n\",\n    \"1000000000 -1000000000\\n1000000000 1000000000\\n\",\n    \"1000000000 1000000000\\n1000000000 -1000000000\\n\",\n    \"-1 -1\\n1 0\\n\",\n    \"5 2\\n-15 -6\\n\",\n    \"2 -5\\n-3 2\\n\",\n    \"-5 -2\\n-1 -3\\n\",\n    \"-5 8\\n1 6\\n\",\n    \"1 3\\n3 2\\n\",\n    \"-42 63\\n77 -32\\n\",\n    \"91 -7\\n-21 91\\n\",\n    \"-67 -77\\n-56 -75\\n\",\n    \"-26 53\\n-48 -89\\n\",\n    \"97 -934\\n-707 184\\n\",\n    \"689 412\\n-794 -421\\n\",\n    \"-718 -387\\n972 972\\n\",\n    \"-126 -376\\n75 367\\n\",\n    \"-7 -3674\\n845 5737\\n\",\n    \"-9912 755\\n-8220 6419\\n\",\n    \"-3928 5185\\n4331 6665\\n\",\n    \"2056 9614\\n-5171 8965\\n\",\n    \"41642 63236\\n-59604 20357\\n\",\n    \"-38387 -93294\\n-52918 -51288\\n\",\n    \"92812 73253\\n-46231 11374\\n\",\n    \"12784 -94506\\n26149 85264\\n\",\n    \"955162 -709099\\n-743655 578837\\n\",\n    \"160382 -103968\\n301943 -156088\\n\",\n    \"-634398 -468280\\n447621 78431\\n\",\n    \"-398622 -832591\\n-506781 -656493\\n\",\n    \"-2665612 -7693032\\n-2861368 -6201836\\n\",\n    \"1762462 700391\\n-7134185 5042962\\n\",\n    \"6190536 5693104\\n-8006293 -3712238\\n\",\n    \"553632 5653328\\n-7246622 9164341\\n\",\n    \"43469186 94408326\\n78066381 -19616812\\n\",\n    \"25683826 49101909\\n88380777 46573745\\n\",\n    \"-87068851 98762810\\n3727856 -87235696\\n\",\n    \"95145788 53456393\\n42406028 83987544\\n\",\n    \"876432079 -414820618\\n-816514132 -914565422\\n\",\n    \"-240038673 376842703\\n-241080203 410087456\\n\",\n    \"938457872 -536526676\\n867891897 -855194260\\n\",\n    \"116954418 255136645\\n-851641472 174491320\\n\",\n    \"1 1\\n1 5\\n\",\n    \"1 5\\n1 1\\n\",\n    \"5 1\\n1 1\\n\",\n    \"1 1\\n5 1\\n\",\n    \"-1000000000 -1000000000\\n1000000000 1000000000\\n\",\n    \"-1000000000 -1000000000\\n999999999 999999999\\n\",\n    \"536870912 88\\n536870912 22528\\n\",\n    \"268435456 268435456\\n22512 22528\\n\",\n    \"-1 1\\n1 1\\n\",\n    \"-1000 -999\\n-1 0\\n\",\n    \"-801658422 -738703776\\n910442649 -920729415\\n\",\n    \"-203893419 -777818\\n295920256 -474540430\\n\",\n    \"448944609 529185527\\n946362390 958011342\\n\",\n    \"348741875 -606207234\\n-279810821 -14278204\\n\",\n    \"-202195424 182466434\\n-722509868 -838173079\\n\",\n    \"-48 9\\n17 -67\\n\",\n    \"12 180\\n79 47\\n\",\n    \"-131 -87\\n-66 -109\\n\",\n    \"171 17\\n9 93\\n\",\n    \"221 20\\n-22 -200\\n\",\n    \"372 -352\\n-160 -423\\n\",\n    \"480 37\\n-3 -459\\n\",\n    \"-535 -395\\n-264 513\\n\",\n    \"-498 -685\\n-532 526\\n\",\n    \"-16 450\\n-848 27\\n\",\n    \"-621967643 610314360\\n-660274542 -772630232\\n\",\n    \"222416863 97256131\\n897661932 -426944193\\n\",\n    \"67861199 302935298\\n883117733 559626116\\n\",\n    \"1000000000 1\\n1000000000 2\\n\",\n    \"-2 1\\n1 -2\\n\",\n    \"1000000000 999999995\\n99999999 -199992543\\n\"\n  ],\n  \"outputs\": [\n    \"0.2000000000\\n\",\n    \"0.5000000000\\n\",\n    \"500000000.0000000000\\n\",\n    \"35.0198432832\\n\",\n    \"0.0000000000\\n\",\n    \"1000000000.0000000000\\n\",\n    \"1000000000.0000000000\\n\",\n    \"0.3333333333\\n\",\n    \"0.0000000000\\n\",\n    \"0.9166666667\\n\",\n    \"1.1818181818\\n\",\n    \"2.1111111111\\n\",\n    \"0.7777777778\\n\",\n    \"16.3878504673\\n\",\n    \"38.7333333333\\n\",\n    \"2.5927272727\\n\",\n    \"29.6219512195\\n\",\n    \"334.2819979188\\n\",\n    \"16.0012953368\\n\",\n    \"105.5204985241\\n\",\n    \"19.1122881356\\n\",\n    \"298.5843320666\\n\",\n    \"2268.9886983324\\n\",\n    \"3969.3426099731\\n\",\n    \"3141.2387756983\\n\",\n    \"32033.4760659150\\n\",\n    \"12582.8868737997\\n\",\n    \"22109.0927374802\\n\",\n    \"18439.1869417765\\n\",\n    \"8557.1487662354\\n\",\n    \"8802.4244934460\\n\",\n    \"98147.3248125840\\n\",\n    \"66924.0413186624\\n\",\n    \"282203.1726406262\\n\",\n    \"1048758.9114990780\\n\",\n    \"957535.4624752104\\n\",\n    \"2140390.1895580233\\n\",\n    \"41883387.4306073852\\n\",\n    \"14987456.1603828062\\n\",\n    \"26110777.7289122988\\n\",\n    \"20815549.6776987243\\n\",\n    \"520028295.4718751899\\n\",\n    \"5983627.7655281517\\n\",\n    \"105349963.0995401485\\n\",\n    \"204147910.8375163887\\n\",\n    \"0.5000000000\\n\",\n    \"0.5000000000\\n\",\n    \"0.5000000000\\n\",\n    \"0.5000000000\\n\",\n    \"0.0000000000\\n\",\n    \"0.0000000000\\n\",\n    \"11219.7636804586\\n\",\n    \"7.9993289080\\n\",\n    \"1.0000000000\\n\",\n    \"0.4995000000\\n\",\n    \"744753719.5468964978\\n\",\n    \"99618123.5339717944\\n\",\n    \"24529803.2444389601\\n\",\n    \"143060520.9047362779\\n\",\n    \"190651913.7089770083\\n\",\n    \"21.7234042553\\n\",\n    \"42.9433962264\\n\",\n    \"21.7226463104\\n\",\n    \"54.3103448276\\n\",\n    \"94.5140388769\\n\",\n    \"216.4903748734\\n\",\n    \"224.9325842697\\n\",\n    \"321.2340966921\\n\",\n    \"503.1068273092\\n\",\n    \"284.2416107383\\n\",\n    \"611623765.8647500770\\n\",\n    \"125718637.9005708302\\n\",\n    \"126575973.2879779836\\n\",\n    \"0.4999999993\\n\",\n    \"0.5000000000\\n\",\n    \"142854098.7306812546\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/549/H",
  "starter_code": ""
}