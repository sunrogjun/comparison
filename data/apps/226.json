{
  "task_id": "APPS/226",
  "problem_id": 226,
  "prompt": "You may have heard of the pie rule before. It states that if two people wish to fairly share a slice of pie, one person should cut the slice in half, and the other person should choose who gets which slice. Alice and Bob have many slices of pie, and rather than cutting the slices in half, each individual slice will be eaten by just one person.\n\nThe way Alice and Bob decide who eats each slice is as follows. First, the order in which the pies are to be handed out is decided. There is a special token called the \"decider\" token, initially held by Bob. Until all the pie is handed out, whoever has the decider token will give the next slice of pie to one of the participants, and the decider token to the other participant. They continue until no slices of pie are left.\n\nAll of the slices are of excellent quality, so each participant obviously wants to maximize the total amount of pie they get to eat. Assuming both players make their decisions optimally, how much pie will each participant receive?\n\n\n-----Input-----\n\nInput will begin with an integer N (1 \u2264 N \u2264 50), the number of slices of pie. \n\nFollowing this is a line with N integers indicating the sizes of the slices (each between 1 and 100000, inclusive), in the order in which they must be handed out.\n\n\n-----Output-----\n\nPrint two integers. First, the sum of the sizes of slices eaten by Alice, then the sum of the sizes of the slices eaten by Bob, assuming both players make their decisions optimally.\n\n\n-----Examples-----\nInput\n3\n141 592 653\n\nOutput\n653 733\n\nInput\n5\n10 21 10 21 10\n\nOutput\n31 41\n\n\n\n-----Note-----\n\nIn the first example, Bob takes the size 141 slice for himself and gives the decider token to Alice. Then Alice gives the size 592 slice to Bob and keeps the decider token for herself, so that she can then give the size 653 slice to herself.",
  "solutions": "[\"n = int(input())\\na = list(map(int, input().split()))\\na = a[::-1]\\nd = 0\\nfor i in range(len(a)):\\n    d = max(0 + d, a[i] + (sum(a[:i]) - d))\\nprint(sum(a)-d, d)\\n\", \"n = int(input())\\nX = list(map(int, input().split()))\\n\\nali = [None]*(n+1)\\nbob = [None]*(n+1)\\n\\nali[n] = 0\\nbob[n] = 0\\n\\nfor i in range(n-1, -1, -1):\\n\\tbob[i] = max(bob[i+1], ali[i+1]+X[i])\\n\\tali[i] = sum(X[i:n]) - bob[i]\\n\\t\\n#print(ali)\\n#print(bob)\\n\\nprint(ali[0], bob[0], sep=' ')\\n\\t\\n\", \"N = int(input())\\nA = list(map(int, input().split()))\\n\\ns = [0]*(N+1)\\ndp = [0]*(N+1)\\nfor i in range(N-1, -1, -1):\\n\\tdp[i] = max(A[i] + s[i+1] - dp[i+1], dp[i+1])\\n\\ts[i] = s[i+1] + A[i]\\nprint(s[0] - dp[0], dp[0])\", \"n = int(input())\\nvs = list(map(int, input().split(' ')))\\n\\nrs = [0, 0]\\n\\nfor i in range(n-1, -1, -1):\\n    rs = [\\n        min(vs[i] + rs[0], rs[1]),\\n        max(vs[i] + rs[0], rs[1])\\n    ]\\n\\nprint(sum(vs) - rs[1], rs[1])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\n\\ndef max_revenue(i, a):\\n    if i == len(a)-1:\\n        return a[-1], 0\\n    before = max_revenue(i+1, a)\\n    take = a[i] + before[1], before[0]\\n    give = before[0], a[i] + before[1]\\n\\n    if take[0] > give[0]:\\n        return take\\n    else:\\n        return give\\n\\nr = max_revenue(0, a)\\nprint(r[1], r[0])\\n\", \"\\nimport sys\\n#sys.stdin=open(\\\"data.txt\\\")\\ninput=sys.stdin.readline\\n\\nn=int(input())\\n\\npie=list(map(int,input().split()))\\n\\ndef dp(i):\\n    # best result for this player\\n    if i>=len(pie): return (0,0)\\n    t1,t2=dp(i+1)\\n    return (max(pie[i]+t2-t1,t1),t2+pie[i])\\n\\nt1,t2=dp(0)\\n\\nprint(t2-t1,t1)\", \"import math\\nfrom random import random\\n\\ndef getInt():\\n    return(int(input()))\\n\\ndef getInts():\\n    line = input().split()\\n    return [int(l) for l in line]\\n\\ndef getFloat():\\n    return(float(input()))\\n\\ndef getFloats():\\n    line = input().split()\\n    return [float(l) for l in line]\\n\\ndef getStrings():\\n    line = input().split()\\n    return(line)\\n\\n\\nN = getInt()\\nvalues = getInts()\\n\\nnConsidered = 0\\n#                nC, nO\\nbestForChooserSoFar = [0, 0]\\n\\nfor i in range(len(values)):\\n    v = values[len(values) - i - 1]\\n    qsIfTaken = [v + bestForChooserSoFar[1], bestForChooserSoFar[0]]\\n    qsIfGiven = [bestForChooserSoFar[0], v + bestForChooserSoFar[1]]\\n\\n    if(qsIfTaken[0] >= qsIfGiven[0]):\\n        bestForChooserSoFar = qsIfTaken\\n    else:\\n        bestForChooserSoFar = qsIfGiven\\n\\nprint(str(bestForChooserSoFar[1]) + ' ' + str(bestForChooserSoFar[0]))\", \"N = int(input())\\na = [int(i) for i in input().split()]\\n\\nsuffix = [a[-1]]\\ntok = [a[-1]]\\ntol = [0]\\nbest = [a[-1]]\\n\\nfor x in reversed(a[:-1]):\\n\\t# keep\\n\\tkeep = x + suffix[-1] - best[-1]\\n\\tgive = best[-1]\\n\\tbest.append(max(keep,give))\\n\\ttok.append(keep)\\n\\ttol.append(give)\\n\\tsuffix.append(suffix[-1] + x)\\n\\n# print(best, tok, tol, suffix)\\nprint(suffix[-1] - best[-1], best[-1])\\n\\t\\n\\n\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\na1 = [[-1] * 50, [-1] * 50]\\ndef get(i, fl):\\n    if i >= n:\\n        return 0\\n    if (a1[fl][i] != -1):\\n        return a1[fl][i]\\n    if fl == 0:\\n        a1[fl][i] = max(a[i] + get(i + 1, 1), get(i + 1, 0))\\n    else:\\n        a1[fl][i] = min(a[i] + get(i + 1, 1), get(i + 1, 0))\\n    return a1[fl][i]\\n\\nan = get(0, 0)\\nprint(sum(a) - an, an)\\n\", \"n = int(input())\\ncake = list(map(int, input().split()))\\ncake.reverse()\\npref = [0]\\nfor i in range(n):\\n    pref.append(cake[i] + pref[-1])\\ndp = [0] * n\\ndp[0] = cake[0]\\nfor i in range(1, n):\\n    dp[i] = max(dp[i - 1], cake[i] + pref[i] - dp[i - 1])\\nprint(pref[n] - dp[n - 1], dp[n - 1])\", \"import math\\n\\n\\ndef main():\\n    n = int(input())\\n    slices = [int(x) for x in input().split()]\\n    dp = [[[0,0], [0,0]] for i in range(n)]\\n    dp[-1][0] = [slices[-1], 0]\\n    dp[-1][1] = [0, slices[-1]]\\n    for i in range(n-2, -1, -1):\\n        for j in range(0, 2):\\n            take = slices[i] + dp[i+1][1-j][j]\\n            do_not_take = dp[i+1][j][j]\\n            if take > do_not_take:\\n                dp[i][j][j] = take\\n                dp[i][j][1-j] = dp[i+1][1-j][1-j]\\n            else:\\n                dp[i][j][j] = do_not_take\\n                dp[i][j][1-j] = slices[i] + dp[i+1][j][1-j]\\n    print(dp[0][1][0], dp[0][1][1])\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"a = int(input())\\nb = list(map(int, input().split()))\\nsumA = 0\\nsumB = 0\\nfor i in range( a ):\\n    if b[a-1-i] > abs(sumA - sumB):\\n        sumA += b[a-1-i]\\n        sumA, sumB = sumB, sumA\\n    else:\\n        sumA += b[a-1-i]\\nprint(min(sumA,sumB), max(sumA, sumB))\", \"def maximum_pie_consumption(pies):\\n    c = len(pies) - 1\\n    toke = wait = 0\\n    for p in reversed(pies):\\n        if toke < p + wait:\\n            toke, wait = wait + p, toke\\n        else:\\n            wait += p\\n    return wait, toke\\n\\ndef __starting_point():\\n    input()\\n    pies = list(map(int, input().strip().split()))\\n    print(\\\" \\\".join(map(str, maximum_pie_consumption(pies))))\\n\\n__starting_point()\", \"n = int(input())\\npies = [int(x) for x in input().split()]\\n\\nd = {}\\nd[0] = pies[-1]\\n\\nfor i in range(1, n):\\n    d[i] = max(sum(pies[-1-i:]) - d[i-1], d[i-1])\\n\\ns = sum(pies)\\n\\nres = d[n-1]\\n\\nprint(s - res, res)\\n\", \"def check(i, bob):\\n    if i >= n:\\n        return 0, 0\\n    if dp[bob][i] != (-1, -1):\\n        return dp[bob][i]\\n    if bob:\\n        x = check(i+1, False)\\n        y = check(i+1, True)\\n        if x[0]+arr[i] >= y[0]:\\n            ret = x[0]+arr[i], x[1]\\n        else:\\n            ret = y[0], y[1]+arr[i]\\n    else:\\n        x = check(i+1, True,)\\n        y = check(i+1, False,)\\n        if x[1]+arr[i] >= y[1]:\\n            ret = x[0], x[1]+arr[i]\\n        else:\\n            ret = y[0]+arr[i], y[1]\\n    dp[bob][i] = ret\\n    return ret\\n\\n\\nn = int(input())\\n\\ndp = [(-1, -1)]*n\\ndp = [dp, dp.copy()]\\n\\narr = list(map(int, input().split()))\\nans = check(0, True)\\nprint(ans[1], ans[0])\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.reverse()\\n\\nd = [0 for i in range(n)]\\nd[0] = [a[0], 0]\\n\\nfor i in range(1, n):\\n    d[i] = [max(d[i-1][0], d[i-1][1] + a[i]), min(d[i-1][0], d[i-1][1] + a[i])]\\n\\nprint(d[-1][1], d[-1][0])\", \"n = int(input())\\na = list(map(int, input().split()))\\nx = s = 0\\nfor ai in reversed(a):\\n    x = max(x, ai + s - x)\\n    s += ai\\n\\nprint(s - x, x)\\n\", \"\\ndef dp(a, i,control):\\n    if i >= len(a):\\n        return 0;\\n    if dp_list[control][i] != -1:\\n        return dp_list[control][i]\\n    else:\\n        if control:\\n            res = max(a[i] + dp(a, i+1, False), dp(a , i+1 , True))\\n        else:\\n            res = min(dp(a, i+1, True), a[i] + dp(a , i+1 , False))\\n        dp_list[control][i] = res\\n        return dp_list[control][i]\\n\\nn = int(input())\\ndp_list = [list(-1 for i in range(n)) , list(-1 for i in range(n)) ]\\na = list(map(int, input().split(\\\" \\\")))\\nres = dp(a , 0, True)\\nprint(\\\"%s %s\\\" %(sum(a) - res , res ))\", \"\\n\\nimport sys\\n\\ncache = {}\\n\\ndef max_possible(pie_slices, current_slice, pre_sums):\\n\\n    if current_slice in cache:\\n        return cache[current_slice]\\n\\n    if len(pie_slices) - 1 == current_slice:\\n        return pie_slices[current_slice]\\n\\n\\n    max_score = -1\\n    for cs in range(current_slice, len(pie_slices) - 1):\\n        score = pie_slices[cs] + pre_sums[cs + 1] - max_possible(pie_slices, cs + 1, pre_sums)\\n\\n        if score > max_score:\\n            max_score = score\\n\\n    # if the last element gives the highest score\\n    if max_score < pie_slices[-1]:\\n        max_score = pie_slices[-1]\\n\\n    cache[current_slice] = max_score\\n\\n    return max_score\\n\\ndef main():\\n    n = int(sys.stdin.readline().strip())\\n\\n    pie_slices = [int(tok) for tok in sys.stdin.readline().strip().split()]\\n\\n    pre_sums = [sum(pie_slices[i:]) for i in range(len(pie_slices))]\\n\\n    b = max_possible(pie_slices, 0, pre_sums)\\n    print(sum(pie_slices) - b, b)\\n\\n\\n\\n\\n\\n\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"N = int(input())\\nn = list(map(int,input().split(\\\" \\\")))\\n\\nif N == 1:\\n    ans = [0, n[0]]\\nelif N == 2:\\n    ans = [min(n), max(n)]\\nelse:\\n    # print(n)\\n    n.reverse()\\n    f = max(n[0], n[1]) # f2\\n    s = n[0] + n[1] # s2\\n    for i in range(2, N):\\n        f = max(n[i] + s - f, f)\\n        s += n[i]\\n    # print(f)\\n    # print(s)\\n    ans = [s-f, f]\\n        \\nprint(\\\" \\\".join(map(str,ans)))\\n\\n# assume f(n) is the optimal strategy for the remaning n pies, x_n, x_n-1, ...., x_1\\n#\\n# s(n) = sum(x_1,..., x_n)\\n# f(1) = x1\\n# f(2) = max(x2, x1)\\n# f(3) = max(x3 + s(2) - f(2), f(2))\\n# f(4) = max(x4 + s(3) - f(3), f(3))\\n\", \"'''\\ncodeforces.com/problemset/problem/859/C\\nauthor: latesum\\n'''\\nn = int(input())\\nv = list(map(int,input().split()))\\nv.reverse()\\nans = [0, 0]\\nfor i in range(n):\\n    if ans[1] + v[i] > ans[0]:\\n        t = ans[1] + v[i]\\n        ans[1] = ans[0]\\n        ans[0] = t\\n    else:\\n        ans[1] += v[i]\\nprint(ans[1], ans[0])\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nscore = a[n - 1]\\ntotal = a[n - 1]\\n\\nfor i in range(n - 2, -1, -1):\\n    new_score = a[i] + total - score\\n    if new_score > score:\\n        score = new_score\\n    total += a[i]\\n\\nprint(total - score, score)\", \"n=int(input())\\na=list(map(int,input().split()))[::-1]\\nif n!=1:\\n    summax,summin=max(a[0],a[1]),min(a[0],a[1])\\nelse:\\n    summin=0;summax=a[0]\\nfor i in range(2,n):\\n    if summax<summin + a[i]:\\n        summax,summin=summin + a[i],summax\\n    else:\\n        summin=summin+a[i]\\nprint(summin,summax)\", \"n = int(input())\\npieces = list(map(int, input().split()))\\n\\nreversed_pieces = list(reversed(pieces))\\n\\nTOTAL = []\\n\\ncurrent_total = 0\\nfor piece in reversed_pieces:\\n    current_total += piece\\n    TOTAL.append(current_total)\\n\\nHAS_TOKEN = 0\\nNO_TOKEN = 1\\n\\ndp_alice = [[0] * n, [0] * n]\\ndp_bob = [[0] * n, [0] * n]\\n\\n\\ndp_alice[HAS_TOKEN][0] = dp_bob[HAS_TOKEN][0] = reversed_pieces[0]\\ndp_alice[NO_TOKEN][0] = dp_bob[NO_TOKEN][0] = 0\\n\\nfor i in range(1, n):\\n    dp_alice[HAS_TOKEN][i] = max(dp_alice[HAS_TOKEN][i-1], dp_alice[NO_TOKEN][i-1] + reversed_pieces[i])\\n    dp_bob[HAS_TOKEN][i] = max(dp_bob[HAS_TOKEN][i-1], dp_bob[NO_TOKEN][i-1] + reversed_pieces[i])\\n\\n    dp_alice[NO_TOKEN][i] = TOTAL[i] - dp_bob[HAS_TOKEN][i]\\n    dp_bob[NO_TOKEN][i] = TOTAL[i] - dp_alice[HAS_TOKEN][i]\\n\\nprint(dp_alice[NO_TOKEN][-1], dp_bob[HAS_TOKEN][-1])\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3\\n141 592 653\\n\",\n    \"5\\n10 21 10 21 10\\n\",\n    \"1\\n100000\\n\",\n    \"50\\n100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000 100000\\n\",\n    \"2\\n1 100000\\n\",\n    \"17\\n1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536\\n\",\n    \"15\\n3026 3027 4599 4854 7086 29504 38709 40467 40663 58674 61008 70794 77517 85547 87320\\n\",\n    \"30\\n2351 14876 66138 87327 29940 73204 19925 50198 13441 54751 1383 92120 90236 13525 3920 16669 80637 94428 54890 71321 77670 57080 82145 39778 69967 38722 46902 82127 1142 21792\\n\",\n    \"1\\n59139\\n\",\n    \"2\\n9859 48096\\n\",\n    \"3\\n25987 64237 88891\\n\",\n    \"4\\n9411 13081 2149 19907\\n\",\n    \"5\\n25539 29221 6895 82089 18673\\n\",\n    \"6\\n76259 10770 87448 3054 67926 81667\\n\",\n    \"7\\n92387 35422 24898 32532 92988 84636 99872\\n\",\n    \"8\\n8515 51563 5451 94713 9537 30709 63343 41819\\n\",\n    \"9\\n91939 407 10197 24191 58791 9486 68030 25807 11\\n\",\n    \"10\\n30518 96518 74071 59971 50121 4862 43967 73607 19138 90754\\n\",\n    \"11\\n46646 21171 78816 89449 99375 50934 15950 90299 18702 62232 12657\\n\",\n    \"12\\n30070 37311 92074 18927 91732 29711 12126 41583 52857 99118 73097 33928\\n\",\n    \"13\\n13494 86155 96820 72596 40986 99976 16813 25571 87013 3301 832 26376 83769\\n\",\n    \"14\\n96918 67704 10077 34778 90239 11457 80284 42263 53872 74779 93976 53416 83860 74518\\n\",\n    \"15\\n13046 83844 14823 64255 15301 90234 84972 93547 88028 11665 54415 13159 83950 951 42336\\n\",\n    \"16\\n29174 32688 95377 26437 64554 60498 56955 10239 22183 15847 47559 40199 92552 70488 4147 73082\\n\",\n    \"17\\n79894 24637 8634 80107 81104 39275 53130 94227 56339 87326 7999 75751 92642 96921 74470 20999 69688\\n\",\n    \"18\\n96022 73481 13380 42288 6166 85348 25113 78215 23198 24212 44246 35494 92733 66459 44793 68916 82818 3967\\n\",\n    \"19\\n79446 55030 93934 39062 88123 88317 21289 62203 57354 28394 37390 95238 92823 92892 39308 16833 54733 51525 58759\\n\",\n    \"20\\n5440 88704 61481 72140 15810 58854 43034 5150 80684 61360 50516 54301 78790 43678 46138 79893 89899 60260 2881 66499\\n\",\n    \"21\\n21569 37548 74739 25809 65063 37631 71913 89138 47543 65542 10956 14045 78880 70111 73357 27810 70326 40523 899 6547 87440\\n\",\n    \"22\\n72289 86393 79484 55287 14317 83704 11192 73126 81699 2429 4100 41085 87482 72352 10976 75727 42240 79569 31621 3492 51189 25936\\n\",\n    \"23\\n88417 11045 92742 84765 6675 86673 40072 57114 15854 6611 40347 76636 87572 66082 38195 56348 89962 59831 29640 43541 14937 73713 52755\\n\",\n    \"24\\n71841 27185 73295 46946 55928 65450 12055 73806 82714 78089 787 36380 87663 68323 75814 4265 94581 31581 51850 40486 11390 21491 27560 22678\\n\",\n    \"25\\n87969 76030 78041 616 13694 11522 84038 25090 16869 14975 61226 96124 20457 62052 70329 76374 42303 11844 15276 37430 99330 77781 35069 64358 45168\\n\",\n    \"26\\n71393 24874 91299 30093 62947 14491 80214 41782 51025 19158 21666 23163 20547 64293 40653 24291 46922 92106 13294 77479 63079 25559 42579 62933 24433 39507\\n\",\n    \"27\\n54817 73719 96044 92275 12201 60564 84901 25770 17884 90636 14810 82907 20637 58023 10976 72208 94644 63856 11312 74424 26828 40632 58600 37316 38290 82420 48297\\n\",\n    \"28\\n70945 22563 76598 21753 4558 39341 48372 77054 52039 27522 75249 18459 96536 60264 5491 20125 42367 44118 42034 38665 47472 88410 66109 78995 52147 68436 9814 71112\\n\",\n    \"29\\n54369 14511 14048 83934 53812 75014 20356 17938 86195 31704 68393 78202 96626 86697 75814 746 46985 15868 40052 11417 11221 44700 40915 53378 98708 78644 4035 20164 37165\\n\",\n    \"30\\n4555 13594 57403 75796 14203 12847 66292 60885 9525 40478 57327 69970 15297 37483 39540 31102 14855 412 84174 57684 65591 19837 80431 18385 3107 87740 15433 24854 73472 88205\\n\",\n    \"31\\n20683 29734 37957 37978 63456 58920 70980 44873 76385 44661 17767 97009 15387 63916 77159 79019 86770 4866 14897 63141 86236 67614 87940 60064 16964 97948 9654 49714 30888 88075 63792\\n\",\n    \"32\\n71403 78578 75406 67455 12710 37697 67155 28861 10540 48843 10911 56753 15477 33453 4378 26936 34492 19720 12915 27382 49984 91200 95449 34448 63525 83964 3875 98767 77905 63753 83018 58084\\n\",\n    \"33\\n87531 27423 55960 53829 37771 40665 39138 12849 77399 53025 71350 83793 48271 59887 41997 74854 14919 24175 43637 24327 13733 38978 2959 319 10086 26876 65393 56332 68025 63623 93732 68354 83938\\n\",\n    \"34\\n70955 19371 60706 50603 54321 86738 11122 29541 11555 57207 31790 19344 24170 29424 36512 22771 86833 4437 41655 64376 34378 19459 86276 74702 23943 69789 59614 48489 49634 63494 12958 11328 69333 1736\\n\",\n    \"35\\n54379 920 41259 12784 3574 98219 40001 80825 45710 61390 24933 79088 24260 23153 6835 94880 67260 76187 39673 28616 98126 10341 26489 49085 37800 55805 86539 97542 39754 30660 32184 64703 11625 77872 63584\\n\",\n    \"36\\n37803 17060 78709 42262 28636 68484 79280 97517 12570 98276 52669 6128 57054 58098 68646 75501 39174 56449 3099 1369 94579 58119 1295 90764 51657 66013 48056 55107 54066 30530 75602 74973 21212 21304 22589 4895\\n\",\n    \"37\\n53932 65904 91967 4443 77890 47261 8160 81505 46725 69754 21621 65871 24440 51828 71673 23418 86896 4008 1117 65610 82519 5897 8804 65148 98218 76221 42277 79968 68379 30401 62125 61052 96207 64737 24698 99495 70720\\n\",\n    \"38\\n70060 14749 72520 58113 2951 26037 80143 32789 80881 73936 82060 92911 24531 78261 9292 71335 91515 8462 31839 62555 46268 29482 92121 31019 12075 94942 36498 96317 58499 30271 81351 71322 81602 8169 26807 69903 38154 20539\\n\",\n    \"39\\n20780 30889 9970 87591 19501 96302 76318 49481 47740 10823 42500 61167 57325 47798 36511 19252 39237 23316 29857 2603 10016 9964 99630 5402 82828 5150 98015 53882 72811 97437 57473 57400 91189 84305 85811 64503 40179 50614 52044\\n\",\n    \"40\\n3670 5779 20621 87964 12595 34136 98063 92429 38366 43789 88330 52934 19100 22776 43342 82312 74404 64756 73980 14278 21283 85101 63339 70409 63034 14245 33606 58571 84927 14931 25355 15452 46072 4671 5838 69121 18243 87783 29748 84047\\n\",\n    \"41\\n87094 21920 58071 41634 29145 45616 94239 76417 5226 47971 48770 79974 19190 25017 37857 30229 11726 12314 71998 54327 85032 8687 46656 12088 9595 24454 27827 7624 66535 14801 44581 25723 55659 48103 75242 39529 52973 17858 16985 41454 44182\\n\",\n    \"42\\n70518 70764 38625 3816 78399 48585 66222 60405 72085 52153 85018 39717 51984 51451 8180 78146 59448 16768 2720 51272 48780 56464 21461 86471 23452 10470 22048 65189 56655 90480 31103 11801 73758 91536 10055 34129 20407 47933 4223 98861 84475 52291\\n\",\n    \"43\\n86646 19609 43370 33293 3460 94658 95101 44393 6241 56335 78161 66757 52074 53692 2695 58767 31363 64326 738 15513 69425 4242 28971 60855 37309 53382 16269 57346 70968 90350 74522 22072 83345 67672 69060 4537 55137 78008 91461 32075 33280 70405 71607\\n\",\n    \"44\\n70070 68453 23924 95475 52714 73435 34380 61085 40396 60518 38601 26501 52165 47421 73018 6684 79085 68781 31460 88265 33173 52020 44992 2534 8062 96295 77786 39103 85280 24812 93748 75446 92932 11105 71169 66433 89866 75379 11402 22186 73572 31624 70092 10734\\n\",\n    \"45\\n53494 93105 37182 24953 1967 43700 39068 12369 7256 64700 31744 62052 84959 49662 34829 78793 51000 16339 29478 52506 96922 75606 52501 1109 21919 6503 72007 63964 75400 24682 45678 18420 67928 87241 73278 69545 24596 29646 65936 55401 89673 49738 35873 45189 3622\\n\",\n    \"46\\n36918 9246 74631 78622 94325 22476 35243 96357 41411 68882 92184 21796 28153 43392 37856 26710 64130 20793 60200 16747 84862 23383 60010 42788 68480 92519 66229 56121 57009 24553 89096 4499 53323 30673 75386 31442 92030 59721 53173 45511 29966 67853 77462 12347 61811 81517\\n\",\n    \"47\\n53046 58090 55185 8100 43578 1253 7226 13049 75567 73065 19920 48836 28243 45633 75475 74628 11853 68351 90922 89500 81315 71161 34816 49875 82337 2727 27746 37878 79833 24423 75618 82065 95614 82618 34391 1850 94056 57092 73115 70214 46067 29071 75947 46802 95807 42600 11211\\n\",\n    \"48\\n69174 6934 59931 70281 68640 47326 3402 64333 42426 77247 13063 8579 61038 39362 2694 22545 83767 15909 88940 86445 45063 27451 18133 91555 28898 45640 21967 62738 61441 24293 19036 68144 5201 26050 69204 29154 85681 19871 60352 36133 86359 47186 74432 5448 53996 27876 58022 80559\\n\",\n    \"49\\n19894 55779 73188 99759 17893 50295 8089 81025 76582 81429 73503 35619 61128 41603 40313 3166 31490 87660 19662 59197 8812 75229 25642 65938 42755 31656 16188 87599 51562 91460 38262 11118 90596 69482 71313 66858 87707 17242 14886 93539 35164 32596 83317 72606 12185 21664 80642 72099 7525\\n\",\n    \"50\\n70081 97965 40736 24325 2476 20832 54026 23972 91400 47099 95141 27386 79799 49285 4039 818 23552 72203 55273 38168 52783 50365 89351 30945 47154 8047 27586 49184 20573 8953 38849 36466 45479 89848 82827 71475 74283 87115 92590 28903 97800 74550 74140 82514 10849 6786 67881 63456 53022 25051\\n\",\n    \"4\\n10 3 2 1\\n\",\n    \"6\\n5245 1414 21632 12159 31783 7412\\n\",\n    \"46\\n1666 17339 9205 20040 30266 12751 11329 7951 9000 14465 11771 7600 19480 15993 19453 7470 1361 7922 27747 17347 4727 11280 403 16338 6064 11124 25723 18717 26118 271 9242 16952 26381 31795 28226 3646 27589 31472 30108 28354 25281 22429 30956 32264 14729 21685\\n\",\n    \"3\\n100 90 80\\n\",\n    \"5\\n10 9 8 7 6\\n\",\n    \"4\\n100 40 50 10\\n\",\n    \"6\\n5 4 3 2 1 1\\n\",\n    \"33\\n30274 12228 26670 31244 5457 2643 27275 4380 30954 23407 8387 6669 25229 31591 27518 30261 25670 20962 31316 8992 8324 26216 10812 28467 15401 23077 10311 24975 14046 12010 11406 22841 7593\\n\",\n    \"3\\n4 2 1\\n\",\n    \"3\\n10 5 5\\n\",\n    \"6\\n6 5 4 3 2 1\\n\",\n    \"4\\n5 2 7 3\\n\"\n  ],\n  \"outputs\": [\n    \"653 733\\n\",\n    \"31 41\\n\",\n    \"0 100000\\n\",\n    \"2500000 2500000\\n\",\n    \"1 100000\\n\",\n    \"65535 65536\\n\",\n    \"306375 306420\\n\",\n    \"724302 724303\\n\",\n    \"0 59139\\n\",\n    \"9859 48096\\n\",\n    \"88891 90224\\n\",\n    \"19907 24641\\n\",\n    \"80328 82089\\n\",\n    \"158428 168696\\n\",\n    \"192724 270011\\n\",\n    \"138409 167241\\n\",\n    \"102429 186430\\n\",\n    \"252317 291210\\n\",\n    \"288850 297381\\n\",\n    \"296580 315954\\n\",\n    \"325890 327812\\n\",\n    \"414474 453667\\n\",\n    \"362168 392358\\n\",\n    \"370791 371188\\n\",\n    \"492038 551105\\n\",\n    \"436157 470692\\n\",\n    \"538648 614005\\n\",\n    \"506639 558873\\n\",\n    \"506467 510922\\n\",\n    \"513496 572193\\n\",\n    \"602650 616877\\n\",\n    \"560664 601494\\n\",\n    \"586407 637558\\n\",\n    \"569885 599895\\n\",\n    \"716531 728460\\n\",\n    \"669482 697066\\n\",\n    \"678299 683312\\n\",\n    \"620095 620382\\n\",\n    \"825663 838784\\n\",\n    \"770578 774459\\n\",\n    \"741185 823963\\n\",\n    \"693927 744637\\n\",\n    \"823487 862568\\n\",\n    \"872694 876851\\n\",\n    \"989044 1011845\\n\",\n    \"977736 1012543\\n\",\n    \"954593 973021\\n\",\n    \"909877 959523\\n\",\n    \"799467 864856\\n\",\n    \"1012190 1036128\\n\",\n    \"1039942 1109548\\n\",\n    \"1141992 1210184\\n\",\n    \"1052557 1068976\\n\",\n    \"1199490 1212346\\n\",\n    \"1214201 1233568\\n\",\n    \"1096672 1115247\\n\",\n    \"1233007 1259909\\n\",\n    \"1251581 1255820\\n\",\n    \"4 12\\n\",\n    \"38442 41203\\n\",\n    \"379808 392222\\n\",\n    \"90 180\\n\",\n    \"16 24\\n\",\n    \"50 150\\n\",\n    \"7 9\\n\",\n    \"299163 327443\\n\",\n    \"2 5\\n\",\n    \"5 15\\n\",\n    \"9 12\\n\",\n    \"7 10\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/859/C",
  "starter_code": ""
}