{
  "task_id": "APPS/347",
  "problem_id": 347,
  "prompt": "Kevin Sun has just finished competing in Codeforces Round #334! The round was 120 minutes long and featured five problems with maximum point values of 500, 1000, 1500, 2000, and 2500, respectively. Despite the challenging tasks, Kevin was uncowed and bulldozed through all of them, distinguishing himself from the herd as the best cowmputer scientist in all of Bovinia. Kevin knows his submission time for each problem, the number of wrong submissions that he made on each problem, and his total numbers of successful and unsuccessful hacks. Because Codeforces scoring is complicated, Kevin wants you to write a program to compute his final score.\n\nCodeforces scores are computed as follows: If the maximum point value of a problem is x, and Kevin submitted correctly at minute m but made w wrong submissions, then his score on that problem is $\\operatorname{max}(0.3 x,(1 - \\frac{m}{250}) x - 50 w)$. His total score is equal to the sum of his scores for each problem. In addition, Kevin's total score gets increased by 100 points for each successful hack, but gets decreased by 50 points for each unsuccessful hack.\n\nAll arithmetic operations are performed with absolute precision and no rounding. It is guaranteed that Kevin's final score is an integer.\n\n\n-----Input-----\n\nThe first line of the input contains five space-separated integers m_1, m_2, m_3, m_4, m_5, where m_{i} (0 \u2264 m_{i} \u2264 119) is the time of Kevin's last submission for problem i. His last submission is always correct and gets accepted.\n\nThe second line contains five space-separated integers w_1, w_2, w_3, w_4, w_5, where w_{i} (0 \u2264 w_{i} \u2264 10) is Kevin's number of wrong submissions on problem i.\n\nThe last line contains two space-separated integers h_{s} and h_{u} (0 \u2264 h_{s}, h_{u} \u2264 20), denoting the Kevin's numbers of successful and unsuccessful hacks, respectively.\n\n\n-----Output-----\n\nPrint a single integer, the value of Kevin's final score.\n\n\n-----Examples-----\nInput\n20 40 60 80 100\n0 1 2 3 4\n1 0\n\nOutput\n4900\n\nInput\n119 119 119 119 119\n0 0 0 0 0\n10 0\n\nOutput\n4930\n\n\n\n-----Note-----\n\nIn the second sample, Kevin takes 119 minutes on all of the problems. Therefore, he gets $(1 - \\frac{119}{250}) = \\frac{131}{250}$ of the points on each problem. So his score from solving problems is $\\frac{131}{250}(500 + 1000 + 1500 + 2000 + 2500) = 3930$. Adding in 10\u00b7100 = 1000 points from hacks, his total score becomes 3930 + 1000 = 4930.",
  "solutions": "[\"m = list(map(int, input().split()))\\nw = list(map(int, input().split()))\\na = [500, 1000, 1500, 2000, 2500]\\nv = list(map(int, input().split()))\\nans = 0\\nfor i in range(len(m)):\\n    ans += max(0.3 * a[i], (1 - m[i] / 250) * a[i] - 50 * w[i])\\nans += v[0] * 100\\nans -= v[1] * 50\\nprint(int(ans))\\n\", \"a = [int(i) for i in input().split()]\\nb = [int(i) for i in input().split()]\\nc = [int(i) for i in input().split()]\\nans = c[0] * 100 - c[1] * 50\\nfor i in range(5):\\n    ans += max(0.3 * (i + 1) * 500, (1 - a[i] / 250) * (i + 1) * 500 - 50 * b[i])\\nprint(round(ans))\", \"M = list(map(int,input().split()))\\nW = list(map(int,input().split()))\\ns,e = list(map(int, input().split()))\\nP = [500,1000,1500,2000,2500]\\nr = 0\\nfor k in range(5):\\n    r += max([0.3*P[k],(1-(M[k]/250))*P[k] - 50*W[k]])\\nprint(int(r+100*s-50*e))\\n\", \"def g(w,m,x):\\n    return max(0.3*x,(1-m/250)*x-50*w)\\n\\n\\nm1,m2,m3,m4,m5=map(int,input().split())\\nw1,w2,w3,w4,w5=map(int,input().split())\\nh1,h2=map(int,input().split())\\nprint(int(g(w1,m1,500)+g(w2,m2,1000)+g(w3,m3,1500)+g(w4,m4,2000)+g(w5,m5,2500)+h1*100-h2*50))\", \"m = list(map(int, input().split()))\\nw = list(map(int, input().split()))\\nq = [500, 1000, 1500, 2000, 2500]\\ns = 0\\nfor i in range(5):\\n    s += max(0.3 * q[i], (1 - m[i] / 250) * q[i] - 50 * w[i])\\nh1, h2 = list(map(int, input().split()))\\ns += 100 * h1\\ns -= 50 * h2\\nprint(int(s))\\n\", \"ans = 0;\\ntime = list(map(int,input().split()))\\ntries = list(map(int,input().split()))\\nball = [500,1000,1500,2000,2500]\\nz = list(map(int,input().split()))\\ngv = z[0]\\nbv = z[1]\\nfor i in range(0,5):\\n    ans += max(0.3*ball[i],(1-time[i]/250)*ball[i] - 50*tries[i])\\n    \\n    \\nans += 100*gv\\nans -= 50*bv\\nprint(int(ans))\\n\", \"max_scores = [ 500, 1000, 1500, 2000, 2500 ]\\ncorects = [ int(c) for c in input().split() ]\\nwrongs = [ int(w) for w in input().split() ]\\nshacks, unshacks = map(int, input().split())\\nfinal_score = shacks*100 - unshacks*50\\n\\ndef score(x, m, w):\\n  return max(0.3*x, (1-(m/250))*x-50*w)\\n\\nfor i in range(5):\\n  final_score += score(max_scores[i], corects[i], wrongs[i])\\nprint(int(final_score))\", \"def score(m, w, x):\\n    return max(0.3*x, (1.0 - m/250) * x - 50*w)\\n\\nms = list(map(int, input().split()))\\nws = list(map(int, input().split()))\\nhs, hu = list(map(int, input().split()))\\n\\nscore = sum(score(m, w, x) for m, w, x in zip(ms, ws, [500,1000,1500,2000,2500]))\\nprint(int(score + 100 * hs - 50 * hu))\\n\", \"def score(m,w,x):\\n    return max(0.3*x,(1-m/250)*x-50*w)\\nm1,m2,m3,m4,m5=(list(map(int,input().split())))\\nw1,w2,w3,w4,w5=(list(map(int,input().split())))\\nhs,hu=(list(map(int,input().split())))\\nx1,x2,x3,x4,x5=(500,1000,1500,2000,2500)\\nprint(round(score(m1,w1,x1)+score(m2,w2,x2)+score(m3,w3,x3)+score(m4,w4,x4)+score(m5,w5,x5))+100*hs-50*hu)\\n\", \"m = list(map(int, input().split()))\\nw = list(map(int, input().split()))\\nn1, n2 = list(map(int, input().split()))\\nans = n1 * 100 - n2 * 50\\nfor i in range(5):\\n    col = 500 * (i + 1)\\n    ans += max(0.3 * col, (1 - m[i] / 250) * col - 50 * w[i])\\nprint(int(ans))\\n\", \"x = [500, 1000, 1500, 2000, 2500]\\nm = list(map(int, input().split()))\\nw = list(map(int, input().split()))\\nhs, hu = map(int, input().split())\\nprint(sum(max(3 * x[i] // 10, x[i] - x[i] * m[i] // 250 - 50 * w[i]) for i in range(5)) + hs * 100 - hu * 50)\", \"point = [500, 1000, 1500, 2000, 2500]\\nminutes = list(map(int, input().split()))\\nwrong = list(map(int, input().split()))\\nhack = list(map(int, input().split()))\\nanswer = 0\\n\\nfor x, m, w in zip(point, minutes, wrong):\\n    answer += max(0.3 * x, (1 - m / 250) * x - 50 * w)\\n\\nanswer += hack[0] * 100 - hack[1] * 50\\n\\nprint(int(answer))\\n\", \"import math\\nfrom decimal import *\\nimport sys\\nfrom fractions import Fraction\\n\\nM=list(map(int,input().split()))\\nW=list(map(int,input().split()))\\nH=list(map(int,input().split()))\\nX=[500,1000,1500,2000,2500]\\n\\nans = H[0]*100-H[1]*50\\n\\nfor i in range(0,5):\\n   ans += int(max(0.3 * X[i] , (250 - M[i]) * (X[i]/250) - 50*W[i]))\\nprint(ans)\\n\\n   \\n\\n   \\n \\n\", \"import sys\\n\\narr1 = [int(x) for x in sys.stdin.readline().split()]\\narr2 = [int(x) for x in sys.stdin.readline().split()]\\nbase = [500, 1000, 1500, 2000, 2500]\\nres = 0\\n\\nfor i in range(5):\\n    res += max([0.3 * base[i], base[i] * (1 - arr1[i] / 250) - 50 * arr2[i]])\\n\\na, b = [int(x) for x in sys.stdin.readline().split()]\\nres += 100 * a\\nres -= 50 * b\\n\\nprint(int(res))\\n\", \"times = list(map(int, input().split()))\\natt = list(map(int, input().split()))\\nn,m = list(map(int, input().split()))\\nsc = 0\\nfor i in range(5):\\n\\tsc += max ( 150 * (i+1),  ( 1 - times[i] / 250 ) * 500 * (i+1) - 50 * att[i] )\\nsc += 100 * n \\nsc -= 50 * m\\nprint(int(sc)) \\n\\n\", \"m = list(map(int, input().split()))\\nw = list(map(int, input().split()))\\nh = [500, 1000, 1500, 2000, 2500]\\ns, u = list(map(int, input().split()))\\nsu = 0.0\\nfor i in range(5):\\n    su += max(0.3*h[i], (1.0-m[i]/250.0)*h[i] - 50.0*w[i])\\nsu += s*100.0\\nsu -= u*50.0\\nprint(int(su))\\n\", \"res = 0\\nc = [500,1000,1500,2000,2500]\\na = list(map(int,input().split()))\\nw = list(map(int,input().split()))\\nhs,hu = map(int,input().split())\\nfor i in range(5):\\n    res += max(0.3*c[i],(1-a[i]/250)*c[i]-50*w[i])\\nprint(int(res+hs*100-50*hu))\", \"def __starting_point():\\n\\n    x = [500,1000,1500,2000,2500]\\n    m = [int(x) for x in input().split()]\\n    w = [int(x) for x in input().split()]\\n    hs , hu = [int(x) for x in input().split()]\\n\\n    res = 0\\n    for i in range(5):\\n        res += max( 3*x[i]//10 , x[i] - m[i]*x[i]//250 - 50*w[i] )\\n    res += 100*hs\\n    res -= 50*hu\\n    print(res)\\n__starting_point()\", \"def main():\\n    mode=\\\"filee\\\"\\n    if mode==\\\"file\\\":f=open(\\\"test.txt\\\",\\\"r\\\")\\n    get = lambda :[int(x) for x in (f.readline() if mode==\\\"file\\\" else input()).split()]\\n    m=get()\\n    w=get()\\n    h=get()\\n    ans=0\\n    s=500\\n    for i in range(5):\\n        ans+=max(0.3*s, (1- m[i]/250)*s - 50*w[i])\\n        s+=500\\n    ans+=(100*h[0] - 50*h[1])\\n    print(int(ans))\\n    \\n\\n\\n    if mode==\\\"file\\\":f.close()\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"sc=[1]*10\\nmrk=input().split()\\nfor i in range (0,5):\\n    mrk[i]=int(mrk[i])\\n    sc[i]=500*(i+1)\\nwr=input().split()\\nfor i in range (0,5):\\n    wr[i]=int(wr[i])\\ns=0\\nfor i in range (0,5):\\n    s+=max((0.3*sc[i]),(1-(mrk[i]/250))*sc[i]-(50*wr[i]))\\nl=input().split()\\ns+=100*int(l[0])-50*int(l[1])\\nprint(int(s))\\n\\n\", \"problems = [ 500, 1000, 1500, 2000, 2500 ]\\nsubmitted = list(map(int, input().split()))\\nwrong = list(map(int, input().split()))\\n\\nscore = 0\\nfor pos, x in enumerate(problems):\\n    m = submitted[pos]\\n    w = wrong[pos]\\n    score += max( 3 * x // 10,  x - m * x // 250 - 50 * w )\\n\\ngood, bad = list(map(int, input().split()))\\nscore += good * 100 - bad * 50\\n\\nprint(score)\\n\", \"xs = [500, 1000, 1500, 2000, 2500]\\nms = [int(x) for x in input().split()]\\nws = [int(x) for x in input().split()]\\nhacks = [int(x) for x in input().split()]\\n\\nres = 0\\nfor i in range(len(xs)):\\n    problem = max(0.3 * xs[i], (1 - ms[i]/250) * xs[i] - 50*ws[i])\\n    res += problem\\n\\nres += 100*hacks[0] - 50*hacks[1]\\nprint(int(res))\\n\", \"m = list(map(int, input().split()))\\nw = list(map(int, input().split()))\\nhs, hu = map(int, input().split())\\n\\ns = [500 * (x + 1) for x in range(5)]\\n\\nfor i in range(5):\\n    s[i] = max(0.3 * s[i], (1 - m[i]/250) * s[i] - 50 * w[i])\\n\\ns_t = sum(s) + 100 * hs - 50 * hu\\n\\nprint(int(s_t))\", \"m = list(map(int, input().split(\\\" \\\")))\\nw = list(map(int, input().split(\\\" \\\")))\\n\\nhs, hu = list(map(int, input().split(\\\" \\\")))\\n\\ns = 0\\n\\ns += hs*100 - hu*50\\n\\nfor i in range(5):\\n    s+= max(0.3*((i+1)*500), (1-m[i]/250)*((i+1)*500) - 50*w[i])\\n    \\nprint(int(s))\\n\", \"__author__ = 'MoonBall'\\n\\nimport sys\\n# sys.stdin = open('data/A.in', 'r')\\nT = 1\\n\\ndef process():\\n    a = list(map(int, input().split()))\\n    b = list(map(int, input().split()))\\n    c = list(map(int, input().split()))\\n    z = [500, 1000, 1500, 2000, 2500]\\n    total = 0\\n    for _ in range(5):\\n      total += max(0.3 * z[_], (1 - a[_] / 250) * z[_] - 50 * b[_])\\n    total += 100 * c[0] - 50 * c[1]\\n\\n    print(int(total))\\n\\n\\n\\n\\n\\n\\nfor _ in range(T):\\n    process()\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"20 40 60 80 100\\n0 1 2 3 4\\n1 0\\n\",\n    \"119 119 119 119 119\\n0 0 0 0 0\\n10 0\\n\",\n    \"3 6 13 38 60\\n6 10 10 3 8\\n9 9\\n\",\n    \"21 44 11 68 75\\n6 2 4 8 4\\n2 8\\n\",\n    \"16 112 50 114 68\\n1 4 8 4 9\\n19 11\\n\",\n    \"55 66 75 44 47\\n6 0 6 6 10\\n19 0\\n\",\n    \"47 11 88 5 110\\n6 10 4 2 3\\n10 6\\n\",\n    \"5 44 61 103 92\\n9 0 10 4 8\\n15 7\\n\",\n    \"115 53 96 62 110\\n7 8 1 7 9\\n7 16\\n\",\n    \"102 83 26 6 11\\n3 4 1 8 3\\n17 14\\n\",\n    \"36 102 73 101 19\\n5 9 2 2 6\\n4 13\\n\",\n    \"40 115 93 107 113\\n5 7 2 6 8\\n6 17\\n\",\n    \"53 34 53 107 81\\n4 3 1 10 8\\n7 7\\n\",\n    \"113 37 4 84 66\\n2 0 10 3 0\\n20 19\\n\",\n    \"10 53 101 62 1\\n8 0 9 7 9\\n0 11\\n\",\n    \"45 45 75 36 76\\n6 2 2 0 0\\n8 17\\n\",\n    \"47 16 44 78 111\\n7 9 8 0 2\\n1 19\\n\",\n    \"7 54 39 102 31\\n6 0 2 10 1\\n18 3\\n\",\n    \"0 46 86 72 40\\n1 5 5 5 9\\n6 5\\n\",\n    \"114 4 45 78 113\\n0 4 8 10 2\\n10 12\\n\",\n    \"56 56 96 105 107\\n4 9 10 4 8\\n2 1\\n\",\n    \"113 107 59 50 56\\n3 7 10 6 3\\n10 12\\n\",\n    \"96 104 9 94 84\\n6 10 7 8 3\\n14 11\\n\",\n    \"98 15 116 43 55\\n4 3 0 9 3\\n10 7\\n\",\n    \"0 26 99 108 35\\n0 4 3 0 10\\n9 5\\n\",\n    \"89 24 51 49 84\\n5 6 2 2 9\\n2 14\\n\",\n    \"57 51 76 45 96\\n1 0 4 3 6\\n12 15\\n\",\n    \"79 112 37 36 116\\n2 8 4 7 5\\n4 12\\n\",\n    \"71 42 60 20 7\\n7 1 1 10 6\\n1 7\\n\",\n    \"86 10 66 80 55\\n0 2 5 10 5\\n15 6\\n\",\n    \"66 109 22 22 62\\n3 1 5 4 5\\n10 5\\n\",\n    \"97 17 43 84 58\\n2 8 3 8 6\\n10 7\\n\",\n    \"109 83 5 114 104\\n6 0 3 9 5\\n5 2\\n\",\n    \"94 18 24 91 105\\n2 0 7 10 3\\n1 4\\n\",\n    \"64 17 86 59 45\\n8 0 10 2 2\\n4 4\\n\",\n    \"70 84 31 57 2\\n7 0 0 2 7\\n12 5\\n\",\n    \"98 118 117 86 4\\n2 10 9 7 5\\n11 15\\n\",\n    \"103 110 101 97 70\\n4 2 1 0 5\\n7 5\\n\",\n    \"78 96 6 97 62\\n7 7 9 2 9\\n10 3\\n\",\n    \"95 28 3 31 115\\n1 9 0 7 3\\n10 13\\n\",\n    \"45 17 116 58 3\\n8 8 7 6 4\\n3 19\\n\",\n    \"19 12 0 113 77\\n3 0 10 9 2\\n8 6\\n\",\n    \"0 0 0 0 0\\n0 0 0 0 0\\n0 0\\n\",\n    \"0 0 0 0 0\\n0 0 0 0 0\\n20 0\\n\",\n    \"119 119 119 119 119\\n10 10 10 10 10\\n0 20\\n\",\n    \"0 0 0 0 0\\n10 10 10 10 10\\n0 20\\n\",\n    \"119 0 0 0 0\\n10 0 0 0 0\\n5 5\\n\",\n    \"0 119 0 0 0\\n0 10 0 0 0\\n5 5\\n\",\n    \"0 0 119 0 0\\n0 0 10 0 0\\n0 0\\n\",\n    \"0 0 0 119 0\\n0 0 0 10 0\\n5 5\\n\",\n    \"0 0 0 0 119\\n0 0 0 0 10\\n5 5\\n\",\n    \"119 0 0 0 0\\n2 0 0 0 0\\n5 5\\n\",\n    \"0 119 0 0 0\\n0 2 0 0 0\\n5 5\\n\",\n    \"0 0 119 0 0\\n0 0 2 0 0\\n5 5\\n\",\n    \"0 0 0 119 0\\n0 0 0 2 0\\n5 5\\n\",\n    \"0 0 0 0 119\\n0 0 0 0 2\\n5 5\\n\",\n    \"119 0 0 0 0\\n0 0 0 0 0\\n4 9\\n\"\n  ],\n  \"outputs\": [\n    \"4900\\n\",\n    \"4930\\n\",\n    \"5088\\n\",\n    \"4522\\n\",\n    \"5178\\n\",\n    \"6414\\n\",\n    \"5188\\n\",\n    \"4914\\n\",\n    \"3416\\n\",\n    \"6704\\n\",\n    \"4292\\n\",\n    \"2876\\n\",\n    \"4324\\n\",\n    \"6070\\n\",\n    \"4032\\n\",\n    \"5222\\n\",\n    \"3288\\n\",\n    \"6610\\n\",\n    \"4924\\n\",\n    \"4432\\n\",\n    \"3104\\n\",\n    \"4586\\n\",\n    \"4754\\n\",\n    \"5400\\n\",\n    \"5388\\n\",\n    \"4066\\n\",\n    \"5156\\n\",\n    \"3872\\n\",\n    \"5242\\n\",\n    \"5802\\n\",\n    \"5854\\n\",\n    \"5028\\n\",\n    \"4386\\n\",\n    \"4118\\n\",\n    \"5144\\n\",\n    \"6652\\n\",\n    \"4476\\n\",\n    \"4678\\n\",\n    \"4868\\n\",\n    \"5132\\n\",\n    \"3992\\n\",\n    \"5040\\n\",\n    \"7500\\n\",\n    \"9500\\n\",\n    \"1310\\n\",\n    \"4150\\n\",\n    \"7400\\n\",\n    \"7050\\n\",\n    \"6450\\n\",\n    \"6350\\n\",\n    \"6060\\n\",\n    \"7412\\n\",\n    \"7174\\n\",\n    \"6936\\n\",\n    \"6698\\n\",\n    \"6460\\n\",\n    \"7212\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/604/A",
  "starter_code": ""
}