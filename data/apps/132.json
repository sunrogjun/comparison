{
  "task_id": "APPS/132",
  "problem_id": 132,
  "prompt": "Students Vasya and Petya are studying at the BSU (Byteland State University). At one of the breaks they decided to order a pizza. In this problem pizza is a circle of some radius. The pizza was delivered already cut into n pieces. The i-th piece is a sector of angle equal to a_{i}. Vasya and Petya want to divide all pieces of pizza into two continuous sectors in such way that the difference between angles of these sectors is minimal. Sector angle is sum of angles of all pieces in it. Pay attention, that one of sectors can be empty.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 360) \u00a0\u2014 the number of pieces into which the delivered pizza was cut.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 360) \u00a0\u2014 the angles of the sectors into which the pizza was cut. The sum of all a_{i} is 360.\n\n\n-----Output-----\n\nPrint one integer \u00a0\u2014 the minimal difference between angles of sectors that will go to Vasya and Petya.\n\n\n-----Examples-----\nInput\n4\n90 90 90 90\n\nOutput\n0\n\nInput\n3\n100 100 160\n\nOutput\n40\n\nInput\n1\n360\n\nOutput\n360\n\nInput\n4\n170 30 150 10\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn first sample Vasya can take 1 and 2 pieces, Petya can take 3 and 4 pieces. Then the answer is |(90 + 90) - (90 + 90)| = 0.\n\nIn third sample there is only one piece of pizza that can be taken by only one from Vasya and Petya. So the answer is |360 - 0| = 360.\n\nIn fourth sample Vasya can take 1 and 4 pieces, then Petya will take 2 and 3 pieces. So the answer is |(170 + 10) - (30 + 150)| = 0.\n\nPicture explaning fourth sample:\n\n[Image]\n\nBoth red and green sectors consist of two adjacent pieces of pizza. So Vasya can take green sector, then Petya will take red sector.",
  "solutions": "[\"n = int(input())\\na = list(map(int, input().split()))\\nmn = 360\\nfor i in range(n):\\n    x = 0\\n    for j in range(i, n):\\n        x += a[j]\\n        mn = min(mn, abs(x - (360 - x)))\\nprint(mn)\", \"n = int(input().strip())\\n\\nkosi = list(map(int, input().strip().split()))\\n\\nmini = 400\\n\\nfor a in range(len(kosi)):\\n    for b in range(a, len(kosi)):\\n        first = sum(kosi[a:b])\\n        second = sum(kosi[:a]) + sum(kosi[b:])\\n        if abs(first - second) < mini:\\n            mini = abs(first - second)\\n\\nprint(mini)\\n        \\n\\n\", \"import sys\\nsys.setrecursionlimit(100000000)\\n# def input(): return sys.stdin.readline()[:-1]\\ndef iin(): return int(input())\\ndef impin(): return list(map(int, input().split()))\\ndef irrin(): return [int(x) for x in input().split()]\\ndef imrin(n): return [int(input()) for _ in range(n)]\\n\\n\\nn = iin()\\narr = irrin()\\nsa = sum(arr)\\nmn = 100000000\\nfor i in range(n):\\n    for j in range(i, n+1):\\n        s = sum(arr[i:j])\\n        # print(s)\\n        k = sa-s\\n        mn = min(mn, abs(s-k))\\nprint(mn)\\n\", \"n = int(input())\\n\\nnums = list(map(int, input().split()))\\n\\nanswer = float('inf')\\n\\nfor l in range(n):\\n    for s in range(n):\\n        if(s + l - 1 >= n):continue\\n        current = sum(nums[s:s + l])\\n        answer = min(answer, abs(360 - 2 * current))\\n\\n\\nprint(answer)\\n\", \"\\ndef main():\\n    n = int(input())\\n    a = list(map(int, input().split()))\\n    s = sum(a)\\n    res = 100 ** 10\\n    for l in range(n):\\n        for r in range(l, n):\\n            s1 = sum(a[l:r])\\n            res = min(res, abs(s1 - (s - s1)))\\n\\n    print(res)\\n\\n\\n\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"from collections import deque\\n\\nn = int(input())\\na = deque(map(int, input().split()))\\nps = [0] * n\\nmindif = 2e9\\nfor i in range(n):\\n    for i in range(n):\\n        ps[i] = ps[i - 1] if i > 0 else 0\\n        ps[i] += a[i]\\n    for i in range(n):\\n        mindif = min(mindif, abs((ps[i - 1] if i > 0 else 0) - (ps[n - 1] - (ps[i - 1] if i > 0 else 0))))\\n    a.append(a.popleft())\\n\\nprint(mindif)\", \"n = int(input())\\na = [int(i) for i in input().split()]\\npref = []\\ns = 0\\nfor i in range(n):\\n    s += a[i]\\n    pref.append(s)\\nmins = 1000\\nfor i in range(n):\\n    for j in range(i, n):\\n        s = abs((pref[j] - pref[i]) - (pref[i] + (pref[n-1] - pref[j])))\\n        if s < mins:\\n            mins = s\\nprint(mins)\", \"n = int(input())\\n\\nbest = 360\\n\\ntab = list(map(int, input().split()))\\n\\npre_sum = [0]\\n\\nfor i in range(1, len(tab) + 1):\\n    pre_sum += [tab[i - 1] + pre_sum[-1]]\\n\\nfor i in range(n + 1):\\n    for j in range(i, n + 1):\\n        best = min([best, 2 * abs(180 - (pre_sum[j] - pre_sum[i - 1]))])\\n\\nprint(best);\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na += a\\nans = 360\\nfor i in range(n):\\n  cur = 0\\n  j = i\\n  while cur < 180:\\n    cur += a[j]\\n    j += 1\\n  ans = min(ans, 2*cur - 360)\\nprint(ans)\", \"n = int(input())\\npieces = [int(x) for x in input().split()]\\nsm = 360\\ncurs = 0\\nans = []\\nfor i in range(n):\\n    for elem in pieces:\\n        ans.append(abs(sm - 2 * curs))\\n        curs += elem\\n        if curs >= 360:\\n            curs = 0\\n    pieces.append(pieces.pop(0))\\nprint(min(ans))\", \"n = int(input())\\nslices = list(map(int, input().split()))\\nanswer = 360\\nfor i in range(n):\\n    for j in range(i + 1, n):\\n        cur_s = abs(sum(slices[:i]) + sum(slices[j:]) - sum(slices[i:j]))\\n        answer = min(cur_s, answer)\\nprint(answer)\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\na = a + a\\npref_sum = [0] * (2 * n)\\nfor i in range(2 * n):\\n    pref_sum[i] = pref_sum[i - 1] + a[i]\\ndif = int(1e9)\\nfor i in range(n):\\n    for j in range(n):\\n        dif = min(dif, abs(pref_sum[n - 1] - 2 * (pref_sum[j + i] - pref_sum[j])))\\nprint(dif)\", \"n = int(input())\\narr = [int(num) for num in input().strip().split()]\\nans = 360\\nfor i in range(n):\\n    l = 0\\n    r = 360\\n    for j in range(n):\\n        ans = min(ans, abs(l - r))\\n        l += arr[j]\\n        r -= arr[j]\\n    if ans == 0:\\n        break\\n    val = arr[0]\\n    arr.remove(arr[0])\\n    arr.append(val)\\nprint(ans)\", \"#from math import gcd, factorial as f\\n#list(map(int, input().split()))\\nn = int(input())\\na = list(map(int, input().split()))\\nx = sum(a)\\na += a\\nan = 0\\nann = 1000000\\nfor j in range(n):\\n    an = 0\\n    for i in range(j, 2 * n):\\n        an += a[i]\\n        if an >= x // 2:\\n            if abs(x - 2 * an) < abs(x - 2 * ann):\\n                ann = an\\n            an = 0\\nprint(abs(x - 2 * ann))\\n\", \"#python3\\n#utf-8\\n\\npieces_nr = int(input())\\npiece_idx___deg = [int(x) for x in input().split()]\\nans = 360\\nfor left_cl in range(pieces_nr):\\n    for right_op in range(left_cl + 1, pieces_nr + 1):\\n        curr_split = sum(piece_idx___deg[left_cl:right_op])\\n        rest = 360 - curr_split\\n        # print(curr_split, rest)\\n        curr_ans = rest - curr_split\\n        if curr_ans < 0:\\n            curr_ans *= -1\\n        ans = min(curr_ans, ans)\\n        # print(curr_ans)\\nprint(ans)\\n\", \"n = int(input())\\nar = [int(i) for i in input().split(' ')]\\n\\nsum = 0\\ns_a = 1000\\nfor i in range(n):\\n    k = 0\\n    sum = 0\\n    while sum < 180:\\n        sum += ar[i-k]\\n        k += 1\\n    if s_a > sum-(360-sum):\\n        s_a = sum-(360-sum)\\n\\nprint(s_a)\", \"n = int(input())\\nangles = list(map(int, input().split()))\\nangles = angles+angles\\n\\nsum_ = 0\\nfrom_ = 0\\nbest = 360\\nfor to in range(n):\\n    sum_ += angles[to]\\n    while sum_ >= 180:\\n        best = min(best, abs(360-2*sum_))\\n        sum_ -= angles[from_]\\n        from_ += 1\\n    best = min(best, abs(360-2*sum_))\\nprint(best)\\n\", \"kolichestvoKuskov = int(input())\\nspisokUglov = list(map(int, input().split()))\\nraznica = 180\\nfor a in range(0, kolichestvoKuskov):\\n    sum = 0\\n    for i in range(a, kolichestvoKuskov):\\n        sum += spisokUglov[i]\\n        if raznica > abs(180 - sum):\\n            raznica = abs(180 - sum)\\nprint(raznica * 2)\\n\", \"n = int(input())\\nsectors = list(map(int, input().split()))\\n\\nans = 360\\nfor _ in range(n):\\n    for i in range(n):\\n        temp = abs(sum(sectors[:i]) - sum(sectors[i:]))\\n        if temp < ans:\\n            ans = temp\\n    sectors[:] = sectors[-1:] + sectors[:-1]\\nprint(ans)\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nans = 1e9\\nfor j in range(n):\\n    pref = [0]*(n+1)\\n    for i in range(1, n+1):\\n        pref[i] = pref[i-1] + a[i-1]\\n    for i in range(n):\\n        ans = min(ans, abs(pref[-1]-2*pref[i]))\\n    a = [a[-1]] + a[:-1]\\nprint(ans)\\n\", \"import sys\\ndata = sys.stdin.readlines()\\n\\nn = int(data[0])\\nm = [int(x) for x in data[1].split()]\\n\\nres = []\\n\\nfor k in range(n):\\n    for i in range(n):\\n        a = abs(sum(m[:i]) - sum(m[i:]))\\n        res.append(a)\\n    m.append(m[0])\\n    m = m[1:]\\nprint(min(res))\\n        \\n\", \"n=int(input())\\nl=[]\\nl=input().split()\\nfor i in range(n):\\n    l[i]=int(l[i])\\nl.extend(l)\\n\\notv=400\\nfor i in range(n):\\n    s=0\\n    j=i\\n    while s<180:\\n        s+=l[j]\\n        j+=1\\n\\n    if abs(s-180)*2<otv:\\n        otv=abs(s-180)*2\\nprint(otv)\", \"n = int(input())\\na = list(map(int, input().split()))\\nsumspref = [a[0]]\\nfor i in range(1, n):\\n    sumspref.append(sumspref[-1] + a[i])\\nsums = []\\nfor i in range(n):\\n    for j in range(i, n):\\n        sums.append(abs(180 - (sumspref[j] - sumspref[i])))\\nprint(min(sums) * 2)\\n    \\n\\n\", \"n = int( input() )\\n\\na = list( map( int, input().split() ) )\\n\\na = a + a\\n\\n#print( a )\\n\\nmid = n//2\\n\\nbest = 99999999999999999999999\\n\\nfor i in range( n ):\\n    sub = a[i:i+n]\\n    #print( sub )\\n    d = sum(sub)\\n    best = min( best, d )\\n    s = 0\\n\\n    #print( d, s )\\n    for j in range( n ):\\n        s += sub[j]\\n        d -= sub[j]\\n\\n        diff = abs( s - d)\\n        best = min( best, diff )\\n\\nprint( best )\\n\", \"def solution(sectors):\\n    n = len(sectors)\\n    if n == 1:\\n        return sectors[0]\\n    else:\\n        min_diff = 360\\n        for i in range(n):\\n            j = i\\n            sum_sector = 0\\n            prev = sum_sector\\n            while(sum_sector <= 180):\\n                prev = sum_sector\\n                sum_sector += sectors[j]\\n                j += 1\\n                j %= n\\n            #print(prev, sum_sector)\\n            if abs(360 - 2 * sum_sector) < min_diff:\\n                min_diff = abs(360 - 2 * sum_sector)\\n            if abs(360 - 2 * prev) < min_diff:\\n                min_diff = abs(360 - 2 * prev)\\n        return min_diff\\n\\n\\nn = int(input())\\nsectors = []\\nsectors_str = input().split()\\nfor s in sectors_str:\\n    sectors.append(int(s))\\n\\nprint(solution(sectors))\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4\\n90 90 90 90\\n\",\n    \"3\\n100 100 160\\n\",\n    \"1\\n360\\n\",\n    \"4\\n170 30 150 10\\n\",\n    \"5\\n10 10 10 10 320\\n\",\n    \"8\\n45 45 45 45 45 45 45 45\\n\",\n    \"3\\n120 120 120\\n\",\n    \"5\\n110 90 70 50 40\\n\",\n    \"2\\n170 190\\n\",\n    \"15\\n25 25 25 25 25 25 25 25 25 25 25 25 25 25 10\\n\",\n    \"5\\n30 60 180 60 30\\n\",\n    \"2\\n359 1\\n\",\n    \"5\\n100 100 30 100 30\\n\",\n    \"5\\n36 34 35 11 244\\n\",\n    \"5\\n96 94 95 71 4\\n\",\n    \"2\\n85 275\\n\",\n    \"3\\n281 67 12\\n\",\n    \"5\\n211 113 25 9 2\\n\",\n    \"13\\n286 58 6 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"15\\n172 69 41 67 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"20\\n226 96 2 20 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"50\\n148 53 32 11 4 56 8 2 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"3\\n1 1 358\\n\",\n    \"20\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 341\\n\",\n    \"33\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 328\\n\",\n    \"70\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 291\\n\",\n    \"130\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 231\\n\",\n    \"200\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 161\\n\",\n    \"222\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 139\\n\",\n    \"10\\n8 3 11 4 1 10 10 1 8 304\\n\",\n    \"12\\n8 7 7 3 11 2 10 1 10 8 10 283\\n\",\n    \"13\\n10 8 9 10 5 9 4 1 10 11 1 7 275\\n\",\n    \"14\\n1 6 3 11 9 5 9 8 5 6 7 3 7 280\\n\",\n    \"15\\n10 11 5 4 11 5 4 1 5 4 5 5 9 6 275\\n\",\n    \"30\\n8 7 5 8 3 7 2 4 3 8 11 3 9 11 2 4 1 4 5 6 11 5 8 3 6 3 11 2 11 189\\n\",\n    \"70\\n5 3 6 8 9 2 8 9 11 5 2 8 9 11 7 6 6 9 7 11 7 6 3 8 2 4 4 8 4 3 2 2 3 5 6 5 11 2 7 7 5 8 10 5 2 1 10 9 4 10 7 1 8 10 9 1 5 1 1 1 2 1 1 1 1 1 1 1 1 1\\n\",\n    \"29\\n2 10 1 5 7 2 9 11 9 9 10 8 4 11 2 5 4 1 4 9 6 10 8 3 1 3 8 9 189\\n\",\n    \"35\\n3 4 11 4 4 2 3 4 3 9 7 10 2 7 8 3 11 3 6 4 6 7 11 10 8 7 6 7 2 8 5 3 2 2 168\\n\",\n    \"60\\n4 10 3 10 6 3 11 8 11 9 3 5 9 2 6 5 6 9 4 10 1 1 3 7 2 10 5 5 3 10 5 2 1 2 9 11 11 9 11 4 11 7 5 6 10 9 3 4 7 8 7 3 6 7 8 5 1 1 1 5\\n\",\n    \"71\\n3 11 8 1 10 1 7 9 6 4 11 10 11 2 4 1 11 7 9 10 11 4 8 7 11 3 8 4 1 8 4 2 9 9 7 10 10 9 5 7 9 7 2 1 7 6 5 11 5 9 4 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"63\\n2 11 5 8 7 9 9 8 10 5 9 10 11 8 10 2 3 5 3 7 5 10 2 9 4 8 1 8 5 9 7 7 1 8 7 7 9 10 10 10 8 7 7 2 2 8 9 7 10 8 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"81\\n5 8 7 11 2 7 1 1 5 8 7 2 3 11 4 9 7 6 4 4 2 1 1 7 9 4 1 8 3 1 4 10 7 9 9 8 11 3 4 3 10 8 6 4 7 2 4 3 6 11 11 10 7 10 2 10 8 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"47\\n5 3 7 4 2 7 8 1 9 10 5 11 10 7 7 5 1 3 2 11 3 8 6 1 6 10 8 3 2 10 5 6 8 6 9 7 10 9 7 4 8 11 10 1 5 11 68\\n\",\n    \"100\\n5 8 9 3 2 3 9 8 11 10 4 8 1 1 1 1 6 5 10 9 5 3 7 7 2 11 10 2 3 2 2 8 7 3 5 5 10 9 2 5 10 6 7 7 4 7 7 8 2 8 9 9 2 4 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"120\\n9 11 3 7 3 7 9 1 10 7 11 4 1 5 3 5 6 3 1 11 8 8 11 7 3 5 1 9 1 7 10 10 10 10 9 5 4 8 2 8 2 1 4 5 3 11 3 5 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"200\\n7 7 9 8 2 8 5 8 3 9 7 10 2 9 11 8 11 7 5 2 6 3 11 9 5 1 10 2 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"220\\n3 2 8 1 3 5 5 11 1 5 2 6 9 2 2 6 8 10 7 1 3 2 10 9 10 10 4 10 9 5 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"6\\n27 15 28 34 41 215\\n\",\n    \"7\\n41 38 41 31 22 41 146\\n\",\n    \"8\\n24 27 34 23 29 23 30 170\\n\",\n    \"9\\n11 11 20 20 33 32 35 26 172\\n\",\n    \"10\\n36 13 28 13 33 34 23 25 34 121\\n\",\n    \"11\\n19 37 13 41 37 15 32 12 19 35 100\\n\",\n    \"12\\n37 25 34 38 21 24 34 38 11 29 28 41\\n\",\n    \"13\\n24 40 20 26 25 29 39 29 35 28 19 18 28\\n\",\n    \"14\\n11 21 40 19 28 34 13 16 23 30 34 22 25 44\\n\",\n    \"3\\n95 91 174\\n\",\n    \"4\\n82 75 78 125\\n\",\n    \"6\\n87 75 88 94 15 1\\n\",\n    \"10\\n27 52 58 64 45 64 1 19 2 28\\n\",\n    \"50\\n14 12 11 8 1 6 11 6 7 8 4 11 4 5 7 3 5 4 7 24 10 2 3 4 6 13 2 1 8 7 5 13 10 8 5 20 1 2 23 7 14 3 4 4 2 8 8 2 6 1\\n\",\n    \"100\\n3 3 4 3 3 6 3 2 8 2 13 3 1 1 2 1 3 4 1 7 1 2 2 6 3 2 10 3 1 2 5 6 2 3 3 2 3 11 8 3 2 6 1 3 3 4 7 7 2 2 1 2 6 3 3 2 3 1 3 8 2 6 4 2 1 12 2 2 2 1 4 1 4 1 3 1 3 1 5 2 6 6 7 1 2 3 2 4 4 2 5 9 8 2 4 6 5 1 1 3\\n\",\n    \"150\\n1 5 1 2 2 2 1 4 2 2 2 3 1 2 1 2 2 2 2 1 2 2 2 1 5 3 4 1 3 4 5 2 4 2 1 2 2 1 1 2 3 2 4 2 2 3 3 1 1 5 2 3 2 1 9 2 1 1 2 1 4 1 1 3 2 2 2 1 2 2 2 1 3 3 4 2 2 1 3 3 3 1 4 3 4 1 2 2 1 1 1 2 2 5 4 1 1 1 2 1 2 3 2 2 6 3 3 3 1 2 1 1 2 8 2 2 4 3 4 5 3 1 4 2 2 2 2 1 4 4 1 1 2 2 4 9 6 3 1 1 2 1 3 4 1 3 2 2 2 1\\n\",\n    \"200\\n1 2 1 3 1 3 1 2 1 4 6 1 2 2 2 2 1 1 1 1 3 2 1 2 2 2 1 2 2 2 2 1 1 1 3 2 3 1 1 2 1 1 2 1 1 1 1 1 1 2 1 2 2 4 1 3 1 2 1 2 2 1 2 1 3 1 1 2 2 1 1 1 1 2 4 1 2 1 1 1 2 1 3 1 1 3 1 2 2 4 1 1 2 1 2 1 2 2 2 2 1 1 2 1 2 1 3 3 1 1 1 2 1 3 3 1 2 1 3 1 3 3 1 2 2 1 4 1 2 2 1 2 2 4 2 5 1 2 2 1 2 1 2 1 5 2 1 2 2 1 2 4 1 2 2 4 2 3 2 3 1 2 1 1 2 2 2 1 1 2 1 4 1 2 1 1 2 1 2 3 1 1 1 2 2 3 1 3 2 2 3 1 2 1 2 1 1 2 1 2\\n\",\n    \"5\\n35 80 45 100 100\\n\",\n    \"4\\n90 179 90 1\\n\",\n    \"5\\n50 50 20 160 80\\n\",\n    \"5\\n30 175 30 5 120\\n\",\n    \"4\\n170 30 10 150\\n\",\n    \"6\\n90 30 90 30 90 30\\n\",\n    \"4\\n70 80 110 100\\n\",\n    \"7\\n35 45 70 100 10 10 90\\n\",\n    \"6\\n50 90 10 90 20 100\\n\",\n    \"6\\n10 155 162 1 26 6\\n\",\n    \"7\\n80 90 80 45 10 10 45\\n\",\n    \"4\\n18 36 162 144\\n\",\n    \"5\\n20 50 50 160 80\\n\",\n    \"5\\n10 30 140 20 160\\n\",\n    \"6\\n90 80 60 50 40 40\\n\",\n    \"9\\n40 20 20 20 20 20 20 40 160\\n\",\n    \"4\\n90 54 90 126\\n\",\n    \"4\\n150 170 30 10\\n\",\n    \"8\\n130 12 13 85 41 67 5 7\\n\",\n    \"7\\n70 170 20 10 30 30 30\\n\",\n    \"8\\n100 100 50 50 15 15 15 15\\n\",\n    \"4\\n100 70 80 110\\n\",\n    \"5\\n160 130 40 20 10\\n\",\n    \"4\\n20 149 151 40\\n\",\n    \"4\\n100 10 100 150\\n\",\n    \"6\\n19 64 105 168 1 3\\n\",\n    \"8\\n10 10 70 70 90 90 10 10\\n\"\n  ],\n  \"outputs\": [\n    \"0\\n\",\n    \"40\\n\",\n    \"360\\n\",\n    \"0\\n\",\n    \"280\\n\",\n    \"0\\n\",\n    \"120\\n\",\n    \"40\\n\",\n    \"20\\n\",\n    \"10\\n\",\n    \"0\\n\",\n    \"358\\n\",\n    \"40\\n\",\n    \"128\\n\",\n    \"18\\n\",\n    \"190\\n\",\n    \"202\\n\",\n    \"62\\n\",\n    \"212\\n\",\n    \"0\\n\",\n    \"92\\n\",\n    \"0\\n\",\n    \"356\\n\",\n    \"322\\n\",\n    \"296\\n\",\n    \"222\\n\",\n    \"102\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"248\\n\",\n    \"206\\n\",\n    \"190\\n\",\n    \"200\\n\",\n    \"190\\n\",\n    \"18\\n\",\n    \"0\\n\",\n    \"18\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"70\\n\",\n    \"14\\n\",\n    \"20\\n\",\n    \"6\\n\",\n    \"0\\n\",\n    \"10\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"12\\n\",\n    \"46\\n\",\n    \"4\\n\",\n    \"12\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"40\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"10\\n\",\n    \"20\\n\",\n    \"60\\n\",\n    \"20\\n\",\n    \"0\\n\",\n    \"20\\n\",\n    \"18\\n\",\n    \"20\\n\",\n    \"36\\n\",\n    \"40\\n\",\n    \"0\\n\",\n    \"20\\n\",\n    \"40\\n\",\n    \"72\\n\",\n    \"20\\n\",\n    \"26\\n\",\n    \"20\\n\",\n    \"40\\n\",\n    \"20\\n\",\n    \"20\\n\",\n    \"22\\n\",\n    \"60\\n\",\n    \"16\\n\",\n    \"0\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/895/A",
  "starter_code": ""
}