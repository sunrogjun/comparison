{
  "task_id": "APPS/519",
  "problem_id": 519,
  "prompt": "Harry Potter and He-Who-Must-Not-Be-Named engaged in a fight to the death once again. This time they are located at opposite ends of the corridor of length l. Two opponents simultaneously charge a deadly spell in the enemy. We know that the impulse of Harry's magic spell flies at a speed of p meters per second, and the impulse of You-Know-Who's magic spell flies at a speed of q meters per second.\n\nThe impulses are moving through the corridor toward each other, and at the time of the collision they turn round and fly back to those who cast them without changing their original speeds. Then, as soon as the impulse gets back to it's caster, the wizard reflects it and sends again towards the enemy, without changing the original speed of the impulse.\n\nSince Harry has perfectly mastered the basics of magic, he knows that after the second collision both impulses will disappear, and a powerful explosion will occur exactly in the place of their collision. However, the young wizard isn't good at math, so he asks you to calculate the distance from his position to the place of the second meeting of the spell impulses, provided that the opponents do not change positions during the whole fight.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer l (1 \u2264 l \u2264 1 000)\u00a0\u2014 the length of the corridor where the fight takes place.\n\nThe second line contains integer p, the third line contains integer q (1 \u2264 p, q \u2264 500)\u00a0\u2014 the speeds of magical impulses for Harry Potter and He-Who-Must-Not-Be-Named, respectively.\n\n\n-----Output-----\n\nPrint a single real number\u00a0\u2014 the distance from the end of the corridor, where Harry is located, to the place of the second meeting of the spell impulses. Your answer will be considered correct if its absolute or relative error will not exceed 10^{ - 4}. \n\nNamely: let's assume that your answer equals a, and the answer of the jury is b. The checker program will consider your answer correct if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-4}$.\n\n\n-----Examples-----\nInput\n100\n50\n50\n\nOutput\n50\n\nInput\n199\n60\n40\n\nOutput\n119.4\n\n\n\n-----Note-----\n\nIn the first sample the speeds of the impulses are equal, so both of their meetings occur exactly in the middle of the corridor.",
  "solutions": "[\"withFile = 0\\n\\nif(withFile == 1):\\n    fin     = open('input.txt', 'r')\\n    fout    = open('output.txt', 'w')\\n\\ndef getl():\\n    if(withFile == 0):\\n        return input()\\n    else:\\n        return fin.readline()\\ndef printl(s):\\n    if(withFile == 0):\\n        print(s)\\n    else:\\n        fout.write(str(s))\\ndef get_arr():\\n    x = getl().split(' ')\\n    if(x[-1] == ''):\\n        x = x[:-1]\\n    return list(map(int, x))\\n\\nl = get_arr()[0]\\nb = get_arr()[0]\\nc = get_arr()[0]\\nt = l / (1.00 * b + c)\\nprint(t*b)\\n\\n\\nif(withFile == 1):\\n    fin.close()\\n    fout.close()\", \"length = int(input())\\np = int(input())\\nq = int(input())\\nprint((length)/(p+q)*p)\\n\", \"n = int(input())\\na = int(input())\\nb = int(input())\\nt = n/(a+b)\\nprint(a*t)\\n\", \"n = int(input())\\np = int(input())\\nq = int(input())\\nprint(p*n/(p+q))\\n\\n\", \"import sys\\n\\n\\n#sys.stdin = open(\\\"input.txt\\\")\\n#sys.stdout = open(\\\"output.txt\\\", \\\"w\\\")\\n\\nl = int(input())\\np = int(input())\\nq = int(input())\\n\\nfirst_t = l / (p + q)\\nprint(p * first_t) \", \"l=int(input())\\np=int(input())\\nq=int(input())\\nprint(p*l/(p+q))\", \"l = int(input())\\np = int(input())\\nq = int(input())\\nprint(l * p / (q + p))\", \"L = int(input())\\na, b = int(input()), int(input())\\nprint(L * a / (a + b))\\n\", \"3\\n\\nl = int(input())\\np = int(input())\\nq = int(input())\\nprint (p*l/(p+q))\", \"l = int(input())\\np = int(input())\\nq = int(input())\\n\\nprint(p / (p + q) * l)\", \"#! /usr/bin/env python\\n# -*- coding: utf-8 -*-\\n# vim:fenc=utf-8\\n#\\n# Copyright \\u00a9 2015 missingdays <missingdays@missingdays>\\n#\\n# Distributed under terms of the MIT license.\\n\\na = int(input())\\nb = int(input())\\nc = int(input())\\n\\nd = b + c\\n\\nprint(a * b / d)\\n\", \"l = int(input())\\np = int(input())\\nq = int(input())\\nprint(l * p / float(p + q))\", \"n = int(input())\\np = int(input())\\nq = int(input())\\nt = n / (p + q)\\nprint(p * t)\\n\", \"l=int(input())\\np=int(input())\\nq=int(input())\\nt=l/(p+q)\\nprint(t*p)\", \"l = int( input() )\\np = int( input() )\\nq = int( input() )\\n\\nans = l * p / ( p+q )\\nprint( ans )\\n\", \"s = int(input())\\nv1 = int(input())\\nv2 = int(input())\\n\\ns1 = s*v1\\ns1 = s1 / (v1+v2)\\nprint(s1)\\n\", \"n = int(input())\\na = int(input())\\nb = int(input())\\nprint((n/(a+b))*a)\", \"l = int(input())\\np = int(input())\\nq = int(input())\\n\\nprint(l * p / (p + q))\\n\", \"l = int(input())\\np=int(input())\\nq = int(input())\\nt = l/(p+q)\\nprint(p*t)\", \"l=int(input())\\np=int(input())\\nq=int(input())\\nprint(l/(p+q)*p)\", \"l = int(input())\\np = int(input())\\nq = int(input())\\n\\n\\n\\nres = l * (p/(p+q))\\n\\nprint(res)\\n\", \"#In the name of Allah\\n\\nfrom sys import stdin, stdout\\ninput = stdin.readline\\n\\nl = int(input())\\np = int(input())\\nq = int(input())\\n\\nstdout.write(str(p * q * l / (q) / (q + p)))\\n\", \"import sys\\nfrom collections import deque\\nread = lambda: list(map(int, sys.stdin.readline().split()))\\n\\nl,= read()\\np, = read()\\nq, = read()\\nprint(l*p/(p+q))\\n\\n\", \"from math import sqrt, pow, log, log2, log10, exp\\nfrom copy import deepcopy\\nfrom fractions import gcd\\n\\n\\ndef read_ints():\\n    return list(map(int, input().split()))\\n\\n\\ndef read_int():\\n    return read_ints()[0]\\n\\n\\ndef read_floats():\\n    return list(map(float, input().split()))\\n\\n\\ndef read_float():\\n    return read_floats()[0]\\n\\n\\ndef format_list(l):\\n    return ' '.join(list(map(str, l)))\\n\\n\\ndef one_dim_array(n, value=0):\\n    return [deepcopy(value) for x in range(n)]\\n\\n\\ndef two_dim_array(n, m, value=0):\\n    return [[deepcopy(value) for x in range(m)] for x in range(n)]\\n\\n\\ndef is_prime(n):\\n    if n == 2:\\n        return True\\n    if n % 2 == 0:\\n        return False\\n    for i in range(3, sqrt(n) + 1):\\n        if n % i == 0:\\n            return False\\n    return True\\n\\n\\ndef max_len_sublist(l, f):\\n    start, max_length, length = 0, 0, 0\\n    for i in range(1, len(l)):\\n        if f(l[i], l[i - 1]):\\n            length += 1\\n        else:\\n            if max_length < length:\\n                start = i - length\\n                max_length = length\\n            length = 0\\n    return start, max_length\\n\\n\\ndef tf_to_yn(b):\\n    return 'YES' if b else 'NO'\\n\\n\\ndef longest_non_descent_subsequence(s, restore_sequence=False):\\n    d = one_dim_array(len(s), 0)\\n    for i in range(len(s)):\\n        possible = [d[j] + 1 if s[j] <= s[i] else 1 for j in range(i)]\\n        d[i] = 1 if len(possible) == 0 else max(possible)\\n\\n    if not restore_sequence:\\n        return d[-1] if len(d) != 0 else 0\\n\\n\\nl = read_int()\\np = read_int()\\nq = read_int()\\nt = l / (p + q)\\nprint(t*p)\\n\", \"#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\nl = int(input())\\np = int(input())\\nq = int(input())\\nprint(\\\"{0:.9f}\\\".format(l * p / (p + q)))\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"100\\n50\\n50\\n\",\n    \"199\\n60\\n40\\n\",\n    \"1\\n1\\n1\\n\",\n    \"1\\n1\\n500\\n\",\n    \"1\\n500\\n1\\n\",\n    \"1\\n500\\n500\\n\",\n    \"1000\\n1\\n1\\n\",\n    \"1000\\n1\\n500\\n\",\n    \"1000\\n500\\n1\\n\",\n    \"1000\\n500\\n500\\n\",\n    \"101\\n11\\n22\\n\",\n    \"987\\n1\\n3\\n\",\n    \"258\\n25\\n431\\n\",\n    \"979\\n39\\n60\\n\",\n    \"538\\n479\\n416\\n\",\n    \"583\\n112\\n248\\n\",\n    \"978\\n467\\n371\\n\",\n    \"980\\n322\\n193\\n\",\n    \"871\\n401\\n17\\n\",\n    \"349\\n478\\n378\\n\",\n    \"425\\n458\\n118\\n\",\n    \"919\\n323\\n458\\n\",\n    \"188\\n59\\n126\\n\",\n    \"644\\n428\\n484\\n\",\n    \"253\\n80\\n276\\n\",\n    \"745\\n152\\n417\\n\",\n    \"600\\n221\\n279\\n\",\n    \"690\\n499\\n430\\n\",\n    \"105\\n68\\n403\\n\",\n    \"762\\n462\\n371\\n\",\n    \"903\\n460\\n362\\n\",\n    \"886\\n235\\n95\\n\",\n    \"655\\n203\\n18\\n\",\n    \"718\\n29\\n375\\n\",\n    \"296\\n467\\n377\\n\",\n    \"539\\n61\\n56\\n\",\n    \"133\\n53\\n124\\n\",\n    \"998\\n224\\n65\\n\",\n    \"961\\n173\\n47\\n\",\n    \"285\\n468\\n62\\n\",\n    \"496\\n326\\n429\\n\",\n    \"627\\n150\\n285\\n\",\n    \"961\\n443\\n50\\n\",\n    \"623\\n422\\n217\\n\",\n    \"678\\n295\\n29\\n\"\n  ],\n  \"outputs\": [\n    \"50\\n\",\n    \"119.4\\n\",\n    \"0.5\\n\",\n    \"0.001996007984\\n\",\n    \"0.998003992\\n\",\n    \"0.5\\n\",\n    \"500\\n\",\n    \"1.996007984\\n\",\n    \"998.003992\\n\",\n    \"500\\n\",\n    \"33.66666667\\n\",\n    \"246.75\\n\",\n    \"14.14473684\\n\",\n    \"385.6666667\\n\",\n    \"287.9351955\\n\",\n    \"181.3777778\\n\",\n    \"545.0190931\\n\",\n    \"612.7378641\\n\",\n    \"835.576555\\n\",\n    \"194.885514\\n\",\n    \"337.9340278\\n\",\n    \"380.0729834\\n\",\n    \"59.95675676\\n\",\n    \"302.2280702\\n\",\n    \"56.85393258\\n\",\n    \"199.0158172\\n\",\n    \"265.2\\n\",\n    \"370.6243272\\n\",\n    \"15.15923567\\n\",\n    \"422.6218487\\n\",\n    \"505.3284672\\n\",\n    \"630.9393939\\n\",\n    \"601.6515837\\n\",\n    \"51.53960396\\n\",\n    \"163.7819905\\n\",\n    \"281.017094\\n\",\n    \"39.82485876\\n\",\n    \"773.5363322\\n\",\n    \"755.6954545\\n\",\n    \"251.6603774\\n\",\n    \"214.1668874\\n\",\n    \"216.2068966\\n\",\n    \"863.535497\\n\",\n    \"411.4334898\\n\",\n    \"617.3148148\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/591/A",
  "starter_code": ""
}