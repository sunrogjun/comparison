{
  "task_id": "APPS/461",
  "problem_id": 461,
  "prompt": "Winnie-the-Pooh likes honey very much! That is why he decided to visit his friends. Winnie has got three best friends: Rabbit, Owl and Eeyore, each of them lives in his own house. There are winding paths between each pair of houses. The length of a path between Rabbit's and Owl's houses is a meters, between Rabbit's and Eeyore's house is b meters, between Owl's and Eeyore's house is c meters.\n\nFor enjoying his life and singing merry songs Winnie-the-Pooh should have a meal n times a day. Now he is in the Rabbit's house and has a meal for the first time. Each time when in the friend's house where Winnie is now the supply of honey is about to end, Winnie leaves that house. If Winnie has not had a meal the required amount of times, he comes out from the house and goes to someone else of his two friends. For this he chooses one of two adjacent paths, arrives to the house on the other end and visits his friend. You may assume that when Winnie is eating in one of his friend's house, the supply of honey in other friend's houses recover (most probably, they go to the supply store).\n\nWinnie-the-Pooh does not like physical activity. He wants to have a meal n times, traveling minimum possible distance. Help him to find this distance.\n\n\n-----Input-----\n\nFirst line contains an integer n (1 \u2264 n \u2264 100)\u00a0\u2014 number of visits.\n\nSecond line contains an integer a (1 \u2264 a \u2264 100)\u00a0\u2014 distance between Rabbit's and Owl's houses.\n\nThird line contains an integer b (1 \u2264 b \u2264 100)\u00a0\u2014 distance between Rabbit's and Eeyore's houses.\n\nFourth line contains an integer c (1 \u2264 c \u2264 100)\u00a0\u2014 distance between Owl's and Eeyore's houses.\n\n\n-----Output-----\n\nOutput one number\u00a0\u2014 minimum distance in meters Winnie must go through to have a meal n times.\n\n\n-----Examples-----\nInput\n3\n2\n3\n1\n\nOutput\n3\n\nInput\n1\n2\n3\n5\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first test case the optimal path for Winnie is the following: first have a meal in Rabbit's house, then in Owl's house, then in Eeyore's house. Thus he will pass the distance 2 + 1 = 3.\n\nIn the second test case Winnie has a meal in Rabbit's house and that is for him. So he doesn't have to walk anywhere at all.",
  "solutions": "[\"'''input\\n1\\n2\\n3\\n5\\n'''\\nn = int(input())\\na = int(input())\\nb = int(input())\\nc = int(input())\\ncur = 0\\npos = 0\\nfor i in range(n-1):\\n    if pos == 0:\\n        if a < b:\\n            pos = 1\\n            cur += a\\n        else:\\n            pos = 2\\n            cur += b \\n    elif pos == 1:\\n        if a < c: \\n            pos = 1\\n            cur += a\\n        else:\\n            pos = 3\\n            cur += c\\n    else:\\n        if b < c: \\n            pos = 2\\n            cur += b\\n        else:\\n            pos = 3\\n            cur += c                     \\nprint(cur)            \", \"n = int(input())\\na = int(input())\\nb = int(input())\\nc = int(input())\\n\\nif n == 1:\\n    print(0)\\nelse:\\n    print(min([a*(n-1), b*(n-1), c*(n-2)+a, c*(n-2)+b]))\", \"n=int(input())\\na=int(input())\\nb=int(input())\\nc=int(input())\\nif a==min(a,b,c):\\n    print(a*(n-1))\\nelif b==min(a,b,c):\\n    print(b*(n-1))\\nelse:\\n    if n==1:\\n        print(0)\\n    elif n==2:\\n        print(min(a,b))\\n    else:\\n        print(min(a,b)+(n-2)*c)\\n\", \"n, a, b, c = [int(input()) for i in range(4)]\\nif n == 1:\\n    print(0);\\nelse:\\n    print(min(a * (n - 1), b * (n - 1), min(a, b) + c * (n - 2)))\", \"n = int(input()) - 1\\na = int(input())\\nb = int(input())\\nc = int(input())\\nresult = 0\\ncur = 'k'\\nwhile n > 0:\\n    if cur == 'k':\\n        if a < b:\\n            cur = 's'\\n            result += a\\n        else:\\n            cur = 'i'\\n            result += b\\n    elif cur == 's':\\n        if a < c:\\n            cur = 'k'\\n            result += a\\n        else:\\n            cur = 'i'\\n            result += c\\n    else:\\n        if b < c:\\n            cur = 'k'\\n            result += b\\n        else:\\n            cur = 's'\\n            result += c\\n    n -= 1\\nprint(result)\\n\", \"n=int(input())\\na=int(input())\\nb=int(input())\\nc=int(input())\\nx=0\\nif n>1:\\n    x=min(a,b)\\n    if n>2:\\n        x+=min(x,c)*(n-2)\\nprint(x)\\n\", \"n = int(input())\\na = int(input())\\nb = int(input())\\nc = int(input())\\n\\nhouse = 'rab'\\nanswer = 0\\n\\nfor i in range(n - 1):\\n    if house == 'rab':\\n        if a < b:\\n            house = 'owl'\\n            answer += a\\n        else:\\n            house = 'eey'\\n            answer += b\\n    elif house == 'owl':\\n        if a < c:\\n            house = 'rab'\\n            answer += a\\n        else:\\n            house = 'eey'\\n            answer += c\\n    else:\\n        if b < c:\\n            house = 'rab'\\n            answer += b\\n        else:\\n            house = 'owl'\\n            answer += c\\n\\nprint(answer)\\n\", \"import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\\n\\nsys.setrecursionlimit(10**7)\\ninf = 10**20\\neps = 1.0 / 10**15\\nmod = 10**9+7\\n\\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\\ndef LS(): return sys.stdin.readline().split()\\ndef I(): return int(sys.stdin.readline())\\ndef F(): return float(sys.stdin.readline())\\ndef S(): return input()\\ndef pf(s): return print(s, flush=True)\\n\\n\\ndef main():\\n    n = I()\\n    a = [I() for _ in range(3)]\\n    r = 0\\n    if n == 1:\\n        return 0\\n    r += min(a[0],a[1])\\n    if n > 1:\\n        r += min(a) * (n-2)\\n\\n    return r\\n\\n\\nprint(main())\\n\\n\\n\", \"n = int(input())\\na = int(input())\\nb = int(input())\\nc = int(input())\\nans = 0\\nt = 0\\nn-=1\\nif n == 0:\\n    print(0)\\n    return\\nif c < a and c < b:\\n    ans = min(a, b) + (n-1)*c\\nelse:\\n    ans = min(a, b)*(n)\\nprint(ans)\", \"n = int(input())\\na = int(input())\\nb = int(input())\\nc = int(input())\\nif n == 1:\\n    print(0)\\nelse:\\n    ans = min(a, b)\\n    n -= 2\\n    if a <= b:\\n        ans = ans + n * min(a, c)\\n    else:\\n        ans = ans + n * min(b, c)\\n    print(ans)\\n    \\n\\n\", \"n=int(input())\\na=int(input())\\nb=int(input())\\nc=int(input())\\n\\nif n==1:\\n\\tprint(0)\\n\\treturn\\n\\nx=min(a,b,c)\\nif x in [a,b]:\\n\\tprint((n-1)*x)\\nelse:\\n\\tprint(min(a,b)+(n-2)*c)\\n\", \"n = int(input()) - 1\\na = int(input())\\nb = int(input())\\nc = int(input())\\nif n == 0:\\n    print(0)\\nelse:\\n    minimum = min(a, b, c)\\n    print((n-1)*minimum + min(a, b))\\n\", \"read = lambda: tuple(map(int, input().split()))\\nn, a, b, c = read()[0], read()[0], read()[0], read()[0]\\nn -= 1\\nif n == 0:\\n    print(0)\\nelif n == 1:\\n    print(min(a, b))\\nelse:\\n    print(min(a + c * (n - 1), b + c * (n - 1), b * n, a * n))\\n\", \"n=int(input())\\na = int(input())\\nb = int(input())\\nc = int(input())\\n\\nn-=1\\nt = 0\\nif n>0:\\n\\tt+=min([a,b])\\n\\tn-=1\\nt+=min([a,b,c])*n\\nprint(t)\", \"n=int(input())\\na=int(input())\\nb=int(input())\\nc=int(input())\\nif(n==1):\\n  print(0)\\nelse:\\n  dist=[a,b,c]\\n  dist.sort()\\n  min1=dist[0]\\n  min2=dist[1]\\n  min3=dist[2]\\n  if(min1==a or min1==b):\\n    print((n-1)*min1)\\n  else:\\n    print(min2+((n-2)*min1))\", \"n = int(input())\\na = int(input())\\nb = int(input())\\nc = int(input())\\n\\ndist = 0\\ncurr = 'r'\\nwhile n > 1:\\n  n -= 1\\n  if curr == 'e':\\n    if b < c:\\n      curr = 'r'\\n      dist += b\\n    else:\\n      curr = 'o'\\n      dist += c\\n  elif curr == 'o':\\n    if a < c:\\n      curr = 'r'\\n      dist += a\\n    else:\\n      curr = 'e'\\n      dist += c\\n  else:\\n    if a < b:\\n      curr = 'o'\\n      dist += a\\n    else:\\n      curr = 'e'\\n      dist += b\\nprint(dist)\", \"n = int(input())\\na = int(input())\\nb = int(input())\\nc = int(input())\\n\\nans = 0\\n\\nif n == 1:\\n\\tpass\\nelif n == 2:\\n\\tans += min(a, b)\\nelse:\\n\\tif c < a and c < b:\\n\\t\\tans += min(a, b) + (n - 2) * c\\n\\telse:\\n\\t\\tans += (n - 1) * min(a, b)\\n\\nprint(ans)\", \"n=int(input())\\na=int(input())\\nb=int(input())\\nc=int(input())\\nif n==1:\\n    print(0)\\nelse:\\n    mi=min(a,b,c)\\n    if mi==a:\\n        dist=a*(n-1)\\n    elif mi==b:\\n        dist=b*(n-1)\\n    elif mi==c:\\n        ma=min(a,b)\\n        if ma==a:\\n            dist=a\\n        else:\\n            dist=b\\n        dist=dist+c*(n-2)\\n    print(dist)\\n        \\n\", \"n = int(input())\\na = int(input())\\nb = int(input())\\nc = int(input())\\n\\ncount = 1\\nlength = 0\\n\\nx = 1\\n\\nwhile count < n:\\n    count += 1\\n    if x == 1:\\n        if a < b:\\n            x = 2\\n            length += a\\n        else:\\n            x = 3\\n            length += b\\n    elif x == 2:\\n        if a < c:\\n            x = 1\\n            length += a\\n        else:\\n            x = 3\\n            length += c\\n    else:\\n        if b < c:\\n            x = 1\\n            length += b\\n        else:\\n            x = 2\\n            length += c\\nprint(length)\", \"def __starting_point():\\n    N = int(input())\\n    A = int(input())\\n    B = int(input())\\n    C = int(input())\\n    cnt = 0\\n    result = 1145141919\\n    res1 = A * (N - 1)\\n    res2 = B * (N - 1)\\n    if (N >= 2):\\n        res3 = min(A, B) + C * (N - 2)\\n        result = min(result, res3)\\n    result = min(result, res1, res2)\\n    print (result)\\n\\n__starting_point()\", \"n = int(input()) - 1\\na = int(input())\\nb = int(input())\\nc = int(input())\\nprint(max(min(n * a, n * b, (n - 1) * c + min(a, b)), 0))\\n\", \"import copy\\n\\ndef solve():\\n    \\n    n, a, b, c = [int(input()) for i in range(4)]\\n\\n    nowloc = 'ab'\\n    mealed = 1\\n    totaldistance = 0\\n    history = ['ab']\\n\\n    while mealed < n:\\n        \\n        if nowloc == 'ab':\\n            if a < b:\\n                nowloc = 'ac'\\n                totaldistance += a\\n            else:\\n                nowloc = 'bc'\\n                totaldistance += b\\n\\n        elif nowloc == 'bc':\\n            if b < c:\\n                nowloc = 'ab'\\n                totaldistance += b\\n            else:\\n                nowloc = 'ac'\\n                totaldistance += c\\n\\n        elif nowloc == 'ac':\\n            if a < c:\\n                nowloc = 'ab'\\n                totaldistance += a\\n            else:\\n                nowloc = 'bc'\\n                totaldistance += c\\n\\n        history.append(copy.deepcopy(nowloc))\\n        mealed += 1\\n\\n    return totaldistance, history\\n\\nprint(solve()[0])\\n\", \"n = int(input())\\na = int(input())\\nb = int(input())\\nc = int(input())\\nif n == 1:\\n    print(0)\\nelif c == min(a, b, c):\\n    print(min(a, b) + (n-2)*c)\\nelse:\\n    print((n-1) * min(a, b))\\n    \\n\\n\", \"#python3\\n#utf-8\\n\\nvisits_nr = int(input())\\nro_dist = int(input())\\nrd_dist = int(input())\\nod_dist = int(input())\\n# pref_end_r___min_dist\\n# pref_end_o___min_dist\\n# pref_end_d___min_dist\\npref_end_r___min_dist = [0] * visits_nr\\npref_end_o___min_dist = [10**9] * visits_nr\\npref_end_d___min_dist = [10**9] * visits_nr\\nfor visit in range(1, visits_nr):\\n    pref_end_r___min_dist[visit] = min(pref_end_o___min_dist[visit - 1] + ro_dist, pref_end_d___min_dist[visit - 1] + rd_dist)\\n    pref_end_o___min_dist[visit] = min(pref_end_r___min_dist[visit - 1] + ro_dist, pref_end_d___min_dist[visit - 1] + od_dist)\\n    pref_end_d___min_dist[visit] = min(pref_end_o___min_dist[visit - 1] + od_dist, pref_end_r___min_dist[visit - 1] + rd_dist)\\nans = min((pref_end_d___min_dist[-1], pref_end_o___min_dist[-1], pref_end_r___min_dist[-1]))\\nprint(ans)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3\\n2\\n3\\n1\\n\",\n    \"1\\n2\\n3\\n5\\n\",\n    \"10\\n1\\n8\\n3\\n\",\n    \"7\\n10\\n5\\n6\\n\",\n    \"9\\n9\\n7\\n5\\n\",\n    \"9\\n37\\n85\\n76\\n\",\n    \"76\\n46\\n77\\n11\\n\",\n    \"80\\n42\\n1\\n37\\n\",\n    \"8\\n80\\n55\\n1\\n\",\n    \"10\\n13\\n72\\n17\\n\",\n    \"9\\n24\\n1\\n63\\n\",\n    \"65\\n5\\n8\\n7\\n\",\n    \"56\\n8\\n9\\n3\\n\",\n    \"59\\n8\\n1\\n2\\n\",\n    \"75\\n50\\n50\\n5\\n\",\n    \"75\\n54\\n76\\n66\\n\",\n    \"73\\n71\\n69\\n66\\n\",\n    \"83\\n58\\n88\\n16\\n\",\n    \"74\\n31\\n11\\n79\\n\",\n    \"62\\n27\\n16\\n72\\n\",\n    \"72\\n95\\n27\\n9\\n\",\n    \"1\\n2\\n2\\n1\\n\",\n    \"1\\n1\\n1\\n1\\n\",\n    \"1\\n1\\n1\\n99\\n\",\n    \"100\\n100\\n100\\n100\\n\",\n    \"2\\n1\\n1\\n3\\n\",\n    \"1\\n3\\n2\\n1\\n\",\n    \"1\\n5\\n6\\n1\\n\",\n    \"1\\n2\\n6\\n1\\n\",\n    \"1\\n30\\n20\\n1\\n\",\n    \"1\\n15\\n13\\n11\\n\",\n    \"1\\n100\\n50\\n1\\n\",\n    \"1\\n2\\n3\\n1\\n\",\n    \"5\\n5\\n5\\n5\\n\",\n    \"1\\n100\\n50\\n5\\n\",\n    \"1\\n5\\n7\\n3\\n\",\n    \"1\\n3\\n4\\n2\\n\",\n    \"3\\n3\\n3\\n3\\n\",\n    \"1\\n99\\n98\\n1\\n\",\n    \"5\\n3\\n3\\n1\\n\",\n    \"2\\n1\\n1\\n1\\n\",\n    \"2\\n1\\n7\\n8\\n\",\n    \"2\\n2\\n2\\n1\\n\",\n    \"2\\n2\\n3\\n1\\n\",\n    \"1\\n5\\n6\\n2\\n\",\n    \"100\\n1\\n1\\n100\\n\",\n    \"2\\n3\\n2\\n1\\n\",\n    \"1\\n99\\n98\\n97\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"0\\n\",\n    \"9\\n\",\n    \"30\\n\",\n    \"42\\n\",\n    \"296\\n\",\n    \"860\\n\",\n    \"79\\n\",\n    \"61\\n\",\n    \"117\\n\",\n    \"8\\n\",\n    \"320\\n\",\n    \"170\\n\",\n    \"58\\n\",\n    \"415\\n\",\n    \"3996\\n\",\n    \"4755\\n\",\n    \"1354\\n\",\n    \"803\\n\",\n    \"976\\n\",\n    \"657\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"9900\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"20\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"6\\n\",\n    \"0\\n\",\n    \"6\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"99\\n\",\n    \"2\\n\",\n    \"0\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/876/A",
  "starter_code": ""
}