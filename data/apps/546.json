{
  "task_id": "APPS/546",
  "problem_id": 546,
  "prompt": "It's hard times now. Today Petya needs to score 100 points on Informatics exam. The tasks seem easy to Petya, but he thinks he lacks time to finish them all, so he asks you to help with one..\n\nThere is a glob pattern in the statements (a string consisting of lowercase English letters, characters \"?\" and \"*\"). It is known that character \"*\" occurs no more than once in the pattern.\n\nAlso, n query strings are given, it is required to determine for each of them if the pattern matches it or not.\n\nEverything seemed easy to Petya, but then he discovered that the special pattern characters differ from their usual meaning.\n\nA pattern matches a string if it is possible to replace each character \"?\" with one good lowercase English letter, and the character \"*\" (if there is one) with any, including empty, string of bad lowercase English letters, so that the resulting string is the same as the given string.\n\nThe good letters are given to Petya. All the others are bad.\n\n\n-----Input-----\n\nThe first line contains a string with length from 1 to 26 consisting of distinct lowercase English letters. These letters are good letters, all the others are bad.\n\nThe second line contains the pattern\u00a0\u2014 a string s of lowercase English letters, characters \"?\" and \"*\" (1 \u2264 |s| \u2264 10^5). It is guaranteed that character \"*\" occurs in s no more than once.\n\nThe third line contains integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014 the number of query strings.\n\nn lines follow, each of them contains single non-empty string consisting of lowercase English letters\u00a0\u2014 a query string.\n\nIt is guaranteed that the total length of all query strings is not greater than 10^5.\n\n\n-----Output-----\n\nPrint n lines: in the i-th of them print \"YES\" if the pattern matches the i-th query string, and \"NO\" otherwise.\n\nYou can choose the case (lower or upper) for each letter arbitrary.\n\n\n-----Examples-----\nInput\nab\na?a\n2\naaa\naab\n\nOutput\nYES\nNO\n\nInput\nabc\na?a?a*\n4\nabacaba\nabaca\napapa\naaaaax\n\nOutput\nNO\nYES\nNO\nYES\n\n\n\n-----Note-----\n\nIn the first example we can replace \"?\" with good letters \"a\" and \"b\", so we can see that the answer for the first query is \"YES\", and the answer for the second query is \"NO\", because we can't match the third letter.\n\nExplanation of the second example.   The first query: \"NO\", because character \"*\" can be replaced with a string of bad letters only, but the only way to match the query string is to replace it with the string \"ba\", in which both letters are good.  The second query: \"YES\", because characters \"?\" can be replaced with corresponding good letters, and character \"*\" can be replaced with empty string, and the strings will coincide.  The third query: \"NO\", because characters \"?\" can't be replaced with bad letters.  The fourth query: \"YES\", because characters \"?\" can be replaced with good letters \"a\", and character \"*\" can be replaced with a string of bad letters \"x\".",
  "solutions": "[\"g = set(input())\\ns = input()\\nn = int(input())\\na = s.find(\\\"*\\\")\\nfor _ in range(n):\\n    temp = input()\\n    if a == -1:\\n        if len(temp) != len(s):\\n            print(\\\"NO\\\")\\n        else:\\n            for i in range(len(s)):\\n                if s[i] == '?':\\n                    if temp[i] not in g:\\n                        print(\\\"NO\\\")\\n                        break\\n                elif s[i] != temp[i]:\\n                    print(\\\"NO\\\")\\n                    break\\n            else:\\n                print(\\\"YES\\\")\\n    else:\\n        if len(temp) < len(s)-1:\\n            print(\\\"NO\\\")\\n        else:\\n            for i in range(a):\\n                if s[i] == '?':\\n                    if temp[i] not in g:\\n                        print(\\\"NO\\\")\\n                        break\\n                elif s[i] != temp[i]:\\n                    print(\\\"NO\\\")\\n                    break\\n            else:\\n                for i in range(-(len(s) - a-1), 0):\\n                    if s[i] == '?':\\n                        if temp[i] not in g:\\n                            print(\\\"NO\\\")\\n                            break\\n                    elif s[i] != temp[i]:\\n                        print(\\\"NO\\\")\\n                        break\\n                else:\\n                    for i in range(a, len(temp)-(len(s) - a-1)):\\n                        if temp[i] in g:\\n                            print(\\\"NO\\\")\\n                            break\\n                    else:\\n                        print(\\\"YES\\\")\", \"good = set(input().strip())\\npattern = input().strip()\\nn = int(input())\\n\\nminlen = len(pattern)\\n\\nis_star = '*' in pattern\\n\\nif is_star:\\n    minlen -= 1\\n    maxlen = 1000000000\\n    leftlen = pattern.find('*')\\n    rightlen = len(pattern) - leftlen - 1\\nelse:\\n    maxlen = minlen\\n\\ndef check_simple_pattern(task, pattern):\\n    #print(task +\\\" -> \\\" + pattern)\\n    for i in range(len(task)):\\n        if pattern[i] != task[i] and not (pattern[i] == '?' and task[i] in good):\\n            return False\\n    return True\\n\\ndef check(task):\\n    if len(task) < minlen or len(task) > maxlen:\\n        return False\\n    if is_star:\\n        if rightlen == 0:\\n            cond = all([i not in good for i in task[leftlen:]])\\n        else:\\n            cond = all([i not in good for i in task[leftlen:-rightlen]])\\n        return check_simple_pattern(task[:leftlen], pattern[:leftlen]) \\\\\\n                and (rightlen == 0 or check_simple_pattern(task[-rightlen:], pattern[-rightlen:])) \\\\\\n                and cond\\n    else:\\n        return check_simple_pattern(task, pattern)\\n\\nfor i in range(n):\\n    task = input().strip()\\n    if check(task):\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\", \"def m(good, pat, s):\\n  if len(pat) != len(s):\\n    return False\\n  else:\\n    for u, v in zip(pat, s):\\n      if u == \\\"?\\\": \\n        if v not in good:\\n          return False\\n      elif u != v:\\n        return False\\n    return True      \\n    \\ndef mm(good, p, l0, l1, s):\\n  if l0 + l1 > len(s):\\n    return False\\n  if l0 and not m(good, p[0], s[:l0]):\\n    return False\\n  if l1 and not m(good, p[1], s[-l1:]):\\n    return False\\n  if l1:\\n    ss = s[l0:-l1]    \\n  else:\\n    ss = s[l0:]    \\n  return not good.intersection(ss)\\n\\ngood = set(input().strip())\\npat = input().strip()    \\np = pat.split(\\\"*\\\")\\nf = len(p) > 1\\nif f:\\n  l0 = len(p[0])\\n  l1 = len(p[1])    \\n\\nn = int(input())\\nfor _ in range(n):\\n  s = input().strip()\\n  r = mm(good, p, l0, l1, s) if f else m(good, pat, s)\\n  print(\\\"YES\\\" if r else \\\"NO\\\")\\n\\n     \\n\", \"def compare(a,b):\\n\\tnonlocal good,replacements\\n\\tif(a==b):\\n\\t\\treturn 1\\n\\telif(b=='?' and (a in good)):\\n\\t\\treturn 1\\n\\telif(b=='*' and (a not in good)):\\n\\t\\tif(replacements<0):\\n\\t\\t\\treturn 0\\n\\t\\telse:\\n\\t\\t\\treturn replacements+10\\n\\telif(b=='*' and (a in good)):\\n\\t\\treturn 2\\n\\telse:\\n\\t\\treturn 0\\n\\ng = input()\\ngood={}\\nfor val in g:\\n\\tgood[val]=1\\npatt = input()\\nn=int(input())\\nfor i in range(n):\\n\\tq=input()\\n\\treplacements = len(q)-len(patt)+1\\n\\tit=0\\n\\tc=0\\n\\twhile(c<len(q) and it<len(patt)):\\n\\t\\tresult=compare(q[c],patt[it])\\n\\t\\tif(result==2):\\n\\t\\t\\tit+=1\\n\\t\\telif(result==1):\\n\\t\\t\\tit+=1\\n\\t\\t\\tc+=1\\n\\t\\telif(result>9):\\n\\t\\t\\tif(replacements==0):\\n\\t\\t\\t\\tit+=1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tc+=1\\n\\t\\t\\t\\treplacements-=1\\n\\t\\telse:\\n\\t\\t\\tbreak\\n\\tif(it<len(patt)):\\n\\t\\tif(patt[it]=='*'):\\n\\t\\t\\tit+=1\\n\\tif(c==len(q) and it==len(patt)):\\n\\t\\tprint(\\\"YES\\\")\\n\\telse:\\n\\t\\tprint(\\\"NO\\\")\\n\", \"# IAWT\\ngoods = input()\\n\\nptrn = input()\\nn = int(input())\\nqs = [input() for i in range(n)]\\n\\ndata = [False for i in range(26)]\\n\\nfor i in range(len(goods)):\\n    data[ord(goods[i])-97] = True\\n\\nstar_in = '*' in ptrn\\nif star_in:\\n    sind = ptrn.index('*')\\n\\ntheL = len(ptrn)\\n\\ndef f(q):\\n    if not star_in:\\n        if len(q) != theL:\\n            return False\\n        for i in range(theL):\\n            if ptrn[i] != '?': # So should be exactly equal\\n                if ptrn[i] != q[i]:\\n                    return False\\n            elif not data[ord(q[i])-97]:\\n                return False\\n        return True\\n    if len(q) < theL-1:\\n        return False\\n    for i in range(sind):\\n        if ptrn[i] == '?':\\n            if(not data[ord(q[i])-97]):\\n                return False\\n        elif ptrn[i] != q[i]:\\n            return False\\n    j = len(q) - 1\\n    for i in range(theL-1, sind, -1):\\n        if ptrn[i] == '?':\\n            if (not data[ord(q[j])-97]):\\n                return False\\n        elif ptrn[i] != q[j]:\\n            return False\\n        j -= 1\\n    for i in range(sind, j+1):\\n        if data[ord(q[i])-97]:\\n            return False\\n    return True\\n\\nfor i in range(n):\\n    if f(qs[i]):\\n        print('YES')\\n    else:\\n        print('NO')\\n\", \"import string\\n\\ndef single_check(p, a):\\n    if not p:\\n        return 1\\n    if len(a) != len(p):\\n        return 0\\n    else:\\n        for i in range(len(a)):\\n            if (p[i] != a[i] and p[i] != '?') or (p[i] == '?' and a[i] not in good):\\n                break\\n        else:\\n            return 1\\n        return 0\\n\\n\\ngood = input()\\nbad = set(string.ascii_lowercase) - set(good)\\npattern = input()\\nn = int(input())\\npatspl = pattern.split('*')\\nfor _ in range(n):\\n    a = input()\\n    if len(patspl) == 1:\\n        print('YES' if single_check(pattern, a) else 'NO')\\n    else:\\n        if len(a) < len(pattern) - 1:\\n            print('NO')\\n        else:\\n            if single_check(patspl[0], a[:len(patspl[0])]) and single_check(patspl[1], a[-len(patspl[1]):]):\\n                for c in a[len(patspl[0]):(-len(patspl[1]) or len(a))]:\\n                    if c not in bad:\\n                        print('NO')\\n                        break\\n                else:\\n                    print('YES')\\n            else:\\n                print('NO')\\n\\n\\n\", \"good = input()\\nmask = input()\\nflag = 0\\nif '*' in mask:\\n    flag = 1\\n\\n\\ndef check(a, b):\\n    if a == b:\\n        return 1;\\n    if a == '?':\\n        for i in range(len(good)):\\n            if good[i] == b:\\n                return 1\\n    return 0\\n\\n\\nn = int(input())\\nfor i in range(n):\\n    s = input()\\n    accept = 1\\n    if not flag:\\n        if len(s) != len(mask):\\n            print('NO')\\n            continue\\n        for j in range(len(s)):\\n            if not check(mask[j], s[j]):\\n                accept = 0\\n        if not accept:\\n            print(\\\"NO\\\")\\n        else:\\n            print(\\\"YES\\\")\\n    else:\\n        if len(mask) - 1 > len(s):\\n            print(\\\"NO\\\")\\n            continue\\n        for j in range(len(mask)):\\n            if mask[j] != '*':\\n                if not check(mask[j], s[j]):\\n                    accept = 0\\n                    break\\n            else:\\n                l = j\\n                break\\n        for j in range(len(s)):\\n            ind = len(mask) - 1 - j\\n            cur = len(s) - 1 - j\\n            if mask[ind] != '*':\\n                if not check(mask[ind], s[cur]):\\n                    accept = 0\\n                    break\\n            else:\\n                r = cur\\n                break\\n        if not accept:\\n            print('NO')\\n            continue\\n        if (len(s) + 1 == len(mask)):\\n            print('YES')\\n            continue\\n        for j in range(l, r + 1):\\n            for k in range(len(good)):\\n                if (good[k] == s[j]):\\n                    accept = 0\\n        if not accept:\\n            print('NO')\\n        else:\\n            print('YES')\", \"#!/usr/local/bin/python3\\n\\nimport sys\\n\\ngood_letters = set(input())\\npattern = input()\\n\\ninput()\\n\\nfor line in sys.stdin:\\n    query = line.strip()\\n\\n    diff = len(query) - len(pattern) + 1\\n\\n    if diff < 0:\\n        print(\\\"NO\\\")\\n        continue\\n\\n    query_index = 0\\n    pattern_index = 0\\n    question = None\\n\\n    result = \\\"NO\\\"\\n\\n    while (pattern_index < len(pattern)) and (query_index < len(query)):\\n\\n        current_letter = query[query_index]\\n        current_pattern = pattern[pattern_index]\\n\\n        if current_pattern == '*':\\n            if diff == 0:\\n                pattern_index += 1\\n            else:\\n                if current_letter in good_letters:\\n                    break\\n                else:\\n                    query_index += 1\\n                    diff -= 1\\n        elif current_pattern == '?':\\n            if current_letter in good_letters:\\n                    query_index += 1\\n                    pattern_index += 1\\n            else:\\n                break\\n        else:\\n            if current_letter != current_pattern:\\n                break\\n            else:\\n                query_index += 1\\n                pattern_index += 1\\n    \\n    if (query_index == len(query)) and (pattern_index == len(pattern) - 1) and (pattern[pattern_index] == '*'):\\n        result = \\\"YES\\\"\\n\\n    if (query_index == len(query)) and (pattern_index == len(pattern)):\\n        result = \\\"YES\\\"\\n\\n    print(result)\\n\", \"good = input()\\npat = input()\\nn = int(input())\\nfor i in range(n):\\n    s = input()\\n    q = True\\n    sc = 0\\n    x = 0\\n    while x < len(pat) and sc < len(s):\\n        if pat[x] == '*':\\n            dif = len(s)-len(pat)+1\\n            cont = False\\n            sc -= 1\\n            for j in range(dif):\\n                sc += 1\\n                if s[sc] in good:\\n                    cont = True\\n                    break\\n            if cont:\\n                q = False\\n                print(\\\"NO\\\")\\n                break\\n        elif s[sc] != pat[x]:\\n            if pat[x] != '?' or s[sc] not in good:\\n                q = False\\n                print(\\\"NO\\\")\\n                break\\n        x += 1\\n        sc += 1\\n    if x < len(pat):\\n        if pat[x] == '*':\\n            x += 1\\n    if q:\\n        if x < len(pat) or sc < len(s):\\n            q = False\\n            print(\\\"NO\\\")\\n    if q:\\n        print(\\\"YES\\\")\\n\", \"s = input()\\ngood = {}\\nfor i in 'abcdefghijklmnopqrstuvwxyz':\\n    good[i] = 0\\nfor i in s:\\n    good[i] = 1\\ns = input()\\ntmp = s\\nn = int(input())\\nfor i in range(n):\\n    q = input()\\n    while (s[0] == q[0] or (s[0] == '?' and good[q[0]] == 1)):\\n        s = s[1:]\\n        q = q[1:]\\n        if (s == '' or q == '') : break\\n    if (s != '' and q != '') :\\n        while (s[-1] == q[-1] or (s[-1] == '?' and good[q[-1]] == 1)):\\n            s = s[:-1]\\n            q = q[:-1]\\n            if (s == '' or q == '') : break\\n    ans = 1\\n    if (s == '*'):\\n        for j in q:\\n            if (good[j] == 1): ans = 0\\n    elif (s == q) : ans = 1\\n    else : ans = 0\\n    if (ans == 1): print(\\\"YES\\\")\\n    else: print(\\\"NO\\\")\\n    s = tmp\\n\", \"good = input()\\ns = input()\\npos = -1\\nfor j in range(len(s)):\\n\\tif s[j] == '*':\\n\\t\\tpos = j\\n\\t\\tbreak\\t\\nn = int(input())\\nhasStar = ('*' in s)\\nfor i in range(n):\\n\\tt = input()\\n\\tif len(t) < len(s)- 1:\\n\\t\\tprint('NO')\\n\\t\\tcontinue\\n\\tif hasStar:\\n\\t\\tflag = True\\n\\t\\tif len(t) <= (pos + 1) - 2:\\n\\t\\t\\tprint('NO')\\n\\t\\t\\tcontinue\\n\\t\\tif len(t) == (pos + 1) - 1:\\n\\t\\t\\tif len(s) >= (pos + 1) + 1:\\n\\t\\t\\t\\tprint('NO')\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\n\\t\\tfor j in range(pos):\\n\\t\\t\\tif (t[j] not in good and s[j] == '?') or (s[j] != '?' and s[j] != t[j]):\\n\\t\\t\\t\\tflag = False\\n\\t\\t\\t\\tbreak\\n\\t\\tif not flag:\\n\\t\\t\\tprint('NO')\\n\\t\\t\\tcontinue\\n\\t\\tl = pos\\n\\t\\tr0 = len(t) - (len(s) - pos - 1)\\n\\t\\tr = r0\\n\\t\\tfor j in range(pos + 1, len(s)):\\n\\t\\t\\tif (t[r] not in good and s[j] == '?') or (s[j] != '?' and s[j] != t[r]):\\n\\t\\t\\t\\tflag = False\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tr += 1\\n\\t\\tif not flag:\\n\\t\\t\\tprint('NO')\\n\\t\\t\\tcontinue\\n\\t\\tfor j in range(l, r0):\\n\\t\\t\\tif t[j] in good:\\n\\t\\t\\t\\tflag = False\\n\\t\\t\\t\\tbreak\\n\\t\\tif not flag:\\n\\t\\t\\tprint('NO')\\n\\t\\t\\tcontinue\\n\\t\\tprint('YES')\\n\\telse:\\n\\t\\tif len(s) != len(t):\\n\\t\\t\\tprint('NO')\\n\\t\\t\\tcontinue\\n\\t\\tflag = True\\n\\t\\tfor j in range(len(t)):\\n\\t\\t\\tif (t[j] not in good and s[j] == '?') or (s[j] != '?' and s[j] != t[j]):\\n\\t\\t\\t\\tflag = False\\n\\t\\t\\t\\tbreak\\n\\t\\tif not flag:\\n\\t\\t\\tprint('NO')\\n\\t\\t\\tcontinue\\n\\t\\tprint('YES')\\n\", \"l=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\\ns1=input().strip()\\ns1=list(s1)\\ns2=[]\\nfor i in l:\\n    if i not in s1:\\n        s2.append(i)\\npattern=input().strip()\\npattern=list(pattern)\\nif (\\\"*\\\" not in pattern):\\n    length_main=len(pattern)\\n    n=int(input().strip())\\n    for i in range(n):\\n        f=0\\n        string=input().strip()\\n        length=len(string)\\n        if (length_main==length):\\n            for j in range(length_main):\\n                if (string[j]!=pattern[j]):\\n                    if (pattern[j]!=\\\"?\\\"):\\n                        print ('NO')\\n                        f=1\\n                        break\\n                    else:\\n                        if (string[j] not in s1):\\n                            print ('NO')\\n                            f=1\\n                            break\\n            if (f==0):\\n                print (\\\"YES\\\")\\n        else:\\n            print ('NO')\\nelse:\\n    ind=pattern.index(\\\"*\\\")\\n    length_main=len(pattern)\\n    n=int(input().strip())\\n    for i in range(n):\\n        string=input().strip()\\n        length=len(string)\\n        if (length<length_main-1):\\n            print ('NO')\\n        else:\\n            f=0\\n            for j in range(ind):\\n                if (string[j]!=pattern[j]):\\n                    if (pattern[j]!=\\\"?\\\"):\\n                        print ('NO')\\n                        f=1\\n                        break\\n                    else:\\n                        if (string[j] not in s1):\\n                            print ('NO')\\n                            f=1\\n                            break\\n            if (f!=1):\\n                q=length_main-length\\n                for j in range(length_main-1,ind,-1):\\n                    if (string[j-q]!=pattern[j]):\\n                        if (pattern[j]!=\\\"?\\\"):\\n                            print ('NO')\\n                            f=1\\n                            break\\n                        else:\\n                            if (string[j-q] not in s1):\\n                                print ('NO')\\n                                f=1\\n                                break\\n                if (f!=1):\\n                    save= ind+1-q\\n                    string=list(string)\\n                    x=string[ind:save]\\n                    for j in x:\\n                        if (j not in s2):\\n                            print ('NO')\\n                            f=1\\n                            break\\n                    if (f==0):\\n                        print ('YES')\", \"s = input()\\ngood = {}\\nfor i in 'abcdefghijklmnopqrstuvwxyz':\\n    good[i] = 0\\nfor i in s:\\n    good[i] = 1\\ns = input()\\ntmp = s\\nn = int(input())\\nfor i in range(n):\\n    q = input()\\n    while (s[0] == q[0] or (s[0] == '?' and good[q[0]] == 1)):\\n        s = s[1:]\\n        q = q[1:]\\n        if (s == '' or q == '') : break\\n    if (s != '' and q != '') :\\n        while (s[-1] == q[-1] or (s[-1] == '?' and good[q[-1]] == 1)):\\n            s = s[:-1]\\n            q = q[:-1]\\n            if (s == '' or q == '') : break\\n    ans = 1\\n    if (s == '*'):\\n        for j in q:\\n            if (good[j] == 1): ans = 0\\n    elif (s == q) : ans = 1\\n    else : ans = 0\\n    if (ans == 1): print(\\\"YES\\\")\\n    else: print(\\\"NO\\\")\\n    s = tmp\\n\", \"l = input()\\ns = input()\\nn = int(input())\\na = []\\nfor _ in range(n):\\n    c = input()\\n    nl = s\\n    if '*' in nl:\\n        if len(nl) <= len(c):\\n            nl = nl.replace('*', '*'*(abs(len(nl)-len(c))+1))\\n        elif len(nl)==len(c)+1:\\n            nl = nl.replace('*', '')\\n    if len(c)!=len(nl):\\n        a.append(\\\"NO\\\")\\n    else:\\n        for i in range(len(c)):\\n            if nl[i] == '*':\\n                if c[i] in l:\\n                    a.append(\\\"NO\\\")\\n                    break\\n            elif nl[i] == '?':\\n                if c[i] not in l:\\n                    a.append(\\\"NO\\\")\\n                    break\\n            else:\\n                if nl[i] != c[i]:\\n                    a.append(\\\"NO\\\")\\n                    break\\n        else:\\n            a.append(\\\"YES\\\")\\nfor i in a:\\n    print(i)\\n\", \"def check(s, start, end, mp):\\n    if len(s) < len(start) + len(end):\\n        return 0\\n    for i in range(len(start)):\\n        if start[i] == '?':\\n            if mp.get(s[i], 0) != 1:\\n                return 0\\n        if start[i] != '?' and start[i] != s[i]:\\n            return 0\\n    for i in range(1, len(end) + 1):\\n        if end[-i] == '?':\\n            if mp.get(s[-i], 0) != 1:\\n                return 0\\n        if end[-i] != '?' and end[-i] != s[-i]:\\n            return 0\\n    for i in range(len(start), len(s) - len(end)):\\n        if mp.get(s[i], 0) == 1:\\n            return 0\\n    return 1\\n\\n\\ngood = input()\\ntemplate = input()\\nres = template.find('*')\\nif res != -1:\\n    x = template.split('*')\\n    start, end = x[0], x[1]\\nelse:\\n    start = template\\n    end = ''\\nn = int(input())\\nx = {}\\nfor i in good:\\n    x[i] = 1\\n\\nfor i in range(n):\\n    s = input()\\n    if res == -1 and len(s) > len(start) + len(end):\\n        print('NO')\\n    elif check(s, start, end, x):\\n        print('YES')\\n    else:\\n        print('NO')\\n\", \"string = input()\\ngood = list(string)\\ns = input()\\na = len(s)\\ncondition = \\\"*\\\" in s\\nn = int(input())\\nresults = []\\nfor x in range(n):\\n    temp = s\\n    t = input()\\n    b = len(t)\\n    condition1 = a == b + 1 and not condition\\n    if a > b + 1 or condition1:\\n        result = \\\"NO\\\"\\n    elif b > a and not condition:\\n        result = \\\"NO\\\"\\n    else:\\n        result = \\\"YES\\\"\\n        if condition:\\n            p = s.index(\\\"*\\\")\\n            q = a - p\\n            if q == 1:\\n                r = t[p:]\\n            else:\\n                r = t[p:-q + 1]\\n            for x in r:\\n                if x in good:\\n                    result = \\\"NO\\\"\\n                    break\\n            temp = s[:p] + r + s[p + 1:]\\n        if result == \\\"YES\\\":\\n            for x in range(b):\\n                if temp[x] == \\\"?\\\":\\n                    if not t[x] in good:\\n                        result = \\\"NO\\\"\\n                        break\\n                elif temp[x] != t[x]:\\n                    result = \\\"NO\\\"\\n                    break\\n    results.append(result)\\nfor x in results:\\n    print(x)\", \"import sys\\n\\n\\n\\ndef main():\\n    g = list(sys.stdin.readline().rstrip())\\n    s = list(sys.stdin.readline().rstrip())\\n    n = int(sys.stdin.readline())\\n    star = -1\\n    for i in range(len(s)):\\n        if s[i]=='*':\\n            star = i\\n\\n\\n    for i in range(n):\\n        t=sys.stdin.readline().rstrip()\\n        ok = True\\n        if (star == -1 and len(s) > len(t)) or (star!=-1 and len(s)-1>len(t)):\\n            print(\\\"NO\\\")\\n            continue\\n        for j in range(star):\\n            if s[j] =='?':\\n                if t[j] not in g:\\n                    ok = False\\n                    break\\n            elif t[j]!=s[j]:\\n                ok = False\\n                break\\n        if not ok:\\n            print(\\\"NO\\\")\\n            continue\\n        if len(t)< len(s)-star-1:\\n            print(\\\"NO\\\")\\n            continue\\n        for j in range(len(s)-star-1):\\n            k = len(t)-j-1\\n            m = len(s)-j-1\\n            if s[m] =='?':\\n                if t[k] not in g:\\n                    ok = False\\n                    break\\n            elif t[k]!=s[m]:\\n                ok = False\\n                break\\n        if not ok:\\n            print(\\\"NO\\\")\\n            continue\\n        if star == -1 and len(s)==len(t):\\n            print(\\\"YES\\\")\\n            continue\\n        if star == -1:\\n            print(\\\"NO\\\")\\n            continue\\n        for j in range(star, len(t)-(len(s)-star-1)):\\n            if t[j] in g:\\n                ok = False\\n                break\\n        if not ok:\\n            print(\\\"NO\\\")\\n            continue\\n        print(\\\"YES\\\")\\n\\n    \\n\\n    \\nmain()\\n\", \"good = set(list(input()))\\ns = input()\\nst = '*' in list(s)\\n\\ndef f(x):\\n\\td = len(x) - len(s) + 1\\n\\tif d < 0 or (len(x) != len(s) and not st):\\n\\t\\treturn False\\n\\tind = -1\\n\\tfor i in range(len(x)):\\n\\t\\tif s[i] == '*':\\n\\t\\t\\tind = i\\n\\t\\t\\tbreak\\n\\t\\telif s[i] == '?' and x[i] not in good:\\n\\t\\t\\treturn False\\n\\t\\telif 'a' <= s[i] <= 'z' and s[i] != x[i]:\\n\\t\\t\\treturn False\\n\\n\\tif ind == -1:\\n\\t\\treturn True\\n\\n\\tfor i in range(ind, ind + d):\\n\\t\\tif x[i] in good:\\n\\t\\t\\treturn False\\n\\n\\tfor i in range(ind + d, len(x)):\\n\\t\\tif s[i - d + 1] == '?' and x[i] not in good:\\n\\t\\t\\treturn False\\n\\t\\telif 'a' <= s[i - d + 1] <= 'z' and s[i - d + 1] != x[i]:\\n\\t\\t\\treturn False\\n\\n\\treturn True\\n\\nn = int(input())\\nfor i in range(n):\\n\\tc = input()\\n\\tif f(c):\\n\\t\\tprint(\\\"YES\\\")\\n\\telse:\\n\\t\\tprint(\\\"NO\\\")\", \"a=input()\\ns=input()\\nk=int(input())\\n\\ndef qw(c):\\n\\tt=True\\n\\tw=-1\\n\\tif len(s)>len(c)+1: t=False\\n\\ttry:\\n\\t\\tfor j in range(len(s)):\\n\\t\\t\\tw+=1\\n\\t\\t\\tif s[j]=='?':\\n\\t\\t\\t\\tif c[w] not in a: t=False\\n\\t\\t\\telif s[j]=='*':\\n\\t\\t\\t\\tb=len(c)-len(s)+1\\n\\t\\t\\t\\tfor e in c[j:j+b]:\\n\\t\\t\\t\\t\\tif e in a:\\n\\t\\t\\t\\t\\t\\tt=False\\n\\t\\t\\t\\tw+=b-1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tif s[j]!=c[w]: t=False\\n\\t\\t\\tif t==False: break\\n\\texcept IndexError:\\n\\t\\treturn False\\n\\treturn t if len(c)==w+1 else False\\n\\nfor i in range(k):\\n\\tc=input()\\n\\tprint('YES') if qw(c) else print('NO')\", \"import re\\nabc = set(list('abcdefghijklmnopqrstuvwxyz'))\\n\\ngood = set(input())\\nsp = {'?', '*'}\\n\\nbad = abc - good\\nans = []\\n\\npat = input()\\npl = len(pat)\\nfor _ in range(int(input())):\\n    hasstar = False\\n    answered = False\\n    q = input()\\n    d = len(q) - pl\\n    if d < -1 or (d == -1 and \\\"*\\\" not in pat):\\n        ans.append(\\\"NO\\\")\\n        continue\\n    else:\\n        i = 0\\n        j = 0\\n        while i < pl:\\n            if (pat[i] == '?' and q[j] in bad) or (pat[i] not in sp and q[j] != pat[i]):\\n                ans.append(\\\"NO\\\")\\n                answered = True\\n                break\\n            elif pat[i] == '*':\\n                hasstar = True\\n                if any(q[k] in good for k in range(j, j+d+1)):\\n                    ans.append(\\\"NO\\\")\\n                    answered = True\\n                    break\\n                j += d\\n            i += 1\\n            j += 1\\n        if not answered:\\n            if not hasstar:\\n                if pl == len(q):\\n                    ans.append('YES')\\n                    answered = True\\n                else:\\n                    ans.append('NO')\\n                    answered = True\\n            else:\\n                ans.append(\\\"YES\\\")\\n                answered = True\\nprint('\\\\n'.join(ans))\\n\", \"alp = set(input())\\npt = input()\\nlp= pt.split('*')[0]\\nrp = ''\\nif len(pt.split('*')) > 1:\\n    rp = pt.split('*')[1]\\nn = int(input())\\n\\ndef check(p, qp):\\n    for i in range(len(p)):\\n        if p[i] == qp[i] or (p[i] == '?' and qp[i] in alp):\\n            continue\\n        else:\\n            return False\\n    return True\\n\\ndef checks(qp):\\n    for i in range(len(qp)):\\n        if qp[i] not in alp:\\n            continue\\n        else: \\n            return False\\n    return True\\n\\nfor i in range(n):\\n    q = input()\\n    if len(lp) + len(rp) > len(q) or ('*' not in pt and len(lp) < len(q)):\\n        print('NO')\\n        continue\\n    qlp = q[:len(lp)]\\n    qrp = q[(len(q) - len(rp)):]\\n    star = q[len(lp):(len(q) - len(rp))]\\n    if check(lp, qlp) and check(rp, qrp) and checks(star):\\n        print('YES')\\n    else:\\n        print('NO')\", \"good = list(input())\\ns = list(input())\\nstin = '*' in s\\nif stin:\\n    stind = s.index('*')\\n    s.pop(stind)\\nn = len(s)\\nfor p in range(int(input())):\\n    a = list(input())\\n    ans = True\\n    if stin:\\n        while stind < len(a) > n and a[stind] not in good:\\n            a.pop(stind)\\n    if len(a) != n:\\n        ans = False\\n    else:\\n        for i in range(n):\\n            if a[i] == s[i] or a[i] in good and s[i] == '?':\\n                None\\n            else:\\n                ans = False\\n                break\\n    if ans:\\n        print('YES')\\n    else:\\n        print('NO')\", \"def local_right_to_global(test, local_right):\\n    return(len(test) + local_right)\\n    \\ndef local_left_to_global(test, local_left):\\n    return(local_left)\\n\\ndef check_left(test, template, good_symbols):\\n    left_idx = -1\\n    for symbol in template:\\n        left_idx += 1\\n        if symbol == '*':\\n            return(local_left_to_global(test, left_idx))\\n        try:\\n            if test[left_idx] != template[left_idx]:\\n                if template[left_idx] != '?':\\n                    return('NO')\\n                elif test[left_idx] not in good_symbols:\\n                    return('NO')\\n        except:\\n            return('NO')\\n\\ndef check_right(test, template, good_symbols):\\n    right_idx = 0\\n    for symbol in reversed(template):\\n        right_idx -= 1\\n        if symbol == '*':\\n            return(local_right_to_global(test, right_idx))\\n        try:\\n            if test[right_idx] != template[right_idx]:\\n                if template[right_idx] != '?':\\n                    return('NO')\\n                elif test[right_idx] not in good_symbols:\\n                    return('NO')            \\n        except:\\n            return('NO')\\n    \\ngood_symbols = set(list(input()))\\ntemplate = input()\\ntests_nr = int(input())\\ntests = []\\nfor _ in range(tests_nr):\\n    tests.append(input())\\n    \\nabaca = '*' not in template\\nfor test in tests:\\n    if abaca:\\n        pos = -1\\n        flag = True\\n        if len(test) != len(template):\\n            print('NO')\\n            continue\\n        for symbol in template:\\n            pos += 1\\n            try:\\n                if test[pos] != template[pos]:\\n                    if template[pos] != '?':\\n                        print('NO')\\n                        flag = False\\n                        break\\n                    elif test[pos] not in good_symbols:\\n                        print('NO')\\n                        flag = False\\n                        break\\n            except:\\n                print('NO')\\n                flag = False\\n                break\\n        if flag:\\n            print('YES')\\n        continue\\n    left_idx = check_left(test, template, good_symbols)\\n    right_idx = check_right(test, template, good_symbols)\\n    # print(left_idx, right_idx)\\n    if left_idx == 'NO':\\n        print('NO')\\n    elif right_idx == 'NO':\\n        print('NO')\\n    else:\\n        if right_idx < left_idx - 1:\\n            print('NO')\\n            continue\\n        flag = True\\n        for pos in range(left_idx, right_idx + 1):\\n            if test[pos] in good_symbols:\\n                print('NO')\\n                flag = False\\n                break\\n        if flag:\\n            print('YES')\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"ab\\na?a\\n2\\naaa\\naab\\n\",\n    \"abc\\na?a?a*\\n4\\nabacaba\\nabaca\\napapa\\naaaaax\\n\",\n    \"x\\n?aba*\\n69\\nc\\naaacc\\nbba\\nbabcb\\nac\\nbccca\\nca\\nabbaa\\nb\\naacca\\nccc\\ncc\\na\\naabba\\nb\\na\\nbaca\\nabb\\ncac\\ncbbaa\\nb\\naba\\nbccc\\nccbbc\\nb\\ncbab\\naaabb\\nc\\nbbccb\\nbaaa\\nac\\nbaa\\nc\\nbba\\naabab\\ncccb\\nc\\ncb\\ncbab\\nbb\\nb\\nb\\nc\\nbaaca\\nbaca\\naaa\\ncaaa\\na\\nbcca\\na\\naac\\naa\\ncba\\naacb\\nacbb\\nacaca\\nc\\ncc\\nab\\ncc\\na\\naba\\nbbbbc\\ncbcbc\\nacb\\nbbcb\\nbbbcc\\ncaa\\ncaaac\\n\",\n    \"k\\n*\\n89\\nb\\ncbbbc\\ncabac\\nbccbb\\nccc\\ncabaa\\nabbaa\\nccbaa\\nccccb\\ncabbb\\nbbcbc\\nbac\\naaac\\nabb\\nbcbb\\ncb\\nbacc\\nbbaba\\nb\\nacc\\nbaac\\naaba\\nbcbba\\nbaa\\nbc\\naaccb\\nb\\nab\\nc\\nbbbb\\nabbcb\\nacbb\\ncba\\nc\\nbac\\nc\\nac\\ncc\\nb\\nbbc\\nbaab\\nc\\nbbc\\nab\\nb\\nc\\naa\\naab\\nab\\naccbc\\nacbaa\\na\\nccc\\ncba\\nb\\nb\\nbcccb\\nca\\nacabb\\naa\\nba\\naaa\\nac\\ncb\\nacb\\nbcc\\ncbc\\nac\\nc\\nbba\\naacb\\nbcccb\\na\\ncbbb\\naabc\\ncbaab\\nbcac\\nc\\nca\\ncc\\naccbc\\nabab\\nbaca\\nacca\\na\\nab\\nabb\\nb\\nac\\n\",\n    \"t\\nabac*\\n68\\nbcab\\nbab\\nbc\\nab\\naa\\nac\\ncabb\\naabcc\\nbba\\nccbbb\\nccaa\\nca\\nbacc\\ncbbaa\\na\\nbbac\\nacb\\naba\\naaaa\\ncbaa\\na\\nabc\\nccaba\\nc\\nacb\\naba\\ncacb\\ncb\\nacb\\nabcc\\ncaa\\nabbb\\nbaab\\nc\\nab\\nacac\\nabcc\\ncc\\nccca\\nca\\nc\\nabbb\\nccabc\\na\\ncabab\\nb\\nac\\nbbbc\\nb\\nbbca\\ncaa\\nbbc\\naa\\nbcaca\\nbaabc\\nbcbb\\nbc\\nccaa\\nab\\nabaaa\\na\\ncbb\\nc\\nbaa\\ncaa\\nc\\ncc\\na\\n\",\n    \"q\\n?*a\\n29\\nbacb\\nbcaac\\ncbc\\naccc\\nca\\ncbb\\nab\\nab\\nbcbc\\nb\\nbcaca\\nbcc\\nbbc\\nc\\ncaaa\\nbbb\\nbc\\nbabac\\nbcbba\\nbbaa\\ncbaa\\nb\\nab\\nab\\nbcca\\naaca\\na\\nbaac\\nb\\n\",\n    \"b\\na?a*\\n49\\naabc\\nb\\nbacbc\\nacc\\nc\\nbcbb\\naccc\\nba\\ncbab\\nbca\\naaaba\\nacaba\\nbb\\nccac\\naaa\\nacc\\na\\nca\\na\\nccb\\naaaac\\nc\\naaa\\ncaabb\\nabb\\nbb\\nc\\naaccc\\nbaaab\\nbb\\nba\\naca\\nac\\ncbc\\nacaa\\nbcbc\\ncbc\\nbba\\ncc\\ncbcac\\ncbcb\\naabb\\nab\\nc\\nbbb\\nbcca\\naab\\ncb\\nbacb\\n\",\n    \"l\\na*?a\\n69\\nc\\naac\\nc\\ncc\\nca\\nabcbb\\ncbc\\naabb\\na\\nca\\ncaab\\nbcaab\\ncbb\\naa\\naaabc\\ncb\\nc\\nab\\nca\\nbcaab\\nccabb\\ncaaa\\nbab\\nab\\naa\\ncab\\nc\\ncbab\\nc\\nabbca\\ncc\\nacbba\\nbaa\\ncaab\\nbc\\nbbbac\\naab\\nccaca\\ncc\\nbb\\na\\naaac\\nbcac\\nacbac\\naaaac\\nabc\\nba\\naacab\\nc\\na\\nbabaa\\nabac\\nabaac\\na\\nc\\nacc\\nabbba\\naa\\ncccb\\na\\nccaab\\nbbaca\\nba\\nb\\naacbc\\ncbcac\\nc\\nbc\\nccbb\\n\",\n    \"v\\n*a?b\\n92\\nbbcca\\nacaca\\ncca\\ncac\\nab\\nccaba\\nabcbb\\nc\\ncc\\nccccb\\ncc\\ncbcc\\na\\naab\\ncacb\\nb\\nb\\ncbc\\nbb\\nac\\ncca\\nb\\nacb\\nbcbca\\ncbbbb\\naacb\\nacabb\\ncaa\\nbc\\nbca\\nc\\nab\\nac\\nc\\ncb\\nba\\ncccbc\\ncaac\\ncabc\\nc\\nbbac\\ncaa\\ncbbac\\nb\\nac\\na\\nb\\nba\\ncba\\ncba\\nacbc\\ncc\\nca\\nc\\ncab\\ncac\\na\\ncac\\nb\\nc\\nb\\nb\\nbabb\\nbcab\\nc\\nbb\\nb\\ncbc\\nabba\\nabccb\\nccaaa\\nabbc\\na\\naa\\nab\\nacbcc\\nc\\nbc\\nb\\nbbcac\\naccc\\nca\\ncab\\ncb\\nabaac\\nc\\nbaac\\ncc\\naa\\nca\\naccac\\nbbbc\\n\",\n    \"y\\n*\\n36\\nbacc\\nacab\\naaac\\ncbca\\ncbbc\\ncbaab\\nbaba\\nbb\\nacac\\nc\\nb\\nbacbb\\ncbca\\nbbba\\naa\\nbc\\nbb\\nababb\\nab\\nb\\nc\\nb\\nbc\\nabb\\nccaca\\ncbc\\nacbb\\nc\\nbbbba\\ncb\\ncca\\nb\\nb\\ncc\\nbcbc\\naac\\n\",\n    \"i\\n*b?\\n69\\nc\\nbcaac\\ncaa\\nbacb\\nbbbca\\ncbc\\naabb\\nbacc\\nabbca\\naaa\\nabcaa\\nbccb\\ncabc\\nac\\nbb\\nbac\\ncbc\\naaa\\nbab\\nbcb\\nbb\\nbaba\\naac\\nab\\ncbcb\\nbac\\nacc\\nbcb\\naaccb\\nbac\\naaacc\\nbacca\\nbaba\\nb\\na\\ncabca\\naca\\nb\\naa\\nbc\\nbbaac\\nac\\nccaac\\nbb\\nba\\nbcaba\\nbbca\\na\\naab\\na\\naa\\ncbcb\\na\\nababb\\na\\ncba\\nca\\nccb\\nac\\nbbc\\nbcccb\\nccac\\nab\\ncb\\nbb\\nc\\ncac\\na\\ncabc\\n\",\n    \"f\\n*?\\n96\\nc\\nbbacb\\naacbb\\nbba\\naabac\\nc\\nab\\naaaab\\ncac\\naacb\\nacc\\naa\\ncaaa\\naca\\nb\\nc\\ncbabb\\ncc\\nccbb\\naaa\\nbacbc\\ncca\\na\\nbcb\\nbba\\nba\\nbb\\nabca\\nbabab\\nba\\naaabc\\ncbac\\nbc\\nac\\nac\\nccbbb\\nbbc\\nacaac\\ncaab\\nacbbb\\nbb\\nbbaac\\naa\\nbaacb\\nbca\\ncbcaa\\na\\nb\\ncac\\ncbc\\ncbb\\nbc\\na\\nb\\nccbaa\\ncaccb\\nbac\\nba\\nb\\nccb\\ncaa\\nccac\\nbca\\na\\nbac\\nac\\nbbcab\\nc\\nacccb\\nc\\nab\\na\\nacba\\ncacbb\\nca\\nbaa\\ncacb\\ncabbc\\ncccbb\\nabcbc\\ncbbb\\nac\\nb\\nccb\\nbccc\\nbb\\nc\\nbcc\\nbcb\\nab\\nb\\na\\nbaab\\naca\\ncbbc\\nb\\n\",\n    \"q\\n*b\\n58\\ncb\\nccbaa\\nbbccb\\ncab\\nc\\na\\ncabab\\naabbb\\nbcb\\nc\\na\\nccabc\\nbbbac\\nbcaa\\nbbb\\naca\\nca\\nbab\\ncaaa\\nab\\ncba\\ncbac\\ncac\\ncaac\\nb\\ncc\\nc\\naba\\nbaba\\nabaaa\\nbcbbc\\nccabb\\na\\naaca\\naa\\naac\\nbbcbb\\nccaac\\nacbbc\\naa\\nca\\naaaab\\nac\\naccab\\ncbbaa\\ncb\\nacaa\\naaaaa\\na\\nc\\na\\ncbbba\\ncab\\naaba\\nc\\nbab\\nacc\\nccbb\\n\",\n    \"z\\ncb*c\\n50\\nbaca\\naaca\\nacba\\nacbaa\\nbc\\nc\\nac\\na\\nc\\nbcca\\ncc\\nac\\nbaa\\nc\\nbbac\\naa\\ncc\\nbcaba\\nca\\nbcaba\\ncbacc\\naa\\ncc\\naba\\nbcb\\ncaa\\nacaa\\nca\\ncba\\ncb\\nca\\naab\\nbc\\nbaabc\\nacaab\\nbacc\\nc\\nc\\na\\ncb\\ncbaa\\ncaa\\ncbcc\\nc\\ncba\\naac\\nbba\\nbcaab\\nc\\na\\n\",\n    \"cba\\n?*cbc\\n88\\ncccca\\ncbc\\nb\\nbcb\\naaa\\ncaac\\nbacb\\nacbb\\na\\nab\\ncbcca\\nbccc\\nabcc\\naca\\nba\\nbbac\\nacc\\ncba\\nbcba\\nbc\\naa\\nab\\ncaba\\ncccab\\ncba\\ncbcc\\nba\\ncacbb\\nabcc\\na\\nc\\nbac\\nccaba\\nb\\nac\\nbbb\\nac\\nccaca\\na\\nba\\nacbcc\\nbbc\\nacbc\\nbbabc\\nccbb\\nb\\nacaa\\na\\nba\\nacb\\na\\nab\\naa\\nbbbb\\naabb\\nbcbc\\nb\\nca\\nb\\nccab\\nab\\nc\\nb\\naabab\\nc\\ncbbbc\\nacbbb\\nbacaa\\nbcccc\\ncbac\\nc\\nac\\nb\\nca\\ncbb\\nccbc\\nc\\nc\\nbcb\\nc\\nbaaba\\nc\\nbac\\nb\\nba\\ncb\\ncc\\nbaaca\\n\",\n    \"a\\naa\\n1\\naaa\\n\",\n    \"a\\naaa\\n1\\naaaa\\n\",\n    \"a\\naa*aa\\n1\\naaa\\n\",\n    \"a\\nbb*bb\\n1\\nbbbbbbbbbbbbbbbb\\n\",\n    \"a\\na*\\n1\\nabbbbbbb\\n\",\n    \"a\\na?a\\n1\\naaab\\n\",\n    \"xy\\ncab*aba\\n1\\ncaba\\n\",\n    \"a\\n*\\n4\\nb\\na\\nab\\nba\\n\",\n    \"abc\\na?a?*a\\n3\\nababxa\\nababca\\nababa\\n\",\n    \"abc\\n??a*df?c\\n6\\nabadfcc\\naaaadfac\\nbbagthfac\\nacadddfac\\ndaagdffc\\naaaadfcc\\n\",\n    \"abc\\nabc*a\\n1\\nabckka\\n\",\n    \"b\\n*a\\n1\\naba\\n\",\n    \"a\\nabc*g\\n1\\nabcdefg\\n\",\n    \"a\\nab\\n1\\na\\n\",\n    \"abcdefghijklmnopqrstuvwxyz\\n*a\\n1\\na\\n\",\n    \"as\\naba*aba\\n1\\naba\\n\",\n    \"ab\\naweerrtab\\n4\\naw\\naweerrtabwqeqrw\\naweerrtabxcvxcbcxbdsfdsfewrewrqweq\\naweerrtabaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\",\n    \"a\\na\\n1\\nab\\n\",\n    \"a\\na*b\\n1\\nabb\\n\",\n    \"a\\nb*a\\n1\\nbbadd\\n\",\n    \"a\\naaaa\\n1\\naaa\\n\",\n    \"z\\n*abcd\\n1\\nggggggg\\n\",\n    \"abc\\n*??\\n1\\nqqqqqqqqab\\n\",\n    \"b\\naa\\n1\\na\\n\",\n    \"ab\\na*pa\\n1\\nappppa\\n\",\n    \"a\\nbbb\\n1\\nbbbbb\\n\",\n    \"ab\\nabcd?\\n1\\nabcd\\n\",\n    \"c\\na\\n1\\nab\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\nNO\\n\",\n    \"NO\\nYES\\nNO\\nYES\\n\",\n    \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n\",\n    \"YES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\n\",\n    \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n\",\n    \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n\",\n    \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n\",\n    \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n\",\n    \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n\",\n    \"YES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\n\",\n    \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n\",\n    \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n\",\n    \"YES\\nNO\\nYES\\nYES\\nNO\\nNO\\nYES\\nYES\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nYES\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nYES\\nNO\\nYES\\n\",\n    \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n\",\n    \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\nNO\\nNO\\nNO\\n\",\n    \"YES\\nNO\\nYES\\n\",\n    \"YES\\nNO\\nNO\\nYES\\nNO\\nNO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\nNO\\nNO\\nNO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/832/B",
  "starter_code": ""
}