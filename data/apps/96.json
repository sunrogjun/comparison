{
  "task_id": "APPS/96",
  "problem_id": 96,
  "prompt": "At first, let's define function $f(x)$ as follows: $$ \\begin{matrix} f(x) & = & \\left\\{ \\begin{matrix} \\frac{x}{2} & \\mbox{if } x \\text{ is even} \\\\ x - 1 & \\mbox{otherwise } \\end{matrix} \\right. \\end{matrix} $$\n\nWe can see that if we choose some value $v$ and will apply function $f$ to it, then apply $f$ to $f(v)$, and so on, we'll eventually get $1$. Let's write down all values we get in this process in a list and denote this list as $path(v)$. For example, $path(1) = [1]$, $path(15) = [15, 14, 7, 6, 3, 2, 1]$, $path(32) = [32, 16, 8, 4, 2, 1]$.\n\nLet's write all lists $path(x)$ for every $x$ from $1$ to $n$. The question is next: what is the maximum value $y$ such that $y$ is contained in at least $k$ different lists $path(x)$?\n\nFormally speaking, you need to find maximum $y$ such that $\\left| \\{ x ~|~ 1 \\le x \\le n, y \\in path(x) \\} \\right| \\ge k$.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 10^{18}$).\n\n\n-----Output-----\n\nPrint the only integer \u2014 the maximum value that is contained in at least $k$ paths.\n\n\n-----Examples-----\nInput\n11 3\n\nOutput\n5\n\nInput\n11 6\n\nOutput\n4\n\nInput\n20 20\n\nOutput\n1\n\nInput\n14 5\n\nOutput\n6\n\nInput\n1000000 100\n\nOutput\n31248\n\n\n\n-----Note-----\n\nIn the first example, the answer is $5$, since $5$ occurs in $path(5)$, $path(10)$ and $path(11)$.\n\nIn the second example, the answer is $4$, since $4$ occurs in $path(4)$, $path(5)$, $path(8)$, $path(9)$, $path(10)$ and $path(11)$.\n\nIn the third example $n = k$, so the answer is $1$, since $1$ is the only number occuring in all paths for integers from $1$ to $20$.",
  "solutions": "[\"def gg(n,lol):\\n\\tans = 0\\n\\tcur = 1\\n\\tlol2 = lol\\n\\twhile(2*lol+1<=n):\\n\\t\\tcur *= 2\\n\\t\\tans += cur\\n\\t\\tlol = 2*lol+1\\n\\t\\tlol2 *= 2\\n\\tif lol2*2 <= n:\\n\\t\\tans += n-lol2*2+1\\t\\n\\treturn ans\\n\\nn,k = list(map(int,input().split()))\\nlow = 1\\nhigh = n//2\\nres = 1\\nwhile low <= high:\\n\\tmid = (low+high)//2\\n\\tif gg(n,mid) >= k:\\n\\t\\tres = mid\\n\\t\\tlow = mid+1\\n\\telse:\\n\\t\\thigh = mid-1\\nif n == k:\\n\\tprint(1)\\nelif(gg(n,res)-1-gg(n,res*2) >= k):\\n\\tprint(res*2+1)\\nelse:\\n\\tprint(res*2)\\t\\t\\t\\t\\t\\n\", \"def ans(m, n):\\n    q1, q2, k = m, 2, 0\\n    while q1 <= n:\\n        q1 *= 2\\n        k += q2\\n        q2 *= 2\\n    q2 //= 2\\n    q1 //= 2\\n    if n-q1 < q2:\\n        return k+n-q1-q2+1\\n    return k\\n\\n\\nn, k = list(map(int, input().split()))\\nif k == n:\\n    print(1)\\nelif k == 1:\\n    print(n)\\nelse:\\n    l, r = 1, n//2+1\\n    while r-l > 1:\\n        m = (l+r)//2\\n        if ans(2*m, n) >= k:\\n            l = m\\n        else:\\n            r = m\\n    l1, r1 = 1, n // 2 + 1\\n    while r1 - l1 > 1:\\n        m = (l1 + r1) // 2\\n        if ans(2 * m, n) >= k-1:\\n            l1 = m\\n        else:\\n            r1 = m\\n    print(max(l1, 2*l))\\n\", \"n, k = list(map(int, input().split()))\\ns = bin(n)[2:]\\n\\nans = 1\\nif k == 1:\\n    ans = n\\nelse:\\n    f = len(s)\\n    for d in range(1, f):\\n        rgt = int(s[-d:], 2)\\n        lft = int(s[:-d], 2)\\n        c = 2**d\\n        # print(d, lft, rgt+c, 2*c-1)\\n        if rgt+c >= k:\\n            if rgt+c > k:\\n                ans = max(lft*2, ans)\\n            else:\\n                ans = max(lft, ans)\\n        if 2*c-1 >= k:\\n            if 2*c-1 > k:\\n                ans = max((lft-1)*2, ans)\\n            else:\\n                ans = max(lft-1, ans)\\n\\nprint(ans)\\n\", \"import sys\\n\\ndef cnt(y, n):\\n    # print(\\\"in count\\\")\\n    #print(y)\\n    if y <= 1:\\n        return n\\n    if y > n:\\n        return 0\\n    if y % 2 == 1:\\n        return 1 + cnt(2 * y, n)\\n    c = 0\\n    p = 1\\n    while p*y <= n:\\n        mx = min(n, p*y + 2*p - 1)\\n        c += mx - p*y + 1\\n        p *= 2\\n    return c\\n\\nn, k = input().split()\\nn, k = int(n), int(k)\\n\\nif k == 1:\\n    print(n)\\n    return\\n\\nl, h = 1, n // 2\\nwhile l < h:\\n    m = (l + h) // 2\\n    #print(\\\"l = \\\" + str(l))\\n    #print(\\\"h = \\\" + str(h))\\n    #print(\\\"m = \\\" + str(m))\\n    #print(\\\"cnt = \\\" + str(cnt(m, n)))\\n\\n    if cnt(2 * m, n) < k:\\n        h = m\\n    else:\\n        l = m + 1\\nmx_even = 2 * l - 2\\n    \\nl, h = 1, n // 2\\nwhile l < h:\\n    m = (l + h) // 2\\n    #print(\\\"l = \\\" + str(l))\\n    #print(\\\"h = \\\" + str(h))\\n    #print(\\\"m = \\\" + str(m))\\n    #print(\\\"cnt = \\\" + str(cnt(m, n)))\\n\\n    if cnt(2 * m + 1, n) < k:\\n        h = m\\n    else:\\n        l = m + 1\\nmx_odd = 2 * l - 1\\n#assert(cnt(mx_odd, n) >= k)\\n#assert(cnt(mx_even, n) >= k)\\n\\nmx_heur = -1\\ni = 0\\nwhile i < 20 and n - i > 0:\\n    if cnt(n - i, n) >= k:\\n        mx_heur = n - i\\n        break\\n    i += 1\\n\\nprint(max(mx_even, max(mx_odd, mx_heur)))\\n\", \"n,k=map(int,input().split())\\ndef c(m):\\n  a=b=m\\n  ans=0\\n  if m%2==0:b+=1\\n  while b<=n:\\n    ans+=b-a+1\\n    a*=2\\n    b*=2\\n    b+=1\\n  return ans+max(0,n-a+1)\\n\\nif n<100:\\n  ans=1\\n  for i in range(1,n+1):\\n    if c(i)>=k:ans=i\\n  print(ans);return\\nfor i in range(n,n-100,-1):\\n  if c(i)>=k:print(i);return\\n\\nng=0\\nok=(n+1)//2*2\\nwhile ng+2!=ok:\\n  mid=(ok+ng)//4*2\\n  if c(mid)<k:ok=mid\\n  else:ng=mid\\nx=ng\\nng=-1\\nok=(n+1)//2*2-1\\nwhile ng+2!=ok:\\n  mid=(ok+ng)//4*2+1\\n  if c(mid)<k:ok=mid\\n  else:ng=mid\\nprint(max(ng,x))\", \"a, b = input().split()\\na = int(a)\\nb = int(b)\\n\\nif b == 1:\\n\\tprint(a)\\nelif b == 2:\\n\\tif a % 2 == 0:\\n\\t\\tprint(a // 2)\\n\\telse:\\n\\t\\tprint(a-1)\\nelse:\\n\\n\\tchopped_even = bin(b+1)[3:]\\n\\tlen_even = len(chopped_even)\\n\\tbest_even = ((a - int(chopped_even, 2))//(2**len_even))*2\\n\\n\\tchopped_odd = bin(b)[2:]\\n\\tlen_odd = len(chopped_odd)\\n\\tbest_odd = ((a - b) // (2**len_odd))*2 + 1\\n\\n\\tif best_even > best_odd:\\n\\t\\tprint(best_even)\\n\\telse:\\n\\t\\tprint(best_odd)\", \"def gg(n, lol):\\n    ans = 0\\n    cur = 1\\n    lol2 = lol\\n    while (2 * lol + 1 <= n):\\n        cur *= 2\\n        ans += cur\\n        lol = 2 * lol + 1\\n        lol2 *= 2\\n    if lol2 * 2 <= n:\\n        ans += n - lol2 * 2 + 1\\n    return ans\\n\\n\\nn, k = map(int, input().split())\\nlow = 1\\nhigh = n // 2\\nres = 1\\nwhile low <= high:\\n    mid = (low + high) // 2\\n    if gg(n, mid) >= k:\\n        res = mid\\n        low = mid + 1\\n    else:\\n        high = mid - 1\\nif n == k:\\n    print(1)\\nelif (gg(n, res) - 1 - gg(n, res * 2) >= k):\\n    print(res * 2 + 1)\\nelse:\\n    print(res * 2)\", \"import sys\\n\\ndef minp():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef mint():\\n\\treturn int(minp())\\n\\ndef mints():\\n\\treturn list(map(int,minp().split()))\\n\\ndef full(x, n):\\n\\tif ((n + 1) & n) != 0:\\n\\t\\traise Exception(\\\"qwe\\\")\\n\\tr = 1\\n\\twhile True:\\n\\t\\tif r >= x:\\n\\t\\t\\treturn n\\n\\t\\tif n == 1:\\n\\t\\t\\treturn None\\n\\t\\tr *= 2\\n\\t\\tn -= 1\\n\\t\\tif r >= x:\\n\\t\\t\\treturn n\\n\\t\\tn //= 2\\n\\t\\tr += 1\\n\\ndef is_good(x, n):\\n\\tl = x\\n\\tr = x\\n\\trp = x\\n\\tif x % 2 == 0:\\n\\t\\treturn None\\n\\twhile l <= n:\\n\\t\\tif l <= n and r > n:\\n\\t\\t\\treturn None\\n\\t\\tl *= 2\\n\\t\\trp = r\\n\\t\\tr = r * 2 + 1\\n\\treturn rp\\n\\ndef full2(x, c, rp):\\n\\tr = 1\\n\\twhile True:\\n\\t\\tif r >= x:\\n\\t\\t\\treturn rp\\n\\t\\tif rp == c:\\n\\t\\t\\treturn None\\n\\t\\tr *= 2\\n\\t\\trp -= 1\\n\\t\\tif r >= x:\\n\\t\\t\\treturn rp\\n\\t\\trp //= 2\\n\\t\\tr += 1\\n\\treturn None\\n\\n\\ndef full1(k, x, n):\\n\\trp = is_good(x, n)\\n\\tif rp == None:\\n\\t\\tr = None\\n\\t\\tif f(x, n) >= k:\\n\\t\\t\\tr = x\\n\\t\\tif 2*x <= n:\\n\\t\\t\\tr1 = full1(k, 2*x, n)\\n\\t\\t\\tif r1 != None and (r == None or r < r1):\\n\\t\\t\\t\\tr = r1\\n\\t\\tif 2*x + 1 <= n:\\n\\t\\t\\tr1 = full1(k, 2*x + 1, n)\\n\\t\\t\\tif r1 != None and (r == None or r < r1):\\n\\t\\t\\t\\tr = r1\\n\\t\\treturn r\\n\\telse:\\n\\t\\treturn full2(k, x, rp)\\n\\ndef fulls(k, n):\\n\\tr = 1\\n\\tfor i in range(1,n+1):\\n\\t\\tif f(i,n) >= k:\\n\\t\\t\\tr = i\\n\\treturn r\\n\\ndef f(x, n):\\n\\tr = 0\\n\\trp = is_good(x, n)\\n\\tif rp != None:\\n\\t\\tr = 1\\n\\t\\twhile rp != x:\\n\\t\\t\\tr = (r*2 + 1)\\n\\t\\t\\trp //= 2\\n\\t\\treturn r\\n\\n\\tif x <= n:\\n\\t\\tr += 1\\n\\tif x % 2 == 0 and x + 1 <= n:\\n\\t\\tr += f(x + 1, n)\\n\\tif 2 * x <= n:\\n\\t\\tr += f(x * 2, n)\\n\\t#print(x, r)\\n\\treturn r\\n\\ndef f1(x, n):\\n\\tr = 0\\n\\tif x <= n:\\n\\t\\tr += 1\\n\\tif x % 2 == 0 and x + 1 <= n:\\n\\t\\tr += f(x + 1, n)\\n\\tif 2 * x <= n:\\n\\t\\tr += f(x * 2, n)\\n\\t#print(x, r)\\n\\treturn r\\n\\n'''\\nfrom random import randint\\nwhile True:\\n\\tn = randint(1, 1024)\\n\\tx = randint(1, n)\\n\\tif full1(x, 1, n) != fulls(x, n):\\n\\t\\tprint(x, n, full1(x, 1, n), fulls(x,n))\\n'''\\nn, k = mints()\\nprint(full1(k, 1, n))\\n\", \"from math import *\\nfrom collections import *\\nimport sys\\nsys.setrecursionlimit(10**9)\\n\\ndef check(ch):\\n\\tif(ch > n): return 0\\n\\tif(ch %2 == 0):\\n\\t\\tif(ch == n): return 1\\n\\t\\telse: \\n\\t\\t\\tst = 4\\n\\t\\t\\tans = 2\\n\\telse:\\n\\t\\tst = 2\\n\\t\\tans  = 1\\n\\tch *= 2\\n\\twhile(ch < n):\\n\\t\\tif(ch > n + 1 - st):\\n\\t\\t\\tans += n+1-ch\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tans += st\\n\\t\\tst *= 2\\n\\t\\tif(ch > n - ch):\\n\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tch *= 2\\n\\treturn ans\\n\\n\\nmod = 10**9 + 7\\nn,x = map(int,input().split())\\n\\nl = 1\\nr = n\\nans1 = 0\\nwhile(r >= l):\\n\\tmid = (r+l)//2\\n\\tmid *= 2\\n\\tif(check(mid) >= x):\\n\\t\\tl = mid//2 + 1\\n\\t\\tans1 = mid\\n\\telse:\\n\\t\\tr = mid//2 - 1\\n\\t#print(mid,check(mid))\\nl = 1\\nr = n\\nans2 = 0\\nwhile(r >= l):\\n\\tmid = (r+l)//2\\n\\tmid = mid*2-1\\n\\tif(check(mid) >= x):\\n\\t\\tl = (mid+1)//2 + 1\\n\\t\\tans2 = mid\\n\\telse:\\n\\t\\tr = (mid+1)//2 - 1\\n\\t#print(mid,check(mid))\\nprint(max(ans1,ans2))\"]",
  "input_output": "{\n  \"inputs\": [\n    \"11 3\\n\",\n    \"11 6\\n\",\n    \"20 20\\n\",\n    \"14 5\\n\",\n    \"1000000 100\\n\",\n    \"1 1\\n\",\n    \"2 1\\n\",\n    \"100 4\\n\",\n    \"502333439 2047\\n\",\n    \"773014587697599 31\\n\",\n    \"946338791423 262143\\n\",\n    \"1000000000 4\\n\",\n    \"13 2\\n\",\n    \"1073741821 2\\n\",\n    \"1000000000 100\\n\",\n    \"1000000000 1000000000\\n\",\n    \"766540997167959122 63301807306884502\\n\",\n    \"767367244641009842 196001098285659518\\n\",\n    \"768193483524125970 149607803130614508\\n\",\n    \"766540997167959122 81305011918141103\\n\",\n    \"767367244641009842 63001562824270\\n\",\n    \"768193483524125970 8159388687\\n\",\n    \"1000000000 999999999\\n\",\n    \"1000000000 999999000\\n\",\n    \"1000000000000000000 1\\n\",\n    \"1000000000000000000 5\\n\",\n    \"1000000000000000000 100\\n\",\n    \"1000000000000000000 10000\\n\",\n    \"1000000000000000000 100000000\\n\",\n    \"1000000000000000000 1000000000\\n\",\n    \"1000000000000000000 10000000000\\n\",\n    \"1000000000000000000 100000000000\\n\",\n    \"1000000000000000000 1000000000000\\n\",\n    \"769019726702209394 20139642645754149\\n\",\n    \"769845965585325522 101455278609352655\\n\",\n    \"770672213058376242 76549913585534528\\n\",\n    \"771498451941492370 9554452753411241\\n\",\n    \"772324690824608498 350731058390952223\\n\",\n    \"773150934002691922 35259246518088815\\n\",\n    \"996517375802030514 562680741796166004\\n\",\n    \"997343614685146642 371441227995459449\\n\",\n    \"998169857863230066 216532832678151994\\n\",\n    \"998996101041313490 69229635334469840\\n\",\n    \"999822344219396914 31594516399528593\\n\",\n    \"500648583102513041 27328990834120804\\n\",\n    \"501474821985629169 20453276907988902\\n\",\n    \"502301069458679889 157958605549950521\\n\",\n    \"503127308341796017 87673697275461928\\n\",\n    \"503953551519879441 107364070317088317\\n\",\n    \"738505179452405422 45979222492061590\\n\",\n    \"739331418335521551 128388023680008325\\n\",\n    \"740157665808572271 34928303706093932\\n\",\n    \"740983904691688399 137594355695562348\\n\",\n    \"741810147869771823 28801222604168636\\n\",\n    \"742636386752887951 316193697166926237\\n\",\n    \"743462629930971375 185994815084963322\\n\",\n    \"744288873109054799 87172378778063481\\n\",\n    \"745115111992170927 106980481324722563\\n\",\n    \"745941355170254351 284128592904320663\\n\",\n    \"757120946248004542 159477335321753086\\n\",\n    \"769019726702209394 53103\\n\",\n    \"769845965585325522 1\\n\",\n    \"770672213058376242 1\\n\",\n    \"771498451941492370 41969263080453422\\n\",\n    \"772324690824608498 28027536140678\\n\",\n    \"773150934002691922 2872807266\\n\",\n    \"996517375802030514 1\\n\",\n    \"997343614685146642 979695858355714436\\n\",\n    \"998169857863230066 1216910439614592\\n\",\n    \"998996101041313490 325823891227\\n\",\n    \"999822344219396914 7494606\\n\",\n    \"500648583102513041 1\\n\",\n    \"501474821985629169 1\\n\",\n    \"502301069458679889 263489722252521919\\n\",\n    \"503127308341796017 287766911826129\\n\",\n    \"503953551519879441 63329862130\\n\",\n    \"738505179452405422 173\\n\",\n    \"739331418335521551 1\\n\",\n    \"740157665808572271 1\\n\",\n    \"740983904691688399 3157918256124620\\n\",\n    \"741810147869771823 1158226091274\\n\",\n    \"742636386752887951 45068330\\n\",\n    \"743462629930971375 31\\n\",\n    \"744288873109054799 1\\n\",\n    \"745115111992170927 1\\n\",\n    \"745941355170254351 1530914670906842\\n\",\n    \"757120946248004542 1009900747\\n\",\n    \"14465449852927 34359738367\\n\",\n    \"1825593951 31\\n\",\n    \"2147483647 2147483647\\n\",\n    \"27386360746737663 274877906943\\n\",\n    \"21968524033392639 4194303\\n\",\n    \"4244114883215359 2199023255551\\n\",\n    \"1962727058112511 8191\\n\",\n    \"4294967295 2147483647\\n\",\n    \"11225337262243839 536870911\\n\",\n    \"429496729599 8589934591\\n\",\n    \"6597069766655 68719476735\\n\",\n    \"81067507711 536870911\\n\",\n    \"356198383615 262143\\n\",\n    \"17276479 31\\n\"\n  ],\n  \"outputs\": [\n    \"5\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"31248\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"48\\n\",\n    \"490559\\n\",\n    \"48313411731099\\n\",\n    \"7219991\\n\",\n    \"499999998\\n\",\n    \"12\\n\",\n    \"1073741820\\n\",\n    \"31249998\\n\",\n    \"1\\n\",\n    \"40\\n\",\n    \"8\\n\",\n    \"10\\n\",\n    \"20\\n\",\n    \"43618\\n\",\n    \"357717964\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1000000000000000000\\n\",\n    \"499999999999999998\\n\",\n    \"31249999999999998\\n\",\n    \"244140624999998\\n\",\n    \"29802322386\\n\",\n    \"3725290296\\n\",\n    \"232830642\\n\",\n    \"29103828\\n\",\n    \"3637976\\n\",\n    \"84\\n\",\n    \"20\\n\",\n    \"20\\n\",\n    \"170\\n\",\n    \"4\\n\",\n    \"82\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"12\\n\",\n    \"52\\n\",\n    \"108\\n\",\n    \"54\\n\",\n    \"54\\n\",\n    \"6\\n\",\n    \"12\\n\",\n    \"12\\n\",\n    \"40\\n\",\n    \"18\\n\",\n    \"80\\n\",\n    \"18\\n\",\n    \"80\\n\",\n    \"4\\n\",\n    \"8\\n\",\n    \"20\\n\",\n    \"18\\n\",\n    \"8\\n\",\n    \"10\\n\",\n    \"46937239178600\\n\",\n    \"769845965585325522\\n\",\n    \"770672213058376242\\n\",\n    \"42\\n\",\n    \"87800\\n\",\n    \"720052916\\n\",\n    \"996517375802030514\\n\",\n    \"2\\n\",\n    \"1772\\n\",\n    \"7268652\\n\",\n    \"476752445322\\n\",\n    \"500648583102513041\\n\",\n    \"501474821985629169\\n\",\n    \"4\\n\",\n    \"3574\\n\",\n    \"29333954\\n\",\n    \"11539143428943834\\n\",\n    \"739331418335521551\\n\",\n    \"740157665808572271\\n\",\n    \"656\\n\",\n    \"1349344\\n\",\n    \"44264578028\\n\",\n    \"46466414370685710\\n\",\n    \"744288873109054799\\n\",\n    \"745115111992170927\\n\",\n    \"1324\\n\",\n    \"2820495314\\n\",\n    \"841\\n\",\n    \"114099621\\n\",\n    \"1\\n\",\n    \"199261\\n\",\n    \"10475408569\\n\",\n    \"3859\\n\",\n    \"479181410671\\n\",\n    \"3\\n\",\n    \"41817639\\n\",\n    \"99\\n\",\n    \"191\\n\",\n    \"301\\n\",\n    \"2717577\\n\",\n    \"1079779\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1271/E",
  "starter_code": ""
}