{
  "task_id": "APPS/74",
  "problem_id": 74,
  "prompt": "Dima loves representing an odd number as the sum of multiple primes, and Lisa loves it when there are at most three primes. Help them to represent the given number as the sum of at most than three primes.\n\nMore formally, you are given an odd numer n. Find a set of numbers p_{i} (1 \u2264 i \u2264 k), such that\n\n\n\n 1 \u2264 k \u2264 3\n\n p_{i} is a prime\n\n $\\sum_{i = 1}^{k} p_{i} = n$\n\nThe numbers p_{i} do not necessarily have to be distinct. It is guaranteed that at least one possible solution exists.\n\n\n-----Input-----\n\nThe single line contains an odd number n (3 \u2264 n < 10^9).\n\n\n-----Output-----\n\nIn the first line print k (1 \u2264 k \u2264 3), showing how many numbers are in the representation you found.\n\nIn the second line print numbers p_{i} in any order. If there are multiple possible solutions, you can print any of them.\n\n\n-----Examples-----\nInput\n27\n\nOutput\n3\n5 11 11\n\n\n\n-----Note-----\n\nA prime is an integer strictly larger than one that is divisible only by one and by itself.",
  "solutions": "[\"import math\\n\\nn=int(input())\\n\\ndef prime(p):\\n    if p == 1:\\n        return False\\n    fl=True\\n    for i in range(2,math.ceil(p**0.5) + 1):\\n        if p % i == 0:\\n            fl=False\\n    return fl\\n\\ndef sum_of_primes(k):\\n    fl=True\\n    for i in range((k // 2) + 1):\\n        if prime(i) and prime(k-i):\\n            fl=True\\n            break\\n    return fl\\n\\nif prime(n):\\n    print(1)\\n    print(n)\\nelse:\\n    if prime(n-2):\\n        print(2)\\n        print(2 , n-2)\\n    else:\\n        l=1\\n        for i in range(2, (n // 3) + 1):\\n            if prime(i) and sum_of_primes(n - i):\\n                l=i\\n                break\\n        print(3)\\n        r=1\\n        for k in range((n-l) // 2):\\n            if prime(k) and prime(n-l-k):\\n                r=k\\n                break\\n        print(l,r,n-l-r)\\n\\n            \\n\", \"from sys import *\\ndef prime(a):\\n   if a<2: return False\\n   for j in range(2,int(a**0.5)+1):\\n      if a%j==0: return False\\n   return True\\np=[i for i in range(2,10000) if prime(i)]\\nlp=len(p)    \\n\\nn=int(input())\\nif prime(n):\\n   print(\\\"1\\\\n\\\",n)\\n   return\\nif n>3 and prime(n-2):\\n         print(\\\"2\\\\n\\\",2,n-2)\\n         return\\nif n>5 and prime(n-4):\\n         print(\\\"3\\\\n\\\",2,2,n-4)\\n         return\\n\\nfor j in range(lp):\\n   for i in range(j,lp):\\n      if p[j]+p[i]+2>n: break\\n      if prime(n-p[i]-p[j]):\\n          print(\\\"3\\\\n\\\",p[j],p[i],n-p[i]-p[j])\\n          return\\n\", \"def primes2(limit):\\n    if limit < 2: return []\\n    if limit < 3: return [2]\\n    lmtbf = (limit - 3) // 2\\n    buf = [True] * (lmtbf + 1)\\n    for i in range((int(limit ** 0.5) - 3) // 2 + 1):\\n        if buf[i]:\\n            p = i + i + 3\\n            s = p * (i + 1) + i\\n            buf[s::p] = [False] * ((lmtbf - s) // p + 1)\\n    return [2] + [i + i + 3 for i, v in enumerate(buf) if v]\\n\\nn = int(input())\\nps = primes2(int(n**0.5) + 1)\\n\\ndef solve(n):\\n    if is_prime(n):\\n        return [n]\\n    for m in range(n - 2, n//3 - 1, -1):\\n        if is_prime(m):\\n            r = n - m\\n            if is_prime(r):\\n                return [m, r]\\n            for s in range(r - 2, r//2 - 1, -1):\\n                if is_prime(s) and is_prime(r - s):\\n                    return [m, s, r - s]\\n\\ndef is_prime(n):\\n    sqrt_n = int(n ** 0.5)\\n    for p in ps:\\n        if n == p:\\n            return True\\n        if n % p == 0:\\n            return False\\n        if p > sqrt_n:\\n            return True\\n    return True\\n\\n\\nans = solve(n)\\nprint(len(ans))\\nprint(*ans)\", \"def prime(i):\\n    for k in range(2, int(i**0.5)+1):\\n        if i%k == 0:\\n            return False\\n    return True\\n\\nx = int(input())\\nif prime(x):\\n    print(1)\\n    print(x)\\n    quit()\\ni = x\\nwhile not prime(i):\\n    i -= 2\\n\\np1000 = [i for i in range(2, 3000) if prime(i)]\\n\\nrem = x - i\\nif rem == 2:\\n    print(2)\\n    print(2, i)\\n    quit()\\n\\nprint(3)\\nfor jj in p1000:\\n    if rem-jj in p1000:\\n        print(i, jj, rem-jj)\\n        quit()\\n\", \"import math\\ndef is_prime(a):\\n    n=math.sqrt(a)\\n    n=int(n)+1\\n    return all(a % i for i in range(2, n))\\ndef sieves(n):\\n    size = n//2\\n    sieve = [1]*size\\n    limit = int(n**0.5)\\n    for i in range(1,limit):\\n        if sieve[i]:\\n            val = 2*i+1\\n            tmp = ((size-1) - i)//val \\n            sieve[i+val::val] = [0]*tmp\\n    return [2] + [i*2+1 for i, v in enumerate(sieve) if v and i>0]\\npri=sieves(1000)\\nn=int(input())\\nfor i in range(n,1,-1):\\n    if is_prime(i):\\n        primes=i\\n        break\\n\\nans=[]\\nno=1\\nif n==primes:\\n    ans=[n]\\n    no=1\\n\\nelif primes+2==n:\\n    ans=[2,primes]\\n    no=2\\nelse:\\n    k=n-primes\\n    for i in pri:\\n        for j in pri:\\n            if i+j==k:\\n                ans=[primes,i,j]\\n                no=3\\nprint(no)\\nfor i in ans:\\n    print(i,end=' ')\", \"import math\\ndef Prost(n):\\n    for i in range(2,int(math.sqrt(n))+1):\\n        if n%i==0:\\n            return False\\n    else:\\n        return True\\nn = int(input())\\nr=0\\nif Prost(n):\\n    print(1)\\n    print(n)\\nelse:\\n    for i in range(n-1,n-300,-1):\\n        if Prost(i):\\n            r=i\\n            break\\n    \\n    k=n-r\\n    if (k==2):\\n        print(2)\\n        print(r,k) \\n    else:\\n        for i in range(2,k):\\n            if Prost(i) and Prost(k-i):\\n                print(3)\\n                print(r,i,k-i)\\n                break\\n\", \"def miller_rabin(n):\\n    \\\"\\\"\\\" primality Test\\n        if n < 3,825,123,056,546,413,051, it is enough to test\\n        a = 2, 3, 5, 7, 11, 13, 17, 19, and 23.\\n        Complexity: O(log^3 n)\\n    \\\"\\\"\\\"\\n    if n == 2:\\n        return True\\n    if n <= 1 or not n & 1:\\n        return False\\n\\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23]\\n\\n    d = n - 1\\n    s = 0\\n    while not d & 1:\\n        d >>= 1\\n        s += 1\\n\\n    for prime in primes:\\n        if prime >= n:\\n            continue\\n        x = pow(prime, d, n)\\n        if x == 1:\\n            continue\\n        for r in range(s):\\n            if x == n - 1:\\n                break\\n            if r + 1 == s:\\n                return False\\n            x = x * x % n\\n    return True\\n\\nN = int(input())\\n\\nif miller_rabin(N):\\n    print(1)\\n    print(N)\\nelif miller_rabin(N-2):\\n    print(2)\\n    print(2, N-2)\\nelif miller_rabin(N-4):\\n    print(3)\\n    print(2, 2, N-4)\\nelse:\\n    i = 3\\n    while True:\\n        if miller_rabin(i):\\n            if miller_rabin((N-i)//2):\\n                print(3)\\n                print(i, (N-i)//2, (N-i)//2)\\n                break\\n            elif miller_rabin(N-2*i):\\n                print(3)\\n                print(i, i, N-2*i)\\n                break\\n        i += 2\\n\", \"import math\\n\\ndef is_prime(x):\\n    for i in range(2, int(math.sqrt(x)) + 1):\\n        if x % i == 0:\\n            return False\\n    return True\\ndef decomposition(even):\\n    if even == 4: return 2, 2\\n    for i in range(even - 3, int(math.sqrt(even)) - 1, -2):\\n        if is_prime(i) and is_prime(even - i):\\n            return i, even - i\\n\\nn = int(input())\\nif is_prime(n): \\n    print(1)\\n    print(n)\\nelse:\\n    for i in range(n, 3, -2):\\n        if is_prime(i):\\n            if n - i == 2:\\n                print(2)\\n                print(i, 2)\\n                break\\n            else:\\n                print(3)\\n                print(i, *decomposition(n - i))\\n                break\\n\", \"import math\\ndef is_prime(a):\\n    n=math.sqrt(a)\\n    n=int(n)+1\\n    return all(a % i for i in range(2, n))\\ndef sieves(n):\\n    size = n//2\\n    sieve = [1]*size\\n    limit = int(n**0.5)\\n    for i in range(1,limit):\\n        if sieve[i]:\\n            val = 2*i+1\\n            tmp = ((size-1) - i)//val \\n            sieve[i+val::val] = [0]*tmp\\n    return [2] + [i*2+1 for i, v in enumerate(sieve) if v and i>0]\\npri=sieves(400)\\nn=int(input())\\nfor i in range(n,1,-2):\\n    if is_prime(i):\\n        primes=i\\n        break\\n\\nans=[]\\nno=1\\nif n==primes:\\n    ans=[n]\\n    no=1\\n\\nelif primes+2==n:\\n    ans=[2,primes]\\n    no=2\\nelse:\\n    k=n-primes\\n    for i in pri:\\n        for j in pri:\\n            if i+j==k:\\n                ans=[primes,i,j]\\n                no=3\\nprint(no)\\nfor i in ans:\\n    print(i,end=' ')\", \"def isPrime(n):\\n    if n==2:\\n        return True\\n    if n%2==0:\\n        return False\\n    for i in range(3,n,2):\\n        if i*i>n:\\n            break\\n        if n%i==0:\\n            return False\\n    return True\\nn=int(input())\\nif isPrime(n):\\n    print(1)\\n    print(n)\\nelif isPrime(n-2):\\n    print(2)\\n    print('2 '+str(n-2))\\nelse:\\n    print(3)\\n    for i in range(2,n-3):\\n        if i>2 and i%2==0:\\n            continue\\n        if n-3-i<i:\\n            break\\n        if isPrime(i) and isPrime(n-3-i):\\n            print('3 '+str(i)+' '+str(n-3-i))\\n            break\", \"def isPrime(x) :\\n    if x == 1: return False\\n    if x == 2: return True\\n    if x%2 == 0: return False\\n\\n    i = 3\\n    while i*i <= x :\\n        if x % i == 0 :\\n            return False\\n        i += 2\\n    return True\\n    \\nn = int(input())\\nif isPrime(n) :\\n    ans = [n]\\nelse :\\n    bigPrime = 0\\n    for i in range(n-1, 0, -1) :\\n        if isPrime(i) :\\n            bigPrime = i\\n            break\\n\\n    ans = [bigPrime]\\n    n -= bigPrime\\n\\n    if isPrime(n) :\\n        ans.append(n)\\n    else :\\n        for i in range(1, n) :\\n            j = n - i\\n            if isPrime(i) and isPrime(j) :\\n                ans.append(i)\\n                ans.append(j)\\n                break\\n\\nprint(len(ans))\\nfor i in ans :\\n    print(i, end = ' ')\\n\\n\", \"import math\\n\\n\\ndef prime(x):\\n    if x == 1:\\n        return False\\n    for i in range(2, math.floor(math.sqrt(x)) + 1):\\n        if x % i == 0:\\n            return False\\n    return True\\n\\nn = int(input())\\n\\nif prime(n):\\n    print(1)\\n    print(n)\\nelif prime(n - 2):\\n    print(2)\\n    print(n - 2, 2)\\nelif prime(n - 3):\\n    print(2)\\n    print(n - 3, 3)\\nelse:\\n    x = n - 4\\n    while not prime(x):\\n        x -= 1\\n\\n    rest = n - x\\n\\n    y = rest - 1\\n    while not prime(y) or not prime(rest - y):\\n        y -= 1\\n    print(3)\\n    print(x, y, rest - y)\\n\", \"import math\\nn = int(input())\\nprimes = [2]\\nfor i in range(3, math.ceil(n ** 0.5) + 1):\\n    for p in primes:\\n        if i % p == 0:\\n            break\\n    else:\\n        primes.append(i)\\n\\ndef isprime(x): #x < n\\n    if x == 1: return False\\n    for p in primes:\\n        if x % p == 0 and x > p:\\n            return False\\n    else:\\n        return True\\n\\nif isprime(n):\\n    print(1)\\n    print(n)\\nelse:\\n    x1 = n\\n    while not isprime(x1):\\n        x1 -=2\\n    if isprime(n - x1):\\n        print(2)\\n        print(x1, n - x1)\\n    else:\\n        l = n - x1\\n        for x2 in primes:\\n            if isprime(l - x2):\\n                print(3)\\n                print(x1, x2, l - x2)\\n                break\\n        else:\\n            print('nu chto podelat...')\\n\", \"def main():\\n    n = int(input())\\n    limit = int(n ** .5) + 1\\n    lim12 = max(limit, 12)\\n    lim = lim12 // 6\\n    sieve = [False, True, True] * lim\\n    lim = lim * 3 - 1\\n    for i, s in enumerate(sieve):\\n        if s:\\n            p, pp = i * 2 + 3, (i + 3) * i * 2 + 3\\n            le = (lim - pp) // p + 1\\n            if le > 0:\\n                sieve[pp::p] = [False] * le\\n            else:\\n                break\\n    sieve[3] = True\\n    primes = [i for i, s in zip(list(range(3, lim12, 2)), sieve) if s]\\n    for i, p in enumerate((3, 5, 7)):\\n        primes[i] = p\\n    while primes and primes[-1] >= limit:\\n        del primes[-1]\\n    for x in n, n - 2, n - 4:\\n        for p in primes:\\n            if not x % p:\\n                break\\n        else:\\n            print((n - x) // 2 + 1)\\n            print(x, *([2] * ((n - x) // 2)))\\n            return\\n    for a in range(n // 2 | 1, n, 2):\\n        for p in primes:\\n            if not a % p:\\n                break\\n        else:\\n            for c in primes:\\n                b = n - a - c\\n                if b < 3:\\n                    break\\n                for p in primes:\\n                    if not b % p:\\n                        break\\n                else:\\n                    print(3)\\n                    print(a, b, c)\\n                    return\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def main():\\n    n = int(input())\\n    limit = int(n ** .5) + 1\\n    lim12 = max(limit, 12)\\n    lim = lim12 // 6\\n    l = [False, True, True] * lim\\n    lim = lim * 3 - 1\\n    for i, s in enumerate(l):\\n        if s:\\n            p, pp = i * 2 + 3, (i + 3) * i * 2 + 3\\n            le = (lim - pp) // p + 1\\n            if le > 0:\\n                l[pp::p] = [False] * le\\n            else:\\n                break\\n    l[3] = True\\n    primes = [i for i, s in zip(list(range(3, lim12, 2)), l) if s]\\n    for i, p in enumerate((3, 5, 7)):\\n        primes[i] = p\\n    res = False\\n    for x in n, n - 2, n - 4:\\n        if x > primes[-1]:\\n            for p in primes:\\n                if not x % p:\\n                    break\\n            else:\\n                res = True\\n        else:\\n            res = x in primes\\n        if res:\\n            print((n - x) // 2 + 1)\\n            print(x, *([2] * ((n - x) // 2)))\\n            return\\n    l = []\\n    for b in primes:\\n        l.append(b)\\n        for c in l:\\n            a = n - b - c\\n            for p in primes:\\n                if not a % p:\\n                    break\\n            else:\\n                print(3)\\n                print(a, b, c)\\n                return\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def main():\\n    n = int(input())\\n    limit = int(n ** .5) + 1\\n    lim12 = max(limit, 12)\\n    lim = lim12 // 6\\n    l = [False, True, True] * lim\\n    lim = lim * 3 - 1\\n    for i, s in enumerate(l):\\n        if s:\\n            p, pp = i * 2 + 3, (i + 3) * i * 2 + 3\\n            le = (lim - pp) // p + 1\\n            if le > 0:\\n                l[pp::p] = [False] * le\\n            else:\\n                break\\n    l[3] = True\\n    primes = [i for i, s in zip(list(range(3, lim12, 2)), l) if s]\\n    for i, p in enumerate((3, 5, 7)):\\n        primes[i] = p\\n    res = False\\n    for x in n, n - 2, n - 4:\\n        if x > primes[-1]:\\n            for p in primes:\\n                if not x % p:\\n                    break\\n            else:\\n                res = True\\n        else:\\n            res = x in primes\\n        if res:\\n            print((n - x) // 2 + 1)\\n            print(x, *([2] * ((n - x) // 2)))\\n            return\\n    l, cache = [], set()\\n    for b in primes:\\n        l.append(b)\\n        for c in l:\\n            a = n - b - c\\n            if a not in cache:\\n                for p in primes:\\n                    if not a % p:\\n                        cache.add(a)\\n                        break\\n                else:\\n                    print(3)\\n                    print(a, b, c)\\n                    return\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def mp():  return list(map(int,input().split()))\\ndef lt():  return list(map(int,input().split()))\\ndef pt(x):  print(x)\\ndef ip():  return input()\\ndef it():  return int(input())\\ndef sl(x):  return [t for t in x]\\ndef spl(x): return x.split()\\ndef aj(liste, item): liste.append(item)\\ndef bin(x):  return \\\"{0:b}\\\".format(x)\\ndef printlist(l): print(' '.join([str(x) for x in l]))\\ndef listring(l): return ''.join([str(x) for x in l])\\n\\ndef isPrime(n):\\n    if n == 2 or n == 3:\\n        return True\\n    if n < 2:\\n        return False\\n    if n % 2 == 0 or n % 3 == 0:\\n        return False\\n    if n < 10:\\n        return True\\n    p = 5\\n    while p <= int(n**0.5):\\n        if n % p == 0 or n % (p+2) == 0:\\n            return False\\n        p += 6\\n    return True\\nn = it()\\nif isPrime(n):\\n    print(1)\\n    print(n)\\nelif isPrime(n-2):\\n    print(2)\\n    print(\\\"2 %d\\\" % (n-2))\\nelse:\\n    r = 4\\n    while not isPrime(n-r):\\n        r += 2\\n    if r == 4:\\n        p,q = 2,2\\n    elif r == 6:\\n        p,q = 3,3\\n    elif r == 8:\\n        p,q = 3,5\\n    elif r == 10:\\n        p,q = 5,5\\n    elif r == 12:\\n        p,q = 5,7\\n    else:\\n        if isPrime(r-3):\\n            p,q = 3,r-3\\n        else:\\n            p = 5\\n            while not (isPrime(r-p) and isPrime(p)) and not (isPrime(r-p-2) and isPrime(p+2)):\\n                p += 6\\n            if isPrime(p) and isPrime(r-p):\\n                p,q = p,r-p\\n            else:\\n                p,q = p+2,r-p-2\\n    print(3)\\n    print(\\\"%d %d %d\\\" % (n-r,p,q))\\n\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"27\\n\",\n    \"3\\n\",\n    \"25\\n\",\n    \"9\\n\",\n    \"91\\n\",\n    \"57\\n\",\n    \"31\\n\",\n    \"555\\n\",\n    \"700000001\\n\",\n    \"5\\n\",\n    \"7\\n\",\n    \"11\\n\",\n    \"13\\n\",\n    \"15\\n\",\n    \"17\\n\",\n    \"19\\n\",\n    \"21\\n\",\n    \"23\\n\",\n    \"29\\n\",\n    \"79\\n\",\n    \"99\\n\",\n    \"27\\n\",\n    \"55\\n\",\n    \"79\\n\",\n    \"585\\n\",\n    \"245\\n\",\n    \"793\\n\",\n    \"133\\n\",\n    \"681\\n\",\n    \"981399\\n\",\n    \"867773\\n\",\n    \"654141\\n\",\n    \"202985\\n\",\n    \"784533\\n\",\n    \"370359\\n\",\n    \"396831\\n\",\n    \"492211\\n\",\n    \"838347\\n\",\n    \"1098945\\n\",\n    \"1313565\\n\",\n    \"1349631\\n\",\n    \"1357299\\n\",\n    \"1357323\\n\",\n    \"1357329\\n\",\n    \"1388581\\n\",\n    \"5275\\n\",\n    \"9515\\n\",\n    \"7847\\n\",\n    \"7077\\n\",\n    \"9531\\n\",\n    \"7865\\n\",\n    \"9675\\n\",\n    \"8909\\n\",\n    \"7147\\n\",\n    \"8487\\n\",\n    \"436273289\\n\",\n    \"649580445\\n\",\n    \"944193065\\n\",\n    \"630045387\\n\",\n    \"931103229\\n\",\n    \"950664039\\n\",\n    \"996104777\\n\",\n    \"997255617\\n\",\n    \"999962901\\n\",\n    \"999995529\\n\",\n    \"999995339\\n\",\n    \"999998367\\n\",\n    \"999999891\\n\",\n    \"999999935\\n\",\n    \"999999755\\n\",\n    \"999999759\\n\",\n    \"999999191\\n\",\n    \"999999999\\n\",\n    \"409449117\\n\",\n    \"882499837\\n\",\n    \"765615965\\n\",\n    \"648732093\\n\",\n    \"826815517\\n\",\n    \"4898941\\n\",\n    \"182982365\\n\",\n    \"66098493\\n\",\n    \"539149213\\n\",\n    \"655957385\\n\",\n    \"199999581\\n\",\n    \"199998345\\n\",\n    \"199991935\\n\",\n    \"199986207\\n\",\n    \"499991589\\n\",\n    \"499984689\\n\",\n    \"499984159\\n\",\n    \"499966179\\n\",\n    \"999995529\\n\",\n    \"999995085\\n\",\n    \"999991817\\n\",\n    \"999991797\\n\",\n    \"999991791\\n\",\n    \"748859699\\n\",\n    \"323845235\\n\",\n    \"462409937\\n\",\n    \"618047403\\n\",\n    \"501148647\\n\",\n    \"998017623\\n\",\n    \"436273289\\n\",\n    \"999999965\\n\",\n    \"5\\n\",\n    \"1000037\\n\",\n    \"989898987\\n\",\n    \"999999999\\n\",\n    \"100000003\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n2 2 23\",\n    \"1\\n3\",\n    \"2\\n2 23\",\n    \"2\\n2 7\",\n    \"2\\n2 89\",\n    \"3\\n2 2 53\",\n    \"1\\n31\",\n    \"3\\n3 5 547\",\n    \"1\\n700000001\",\n    \"1\\n5\",\n    \"1\\n7\",\n    \"1\\n11\",\n    \"1\\n13\",\n    \"2\\n2 13\",\n    \"1\\n17\",\n    \"1\\n19\",\n    \"2\\n2 19\",\n    \"1\\n23\",\n    \"1\\n29\",\n    \"1\\n79\",\n    \"2\\n2 97\",\n    \"3\\n2 2 23\",\n    \"2\\n2 53\",\n    \"1\\n79\",\n    \"3\\n3 5 577\",\n    \"3\\n2 2 241\",\n    \"3\\n3 3 787\",\n    \"2\\n2 131\",\n    \"3\\n2 2 677\",\n    \"2\\n2 981397\",\n    \"1\\n867773\",\n    \"3\\n3 11 654127\",\n    \"3\\n2 2 202981\",\n    \"3\\n3 17 784513\",\n    \"3\\n19 79 370261\",\n    \"3\\n19 79 396733\",\n    \"3\\n19 79 492113\",\n    \"3\\n19 79 838249\",\n    \"3\\n19 79 1098847\",\n    \"3\\n19 79 1313467\",\n    \"3\\n19 79 1349533\",\n    \"3\\n19 79 1357201\",\n    \"3\\n13 109 1357201\",\n    \"3\\n19 109 1357201\",\n    \"3\\n19 79 1388483\",\n    \"2\\n2 5273\",\n    \"3\\n2 2 9511\",\n    \"3\\n3 3 7841\",\n    \"3\\n3 5 7069\",\n    \"3\\n3 7 9521\",\n    \"3\\n5 7 7853\",\n    \"3\\n3 11 9661\",\n    \"3\\n3 13 8893\",\n    \"3\\n5 13 7129\",\n    \"3\\n3 17 8467\",\n    \"3\\n3 277 436273009\",\n    \"3\\n3 271 649580171\",\n    \"3\\n7 251 944192807\",\n    \"3\\n11 239 630045137\",\n    \"3\\n3 223 931103003\",\n    \"3\\n3 197 950663839\",\n    \"3\\n7 173 996104597\",\n    \"3\\n7 157 997255453\",\n    \"3\\n19 109 999962773\",\n    \"3\\n19 79 999995431\",\n    \"3\\n5 43 999995291\",\n    \"3\\n5 23 999998339\",\n    \"3\\n3 5 999999883\",\n    \"3\\n3 3 999999929\",\n    \"3\\n2 2 999999751\",\n    \"2\\n2 999999757\",\n    \"1\\n999999191\",\n    \"3\\n3 59 999999937\",\n    \"3\\n2 2 409449113\",\n    \"3\\n3 3 882499831\",\n    \"3\\n5 23 765615937\",\n    \"3\\n3 11 648732079\",\n    \"3\\n3 11 826815503\",\n    \"2\\n2 4898939\",\n    \"3\\n5 13 182982347\",\n    \"3\\n3 41 66098449\",\n    \"1\\n539149213\",\n    \"3\\n3 13 655957369\",\n    \"3\\n19 79 199999483\",\n    \"3\\n19 79 199998247\",\n    \"3\\n19 79 199991837\",\n    \"3\\n19 79 199986109\",\n    \"3\\n19 79 499991491\",\n    \"3\\n19 79 499984591\",\n    \"3\\n19 79 499984061\",\n    \"3\\n19 79 499966081\",\n    \"3\\n19 79 999995431\",\n    \"3\\n19 79 999994987\",\n    \"3\\n11 137 999991669\",\n    \"3\\n19 109 999991669\",\n    \"3\\n13 109 999991669\",\n    \"3\\n3 3 748859693\",\n    \"3\\n3 3 323845229\",\n    \"3\\n2 2 462409933\",\n    \"3\\n3 13 618047387\",\n    \"3\\n2 2 501148643\",\n    \"2\\n2 998017621\",\n    \"3\\n3 277 436273009\",\n    \"3\\n5 23 999999937\",\n    \"1\\n5\",\n    \"1\\n1000037\",\n    \"3\\n2 2 989898983\",\n    \"3\\n3 59 999999937\",\n    \"3\\n3 11 99999989\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/584/D",
  "starter_code": ""
}