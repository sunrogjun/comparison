{
  "task_id": "APPS/201",
  "problem_id": 201,
  "prompt": "A sweet little monster Om Nom loves candies very much. One day he found himself in a rather tricky situation that required him to think a bit in order to enjoy candies the most. Would you succeed with the same task if you were on his place? [Image] \n\nOne day, when he came to his friend Evan, Om Nom didn't find him at home but he found two bags with candies. The first was full of blue candies and the second bag was full of red candies. Om Nom knows that each red candy weighs W_{r} grams and each blue candy weighs W_{b} grams. Eating a single red candy gives Om Nom H_{r} joy units and eating a single blue candy gives Om Nom H_{b} joy units.\n\nCandies are the most important thing in the world, but on the other hand overeating is not good. Om Nom knows if he eats more than C grams of candies, he will get sick. Om Nom thinks that it isn't proper to leave candy leftovers, so he can only eat a whole candy. Om Nom is a great mathematician and he quickly determined how many candies of what type he should eat in order to get the maximum number of joy units. Can you repeat his achievement? You can assume that each bag contains more candies that Om Nom can eat.\n\n\n-----Input-----\n\nThe single line contains five integers C, H_{r}, H_{b}, W_{r}, W_{b} (1 \u2264 C, H_{r}, H_{b}, W_{r}, W_{b} \u2264 10^9).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum number of joy units that Om Nom can get.\n\n\n-----Examples-----\nInput\n10 3 5 2 3\n\nOutput\n16\n\n\n\n-----Note-----\n\nIn the sample test Om Nom can eat two candies of each type and thus get 16 joy units.",
  "solutions": "[\"import sys\\nf = sys.stdin\\n\\nC, Hr, Hb, Wr, Wb = map(int, f.readline().strip().split())\\n\\nif Hr/Wr < Hb/Wb:\\n    Hr, Hb, Wr, Wb = Hb, Hr, Wb, Wr\\n\\nif (C % Wr) == 0 and (C // Wr) > 0:\\n    print((C // Wr)*Hr)\\n    \\nelif (C // Wr) == 0:\\n    print((C // Wb)*Hb)\\n\\nelse:\\n    nmax =  (C // Wr)\\n    pmax = nmax*Hr + ((C - nmax*Wr) // Wb) * Hb\\n    dmax = ((C - (nmax-0)*Wr) % Wb)\\n    #print(0, pmax, dmax)\\n    \\n    #\\n    #pm1 = (nmax-1)*Hr + ((C - (nmax-1)*Wr) // Wb) * Hb \\n    #if pm1>pmax:\\n    #    pmax = pm1\\n    if  Hr/Wr > Hb/Wb:\\n        dx = dmax * (Hb/Wb) / (Hr/Wr - Hb/Wb)    \\n    elif  Hr/Wr < Hb/Wb: \\n        dx = 0 \\n    else:\\n        dx = Wb * Wr\\n        if Wr<Wb:\\n            nmax =  (C // Wb)\\n            pmax = nmax*Hb + ((C - nmax*Wb) // Wr) * Hr   \\n        if Wr>Wb:\\n            nmax =  (C // Wr)\\n            pmax = nmax*Hr + ((C - nmax*Wr) // Wb) * Hb   \\n            \\n    if Wr>Wb and dx>0:    \\n        for k in range(1, C//Wr):\\n            if k*Wr > dx:\\n                break\\n            pk = (nmax-k)*Hr + ((C - (nmax-k)*Wr) // Wb) * Hb \\n            dk = ((C - (nmax-k)*Wr) % Wb)\\n            #print(k, pmax, pk, dk)\\n            if pk>pmax:\\n                pmax = pk\\n            if dk==0 :\\n                break\\n    elif Wr<Wb and dx>0:   \\n        for j in range(1, C//Wb+1):\\n            k = nmax - (C-j*Wb)//Wr\\n            if k*Wr > dx:\\n                break\\n            \\n            pk = (nmax-k)*Hr + ((C - (nmax-k)*Wr) // Wb) * Hb \\n            dk = ((C - (nmax-k)*Wr) % Wb)\\n            #print(j, k, pmax, pk, dk, (nmax-k), ((C - (nmax-k)*Wr) // Wb) )\\n            if pk>pmax:\\n                pmax = pk\\n                #dmax = dk\\n            if dk==0 :\\n                break            \\n            \\n#    elif Wr<Wb and dx>0:   \\n#        for j in range(1, C//Wb+1):\\n#            k = (j*Wb - dmax)//Wr\\n#            if k*Wr > dx:\\n#                break\\n#            pk = (nmax-k)*Hr + ((C - (nmax-k)*Wr) // Wb) * Hb \\n#            dk = ((C - (nmax-k)*Wr) % Wb)\\n#            print(j, k, pmax, pk, dk, (nmax-k), ((C - (nmax-k)*Wr) // Wb) )\\n#            if pk>pmax:\\n#                pmax = pk\\n#                #dmax = dk\\n#            if dk==0 :\\n#                break\\n            \\n    print(pmax)    \", \"m, h1, h2, w1, w2 = map(int, input().split())\\nif h2 / w2 > h1 / w1:\\n    h1, h2 = h2, h1\\n    w1, w2 = w2, w1\\nif w1 ** 2 >= m:\\n    res = 0\\n    for i in range(int(m ** 0.5 + 1)):\\n        if i * w1 <= m:\\n            new = i * h1 + (m - w1 * i) // w2 * h2\\n            res = max(res, new)\\n    print(res)\\n    return\\nres = 0\\nfor i in range(int(m ** 0.5 + 5)):\\n    new_res = i * h2 + ((m - i * w2) // w1) * h1\\n    res = max(res, new_res)\\nprint(res)\", \"a, b, c, d, e = list(map(int, input().split(' ')))\\ncheck = int(a**0.5)\\n\\n#red candy\\n#height b\\n#weight d\\n\\n#blue candy\\n#height c\\n#weight e\\n\\nans = 0\\nfor red in range(check+1):\\n    blue = (a-d*red)//(e)\\n    if blue >= 0:\\n        ans = max(ans, red*b+blue*c)\\n\\nfor blue in range(check+1):\\n    red = (a-e*blue)//(d)\\n    if red >= 0:\\n        ans = max(ans, red*b+blue*c)\\n\\nprint(ans)\", \"c, hr, hb, wr, wb = map(int, input().split())\\ns = 0\\n\\nif wb < wr: hr, hb, wr, wb = hb, hr, wb, wr\\nif wb * wb > c:\\n    for nb in range(c // wb + 1):\\n        s = max(s, nb * hb + hr * ((c - wb * nb) // wr))\\nelse:\\n    if hr * wb < hb * wr: hr, hb, wr, wb = hb, hr, wb, wr\\n\\n    for nb in range(min(31625, c // wb + 1)):\\n        s = max(s, nb * hb + hr * ((c - wb * nb) // wr))\\nprint(s)\", \"import math\\ndef solve(c,hr,hb,wr,wb):\\n    INF = math.ceil(math.sqrt(c))\\n    if wb > wr:\\n        wb,wr = wr,wb\\n        hb,hr = hr,hb\\n    if wr > INF:\\n        ans = 0\\n        i = 0\\n        while i * wr <= c and i < INF:\\n            ans = max(ans,i * hr + ((c - i * wr) // wb) * hb)\\n            i+=1\\n        return ans\\n    else:\\n        if wr * hb > hr * wb:\\n            wb,wr = wr,wb\\n            hb,hr = hr,hb\\n        ans = 0\\n        j = 0\\n        while j * wb <= c and j <= wr:\\n            ans = max(ans,j * hb + ((c - j * wb) // wr) * hr)\\n            j+=1\\n        return ans\\n\\nc,hr,hb,wr,wb = list(map(int,input().split()))\\nprint(solve(c,hr,hb,wr,wb))\\n\", \"__author__ = 'trunghieu11'\\n\\ndef calc(n, h1, h2, w1, w2):\\n    answer = 0\\n    len = n // w1\\n    for i in range(0, min(len, 100000) + 1):\\n        answer = max(answer, i * h1 + (n - i * w1) // w2 * h2)\\n    return answer\\n\\nn, hR, hB, wR, wB = map(int, input().split())\\nprint(max(calc(n, hR, hB, wR, wB), calc(n, hB, hR, wB, wR)))\", \"def main():\\n    c, hr, hb, wr, wb = (int(i) for i in input().split())\\n\\n    if wb < c**(1/2) > wr:\\n        if hr / wr < hb / wb:\\n            wr, hr, wb, hb = wb, hb, wr, hr\\n        mx = 0\\n        for i in range(wr + 1):\\n            tmx = i * hb + ((c - i * wb) // wr) * hr\\n            mx  = tmx if tmx > mx else mx\\n    else:\\n        if wr <= wb:\\n            wr, hr, wb, hb = wb, hb, wr, hr\\n        nr = 0\\n        mx = 0\\n        while nr * wr <= c:\\n            tmx = nr * hr + ((c - nr * wr) // wb) * hb\\n            mx = tmx if tmx > mx else mx\\n            nr += 1\\n\\n    print(mx)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"import math\\nc,hr,hb,wr,wb = list(map(int,input().split()))\\nif wr < wb:\\n    wr, wb = wb, wr\\n    hr, hb = hb, hr\\nans = 0\\nif wr * wr >= c:\\n    for i in range(c//wr+1):\\n        ans = max(ans, i*hr+(c-i*wr)//wb*hb)\\nelse:\\n    if hr*wb < hb*wr:\\n        wr, wb = wb, wr\\n        hr, hb = hb, hr\\n    for i in range (wr):\\n        ans = max(ans, i*hb+(c-i*wb)//wr*hr)\\nprint(ans)\\n        \\n\\n\", \"import math\\nc,hr,hb,wr,wb = map(int,input().split())\\nif wr < wb:\\n    wr, wb = wb, wr\\n    hr, hb = hb, hr\\nans = 0\\nif wr * wr >= c:\\n    for i in range(c//wr+1):\\n        ans = max(ans, i*hr+(c-i*wr)//wb*hb)\\nelse:\\n    if hr*wb < hb*wr:\\n        wr, wb = wb, wr\\n        hr, hb = hb, hr\\n    for i in range (wr):\\n        ans = max(ans, i*hb+(c-i*wb)//wr*hr)\\nprint(ans)\", \"def main():\\n    c, hr, hb, wr, wb = map(int, input().split())\\n    ans = 0\\n    for i in range(10**6 + 1):\\n        if i * wr <= c:\\n            ans = max(ans, i * hr + ((c - i * wr) // wb) * hb)\\n        if i * wb <= c:\\n            ans = max(ans, i * hb + ((c - i * wb) // wr) * hr)\\n    print(ans)\\n\\n\\n\\n\\n\\nmain()\", \"C, Hr, Hb, Wr, Wb = map(int, input().split())\\nans = 0\\nfor i in range(10 ** 5):\\n    if Wr * i <= C:\\n        ans = max(ans, Hr * i + (C - Wr * i) // Wb * Hb)\\nfor i in range(10 ** 5):\\n    if Wb * i <= C:\\n        ans = max(ans, Hb * i + (C - Wb * i) // Wr * Hr)\\nprint(ans)\", \"C, Hr, Hb, Wr, Wb = map(int, input().split())\\nans = 0\\nfor i in range(3 * 10 ** 5):\\n    if Wr * i <= C:\\n        ans = max(ans, Hr * i + (C - Wr * i) // Wb * Hb)\\nfor i in range(3 * 10 ** 5):\\n    if Wb * i <= C:\\n        ans = max(ans, Hb * i + (C - Wb * i) // Wr * Hr)\\nprint(ans)\", \"C, Hr, Hb, Wr, Wb = map(int, input().split())\\nans = 0\\nfor i in range(5 * 10 ** 5):\\n    if Wr * i <= C:\\n        ans = max(ans, Hr * i + (C - Wr * i) // Wb * Hb)\\nfor i in range(5 * 10 ** 5):\\n    if Wb * i <= C:\\n        ans = max(ans, Hb * i + (C - Wb * i) // Wr * Hr)\\nprint(ans)\", \"import math\\nc,x,y,a,b = list(map(int,input().split()))\\nlim = int(math.sqrt(c))\\nans = 0\\nfor i in range(lim):\\n    if(c>=i*a):\\n        ans = max(ans,x*i+(c-i*a)//b*y)\\n    if(c>=i*b):\\n        ans = max(ans,y*i+(c-i*b)//a*x)\\nprint(ans)\\n\\n\\n\\n\", \"import math\\n\\nc, hr, hb, wr, wb = map(int, input().split())\\ns = int(math.sqrt(c))\\nans = 0\\nfor i in range(s):\\n    if c >= i * wr:\\n        ans = max(ans, hr * i + (c - i * wr) // wb * hb)\\n    if c >= i * wb:\\n        ans = max(ans, hb * i + (c - i * wb) // wr * hr)\\n\\nprint(ans)\", \"# -*- coding: utf-8 -*-\\n\\n#max_grams = 10 \\n#weight_r = 3 \\n#joy_r = 5 \\n#weight_b = 2 \\n#joy_b = 3\\n\\n\\ndef max_joy(max_grams, weight_r, joy_r, weight_b, joy_b, jollies, memoiser): \\n    if max_grams < 0: \\n        return 0\\n    \\n    if max_grams == 0: \\n        return jollies\\n    \\n    if (str(max_grams) in memoiser): \\n        if jollies >= memoiser[str(max_grams)]: \\n            return 0\\n    \\n    memoiser[str(max_grams)] = jollies\\n    \\n    \\n    res1 = max_joy(max_grams - weight_r, weight_r, joy_r, weight_b, joy_b, jollies + joy_r, memoiser) \\n    res2 = max_joy(max_grams - weight_b, weight_r, joy_r, weight_b, joy_b, jollies + joy_b, memoiser) \\n    \\n    return max(res1, res2)\\n\\ndef main(): \\n   # max_grams, weight_r, joy_r, weight_b, joy_b = [int(x) for x in input().split()]\\n    max_grams = 982068341 \\n    weight_r = 55 \\n    joy_r = 57 \\n    weight_b = 106 \\n    joy_b = 109\\n    memoiser = {}\\n    jollies = 0\\n    res = max_joy(max_grams, weight_r, joy_r, weight_b, joy_b, jollies, memoiser)\\n    print(res)\\n\\n#main()\\n\\nimport math\\nc,x,y,a,b = map(int,input().split())\\nlim = int(math.sqrt(c))\\nans = 0\\nfor i in range(lim):\\n    if(c>=i*a):\\n        ans = max(ans,x*i+(c-i*a)//b*y)\\n    if(c>=i*b):\\n        ans = max(ans,y*i+(c-i*b)//a*x)\\nprint(ans)\", \"C, Hr, Hb, Wr, Wb = list(map(int, input().split()))\\n\\nans = 0\\n\\nfor i in range(10 ** 5):\\n\\n    if Wr * i <= C:\\n\\n        ans = max(ans, Hr * i + (C - Wr * i) // Wb * Hb)\\n\\nfor i in range(10 ** 5):\\n\\n    if Wb * i <= C:\\n\\n        ans = max(ans, Hb * i + (C - Wb * i) // Wr * Hr)\\n\\nprint(ans)\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"C, Pr, Pb, Wr, Wb = list(map(int, input().split()))\\nresult = 0\\nif Wr * Wr >= C:\\n    i = 0\\n    while Wr * i <= C:\\n        j = int((C - Wr * i) / Wb)\\n        result = max(result, Pr * i + Pb * j)\\n        i += 1\\n    print(result)\\n    return\\n\\nif Wb * Wb >= C:\\n    i = 0\\n    while Wb * i <= C:\\n        j = int((C - Wb * i) / Wr)\\n        result = max(result, Pb * i + Pr * j)\\n        i += 1\\n    print(result)\\n    return\\n\\nAb = Pb / Wb\\nAr = Pr / Wr\\n\\nif Ab < Ar:\\n    i = 0\\n    while i * i <= C:\\n        j = int((C - Wb * i) / Wr)\\n        result = max(result, Pb * i + Pr * j)\\n        i += 1\\n    print(result)\\nelse:\\n    i = 0\\n    while i * i <= C:\\n        j = int((C - Wr * i) / Wb)\\n        result = max(result, Pr * i + Pb * j)\\n        i += 1\\n    print(result)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"10 3 5 2 3\\n\",\n    \"5 3 1 6 7\\n\",\n    \"982068341 55 57 106 109\\n\",\n    \"930064129 32726326 25428197 83013449 64501049\\n\",\n    \"927155987 21197 15994 54746 41309\\n\",\n    \"902303498 609628987 152407246 8 2\\n\",\n    \"942733698 9180 9072 1020 1008\\n\",\n    \"951102310 39876134 24967176 70096104 43888451\\n\",\n    \"910943911 107 105 60 59\\n\",\n    \"910943911 38162 31949 67084 56162\\n\",\n    \"910943911 9063 9045 1007 1005\\n\",\n    \"903796108 270891702 270891702 1 1\\n\",\n    \"936111602 154673223 309346447 1 2\\n\",\n    \"947370735 115930744 347792233 1 3\\n\",\n    \"958629867 96557265 386229061 1 4\\n\",\n    \"969889000 84931386 424656931 1 5\\n\",\n    \"925819493 47350513 28377591 83230978 49881078\\n\",\n    \"934395168 119 105 67 59\\n\",\n    \"934395168 29208 38362 51342 67432\\n\",\n    \"934395168 9171 9045 1019 1005\\n\",\n    \"946401698 967136832 483568416 2 1\\n\",\n    \"962693577 967217455 967217455 2 2\\n\",\n    \"989976325 646076560 969114840 2 3\\n\",\n    \"901235456 485501645 971003291 2 4\\n\",\n    \"912494588 389153108 972882772 2 5\\n\",\n    \"995503930 29205027 18903616 51333090 33226507\\n\",\n    \"983935533 115 108 65 61\\n\",\n    \"983935533 33986 27367 59737 48104\\n\",\n    \"983935533 7105 7056 1015 1008\\n\",\n    \"994040035 740285170 246761723 3 1\\n\",\n    \"905299166 740361314 493574209 3 2\\n\",\n    \"911525551 740437472 740437472 3 3\\n\",\n    \"922784684 566833132 755777509 3 4\\n\",\n    \"955100178 462665160 771108601 3 5\\n\",\n    \"949164751 36679609 23634069 64467968 41539167\\n\",\n    \"928443151 60 63 106 112\\n\",\n    \"928443151 25031 33442 43995 58778\\n\",\n    \"928443151 1006 1012 1006 1012\\n\",\n    \"936645623 540336743 135084185 4 1\\n\",\n    \"947904756 540408420 270204210 4 2\\n\",\n    \"959163888 540480074 405360055 4 3\\n\",\n    \"970423020 540551739 540551739 4 4\\n\",\n    \"976649406 455467553 569334442 4 5\\n\",\n    \"923881933 18531902 53987967 32570076 94884602\\n\",\n    \"977983517 57 63 101 112\\n\",\n    \"977983517 29808 22786 52389 40047\\n\",\n    \"977983517 9009 9108 1001 1012\\n\",\n    \"984283960 367291526 73458305 5 1\\n\",\n    \"990510345 367358723 146943489 5 2\\n\",\n    \"901769477 367425909 220455545 5 3\\n\",\n    \"907995862 367493085 293994468 5 4\\n\",\n    \"924287742 367560271 367560271 5 5\\n\",\n    \"1000000000 1000 999 100 1000000000\\n\",\n    \"999999999 10 499999995 2 99999999\\n\",\n    \"999999999 1 1000000000 2 1000000000\\n\",\n    \"999999997 2 999999997 2 999999997\\n\",\n    \"1000000000 1 1 11 11\\n\",\n    \"999999999 999999998 5 999999999 5\\n\",\n    \"100000001 3 100000000 3 100000001\\n\",\n    \"999999999 2 3 1 2\\n\",\n    \"1000000000 2 1 3 4\\n\",\n    \"999999999 10000 494999 2 99\\n\",\n    \"1000000000 1 1 1 1\\n\",\n    \"998999 1000 999 1000 999\\n\",\n    \"3 100 101 2 3\\n\",\n    \"345415838 13999 13997 13999 13997\\n\",\n    \"5000005 3 2 5 1\\n\",\n    \"1000000000 1 1 1 1000000000\\n\",\n    \"999999999 3 2 10 3\\n\",\n    \"1000000000 1000 1000 1 1\\n\",\n    \"200000001 100000002 1 100000001 1\\n\",\n    \"100000000 1000000000 1 100000001 1\\n\",\n    \"1000000000 99 100 1 2\\n\",\n    \"1000000000 5 5 1 1\\n\",\n    \"1000000000 1 1000000000 1 1000000000\\n\"\n  ],\n  \"outputs\": [\n    \"16\\n\",\n    \"0\\n\",\n    \"513558662\\n\",\n    \"363523396\\n\",\n    \"358983713\\n\",\n    \"68758795931537065\\n\",\n    \"8484603228\\n\",\n    \"539219654\\n\",\n    \"1624516635\\n\",\n    \"518210503\\n\",\n    \"8198495199\\n\",\n    \"244830865957095816\\n\",\n    \"144791399037089047\\n\",\n    \"109829394468167085\\n\",\n    \"92562678344491221\\n\",\n    \"82374017230131800\\n\",\n    \"520855643\\n\",\n    \"1662906651\\n\",\n    \"531576348\\n\",\n    \"8409556512\\n\",\n    \"457649970001570368\\n\",\n    \"465567015261784540\\n\",\n    \"319800249268721000\\n\",\n    \"218775648435471424\\n\",\n    \"177550052841687584\\n\",\n    \"565303099\\n\",\n    \"1742049794\\n\",\n    \"559787479\\n\",\n    \"6887548731\\n\",\n    \"245291032098926983\\n\",\n    \"223416160034288041\\n\",\n    \"224975891301803200\\n\",\n    \"174354977531116762\\n\",\n    \"147297192414486195\\n\",\n    \"537909080\\n\",\n    \"525533853\\n\",\n    \"528241752\\n\",\n    \"928443150\\n\",\n    \"126526011319256470\\n\",\n    \"128063927875111380\\n\",\n    \"129602242291091928\\n\",\n    \"131140962756657945\\n\",\n    \"111208028918928288\\n\",\n    \"524563246\\n\",\n    \"551931291\\n\",\n    \"556454318\\n\",\n    \"8801851608\\n\",\n    \"72303831537144592\\n\",\n    \"72774523091497887\\n\",\n    \"66266693959035917\\n\",\n    \"66736440098722854\\n\",\n    \"67946290439275508\\n\",\n    \"10000000000\\n\",\n    \"4999999995\\n\",\n    \"499999999\\n\",\n    \"999999997\\n\",\n    \"90909090\\n\",\n    \"999999998\\n\",\n    \"100000000\\n\",\n    \"1999999998\\n\",\n    \"666666666\\n\",\n    \"4999999994999\\n\",\n    \"1000000000\\n\",\n    \"998999\\n\",\n    \"101\\n\",\n    \"345415838\\n\",\n    \"10000010\\n\",\n    \"1000000000\\n\",\n    \"666666666\\n\",\n    \"1000000000000\\n\",\n    \"200000002\\n\",\n    \"100000000\\n\",\n    \"99000000000\\n\",\n    \"5000000000\\n\",\n    \"1000000000\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/526/C",
  "starter_code": ""
}