{
  "task_id": "APPS/384",
  "problem_id": 384,
  "prompt": "Recently Adaltik discovered japanese crosswords. Japanese crossword is a picture, represented as a table sized a \u00d7 b squares, and each square is colored white or black. There are integers to the left of the rows and to the top of the columns, encrypting the corresponding row or column. The number of integers represents how many groups of black squares there are in corresponding row or column, and the integers themselves represents the number of consecutive black squares in corresponding group (you can find more detailed explanation in Wikipedia https://en.wikipedia.org/wiki/Japanese_crossword).\n\nAdaltik decided that the general case of japanese crossword is too complicated and drew a row consisting of n squares (e.g. japanese crossword sized 1 \u00d7 n), which he wants to encrypt in the same way as in japanese crossword. [Image] The example of encrypting of a single row of japanese crossword. \n\nHelp Adaltik find the numbers encrypting the row he drew.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100)\u00a0\u2014 the length of the row. The second line of the input contains a single string consisting of n characters 'B' or 'W', ('B' corresponds to black square, 'W'\u00a0\u2014 to white square in the row that Adaltik drew).\n\n\n-----Output-----\n\nThe first line should contain a single integer k\u00a0\u2014 the number of integers encrypting the row, e.g. the number of groups of black squares in the row.\n\nThe second line should contain k integers, encrypting the row, e.g. corresponding to sizes of groups of consecutive black squares in the order from left to right.\n\n\n-----Examples-----\nInput\n3\nBBW\n\nOutput\n1\n2 \nInput\n5\nBWBWB\n\nOutput\n3\n1 1 1 \nInput\n4\nWWWW\n\nOutput\n0\n\nInput\n4\nBBBB\n\nOutput\n1\n4 \nInput\n13\nWBBBBWWBWBBBW\n\nOutput\n3\n4 1 3 \n\n\n-----Note-----\n\nThe last sample case correspond to the picture in the statement.",
  "solutions": "[\"# You lost the game.\\n\\nn = int(input())\\ns = str(input())\\n\\nR = []\\nb = 0\\nfor i in range(n):\\n    if s[i] == \\\"B\\\":\\n        b += 1\\n    elif b > 0:\\n        R += [b]\\n        b = 0\\nif b > 0:\\n    R += [b]\\nprint(len(R))\\nfor i in range(len(R)):\\n    print(R[i],end=\\\" \\\")\\n\", \"#!/usr/bin/env python3\\n\\nimport re\\n\\n\\ndef main():\\n    try:\\n        while True:\\n            input()\\n            a = list(map(len, [_f for _f in re.split(r\\\"W+\\\", input()) if _f]))\\n            print(len(a))\\n            print(*a)\\n\\n    except EOFError:\\n        pass\\n\\n\\nmain()\\n\", \"n = int(input())\\ns = input().rstrip()\\na = []\\nk = 0\\ns += 'W'\\nfor i in s:\\n    if i == 'B':\\n        k += 1\\n    else:\\n        if k > 0:\\n            a.append(k)\\n        k = 0\\nprint(len(a))\\nprint(' '.join(map(str, a)))\", \"n = int(input())\\ns = input()\\ncur = 0\\na = []\\nfor elem in s:\\n    if elem == 'B':\\n        cur += 1\\n    else:\\n        if cur != 0:\\n            a.append(cur)\\n            cur = 0\\nif cur != 0:\\n    a.append(cur)\\nprint(len(a))\\nprint(' '.join(map(str, a)))\\n\", \"import re\\nn=int(input())\\ns=input()\\nl=re.findall('(B+)',s)\\nprint(len(l))\\nfor i in l:\\n\\tprint(len(i),end=' ')\\n\", \"import sys, math\\nn = int(input())\\nz = input()\\nz += 'W'\\nans = []\\nprev = 'W'\\nctr = 0\\nfor i in z:\\n    if i == 'B':\\n        if prev == 'W':\\n            ctr = 1\\n        else:\\n            ctr += 1\\n    else:\\n        if prev == 'B':\\n            ans.append(ctr)\\n    prev = i\\nprint(len(ans))\\nprint(*ans)\\n\", \"n = int(input())\\ns = input()\\ncurr_b = 0\\nans = []\\nfor i in range(n):\\n    if s[i] == 'B':\\n        curr_b += 1\\n        if i == n - 1:\\n            ans.append(curr_b)\\n    else:\\n        if i > 0 and s[i - 1] == 'B':\\n            ans.append(curr_b)\\n        curr_b = 0\\nprint(len(ans))\\nfor i in ans:\\n    print(i, end = \\\" \\\")\", \"n = int(input())\\ns = input()\\na = []\\ncur = 0\\nfor i in s:\\n    if i == 'B':\\n        cur += 1\\n    elif cur:\\n        a.append(cur)\\n        cur = 0\\nif cur:\\n    a.append(cur)\\nprint(len(a))\\nprint(*a)\\n\", \"input()\\ns = input()\\nl = []\\ncount = 0\\nfor c in range(len(s)):\\n\\tif s[c]=='B':\\n\\t\\tcount += 1\\n\\telse:\\n\\t\\tif c and s[c-1]=='B':\\n\\t\\t\\tl.append(count)\\n\\t\\t\\tcount = 0\\nif count:\\n\\tl.append(count)\\nprint(len(l))\\nfor i in l:\\n\\tprint(i)\\n\", \"n, s = int(input()), input()\\ncnt = [0]\\nfor c in s:\\n    if c == 'B':\\n        cnt[-1] += 1\\n    elif cnt[-1]:\\n        cnt.append(0)\\nif not cnt[-1]:\\n    cnt.pop()\\nprint(len(cnt))\\nprint(*cnt)\\n\", \"from sys import stdin\\n\\nn = int(stdin.readline())\\n\\ns = stdin.readline().strip().split('W')\\n\\ns = [block for block in s if block != '']\\n\\nprint(len(s))\\n\\nfor block in s:\\n    print(len(block), end=' ')\\nif s:\\n    print()\\n\", \"n=int(input())\\ns=input()\\ns=s+\\\"W\\\"\\nl=[]\\nq=0\\nfor i in range(len(s)):\\n    if s[i]==\\\"B\\\":\\n        q=q+1\\n    else:\\n        if q!=0:\\n            l.append(q)\\n        q=0\\nprint(len(l))\\nfor i in range(len(l)):\\n    print(str(l[i])+\\\" \\\",end=\\\"\\\")\\n\\n\", \"input()\\ns = input()\\n\\nres = []\\ncounter = 0\\n\\nfor c in s:\\n    if c == 'B':\\n        counter += 1\\n    elif c == 'W':\\n        if counter > 0:\\n            res.append(counter)\\n        counter = 0\\n\\nif counter > 0:\\n    res.append(counter)\\n\\nprint(len(res))\\nfor r in res:\\n    print(r, end=' ')\\nprint()\\n\", \"n = int(input())\\narr = input().split('W')\\nfor i in range(arr.count('')):\\n    arr.remove('')\\nprint(len(arr))\\nif(len(arr)):\\n    s = ''\\n    for x in arr:\\n        s += str(len(x))+' '\\n    print(s)\", \"n = int(input())\\na = input()\\ndp = [0] * n\\nfor i in range(n):\\n    if (a[i] == 'W'):\\n        dp[i] = 0\\n    else:\\n        dp[i] = dp[i - 1] + 1\\ndp += [0]\\nans = []\\nfor i in range(n):\\n    if (dp[i] != 0 and dp[i + 1] == 0):\\n        ans.append(dp[i])\\nprint(len(ans))\\nprint(*ans)\", \"n = int(input())\\nc = 0\\ns = input()\\nans = ''\\nans_n = 0\\nfor i in range(n):\\n    if s[i] == \\\"B\\\":\\n        c+=1\\n        \\n    else:\\n        if c != 0:\\n            ans+=str(c) + ' '\\n            ans_n+=1\\n        c = 0\\nif c != 0:\\n    ans+=str(c) + ' '\\n    ans_n+=1        \\n\\nprint(ans_n)\\nprint(ans)\", \"n = int(input())\\ns = input()\\na = []\\nc = 0\\nfor i in range(len(s)):\\n    if s[i]==\\\"B\\\":\\n        c+=1\\n    else:\\n        if c > 0:\\n            a.append(c)\\n        c = 0\\n\\nif c!= 0:\\n    a.append(c)\\nprint(len(a))\\nfor x in a:\\n    print(x,end=\\\" \\\")\\n\\n\", \"n = int(input())\\na = \\\"W\\\"+input()+\\\"W\\\"\\ncount = 0\\nlst = []\\nfor ch in a:\\n  if ch == \\\"B\\\": count += 1\\n  elif count:\\n    lst.append(count)\\n    count = 0\\nprint(len(lst))\\nprint(\\\" \\\".join(map(str, lst)))\\n\", \"input()\\nsl = []\\nk = 0\\nfor cell in input():\\n    if cell == 'B':\\n        k += 1\\n    else:\\n        if k > 0:\\n            sl.append(str(k))\\n        k = 0\\nif k > 0:\\n    sl.append(str(k))\\n\\nprint(len(sl))\\nprint(\\\" \\\".join(sl))\\n\", \"# put your current running code in here\\n\\nn = int(input())\\ns = list(input())\\n\\ngr_lg = []\\ni = 0\\nwhile i < len(s):\\n    gr_cnt = 0\\n    while i < len(s) and s[i] == 'B':\\n        gr_cnt += 1\\n        i += 1\\n    if gr_cnt > 0:\\n        gr_lg.append(gr_cnt)\\n    i += 1\\n\\nprint(len(gr_lg))\\nfor lg in gr_lg:\\n    print(lg, end=\\\" \\\")\\n\", \"input()\\n\\ns2 = []\\nfor el in [len(el) for el in input().strip().split('W')]:\\n    if el > 0: s2.append(str(el))\\n\\nprint(len(s2))\\nprint(' '.join(s2))\", \"n = int(input())\\nans = []\\ncnt = 0\\nfor i in input().strip():\\n    if (i == 'W' and cnt):\\n        ans.append(cnt)\\n        cnt = 0\\n    elif (i == 'B'):\\n        cnt += 1\\nif (cnt):\\n    ans.append(cnt)\\n    cnt = 0\\nprint(len(ans))\\nprint(*ans)\\n\", \"def getin():\\n    xin = input()\\n    while xin.strip() == \\\"\\\":\\n        xin = input()\\n    return xin\\n\\ndef gi():\\n    return [int(x) for x in getin().split()]\\n\\ninput()\\n\\ns = input()\\nch = s[0]\\ni = 1\\ncur = 1 if ch == 'B' else 0\\nans = []\\nwhile i < len(s):\\n    if s[i] == 'B':\\n        if ch == 'B':\\n            cur += 1\\n        else:\\n            cur = 1\\n    elif s[i] == 'W':\\n        if ch == 'B':\\n            ans.append(cur)\\n        cur = 0\\n    ch = s[i]\\n    i += 1\\nif cur > 0:\\n    ans.append(cur)\\n\\nprint(len(ans))\\nif len(ans) > 0:\\n    print(\\\" \\\".join([str(x) for x in ans]))\\n\", \"n = input()\\ns = input().split('W')\\nn = 0\\nres = ''\\nfor i in s:\\n    if len(i) > 0:\\n        n += 1\\n        res += \\\"{} \\\".format(len(i))\\nprint(n)\\nif res:\\n    print(res)\\n\", \"n = int(input())\\ns = str(input())\\n\\nblocks = 0\\ncurrent_size = 0\\nsizes = []\\n\\nlast = \\\"\\\"\\nfor i in range(n):\\n    if i == 0 and s[i] == \\\"B\\\":\\n        blocks += 1\\n        current_size += 1\\n    else:\\n        if s[i] == \\\"B\\\":\\n            if last == \\\"B\\\":\\n                current_size += 1\\n            else:\\n                blocks += 1\\n                current_size = 1\\n        else:\\n            if last == \\\"B\\\":\\n                sizes.append(current_size)\\n    last = s[i]\\n\\nif len(sizes) != blocks:\\n    sizes.append(current_size)\\n\\nprint(blocks)\\nif blocks != 0:\\n    print(*sizes)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3\\nBBW\\n\",\n    \"5\\nBWBWB\\n\",\n    \"4\\nWWWW\\n\",\n    \"4\\nBBBB\\n\",\n    \"13\\nWBBBBWWBWBBBW\\n\",\n    \"1\\nB\\n\",\n    \"2\\nBB\\n\",\n    \"100\\nWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWB\\n\",\n    \"1\\nW\\n\",\n    \"2\\nWW\\n\",\n    \"2\\nWB\\n\",\n    \"2\\nBW\\n\",\n    \"3\\nBBB\\n\",\n    \"3\\nBWB\\n\",\n    \"3\\nWBB\\n\",\n    \"3\\nWWB\\n\",\n    \"3\\nWBW\\n\",\n    \"3\\nBWW\\n\",\n    \"3\\nWWW\\n\",\n    \"100\\nBBBWWWWWWBBWWBBWWWBBWBBBBBBBBBBBWBBBWBBWWWBBWWBBBWBWWBBBWWBBBWBBBBBWWWBWWBBWWWWWWBWBBWWBWWWBWBWWWWWB\\n\",\n    \"5\\nBBBWB\\n\",\n    \"5\\nBWWWB\\n\",\n    \"5\\nWWWWB\\n\",\n    \"5\\nBWWWW\\n\",\n    \"5\\nBBBWW\\n\",\n    \"5\\nWWBBB\\n\",\n    \"10\\nBBBBBWWBBB\\n\",\n    \"10\\nBBBBWBBWBB\\n\",\n    \"20\\nBBBBBWWBWBBWBWWBWBBB\\n\",\n    \"20\\nBBBWWWWBBWWWBWBWWBBB\\n\",\n    \"20\\nBBBBBBBBWBBBWBWBWBBB\\n\",\n    \"20\\nBBBWBWBWWWBBWWWWBWBB\\n\",\n    \"40\\nBBBBBBWWWWBWBWWWBWWWWWWWWWWWBBBBBBBBBBBB\\n\",\n    \"40\\nBBBBBWBWWWBBWWWBWBWWBBBBWWWWBWBWBBBBBBBB\\n\",\n    \"50\\nBBBBBBBBBBBWWWWBWBWWWWBBBBBBBBWWWWWWWBWWWWBWBBBBBB\\n\",\n    \"50\\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\\n\",\n    \"50\\nBBBBBWWWWWBWWWBWWWWWBWWWBWWWWWWBBWBBWWWWBWWWWWWWBW\\n\",\n    \"50\\nWWWWBWWBWWWWWWWWWWWWWWWWWWWWWWWWWBWBWBWWWWWWWBBBBB\\n\",\n    \"50\\nBBBBBWBWBWWBWBWWWWWWBWBWBWWWWWWWWWWWWWBWBWWWWBWWWB\\n\",\n    \"50\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\n\",\n    \"100\\nBBBBBBBBBBBWBWWWWBWWBBWBBWWWWWWWWWWBWBWWBWWWWWWWWWWWBBBWWBBWWWWWBWBWWWWBWWWWWWWWWWWBWWWWWBBBBBBBBBBB\\n\",\n    \"100\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\n\",\n    \"100\\nBBBBBBBBBBBBBBBBBBBBWBWBWWWWWBWWWWWWWWWWWWWWBBWWWBWWWWBWWBWWWWWWBWWWWWWWWWWWWWBWBBBBBBBBBBBBBBBBBBBB\\n\",\n    \"100\\nBBBBWWWWWWWWWWWWWWWWWWWWWWWWWBWBWWWWWBWBWWWWWWBBWWWWWWWWWWWWBWWWWBWWWWWWWWWWWWBWWWWWWWBWWWWWWWBBBBBB\\n\",\n    \"5\\nBWBWB\\n\",\n    \"10\\nWWBWWWBWBB\\n\",\n    \"50\\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\n\",\n    \"50\\nBBBBBBBBBBBBBBBBBWWBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\n\",\n    \"100\\nBBBBBBBBBBBBBBBBBBBBBBBBWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\n\",\n    \"90\\nWWBWWBWBBWBBWWBWBWBBBWBWBBBWBWBWBWBWBWBWBWBBBBBWBBWWWWBWBBWBWWBBBWBWBWWBWBWBWBWWWWWWBWBBBB\\n\",\n    \"100\\nBWWWBWBWBBBBBWBWWBWBWWWBWBWBWWBBWWBBBWBBBWWBWBWWBBBBWBWBBBWBWBBWWWWWWBWWBBBBWBWBWWBWBWWWBWBWWBWBWWWB\\n\",\n    \"90\\nWBWBBBBBBWWWBBWWBWWWBBWWBWWWBWBBWBWBBWWWWBWBWBBWBBWBWWWBBWBBWWWWBWBBWWWBBBWBBWBWBBBBWWBWWB\\n\",\n    \"80\\nBBWWBBBWBBWWWWBBWBWBBWWWWWBWBBWWBWBWBWBWBWWBWWBWWWBWBBWBBWBBWBBBWWBBBBBBBWBBBWBB\\n\",\n    \"65\\nWWWWBWWWBBBBBWWWWWWBBBWWBBBBWWWWWWWWBBBWWWWBWBWWBBWWWWBWWWBBWBBBB\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n2 \",\n    \"3\\n1 1 1 \",\n    \"0\\n\",\n    \"1\\n4 \",\n    \"3\\n4 1 3 \",\n    \"1\\n1 \",\n    \"1\\n2 \",\n    \"50\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n1 \",\n    \"1\\n1 \",\n    \"1\\n3 \",\n    \"2\\n1 1 \",\n    \"1\\n2 \",\n    \"1\\n1 \",\n    \"1\\n1 \",\n    \"1\\n1 \",\n    \"0\\n\",\n    \"21\\n3 2 2 2 11 3 2 2 3 1 3 3 5 1 2 1 2 1 1 1 1 \",\n    \"2\\n3 1 \",\n    \"2\\n1 1 \",\n    \"1\\n1 \",\n    \"1\\n1 \",\n    \"1\\n3 \",\n    \"1\\n3 \",\n    \"2\\n5 3 \",\n    \"3\\n4 2 2 \",\n    \"6\\n5 1 2 1 1 3 \",\n    \"5\\n3 2 1 1 3 \",\n    \"5\\n8 3 1 1 3 \",\n    \"6\\n3 1 1 2 1 2 \",\n    \"5\\n6 1 1 1 12 \",\n    \"9\\n5 1 2 1 1 4 1 1 8 \",\n    \"7\\n11 1 1 8 1 1 6 \",\n    \"0\\n\",\n    \"9\\n5 1 1 1 1 2 2 1 1 \",\n    \"6\\n1 1 1 1 1 5 \",\n    \"12\\n5 1 1 1 1 1 1 1 1 1 1 1 \",\n    \"1\\n50 \",\n    \"15\\n11 1 1 2 2 1 1 1 3 2 1 1 1 1 11 \",\n    \"1\\n100 \",\n    \"11\\n20 1 1 1 2 1 1 1 1 1 20 \",\n    \"11\\n4 1 1 1 1 2 1 1 1 1 6 \",\n    \"3\\n1 1 1 \",\n    \"3\\n1 1 2 \",\n    \"1\\n50 \",\n    \"2\\n17 31 \",\n    \"2\\n24 42 \",\n    \"30\\n1 1 2 2 1 1 3 1 3 1 1 1 1 1 1 1 5 2 1 2 1 3 1 1 1 1 1 1 1 4 \",\n    \"31\\n1 1 1 5 1 1 1 1 1 1 2 3 3 1 1 4 1 3 1 2 1 4 1 1 1 1 1 1 1 1 1 \",\n    \"25\\n1 6 2 1 2 1 1 2 1 2 1 1 2 2 1 2 2 1 2 3 2 1 4 1 1 \",\n    \"23\\n2 3 2 2 1 2 1 2 1 1 1 1 1 1 1 1 2 2 2 3 7 3 2 \",\n    \"11\\n1 5 3 4 3 1 1 2 1 2 4 \"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/721/A",
  "starter_code": ""
}