{
  "task_id": "APPS/10",
  "problem_id": 10,
  "prompt": "On the planet Mars a year lasts exactly n days (there are no leap years on Mars). But Martians have the same weeks as earthlings\u00a0\u2014 5 work days and then 2 days off. Your task is to determine the minimum possible and the maximum possible number of days off per year on Mars.\n\n\n-----Input-----\n\nThe first line of the input contains a positive integer n (1 \u2264 n \u2264 1 000 000)\u00a0\u2014 the number of days in a year on Mars.\n\n\n-----Output-----\n\nPrint two integers\u00a0\u2014 the minimum possible and the maximum possible number of days off per year on Mars.\n\n\n-----Examples-----\nInput\n14\n\nOutput\n4 4\n\nInput\n2\n\nOutput\n0 2\n\n\n\n-----Note-----\n\nIn the first sample there are 14 days in a year on Mars, and therefore independently of the day a year starts with there will be exactly 4 days off .\n\nIn the second sample there are only 2 days in a year on Mars, and they can both be either work days or days off.",
  "solutions": "[\"n=int(input())\\nr=n%7\\nd=n//7\\nprint(2*d+max(0,r-5),2*d+min(r,2))\\n\", \"minday = maxday = 0\\n\\nfor i in range(int(input())) :\\n    k = i % 7\\n    if k == 0 or k == 1 : maxday += 1\\n    if k == 5 or k == 6 : minday += 1\\n\\nprint(minday, maxday)\", \"__author__ = 'Andrey'\\nn = int(input())\\nk = n // 7\\nc = n % 7\\nprint(2 * k + max(0, c - 5), 2 * k + min(c, 2))\", \"n = int(input())\\nk = 0\\nif n % 7 == 6:\\n    k = 1\\nprint(2*(n // 7) + k, 2*(n // 7) + min(n % 7, 2))\\n\", \"a = int(input())\\nb=int(a/7)\\nc=a%7\\nif c==0:\\n    print(b*2,b*2)\\nelif c==1:\\n    print(b*2,b*2+1)\\nelif c==6:\\n    print(b*2+1,b*2+2)\\nelse:\\n    print(b*2,b*2+2)\", \"def __starting_point():\\n    #n, m = list(map(int, input().split()))\\n    n = int(input())\\n    print(n // 7 * 2 + (1 if n % 7 > 5 else 0), n // 7 * 2 + (2 if n % 7 >= 2 else n % 7))\\n    \\n\\n__starting_point()\", \"n=int(input())\\nif n%7==0:\\n    print((n//7)*2,(n//7)*2)\\nelif n%7==1:\\n    print((n//7)*2,(n//7)*2+1)\\nelif n%7==6:\\n    print((n//7)*2+1,(n//7)*2+2)\\nelse:\\n    print((n//7)*2,(n//7)*2+2)\", \"# coding: utf-8\\n\\n\\n\\n\\n\\nimport math\\nimport string\\nimport itertools\\nimport fractions\\nimport heapq\\nimport collections\\nimport re\\nimport array\\nimport bisect\\n\\nn = int(input())\\n\\nw = n // 7\\nd = n % 7\\nmin_off = w * 2\\nmax_off = w * 2\\nif d <= 2:\\n    max_off += d\\nelif 2 < d and d <= 5:\\n    max_off += 2\\nelse:                           # d==6\\n    max_off += 2\\n    min_off += 1\\nprint(\\\"{} {}\\\".format(min_off, max_off))\\n\", \"n = int(input())\\nd = n // 7\\nr = n % 7\\nu, v = d + d, d + d\\nif r == 6:\\n    u += 1\\nif r == 1:\\n    v += 1\\nif r > 1:\\n    v += 2\\nprint(u, v)\\n    \\n\", \"#!/usr/bin/env python3\\n\\ndef f(n):\\n    return n // 7 + (n + 1) // 7\\n\\ntry:\\n    while True:\\n        n = int(input())\\n        if n == 1:\\n            print(\\\"0 1\\\")\\n        else:\\n            print(f(n), 2 + f(n - 2))\\n\\nexcept EOFError:\\n    pass\\n\", \"n = int(input())\\ns = 2\\no = 0\\nif n%7 == 0:\\n\\ts = 0\\nif n%7 == 1:\\n\\ts = 1\\nif n%7 == 6:\\n\\to = 1\\nprint((n//7)*2+o, (n//7)*2 + s)\\n\", \"import math\\nn = int(input())\\ncel = math.floor(n / 7)\\nost = n % 7\\nif ost <= 2:\\n    max_weekend = cel * 2 + ost\\nelse:\\n    max_weekend = cel * 2 + 2\\nif ost < 6:\\n    min_weekend = cel * 2\\nelse:\\n    min_weekend = cel * 2 + 7 - ost\\nprint(min_weekend, max_weekend)\\n\", \"a = int(input())\\nb, c = a // 7 * 2, a // 7 * 2\\nb += [0, 1][a % 7 == 6]\\nc += [a % 7, 2][a % 7 > 2]\\nprint(\\\"%d %d\\\" % (b, c))\\n\", \"n=int(input())\\n\\ns=2*(n//7)\\np=s\\nif(n%7>2):\\n    s+=2\\nelse:\\n    s+=n%7\\nif(n%7>5):\\n    p+=7-n%7\\nprint(p,s)\", \"n = int(input())\\nx = n // 7 * 2\\nprint(x + (n % 7 == 6), x + min(n % 7, 2))\", \"n = int(input())\\nm = n // 7\\nn %= 7\\nma = m * 2 + min(n, 2)\\nmi = m * 2\\nif (n > 5):\\n    mi += n - 5\\nprint(mi, ma)\", \"import sys\\n#sys.stdin = open(\\\"apples.in\\\",\\\"r\\\")\\n#sys.stdout = open(\\\"apples.out\\\",\\\"w\\\")\\n\\nn = int(input())\\nk = n // 7 \\nif (n % 7 == 0):\\n    print(k*2, end = ' ')\\nelif (n % 7 == 6):\\n    print(max(k*2+1, 0), end = ' ')\\nelse:\\n    print(max(k*2, 0), end = ' ')\\n\\n\\nif (n % 7 == 0):\\n    print(k*2)\\nelif (n % 7 == 1):\\n    print(k*2+1)\\nelse:\\n    print(k*2+2)\\n\\n        \\n#sys.stdin.close()\\n#sys.stdout.close()\\n\", \"def solve():\\n    N = int(input())\\n\\n    n7 = N // 7\\n    m7 = N % 7\\n    ma = n7 * 2 + min(m7, 2)\\n    mi = n7 * 2\\n    if m7 == 6:\\n        mi += 1\\n\\n    print(mi, ma)\\n\\n\\ndef __starting_point():\\n    solve()\\n\\n__starting_point()\", \"n=int(input())\\na=n//7*2\\nprint(a+max(0,(n%7-5)),a+min(2,n%7))\\n\", \"def solve(n):\\n    res = (n // 7) * 2\\n    d = n % 7\\n    if (d == 6):\\n        minn = res + 1\\n        maxx = res + 2\\n    elif (d == 1):\\n        minn = res\\n        maxx = res + 1      \\n    elif (d == 0):\\n        minn = res\\n        maxx = res\\n    else:\\n        minn = res\\n        maxx = res + 2\\n    return [minn, maxx]\\n    \\nn = int(input())\\nsol = solve(n)\\nprint(str(sol[0])+\\\" \\\"+str(sol[1]))\", \"n = int(input())\\nc1 = (n//7)*2\\nc2 = c1\\nk1 = n%7\\nk2 = k1-5\\nif k1 >= 2:\\n    c1 += 2\\nelse:\\n    c1 +=k1\\nif k2 >= 0:\\n    c2 += k2\\nprint(c2,c1)\\n\", \"n = int(input())\\n\\na = n // 7 * 2\\nb = a + min(n % 7, 2)\\nif n % 7 == 6:\\n    a += 1\\n\\nprint('{} {}'.format(a, b))\\n\", \"n = int(input())\\nif n == 1:\\n    print('0 1')\\nelif n == 2:\\n    print('0 2')\\nelse:\\n    d = n - 5\\n    minDay = ((d // 7) * 2) + (2 if d % 7 >= 2 else d % 7)\\n    maxDay = ((n // 7) * 2) + (2 if n % 7 >= 2 else n % 7)\\n    print('%d %d' % (minDay, maxDay))\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"14\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"7\\n\",\n    \"8\\n\",\n    \"9\\n\",\n    \"10\\n\",\n    \"11\\n\",\n    \"12\\n\",\n    \"13\\n\",\n    \"1000000\\n\",\n    \"16\\n\",\n    \"17\\n\",\n    \"18\\n\",\n    \"19\\n\",\n    \"20\\n\",\n    \"21\\n\",\n    \"22\\n\",\n    \"23\\n\",\n    \"24\\n\",\n    \"25\\n\",\n    \"26\\n\",\n    \"27\\n\",\n    \"28\\n\",\n    \"29\\n\",\n    \"30\\n\",\n    \"100\\n\",\n    \"99\\n\",\n    \"98\\n\",\n    \"97\\n\",\n    \"96\\n\",\n    \"95\\n\",\n    \"94\\n\",\n    \"93\\n\",\n    \"92\\n\",\n    \"91\\n\",\n    \"90\\n\",\n    \"89\\n\",\n    \"88\\n\",\n    \"87\\n\",\n    \"86\\n\",\n    \"85\\n\",\n    \"84\\n\",\n    \"83\\n\",\n    \"82\\n\",\n    \"81\\n\",\n    \"80\\n\",\n    \"1000\\n\",\n    \"999\\n\",\n    \"998\\n\",\n    \"997\\n\",\n    \"996\\n\",\n    \"995\\n\",\n    \"994\\n\",\n    \"993\\n\",\n    \"992\\n\",\n    \"991\\n\",\n    \"990\\n\",\n    \"989\\n\",\n    \"988\\n\",\n    \"987\\n\",\n    \"986\\n\",\n    \"985\\n\",\n    \"984\\n\",\n    \"983\\n\",\n    \"982\\n\",\n    \"981\\n\",\n    \"980\\n\",\n    \"10000\\n\",\n    \"9999\\n\",\n    \"9998\\n\",\n    \"9997\\n\",\n    \"9996\\n\",\n    \"9995\\n\",\n    \"9994\\n\",\n    \"9993\\n\",\n    \"9992\\n\",\n    \"9991\\n\",\n    \"9990\\n\",\n    \"9989\\n\",\n    \"9988\\n\",\n    \"9987\\n\",\n    \"9986\\n\",\n    \"9985\\n\",\n    \"9984\\n\",\n    \"9983\\n\",\n    \"9982\\n\",\n    \"9981\\n\",\n    \"9980\\n\",\n    \"100000\\n\",\n    \"99999\\n\",\n    \"99998\\n\",\n    \"99997\\n\",\n    \"99996\\n\",\n    \"99995\\n\",\n    \"99994\\n\",\n    \"99993\\n\",\n    \"99992\\n\",\n    \"99991\\n\",\n    \"99990\\n\",\n    \"99989\\n\",\n    \"99988\\n\",\n    \"99987\\n\",\n    \"99986\\n\",\n    \"99985\\n\",\n    \"99984\\n\",\n    \"99983\\n\",\n    \"99982\\n\",\n    \"99981\\n\",\n    \"99980\\n\",\n    \"999999\\n\",\n    \"999998\\n\",\n    \"999997\\n\",\n    \"999996\\n\",\n    \"999995\\n\",\n    \"999994\\n\",\n    \"999993\\n\",\n    \"999992\\n\",\n    \"999991\\n\",\n    \"999990\\n\",\n    \"999989\\n\",\n    \"999988\\n\",\n    \"999987\\n\",\n    \"999986\\n\",\n    \"999985\\n\",\n    \"999984\\n\",\n    \"999983\\n\",\n    \"999982\\n\",\n    \"999981\\n\",\n    \"999980\\n\",\n    \"234123\\n\",\n    \"234122\\n\",\n    \"234121\\n\",\n    \"234120\\n\",\n    \"234119\\n\",\n    \"234118\\n\",\n    \"234117\\n\",\n    \"234116\\n\",\n    \"234115\\n\",\n    \"234114\\n\",\n    \"234113\\n\",\n    \"234112\\n\",\n    \"234111\\n\",\n    \"234110\\n\",\n    \"234109\\n\",\n    \"234108\\n\",\n    \"234107\\n\",\n    \"234106\\n\",\n    \"234105\\n\",\n    \"234104\\n\",\n    \"234103\\n\",\n    \"868531\\n\",\n    \"868530\\n\",\n    \"868529\\n\",\n    \"868528\\n\",\n    \"868527\\n\",\n    \"868526\\n\",\n    \"868525\\n\",\n    \"868524\\n\",\n    \"868523\\n\",\n    \"868522\\n\",\n    \"868521\\n\",\n    \"868520\\n\",\n    \"868519\\n\",\n    \"868518\\n\",\n    \"868517\\n\",\n    \"868516\\n\",\n    \"868515\\n\",\n    \"868514\\n\",\n    \"868513\\n\",\n    \"868512\\n\",\n    \"868511\\n\",\n    \"123413\\n\",\n    \"123412\\n\",\n    \"123411\\n\",\n    \"123410\\n\",\n    \"123409\\n\",\n    \"123408\\n\",\n    \"123407\\n\",\n    \"123406\\n\",\n    \"123405\\n\",\n    \"123404\\n\",\n    \"123403\\n\",\n    \"123402\\n\",\n    \"123401\\n\",\n    \"123400\\n\",\n    \"123399\\n\",\n    \"123398\\n\",\n    \"123397\\n\",\n    \"123396\\n\",\n    \"123395\\n\",\n    \"123394\\n\",\n    \"123393\\n\",\n    \"15\\n\"\n  ],\n  \"outputs\": [\n    \"4 4\\n\",\n    \"0 2\\n\",\n    \"0 1\\n\",\n    \"0 2\\n\",\n    \"0 2\\n\",\n    \"0 2\\n\",\n    \"1 2\\n\",\n    \"2 2\\n\",\n    \"2 3\\n\",\n    \"2 4\\n\",\n    \"2 4\\n\",\n    \"2 4\\n\",\n    \"2 4\\n\",\n    \"3 4\\n\",\n    \"285714 285715\\n\",\n    \"4 6\\n\",\n    \"4 6\\n\",\n    \"4 6\\n\",\n    \"4 6\\n\",\n    \"5 6\\n\",\n    \"6 6\\n\",\n    \"6 7\\n\",\n    \"6 8\\n\",\n    \"6 8\\n\",\n    \"6 8\\n\",\n    \"6 8\\n\",\n    \"7 8\\n\",\n    \"8 8\\n\",\n    \"8 9\\n\",\n    \"8 10\\n\",\n    \"28 30\\n\",\n    \"28 29\\n\",\n    \"28 28\\n\",\n    \"27 28\\n\",\n    \"26 28\\n\",\n    \"26 28\\n\",\n    \"26 28\\n\",\n    \"26 28\\n\",\n    \"26 27\\n\",\n    \"26 26\\n\",\n    \"25 26\\n\",\n    \"24 26\\n\",\n    \"24 26\\n\",\n    \"24 26\\n\",\n    \"24 26\\n\",\n    \"24 25\\n\",\n    \"24 24\\n\",\n    \"23 24\\n\",\n    \"22 24\\n\",\n    \"22 24\\n\",\n    \"22 24\\n\",\n    \"285 286\\n\",\n    \"284 286\\n\",\n    \"284 286\\n\",\n    \"284 286\\n\",\n    \"284 286\\n\",\n    \"284 285\\n\",\n    \"284 284\\n\",\n    \"283 284\\n\",\n    \"282 284\\n\",\n    \"282 284\\n\",\n    \"282 284\\n\",\n    \"282 284\\n\",\n    \"282 283\\n\",\n    \"282 282\\n\",\n    \"281 282\\n\",\n    \"280 282\\n\",\n    \"280 282\\n\",\n    \"280 282\\n\",\n    \"280 282\\n\",\n    \"280 281\\n\",\n    \"280 280\\n\",\n    \"2856 2858\\n\",\n    \"2856 2858\\n\",\n    \"2856 2858\\n\",\n    \"2856 2857\\n\",\n    \"2856 2856\\n\",\n    \"2855 2856\\n\",\n    \"2854 2856\\n\",\n    \"2854 2856\\n\",\n    \"2854 2856\\n\",\n    \"2854 2856\\n\",\n    \"2854 2855\\n\",\n    \"2854 2854\\n\",\n    \"2853 2854\\n\",\n    \"2852 2854\\n\",\n    \"2852 2854\\n\",\n    \"2852 2854\\n\",\n    \"2852 2854\\n\",\n    \"2852 2853\\n\",\n    \"2852 2852\\n\",\n    \"2851 2852\\n\",\n    \"2850 2852\\n\",\n    \"28570 28572\\n\",\n    \"28570 28572\\n\",\n    \"28570 28572\\n\",\n    \"28570 28572\\n\",\n    \"28570 28571\\n\",\n    \"28570 28570\\n\",\n    \"28569 28570\\n\",\n    \"28568 28570\\n\",\n    \"28568 28570\\n\",\n    \"28568 28570\\n\",\n    \"28568 28570\\n\",\n    \"28568 28569\\n\",\n    \"28568 28568\\n\",\n    \"28567 28568\\n\",\n    \"28566 28568\\n\",\n    \"28566 28568\\n\",\n    \"28566 28568\\n\",\n    \"28566 28568\\n\",\n    \"28566 28567\\n\",\n    \"28566 28566\\n\",\n    \"28565 28566\\n\",\n    \"285714 285714\\n\",\n    \"285713 285714\\n\",\n    \"285712 285714\\n\",\n    \"285712 285714\\n\",\n    \"285712 285714\\n\",\n    \"285712 285714\\n\",\n    \"285712 285713\\n\",\n    \"285712 285712\\n\",\n    \"285711 285712\\n\",\n    \"285710 285712\\n\",\n    \"285710 285712\\n\",\n    \"285710 285712\\n\",\n    \"285710 285712\\n\",\n    \"285710 285711\\n\",\n    \"285710 285710\\n\",\n    \"285709 285710\\n\",\n    \"285708 285710\\n\",\n    \"285708 285710\\n\",\n    \"285708 285710\\n\",\n    \"285708 285710\\n\",\n    \"66892 66893\\n\",\n    \"66892 66892\\n\",\n    \"66891 66892\\n\",\n    \"66890 66892\\n\",\n    \"66890 66892\\n\",\n    \"66890 66892\\n\",\n    \"66890 66892\\n\",\n    \"66890 66891\\n\",\n    \"66890 66890\\n\",\n    \"66889 66890\\n\",\n    \"66888 66890\\n\",\n    \"66888 66890\\n\",\n    \"66888 66890\\n\",\n    \"66888 66890\\n\",\n    \"66888 66889\\n\",\n    \"66888 66888\\n\",\n    \"66887 66888\\n\",\n    \"66886 66888\\n\",\n    \"66886 66888\\n\",\n    \"66886 66888\\n\",\n    \"66886 66888\\n\",\n    \"248151 248152\\n\",\n    \"248150 248152\\n\",\n    \"248150 248152\\n\",\n    \"248150 248152\\n\",\n    \"248150 248152\\n\",\n    \"248150 248151\\n\",\n    \"248150 248150\\n\",\n    \"248149 248150\\n\",\n    \"248148 248150\\n\",\n    \"248148 248150\\n\",\n    \"248148 248150\\n\",\n    \"248148 248150\\n\",\n    \"248148 248149\\n\",\n    \"248148 248148\\n\",\n    \"248147 248148\\n\",\n    \"248146 248148\\n\",\n    \"248146 248148\\n\",\n    \"248146 248148\\n\",\n    \"248146 248148\\n\",\n    \"248146 248147\\n\",\n    \"248146 248146\\n\",\n    \"35260 35262\\n\",\n    \"35260 35262\\n\",\n    \"35260 35261\\n\",\n    \"35260 35260\\n\",\n    \"35259 35260\\n\",\n    \"35258 35260\\n\",\n    \"35258 35260\\n\",\n    \"35258 35260\\n\",\n    \"35258 35260\\n\",\n    \"35258 35259\\n\",\n    \"35258 35258\\n\",\n    \"35257 35258\\n\",\n    \"35256 35258\\n\",\n    \"35256 35258\\n\",\n    \"35256 35258\\n\",\n    \"35256 35258\\n\",\n    \"35256 35257\\n\",\n    \"35256 35256\\n\",\n    \"35255 35256\\n\",\n    \"35254 35256\\n\",\n    \"35254 35256\\n\",\n    \"4 5\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/670/A",
  "starter_code": ""
}