{
  "task_id": "APPS/537",
  "problem_id": 537,
  "prompt": "There are n students who have taken part in an olympiad. Now it's time to award the students.\n\nSome of them will receive diplomas, some wiil get certificates, and others won't receive anything. Students with diplomas and certificates are called winners. But there are some rules of counting the number of diplomas and certificates. The number of certificates must be exactly k times greater than the number of diplomas. The number of winners must not be greater than half of the number of all students (i.e. not be greater than half of n). It's possible that there are no winners.\n\nYou have to identify the maximum possible number of winners, according to these rules. Also for this case you have to calculate the number of students with diplomas, the number of students with certificates and the number of students who are not winners.\n\n\n-----Input-----\n\nThe first (and the only) line of input contains two integers n and k (1 \u2264 n, k \u2264 10^12), where n is the number of students and k is the ratio between the number of certificates and the number of diplomas.\n\n\n-----Output-----\n\nOutput three numbers: the number of students with diplomas, the number of students with certificates and the number of students who are not winners in case when the number of winners is maximum possible.\n\nIt's possible that there are no winners.\n\n\n-----Examples-----\nInput\n18 2\n\nOutput\n3 6 9\n\nInput\n9 10\n\nOutput\n0 0 9\n\nInput\n1000000000000 5\n\nOutput\n83333333333 416666666665 500000000002\n\nInput\n1000000000000 499999999999\n\nOutput\n1 499999999999 500000000000",
  "solutions": "[\"n, k = list(map(int, input().split()))\\np = (n // 2) // (k + 1)\\ng = p * k\\no = n - p - g\\nprint(p, g, o)\\n\", \"n, k = list(map(int, input().split()))\\ns = n // 2\\na = s // (k + 1)\\nb = a * k\\nc = n - a - b\\nprint(a, b, c)\\n\", \"n,k=map(int,input().split())\\nh=n//2\\nd=h//(k+1)\\nc=d*k\\nr=n-(d+c)\\nprint(d,c,r)\", \"from math import floor\\n\\nn, k = list(map(int, input().split()))\\nr = floor(n / (2 * (k + 1)))\\nprint(r, k * r, n - r * (k + 1))\\n\", \"n,k=list(map(int,input().split()))\\na=n//(2*(k+1))\\nb=k*a\\nc=n-a-b\\nprint(a,b,c)\", \"string = input()\\nnumbers = string.split(\\\" \\\")\\na = int(numbers[0])\\nb = int(numbers[1])\\nx = a // 2 // (b + 1)\\ny = b * x\\nz = a - x - y\\nprint(\\\"%d %d %d\\\" % (x, y, z))\", \"n, k = list(map(int, input().split()))\\nx = (n//(k+1))//2\\nprint(x, k*x, n-(k+1)*x)\\n\", \"\\nimport sys\\n#sys.stdin=open(\\\"data.txt\\\")\\ninput=sys.stdin.readline\\n\\nn,k=list(map(int,input().split()))\\n\\nfactor=(n//2)//(k+1)\\n\\nprint(\\\"%d %d %d\\\"%(factor,factor*k,n-factor*(k+1)))\\n\", \"n, k = map(int, input().split())\\n\\na = n // (2 * (k + 1))\\n\\nprint(a, a * k, n - a * (k + 1))\", \"def int_map():\\n\\treturn list(map(int, input().split(' ')))\\n\\nn, k = int_map()\\n\\nq = n // 2\\n\\na = q // (k+1)\\n\\nprint(a, k*a, n-(k+1)*a)\\n\\n\\n\", \"n,k=list(map(int,input().split()))\\nd = int(n//(2*k+2))\\nc = k*d\\ns = n - c - d\\nprint(d,c,s)\\n\", \"def __starting_point():\\n\\tn,k = list(map(int,input().split()))\\n\\tc = n//((k+1)*2)\\n\\tif c==0:\\n\\t\\tprint(0,0,n)\\n\\telse:\\n\\t\\tprint(c,k*c,n-(k+1)*c)\\n\\n__starting_point()\", \"inp=input().split()\\nn=int(inp[0])\\nk=int(inp[1])\\nprint(int(n/(2*(k+1))),k*int(n/(2*(k+1))),n-(k+1)*int(n/(2*(k+1))))\", \"n, k = map(int, input().split())\\n\\nl = -1;\\nr = n\\n\\nwhile r - l > 1:\\n    m = (l + r) // 2\\n    if (m + m * k > n // 2):\\n        r = m;\\n    else:\\n        l = m\\n\\nprint(l, l * k, n - l - l * k)\", \"numList=input().split(\\\" \\\")\\nn=int(numList[0])\\nk=int(numList[1])\\nd=(n//2)//(k+1)\\nc=k*d\\nother=n-c-d\\nprint(d,c,other)\", \"read = lambda: map(int, input().split())\\nn, k = read()\\np = n // 2 // (k + 1)\\nprint(p, p * k, n - p * (k + 1))\", \"n,k=input().split()\\nn=int(n)\\nk=int(k)\\ndip=n//(2*(k+1))\\ncert=dip*k\\ntotal=dip+cert\\nprint(str(dip)+\\\" \\\"+str(cert)+\\\" \\\"+str(n-total))\", \"import math\\nn,k = list(map(int,input().split()))\\ntotal = n\\nnone = math.ceil(n/2)\\nn-=none\\nindex = n//(k+1)\\na = index\\nb = index*k\\nnone+=(n-(a+b))\\nprint(a,b,none)\\n\", \"n, k = map(int, input().split())\\n# d * (k + 1) * 2 <= n\\nd = n // (2 * (k + 1))\\ng = k * d\\nr = n - d - g\\nprint(str(d) + \\\" \\\" + str(g) + \\\" \\\" + str(r))\", \"n, k = [int(i) for i in input().split()]\\nl = 0\\nr = 10 ** 13\\n\\nwhile l < r:\\n    \\n    cur = (l + r + 1) // 2\\n    priz = cur * k\\n    if cur + priz <= n // 2:\\n        l = cur\\n    else:\\n        r = cur - 1\\n\\nprint(l, l * k, n - l - l * k)\\n\", \"l = input()\\nn,k = l.split(\\\" \\\")\\nn = int(n)\\nk = int(k)\\nwinmax = n/2\\nnd = winmax/(k+1);\\nnd = int(nd)\\nprint( str(nd)+\\\" \\\"+str(k*nd)+\\\" \\\"+str(n-(k+1)*nd) )\", \"import math\\n\\nstudents, ratio = input().split()\\nstudents, ratio = int(students), int(ratio)\\n\\ndip = math.floor((students/2)/(ratio+1))\\nwin = dip * ratio\\nprint(dip, win, students - dip - win)\", \"n,k = list(map(int, input().split()))\\n\\nmw = n//2\\n\\nd = mw//(k+1)\\n\\nprint(d, k*d, n-d*(1+k))\\n\\n\", \"n, k = list(map(int, input().split()))\\nm = n // 2\\nx = m // (k + 1)\\nprint(x, k * x, n - x - k * x)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"18 2\\n\",\n    \"9 10\\n\",\n    \"1000000000000 5\\n\",\n    \"1000000000000 499999999999\\n\",\n    \"1 1\\n\",\n    \"5 3\\n\",\n    \"42 6\\n\",\n    \"1000000000000 1000\\n\",\n    \"999999999999 999999\\n\",\n    \"732577309725 132613\\n\",\n    \"152326362626 15\\n\",\n    \"2 1\\n\",\n    \"1000000000000 500000000000\\n\",\n    \"100000000000 50000000011\\n\",\n    \"1000000000000 32416187567\\n\",\n    \"1000000000000 7777777777\\n\",\n    \"1000000000000 77777777777\\n\",\n    \"100000000000 578485652\\n\",\n    \"999999999999 10000000000\\n\",\n    \"7 2\\n\",\n    \"420506530901 752346673804\\n\",\n    \"960375521135 321688347872\\n\",\n    \"1000000000000 1000000000000\\n\",\n    \"99999999999 15253636363\\n\",\n    \"19 2\\n\",\n    \"999999999999 1000000000000\\n\",\n    \"1000000000000 5915587276\\n\",\n    \"1000000000000 1000000006\\n\",\n    \"549755813888 134217728\\n\",\n    \"99999999999 3333333\\n\",\n    \"9 1\\n\",\n    \"1000000000000 250000000001\\n\",\n    \"5 1\\n\",\n    \"3107038133 596040207\\n\",\n    \"1000000000000 73786977\\n\",\n    \"1000000000000 73786976\\n\",\n    \"1000000000000 25000000000\\n\",\n    \"216929598879 768233755932\\n\",\n    \"1000000000000 250000000000\\n\",\n    \"1000000000000 100000000001\\n\",\n    \"100000000000 100000000001\\n\",\n    \"900000000000 100281800001\\n\",\n    \"906028900004 109123020071\\n\",\n    \"1000000000000 1\\n\"\n  ],\n  \"outputs\": [\n    \"3 6 9\\n\",\n    \"0 0 9\\n\",\n    \"83333333333 416666666665 500000000002\\n\",\n    \"1 499999999999 500000000000\\n\",\n    \"0 0 1\\n\",\n    \"0 0 5\\n\",\n    \"3 18 21\\n\",\n    \"499500499 499500499000 500000000501\\n\",\n    \"499999 499998500001 500000999999\\n\",\n    \"2762066 366285858458 366288689201\\n\",\n    \"4760198832 71402982480 76163181314\\n\",\n    \"0 0 2\\n\",\n    \"0 0 1000000000000\\n\",\n    \"0 0 100000000000\\n\",\n    \"15 486242813505 513757186480\\n\",\n    \"64 497777777728 502222222208\\n\",\n    \"6 466666666662 533333333332\\n\",\n    \"86 49749766072 50250233842\\n\",\n    \"49 490000000000 509999999950\\n\",\n    \"1 2 4\\n\",\n    \"0 0 420506530901\\n\",\n    \"1 321688347872 638687173262\\n\",\n    \"0 0 1000000000000\\n\",\n    \"3 45760909089 54239090907\\n\",\n    \"3 6 10\\n\",\n    \"0 0 999999999999\\n\",\n    \"84 496909331184 503090668732\\n\",\n    \"499 499000002994 500999996507\\n\",\n    \"2047 274743689216 275012122625\\n\",\n    \"14999 49996661667 50003323333\\n\",\n    \"2 2 5\\n\",\n    \"1 250000000001 749999999998\\n\",\n    \"1 1 3\\n\",\n    \"2 1192080414 1914957717\\n\",\n    \"6776 499980556152 500019437072\\n\",\n    \"6776 499980549376 500019443848\\n\",\n    \"19 475000000000 524999999981\\n\",\n    \"0 0 216929598879\\n\",\n    \"1 250000000000 749999999999\\n\",\n    \"4 400000000004 599999999992\\n\",\n    \"0 0 100000000000\\n\",\n    \"4 401127200004 498872799992\\n\",\n    \"4 436492080284 469536819716\\n\",\n    \"250000000000 250000000000 500000000000\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/818/A",
  "starter_code": ""
}