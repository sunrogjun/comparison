{
  "task_id": "APPS/95",
  "problem_id": 95,
  "prompt": "Array of integers is unimodal, if:\n\n  it is strictly increasing in the beginning;  after that it is constant;  after that it is strictly decreasing. \n\nThe first block (increasing) and the last block (decreasing) may be absent. It is allowed that both of this blocks are absent.\n\nFor example, the following three arrays are unimodal: [5, 7, 11, 11, 2, 1], [4, 4, 2], [7], but the following three are not unimodal: [5, 5, 6, 6, 1], [1, 2, 1, 2], [4, 5, 5, 6].\n\nWrite a program that checks if an array is unimodal.\n\n\n-----Input-----\n\nThe first line contains integer n (1 \u2264 n \u2264 100) \u2014 the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 1 000) \u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint \"YES\" if the given array is unimodal. Otherwise, print \"NO\".\n\nYou can output each letter in any case (upper or lower).\n\n\n-----Examples-----\nInput\n6\n1 5 5 5 4 2\n\nOutput\nYES\n\nInput\n5\n10 20 30 20 10\n\nOutput\nYES\n\nInput\n4\n1 2 1 2\n\nOutput\nNO\n\nInput\n7\n3 3 3 3 3 3 3\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first example the array is unimodal, because it is strictly increasing in the beginning (from position 1 to position 2, inclusively), that it is constant (from position 2 to position 4, inclusively) and then it is strictly decreasing (from position 4 to position 6, inclusively).",
  "solutions": "[\"n = int(input())\\nL = list(map(int, input().split()))\\ni = 0\\na = 0\\nwhile i < n and L[i] > a:\\n    a = L[i]\\n    i += 1\\nwhile i < n and L[i] == a:\\n    i += 1\\nwhile i < n and L[i] < a:\\n    a = L[i]\\n    i += 1\\nif i == n:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ni = 0\\nwhile i + 1 < n and a[i] < a[i + 1]:\\n    i += 1\\nif i + 1 == n:\\n    print('YES')\\nelse:\\n    while i + 1 < n and a[i] == a[i + 1]:\\n        i += 1\\n    if i + 1 == n:\\n        print('YES')\\n    else:\\n        while i + 1 < n and a[i] > a[i + 1]:\\n            i += 1\\n        if i + 1 == n:\\n            print('YES')\\n        else:\\n            print('NO')\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\n\\ni = 1\\nwhile i < n and a[i] > a[i - 1]:\\n    i += 1\\nwhile i < n and a[i] == a[i - 1]:\\n    i += 1\\nwhile i < n and a[i] < a[i - 1]:\\n    i += 1\\n\\nif i == n:\\n    print('YES')\\nelse:\\n    print('NO')\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\nd = [a[i] - a[i - 1] for i in range(1, n)]\\n\\n# print(d)\\n\\nfor i in range(len(d) - 1):\\n\\tif d[i] <= 0 and d[i + 1] > 0:\\n\\t\\tprint('NO')\\n\\t\\treturn\\n\\tif d[i] < 0 and d[i + 1] == 0:\\n\\t\\tprint('NO')\\n\\t\\treturn\\n\\nprint('YES')\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ni = 0\\nwhile i + 1 < n and a[i] < a[i + 1]:\\n    i += 1\\nj = n - 1\\nwhile j > 0 and a[j] < a[j - 1]:\\n    j -= 1\\nflag = True\\nfor x in range(i, j + 1):\\n    if a[x] != a[i]:\\n        flag = False\\n        break\\nprint(\\\"YES\\\" if flag else \\\"NO\\\")\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ncurr = 1\\nwhile curr < n and a[curr] > a[curr - 1]:\\n    curr += 1\\nwhile curr < n and a[curr] == a[curr - 1]:\\n    curr += 1\\nwhile curr < n and a[curr] < a[curr - 1]:\\n    curr += 1\\nif curr == n:\\n    print('YES')\\nelse:\\n    print('NO')\", \"n=int(input())\\nl=[int(i)for i in input().split()]\\nans = \\\"YES\\\"\\nmod= \\\"up\\\"\\nif n>1:\\n\\tfor i in range(1,n):\\n\\t\\tif l[i-1]<l[i] :\\n\\t\\t\\tif mod==\\\"up\\\":\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\telse:\\n\\t\\t\\t\\tans = \\\"NO\\\"\\n\\t\\t\\t\\tbreak\\n\\t\\telif l[i-1]==l[i] :\\n\\t\\t\\tif (mod ==\\\"up\\\" or mod ==\\\"same\\\"):\\n\\t\\t\\t\\tmod = \\\"same\\\"\\n\\t\\t\\telse :\\t\\t\\t\\n\\t\\t\\t\\tans = \\\"NO\\\"\\n\\t\\t\\t\\tbreak\\n\\t\\telse  :\\n\\t\\t\\tmod = \\\"down\\\"\\nprint(ans)\", \"n = input()\\nn = [int(I) for I in input().split(\\\" \\\")]\\n\\nup = False\\ndown = False\\nconstant = False\\n\\nfor I in range(1,len(n)):\\n\\tif n[I] == n[I-1]: #CONSTANT\\n\\t\\tif down == True:\\n\\t\\t\\tprint(\\\"NO\\\")\\n\\t\\t\\treturn\\n\\t\\telse:\\n\\t\\t\\tconstant = True\\n\\telif n[I] > n[I-1]: #UP\\n\\t\\tif (constant or down) == True:\\n\\t\\t\\tprint(\\\"NO\\\")\\n\\t\\t\\treturn\\n\\t\\telse:\\n\\t\\t\\tup = True\\n\\telse:\\n\\t\\tdown = True\\nprint(\\\"YES\\\")\", \"n = int(input())\\n\\nprev = 0\\nf = 0\\n\\nfor v in map(int, input().split()):\\n\\tif v > prev:\\n\\t\\tif f > 0:\\n\\t\\t\\tprint(\\\"NO\\\")\\n\\t\\t\\treturn\\n\\telif v == prev:\\n\\t\\tif f == 2:\\n\\t\\t\\tprint(\\\"NO\\\")\\n\\t\\t\\treturn\\n\\t\\tf = 1\\n\\telse:\\n\\t\\tf = 2\\n\\tprev = v\\n\\nprint(\\\"YES\\\")\", \"import sys \\n\\ndef main():\\n    n = int(sys.stdin.readline())\\n    x = list(map(int,sys.stdin.readline().split()))\\n    i=0\\n    n+=1\\n    x = [0] + x + [0]\\n    while i < n and x[i] < x[i+1]:\\n        i+=1\\n    while i < n and x[i] == x[i+1]:\\n        i+=1\\n    while i < n and x[i] > x[i+1]:\\n        i+=1\\n\\n    if i==n:\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")  \\n\\n    \\n\\nmain()\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nf = 0\\nfor i in range(1, n):\\n\\tif f == 0 and a[i] == a[i-1]:\\n\\t\\tf = 1\\n\\telif f == 0 and a[i] < a[i-1]:\\n\\t\\tf = 2\\n\\telif f == 1 and a[i] < a[i-1]:\\n\\t\\tf = 2\\n\\telif f == 0 and a[i] > a[i-1] or f == 1 and a[i] == a[i-1] or f == 2 and a[i] < a[i-1]:\\n\\t\\tcontinue\\n\\telse:\\n\\t\\tf = -1\\n\\t\\tbreak\\nif f == -1:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\", \"n = int(input())\\nm = [int(i) for i in input().split()]\\ns = 0\\nf = 0\\nfor j in range(n-1):\\n    if m[j] < m[j+1]:\\n        s2 = 0\\n    elif m[j] == m[j+1]:\\n        s2 = 1\\n    else:\\n        s2 = 2\\n    if s2 > s:\\n        s = s2\\n    elif s2 < s:\\n        f = 1\\nif f == 0:\\n    print('YES')\\nelse:\\n    print('NO')\", \"n = int(input())\\nar = input().split()\\ncur = 0\\ncount = 0\\nbo = False\\nfor i in range(n):\\n    if int(ar[i]) > cur and count == 0:\\n        cur = int(ar[i])\\n    elif int(ar[i]) == cur and count <= 1:\\n        count = 1\\n    elif int(ar[i]) < cur and count <= 1:\\n        count = 2\\n        cur = int(ar[i])\\n    elif int(ar[i]) < cur and count == 2:\\n        cur = int(ar[i])\\n    else:\\n        bo = True\\n        break\\nif bo:\\n    print('NO')\\nelse:\\n    print('YES')\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ni = 0\\nwhile i < n - 1 and a[i] < a[i+1]:\\n    i += 1\\nif i == n - 1:\\n    print('YES')\\nelse:\\n    while i < n - 1 and a[i] == a[i+1]:\\n        i += 1\\n    if i == n - 1:\\n        print('YES')\\n    else:\\n        while i < n - 1 and a[i] > a[i+1]:\\n            i += 1\\n        if i == n - 1:\\n            print('YES')\\n        else:\\n            print('NO')\", \"import re\\n\\ninput()\\n\\na, s = [int(x) for x in input().split()], ''\\nfor i in range(1, len(a)):\\n    if a[i] > a[i - 1]:\\n        s += '1'\\n    elif a[i] == a[i - 1]:\\n        s += '2'\\n    else:\\n        s += '3'\\n\\npattern = re.compile('^1*2*3*$')\\nif pattern.match(s):\\n    print('YES')\\nelse:\\n    print('NO')\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nst = 0\\nans = \\\"YES\\\"\\nfor i in range(len(a) - 1):\\n    if a[i] < a[i + 1]:\\n        if st != 0:\\n            ans = 'NO'\\n    elif a[i] == a[i + 1]:\\n        if st == 0:\\n            st = 1\\n        elif st == 2:\\n            ans = 'NO'\\n    else:\\n        st = 2\\nprint(ans)\\n\", \"#!/bin/python3\\n\\nimport sys\\n\\nn=int(input())\\nnum=list(map(int,input().split()))\\ni=0\\nwhile(i<n-1 and num[i]<num[i+1]):\\n    i+=1\\nwhile(i<n-1 and num[i]==num[i+1]):\\n    i+=1\\nwhile(i<n-1 and num[i]>num[i+1]):\\n    i+=1\\nif(i==n-1):\\n    print(\\\"YES\\\")\\nelse:   \\n    print(\\\"NO\\\")\\n\\n\", \"#!/usr/bin/env python3\\nfrom sys import stdin, stdout\\n\\ndef rint():\\n    return list(map(int, stdin.readline().split()))\\n#lines = stdin.readlines()\\n\\n\\nn = int(input())\\na = list(rint())\\n\\nif n == 1:\\n    print(\\\"YES\\\")\\n    return\\n\\nstage = 0\\nfor i in range(n-1):\\n    diff = a[i+1] - a[i]\\n    if stage == 0:\\n        if diff > 0:\\n            pass\\n        elif diff == 0:\\n            stage = 1\\n        else:\\n            stage = 2\\n    elif stage == 1:\\n        if diff > 0 :\\n            print(\\\"NO\\\")\\n            return\\n        elif diff == 0:\\n            pass\\n        else:\\n            stage = 2\\n    elif stage == 2:\\n        if diff > 0 or diff == 0:\\n            print(\\\"NO\\\")\\n            return\\n        else:\\n            pass\\nprint(\\\"YES\\\")\\n\\n\\n\\n\\n\\n\", \"n = int(input())\\n\\na = list(map(int, input().split()))\\n\\ni = 0\\nwhile i < n - 1 and a[i] < a[i + 1]:\\n    i += 1\\n\\nwhile i < n - 1 and a[i] == a[i + 1]:\\n    i += 1\\n\\nwhile i < n - 1 and a[i] > a[i + 1]:\\n    i += 1\\n\\nif i == n - 1:\\n    print('YES')\\nelse:\\n    print('NO')\\n\", \"from sys import stdin\\n\\nn = int(stdin.readline().rstrip())\\ndata = list(map(int, stdin.readline().rstrip().split()))\\n\\nif n == 1:\\n    print(\\\"YES\\\")\\n    return\\n\\nup, hor, down = True, True, True\\n\\nfor i in range(1, len(data)):\\n    if data[i] > data[i - 1]:\\n        if not up:\\n            print(\\\"NO\\\")\\n            return\\n    elif data[i] == data[i - 1]:\\n        up = False\\n        if not hor:\\n            print(\\\"NO\\\")\\n            return\\n    else:\\n        up = False\\n        hor = False\\n        if not down:\\n            print(\\\"NO\\\")\\n            return\\nprint(\\\"YES\\\")\\n\", \"n = int(input())\\ns = [int(i) for i in input().split()]\\na = 0\\nfor i in range(1, n):\\n    if a ==0:\\n        if s[i] <= s[i-1]:\\n            a =1\\n    if a == 1:\\n        if s[i] < s[i-1]:\\n            a =2\\n        if s[i] > s[i - 1]:\\n            a = 3\\n            break\\n    if a == 2:\\n        if s[i] < s[i-1]:\\n            a =2\\n        else:\\n            a = 3\\n            break\\nif a != 3:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\", \"def check(lst):\\n    b = True\\n    sost = 0\\n    for i in range(1, len(a)):\\n        if lst[i] > lst[i - 1]:\\n            if sost != 0:\\n                b = False\\n                break\\n            sost = 0\\n        elif lst[i] == lst[i - 1]:\\n            if sost == 2:\\n                b = False\\n                break\\n            sost = 1\\n        else: \\n            sost = 2\\n    return b\\nn = int(input())\\na = list(map(int, input().split()))\\nif check(a):\\n    print('YES')\\nelse:\\n    print('NO')\\n\", \"n = int(input())\\nA = list(map(int,input().split()))\\nflag = 0\\nfor i,a in enumerate(A):\\n\\tif i == 0:\\n\\t\\tcontinue\\n\\tif flag == 0:\\n\\t\\tif A[i - 1] < a:\\n\\t\\t\\tpass\\n\\t\\telif A[i - 1] == a:\\n\\t\\t\\tflag = 1\\n\\t\\telse:\\n\\t\\t\\tflag = 2\\n\\telif flag == 1:\\n\\t\\tif A[i - 1] < a:\\n\\t\\t\\tflag = -1\\n\\t\\t\\tbreak\\n\\t\\telif A[i - 1] == a:\\n\\t\\t\\tpass\\n\\t\\telse:\\n\\t\\t\\tflag = 2\\n\\telif flag == 2:\\n\\t\\tif A[i - 1] > a:\\n\\t\\t\\tpass\\n\\t\\telse:\\n\\t\\t\\tflag = -1\\n\\t\\t\\tbreak\\nif flag >= 0:\\n\\tprint(\\\"YES\\\")\\nelse:\\n\\tprint(\\\"NO\\\")\"]",
  "input_output": "{\n  \"inputs\": [\n    \"6\\n1 5 5 5 4 2\\n\",\n    \"5\\n10 20 30 20 10\\n\",\n    \"4\\n1 2 1 2\\n\",\n    \"7\\n3 3 3 3 3 3 3\\n\",\n    \"6\\n5 7 11 11 2 1\\n\",\n    \"1\\n7\\n\",\n    \"100\\n527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527\\n\",\n    \"5\\n5 5 6 6 1\\n\",\n    \"3\\n4 4 2\\n\",\n    \"4\\n4 5 5 6\\n\",\n    \"3\\n516 516 515\\n\",\n    \"5\\n502 503 508 508 507\\n\",\n    \"10\\n538 538 538 538 538 538 538 538 538 538\\n\",\n    \"15\\n452 454 455 455 450 448 443 442 439 436 433 432 431 428 426\\n\",\n    \"20\\n497 501 504 505 509 513 513 513 513 513 513 513 513 513 513 513 513 513 513 513\\n\",\n    \"50\\n462 465 465 465 463 459 454 449 444 441 436 435 430 429 426 422 421 418 417 412 408 407 406 403 402 399 395 392 387 386 382 380 379 376 374 371 370 365 363 359 358 354 350 349 348 345 342 341 338 337\\n\",\n    \"70\\n290 292 294 297 299 300 303 305 310 312 313 315 319 320 325 327 328 333 337 339 340 341 345 350 351 354 359 364 367 372 374 379 381 382 383 384 389 393 395 397 398 400 402 405 409 411 416 417 422 424 429 430 434 435 440 442 445 449 451 453 458 460 465 470 474 477 482 482 482 479\\n\",\n    \"99\\n433 435 439 444 448 452 457 459 460 464 469 470 471 476 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 480 479 478 477 476 474 469 468 465 460 457 453 452 450 445 443 440 438 433 432 431 430 428 425 421 418 414 411 406 402 397 396 393\\n\",\n    \"100\\n537 538 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543\\n\",\n    \"100\\n524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 521\\n\",\n    \"100\\n235 239 243 245 246 251 254 259 260 261 264 269 272 275 277 281 282 285 289 291 292 293 298 301 302 303 305 307 308 310 315 317 320 324 327 330 334 337 342 346 347 348 353 357 361 366 370 373 376 378 379 384 386 388 390 395 398 400 405 408 413 417 420 422 424 429 434 435 438 441 443 444 445 450 455 457 459 463 465 468 471 473 475 477 481 486 491 494 499 504 504 504 504 504 504 504 504 504 504 504\\n\",\n    \"100\\n191 196 201 202 207 212 216 219 220 222 224 227 230 231 234 235 238 242 246 250 253 254 259 260 263 267 269 272 277 280 284 287 288 290 295 297 300 305 307 312 316 320 324 326 327 332 333 334 338 343 347 351 356 358 363 368 370 374 375 380 381 386 390 391 394 396 397 399 402 403 405 410 414 419 422 427 429 433 437 442 443 447 448 451 455 459 461 462 464 468 473 478 481 484 485 488 492 494 496 496\\n\",\n    \"100\\n466 466 466 466 466 464 459 455 452 449 446 443 439 436 435 433 430 428 425 424 420 419 414 412 407 404 401 396 394 391 386 382 379 375 374 369 364 362 360 359 356 351 350 347 342 340 338 337 333 330 329 326 321 320 319 316 311 306 301 297 292 287 286 281 278 273 269 266 261 257 256 255 253 252 250 245 244 242 240 238 235 230 225 220 216 214 211 209 208 206 203 198 196 194 192 190 185 182 177 173\\n\",\n    \"100\\n360 362 367 369 374 377 382 386 389 391 396 398 399 400 405 410 413 416 419 420 423 428 431 436 441 444 445 447 451 453 457 459 463 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 465 460 455 453 448 446 443 440 436 435 430 425 420 415 410 405 404 403 402 399 394 390 387 384 382 379 378 373 372 370 369 366 361 360 355 353 349 345 344 342 339 338 335 333\\n\",\n    \"1\\n1000\\n\",\n    \"100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"100\\nn\",\n    \"100\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1\\n\",\n    \"100\\n1 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n\",\n    \"100\\nn\",\n    \"100\\n998 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 999 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 999\\n\",\n    \"100\\n537 538 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 691 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543 543\\n\",\n    \"100\\n527 527 527 527 527 527 527 527 872 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527 527\\n\",\n    \"100\\n524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 208 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 524 521\\n\",\n    \"100\\n235 239 243 245 246 251 254 259 260 261 264 269 272 275 277 281 282 285 289 291 292 293 298 301 302 303 305 307 308 310 315 317 320 324 327 330 334 337 342 921 347 348 353 357 361 366 370 373 376 378 379 384 386 388 390 395 398 400 405 408 413 417 420 422 424 429 434 435 438 441 443 444 445 450 455 457 459 463 465 468 471 473 475 477 481 486 491 494 499 504 504 504 504 504 504 504 504 504 504 504\\n\",\n    \"100\\n191 196 201 202 207 212 216 219 220 222 224 227 230 231 234 235 238 242 246 250 253 254 259 260 263 267 269 272 277 280 284 287 288 290 295 297 300 305 307 312 316 320 324 326 327 332 333 334 338 343 347 351 356 358 119 368 370 374 375 380 381 386 390 391 394 396 397 399 402 403 405 410 414 419 422 427 429 433 437 442 443 447 448 451 455 459 461 462 464 468 473 478 481 484 485 488 492 494 496 496\\n\",\n    \"100\\n466 466 466 466 466 464 459 455 452 449 446 443 439 436 435 433 430 428 425 424 420 419 414 412 407 404 401 396 394 391 386 382 379 375 374 369 364 362 360 359 356 335 350 347 342 340 338 337 333 330 329 326 321 320 319 316 311 306 301 297 292 287 286 281 278 273 269 266 261 257 256 255 253 252 250 245 244 242 240 238 235 230 225 220 216 214 211 209 208 206 203 198 196 194 192 190 185 182 177 173\\n\",\n    \"100\\n360 362 367 369 374 377 382 386 389 391 396 398 399 400 405 410 413 416 419 420 423 428 525 436 441 444 445 447 451 453 457 459 463 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 468 465 460 455 453 448 446 443 440 436 435 430 425 420 415 410 405 404 403 402 399 394 390 387 384 382 379 378 373 372 370 369 366 361 360 355 353 349 345 344 342 339 338 335 333\\n\",\n    \"3\\n1 2 3\\n\",\n    \"3\\n3 2 1\\n\",\n    \"3\\n1 1 2\\n\",\n    \"3\\n2 1 1\\n\",\n    \"3\\n2 1 2\\n\",\n    \"3\\n3 1 2\\n\",\n    \"3\\n1 3 2\\n\",\n    \"100\\n395 399 402 403 405 408 413 415 419 424 426 431 434 436 439 444 447 448 449 454 457 459 461 462 463 464 465 469 470 473 477 480 482 484 485 487 492 494 496 497 501 504 505 508 511 506 505 503 500 499 494 490 488 486 484 481 479 474 472 471 470 465 462 458 453 452 448 445 440 436 433 430 428 426 424 421 419 414 413 408 404 403 399 395 393 388 384 379 377 375 374 372 367 363 360 356 353 351 350 346\\n\",\n    \"100\\n263 268 273 274 276 281 282 287 288 292 294 295 296 300 304 306 308 310 311 315 319 322 326 330 333 336 339 341 342 347 351 353 356 358 363 365 369 372 374 379 383 387 389 391 392 395 396 398 403 404 407 411 412 416 419 421 424 428 429 430 434 436 440 443 444 448 453 455 458 462 463 464 469 473 477 481 486 489 492 494 499 503 506 509 510 512 514 515 511 510 507 502 499 498 494 491 486 482 477 475\\n\",\n    \"100\\n482 484 485 489 492 496 499 501 505 509 512 517 520 517 515 513 509 508 504 503 498 496 493 488 486 481 478 476 474 470 468 466 463 459 456 453 452 449 445 444 439 438 435 432 428 427 424 423 421 419 417 413 408 405 402 399 397 393 388 385 380 375 370 366 363 361 360 355 354 352 349 345 340 336 335 331 329 327 324 319 318 317 315 314 310 309 307 304 303 300 299 295 291 287 285 282 280 278 273 271\\n\",\n    \"100\\n395 399 402 403 405 408 413 415 419 424 426 431 434 436 439 444 447 448 449 454 457 459 461 462 463 464 465 469 470 473 477 480 482 484 485 487 492 494 496 32 501 504 505 508 511 506 505 503 500 499 494 490 488 486 484 481 479 474 472 471 470 465 462 458 453 452 448 445 440 436 433 430 428 426 424 421 419 414 413 408 404 403 399 395 393 388 384 379 377 375 374 372 367 363 360 356 353 351 350 346\\n\",\n    \"100\\n263 268 273 274 276 281 282 287 288 292 294 295 296 300 304 306 308 310 311 315 319 322 326 330 247 336 339 341 342 347 351 353 356 358 363 365 369 372 374 379 383 387 389 391 392 395 396 398 403 404 407 411 412 416 419 421 424 428 429 430 434 436 440 443 444 448 453 455 458 462 463 464 469 473 477 481 486 489 492 494 499 503 506 509 510 512 514 515 511 510 507 502 499 498 494 491 486 482 477 475\\n\",\n    \"100\\n482 484 485 489 492 496 499 501 505 509 512 517 520 517 515 513 509 508 504 503 497 496 493 488 486 481 478 476 474 470 468 466 463 459 456 453 452 449 445 444 439 438 435 432 428 427 424 423 421 419 417 413 408 405 402 399 397 393 388 385 380 375 370 366 363 361 360 355 354 352 349 345 340 336 335 331 329 327 324 319 318 317 315 314 310 309 307 304 303 300 299 295 291 287 285 282 280 278 273 271\\n\",\n    \"2\\n1 3\\n\",\n    \"2\\n1 2\\n\",\n    \"5\\n2 2 1 1 1\\n\",\n    \"4\\n1 3 2 2\\n\",\n    \"6\\n1 2 1 2 2 1\\n\",\n    \"2\\n4 2\\n\",\n    \"3\\n3 2 2\\n\",\n    \"9\\n1 2 2 3 3 4 3 2 1\\n\",\n    \"4\\n5 5 4 4\\n\",\n    \"2\\n2 1\\n\",\n    \"5\\n5 4 3 2 1\\n\",\n    \"7\\n4 3 3 3 3 3 3\\n\",\n    \"5\\n1 2 3 4 5\\n\",\n    \"3\\n2 2 1\\n\",\n    \"3\\n4 3 3\\n\",\n    \"7\\n1 5 5 4 3 3 1\\n\",\n    \"6\\n3 3 1 2 2 1\\n\",\n    \"5\\n1 2 1 2 1\\n\",\n    \"2\\n5 1\\n\",\n    \"9\\n1 2 3 4 4 3 2 2 1\\n\",\n    \"3\\n2 2 3\\n\",\n    \"2\\n5 4\\n\",\n    \"5\\n1 3 3 2 2\\n\",\n    \"10\\n1 2 3 4 5 6 7 8 9 99\\n\",\n    \"4\\n1 2 3 4\\n\",\n    \"3\\n5 5 2\\n\",\n    \"4\\n1 4 2 3\\n\",\n    \"2\\n3 2\\n\",\n    \"5\\n1 2 2 1 1\\n\",\n    \"4\\n3 3 2 2\\n\",\n    \"5\\n1 2 3 2 2\\n\",\n    \"5\\n5 6 6 5 5\\n\",\n    \"4\\n2 2 1 1\\n\",\n    \"5\\n5 4 3 3 2\\n\",\n    \"7\\n1 3 3 3 2 1 1\\n\",\n    \"9\\n5 6 6 5 5 4 4 3 3\\n\",\n    \"6\\n1 5 5 3 2 2\\n\",\n    \"5\\n2 1 3 3 1\\n\",\n    \"2\\n4 3\\n\",\n    \"5\\n3 2 2 1 1\\n\",\n    \"4\\n5 4 3 2\\n\",\n    \"4\\n4 4 1 1\\n\",\n    \"4\\n3 3 1 1\\n\",\n    \"4\\n4 4 2 2\\n\",\n    \"5\\n4 4 3 2 2\\n\",\n    \"8\\n4 4 4 4 5 6 7 8\\n\",\n    \"5\\n3 5 4 4 3\\n\",\n    \"6\\n2 5 3 3 2 2\\n\",\n    \"4\\n5 5 2 2\\n\",\n    \"5\\n1 2 2 3 5\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/831/A",
  "starter_code": ""
}