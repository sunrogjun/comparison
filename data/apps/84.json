{
  "task_id": "APPS/84",
  "problem_id": 84,
  "prompt": "There are n shovels in Polycarp's shop. The i-th shovel costs i burles, that is, the first shovel costs 1 burle, the second shovel costs 2 burles, the third shovel costs 3 burles, and so on. Polycarps wants to sell shovels in pairs.\n\nVisitors are more likely to buy a pair of shovels if their total cost ends with several 9s. Because of this, Polycarp wants to choose a pair of shovels to sell in such a way that the sum of their costs ends with maximum possible number of nines. For example, if he chooses shovels with costs 12345 and 37454, their total cost is 49799, it ends with two nines.\n\nYou are to compute the number of pairs of shovels such that their total cost ends with maximum possible number of nines. Two pairs are considered different if there is a shovel presented in one pair, but not in the other.\n\n\n-----Input-----\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^9) \u2014 the number of shovels in Polycarp's shop.\n\n\n-----Output-----\n\nPrint the number of pairs of shovels such that their total cost ends with maximum possible number of nines. \n\nNote that it is possible that the largest number of 9s at the end is 0, then you should count all such ways.\n\nIt is guaranteed that for every n \u2264 10^9 the answer doesn't exceed 2\u00b710^9.\n\n\n-----Examples-----\nInput\n7\n\nOutput\n3\n\nInput\n14\n\nOutput\n9\n\nInput\n50\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example the maximum possible number of nines at the end is one. Polycarp cah choose the following pairs of shovels for that purpose:  2 and 7;  3 and 6;  4 and 5. \n\nIn the second example the maximum number of nines at the end of total cost of two shovels is one. The following pairs of shovels suit Polycarp:  1 and 8;  2 and 7;  3 and 6;  4 and 5;  5 and 14;  6 and 13;  7 and 12;  8 and 11;  9 and 10. \n\nIn the third example it is necessary to choose shovels 49 and 50, because the sum of their cost is 99, that means that the total number of nines is equal to two, which is maximum possible for n = 50.",
  "solutions": "[\"from sys import stdin as cin\\nfrom sys import stdout as cout\\n\\ndef main():\\n    n = int(cin.readline())\\n    o = 0\\n    for x in range(9, 0, -1):\\n        if 10 ** x // 2 <= n:\\n            ##print(x)\\n            for i in range(9):\\n                q = 10 ** x * (i + 1) // 2 - 1\\n                if q <= n:\\n                    o += min(q, n - q)\\n            print(o)\\n            return\\n    print(n * (n - 1) // 2)\\n\\nmain()\\n\", \"# python3\\n# utf-8\\n\\ndef solve(x, a):\\n    if x < a:\\n        ans = 2 * x - a + 1\\n        ans //= 2\\n        # return ans\\n    else:\\n        ans = (a - 1) // 2\\n    return max(0, ans)\\n\\nn = input()\\noptimal_nines = len(n)\\nif int(n[0]) < 5:\\n    optimal_nines -= 1\\nn = int(n)\\nif n <= 4:\\n    print((n * (n - 1)) // 2)\\n    quit()\\nans = 0\\nfor i in range(0, 9):\\n    curr_num = str(i) + '9' * optimal_nines\\n    curr_num = int(curr_num)\\n    ans += solve(n, curr_num)\\n\\nprint(ans)\\n\", \"def f(w, n):\\n  if w >= 3 and w <= n + 1:\\n    return (w - 1) // 2\\n  elif w > n + 1 and w <= 2 * n - 1:\\n    return ((2 * n + 2) - w - 1) // 2\\n  else:\\n    return 0\\n\\nn = int(input())\\ne = len(str(2 * n)) - 1\\ndes = 10 ** e - 1\\nans = 0\\nfor i in range(1, 10):\\n  ans += f(i * 10 ** e - 1, n)\\nprint(ans)\", \"n=int(input())\\nif n<5:\\n    print(n*(n-1)//2)\\n    return\\ns0=str(n+n-1)\\nk=len(s0)\\nif s0!=k*'9':\\n    k-=1\\ns=k*'9'\\ndef cnt(s):\\n    v=int(s)\\n    #print(v)\\n    if v>n*2-1:\\n        return 0\\n    if v==2*n-1:\\n        return 1\\n    if v>n:\\n        return n-v//2\\n    if v<=n:\\n        return v//2\\nans=cnt(s)\\nfor i in range(1,9):\\n    ans+=cnt(str(i)+s)\\nprint(ans)\", \"n = int(input())\\nif n < 5:\\n\\tprint(n * (n-1) // 2)\\n\\treturn\\nval = 5\\nwhile n >= val * 10:\\n\\tval *= 10\\n# print(val, nines)\\nans = 0\\n_val = val\\nwhile _val <= n:\\n\\tans += min(n - _val+1, _val - 1)\\n\\t_val += val\\nprint(ans)\", \"n = int(input())\\nmax9 = 1\\nwhile (int('9' * max9) + 1) // 2 <= n:\\n    max9 += 1\\nmax9 -= 1\\nk = 0\\nans = 0\\nf = True\\nwhile f:\\n    number = int(str(k) + '9' * max9)\\n    b = min(number - 1, n)\\n    a = number // 2 + 1\\n    if a <= b:\\n        m = b - a + 1\\n        ans += m\\n        k += 1\\n    else:\\n        f = False\\n\\nif n == 2:\\n    print(1)\\nelif n == 3:\\n    print(3)\\nelif n == 4:\\n    print(6)\\nelse:\\n    print(ans)\\n\", \"# IAWT\\nn = int(input())\\nx = str(n + n - 1)\\nif x.count('9') == len(x):\\n    m = len(x)\\nelse: m = len(x) - 1\\nm = '9' * m\\n\\ndef f(x): # Number of pairs with sum x\\n    if n+n-1 < x: return 0\\n    if x <= n:\\n        if x % 2 == 0: return max(x//2-1, 0)\\n        return x//2\\n    if x % 2 == 0:\\n        x //= 2\\n        return max(min(n - x, x - 1), 0)\\n    return max(min(n - x//2, x // 2), 0)\\n\\nans = 0\\nfor i in range(9):\\n    s = int(str(i) + m)\\n    ans += f(s)\\n\\nprint(ans)\\n\", \"\\nn = int(input())\\n\\nbiggest_num = 2 * n - 1\\n\\nif all([x == '9' for x in str(biggest_num)]):\\n    lead_digit = 0\\n    length = len(str(biggest_num))\\nelif all([x == '9' for x in str(biggest_num)[1:]]):\\n    lead_digit = int(str(biggest_num)[0])\\n    length = len(str(biggest_num)) - 1\\nelse:\\n    lead_digit = int(str(biggest_num)[0]) - 1\\n    length = len(str(biggest_num)) - 1\\n\\n\\nresult = 0\\nfor i in range(lead_digit + 1):\\n    desired_num = int(str(i) + '9' * length)\\n    if desired_num == 0: continue\\n    result += (min([n, desired_num - 1]) - max([desired_num // 2, desired_num - n]))\\n    #print(n - max([desired_num // 2, desired_num - n]))\\n    #print(n, desired_num // 2, desired_num - n)\\n\\n    #print(desired_num, (min([n, desired_num - 1]) - max([desired_num // 2, desired_num - n])))\\n\\nprint(result)\\n\", \"n = int(input())\\nlargest = n + n - 1\\npossible = [0, 9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, 999999999]\\nmaximum9 = 0\\nindx1 = 0\\ni = 0\\nfor p in possible:\\n  if p <= largest and p > maximum9:\\n    maximum9 = p\\n    indx1 = i\\n  i += 1\\nindx2 = 0\\nfor i in range(9):\\n  if largest >= i*10**indx1+maximum9:\\n    indx2 = i\\n  else:\\n    break\\ncount = 0\\nfor i in range(indx2+1):\\n  count += max((2*min(n, i*10**indx1+maximum9-1)- max(1,i*10**indx1+maximum9)+1)//2, 0)\\nprint(count)\\n\", \"from collections import Counter\\nn=int(input())\\nif n<5:\\n    d={2:1,3:3,4:6}\\n    print(d[n])\\n    return\\nz=len(str(n//5))\\nnn=5*10**(z-1)\\nn0=n-nn+1\\nif n0<nn:\\n    print(n0)\\nelif n0==nn:\\n    print(n0-1)\\nelif n0<=2*nn:\\n    print(n0-1)\\n\\nelif n0<3*nn:\\n    print(n0*2-2*nn-1)\\nelif n0==3*nn:\\n    print(n0*2-2*nn-2)\\nelif n0<=4*nn:\\n    print(n0*2-2*nn-2)\\n\\nelif n0<5*nn:\\n    print(n0*3-6*nn-2)\\nelif n0==5*nn:\\n    print(n0*3-6*nn-3)\\nelif n0<=6*nn:\\n    print(n0*3-6*nn-3)\\n\\nelif n0<7*nn:\\n    print(n0*4-12*nn-3)\\nelif n0==8*nn:\\n    print(n0*4-12*nn-4)\\nelif n0<=8*nn:\\n    print(n0*4-12*nn-4)\\n\\nelif n0<9*nn:\\n    print(n0*5-20*nn-4)\\nelif n0==9*nn:\\n    print(n0*5-20*nn-5)\", \"from math import factorial as fac\\ndef solve(n):\\n    if n <= 4:\\n        return fac(n) // (2 * fac(n - 2))\\n    m = n + (n - 1)\\n    x = '9'\\n    while(int(x + '9') <= m):\\n        x += '9'\\n    l = []\\n    for i in range(10):\\n        if int(str(i) + x) <= m:\\n            l.append(int(str(i) + x))\\n    res = 0\\n    for p in l:\\n        y = min(p - 1, n)\\n        res += (y - (p - y) + 1) // 2\\n    return res \\nn = int(input())\\nprint(solve(n))\", \"n = int(input())\\nv = min(n, 5)\\nif v < 5:\\n    print(n*(n - 1) // 2)\\n    return\\nwhile v * 10 <= n:\\n    v *= 10\\nprint(sum(min(n - i * v + 1, v * i - 1) for i in range(1, n // v + 1)))\", \"n = int(input())\\nif n <= 4:\\n    print(n*(n-1)//2)\\n    return\\na = 9\\nwhile int(str(a) + '9') <= 2*n - 1:\\n    a = int(str(a) + '9')\\nans = 0\\nfor i in range(0, 9):\\n    r = int(str(i) + str(a))\\n    if r > 2*n - 1:\\n        break\\n    ku = r - n\\n    if ku < 1:\\n        ans += r//2\\n    elif ku < n:\\n        ans += (n - ku + 1) // 2\\nprint(ans)\\n\", \"from math import *\\nimport sys\\n#sys.stdin = open('in.txt')\\n\\nn =   int(input())\\n\\ndef closest9(n):\\n  s = '9'*(len(str(n+1))-1)\\n  return 0 if len(s) == 0 else int(s)\\n\\ndef solve(n):\\n  if n == 2: return 1\\n  if n == 3: return 3\\n  if n == 4: return 6\\n  s = n+n-1\\n  c = closest9(s)\\n  if c*10 + 9 == s: return 1\\n  p = c\\n  res = 0\\n  for i in range(10):\\n    if p <= n+1:\\n      res += p//2\\n    elif p > s:\\n      break\\n    else:\\n      res += 1+(s - p)//2\\n    #print(p, v)\\n    p += c+1\\n  return res\\n\\nprint(solve(n))\\n\\n\", \"import sys\\n\\nlines = []\\nfor line in sys.stdin:\\n    lines.append(line)\\n\\nn = int(lines[0].rstrip(\\\"\\\\r\\\\n\\\\t \\\"))\\n\\nmax_price = n * 2 - 1\\nnines = len(str(max_price + 1)) - 1\\n\\nif nines < 1:\\n    cnt = 0\\n    for x in range(1, n):\\n        cnt += x\\n    print(cnt)\\n    return\\n\\nprice_suffix = \\\"9\\\"*nines\\ncnt = 0\\n\\n\\ndef add_pairs(max_x: int, p: int):\\n    nonlocal cnt\\n    from_max = int(p / 2)\\n    to_max = p - 1\\n    if to_max > max_x:\\n        to_max = max_x\\n    from_min = p - to_max\\n    cnt += from_max - from_min + 1\\n\\n\\nfor d in range(0, 10):\\n    if d > 0:\\n        price = int(str(d) + price_suffix)\\n    else:\\n        price = int(price_suffix)\\n    if price <= max_price:\\n        add_pairs(n, price)\\n\\nprint(cnt)\\n\", \"\\ndef check9(x):\\n\\ti = len(x) - 1\\n\\twhile (i >= 0):\\n\\t\\tif (x[i] != '9'):\\n\\t\\t\\treturn len(x) - i - 1\\n\\t\\ti -= 1\\n\\treturn len(x) - i - 1\\n\\ndef solve(n):\\n\\tif (n < 5):\\n\\t\\treturn (n*(n-1)//2)\\n\\tres = 0\\n\\tx = str(n+n-1)\\n\\tlength = len(x)\\n\\n\\tif (check9(x) == length):\\n\\t\\treturn 1\\n\\t\\n\\tcur = '9'*(length-1)\\n\\tfor i in range(9):\\n\\t\\tc = str(i)\\n\\t\\tp = int(c+cur)\\n\\t\\tif (p <= n+1):\\n\\t\\t\\tres += p//2\\n\\t\\telif (p > n+n-1):\\n\\t\\t\\tres += 0\\n\\t\\telse:\\n\\t\\t\\tres += 1 + (n + n - 1 - p)//2\\n\\n\\treturn res\\n\\nn = int(input())\\n\\nprint(solve(n))\\n\\n\", \"n = int(input())\\nle = len(str(n))\\nif n < 5:\\n    print((n * (n - 1)) // 2)\\nelif str(n).count('9') == le:\\n    print(n // 2)\\nelse:\\n    if n + n - 1 < int('9'*le):\\n        le -= 1\\n    ans = 0\\n    s = '9'*le\\n    for i in range(9):\\n        t = str(i) + s\\n        t = int(t)\\n        if t <= n + 1:\\n            ans += t // 2\\n        elif t <= n + n - 1:\\n            ans += (1 + (n + n - 1 - t)//2)\\n    print(ans)\\n\", \"from sys import stdin, stdout\\n\\nINF = float('inf')\\nn = int(stdin.readline())\\ncount = [0, 5, 50, 500, 5000, 50000, 500000, 5000000, 50000000, 500000000, INF]\\n\\nfor label in range(len(count)):\\n    if count[label + 1] > n:\\n        break\\n\\npref = 0\\nvalue = int(str(pref) + '9' * label)\\nans = 0\\n\\nwhile value <= n - 1 + n:\\n    \\n    if n < 5:\\n        ans = n * (n - 1) // 2\\n        break\\n    \\n    k = max(value - n, 1)\\n    ans += (min(n, value - 1) - k + 1) // 2\\n    \\n    pref += 1\\n    value = int(str(pref) + '9' * label)\\n\\nstdout.write(str(ans))\", \"n = int(input())\\na= 5\\nwhile a * 10 <= n:\\n    a *= 10\\nprint(sum(min(n - i * a + 1, a * i - 1) for i in range(1, n // a + 1)) if n>=5 else n*(n-1)//2)\", \"n = int(input())\\na=5\\nwhile a*10<=n:a*=10\\nprint(sum(min(n-i,i) for i in range(a-1,n,a)) if n>4 else n*(n-1)//2)\", \"n = int(input())\\nm = 2*n-1\\nw = len(str(m+1))-1\\nans = 0\\nfor i in range(10):\\n\\tv = (i+1)*10**w - 1\\n\\tif 0 < v <= m:\\n\\t\\tans += (v-1)//2\\n\\t\\tif v > n: ans -= v-n-1\\nprint(ans)\", \"nine = [0, 9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999]\\n\\n\\ndef get_answer(n):\\n    if (n < 5):\\n        return (n*(n-1))//2\\n    elif (2*n-1 in nine):\\n        return 1\\n    elif (n in nine):\\n        return (n-1)//2\\n    \\n    str_n = str(n)\\n    len_n = len(str_n)\\n    len_2n = len(str(2*n-1))\\n    \\n    if len_n == len_2n: # n < 50..0\\n        # pattern: A9..9, |9..9| = |n| - 1\\n        suf = \\\"9\\\" * (len_n - 1)\\n        k = int(suf)\\n        res = 0\\n        for c in range(10):\\n            if (int(str(c) + suf) <= 2*n-1):\\n                # print(str_n[0], c, '+', suf)\\n                if (int(str(c) + suf) <= n):\\n                    for i in range(c//2+1):\\n                        if i == c-i:\\n                            if i == 0:  # (0, 0): 01 -> 49\\n                                res += (k-1)//2\\n                            else:  # (1, 1): 00 -> 49\\n                                res += (k+1)//2\\n                        else:\\n                            if i == 0:  # (0, 1): 01 -> 99 \\n                                res += k\\n                            else:  # (1, 2): 00 -> 99\\n                                res += k+1\\n                else:\\n                    for i in range(c//2+1):\\n                        if i > int(str_n[0]) or c-i > int(str_n[0]):\\n                            continue\\n                        elif i < int(str_n[0]) and c-i < int(str_n[0]):\\n                            if i == c-i:\\n                                if i == 0:  # (0, 0): 01 -> 49\\n                                    res += (k-1)//2\\n                                else:  # (1, 1): 00 -> 49\\n                                    res += (k+1)//2\\n                            else:\\n                                if i == 0:  # (0, 1): 01 -> 99 \\n                                    res += k\\n                                else:  # (1, 2): 00 -> 99\\n                                    res += k+1\\n                        else:\\n                            # print(i, c-i, int(str(c) + suf), n)\\n                            if i != c - i:\\n                                # print(n-int(str_n[0])*(k+1)+1)\\n                                res += n-int(str_n[0])*(k+1)+1\\n                            else:\\n                                _n = int(str_n[1:])\\n                                # print(_n)\\n                                res += get_answer(_n) + (_n in nine)\\n                                # 99: (0, 0): 01 -> 49, (i, i): 00 -> 49 => +1\\n            else:\\n                break\\n        return res\\n    else: # n > 50..0\\n        # pattern: 9..9, |9..9| = |n|\\n        suf = int('9' * len_n)\\n        return n - (suf+1)//2 + 1\\n\\nprint(get_answer(int(input())))\\n\", \"n = int(input())\\nm = n\\n\\ndigits = 0\\nwhile m > 0:\\n    m //= 10\\n    digits += 1\\nif n < 5:\\n    print(n * (n - 1) // 2)\\n    return\\nif n == 10 ** digits - 1:\\n    print(n // 2)\\n    return\\nif n >= 5 * 10 ** (digits - 1):\\n    print(n - 5 * 10 ** (digits - 1) + 1) \\nelse:\\n    fst = int(str(n)[0])\\n    res = (fst) * (fst - 1) // 2 * 10 ** (digits - 1)\\n    res += (fst) * (10 ** (digits - 1) // 2 - 1)\\n\\n    n = int(str(n)[1:])\\n    digits -= 1\\n    if n == 10 ** digits - 1:\\n        res += (n // 2)\\n    elif n >= 5 * 10 ** (digits - 1):\\n        res += (n - 5 * 10 ** (digits - 1) + 1)\\n    res += (n + 1) * fst \\n    print(res)\\n\\n\", \"import sys\\nn = int(sys.stdin.readline().rstrip(\\\"\\\\n\\\"))\\n\\nif n < 5:\\n    res = n * (n-1) // 2\\n    print(res)\\n    return\\n\\nsum = n + (n - 1)\\nl = len(str(sum))\\nif str(sum) == l * '9':\\n    print(1)\\n    return\\n\\n\\nres = 0\\ns = (l - 1) * '9'\\nfor i in range(9):\\n    p = str(i) + s\\n    if int(p) <= n + 1:\\n        res += int(p) // 2\\n    elif int(p) > sum:\\n        break\\n    else:\\n        res += (1 + (sum - int(p)) // 2)\\nprint(res)\\n\\n\\n\", \"s = input()\\nn = int(s)\\nnum = '9'*len(s)\\nnum = int(num)\\nif(2*n < num):\\n    num = num // 10\\nif (num == 0):\\n    print((n*(n-1)//2));\\n    return\\nret = 0;\\nfor i in range (9):\\n    tmp = str(i) + str(num)\\n    tmp = int(tmp);\\n    if (2 * n <= tmp):\\n        break;\\n    biggest = min(tmp - 1, n);\\n    smallest = tmp - biggest\\n    ret += (biggest - smallest + 1) // 2\\nprint(ret)\\n# else :\\n#     biggest = min(num - 1, n);\\n#     smallest = num - biggest\\n#     print((biggest - smallest + 1) // 2)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"7\\n\",\n    \"14\\n\",\n    \"50\\n\",\n    \"999999999\\n\",\n    \"15\\n\",\n    \"3\\n\",\n    \"6500\\n\",\n    \"4\\n\",\n    \"13\\n\",\n    \"10\\n\",\n    \"499999\\n\",\n    \"6\\n\",\n    \"8\\n\",\n    \"9\\n\",\n    \"11\\n\",\n    \"12\\n\",\n    \"5\\n\",\n    \"16\\n\",\n    \"17\\n\",\n    \"18\\n\",\n    \"19\\n\",\n    \"20\\n\",\n    \"21\\n\",\n    \"22\\n\",\n    \"23\\n\",\n    \"24\\n\",\n    \"25\\n\",\n    \"26\\n\",\n    \"27\\n\",\n    \"28\\n\",\n    \"29\\n\",\n    \"30\\n\",\n    \"31\\n\",\n    \"32\\n\",\n    \"33\\n\",\n    \"34\\n\",\n    \"35\\n\",\n    \"36\\n\",\n    \"37\\n\",\n    \"38\\n\",\n    \"39\\n\",\n    \"40\\n\",\n    \"41\\n\",\n    \"42\\n\",\n    \"43\\n\",\n    \"44\\n\",\n    \"45\\n\",\n    \"46\\n\",\n    \"47\\n\",\n    \"48\\n\",\n    \"49\\n\",\n    \"51\\n\",\n    \"100\\n\",\n    \"99\\n\",\n    \"101\\n\",\n    \"4999\\n\",\n    \"4998\\n\",\n    \"4992\\n\",\n    \"5000\\n\",\n    \"5001\\n\",\n    \"10000\\n\",\n    \"10001\\n\",\n    \"49839\\n\",\n    \"4999999\\n\",\n    \"49999999\\n\",\n    \"499999999\\n\",\n    \"999\\n\",\n    \"9999\\n\",\n    \"99999\\n\",\n    \"999999\\n\",\n    \"9999999\\n\",\n    \"99999999\\n\",\n    \"2\\n\",\n    \"1000000000\\n\",\n    \"764675465\\n\",\n    \"499999998\\n\",\n    \"167959139\\n\",\n    \"641009859\\n\",\n    \"524125987\\n\",\n    \"702209411\\n\",\n    \"585325539\\n\",\n    \"58376259\\n\",\n    \"941492387\\n\",\n    \"824608515\\n\",\n    \"2691939\\n\",\n    \"802030518\\n\",\n    \"685146646\\n\",\n    \"863230070\\n\",\n    \"41313494\\n\",\n    \"219396918\\n\",\n    \"102513046\\n\",\n    \"985629174\\n\",\n    \"458679894\\n\",\n    \"341796022\\n\",\n    \"519879446\\n\",\n    \"452405440\\n\",\n    \"335521569\\n\",\n    \"808572289\\n\",\n    \"691688417\\n\",\n    \"869771841\\n\",\n    \"752887969\\n\",\n    \"930971393\\n\",\n    \"109054817\\n\",\n    \"992170945\\n\",\n    \"170254369\\n\",\n    \"248004555\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"9\\n\",\n    \"1\\n\",\n    \"499999999\\n\",\n    \"11\\n\",\n    \"3\\n\",\n    \"1501\\n\",\n    \"6\\n\",\n    \"8\\n\",\n    \"5\\n\",\n    \"1249995\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"7\\n\",\n    \"1\\n\",\n    \"13\\n\",\n    \"15\\n\",\n    \"17\\n\",\n    \"18\\n\",\n    \"20\\n\",\n    \"22\\n\",\n    \"24\\n\",\n    \"26\\n\",\n    \"28\\n\",\n    \"31\\n\",\n    \"34\\n\",\n    \"37\\n\",\n    \"40\\n\",\n    \"42\\n\",\n    \"45\\n\",\n    \"48\\n\",\n    \"51\\n\",\n    \"54\\n\",\n    \"57\\n\",\n    \"61\\n\",\n    \"65\\n\",\n    \"69\\n\",\n    \"73\\n\",\n    \"76\\n\",\n    \"80\\n\",\n    \"84\\n\",\n    \"88\\n\",\n    \"92\\n\",\n    \"96\\n\",\n    \"101\\n\",\n    \"106\\n\",\n    \"111\\n\",\n    \"116\\n\",\n    \"120\\n\",\n    \"2\\n\",\n    \"50\\n\",\n    \"49\\n\",\n    \"51\\n\",\n    \"12495\\n\",\n    \"12491\\n\",\n    \"12461\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"5000\\n\",\n    \"5001\\n\",\n    \"124196\\n\",\n    \"12499995\\n\",\n    \"124999995\\n\",\n    \"1249999995\\n\",\n    \"499\\n\",\n    \"4999\\n\",\n    \"49999\\n\",\n    \"499999\\n\",\n    \"4999999\\n\",\n    \"49999999\\n\",\n    \"1\\n\",\n    \"500000000\\n\",\n    \"264675466\\n\",\n    \"1249999991\\n\",\n    \"135918279\\n\",\n    \"141009860\\n\",\n    \"24125988\\n\",\n    \"202209412\\n\",\n    \"85325540\\n\",\n    \"8376260\\n\",\n    \"441492388\\n\",\n    \"324608516\\n\",\n    \"3575818\\n\",\n    \"302030519\\n\",\n    \"185146647\\n\",\n    \"363230071\\n\",\n    \"85253976\\n\",\n    \"238793836\\n\",\n    \"52513046\\n\",\n    \"485629175\\n\",\n    \"1043399471\\n\",\n    \"575388066\\n\",\n    \"19879447\\n\",\n    \"1012027201\\n\",\n    \"556564707\\n\",\n    \"308572290\\n\",\n    \"191688418\\n\",\n    \"369771842\\n\",\n    \"252887970\\n\",\n    \"430971394\\n\",\n    \"59054817\\n\",\n    \"492170946\\n\",\n    \"140508739\\n\",\n    \"296009110\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/899/D",
  "starter_code": ""
}