{
  "task_id": "APPS/33",
  "problem_id": 33,
  "prompt": "You are given two arithmetic progressions: a_1k + b_1 and a_2l + b_2. Find the number of integers x such that L \u2264 x \u2264 R and x = a_1k' + b_1 = a_2l' + b_2, for some integers k', l' \u2265 0.\n\n\n-----Input-----\n\nThe only line contains six integers a_1, b_1, a_2, b_2, L, R (0 < a_1, a_2 \u2264 2\u00b710^9,  - 2\u00b710^9 \u2264 b_1, b_2, L, R \u2264 2\u00b710^9, L \u2264 R).\n\n\n-----Output-----\n\nPrint the desired number of integers x.\n\n\n-----Examples-----\nInput\n2 0 3 3 5 21\n\nOutput\n3\n\nInput\n2 4 3 0 6 17\n\nOutput\n2",
  "solutions": "[\"import sys, collections\\n\\ndef gcd(a, b):\\n    if b == 0: return a\\n    return gcd(b, a % b)\\n\\ndef lcm(a, b):\\n    return a // gcd(a, b) * b\\n\\ndef extgcd(a, b):\\n    if b == 0: return 1, 0\\n    x, y = extgcd(b, a % b)\\n    return y, x - a // b * y\\n\\ndef prime_factor(n):\\n    res = collections.defaultdict(int)\\n\\n    i = 2\\n    while i * i <= n:\\n        cnt = 0\\n        while n % i == 0:\\n            n //= i\\n            cnt += 1\\n        if cnt > 0: res[i] = cnt\\n        i += 1\\n    if n != 1: res[n] = 1\\n\\n    return res\\n\\ndef modinv(a, mod):\\n    if a == 0: return -1\\n    if gcd(a, mod) != 1: return -1\\n    return extgcd(a, mod)[0] % mod\\n\\ndef normalize(a1, a2):\\n    p1 = prime_factor(a1)\\n    p2 = prime_factor(a2)\\n\\n    keys = list(set(p1.keys()) | set(p2.keys()))\\n\\n    r1 = 1\\n    r2 = 1\\n    for k in keys:\\n        if p1[k] >= p2[k]:\\n            r1 *= k ** p1[k]\\n        else:\\n            r2 *= k ** p2[k]\\n    return r1, r2\\n\\ndef solve(a1, b1, a2, b2):\\n    g = gcd(a1, a2)\\n    if (b1 - b2) % g != 0: return -1\\n\\n    a1, a2 = normalize(a1, a2)\\n    u = b1 % a1\\n    inv = modinv(a1, a2)\\n    v = (b2 - u) * inv % a2\\n    return u + v * a1\\n\\ndef f(x0, T, v):\\n    ok = 10 ** 36\\n    ng = -1\\n\\n    while ok - ng > 1:\\n        mid = (ok + ng) // 2\\n\\n        if x0 + T * mid >= v:\\n            ok = mid\\n        else:\\n            ng = mid\\n\\n    return ok\\n\\na1, b1, a2, b2, L, R = map(int, input().split())\\n\\nT = lcm(a1, a2)\\nx0 = solve(a1, b1, a2, b2)\\n\\nif x0 == -1:\\n    print(0)\\n    return\\n\\nx0 -= T * 10 ** 36\\n\\nok = 10 ** 60\\nng = -1\\n\\nwhile ok - ng > 1:\\n    mid = (ok + ng) // 2\\n\\n    val = x0 + T * mid\\n    k = (val - b1) // a1\\n    l = (val - b2) // a2\\n    if k >= 0 and l >= 0:\\n        ok = mid\\n    else:\\n        ng = mid\\n\\nx0 += ok * T\\n\\n# L <= x0 + kT < R + 1\\nans = f(x0, T, R + 1) - f(x0, T, L)\\n\\nprint(ans)\", \"import sys\\n\\ndef gcd(a, b):\\n    while b != 0:\\n        a, b = b, a % b\\n    return a\\n\\ndef lcm(a, b):\\n    return a * b // gcd(a, b)\\n\\n# ax+by=c\\ndef extgcd(a, b, c):\\n    if b == 0: return c, 0\\n    x, y = extgcd(b, a % b, c)\\n    return y, x - a // b * y\\n\\ndef first_term(a1, b1, a2, b2):\\n    g = gcd(a1, a2)\\n    T = lcm(a1, a2)\\n\\n    # s*a1+t*a2=b2-b1\\n    if (b2 - b1) % g != 0: return -(10 ** 100)\\n    x0 = extgcd(a1 // g, a2 // g, (b2 - b1) // g)[0] * a1 + b1 - T * 10 ** 30\\n\\n    ok = 10 ** 60\\n    ng = -1\\n\\n    while ok - ng > 1:\\n        mid = (ok + ng) // 2\\n        val = x0 + T * mid\\n        k = (val - b1) // a1\\n        l = (val - b2) // a2\\n\\n        if k >= 0 and l >= 0:\\n            ok = mid\\n        else:\\n            ng = mid\\n\\n    return x0 + ok * T\\n\\ndef f(a0, T, v):\\n    ok = 10 ** 36\\n    ng = -1\\n\\n    while ok - ng > 1:\\n        mid = (ok + ng) // 2\\n\\n        if a0 + T * mid >= v:\\n            ok = mid\\n        else:\\n            ng = mid\\n\\n    return ok\\n\\na1, b1, a2, b2, L, R = list(map(int, input().split()))\\n\\nT = lcm(a1, a2)\\na0 = first_term(a1, b1, a2, b2)\\n\\nif a0 == -(10 ** 100):\\n    print(0)\\n    return\\n\\nprint(f(a0, T, R + 1) - f(a0, T, L))\\n\", \"def nod(a, b):\\n    if b == 0:\\n        return a, 1, 0\\n    else:\\n        answer, x, y = nod(b, a % b)\\n        x1 = y\\n        y1 = x - (a // b) * y\\n        return answer, x1, y1\\n\\n\\na1, b1, a2, b2, l, r = list(map(int, input().split()))\\ncoeff = b1\\nb1, b2, l, r = b1 - coeff, b2 - coeff, max(l - coeff, 0), r - coeff\\nl = max(b2, l)\\nod, x1, y1 = nod(a1, -a2)\\nif b2 % od != 0 or l > r:\\n    print(0)\\nelse:    \\n    x1, y1 = x1 * (b2 // od), y1 * (b2 // od)\\n    result = x1 * a1 \\n    raznitsa = a1 * a2 // nod(a1, a2)[0]\\n    otvet = 0\\n    if result < l:\\n        vsp = (l - result) // raznitsa\\n        if (l - result) % raznitsa != 0:\\n            vsp += 1\\n        result += vsp * raznitsa\\n    if result > r:\\n        vsp = (result - r) // raznitsa\\n        if (result - r) % raznitsa != 0:\\n            vsp += 1        \\n        result -= vsp * raznitsa      \\n    if result <= r and result >= l:\\n        otvet += 1\\n        otvet += abs(result - r) // raznitsa\\n        otvet += abs(result - l) // raznitsa\\n    print(otvet)    \\n    # 3 * (- 54) + 81 = \\n\", \"import sys\\n\\ndef gcd(a, b):\\n    while b != 0:\\n        a, b = b, a % b\\n    return a\\n\\ndef lcm(a, b):\\n    return a * b // gcd(a, b)\\n\\n# ax+by=c\\ndef extgcd(a, b, c):\\n    if b == 0: return c, 0\\n    x, y = extgcd(b, a % b, c)\\n    return y, x - a // b * y\\n\\ndef first_term(a1, b1, a2, b2):\\n    g = gcd(a1, a2)\\n    T = lcm(a1, a2)\\n\\n    # s*a1+t*a2=b2-b1\\n    if (b2 - b1) % g != 0: return -(10 ** 100)\\n    x0 = extgcd(a1 // g, a2 // g, (b2 - b1) // g)[0] * a1 + b1 - T * 10 ** 30\\n\\n    ok = 10 ** 60\\n    ng = -1\\n\\n    while ok - ng > 1:\\n        mid = (ok + ng) // 2\\n        val = x0 + T * mid\\n        k = (val - b1) // a1\\n        l = (val - b2) // a2\\n\\n        if k >= 0 and l >= 0:\\n            ok = mid\\n        else:\\n            ng = mid\\n\\n    return x0 + ok * T\\n\\ndef f(a0, T, v):\\n    ok = 10 ** 36\\n    ng = -1\\n\\n    while ok - ng > 1:\\n        mid = (ok + ng) // 2\\n\\n        if a0 + T * mid >= v:\\n            ok = mid\\n        else:\\n            ng = mid\\n\\n    return ok\\n\\na1, b1, a2, b2, L, R = map(int, input().split())\\n\\nT = lcm(a1, a2)\\na0 = first_term(a1, b1, a2, b2)\\n\\nif a0 == -(10 ** 100):\\n    print(0)\\n    return\\n\\nprint(f(a0, T, R + 1) - f(a0, T, L))\", \"from fractions import gcd\\ndef egcd(a, b):\\n    if a == 0:\\n        return [0, 1]\\n    if b == 0:\\n        return [1, 0]\\n    p = egcd(b%a, a)\\n    x = p[0]; y = p[1]\\n    return [y-x*(b//a), x]\\n\\ndef solve(a1, m1, a2, m2):\\n    sol = egcd(m1, m2)\\n    m1x = m1 * sol[0]\\n    m2y = m2 * sol[1]\\n    return (m1x*a2+m2y*a1)\\n\\na1, b1, a2, b2, L, R = list(map(int, input().split(' ')))\\nL -= b1; R -= b1; b2 -= b1; b1 = 0;\\ng = gcd(a1, a2)\\nL = max(L, max(b1, b2))\\nif (b2%g != 0 or L > R):\\n    print(0)\\n    quit()\\nrmod = a1 * a2 // g;\\na1 //= g; b2 //= g; a2 //= g;\\nsol = solve(b1, a1, b2, a2);\\nmod = a1 * a2;\\nsol %= mod; sol *= g;\\nL -= sol; R -= sol;\\nif (L <= 0):\\n    lnew = L%rmod; R += lnew - L; L = lnew;\\nL += rmod; R += rmod;\\nprint(R//rmod - (L-1)//rmod)\\n\\n\", \"def exgcd(i, j):\\n    if j == 0:\\n        return 1, 0, i\\n    u, v, d = exgcd(j, i % j)\\n    return v, u - v * (i // j), d\\nma, ra, mb, rb, L, R = list(map(int, input().split(' ')))\\nL = max(L, ra, rb)\\nif L > R:\\n    print(0)\\n    return\\nif ra > rb:\\n    ma, ra, mb, rb = mb, rb, ma, ra\\n_, _, md = exgcd(ma, mb)\\nif md != 1:\\n    if (rb - ra) % md != 0:\\n        print(0)\\n        return\\n    m = ma * mb // md\\n    rev, _, _ = exgcd(ma // md, mb // md)\\n    rev = (rev % (mb // md) + mb // md) % (mb // md)\\n    r = ma * (rb - ra) // md * rev + ra\\n    r = (r % m + m) % m\\nelse:\\n    m = ma * mb\\n    bv, av, _ = exgcd(ma, mb)\\n    r = ra * mb * av + rb * ma * bv\\n    r = (r % m + m) % m\\ndef calc(i):\\n    return (i - r) // m\\nprint(calc(R) - calc(L - 1))\\n\", \"#!/usr/bin/env\\tpython\\n#-*-coding:utf-8 -*-\\nimport math\\na1,b1,a2,b2,l,r=list(map(int,input().split()))\\nif b1<l:b1=(b1-l)%a1+l\\nif b2<l:b2=(b2-l)%a2+l\\nc=a1//math.gcd(a1,a2)*a2\\nm=min(1+r,c+max(b1,b2))\\nwhile b1!=b2 and m>b1:\\n\\tif b1<b2:b1=(b1-b2)%a1+b2\\n\\telse:b2=(b2-b1)%a2+b1\\nprint((m>b1)*(1+(r-b1)//c))\\n\", \"import math \\n\\n# g, x, y\\ndef gcd(a, b) :\\n    if a == 0 :\\n        return [b, 0, 1]\\n    l = gcd(b % a, a)\\n    g, x1, y1 = [int(i) for i in l]\\n    x = y1 - (b // a) * x1\\n    y = x1\\n    return [g, x, y]\\n\\ndef my_ceil(u, v) :\\n    if v < 0 :\\n        u *= -1\\n        v *= -1\\n    return math.ceil(u / v)\\n\\ndef my_floor(u, v) :\\n    if v < 0 :\\n        u *= -1\\n        v *= -1\\n    return math.floor(u / v)\\n\\na1, b1, a2, b2, L, R = [int(i) for i in input().split()]\\nA = a1\\nB = -a2\\nC = b2 - b1\\ng, x0, y0 = [int(i) for i in gcd(abs(A), abs(B))]\\n\\nif A < 0 : x0 *= -1\\nif B < 0 : y0 *= -1\\n\\nif C % g != 0 :\\n    print(0)\\n    return\\n\\nx0 *= C // g\\ny0 *= C // g\\n\\nle = max([\\n    float(R - b1 - a1 * x0) / float(a1 * B // g),\\n    float(y0 * a2 + b2 - R) / float(a2 * A // g)\\n    ])\\n\\nri = min([\\n    float(L - b1 - a1 * x0) / float(a1 * B // g),\\n    float(y0 * a2 + b2 - L) / float(a2 * A // g),\\n    float(-x0) / float(B // g),\\n    float(y0) / float(A // g)\\n    ])\\n\\nle = int(math.ceil(le))\\nri = int(math.floor(ri))\\n\\nif ri - le + 1 <= 10000 :\\n    result = 0\\n    for k in range(le - 100, ri + 101) :\\n        X = x0 + B * k // g\\n        Y = y0 - A * k // g\\n        if X >= 0 and Y >= 0 and a1 * X + b1 >= L and a1 * X + b1 <= R :\\n            result += 1\\n    print(result)\\nelse : \\n    print(max(int(0), ri - le + 1))\\n\", \"from collections import defaultdict\\nimport sys, os, math\\n\\ndef gcd(a1, a2):\\n    if a2 == 0:\\n        return a1\\n    else:\\n        return gcd(a2, a1 % a2)\\n        \\n# return (g, x, y) a*x + b*y = gcd(x, y)\\ndef egcd(a, b):\\n    if a == 0:\\n        return (b, 0, 1)\\n    else:\\n        g, x, y = egcd(b % a, a)\\n        return (g, y - (b // a) * x, x)\\ndef __starting_point():\\n    #n, m = list(map(int, input().split()))\\n    a1, b1, a2, b2, L, R = map(int, input().split())\\n    a2 *= -1 \\n    LCM = a1 * a2 // gcd(a1, a2)\\n    if abs(b1 - b2) % gcd(a1, a2) != 0:\\n        print(0)\\n        return\\n    L = max([b1, b2, L])\\n    g, x, y = egcd(a1, a2)\\n    X = a1 * x * (b2 - b1) // g + b1\\n    X += LCM * math.ceil((L - X) / LCM)\\n    if L <= X <= R:\\n        print(max(0, (R - X) // LCM + 1))\\n    else:\\n        print(0)\\n__starting_point()\", \"def extgcd(a, b):\\n    x, y = 0, 0\\n    d = a;\\n    if b != 0:\\n        d, y, x = extgcd(b, a%b)\\n        y -= (a//b) * x\\n    else:\\n        x, y = 1, 0\\n    return (d, x, y)\\n\\ndef main():\\n    a1, b1, a2, b2, L, R = map(int, input().split())\\n    g, k, l = extgcd(a1, a2);\\n    b = b2-b1;\\n    if (b%g != 0):\\n        print (0)\\n        return\\n    k *= b//g\\n    l *= -b//g\\n    low = -2**100\\n    high = 2**100\\n    while high-low > 1:\\n        med = (low+high)//2\\n        tk = k+med*a2//g\\n        tl = l+med*a1//g\\n        if (tk >= 0 and tl >= 0):\\n            high = med\\n        else:\\n            low = med\\n    k = k+high*a2//g\\n    x = a1*k+b1\\n    low = -1\\n    high = 2**100\\n    lcm = a1*a2//g\\n    while high - low > 1:\\n        med = (low+high)//2\\n        tx = x+med*lcm\\n        if tx >= L:\\n            high = med\\n        else:\\n            low = med\\n    x = x+high*lcm\\n    low = 0\\n    high = 2**100\\n    while high-low > 1:\\n        med = (low+high)//2\\n        tx = x+med*lcm\\n        if (tx <= R):\\n            low = med\\n        else:\\n            high = med\\n    if low == 0 and x > R:\\n        print (0)\\n        return\\n    print (low+1)\\n    return\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"import math\\ndef xgcd (b,n) :\\n x0,x1,y0,y1 = 1,0,0,1\\n while n != 0 :\\n  q,b,n = b//n , n , b % n\\n  x0,x1 = x1, x0-q*x1\\n  y0,y1 = y1,y0-q*y1\\n return b,x0,y0\\na,aa,b,bb,l,r = [int (x) for x in input ().split ()]\\ng,x,y=xgcd (a,b)\\nc = bb-aa\\n#print(\\\"c\\\",c,g)\\nif c%g != 0 :\\n print (0)\\n exit (0)\\n# ax-by = cc = bb-aa\\n# ax-by = g(cc) = bb-aa\\n#print(x,y)\\ni = a*(x*c)//g+aa\\nii = (-b*(y*c)//g)+bb\\n#print(a*x//g*c,b*y//g*c,aa,bb)\\nstep = a*b//g\\n#print(a,x,c , \\\" | \\\",b,y,c)\\n#print(i,ii,step)\\nif (ii-i) % step != 0 : \\n print(0)\\n return\\n#print(a,x,c,aa)\\n\\n#print(i,ii,step)\\n# shift i to la,lb\\n#print(i,aa,bb)\\nif i > max(aa,bb) :\\n #print(i-max(aa,bb),step)\\n i -= ((i-max(aa,bb))//step) * step\\nelif i < max(aa,bb) :\\n i += ((max(aa,bb)-i)//step + (1 if (max(aa,bb)-i)%step!=0 else 0)) * step\\n\\nf = (l-i)//step\\nif (l-i) % step != 0 : f+=1\\nf = max(f,0)\\ns = (r-i)//step\\n#print(i,step,f,s)\\nprint (max(0,s-f+1))\", \"#from IPython import embed\\ndef mod(a, b):\\n\\tif b < 0:\\n\\t\\treturn mod(a,-b)\\n\\tif a >= 0:\\n\\t\\treturn a % b\\n\\treturn - ((-a)%b)\\ndef extended_gcd(a, b):\\n\\ttmp1 = a\\n\\ttmp2 = b\\n\\txx = 0\\n\\ty = 0\\n\\tyy = 1\\n\\tx = 1\\n\\twhile b != 0:\\n\\t\\tq = a//b\\n\\t\\tt = b\\n\\t\\tb = mod(a,b)\\n\\t\\ta = t\\n\\t\\ttt = xx\\n\\t\\txx = x-q*xx\\n\\t\\tx = t\\n\\t\\tt = yy\\n\\t\\tyy = y-q*yy\\n\\t\\ty = t;\\n\\tassert(a == tmp1*x+tmp2*y)\\n\\treturn (a,x,y)\\ndef xgcd(b, n):\\n    x0, x1, y0, y1 = 1, 0, 0, 1\\n    while n != 0:\\n        q, b, n = b // n, n, b % n\\n        x0, x1 = x1, x0 - q * x1\\n        y0, y1 = y1, y0 - q * y1\\n    return  b, x0, y0\\n\\ndef ffloor(a, b):\\n\\tif(b < 0): return ffloor(-a,-b);\\n\\treturn a//b\\ndef cceil( a,  b):\\n\\tif(b < 0): return cceil(-a,-b);\\n\\tif a % b == 0: \\n\\t\\treturn a//b\\n\\treturn a//b+1;\\n\\t\\n\\n\\ndef main():\\n\\ts = input()\\n\\ta1, b1, a2, b2, L, R = [int(i) for i in s.split()]\\n\\n\\tif b2 < b1:\\n\\t\\ta1, a2 , b1, b2 = a2, a1 , b2, b1\\n\\n\\td,x,y = xgcd(a1,-a2)#extended_gcd(a1,-a2)\\n\\tif(d < 0):\\n\\t\\td *= -1\\n\\t\\tx *= -1\\n\\t\\ty *= -1\\n\\t\\n\\tif (b2 - b1) % d !=  0: \\n\\t\\tprint(0)\\n\\t\\treturn\\n\\n\\t#print(d,x,y)\\n\\tfact = (b2-b1)//d\\n\\tx *= fact\\n\\ty *= fact\\n\\n\\tc1 = a2//d;\\n\\tc2 = a1//d;\\n\\n\\n\\ttope1 = ffloor(R-b1-a1*x, a1*c1);\\n\\tbajo1 = cceil(L-b1-a1*x,c1*a1);\\n\\tbajo2 = cceil(L-b2-a2*y,c2*a2);\\n\\ttope2 = ffloor(R-b2-a2*y, a2*c2);\\n\\n\\tbajo3 = max(cceil(-x,c1),cceil(-y,c2));\\n\\n\\t#print(R-b1-a1*x) /( a1*c1) ,(R-b2-a2*y)/ (a2*c2)\\n\\t#print(L-b1-a1*x)/(c1*a1) ,(L-b2-a2*y)/(c2*a2)\\n\\t#print(-x/c1,-y/c2)\\n\\t#print(bajo1,tope1)\\n\\t\\n\\t#print(bajo2,tope2)\\n\\t#print(bajo3)\\n\\tbajo = max(bajo1,bajo2,bajo3);\\n\\ttope = min(tope1,tope2);\\n\\tprint(max(0,tope+1-bajo))\\n\\t#embed()\\nmain()\", \"#from IPython import embed\\n\\ndef xgcd(b, n):\\n    x0, x1, y0, y1 = 1, 0, 0, 1\\n    while n != 0:\\n        q, b, n = b // n, n, b % n\\n        x0, x1 = x1, x0 - q * x1\\n        y0, y1 = y1, y0 - q * y1\\n    return  b, x0, y0\\n\\ndef ffloor(a, b):\\n\\tif(b < 0): return ffloor(-a,-b);\\n\\treturn a//b\\ndef cceil( a,  b):\\n\\tif(b < 0): return cceil(-a,-b);\\n\\tif a % b == 0: \\n\\t\\treturn a//b\\n\\treturn a//b+1;\\n\\t\\n\\n\\ndef main():\\n\\ts = input()\\n\\ta1, b1, a2, b2, L, R = [int(i) for i in s.split()]\\n\\n\\tif b2 < b1:\\n\\t\\ta1, a2 , b1, b2 = a2, a1 , b2, b1\\n\\n\\td,x,y = xgcd(a1,-a2)#extended_gcd(a1,-a2)\\n\\tif(d < 0):\\n\\t\\td *= -1\\n\\t\\tx *= -1\\n\\t\\ty *= -1\\n\\t\\n\\tif (b2 - b1) % d !=  0: \\n\\t\\tprint(0)\\n\\t\\treturn\\n\\n\\t#print(d,x,y)\\n\\tfact = (b2-b1)//d\\n\\tx *= fact\\n\\ty *= fact\\n\\n\\tc1 = a2//d;\\n\\tc2 = a1//d;\\n\\n\\n\\ttope1 = ffloor(R-b1-a1*x, a1*c1);\\n\\tbajo1 = cceil(L-b1-a1*x,c1*a1);\\n\\tbajo2 = cceil(L-b2-a2*y,c2*a2);\\n\\ttope2 = ffloor(R-b2-a2*y, a2*c2);\\n\\n\\tbajo3 = max(cceil(-x,c1),cceil(-y,c2));\\n\\n\\tbajo = max(bajo1,bajo2,bajo3);\\n\\ttope = min(tope1,tope2);\\n\\tprint(max(0,tope+1-bajo))\\n\\t#embed()\\nmain()\", \"a1, b1, a2, b2, L, R = list(map(int, input().split()))\\n\\ndef xgcd(a,b):\\n    prevx, x = 1, 0\\n    prevy, y = 0, 1\\n    while b:\\n        q = a // b\\n        x, prevx = prevx - q * x, x\\n        y, prevy = prevy - q * y, y\\n        a, b = b, a % b\\n\\n    return a, prevx, prevy\\n\\ng, x, y = xgcd(a1, -a2)\\n\\nif (b2 - b1) // g < 0:    \\n    g, x, y = -g, -x, -y\\n\\nif abs(b2 - b1) % abs(g) > 0:\\n    print(0)\\nelse:\\n    a2g, a1g = a2 // abs(g), a1 // abs(g)\\n\\n    x *= (b2 - b1) // g\\n    y *= (b2 - b1) // g\\n\\n    if x < 0:\\n        y += ((abs(x) + a2g - 1) // a2g) * a1g\\n        x += ((abs(x) + a2g - 1) // a2g) * a2g      \\n\\n    if y < 0:\\n        x += ((abs(y) + a1g - 1) // a1g) * a2g\\n        y += ((abs(y) + a1g - 1) // a1g) * a1g\\n\\n    if x >= 0 and y >= 0:\\n        k = min(x // a2g, y // a1g)\\n        x -= k * a2g\\n        y -= k * a1g\\n\\n    res = a1 * x + b1\\n    lcm = a1 * a2 // abs(g)\\n\\n    L, R = max(0, L - res), R - res\\n\\n    if R < 0:\\n        print(0)\\n    else:\\n        print(R // lcm - L // lcm + (L % lcm == 0))\\n\\n\", \"from math import gcd\\ndef exd_gcd(a, b):\\n  # always return as POSITIVE presentation\\n  if a % b == 0:\\n    return 0, (1 if b > 0 else -1)\\n  x, y = exd_gcd(b, a % b)\\n  return y, x - a // b * y\\ndef interval_intersect(a, b, c, d):\\n  if b <= a or d <= c:\\n    return 0\\n  if c < a:\\n    a, b, c, d = c, d, a, b\\n  if c < b:\\n    return min(b, d) - c\\n  else:\\n    return 0\\ndef ceil(a, b):\\n  return (a + b - 1) // b\\n\\na1, b1, a2, b2, L, R = list(map(int, input().split()))\\ng = gcd(a1, a2)\\nif (b1 - b2) % g != 0:\\n  print(0)\\n  return\\nk, l = exd_gcd(a1, a2)\\nl = -l\\nk *= (b2 - b1) // g\\nl *= (b2 - b1) // g\\nd1 = a2 // g\\nd2 = a1 // g\\nassert(k * a1 + b1 == l * a2 + b2)\\narb = 3238\\nassert((k + arb * d1) * a1 + b1 == (l + arb * d2) * a2 + b2)\\nL1, R1 = ceil(max(0, ceil(L - b1, a1)) - k, d1), ((R - b1) // a1 - k) // d1\\nL2, R2 = ceil(max(0, ceil(L - b2, a2)) - l, d2), ((R - b2) // a2 - l) // d2\\nprint(interval_intersect(L1, R1 + 1, L2, R2 + 1))\\n\", \"from fractions import gcd\\na1,b1,a2,b2,l,r=list(map(int,input().split()))\\n\\nif b1<l:\\n    b1=(b1-l)%a1+l\\nif b2<l:\\n    b2=(b2-l)%a2+l\\nks1=(l-b1)/a1\\nke1=(r-b1)/a1\\nks2=(l-b2)/a2\\nke2=(r-b2)/a2\\n\\ng=gcd(a1,a2)\\nvar=a1/g*a2\\nlst1=[]\\nlst2=[]\\nks1=max(b1,b2)\\n\\nm=min(1+r,var+ks1)\\nwhile b1!=b2 and m>b1:\\n    if b1<b2:\\n        b1=(b1-b2)%a1+b2\\n    else:\\n        b2=(b2-b1)%a2+b1\\nif(m>b1):\\n    print(int(1+(r-b1)//var))\\nelse:\\n    print (\\\"0\\\")\\n\\n\\n\\n\", \"def gcd(a, b):\\n    if a==0:\\n        return (b, 0, 1)\\n    g, x1, y1 = gcd(b%a, a)\\n    x = y1 - (b // a) * x1\\n    y = x1\\n    return (g, x, y)\\n\\t\\ndef solve(a, b, x, y, r):\\n    k = (r-x)//a\\n    y = (y-x) % b\\n    \\n    gg, X, Y = gcd(a, b)\\n    #print(gg, X, Y, y, a, b)\\n    if y % gg != 0:\\n        return 0\\n    X *= y // gg\\n    dd = b//gg\\n    if X >= 0:\\n        X -= (X//dd) * dd\\n    else:\\n        g = X//dd\\n        if g * dd > X:\\n            g += 1\\n        X -= g * dd\\n    \\n    if X < 0:\\n        X += dd\\n    elif X >= dd:\\n        X -= dd\\n    \\n    if X > k:\\n        return 0\\n    return (k-X)//dd + 1\\n\\n\\na1, b1, a2, b2, L, R = map(int, input().split())\\nd1 = (L-b1)//a1\\nif d1 < 0:\\n    d1 = 0\\nd1 *= a1\\nd1 += b1\\nd2 = (L-b2)//a2\\nif d2 < 0:\\n    d2 = 0\\nd2 *= a2\\nd2 += b2\\n\\nwhile d1 < L:\\n    d1 += a1\\nwhile d2 < L:\\n    d2 += a2\\n\\n#print(d1, d2, L, R)\\n\\nif R < max(d1, d2):\\n    print(0)\\nelse:\\n    \\n    if d1 > d2 or (d1 == d2 and a1 < a2):\\n        print(solve(a1, a2, d1, d2, R))\\n    else:\\n        print(solve(a2, a1, d2, d1, R))\", \"import math\\n\\na1, b1, a2, b2, l, r = list(map(int, input().split()))\\nif b1 < l:\\n  b1 = (b1 - l) % a1 + l\\nif b2 < l:\\n  b2 = (b2 - l) % a2 + l\\nc = a1 // math.gcd(a1, a2) * a2\\nm = min(1 + r, c + max(b1, b2))\\nwhile b1 != b2 and m > b1:\\n  if b1 < b2:\\n    b1 = (b1 - b2) % a1 + b2\\n  else:\\n    b2 = (b2 - b1) % a2 + b1\\nprint((m > b1) * (1 + (r - b1) // c))\\n\", \"import sys\\n# Uz ma to pretekanie nebavi!!!\\n\\ndef gcd(a, b):\\n    if b == 0:\\n        return [a, 1, 0]\\n    c = a%b\\n    [g, x1, y1] = gcd(b, c)\\n    x = y1\\n    y = x1 - y1 * (a//b)\\n    return [g, x, y]\\n\\na1, b1, a2, b2, l, r = [int(i) for i in input().split(\\\" \\\")]\\nif max(b1, b2) > r:\\n    print(0)\\n    return\\n\\nl = max(l, b1, b2)\\n[g, xg, yg] = gcd(a1, a2)\\nif (b2 - b1) % g == 0:\\n    xg *= (b2 - b1) // g\\nelse:\\n    print(0)\\n    return\\nlcm = (a1 * a2) // g\\nval = xg * a1 + b1\\nif val >= l:\\n    val -= (((val - l) // lcm) + 1) * lcm\\n    \\nprint(((r - val) // lcm) - ((l - val - 1) // lcm))\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 0 3 3 5 21\\n\",\n    \"2 4 3 0 6 17\\n\",\n    \"2 0 4 2 -39 -37\\n\",\n    \"1 9 3 11 49 109\\n\",\n    \"3 81 5 72 -1761 501\\n\",\n    \"8 -89 20 67 8771 35222\\n\",\n    \"1 -221 894 86403 -687111 141371\\n\",\n    \"1 -1074 271 17741 -2062230 1866217\\n\",\n    \"3 2408 819 119198 -8585197 7878219\\n\",\n    \"1 341 8581 3946733 -59420141 33253737\\n\",\n    \"1 10497 19135 2995296 -301164547 -180830773\\n\",\n    \"8 40306 2753 1809818 254464419 340812028\\n\",\n    \"2 21697 9076 1042855 -319348358 236269755\\n\",\n    \"4 2963 394 577593 125523962 628140505\\n\",\n    \"75 61736 200 200511 160330870 609945842\\n\",\n    \"34 64314 836 5976 591751179 605203191\\n\",\n    \"1 30929 25249 95822203 -1076436442 705164517\\n\",\n    \"3 -1208 459 933808 603490653 734283665\\n\",\n    \"1 35769 16801 47397023 -82531776 1860450454\\n\",\n    \"1 -3078 36929 51253687 -754589746 -53412627\\n\",\n    \"1 -32720 3649 7805027 408032642 925337350\\n\",\n    \"1 -2000000000 1 -2000000000 -2000000000 2000000000\\n\",\n    \"1 -2000000000 2 -2000000000 -2000000000 2000000000\\n\",\n    \"3 -2000000000 2 -2000000000 -2000000000 2000000000\\n\",\n    \"999999999 999999998 1000000000 999999999 1 10000\\n\",\n    \"1 -2000000000 1 2000000000 1 10\\n\",\n    \"1 -2000000000 2 2000000000 -2000000000 2000000000\\n\",\n    \"2 0 2 1 0 1000000000\\n\",\n    \"1000000000 0 1 0 0 2000000000\\n\",\n    \"4 0 4 1 5 100\\n\",\n    \"1000000000 1 999999999 0 1 100000000\\n\",\n    \"1 30929 1 1 1 1\\n\",\n    \"1 1 1 1 -2000000000 2000000000\\n\",\n    \"4 0 4 1 0 100\\n\",\n    \"1 -2000000000 1 2000000000 5 5\\n\",\n    \"51 -1981067352 71 -414801558 -737219217 1160601982\\n\",\n    \"2 -1500000000 4 -1499999999 1600000000 1700000000\\n\",\n    \"135 -1526277729 32 1308747737 895574 1593602399\\n\",\n    \"1098197640 6 994625382 6 -474895292 -101082478\\n\",\n    \"12 -696575903 571708420 236073275 2 14\\n\",\n    \"1 -9 2 -10 -10 -9\\n\",\n    \"2 -11 2 -9 -11 -9\\n\",\n    \"40 54 15 74 -180834723 1373530127\\n\",\n    \"2 57 1 56 -1773410854 414679043\\n\",\n    \"9 12 1 40 624782492 883541397\\n\",\n    \"4 -1000000000 2 4 100 1000\\n\",\n    \"66 90 48 84 -1709970247 1229724777\\n\",\n    \"1000000000 1 2000000000 0 -2000000000 200000000\\n\",\n    \"2 0 2 1 -1000000000 1000000000\\n\",\n    \"2 -1000000000 2 -999999999 -1000000000 1000000000\\n\",\n    \"26 1885082760 30 -1612707510 -1113844607 1168679422\\n\",\n    \"76 -19386 86 -6257 164862270 1443198941\\n\",\n    \"5 -2000000000 5 1000000000 1000000000 2000000000\\n\",\n    \"505086589 -4 1288924334 -4 -5 -4\\n\",\n    \"91 -193581878 2 1698062870 -819102473 1893630769\\n\",\n    \"8 11047 45 12730 -45077355 1727233357\\n\",\n    \"35 8673 6 -19687 -111709844 1321584980\\n\",\n    \"71 1212885043 55 1502412287 970234397 1952605611\\n\",\n    \"274497829 -12 9 -445460655 -5 4\\n\",\n    \"1509527550 3 7 -134101853 2 7\\n\",\n    \"43 -1478944506 45 494850401 634267177 1723176461\\n\",\n    \"25 479638866 50 -874479027 -2000000000 2000000000\\n\",\n    \"11 -10 1 -878946597 -11127643 271407906\\n\",\n    \"15 -738862158 12 -3 -3 12\\n\",\n    \"70 -835526513 23 687193329 -1461506792 1969698938\\n\",\n    \"124 1413 15321 312133 3424 1443242\\n\",\n    \"75 -13580 14 4508 -67634192 1808916097\\n\",\n    \"915583842 -15 991339476 -12 -15 -5\\n\",\n    \"85 -18257 47 -7345 -76967244 1349252598\\n\",\n    \"178 331734603 162 -73813367 -577552570 1005832995\\n\",\n    \"8 -17768 34 963 -2000000000 2000000000\\n\",\n    \"26 1885082760 30 -1612707510 -2000000000 2000000000\\n\",\n    \"4 -1999999999 6 -1999999998 -999999999 1999999999\\n\",\n    \"121826 1323 1327 304172 -1521910750 860413213\\n\",\n    \"36281 170 1917 927519 -1767064448 -177975414\\n\",\n    \"37189 -436 464 797102 -1433652908 1847752465\\n\",\n    \"81427 -688 1720 -221771 -77602716 1593447723\\n\",\n    \"11 -1609620737 1315657088 -7 -162162918 287749240\\n\",\n    \"1480269313 -1048624081 1314841531 -8 295288505 358226461\\n\",\n    \"13 -15 19 -2 -334847526 1334632952\\n\",\n    \"1254161381 -7 821244830 -7 -698761303 941496965\\n\",\n    \"1269100557 -5 6 -5 -12 -6\\n\",\n    \"847666888 -6 1327933031 -6 -5 -2\\n\",\n    \"1465846675 1002489474 9 -1250811979 1030017372 1391560043\\n\",\n    \"8 -1915865359 867648990 9 -5 -4\\n\",\n    \"3 -1164702220 906446587 -1868913852 222249893 1493113759\\n\",\n    \"15 -8 17 3 -393290856 231975525\\n\",\n    \"734963978 0 17 0 -12 -5\\n\",\n    \"1090004357 5 1124063714 -840327001 -448110704 128367602\\n\",\n    \"18 -1071025614 1096150070 0 -6 0\\n\",\n    \"451525105 -8 1256335024 -8 -718788747 928640626\\n\",\n    \"4 3 5 -1292190012 -97547955 250011754\\n\",\n    \"14 -7 14 -1488383431 -1044342357 842171605\\n\",\n    \"1384140089 5 16 -1661922737 442287491 1568124284\\n\",\n    \"16 -11 14 -1466771835 -1192555694 -2257860\\n\",\n    \"1676164235 -1589020998 1924931103 1189158232 6 12\\n\",\n    \"15 16 12 -5 11 23\\n\",\n    \"16 -16 5 20 -9 7\\n\",\n    \"4 -9 1 -2 -13 -1\\n\",\n    \"18 -17 9 -17 -29 17\\n\",\n    \"735463638 620656007 878587644 536507630 -1556948056 1714374073\\n\",\n    \"1789433851 -633540112 1286318222 -1728151682 1438333624 1538194890\\n\",\n    \"15 -1264610276 1157160166 -336457087 -496892962 759120142\\n\",\n    \"831644204 422087925 17 -1288230412 -1090082747 1271113499\\n\",\n    \"17 -13 223959272 -1081245422 -1756575771 38924201\\n\",\n    \"1228969457 -1826233120 11 -1063855654 -819177202 1039858319\\n\",\n    \"1186536442 -1691684240 17 -1 -702600351 1121394816\\n\",\n    \"1132421757 -1481846636 515765656 -12 -622203577 552143596\\n\",\n    \"18 -1123473160 1826212361 -10 -12 1\\n\",\n    \"1197045662 7 15 -1445473718 -1406137199 800415943\\n\",\n    \"18 565032929 13 735553852 107748471 1945959489\\n\",\n    \"1734271904 1 19 -1826828681 0 4\\n\",\n    \"1614979757 -1237127436 12 75067457 -933537920 451911806\\n\",\n    \"8 -335942902 1179386720 -723257398 -13 -12\\n\",\n    \"989432982 2 9 366779468 -1427636085 985664909\\n\",\n    \"7 -1390956935 1404528667 -4 -15 0\\n\",\n    \"1370475975 841789607 733784598 467967887 -7 15\\n\",\n    \"6 -7 9 -1 -10 1\\n\",\n    \"960716652 1417038753 1222139305 -4 -1570098546 -931528535\\n\",\n    \"1744394473 5 1523286739 629247513 -6 1\\n\",\n    \"2627 -4960 2627 -4960 -4960 4960\\n\",\n    \"6 -364562196 7 -803430276 0 11\\n\",\n    \"1955378240 -837482305 1743607821 -1623988108 -653286850 178227154\\n\",\n    \"9 -1642366642 1499382371 -6 -822052389 1405478033\\n\",\n    \"9 -1 8 -1 -711474975 237571596\\n\",\n    \"1497677869 -1313800455 11 12 -1157529918 1754001465\\n\",\n    \"11 -80049925 1600186381 -1454831688 -1384227392 1621203975\\n\",\n    \"1042015302 -56794440 1727095321 -1037110962 -9 11\\n\",\n    \"13 0 1419591662 -1360930956 343359607 1283114457\\n\",\n    \"752411560 -6 857048450 -405514986 -5 0\\n\",\n    \"12 2 18 2 -6 3\\n\",\n    \"11 -1 15 -1 -13 2\\n\",\n    \"1446642133 -7 9 -1719422944 -916435667 36154654\\n\",\n    \"1689390799 501112014 13 -1621132473 398367938 709483101\\n\",\n    \"1932547151 -725726769 782679113 -10 -184530763 498112212\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"20\\n\",\n    \"28\\n\",\n    \"661\\n\",\n    \"62\\n\",\n    \"6821\\n\",\n    \"9474\\n\",\n    \"3416\\n\",\n    \"0\\n\",\n    \"3921\\n\",\n    \"25918\\n\",\n    \"637839\\n\",\n    \"749358\\n\",\n    \"946\\n\",\n    \"24134\\n\",\n    \"284952\\n\",\n    \"107914\\n\",\n    \"0\\n\",\n    \"141766\\n\",\n    \"4000000001\\n\",\n    \"2000000001\\n\",\n    \"666666667\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"2000000000\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"435075\\n\",\n    \"0\\n\",\n    \"65938\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"11446084\\n\",\n    \"207339494\\n\",\n    \"28750990\\n\",\n    \"226\\n\",\n    \"2329024\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"200000001\\n\",\n    \"1\\n\",\n    \"1074549\\n\",\n    \"4797835\\n\",\n    \"6293220\\n\",\n    \"115287\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"562743\\n\",\n    \"0\\n\",\n    \"24673447\\n\",\n    \"1\\n\",\n    \"796587\\n\",\n    \"0\\n\",\n    \"1722773\\n\",\n    \"0\\n\",\n    \"337737\\n\",\n    \"46754\\n\",\n    \"0\\n\",\n    \"294660\\n\",\n    \"0\\n\",\n    \"5\\n\",\n    \"0\\n\",\n    \"107\\n\",\n    \"11\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"5403373\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"909708\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"12500588\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"5172673\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"4\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"3299606\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/710/D",
  "starter_code": ""
}