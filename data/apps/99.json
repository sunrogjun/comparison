{
  "task_id": "APPS/99",
  "problem_id": 99,
  "prompt": "Masha really loves algebra. On the last lesson, her strict teacher Dvastan gave she new exercise.\n\nYou are given geometric progression b defined by two integers b_1 and q. Remind that a geometric progression is a sequence of integers b_1, b_2, b_3, ..., where for each i > 1 the respective term satisfies the condition b_{i} = b_{i} - 1\u00b7q, where q is called the common ratio of the progression. Progressions in Uzhlyandia are unusual: both b_1 and q can equal 0. Also, Dvastan gave Masha m \"bad\" integers a_1, a_2, ..., a_{m}, and an integer l.\n\nMasha writes all progression terms one by one onto the board (including repetitive) while condition |b_{i}| \u2264 l is satisfied (|x| means absolute value of x). There is an exception: if a term equals one of the \"bad\" integers, Masha skips it (doesn't write onto the board) and moves forward to the next term.\n\nBut the lesson is going to end soon, so Masha has to calculate how many integers will be written on the board. In order not to get into depression, Masha asked you for help: help her calculate how many numbers she will write, or print \"inf\" in case she needs to write infinitely many integers.\n\n\n-----Input-----\n\nThe first line of input contains four integers b_1, q, l, m (-10^9 \u2264 b_1, q \u2264 10^9, 1 \u2264 l \u2264 10^9, 1 \u2264 m \u2264 10^5)\u00a0\u2014 the initial term and the common ratio of progression, absolute value of maximal number that can be written on the board and the number of \"bad\" integers, respectively.\n\nThe second line contains m distinct integers a_1, a_2, ..., a_{m} (-10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 numbers that will never be written on the board.\n\n\n-----Output-----\n\nPrint the only integer, meaning the number of progression terms that will be written on the board if it is finite, or \"inf\" (without quotes) otherwise.\n\n\n-----Examples-----\nInput\n3 2 30 4\n6 14 25 48\n\nOutput\n3\nInput\n123 1 2143435 4\n123 11 -5453 141245\n\nOutput\n0\nInput\n123 1 2143435 4\n54343 -13 6 124\n\nOutput\ninf\n\n\n-----Note-----\n\nIn the first sample case, Masha will write integers 3, 12, 24. Progression term 6 will be skipped because it is a \"bad\" integer. Terms bigger than 24 won't be written because they exceed l by absolute value.\n\nIn the second case, Masha won't write any number because all terms are equal 123 and this is a \"bad\" integer.\n\nIn the third case, Masha will write infinitely integers 123.",
  "solutions": "[\"def main():\\n    (b1, q, l, m) = list(map(int, input().split()))\\n    a = set(map(int, input().split()))\\n    if abs(b1) > l:\\n        print(0)\\n    else:\\n        if b1 == 0:\\n            if 0 in a:\\n                print(0)\\n            else:\\n                print(\\\"inf\\\")\\n        elif q == 0:\\n            if 0 not in a:\\n                print(\\\"inf\\\")\\n            elif b1 in a:\\n                print(0)\\n            else:\\n                print(1)\\n        elif q == 1:\\n            if b1 in a:\\n                print(0)\\n            else:\\n                print(\\\"inf\\\")\\n        elif q == -1:\\n            if (b1 in a) and ((-b1) in a):\\n                print(0)\\n            else:\\n                print(\\\"inf\\\")\\n        else:\\n            ans = 0\\n            b = b1\\n            for i in range(100):\\n                if b in a:\\n                    b *= q\\n                    if abs(b) > l:\\n                        break\\n                    continue\\n                ans += 1\\n                b *= q\\n                if abs(b) > l:\\n                    break\\n            print(ans)\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"from sys import stdin, stdout\\n\\nb, q, l, n = map(int, stdin.readline().split())\\na = set(list(map(int, stdin.readline().split())))\\nans = 0\\nind = 0\\n\\nwhile abs(b) <= l and ind < 100:\\n    if not b in a:\\n        ans += 1\\n            \\n    b *= q\\n    ind += 1\\n    \\nif ans > 40:\\n    stdout.write('inf')\\nelse:\\n    stdout.write(str(ans))\", \"b1, q, l, m = [int(i) for i in input().split()]\\n\\na = [int(i) for i in input().split()]\\n\\nans = 0\\n\\nif abs(b1) > l:\\n    ans = 0\\nelif b1 == 0:\\n    ans = \\\"inf\\\" if 0 not in a else 0\\nelse:\\n    ans = int(b1 not in a)\\n    if q == 0:\\n        if 0 not in a : ans = \\\"inf\\\"\\n    elif q == 1:\\n        if ans > 0 : ans = \\\"inf\\\"\\n    elif q == -1:\\n        if ans > 0 or -b1 not in a: ans = \\\"inf\\\"\\n    else:\\n        while 1:\\n            b1 *= q\\n            if abs(b1) > l: break\\n            ans += b1 not in a\\n\\nprint(ans)\\n\", \"import sys\\n\\ndef solve():\\n    b1, q, L, m = map(int, input().split())\\n    a = [int(i) for i in input().split()]\\n\\n    a = set(a)\\n\\n    if b1 == 0:\\n        print(0 if b1 in a else 'inf')\\n        return\\n\\n    if q == 1:\\n        if abs(b1) > L or b1 in a:\\n            print(0)\\n        else:\\n            print('inf')\\n    elif q == -1:\\n        if abs(b1) > L or (b1 in a and -b1 in a):\\n            print(0)\\n        else:\\n            print('inf')\\n    elif q == 0:\\n        if abs(b1) > L:\\n            print(0)\\n        elif 0 in a:\\n            print(0 if b1 in a else 1)\\n        else:\\n            print('inf')\\n    else:\\n        b = b1\\n        ans = 0\\n\\n        while abs(b) <= L:\\n            if b not in a:\\n                ans += 1\\n            b *= q\\n\\n        print(ans)\\n\\ndef debug(x, table):\\n    for name, val in table.items():\\n        if x is val:\\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\\n            return None\\n\\ndef __starting_point():\\n    solve()\\n__starting_point()\", \"\\ns, r, m, n = list(map(int, input().split()))\\nbad = set(map(int, input().split()))\\n\\ncnt = 0\\n\\nif abs(s) > m:\\n    print(0)\\nelif s == 0:\\n    if 0 in bad:\\n        print(0)\\n    else:\\n        print('inf')\\nelif r == 0 and s != 0:\\n    if 0 in bad or m < 0:\\n        if s in bad:\\n            print(0)\\n        else:\\n            print(1)\\n    else:\\n        print('inf')\\nelif r == 1:\\n    if s in bad:\\n        print(0)\\n    else:\\n        print('inf')\\nelif r == -1:\\n    if (s in bad) and (-s in bad):\\n        print(0)\\n    else:\\n        print('inf')\\nelif -1 <= r <= 1 and r != 0:\\n    print('inf')\\nelse:\\n    while abs(s) <= m:\\n        if s not in bad:\\n            cnt += 1\\n        s *= r\\n    print(cnt)\\n\", \"b, q, l, m = list(map(int, input().split()))\\nA = set(map(int, input().split()))\\n\\nans = 0\\nfor _ in range(100):\\n    if abs(b) > l:\\n        break\\n    if b not in A:\\n        ans += 1\\n    b *= q\\nif ans > 40:\\n    print(\\\"inf\\\")\\nelse:\\n    print(ans)\\n\", \"b1,q,l,m = [int(i) for i in input().split()]\\nbad = [int(i) for i in input().split()]\\nif abs(q) > 1 and b1 != 0:\\n\\tb2 = b1\\n\\tcount = 0\\n\\twhile abs(b2) <= l:\\n\\t\\tcount += 1\\n\\t\\tif b2 in bad:\\n\\t\\t\\tcount-=1\\n\\t\\tb2 *= q\\n\\t\\t'''\\n\\tfor u in bad:\\n\\t\\ti = u\\n\\n\\t\\twhile (i%q == 0):\\n\\t\\t\\ti = i / q\\n\\t\\t\\ta = i == b1\\n\\t\\t\\tif a:\\n\\t\\t\\t\\tbreak\\n\\t\\ta = i == b1\\n\\n\\t\\tif (a and abs(u)<=l) or u == b1:\\n\\t\\t\\tcount-=1\\n\\t'''\\n\\tprint(count)\\nelse:\\n\\t'''\\n\\tif abs(b1)<=l:\\n\\t\\tif q == 1:\\n\\t\\t\\tif b1 in bad:\\n\\t\\t\\t\\tprint(\\\"0\\\")\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(\\\"inf\\\")\\n\\t\\telif q == 0:\\n\\t\\t\\tif 0 in bad:\\n\\t\\t\\t\\tif b1 in bad:\\n\\t\\t\\t\\t\\tprint(\\\"0\\\")\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tprint(\\\"1\\\")\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(\\\"inf\\\")\\n\\t\\telif q == -1:\\n\\t\\t\\tif (b1 in bad) and (b2 in bad):\\n\\t\\t\\t\\tprint(\\\"0\\\")\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(\\\"inf\\\")\\n\\n\\telse:\\n\\t\\tprint(\\\"0\\\")\\n\\t'''\\n\\ta1 = b1 * q\\n\\tif abs(b1) <= l:\\n\\t\\tif b1 == 0:\\n\\t\\t\\tif b1 in bad:\\n\\t\\t\\t\\tprint(\\\"0\\\")\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(\\\"inf\\\")\\n\\t\\telif a1 in bad:\\n\\t\\t\\tif b1 in bad:\\n\\t\\t\\t\\tprint(\\\"0\\\")\\n\\t\\t\\telse:\\n\\t\\t\\t\\tif a1 == 0:\\n\\t\\t\\t\\t\\tprint(\\\"1\\\")\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tprint(\\\"inf\\\")\\n\\t\\telse:\\n\\t\\t\\tprint(\\\"inf\\\")\\n\\telse:\\n\\t\\tprint(\\\"0\\\")\", \"B1, Q, L, M = list(map(int, input().split()))\\nAs = set(map(int, input().split()))\\n\\nBs = []\\ntmp = B1\\ncnt = 0\\nwhile abs(tmp) <= L and cnt < 100:\\n    if tmp not in As:\\n        Bs.append(tmp)\\n    tmp *= Q\\n    cnt += 1\\nif 32 < len(Bs):\\n    print('inf')\\nelse:\\n    print(len(Bs))\\n\", \"a,r,l,m = list(map(int,input().split()))\\n_l = list(map(int,input().split()))\\ns = set(_l)\\nif(abs(a)>l):\\n    print(0)\\n    return\\nif(a==0):\\n    if(0 in s):\\n        print(0)\\n        return\\n    else:\\n        print(\\\"inf\\\")\\n        return\\nif(r==0):\\n    if(a==0):\\n        if(0 in s):\\n            print(0)\\n            return\\n        else:\\n            print(\\\"inf\\\")\\n            return\\n    else:\\n        if(a not in s):\\n            if(abs(a)<=l):\\n                if(0 in s):\\n                    print(1)\\n                    return\\n                else:\\n                    print(\\\"inf\\\")\\n                    return\\n            else:\\n                print(0)\\n                return\\n        else:\\n            if(0 in s):\\n                print(0)\\n                return\\n            else:\\n                print(\\\"inf\\\")\\n                return\\nif(r==1):\\n    if(a in s or abs(a)>l):\\n        print(0)\\n        return\\n    else:\\n        print(\\\"inf\\\")\\n        return\\nif(r==-1):\\n    if(a in s):\\n        if(0-a in s):\\n            print(0)\\n            return\\n        else:\\n            if(abs(a)<=l):\\n                print(\\\"inf\\\")\\n                return\\n            else:\\n                print(0)\\n                return\\n    else:\\n        if(abs(a)<=l):\\n            print(\\\"inf\\\")\\n            return\\n        else:\\n            print(0)\\n            return\\ntot = 0\\nwhile(abs(a)<=l):\\n    if(a not in s):\\n        tot+=1\\n    a*=r\\nprint(tot)\\n\\n\\n        \\n\\n\", \"b1, q, l, m = map(int, input().split())\\nnum1 = list(map(int, input().split()))\\nnum = set(num1) \\nif q == 1 and abs(b1) <= l: \\n    if b1 in num: \\n        print(0) \\n    else:\\n        print(\\\"inf\\\")\\n    return \\n    \\nif q == -1 and abs(b1) <= l:\\n    if b1 in num: \\n        if -b1 in num:\\n            print(0)\\n        else: \\n            print(\\\"inf\\\")\\n        return \\n    print(\\\"inf\\\")\\n    return\\n        \\nif q == 0 and abs(b1) <= l:\\n    if b1 in num:\\n        if 0 in num: \\n            print(0)\\n        else: \\n            print(\\\"inf\\\") \\n        return\\n    if 0 in num:\\n        print(1)\\n    else: \\n        print(\\\"inf\\\")\\n    return\\n\\nif b1 == 0 and b1 <= l:\\n    if 0 in num: \\n        print(0)\\n    else:\\n        print(\\\"inf\\\") \\n    return \\nif b1 == 1 and (q == 1) and b1 <= l: \\n    if 1 in num: \\n        print(0)\\n    else:\\n        print(\\\"inf\\\")\\n    return\\nif b1 == -1 and q == 1 and b1 <= l:\\n    if -1 in num: \\n            print(0)\\n    else:\\n        print(\\\"inf\\\")\\n    return    \\nif b1 == 1 and q == -1  and b1 <= l: \\n    if 1 in num:\\n        if -1 in num: \\n            print(0)\\n        else: \\n            print(\\\"inf\\\")\\n    else: \\n        print(\\\"inf\\\")\\n    return\\nif b1 == -1 and q == -1 and b1 <= l:\\n    if -1 in num:\\n        if 1 in num: \\n            print(0)\\n        else: \\n            print(\\\"inf\\\")\\n    else: \\n        print(\\\"inf\\\")\\n        return    \\nans = 0\\nwhile l >= abs(b1): \\n    if b1 not in num: \\n        ans += 1 \\n    b1 *= q\\nprint(ans)\", \"def solve():\\n    b1, q, l, m = map(int, input().split())\\n    bads = set(map(int, input().split()))\\n    \\n    terms = set()\\n    \\n    if b1 == 0:\\n        if 0 not in bads:\\n            print(\\\"inf\\\")\\n        else:\\n            print(0)\\n    elif q == 0:\\n        if abs(b1) > l:\\n            print(0)\\n        else:\\n            if 0 not in bads:\\n                print(\\\"inf\\\")\\n            else:\\n                if b1 not in bads:\\n                    print(1)\\n                else:\\n                    print(0)\\n    elif q == 1:\\n        if abs(b1) <= l:\\n            if b1 not in bads:\\n                print(\\\"inf\\\")\\n            else:\\n                print(0)\\n        else:\\n            print(0)\\n    elif q == -1:\\n        if abs(b1) <= l:\\n            if b1 not in bads or -b1 not in bads:\\n                print(\\\"inf\\\")\\n            else:\\n                print(0)\\n        else:\\n            print(0)\\n    else:\\n        b = b1\\n        while abs(b) <= l:\\n            terms.add(b)\\n            b *= q\\n        print(len(terms) - len(terms.intersection(bads)))\\n\\nsolve()\", \"b, q, l, m = list(map(int, input().split()))\\na = set(list(map(int, input().split())))\\nans = 0\\nboo = False\\ni = 0\\nwhile (i < 34) and (abs(b) <= l):\\n    if (b not in a):\\n        ans += 1\\n        if i > 31:\\n            boo = True\\n    b *= q\\n    i += 1\\nif boo:\\n    print('inf')\\nelse:\\n    print(ans)\", \"a=input().split()\\nb=int(a[0])\\nq=int(a[1])\\nl=int(a[2])\\nm=int(a[3])\\na=input().split()\\nt=0\\nif(b==0):\\n    if('0' in a):print(0)\\n    else:print(\\\"inf\\\")\\n    \\nelif(abs(b)>l):print(0)\\nelif(abs(q)<=1 and q!=-1 and q!=0):\\n    if(str(b) in a):print(0)\\n    else:print(\\\"inf\\\")\\nelif(q==(-1)):\\n    if(str(b) in a and str(-b) in a):print(0)\\n    else:print(\\\"inf\\\")\\nelif(q==0):\\n    t=1\\n    if(str(b) in a):t=0;\\n    if(str(0) in a):print(t)\\n    else:print(\\\"inf\\\")\\nelse:\\n    t=0\\n    while(abs(b)<=l):\\n       if(not(str(b) in a)):t+=1\\n       b*=q\\n    print(t)\\n    \\n\", \"from sys import stdin\\n\\nB1, Q, L, M = list(map(int, stdin.readline().split()))\\nbad = set(map(int, stdin.readline().split()))\\n\\nif B1 == 0:\\n    if 0 in bad:\\n        print(0)\\n    else:\\n        print(\\\"inf\\\")\\nelif abs(B1) <= L and abs(Q) <= 1:\\n    # inf or 0\\n    if Q == 0: # B1, 0, 0, ...\\n        if B1 in bad and 0 in bad:\\n            print(0)\\n        elif B1 in bad:\\n            print(\\\"inf\\\")\\n        elif 0 in bad:\\n            print(1)\\n        else:\\n            print(\\\"inf\\\")\\n    elif Q == 1: # B1, B1, B1, ...\\n        if B1 in bad:\\n            print(0)\\n        else:\\n            print(\\\"inf\\\")\\n    else: # B1, -B1, B1, ...\\n        if B1 in bad and -B1 in bad:\\n            print(0)\\n        else:\\n            print(\\\"inf\\\")\\nelse:\\n    # finite\\n    count = 0\\n    b = B1\\n    while abs(b) <= L:\\n        if b not in bad:\\n            count += 1\\n\\n        b *= Q\\n\\n    print(count)\\n\", \"b, q, l, m = list(map(int, input().split()))\\nbad = set(map(int, input().split()))\\n\\ncnt = 0\\n\\nif abs(b) > l:\\n    print(0)\\nelif q == 0 or b == 0:\\n    if b not in bad:\\n        cnt += 1\\n    if 0 in bad:\\n        print(cnt)\\n    else:\\n        print(\\\"inf\\\")\\nelif abs(q) == 1:\\n    if b in bad and (q == 1 or -b in bad):\\n        print(0)\\n    else:\\n        print(\\\"inf\\\")\\nelse:\\n    while abs(b) <= l:\\n        if b not in bad:\\n            cnt += 1\\n        b *= q\\n    print(cnt)\\n\", \"R=lambda:list(map(int,input().split()))\\nb,q,i,m=R()\\na=set(R())\\nc=0\\nfor _ in range(99):\\n  if abs(b)>i: break\\n  if b not in a: c+=1\\n  b*=q\\nprint(c if c<32 else'inf')\\n\", \"miis = lambda:list(map(int,input().split()))\\nb,q,l,m = miis()\\n*a, = miis()\\nc = 0\\nfor _ in ' '*100:\\n    if abs(b)>l: break\\n    if b not in a: c+=1\\n    b*=q\\nif c<35:\\n    print (c)\\nelse:\\n    print ('inf')\\n\", \"def solve():\\n    b1, q, L, m = map(int, input().split())\\n    a = set(int(i) for i in input().split())\\n\\n    if abs(b1) > L:\\n        print(0)\\n        return\\n\\n    if b1 == 0:\\n        print(0 if b1 in a else 'inf')\\n        return\\n\\n    if q == 0:\\n        if 0 in a:\\n            print(0 if b1 in a else 1)\\n        else:\\n            print('inf')\\n\\n        return\\n\\n    if q == 1:\\n        print(0 if b1 in a else 'inf')\\n        return\\n\\n    if q == -1:\\n        print(0 if (b1 in a and -b1 in a) else 'inf')\\n        return\\n\\n    b = b1\\n    ans = 0\\n\\n    while abs(b) <= L:\\n        if b not in a:\\n            ans += 1\\n        b *= q\\n\\n    print(ans)\\n\\n\\ndef __starting_point():\\n    solve()\\n__starting_point()\", \"b, q, l, m = [int(a_temp) for a_temp in input().strip().split()]\\na = [int(a_temp) for a_temp in input().strip().split()]\\nd = {}\\nfor e in a:\\n    d[e]=True\\nif abs(b)>l:\\n    print(0)\\nelif q==0:\\n    if 0 not in d:\\n        print(\\\"inf\\\")\\n    elif b not in d:\\n        print(1)\\n    else:\\n        print(0)\\nelif b==0:\\n    if 0 not in d:\\n        print(\\\"inf\\\")\\n    else:\\n        print(0)\\nelif q==1:\\n    if b in d or abs(b)>l:\\n        print(0)\\n    else:\\n        print(\\\"inf\\\")\\nelif q==-1:\\n    if abs(b)>l:\\n        print(0)\\n    elif b not in d:\\n        print(\\\"inf\\\")\\n    elif -1*b not in d:\\n        print(\\\"inf\\\")\\n    else:\\n        print(0)\\nelse:\\n    count = 0\\n    t = b\\n    while(abs(t)<=l):\\n        if t not in d:\\n            count+=1\\n        t*=q\\n    print(count)\", \"b1 , q , l , m = list(map(int, input().split()))\\ns = set(map(int , input().split()))\\nans = 0\\ncnt = 0\\nwhile abs(b1) <= l:\\n    if b1 not in s:\\n        ans += 1\\n    cnt += 1\\n    if cnt == 100000:\\n        break\\n    b1 *= q\\n    \\nif ans >= 50000:\\n    print('inf')\\nelse:\\n    print(ans)\\n\", \"x = list(map(int, input().split()))\\ninit_term = x[0]\\nratio = x[1]\\nabs_max = x[2]\\nnum_bad = x[3]\\n\\nbad_list = list(map(int, input().split()))\\n\\ncurr_val = 0\\ncurr_val += init_term\\nnum_to_write = 0\\n\\nif abs(init_term) > abs_max:\\n\\tprint(\\\"0\\\")\\nelse:\\n\\tif init_term == 0:\\n\\t\\tif init_term in bad_list:\\n\\t\\t\\tprint(\\\"0\\\")\\n\\t\\telse:\\n\\t\\t\\tprint(\\\"inf\\\") # minimum abs_max can be is 1.\\n\\telse:\\n\\t\\tif ratio == 1:\\n\\t\\t\\tif (curr_val * ratio in bad_list):\\n\\t\\t\\t\\tprint(\\\"0\\\")\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(\\\"inf\\\")\\n\\n\\t\\telif ratio == 0:\\n\\t\\t\\tif (0 in bad_list and init_term in bad_list):\\n\\t\\t\\t\\tprint(\\\"0\\\")\\n\\t\\t\\telif 0 in bad_list:\\n\\t\\t\\t\\tprint(\\\"1\\\")\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(\\\"inf\\\")\\n\\n\\t\\telif ratio == -1:\\n\\t\\t\\tif (init_term in bad_list and -init_term in bad_list):\\n\\t\\t\\t\\tprint(\\\"0\\\")\\n\\t\\t\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(\\\"inf\\\")\\n\\t\\n\\t\\telse:\\n\\t\\t\\twhile (abs(curr_val) <= abs_max):\\n\\t\\t\\t\\tif curr_val not in bad_list:\\n\\t\\t\\t\\t\\tnum_to_write += 1\\n\\t\\t\\t\\tcurr_val *= ratio\\n\\n\\t\\t\\tprint(num_to_write)\\n\\n\", \"B, Q, L, M = list(map( int, input().split() ))\\nA = set( map( int, input().split() ) )\\nans = 0\\nfor _ in range( 100 ):\\n  if abs( B ) > L:\\n    break\\n  if B not in A:\\n    ans += 1\\n  B *= Q\\nprint( ans if ans < 32 else \\\"inf\\\" )\\n\", \"b, q, l, m = map(int, input().split(' '))\\na = list(map(int, input().split(' ')))\\nif abs(b) > l:\\n    c = 0\\nelif b == 0:\\n    if 0 in a: c = 0\\n    else: c = \\\"inf\\\"\\nelif q == 1:\\n    if b in a: c = 0\\n    else: c = \\\"inf\\\"\\nelif q == -1:\\n    if b in a and -b in a: c = 0\\n    else: c = \\\"inf\\\"\\nelif q == 0:\\n    if 0 not in a: c = \\\"inf\\\"\\n    elif b in a: c = 0\\n    else: c = 1\\nelse:\\n    c = 0\\n    while abs(b) <= l:\\n        if b not in a: c += 1\\n        b *= q\\nprint(c)\", \"b, q, l, m = [int(x) for x in input().split()]\\nseq = [int(x) for x in input().split()]\\n\\nwyn = 0\\nwhile abs(b) <= l:\\n    if b == 0 or q == 0:\\n        if 0 not in seq:\\n            print(\\\"inf\\\")\\n        elif b != 0 and b not in seq:\\n            print(1)\\n        elif b == 0 or b !=0 and b in seq:\\n            print(0)\\n        return\\n\\n    if q == 1:\\n        if b in seq:\\n            print(0)\\n        else:\\n            print(\\\"inf\\\")\\n        return\\n\\n    if q == -1:\\n        if b in seq and b*-1 in seq:\\n            print(0)\\n        else:\\n            print(\\\"inf\\\")\\n        return\\n\\n    if b not in seq:\\n        wyn += 1\\n    b *= q\\nprint(wyn)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3 2 30 4\\n6 14 25 48\\n\",\n    \"123 1 2143435 4\\n123 11 -5453 141245\\n\",\n    \"123 1 2143435 4\\n54343 -13 6 124\\n\",\n    \"3 2 25 2\\n379195692 -69874783\\n\",\n    \"3 2 30 3\\n-691070108 -934106649 -220744807\\n\",\n    \"3 3 104 17\\n9 -73896485 -290898562 5254410 409659728 -916522518 -435516126 94354167 262981034 -375897180 -80186684 -173062070 -288705544 -699097793 -11447747 320434295 503414250\\n\",\n    \"-1000000000 -1000000000 1 1\\n232512888\\n\",\n    \"11 0 228 5\\n-1 0 1 5 -11245\\n\",\n    \"11 0 228 5\\n-1 -17 1 5 -11245\\n\",\n    \"0 0 2143435 5\\n-1 -153 1 5 -11245\\n\",\n    \"123 0 2143435 4\\n5433 0 123 -645\\n\",\n    \"123 -1 2143435 5\\n-123 0 12 5 -11245\\n\",\n    \"123 0 21 4\\n543453 -123 6 1424\\n\",\n    \"3 2 115 16\\n24 48 12 96 3 720031148 -367712651 -838596957 558177735 -963046495 -313322487 -465018432 -618984128 -607173835 144854086 178041956\\n\",\n    \"-3 0 92055 36\\n-92974174 -486557474 -663622151 695596393 177960746 -563227474 -364263320 -676254242 -614140218 71456762 -764104225 705056581 -106398436 332755134 -199942822 -732751692 658942664 677739866 886535704 183687802 -784248291 -22550621 -938674499 637055091 -704750213 780395802 778342470 -999059668 -794361783 796469192 215667969 354336794 -60195289 -885080928 -290279020 201221317\\n\",\n    \"0 -3 2143435 5\\n-1 0 1 5 -11245\\n\",\n    \"123 -1 2143435 5\\n-123 0 123 -5453 141245\\n\",\n    \"123 0 2143435 4\\n5433 0 -123 -645\\n\",\n    \"11 0 2 5\\n-1 0 1 5 -11245\\n\",\n    \"2 2 4 1\\n2\\n\",\n    \"1 -2 1000000000 1\\n0\\n\",\n    \"0 8 10 1\\n5\\n\",\n    \"-1000 0 10 1\\n5\\n\",\n    \"0 2 2143435 4\\n54343 -13 6 124\\n\",\n    \"0 8 5 1\\n9\\n\",\n    \"-10 1 5 1\\n100\\n\",\n    \"123 -1 2143435 4\\n54343 -13 6 123\\n\",\n    \"-5 -1 10 1\\n-5\\n\",\n    \"2 0 1 1\\n2\\n\",\n    \"0 5 8 1\\n10\\n\",\n    \"0 5 100 2\\n34 56\\n\",\n    \"15 -1 15 4\\n15 -15 1 2\\n\",\n    \"10 -1 2 1\\n1\\n\",\n    \"2 0 2 1\\n2\\n\",\n    \"4 0 4 1\\n0\\n\",\n    \"10 10 10 1\\n123\\n\",\n    \"2 2 4 1\\n3\\n\",\n    \"0 1 1 1\\n0\\n\",\n    \"3 2 30 1\\n3\\n\",\n    \"1000000000 100000 1000000000 4\\n5433 13 6 0\\n\",\n    \"-2 0 1 1\\n1\\n\",\n    \"2 -1 10 1\\n2\\n\",\n    \"1 -1 2 1\\n1\\n\",\n    \"0 10 10 1\\n2\\n\",\n    \"0 35 2 1\\n3\\n\",\n    \"3 1 3 1\\n5\\n\",\n    \"3 2 3 4\\n6 14 25 48\\n\",\n    \"0 69 12 1\\n1\\n\",\n    \"100 0 100000 1\\n100\\n\",\n    \"0 4 1000 3\\n5 6 7\\n\",\n    \"0 2 100 1\\n5\\n\",\n    \"3 2 24 4\\n6 14 25 48\\n\",\n    \"0 4 1 1\\n2\\n\",\n    \"1 5 10000 1\\n125\\n\",\n    \"2 -1 1 1\\n1\\n\",\n    \"0 3 100 1\\n5\\n\",\n    \"0 3 3 1\\n1\\n\",\n    \"0 2 5 1\\n1\\n\",\n    \"5 -1 100 1\\n5\\n\",\n    \"-20 0 10 1\\n0\\n\",\n    \"3 0 1 1\\n3\\n\",\n    \"2 -1 3 1\\n2\\n\",\n    \"1 1 1000000000 1\\n100\\n\",\n    \"5 -1 3 1\\n0\\n\",\n    \"0 5 10 1\\n2\\n\",\n    \"123 0 125 1\\n123\\n\",\n    \"2 -1 100 1\\n2\\n\",\n    \"5 2 100 1\\n5\\n\",\n    \"-5 0 1 1\\n1\\n\",\n    \"-3 0 1 1\\n-3\\n\",\n    \"2 -2 10 1\\n1\\n\",\n    \"0 2 30 4\\n6 14 25 48\\n\",\n    \"1 -1 1 1\\n1\\n\",\n    \"2 -1 6 1\\n2\\n\",\n    \"-3 1 100 1\\n-3\\n\",\n    \"1 0 2 1\\n1\\n\",\n    \"1000000000 999999998 1000000000 1\\n0\\n\",\n    \"1 0 2143435 4\\n1 -123 -5453 141245\\n\",\n    \"-1000 0 100 1\\n-1000\\n\",\n    \"100 10 2 1\\n100\\n\",\n    \"-3 1 100 1\\n3\\n\",\n    \"123 -1 10000 1\\n123\\n\",\n    \"1 -1 2143435 4\\n1 -123 -5453 141245\\n\",\n    \"5 1 5 5\\n1 2 3 4 0\\n\",\n    \"-100 -1 1 1\\n1\\n\",\n    \"10 -1 3 2\\n10 8\\n\",\n    \"-10 0 5 1\\n0\\n\",\n    \"3 0 3 1\\n0\\n\",\n    \"2 0 2 1\\n-1\\n\",\n    \"5 0 20 1\\n5\\n\",\n    \"-4 1 1 1\\n0\\n\",\n    \"11 0 1111 1\\n11\\n\",\n    \"2 0 3 1\\n2\\n\",\n    \"-1 -1 2143435 4\\n-1 -123 -5453 141245\\n\",\n    \"-100 0 50 1\\n0\\n\",\n    \"5 1 2 1\\n2\\n\",\n    \"3 0 3 1\\n4\\n\",\n    \"0 23 3 1\\n3\\n\",\n    \"-1000 0 100 1\\n2\\n\",\n    \"1 -1 10 1\\n1\\n\"\n  ],\n  \"outputs\": [\n    \"3\",\n    \"0\",\n    \"inf\",\n    \"4\",\n    \"4\",\n    \"3\",\n    \"0\",\n    \"1\",\n    \"inf\",\n    \"inf\",\n    \"0\",\n    \"inf\",\n    \"0\",\n    \"1\",\n    \"inf\",\n    \"0\",\n    \"0\",\n    \"1\",\n    \"0\",\n    \"1\",\n    \"30\",\n    \"inf\",\n    \"0\",\n    \"inf\",\n    \"inf\",\n    \"0\",\n    \"inf\",\n    \"inf\",\n    \"0\",\n    \"inf\",\n    \"inf\",\n    \"0\",\n    \"0\",\n    \"inf\",\n    \"1\",\n    \"1\",\n    \"2\",\n    \"0\",\n    \"3\",\n    \"1\",\n    \"0\",\n    \"inf\",\n    \"inf\",\n    \"inf\",\n    \"inf\",\n    \"inf\",\n    \"1\",\n    \"inf\",\n    \"inf\",\n    \"inf\",\n    \"inf\",\n    \"3\",\n    \"inf\",\n    \"5\",\n    \"0\",\n    \"inf\",\n    \"inf\",\n    \"inf\",\n    \"inf\",\n    \"0\",\n    \"0\",\n    \"inf\",\n    \"inf\",\n    \"0\",\n    \"inf\",\n    \"inf\",\n    \"inf\",\n    \"4\",\n    \"0\",\n    \"0\",\n    \"3\",\n    \"inf\",\n    \"inf\",\n    \"inf\",\n    \"0\",\n    \"inf\",\n    \"1\",\n    \"inf\",\n    \"0\",\n    \"0\",\n    \"inf\",\n    \"inf\",\n    \"inf\",\n    \"inf\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"1\",\n    \"inf\",\n    \"inf\",\n    \"0\",\n    \"inf\",\n    \"inf\",\n    \"inf\",\n    \"0\",\n    \"0\",\n    \"inf\",\n    \"inf\",\n    \"0\",\n    \"inf\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/789/B",
  "starter_code": ""
}