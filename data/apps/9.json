{
  "task_id": "APPS/9",
  "problem_id": 9,
  "prompt": "Yet another round on DecoForces is coming! Grandpa Maks wanted to participate in it but someone has stolen his precious sofa! And how can one perform well with such a major loss?\n\nFortunately, the thief had left a note for Grandpa Maks. This note got Maks to the sofa storehouse. Still he had no idea which sofa belongs to him as they all looked the same!\n\nThe storehouse is represented as matrix n \u00d7 m. Every sofa takes two neighbouring by some side cells. No cell is covered by more than one sofa. There can be empty cells.\n\nSofa A is standing to the left of sofa B if there exist two such cells a and b that x_{a} < x_{b}, a is covered by A and b is covered by B. Sofa A is standing to the top of sofa B if there exist two such cells a and b that y_{a} < y_{b}, a is covered by A and b is covered by B. Right and bottom conditions are declared the same way. \n\nNote that in all conditions A \u2260 B. Also some sofa A can be both to the top of another sofa B and to the bottom of it. The same is for left and right conditions.\n\nThe note also stated that there are cnt_{l} sofas to the left of Grandpa Maks's sofa, cnt_{r} \u2014 to the right, cnt_{t} \u2014 to the top and cnt_{b} \u2014 to the bottom.\n\nGrandpa Maks asks you to help him to identify his sofa. It is guaranteed that there is no more than one sofa of given conditions.\n\nOutput the number of Grandpa Maks's sofa. If there is no such sofa that all the conditions are met for it then output -1.\n\n\n-----Input-----\n\nThe first line contains one integer number d (1 \u2264 d \u2264 10^5) \u2014 the number of sofas in the storehouse.\n\nThe second line contains two integer numbers n, m (1 \u2264 n, m \u2264 10^5) \u2014 the size of the storehouse.\n\nNext d lines contains four integer numbers x_1, y_1, x_2, y_2 (1 \u2264 x_1, x_2 \u2264 n, 1 \u2264 y_1, y_2 \u2264 m) \u2014 coordinates of the i-th sofa. It is guaranteed that cells (x_1, y_1) and (x_2, y_2) have common side, (x_1, y_1)  \u2260  (x_2, y_2) and no cell is covered by more than one sofa.\n\nThe last line contains four integer numbers cnt_{l}, cnt_{r}, cnt_{t}, cnt_{b} (0 \u2264 cnt_{l}, cnt_{r}, cnt_{t}, cnt_{b} \u2264 d - 1).\n\n\n-----Output-----\n\nPrint the number of the sofa for which all the conditions are met. Sofas are numbered 1 through d as given in input. If there is no such sofa then print -1.\n\n\n-----Examples-----\nInput\n2\n3 2\n3 1 3 2\n1 2 2 2\n1 0 0 1\n\nOutput\n1\n\nInput\n3\n10 10\n1 2 1 1\n5 5 6 5\n6 4 5 4\n2 1 2 0\n\nOutput\n2\n\nInput\n2\n2 2\n2 1 1 1\n1 2 2 2\n1 0 0 0\n\nOutput\n-1\n\n\n\n-----Note-----\n\nLet's consider the second example.   The first sofa has 0 to its left, 2 sofas to its right ((1, 1) is to the left of both (5, 5) and (5, 4)), 0 to its top and 2 to its bottom (both 2nd and 3rd sofas are below).  The second sofa has cnt_{l} = 2, cnt_{r} = 1, cnt_{t} = 2 and cnt_{b} = 0.  The third sofa has cnt_{l} = 2, cnt_{r} = 1, cnt_{t} = 1 and cnt_{b} = 1. \n\nSo the second one corresponds to the given conditions.\n\nIn the third example   The first sofa has cnt_{l} = 1, cnt_{r} = 1, cnt_{t} = 0 and cnt_{b} = 1.  The second sofa has cnt_{l} = 1, cnt_{r} = 1, cnt_{t} = 1 and cnt_{b} = 0. \n\nAnd there is no sofa with the set (1, 0, 0, 0) so the answer is -1.",
  "solutions": "[\"from sys import stdin, stdout\\n\\nk = int(stdin.readline())\\nn, m = map(int, stdin.readline().split())\\nleft, right, down, up = [], [], [], []\\ncoordinates = []\\n\\nfor i in range(k):\\n    x1, y1, x2, y2 = map(int, stdin.readline().split())\\n    \\n    if x1 == x2:\\n        if y1 < y2:\\n            coordinates.append((x1, y1, x2, y2, i))\\n        else:\\n            coordinates.append((x2, y2, x1, y1, i))\\n    else:\\n        if x1 < x2:\\n            coordinates.append((x1, y1, x2, y2, i))\\n        else:\\n            coordinates.append((x2, y2, x1, y1, i))\\n    \\n    left.append(coordinates[-1])\\n    right.append(coordinates[-1])\\n    up.append(coordinates[-1])\\n    down.append(coordinates[-1])\\n\\nleft.sort(key = lambda x: (x[0], x[2]))\\ndown.sort(key = lambda x: (x[1], x[3]))\\n\\nchallengers = [[], [], [], []]\\ncntl, cntr, cntd, cntu = map(int, stdin.readline().split())\\nlabel = 1\\n\\nif cntl or not cntl:\\n    for i in range(cntl, -1, -1):\\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):\\n            challengers[0].append(left[i][-1])  \\n        else:\\n            break\\n        \\n    for i in range(cntl + 1, k):\\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]) and left[i][2] > left[i][0]:\\n            label = 0\\n        \\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):\\n            challengers[0].append(left[i][-1])  \\n        else:\\n            break\\n\\nif cntr or not cntr:\\n    for i in range(k - 1 - cntr, k):\\n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):\\n            challengers[1].append(left[i][-1])\\n        else:\\n            break\\n    \\n    for i in range(k - 2 - cntr, -1, -1):\\n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]) and left[i][2] > left[i][0]:\\n            label = 0\\n        \\n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):\\n            challengers[1].append(left[i][-1])\\n        else:\\n            break\\n\\n#!!!!!!!!!!!\\n\\nif cntd or not cntd:\\n    for i in range(cntd, -1, -1):\\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):\\n            challengers[2].append(down[i][-1])\\n        else:\\n            break\\n        \\n    for i in range(cntd + 1, k):\\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]) and down[i][3] > down[i][1]:\\n            label = 0\\n            \\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):\\n            challengers[2].append(down[i][-1])  \\n        else:\\n            break\\n        \\nif cntu or not cntu:\\n    for i in range(k - 1 - cntu, k):\\n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):\\n            challengers[3].append(down[i][-1])\\n        else:\\n            break\\n    \\n    for i in range(k - 2 - cntu, -1, -1):\\n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]) and down[i][3] > down[i][1]:\\n            label = 0\\n        \\n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):\\n            challengers[3].append(down[i][-1])\\n        else:\\n            break\\n\\nans = set(challengers[0]) & set(challengers[1]) & set(challengers[2]) & set(challengers[3])\\n\\nif not len(ans) or not label:\\n    stdout.write('-1')\\nelse:\\n    stdout.write(str(list(ans)[0] + 1))\", \"#!/usr/bin/env python3\\n\\n\\nd = int(input().strip())\\n[n, m] = list(map(int, input().strip().split()))\\nHxds = [0 for _ in range(n)]\\nHyds = [0 for _ in range(m)]\\nVxds = [0 for _ in range(n)]\\nVyds = [0 for _ in range(m)]\\nds = []\\nfor i in range(d):\\n\\tx1, y1, x2, y2 = list(map(int, input().strip().split()))\\n\\tif x1 == x2:\\n\\t\\tHxds[x1 - 1] += 1\\n\\t\\tHyds[min(y1, y2) - 1] += 1\\n\\t\\tds.append((x1 - 1, min(y1, y2) - 1, 'h'))\\n\\telse:\\n\\t\\tVxds[min(x1, x2) - 1] += 1\\n\\t\\tVyds[y1 - 1] += 1\\n\\t\\tds.append((min(x1, x2) - 1, y1 - 1, 'v'))\\ncl, cr, ct, cb = list(map(int, input().strip().split()))\\n\\nif (d - 1 - cl - cr) * (d - 1 - ct - cb) > 0:\\n\\tprint(-1)\\n\\treturn\\n\\n\\ndef makeI(xs):\\n\\tI = [0 for _ in range(len(xs) + 1)]\\n\\tfor i in range(len(xs)):\\n\\t\\tI[i + 1] = I[i] + xs[i]\\n\\treturn I\\n\\ndef find_x_Hor(IH, IV, l, cl, cr):\\n\\tif cl + cr > d - 1:\\n\\t\\treturn -1\\n\\tx = 0\\n\\twhile x <= l and (IH[x] + IV[x] < cl or d - IH[x + 1] - IV[x] > cr):\\n\\t\\tx += 1\\n\\tif x < l and IH[x] + IV[x] == cl and (d - IH[x + 1] - IV[x]) == cr:\\n\\t\\treturn x\\n\\treturn -1\\n\\ndef find_x_Vert(IH, IV, l, cl, cr):\\n\\tif cl + cr < d - 1:\\n\\t\\treturn -1\\n\\tx = 0\\n\\twhile x < l and (IH[x + 1] + IV[x + 1] < cl + 1 or d - IH[x + 1] - IV[x] > cr + 1):\\n\\t\\tx += 1\\n\\tif x < l and IH[x + 1] + IV[x + 1] == cl + 1 and (d - IH[x + 1] - IV[x]) == cr + 1:\\n\\t\\treturn x\\n\\treturn -1\\n\\t\\n\\nIHx = makeI(Hxds)\\nIHy = makeI(Hyds)\\nIVx = makeI(Vxds)\\nIVy = makeI(Vyds)\\n\\nif ct + cb >= d - 1 and cr + cl <= d - 1:  # horizontal sofa\\n\\tx = find_x_Hor(IHx, IVx, n, cl, cr)\\n\\ty = find_x_Vert(IVy, IHy, m, ct, cb)\\n\\tif x >= 0 and y >= 0:\\n\\t\\tif (x, y, 'h') in ds:\\n\\t\\t\\tprint(ds.index((x, y, 'h')) + 1)\\n\\t\\t\\treturn\\n\\nif ct + cb <= d - 1 and cr + cl >= d - 1:  # vertical sofa\\n\\tx = find_x_Vert(IHx, IVx, n, cl, cr)\\n\\ty = find_x_Hor(IVy, IHy, m, ct, cb)\\n\\tif x >= 0 and y >= 0:\\n\\t\\tif (x, y, 'v') in ds:\\n\\t\\t\\tprint(ds.index((x, y, 'v')) + 1)\\n\\t\\t\\treturn\\n\\nprint(-1)\\n\\n\", \"from sys import stdin, stdout\\n\\n\\n\\nk = int(stdin.readline())\\n\\nn, m = list(map(int, stdin.readline().split()))\\n\\nleft, right, down, up = [], [], [], []\\n\\ncoordinates = []\\n\\n\\n\\nfor i in range(k):\\n\\n    x1, y1, x2, y2 = list(map(int, stdin.readline().split()))\\n\\n    \\n\\n    if x1 == x2:\\n\\n        if y1 < y2:\\n\\n            coordinates.append((x1, y1, x2, y2, i))\\n\\n        else:\\n\\n            coordinates.append((x2, y2, x1, y1, i))\\n\\n    else:\\n\\n        if x1 < x2:\\n\\n            coordinates.append((x1, y1, x2, y2, i))\\n\\n        else:\\n\\n            coordinates.append((x2, y2, x1, y1, i))\\n\\n    \\n\\n    left.append(coordinates[-1])\\n\\n    right.append(coordinates[-1])\\n\\n    up.append(coordinates[-1])\\n\\n    down.append(coordinates[-1])\\n\\n\\n\\nleft.sort(key = lambda x: (x[0], x[2]))\\n\\ndown.sort(key = lambda x: (x[1], x[3]))\\n\\n\\n\\nchallengers = [[], [], [], []]\\n\\ncntl, cntr, cntd, cntu = list(map(int, stdin.readline().split()))\\n\\nlabel = 1\\n\\n\\n\\nif cntl or not cntl:\\n\\n    for i in range(cntl, -1, -1):\\n\\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):\\n\\n            challengers[0].append(left[i][-1])  \\n\\n        else:\\n\\n            break\\n\\n        \\n\\n    for i in range(cntl + 1, k):\\n\\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]) and left[i][2] > left[i][0]:\\n\\n            label = 0\\n\\n        \\n\\n        if (left[i][0], left[i][2]) == (left[cntl][0], left[cntl][2]):\\n\\n            challengers[0].append(left[i][-1])  \\n\\n        else:\\n\\n            break\\n\\n\\n\\nif cntr or not cntr:\\n\\n    for i in range(k - 1 - cntr, k):\\n\\n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):\\n\\n            challengers[1].append(left[i][-1])\\n\\n        else:\\n\\n            break\\n\\n    \\n\\n    for i in range(k - 2 - cntr, -1, -1):\\n\\n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]) and left[i][2] > left[i][0]:\\n\\n            label = 0\\n\\n        \\n\\n        if (left[i][0], left[i][2]) == (left[k - 1 - cntr][0], left[k - 1 - cntr][2]):\\n\\n            challengers[1].append(left[i][-1])\\n\\n        else:\\n\\n            break\\n\\n\\n\\n#!!!!!!!!!!!\\n\\n\\n\\nif cntd or not cntd:\\n\\n    for i in range(cntd, -1, -1):\\n\\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):\\n\\n            challengers[2].append(down[i][-1])\\n\\n        else:\\n\\n            break\\n\\n        \\n\\n    for i in range(cntd + 1, k):\\n\\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]) and down[i][3] > down[i][1]:\\n\\n            label = 0\\n\\n            \\n\\n        if (down[i][1], down[i][3]) == (down[cntd][1], down[cntd][3]):\\n\\n            challengers[2].append(down[i][-1])  \\n\\n        else:\\n\\n            break\\n\\n        \\n\\nif cntu or not cntu:\\n\\n    for i in range(k - 1 - cntu, k):\\n\\n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):\\n\\n            challengers[3].append(down[i][-1])\\n\\n        else:\\n\\n            break\\n\\n    \\n\\n    for i in range(k - 2 - cntu, -1, -1):\\n\\n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]) and down[i][3] > down[i][1]:\\n\\n            label = 0\\n\\n        \\n\\n        if (down[i][1], down[i][3]) == (down[k - 1 - cntu][1], down[k - 1 - cntu][3]):\\n\\n            challengers[3].append(down[i][-1])\\n\\n        else:\\n\\n            break\\n\\n\\n\\nans = set(challengers[0]) & set(challengers[1]) & set(challengers[2]) & set(challengers[3])\\n\\n\\n\\nif not len(ans) or not label:\\n\\n    stdout.write('-1')\\n\\nelse:\\n\\n    stdout.write(str(list(ans)[0] + 1))\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"import sys\\ntry:\\n    fin=open('in')\\nexcept:\\n    fin=sys.stdin\\ninput=fin.readline\\n\\nd = int(input())\\nn, m = map(int, input().split())\\nx1, y1, x2, y2 = [], [], [], []\\nT=[]\\nfor _ in range(d):\\n    u, v, w, x = map(int, input().split())\\n    if u>w:u,w=w,u\\n    if v>x:v,x=x,v\\n    x1.append(u)\\n    y1.append(v)\\n    x2.append(-w)#the other direction pog?\\n    y2.append(-x)\\n    T.append([u,v,w,x])\\n\\nx1.sort()\\nx2.sort()\\ny1.sort()\\ny2.sort()\\n\\nreq=list(map(int,input().split())) # x1,x2,y1,y2\\nimport bisect\\nfor i in range(len(T)):\\n    # binary search\\n    u,v,w,x=T[i]\\n    if req[0]==bisect.bisect_left(x1,w)-(u!=w):\\n        if req[1]==bisect.bisect_left(x2,-u)-(u!=w):\\n            if req[2]==bisect.bisect_left(y1,x)-(v!=x):\\n                if req[3]==bisect.bisect_left(y2,-v)-(v!=x):\\n                    print(i+1)\\n                    break\\nelse:\\n    print(-1)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2\\n3 2\\n3 1 3 2\\n1 2 2 2\\n1 0 0 1\\n\",\n    \"3\\n10 10\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0\\n\",\n    \"2\\n2 2\\n2 1 1 1\\n1 2 2 2\\n1 0 0 0\\n\",\n    \"1\\n1 2\\n1 1 1 2\\n0 0 0 0\\n\",\n    \"1\\n2 1\\n2 1 1 1\\n0 0 0 0\\n\",\n    \"1\\n1000 1000\\n63 902 63 901\\n0 0 0 0\\n\",\n    \"6\\n10 10\\n3 6 3 7\\n4 9 5 9\\n5 4 5 3\\n7 1 8 1\\n9 10 8 10\\n7 7 7 8\\n0 5 2 3\\n\",\n    \"2\\n4 4\\n3 1 3 2\\n2 2 2 1\\n0 0 0 0\\n\",\n    \"2\\n2 2\\n1 1 1 2\\n2 1 2 2\\n0 1 1 1\\n\",\n    \"2\\n2 2\\n1 1 1 2\\n2 1 2 2\\n1 0 1 1\\n\",\n    \"2\\n2 2\\n1 1 1 2\\n2 1 2 2\\n0 1 1 0\\n\",\n    \"1\\n1 2\\n1 2 1 1\\n0 0 0 0\\n\",\n    \"1\\n1 3\\n1 2 1 3\\n0 0 0 0\\n\",\n    \"1\\n1 4\\n1 2 1 1\\n0 0 0 0\\n\",\n    \"1\\n1 5\\n1 4 1 3\\n0 0 0 0\\n\",\n    \"1\\n1 6\\n1 6 1 5\\n0 0 0 0\\n\",\n    \"1\\n1 7\\n1 6 1 7\\n0 0 0 0\\n\",\n    \"1\\n2 1\\n2 1 1 1\\n0 0 0 0\\n\",\n    \"1\\n2 2\\n2 2 2 1\\n0 0 0 0\\n\",\n    \"1\\n2 3\\n1 2 1 1\\n0 0 0 0\\n\",\n    \"1\\n2 4\\n2 3 2 4\\n0 0 0 0\\n\",\n    \"1\\n2 5\\n2 4 1 4\\n0 0 0 0\\n\",\n    \"1\\n2 6\\n2 1 1 1\\n0 0 0 0\\n\",\n    \"1\\n2 7\\n2 7 2 6\\n0 0 0 0\\n\",\n    \"1\\n3 1\\n2 1 3 1\\n0 0 0 0\\n\",\n    \"1\\n3 2\\n1 1 2 1\\n0 0 0 0\\n\",\n    \"1\\n3 3\\n3 2 3 3\\n0 0 0 0\\n\",\n    \"1\\n3 4\\n2 1 2 2\\n0 0 0 0\\n\",\n    \"1\\n3 5\\n2 2 2 1\\n0 0 0 0\\n\",\n    \"1\\n3 6\\n1 4 2 4\\n0 0 0 0\\n\",\n    \"1\\n3 7\\n2 2 1 2\\n0 0 0 0\\n\",\n    \"1\\n4 1\\n1 1 2 1\\n0 0 0 0\\n\",\n    \"1\\n4 2\\n1 1 1 2\\n0 0 0 0\\n\",\n    \"1\\n4 3\\n4 3 4 2\\n0 0 0 0\\n\",\n    \"1\\n4 4\\n3 2 3 3\\n0 0 0 0\\n\",\n    \"1\\n4 5\\n1 2 2 2\\n0 0 0 0\\n\",\n    \"1\\n4 6\\n4 3 4 4\\n0 0 0 0\\n\",\n    \"1\\n4 7\\n3 6 4 6\\n0 0 0 0\\n\",\n    \"1\\n5 1\\n2 1 1 1\\n0 0 0 0\\n\",\n    \"1\\n5 2\\n5 1 4 1\\n0 0 0 0\\n\",\n    \"1\\n5 3\\n4 2 3 2\\n0 0 0 0\\n\",\n    \"1\\n5 4\\n2 4 3 4\\n0 0 0 0\\n\",\n    \"1\\n5 5\\n4 1 3 1\\n0 0 0 0\\n\",\n    \"1\\n5 6\\n3 3 3 2\\n0 0 0 0\\n\",\n    \"1\\n5 7\\n1 6 1 7\\n0 0 0 0\\n\",\n    \"1\\n6 1\\n6 1 5 1\\n0 0 0 0\\n\",\n    \"1\\n6 2\\n4 2 5 2\\n0 0 0 0\\n\",\n    \"1\\n6 3\\n1 2 1 1\\n0 0 0 0\\n\",\n    \"1\\n6 4\\n2 2 3 2\\n0 0 0 0\\n\",\n    \"1\\n6 5\\n6 1 6 2\\n0 0 0 0\\n\",\n    \"1\\n6 6\\n4 1 3 1\\n0 0 0 0\\n\",\n    \"1\\n6 7\\n6 7 6 6\\n0 0 0 0\\n\",\n    \"1\\n7 1\\n6 1 7 1\\n0 0 0 0\\n\",\n    \"1\\n7 2\\n4 2 4 1\\n0 0 0 0\\n\",\n    \"1\\n7 3\\n7 1 7 2\\n0 0 0 0\\n\",\n    \"1\\n7 4\\n3 3 3 4\\n0 0 0 0\\n\",\n    \"1\\n7 5\\n6 4 7 4\\n0 0 0 0\\n\",\n    \"1\\n7 6\\n2 2 2 3\\n0 0 0 0\\n\",\n    \"1\\n7 7\\n1 3 2 3\\n0 0 0 0\\n\",\n    \"1\\n1 4\\n1 4 1 3\\n0 0 0 0\\n\",\n    \"2\\n1 5\\n1 5 1 4\\n1 1 1 2\\n0 0 1 0\\n\",\n    \"1\\n1 6\\n1 2 1 3\\n0 0 0 0\\n\",\n    \"2\\n1 7\\n1 7 1 6\\n1 4 1 5\\n0 0 1 0\\n\",\n    \"1\\n2 2\\n2 1 2 2\\n0 0 0 0\\n\",\n    \"2\\n2 3\\n2 3 1 3\\n1 2 2 2\\n0 0 0 1\\n\",\n    \"2\\n2 4\\n2 2 2 1\\n2 4 1 4\\n0 1 1 0\\n\",\n    \"2\\n2 5\\n2 2 2 1\\n1 3 1 4\\n1 0 0 1\\n\",\n    \"2\\n2 6\\n1 2 1 1\\n2 1 2 2\\n1 0 1 1\\n\",\n    \"2\\n2 7\\n2 4 2 5\\n2 7 1 7\\n0 0 1 0\\n\",\n    \"2\\n3 2\\n1 2 2 2\\n1 1 2 1\\n0 0 1 0\\n\",\n    \"2\\n3 3\\n2 1 1 1\\n1 2 2 2\\n0 0 0 1\\n\",\n    \"1\\n3 4\\n1 3 1 4\\n0 0 0 0\\n\",\n    \"2\\n3 5\\n1 2 1 1\\n3 1 2 1\\n0 1 0 0\\n\",\n    \"2\\n3 6\\n3 2 3 1\\n3 6 2 6\\n0 0 0 1\\n\",\n    \"2\\n3 7\\n3 6 3 5\\n2 4 2 3\\n0 1 0 1\\n\",\n    \"2\\n4 1\\n3 1 4 1\\n1 1 2 1\\n0 1 0 0\\n\",\n    \"1\\n4 2\\n4 1 3 1\\n0 0 0 0\\n\",\n    \"2\\n4 3\\n3 1 2 1\\n1 2 1 1\\n1 0 0 1\\n\",\n    \"1\\n4 4\\n4 1 3 1\\n0 0 0 0\\n\",\n    \"2\\n4 5\\n3 1 4 1\\n4 2 4 3\\n0 1 0 1\\n\",\n    \"2\\n4 6\\n2 3 2 4\\n2 6 2 5\\n0 0 0 1\\n\",\n    \"2\\n4 7\\n1 7 2 7\\n4 1 3 1\\n1 0 0 1\\n\",\n    \"2\\n5 1\\n2 1 1 1\\n5 1 4 1\\n1 0 0 0\\n\",\n    \"2\\n5 2\\n1 1 1 2\\n2 2 3 2\\n1 0 1 0\\n\",\n    \"2\\n5 3\\n1 1 1 2\\n5 2 5 3\\n0 1 0 1\\n\",\n    \"2\\n5 4\\n4 4 4 3\\n4 2 5 2\\n0 0 0 1\\n\",\n    \"2\\n5 5\\n3 4 3 5\\n4 1 3 1\\n1 0 0 1\\n\",\n    \"2\\n5 6\\n2 4 3 4\\n5 2 5 1\\n0 1 1 0\\n\",\n    \"2\\n5 7\\n2 7 1 7\\n2 4 3 4\\n0 0 0 1\\n\",\n    \"1\\n6 1\\n3 1 4 1\\n0 0 0 0\\n\",\n    \"1\\n6 2\\n5 1 6 1\\n0 0 0 0\\n\",\n    \"2\\n6 3\\n2 2 2 1\\n3 2 3 1\\n0 1 0 0\\n\",\n    \"2\\n6 4\\n6 4 5 4\\n4 3 4 2\\n1 0 1 0\\n\",\n    \"2\\n6 5\\n2 4 2 3\\n5 4 4 4\\n1 0 0 0\\n\",\n    \"2\\n6 6\\n6 6 5 6\\n1 3 1 2\\n1 0 1 0\\n\",\n    \"2\\n6 7\\n1 3 1 4\\n5 2 5 1\\n0 1 1 0\\n\",\n    \"1\\n7 1\\n6 1 7 1\\n0 0 0 0\\n\",\n    \"2\\n7 2\\n5 2 4 2\\n2 1 2 2\\n0 1 0 1\\n\",\n    \"2\\n7 3\\n7 2 6 2\\n1 2 2 2\\n0 1 0 0\\n\",\n    \"2\\n7 4\\n6 1 6 2\\n2 3 1 3\\n1 0 0 1\\n\",\n    \"2\\n7 5\\n2 3 1 3\\n4 3 3 3\\n1 0 0 0\\n\",\n    \"2\\n7 6\\n5 1 6 1\\n2 5 3 5\\n0 1 1 0\\n\",\n    \"2\\n7 7\\n2 3 2 4\\n5 4 5 5\\n0 1 0 1\\n\",\n    \"1\\n1 6\\n1 4 1 5\\n0 0 0 0\\n\",\n    \"1\\n1 7\\n1 1 1 2\\n0 0 0 0\\n\",\n    \"1\\n2 3\\n1 1 2 1\\n0 0 0 0\\n\",\n    \"3\\n2 4\\n1 3 1 4\\n2 4 2 3\\n2 2 1 2\\n0 0 0 2\\n\",\n    \"3\\n2 5\\n2 5 1 5\\n2 3 2 2\\n1 1 2 1\\n0 0 1 1\\n\",\n    \"1\\n2 6\\n1 3 1 2\\n0 0 0 0\\n\",\n    \"3\\n2 7\\n2 6 2 7\\n1 4 1 5\\n2 2 2 3\\n1 0 0 2\\n\",\n    \"1\\n3 2\\n3 2 2 2\\n0 0 0 0\\n\",\n    \"1\\n3 3\\n2 3 3 3\\n0 0 0 0\\n\",\n    \"2\\n3 4\\n3 1 3 2\\n3 4 2 4\\n0 1 1 0\\n\",\n    \"3\\n3 5\\n3 4 3 5\\n3 2 3 1\\n1 3 2 3\\n1 0 0 2\\n\",\n    \"2\\n3 6\\n1 1 2 1\\n1 3 2 3\\n0 0 1 0\\n\",\n    \"1\\n3 7\\n2 1 3 1\\n0 0 0 0\\n\",\n    \"3\\n4 2\\n1 2 2 2\\n3 1 4 1\\n3 2 4 2\\n0 2 1 0\\n\",\n    \"2\\n4 3\\n4 3 3 3\\n2 2 2 1\\n1 0 1 0\\n\",\n    \"3\\n4 4\\n2 3 2 4\\n4 4 4 3\\n2 2 1 2\\n0 2 0 2\\n\",\n    \"3\\n4 5\\n2 4 1 4\\n1 3 1 2\\n2 1 1 1\\n2 1 2 0\\n\",\n    \"2\\n4 6\\n3 3 4 3\\n4 6 3 6\\n0 0 1 0\\n\",\n    \"3\\n4 7\\n2 7 3 7\\n4 4 4 5\\n3 4 3 3\\n2 0 0 1\\n\",\n    \"1\\n5 2\\n1 1 1 2\\n0 0 0 0\\n\",\n    \"3\\n5 3\\n1 2 1 3\\n5 2 5 3\\n1 1 2 1\\n1 1 0 2\\n\",\n    \"3\\n5 4\\n4 1 4 2\\n1 1 1 2\\n5 1 5 2\\n0 2 2 2\\n\",\n    \"2\\n5 5\\n3 3 4 3\\n5 2 4 2\\n0 0 0 1\\n\",\n    \"3\\n5 6\\n5 2 4 2\\n1 1 1 2\\n5 1 4 1\\n2 1 2 0\\n\",\n    \"3\\n5 7\\n5 4 4 4\\n1 2 1 1\\n2 5 2 4\\n0 2 0 2\\n\",\n    \"2\\n6 1\\n3 1 2 1\\n4 1 5 1\\n1 0 0 0\\n\",\n    \"3\\n6 2\\n5 2 5 1\\n6 1 6 2\\n3 2 2 2\\n2 0 0 0\\n\",\n    \"3\\n6 3\\n2 1 2 2\\n6 2 6 1\\n1 2 1 1\\n1 1 0 0\\n\",\n    \"3\\n6 4\\n1 2 2 2\\n3 1 3 2\\n2 3 2 4\\n0 2 0 1\\n\",\n    \"3\\n6 5\\n2 2 2 1\\n5 4 6 4\\n4 4 4 3\\n2 0 1 0\\n\",\n    \"3\\n6 6\\n4 4 4 5\\n2 3 1 3\\n3 4 3 3\\n0 2 0 1\\n\",\n    \"3\\n6 7\\n3 4 3 5\\n5 4 6 4\\n4 5 4 4\\n1 1 1 0\\n\",\n    \"3\\n7 1\\n4 1 5 1\\n3 1 2 1\\n6 1 7 1\\n2 0 0 0\\n\",\n    \"3\\n7 2\\n7 1 7 2\\n5 1 4 1\\n3 1 3 2\\n0 2 2 1\\n\",\n    \"3\\n7 3\\n2 3 3 3\\n5 1 6 1\\n7 2 7 1\\n0 2 2 0\\n\",\n    \"3\\n7 4\\n5 4 6 4\\n6 1 6 2\\n5 1 4 1\\n0 2 0 1\\n\",\n    \"3\\n7 5\\n2 2 2 3\\n7 1 7 2\\n1 4 1 3\\n2 0 0 2\\n\",\n    \"3\\n7 6\\n2 6 2 5\\n2 2 1 2\\n4 4 3 4\\n0 1 0 2\\n\",\n    \"1\\n7 7\\n5 4 6 4\\n0 0 0 0\\n\",\n    \"1\\n2 4\\n1 1 1 2\\n0 0 0 0\\n\",\n    \"3\\n2 5\\n2 4 2 5\\n2 1 1 1\\n2 2 1 2\\n0 1 1 1\\n\",\n    \"3\\n2 6\\n1 3 1 2\\n2 2 2 1\\n2 5 2 6\\n1 0 0 1\\n\",\n    \"1\\n2 7\\n2 1 1 1\\n0 0 0 0\\n\",\n    \"4\\n3 3\\n3 1 2 1\\n3 3 2 3\\n1 3 1 2\\n3 2 2 2\\n0 3 2 1\\n\",\n    \"4\\n3 4\\n2 4 3 4\\n3 3 3 2\\n1 2 2 2\\n3 1 2 1\\n0 3 1 1\\n\",\n    \"4\\n3 5\\n2 3 1 3\\n1 5 1 4\\n2 5 2 4\\n2 2 1 2\\n1 0 3 1\\n\",\n    \"2\\n3 6\\n1 5 1 6\\n3 5 3 4\\n1 0 0 1\\n\",\n    \"4\\n3 7\\n1 2 1 1\\n3 3 3 4\\n2 1 3 1\\n2 6 3 6\\n1 1 3 0\\n\",\n    \"3\\n4 2\\n2 2 3 2\\n1 1 1 2\\n4 2 4 1\\n2 0 0 0\\n\",\n    \"2\\n4 3\\n1 2 1 1\\n3 1 3 2\\n0 1 0 0\\n\",\n    \"2\\n4 4\\n3 1 4 1\\n3 4 4 4\\n0 0 1 0\\n\",\n    \"2\\n4 5\\n3 1 3 2\\n2 1 2 2\\n1 0 0 0\\n\",\n    \"4\\n4 6\\n1 5 2 5\\n3 4 3 5\\n1 1 1 2\\n4 1 4 2\\n2 1 2 0\\n\",\n    \"3\\n4 7\\n4 2 4 3\\n1 4 1 3\\n1 2 1 1\\n0 1 0 2\\n\",\n    \"3\\n5 2\\n1 1 2 1\\n3 1 4 1\\n3 2 2 2\\n1 1 2 0\\n\",\n    \"1\\n5 3\\n2 1 1 1\\n0 0 0 0\\n\",\n    \"2\\n5 4\\n1 2 1 3\\n5 4 5 3\\n1 0 0 0\\n\",\n    \"4\\n5 5\\n5 1 4 1\\n3 3 3 4\\n1 3 2 3\\n2 1 2 2\\n0 2 0 2\\n\",\n    \"3\\n5 6\\n4 6 4 5\\n1 5 1 6\\n5 5 5 4\\n0 2 1 0\\n\",\n    \"3\\n5 7\\n1 5 1 4\\n2 5 3 5\\n4 4 3 4\\n2 0 0 1\\n\",\n    \"2\\n6 2\\n1 1 2 1\\n6 1 5 1\\n0 1 0 0\\n\",\n    \"2\\n6 3\\n3 3 4 3\\n5 3 6 3\\n1 0 0 0\\n\",\n    \"4\\n6 4\\n3 2 3 1\\n4 1 5 1\\n6 1 6 2\\n2 2 1 2\\n2 1 0 3\\n\",\n    \"3\\n6 5\\n5 4 5 3\\n1 3 1 2\\n2 1 1 1\\n1 1 0 2\\n\",\n    \"3\\n6 6\\n1 2 2 2\\n1 5 1 6\\n6 6 6 5\\n0 1 1 0\\n\",\n    \"4\\n6 7\\n5 4 5 5\\n4 4 3 4\\n2 1 1 1\\n6 3 6 2\\n1 2 2 0\\n\",\n    \"3\\n7 2\\n5 1 6 1\\n2 2 3 2\\n2 1 1 1\\n2 0 0 1\\n\",\n    \"4\\n7 3\\n6 1 7 1\\n3 1 4 1\\n6 2 5 2\\n2 1 1 1\\n2 1 3 0\\n\",\n    \"4\\n7 4\\n4 2 3 2\\n5 2 5 3\\n3 4 2 4\\n6 2 6 1\\n3 0 0 3\\n\",\n    \"1\\n7 5\\n6 5 7 5\\n0 0 0 0\\n\",\n    \"3\\n7 6\\n2 6 1 6\\n2 4 2 5\\n3 2 2 2\\n1 0 0 2\\n\",\n    \"4\\n7 7\\n4 6 5 6\\n7 4 7 5\\n7 1 7 2\\n2 6 2 5\\n1 2 2 0\\n\",\n    \"4\\n2 5\\n1 3 2 3\\n1 5 1 4\\n1 2 2 2\\n1 1 2 1\\n0 0 3 0\\n\",\n    \"2\\n2 6\\n2 1 2 2\\n1 2 1 1\\n1 0 0 0\\n\",\n    \"4\\n2 7\\n1 2 2 2\\n2 6 2 5\\n2 3 1 3\\n1 5 1 4\\n0 3 2 1\\n\",\n    \"3\\n3 4\\n2 2 3 2\\n1 2 1 3\\n3 1 2 1\\n1 0 0 2\\n\",\n    \"4\\n3 5\\n3 1 3 2\\n2 3 2 2\\n2 5 1 5\\n3 4 3 3\\n2 0 2 1\\n\",\n    \"4\\n3 6\\n3 1 2 1\\n1 2 2 2\\n2 3 3 3\\n1 5 1 4\\n0 2 3 0\\n\",\n    \"3\\n3 7\\n3 2 2 2\\n3 5 2 5\\n3 7 2 7\\n0 0 1 1\\n\",\n    \"4\\n4 3\\n3 2 3 3\\n4 2 4 1\\n1 2 1 3\\n3 1 2 1\\n0 3 1 0\\n\",\n    \"4\\n4 4\\n2 4 1 4\\n1 2 1 3\\n4 3 4 4\\n3 3 3 2\\n0 2 0 2\\n\",\n    \"3\\n4 5\\n4 5 3 5\\n4 2 3 2\\n2 1 3 1\\n0 1 0 2\\n\",\n    \"5\\n4 6\\n4 3 3 3\\n4 2 4 1\\n3 6 2 6\\n2 4 2 3\\n1 1 1 2\\n1 2 2 1\\n\",\n    \"2\\n4 7\\n2 6 2 7\\n2 5 2 4\\n0 0 1 0\\n\",\n    \"1\\n5 2\\n2 2 2 1\\n0 0 0 0\\n\",\n    \"1\\n5 3\\n4 2 3 2\\n0 0 0 0\\n\",\n    \"2\\n5 4\\n3 1 2 1\\n3 4 3 3\\n0 0 1 0\\n\",\n    \"1\\n5 5\\n3 4 2 4\\n0 0 0 0\\n\",\n    \"4\\n5 6\\n5 3 5 2\\n4 5 3 5\\n1 2 1 3\\n1 1 2 1\\n3 0 1 1\\n\",\n    \"5\\n5 7\\n5 5 5 6\\n2 4 2 5\\n2 3 1 3\\n4 7 3 7\\n4 1 5 1\\n0 3 2 2\\n\",\n    \"2\\n6 2\\n5 2 5 1\\n4 2 4 1\\n1 0 1 1\\n\",\n    \"3\\n6 3\\n2 2 2 3\\n3 3 4 3\\n4 2 4 1\\n1 1 1 0\\n\",\n    \"4\\n6 4\\n2 3 1 3\\n4 4 3 4\\n5 4 6 4\\n1 4 2 4\\n0 2 1 0\\n\",\n    \"5\\n6 5\\n1 5 1 4\\n4 2 4 3\\n2 2 1 2\\n2 3 1 3\\n3 2 3 3\\n0 2 0 3\\n\",\n    \"4\\n6 6\\n4 3 4 2\\n2 3 2 4\\n4 4 5 4\\n5 2 5 3\\n0 3 2 0\\n\",\n    \"5\\n6 7\\n1 6 1 5\\n3 6 2 6\\n5 1 4 1\\n2 5 3 5\\n5 3 5 2\\n3 0 0 4\\n\",\n    \"2\\n7 2\\n3 1 4 1\\n7 1 7 2\\n0 1 0 1\\n\",\n    \"2\\n7 3\\n6 3 7 3\\n4 1 3 1\\n0 1 0 1\\n\",\n    \"5\\n7 4\\n3 1 2 1\\n5 2 5 1\\n4 2 3 2\\n7 3 6 3\\n4 3 5 3\\n1 2 2 2\\n\",\n    \"5\\n7 5\\n5 3 5 2\\n3 5 2 5\\n1 3 1 4\\n3 3 3 4\\n4 1 3 1\\n1 2 4 0\\n\",\n    \"5\\n7 6\\n5 5 5 4\\n6 1 7 1\\n5 2 5 1\\n1 1 2 1\\n4 6 3 6\\n1 3 4 0\\n\",\n    \"3\\n7 7\\n2 6 1 6\\n7 2 6 2\\n3 1 3 2\\n2 0 1 1\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"4\\n\",\n    \"-1\\n\",\n    \"4\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"5\\n\",\n    \"2\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/818/C",
  "starter_code": ""
}