{
  "task_id": "APPS/203",
  "problem_id": 203,
  "prompt": "There are n employees in Alternative Cake Manufacturing (ACM). They are now voting on some very important question and the leading world media are trying to predict the outcome of the vote.\n\nEach of the employees belongs to one of two fractions: depublicans or remocrats, and these two fractions have opposite opinions on what should be the outcome of the vote. The voting procedure is rather complicated:   Each of n employees makes a statement. They make statements one by one starting from employees 1 and finishing with employee n. If at the moment when it's time for the i-th employee to make a statement he no longer has the right to vote, he just skips his turn (and no longer takes part in this voting).  When employee makes a statement, he can do nothing or declare that one of the other employees no longer has a right to vote. It's allowed to deny from voting people who already made the statement or people who are only waiting to do so. If someone is denied from voting he no longer participates in the voting till the very end.  When all employees are done with their statements, the procedure repeats: again, each employees starting from 1 and finishing with n who are still eligible to vote make their statements.  The process repeats until there is only one employee eligible to vote remaining and he determines the outcome of the whole voting. Of course, he votes for the decision suitable for his fraction. \n\nYou know the order employees are going to vote and that they behave optimal (and they also know the order and who belongs to which fraction). Predict the outcome of the vote.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of employees. \n\nThe next line contains n characters. The i-th character is 'D' if the i-th employee is from depublicans fraction or 'R' if he is from remocrats.\n\n\n-----Output-----\n\nPrint 'D' if the outcome of the vote will be suitable for depublicans and 'R' if remocrats will win.\n\n\n-----Examples-----\nInput\n5\nDDRRR\n\nOutput\nD\n\nInput\n6\nDDRRRR\n\nOutput\nR\n\n\n\n-----Note-----\n\nConsider one of the voting scenarios for the first sample:   Employee 1 denies employee 5 to vote.  Employee 2 denies employee 3 to vote.  Employee 3 has no right to vote and skips his turn (he was denied by employee 2).  Employee 4 denies employee 2 to vote.  Employee 5 has no right to vote and skips his turn (he was denied by employee 1).  Employee 1 denies employee 4.  Only employee 1 now has the right to vote so the voting ends with the victory of depublicans.",
  "solutions": "[\"n = int(input())\\ns = input()\\ncountr = s.count('R')\\ncountd = n - countr\\ncr = 0\\ncd = 0\\ni = 0\\nnews = []\\nwhile countr != 0 and countd != 0:\\n    if s[i] == 'D':\\n        if cd == 0:\\n            cr += 1\\n            countr -= 1\\n            news.append('D')\\n        else:\\n            cd -= 1\\n    else:\\n        if cr == 0:\\n            cd += 1\\n            countd -= 1\\n            news.append('R')\\n        else:\\n            cr -= 1\\n    i += 1\\n    if i >= n:\\n        s = list(news)\\n        news = []\\n        n = len(s)\\n        i = 0\\n        \\nif countr > 0:\\n    print('R')\\nelse:\\n    print('D')\", \"n = int(input())\\na = []\\nfor i in input():\\n    a.append(i)\\nr, d = 0, 0\\nwas_r, was_d = True, True\\nwhile True:\\n    if was_r and was_d:\\n        was_r, was_d = False, False\\n    else:\\n        break\\n    for i in range(len(a)):\\n        if a[i] == \\\"R\\\":\\n            was_r = True\\n            if r != 0:\\n                r -= 1\\n                a[i] = 0\\n            else:\\n                d += 1\\n        elif a[i] == \\\"D\\\":\\n            was_d = True\\n            if d != 0:\\n                d -= 1\\n                a[i] = 0\\n            else:\\n                r += 1\\nif was_r:\\n    print(\\\"R\\\")\\nelse:\\n    print(\\\"D\\\")\\n\", \"def get_opposite_vote(vote):\\n    return 'R' if vote == 'D' else 'D'\\n\\n\\ndef codeforces(votes):\\n    # rs = votes.count('R')\\n    # ds = votes.count('D')\\n    blocked = {'R': 0, 'D': 0}\\n\\n    while True:\\n        new_votes = ''\\n        for vote in votes:\\n            if blocked[vote] > 0:\\n                blocked[vote] -= 1\\n            else:\\n                blocked[get_opposite_vote(vote)] += 1\\n                new_votes += vote\\n        votes = new_votes\\n\\n        if votes.count('R') == 0 or votes.count('D') == 0:\\n            break\\n\\n    return votes[0]\\n\\n\\n_ = input()\\nvotes = input()\\nprint(codeforces(votes))\\n\", \"# Author: Maharshi Gor\\nfrom collections import deque\\ndef read(t:type=int):\\n    return t(input())\\n\\n\\ndef read_arr(t=int):\\n    return [t(i) for i in str(input()).split()]\\n\\nD = deque()\\nR = deque()\\n\\nk = read()\\nS = input()\\n\\nn = len(S)\\n\\nfor i in range(len(S)):\\n    if S[i] == 'R':\\n        R.append(i)\\n    else:\\n        D.append(i)\\n\\nwhile R and D:\\n    r = R.popleft()\\n    d = D.popleft()\\n    if r < d:\\n        R.append(r+n)\\n    else:\\n        D.append(d+n)\\n\\nif R:\\n    print('R')\\nelse:\\n    print('D')\\n\", \"n = int(input())\\ns = input()\\n\\ndd = 0\\ndr = 0\\nwhile len(s) > 1:\\n    t = ''\\n    cd = 0\\n    cr = 0\\n    for c in s:\\n        if c == 'D':\\n            if dd > 0:\\n                dd -= 1\\n            else:\\n                dr += 1\\n                t += c\\n                cd += 1\\n        else:\\n            if dr > 0:\\n                dr -= 1\\n            else:\\n                dd += 1\\n                t += c\\n                cr += 1\\n    s = t\\n    if cd == 0:\\n        s = 'R'\\n        break\\n    if cr == 0:\\n        s = 'D'\\n        break\\n    if dd >= cd:\\n        s = 'R'\\n        break\\n    if dr >= cr:\\n        s = 'D'\\n        break\\n    \\nprint(s[0])\", \"n=int(input())\\nraby=[x for x in input()]\\nnumD=0\\nnumR=0\\nflag=True\\nwhile flag: \\n    cR=0\\n    cD=0\\n    for ind in range(len(raby)):\\n        if raby[ind]=='D':\\n            cD+=1\\n            if numR==0:\\n                numD+=1\\n            else:\\n                raby[ind]='N'\\n                numR-=1\\n        if raby[ind]=='R':\\n            cR+=1\\n            if numD==0:\\n                numR+=1\\n            else:\\n                raby[ind]='N'\\n                numD-=1\\n    if cD==0 or cR==0:\\n            flag=False\\nif numD==0:\\n    print('R')\\nelse:\\n    print('D')\", \"n = int(input())\\ns = list(input())\\ncurr_d = 0\\ncurr_r = 0\\nost_d = s.count(\\\"D\\\")\\nost_r = s.count(\\\"R\\\")\\nwhile True:\\n    for i in range(len(s)):\\n        if s[i] == \\\"D\\\":\\n            if curr_d > 0:\\n                s[i] = \\\"N\\\"\\n                ost_d -=1\\n                curr_d -= 1\\n            else:\\n                curr_r += 1\\n        if s[i] == \\\"R\\\":\\n            if curr_r > 0:\\n                s[i] = \\\"N\\\"\\n                ost_r -= 1\\n                curr_r -= 1\\n            else:\\n                curr_d += 1\\n    if ost_d == 0 or ost_r == 0:\\n        break\\nif ost_d == 0:\\n    print(\\\"R\\\")\\nelse:\\n    print(\\\"D\\\")\", \"input()\\ns = list(input())\\nr, d = map(s.count, ('R', 'D'))\\nrf, df = 0, 0\\n\\nwhile r > 0 and d > 0:\\n    for i, v in enumerate(s):\\n        if v == 'D':\\n            if rf:\\n                rf -= 1\\n                d -= 1\\n                s[i] = ' '\\n            else:\\n                df += 1\\n        elif v == 'R':\\n            if df:\\n                df -= 1\\n                r -= 1\\n                s[i] = ' '\\n            else:\\n                rf += 1\\n\\nprint('D' if d else 'R')\", \"n=int(input())\\ns=input()\\ndd,dr=0,0\\ndr = 0\\nwhile len(s) > 1:\\n    cd,cr,t=0,0,''\\n    for c in s:\\n        if c == 'D':\\n            if dd > 0:\\n                dd -= 1\\n            else:\\n                dr += 1\\n                t += c\\n                cd += 1\\n        else:\\n            if dr > 0:\\n                dr-=1\\n            else:\\n                dd+=1\\n                t+=c\\n                cr+=1\\n    s=t\\n    if cd == 0:\\n        s='R'\\n        break\\n    if cr==0:\\n        s='D'\\n        break\\n    if dd>=cd:\\n        s='R'\\n        break\\n    if dr>=cr:\\n        s='D'\\n        break\\nprint(s[0])\", \"input()\\na = list(input()) + ['']\\ncnt = 0\\n\\nwhile len(set(a)) == 3:\\n    for i, v in enumerate(a):\\n        if v == 'D':\\n            if cnt < 0:\\n                a[i] = ''\\n            cnt += 1\\n        if v == 'R':\\n            if cnt > 0:\\n                a[i] = ''\\n            cnt -= 1\\n\\nfor ss in set(a):\\n    if ss:\\n        print(ss)\\n\\n\", \"from collections import deque\\n\\nn = int(input())\\ns = input()\\nR, D = deque(), deque()\\n\\nfor num in range(n):\\n    if s[num] == 'D':\\n        D.append(num)\\n    else:\\n        R.append(num)\\n\\nwhile D and R:\\n    d = D.popleft()\\n    r = R.popleft()\\n    if d < r:\\n        D.append(d+n)\\n    else:\\n        R.append(r+n)\\n\\nif D:\\n    print('D')\\nelse:\\n    print('R')\\n\", \"from collections import deque\\n\\nn = int(input())\\ns = input()\\n\\nd = deque()\\nr = deque()\\n\\nfor i, c in enumerate(s):\\n    if c == 'D':\\n        d.append(i)\\n    else:\\n        r.append(i)\\n\\nwhile len(d) > 0 and len(r) > 0:\\n    if d[0] < r[0]:\\n        d.append(d.popleft() + n)\\n        r.popleft()\\n    else:\\n        d.popleft()\\n        r.append(r.popleft() + n)\\n\\nprint('D' if len(d) > 0 else 'R')\\n    \\n\", \"from collections import deque\\nn, s, D, R = int(input()), input(), deque(), deque()\\nfor i in range(n):\\n    if s[i] == \\\"D\\\":\\n        D.append(i)\\n    else:\\n        R.append(i)\\nwhile len(D) and len(R):\\n    if D[0] < R[0]:\\n        D.append(D.popleft() + n)\\n        R.popleft()\\n    else:\\n        R.append(R.popleft() + n)\\n        D.popleft()\\nif len(D):\\n    print(\\\"D\\\")\\nelse:\\n    print(\\\"R\\\")\", \"from collections import deque\\n\\nn = int(input())\\na = [x for x in input()]\\n\\nr1, r2 = int(0), int(0)\\n\\nfor x in a:\\n\\tif x == 'R':\\n\\t\\tr1 += 1\\n\\telse:\\n\\t\\tr2 += 1\\n\\nq = deque(a)\\n\\nc1, c2 = int(0), int(0)\\n\\nwhile True:\\n\\tnow = q.popleft()\\n\\tif not r1 or not r2:\\n\\t\\tprint(now)\\n\\t\\tbreak\\n\\tif now == 'R':\\n\\t\\tif c2:\\n\\t\\t\\tc2 -= 1\\n\\t\\t\\tr1 -= 1\\n\\t\\telse:\\n\\t\\t\\tc1 += 1\\n\\t\\t\\tq.append(now)\\n\\telse:\\n\\t\\tif c1:\\n\\t\\t\\tc1 -= 1\\n\\t\\t\\tr2 -= 1\\n\\t\\telse:\\n\\t\\t\\tc2 += 1\\n\\t\\t\\tq.append(now)\\n\", \"from collections import deque  \\n\\nn = int(input())\\nline = list(input())\\n\\nD = deque()\\nR = deque()\\n\\nfor i in range(n):\\n    if line[i] == 'D':\\n        D.append(i)\\n    else:\\n        R.append(i)\\n\\n\\nwhile D and R:\\n    d = D.popleft()\\n    r = R.popleft()\\n    if d < r:\\n        D.append(d + n)\\n    else:\\n        R.append(r + n)\\n\\nif D:\\n    print('D')\\nelse:\\n    print('R')\", \"s = input()\\na = list(input())\\na.append('')\\ncnt = 0\\n\\nwhile len(set(a)) == 3:\\n    for i in range(len(a)):\\n    \\n        if a[i] == 'D':\\n            if cnt < 0:\\n                a[i] = ''\\n            cnt+=1\\n        if a[i] == 'R':\\n            if cnt > 0:\\n                a[i] = ''\\n            cnt-=1\\n\\nfor ss in set(a):\\n    if ss:\\n        print(ss)\\n\", \"from collections import deque\\nn = int(input())\\ns = input()\\nd = deque()\\nr = deque()\\nfor i in range(n):\\n    if s[i] == 'D':\\n        d.append(i)\\n    else:\\n        r.append(i)\\nwhile True:\\n    # print('D',d)\\n    # print('R',r)\\n    \\n    if not d:\\n        print('R')\\n        break\\n    if not r:\\n        print('D')\\n        break    \\n    if d[0] < r[0]:\\n        r.popleft()\\n        d.append(d.popleft()+n)\\n    else:\\n        d.popleft()\\n        r.append(r.popleft()+n)\", \"from collections import deque\\nD = deque()\\nR = deque()\\nn = int(input())\\npeople = input()\\nfor i in range(len(people)):\\n    if people[i] == \\\"D\\\":\\n        D.append(i)\\n    else:\\n        R.append(i)\\nwhile D and R:\\n    topr, topd = R.popleft(), D.popleft()\\n    if topr < topd:\\n        R.append(topr + n)\\n    else:\\n        D.append(topd + n)\\nif R:\\n    print(\\\"R\\\")\\nelse:\\n    print(\\\"D\\\")\\n\", \"from collections import deque\\n\\nq = deque()\\nn = int(input())\\ns = input()\\nfor let in s:\\n    q.append(let)\\n    \\nb = 0\\nwhile len(q) > 1 and abs(b) < 400000:\\n    #print(b)\\n    c = q.popleft()\\n    if c == 'D':\\n        if b >= 0:\\n            q.append(c)\\n        b += 1\\n    if c == 'R':\\n        if b <= 0:\\n            q.append(c)\\n        b -= 1\\n\\nprint(q.pop())\", \"s = input()\\na = list(input())\\na.append('')\\ncnt = 0\\n\\nwhile len(set(a)) == 3:\\n    for i in range(len(a)):\\n    \\n        if a[i] == 'D':\\n            if cnt < 0:\\n                a[i] = ''\\n            cnt+=1\\n        if a[i] == 'R':\\n            if cnt > 0:\\n                a[i] = ''\\n            cnt-=1\\n\\nfor ss in set(a):\\n    if ss:\\n        print(ss)\", \"#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n#\\nclass lq(list):\\n\\tdef __init__(self):\\n\\t\\tself.value=[]\\n\\t\\tself.lenght=0\\n\\t\\tself.startPos=0\\n\\t\\tself.maxLen = 50000\\n\\tdef append(self, item):\\n\\t\\tself.value.append(item)\\n\\t\\tself.lenght+=1\\n\\tdef pop(self):\\n\\t\\tif self.startPos < self.maxLen:\\n\\t\\t\\trv= self.value[self.startPos]\\n\\t\\t\\tself.lenght-=1\\n\\t\\t\\tself.startPos+=1\\n\\t\\t\\treturn rv\\n\\t\\telse:\\n\\t\\t\\trv= self.value[self.startPos]\\n\\t\\t\\tself.lenght-=1\\n\\t\\t\\tself.value[0:(self.startPos+1)]=[]\\n\\t\\t\\tself.startPos=0\\n\\t\\t\\treturn rv\\n\\nn = int(input())\\ns = input()\\n\\nqforD = lq()\\nqforR = lq()\\nfor i in range(n):\\n\\tif s[i] == 'D':\\n\\t\\tqforD.append(i)\\n\\telse:\\n\\t\\tqforR.append(i)\\ncnt = n\\nwhile qforD.lenght>0 and qforR.lenght>0:\\n\\tdNum=qforD.pop()\\n\\trNum=qforR.pop()\\n\\tif dNum < rNum:\\n\\t\\tqforD.append(cnt)\\n\\telse:\\n\\t\\tqforR.append(cnt)\\n\\tcnt+=1\\nif qforD.lenght == 0:\\n\\tprint('R')\\nelse:\\n\\tprint('D')\\n\\n\\t\\n\", \"#\\n# Created by Daniil Kozhanov. All rights reserved.\\n#               december 2016\\n\\nn = int(input())\\ns = input()\\nu = [1] * n\\nu1 = 0\\nu2 = 0\\nc1 = s.count(\\\"D\\\")\\nc2 = s.count(\\\"R\\\")\\n\\nwhile c1 != 0 and c2 !=0:\\n    for i in range(n):\\n        if s[i] == \\\"D\\\":\\n            if u[i] == 1:\\n                if u1 > 0:\\n                    u1 -= 1\\n                    u[i] -= 1\\n                    c1 -= 1\\n                else:\\n                    u2 += 1\\n        else:\\n            if u[i] == 1:\\n                if u2 > 0:\\n                    u2 -= 1\\n                    u[i] -= 1\\n                    c2 -= 1\\n                else:\\n                    u1 += 1\\n\\nif c2 == 0:\\n    print(\\\"D\\\")\\nelse:\\n    print(\\\"R\\\")\", \"\\nimport collections\\nn = int(input())\\ns = input()\\nR, D = collections.deque(), collections.deque()\\n\\nfor i in range(n):\\n    if s[i] == 'R': R.append(i)\\n    else: D.append(i)\\n\\n\\n#print(R)\\n#print(D)\\n    \\nwhile R and D:\\n    r = R.popleft()\\n    d = D.popleft()\\n    #print(str(r) + \\\" is R and D \\\" + str(d))\\n    if r < d:\\n        R.append(n + r)\\n    else:\\n        D.append(n + d)\\n\\nif D:\\n    print('D')\\nelse:\\n    print('R')\", \"a = int(input())\\ns = input()\\nb = []\\nfor c in s:\\n    if c == 'D':\\n        b.append(1)\\n    else:\\n        b.append(0)\\ncnt = [0] * 2\\nwhile True:\\n    c = []\\n    for x in b:\\n        if cnt[x] > 0:\\n            cnt[x] -= 1;\\n        else:\\n            c.append(x);\\n            cnt[1 - x] += 1;\\n    if c == b:\\n        break\\n    b = c\\nif b[0] == 0:\\n    print('R')\\nelse:\\n    print('D')\\n\", \"n = input()\\na = input()\\ncnt = 0\\nwhile len(set(a)) == 2:\\n    new_a = []\\n    for i in range(len(a)):\\n        if a[i] == 'D':\\n            if cnt >= 0:\\n                new_a.append(a[i])\\n            cnt += 1\\n        else:\\n            if cnt <= 0:\\n                new_a.append(a[i])\\n            cnt -= 1\\n    a = new_a\\nprint(a[0])\\n\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"5\\nDDRRR\\n\",\n    \"6\\nDDRRRR\\n\",\n    \"1\\nD\\n\",\n    \"1\\nR\\n\",\n    \"2\\nDR\\n\",\n    \"3\\nRDD\\n\",\n    \"3\\nDRD\\n\",\n    \"4\\nDRRD\\n\",\n    \"4\\nDRRR\\n\",\n    \"4\\nRDRD\\n\",\n    \"5\\nDRDRR\\n\",\n    \"4\\nRRRR\\n\",\n    \"5\\nRDDRD\\n\",\n    \"5\\nDDRRD\\n\",\n    \"5\\nDRRRD\\n\",\n    \"5\\nDDDDD\\n\",\n    \"6\\nDRRDDR\\n\",\n    \"7\\nRDRDRDD\\n\",\n    \"7\\nRDRDDRD\\n\",\n    \"7\\nRRRDDDD\\n\",\n    \"8\\nRRRDDDDD\\n\",\n    \"9\\nRRRDDDDDR\\n\",\n    \"9\\nRRDDDRRDD\\n\",\n    \"9\\nRRDDDRDRD\\n\",\n    \"10\\nDDRRRDRRDD\\n\",\n    \"11\\nDRDRRDDRDDR\\n\",\n    \"12\\nDRDRDRDRRDRD\\n\",\n    \"13\\nDRDDDDRRRRDDR\\n\",\n    \"14\\nDDRDRRDRDRDDDD\\n\",\n    \"15\\nDDRRRDDRDRRRDRD\\n\",\n    \"50\\nDDDRDRDDDDRRRRDDDDRRRDRRRDDDRRRRDRDDDRRDRRDDDRDDDD\\n\",\n    \"50\\nDRDDDDDDDRDRDDRRRDRDRDRDDDRRDRRDRDRRDDDRDDRDRDRDDR\\n\",\n    \"100\\nRDRRDRDDDDRDRRDDRDRRDDRRDDRRRDRRRDDDRDDRDDRRDRDRRRDRDRRRDRRDDDRDDRRRDRDRRRDDRDRDDDDDDDRDRRDDDDDDRRDD\\n\",\n    \"100\\nRRDRRDDDDDDDRDRRRDRDRDDDRDDDRDDRDRRDRRRDRRDRRRRRRRDRRRRRRDDDRRDDRRRDRRRDDRRDRRDDDDDRRDRDDRDDRRRDRRDD\\n\",\n    \"6\\nRDDRDR\\n\",\n    \"6\\nDRRDRD\\n\",\n    \"8\\nDDDRRRRR\\n\",\n    \"7\\nRRRDDDD\\n\",\n    \"7\\nRDDRRDD\\n\",\n    \"9\\nRDDDRRDRR\\n\",\n    \"5\\nRDRDD\\n\",\n    \"5\\nRRDDD\\n\",\n    \"8\\nRDDRDRRD\\n\",\n    \"10\\nDRRRDDRDRD\\n\",\n    \"7\\nDRRDDRR\\n\",\n    \"12\\nRDDDRRDRRDDR\\n\",\n    \"7\\nRDRDDDR\\n\",\n    \"7\\nDDRRRDR\\n\",\n    \"10\\nDRRDRDRDRD\\n\",\n    \"21\\nDDDDRRRRRDRDRDRDRDRDR\\n\",\n    \"11\\nRDDDDDRRRRR\\n\",\n    \"10\\nRDDDRRRDDR\\n\",\n    \"4\\nRDDR\\n\",\n    \"7\\nRDRDDRD\\n\",\n    \"8\\nRDDDRRRD\\n\",\n    \"16\\nDRRDRDRDRDDRDRDR\\n\",\n    \"8\\nDRRDRDRD\\n\",\n    \"6\\nRDDDRR\\n\",\n    \"10\\nDDRRRRRDDD\\n\",\n    \"7\\nDDRRRRD\\n\",\n    \"12\\nRDDRDRDRRDRD\\n\",\n    \"9\\nDDRRRDRDR\\n\",\n    \"20\\nRDDRDRDRDRRDRDRDRDDR\\n\",\n    \"7\\nRRDDDRD\\n\",\n    \"12\\nDRRRRRRDDDDD\\n\",\n    \"12\\nRDRDDRDRDRDR\\n\",\n    \"6\\nDDDDDD\\n\",\n    \"10\\nRRRDDRDDDD\\n\",\n    \"40\\nRDDDRDDDRDRRDRDRRRRRDRDRDRDRRDRDRDRRDDDD\\n\",\n    \"50\\nRRDDDRRDRRRDDRDDDDDRDDRRRRRRDRDDRDDDRDRRDDRDDDRDRD\\n\",\n    \"5\\nRDRDR\\n\",\n    \"9\\nDRRDRDDRR\\n\",\n    \"6\\nDRRRDD\\n\",\n    \"10\\nDDDDRRRRRR\\n\",\n    \"9\\nRRDDDDRRD\\n\"\n  ],\n  \"outputs\": [\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"R\\n\",\n    \"D\\n\",\n    \"D\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/749/C",
  "starter_code": ""
}