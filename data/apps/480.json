{
  "task_id": "APPS/480",
  "problem_id": 480,
  "prompt": "The tram in Berland goes along a straight line from the point 0 to the point s and back, passing 1 meter per t_1 seconds in both directions. It means that the tram is always in the state of uniform rectilinear motion, instantly turning around at points x = 0 and x = s.\n\nIgor is at the point x_1. He should reach the point x_2. Igor passes 1 meter per t_2 seconds. \n\nYour task is to determine the minimum time Igor needs to get from the point x_1 to the point x_2, if it is known where the tram is and in what direction it goes at the moment Igor comes to the point x_1.\n\nIgor can enter the tram unlimited number of times at any moment when his and the tram's positions coincide. It is not obligatory that points in which Igor enter and exit the tram are integers. Assume that any boarding and unboarding happens instantly. Igor can move arbitrary along the line (but not faster than 1 meter per t_2 seconds). He can also stand at some point for some time.\n\n\n-----Input-----\n\nThe first line contains three integers s, x_1 and x_2 (2 \u2264 s \u2264 1000, 0 \u2264 x_1, x_2 \u2264 s, x_1 \u2260 x_2)\u00a0\u2014 the maximum coordinate of the point to which the tram goes, the point Igor is at, and the point he should come to.\n\nThe second line contains two integers t_1 and t_2 (1 \u2264 t_1, t_2 \u2264 1000)\u00a0\u2014 the time in seconds in which the tram passes 1 meter and the time in seconds in which Igor passes 1 meter.\n\nThe third line contains two integers p and d (1 \u2264 p \u2264 s - 1, d is either 1 or $- 1$)\u00a0\u2014 the position of the tram in the moment Igor came to the point x_1 and the direction of the tram at this moment. If $d = - 1$, the tram goes in the direction from the point s to the point 0. If d = 1, the tram goes in the direction from the point 0 to the point s.\n\n\n-----Output-----\n\nPrint the minimum time in seconds which Igor needs to get from the point x_1 to the point x_2.\n\n\n-----Examples-----\nInput\n4 2 4\n3 4\n1 1\n\nOutput\n8\n\nInput\n5 4 0\n1 2\n3 1\n\nOutput\n7\n\n\n\n-----Note-----\n\nIn the first example it is profitable for Igor to go by foot and not to wait the tram. Thus, he has to pass 2 meters and it takes 8 seconds in total, because he passes 1 meter per 4 seconds. \n\nIn the second example Igor can, for example, go towards the point x_2 and get to the point 1 in 6 seconds (because he has to pass 3 meters, but he passes 1 meters per 2 seconds). At that moment the tram will be at the point 1, so Igor can enter the tram and pass 1 meter in 1 second. Thus, Igor will reach the point x_2 in 7 seconds in total.",
  "solutions": "[\"#!/usr/bin/env python3\\n\\ndef main():\\n    try:\\n        while True:\\n            s, x1, x2 = list(map(int, input().split()))\\n            t1, t2 = list(map(int, input().split()))\\n            p, d = list(map(int, input().split()))\\n\\n            def travel(src, trg):\\n                nonlocal d\\n                if src == trg:\\n                    return 0\\n                if src < trg:\\n                    if d > 0:\\n                        return trg - src\\n                    else:\\n                        d = 1\\n                        return trg + src\\n                else:\\n                    if d < 0:\\n                        return src - trg\\n                    else:\\n                        d = -1\\n                        return s - src + s - trg\\n\\n            a = travel(p, x1)\\n            b = travel(x1, x2)\\n            print(\\\"%d\\\" % min(abs(x1 - x2) * t2, (a + b) * t1))\\n\\n    except EOFError:\\n        pass\\n\\nmain()\\n\", \"s, x1, x2 = map(int, input().split())\\nt1, t2 = map(int, input().split())\\np, d = map(int, input().split())\\nans = abs(x1 - x2) * t2\\nif (x2 > x1):\\n    d *= -1\\n    p = s - p\\n    x1 = s - x1\\n    x2 = s - x2\\n    \\nif (d == -1):\\n    if (p < x1):\\n        ans = min(ans, (p + s + s - x2) * t1)\\n    else:\\n        ans = min(ans, (p - x2) * t1)\\nelse:\\n    ans = min(ans, (s - p + s - x2) * t1)\\n\\nprint(ans)\", \"s, start, finish = map(int, input().split())\\ntramsp, igorsp = map(int, input().split())\\np, d = map(int, input().split())\\n\\nif start == finish:\\n    print('0')\\nelse:\\n    if p <= start and d == 1:\\n        t = (start - p) * tramsp\\n        nd = d\\n    elif p >= start and d == -1:\\n        t = (p - start) * tramsp\\n        nd = d\\n    elif p > start and d == 1:\\n        t = (2 * (s - p) + (p - start)) * tramsp\\n        nd = -1\\n    else:\\n        t = (2 * p + (start - p)) * tramsp\\n        nd = 1\\n\\n    if start <= finish and nd == 1:\\n        t += (finish - start) * tramsp\\n    elif start >= finish and nd == -1:\\n        t += (start - finish) * tramsp\\n    elif start > finish and nd == 1:\\n        t += (2 * (s - start) + (start - finish)) * tramsp\\n    else:\\n        t += (2 * start + (finish - start)) * tramsp\\n\\n    i = abs(start - finish) * igorsp\\n\\n    print(min(t, i))\", \"s, x1, x2 = map(int, input().split())\\nt1, t2 = map(int, input().split())\\np, d = map(int, input().split())\\nans = abs(x1 - x2) * t2\\nif x1 == x2:\\n    print(0)\\nelif x1 < x2:\\n    if (d == 1 and p <= x1) or p == 0:\\n        ans = min(ans, abs(x2 - p) * t1)\\n    elif d == -1 or p == s:\\n        ans = min(ans, (p + x2) * t1)\\n    elif d == 1 and p > x1:\\n        ans = min(ans, (s - p + s + x2) * t1)\\nelse:\\n    if (d == -1 and p >= x1) or p == s:\\n        ans = min(ans, abs(p - x2) * t1)\\n    elif d == 1 or p == 0:\\n        ans = min(ans, (s - p + s - x2) * t1)\\n    elif d == -1 and p < x1:\\n        ans = min(ans, (p + s + s - x2) * t1)\\nprint(ans)\", \"from collections import defaultdict\\nimport sys, os, math\\n\\ndef __starting_point():\\n    #n, m = list(map(int, input().split()))\\n    s, x1, x2 = list(map(int, input().split()))\\n    t1, t2 = list(map(int, input().split()))\\n    p, d = list(map(int, input().split()))\\n    if t1 >= t2:\\n        print(abs(x2 - x1) * t2)\\n        return\\n    \\n    if x2 > x1:\\n        #+dir\\n        if d == 1:\\n            if p <= x1:\\n                t = t1 * (x2 - p)\\n            else:\\n                t = t1 * (s + s - p + x2)\\n        else:\\n            t = t1 * (p + x2)\\n    else:\\n        if d == -1:\\n            if p >= x1:\\n                t = t1 * (p - x2)\\n            else:\\n                t = t1 * (s + s - x2 + p)\\n        else:\\n            t = t1 * (s - p + s - x2)\\n    print(min(t, abs(x2 - x1) * t2))\\n__starting_point()\", \"s, x1, x2 = list(map(int, input().split()))\\nt1, t2 = list(map(int, input().split()))\\np, d = list(map(int, input().split()))\\nif x1 > x2:\\n    x1 = s - x1\\n    x2 = s - x2\\n    d *= -1\\n    p = s - p\\ndef dist(sx, fx, d, s):\\n    if d == -1:\\n        return sx + fx\\n    else:\\n        if fx >= sx:\\n            return fx - sx\\n        else:\\n            return 2 * s - abs(fx - sx)\\nif t1 > t2:\\n    print(t2 * (x2 - x1))\\nelse:\\n    print(min(dist(p, x1, d, s) * t1 + (x2 - x1) * t1, (x2 - x1) * t2))\\n\", \"from sys import stdin\\n\\ns,x1,x2=list(map(int,stdin.readline().split()))\\nt1,t2=list(map(int,stdin.readline().split()))\\np,d=list(map(int,stdin.readline().split()))\\n#d=v*t t=d/v\\nif x1>=x2:\\n    x2,x1=s-x2,s-x1\\n    p=s-p\\n    d*=-1\\ntempsPied=(x2-x1)*t2\\n\\nif d==-1:\\n    tempsTram=(p+x2)*t1\\nelif d==1 and p>x1:\\n    tempsTram=((s-p)+s+x2)*t1\\nelse:\\n    tempsTram=(x2-p)*t1\\nprint(min(tempsPied,tempsTram))\\n\", \"from math import *\\ns,x1,x2 =map(int,input().split())\\nt1,t2 = map(int,input().split())\\np,d=map(int,input().split())\\nans = abs(x1-x2)*t2\\nif t1 >= t2:\\n    print(ans)\\n\\nelif x1 <= x2:\\n    if d == 1:\\n        if p <= x1:\\n            print(min(ans,t1*(x2-p)))\\n        else:\\n            print(min(ans, t1*(s-p+s+x2)))\\n    else:\\n        print(min(ans, t1*(p+x2)))\\nelse:\\n    \\n    if d == 1:\\n        \\n        print(min(ans, t1*(s-p+(s-x2))))\\n        \\n    else:\\n        if p >= x1:\\n            print(min(ans, t1*(p-x2)))\\n        else:\\n            print(min(ans, t1*(s+p+(s-x2))))\", \"s, x1, x2 = list(map(int, input().split()))\\nt1, t2 = list(map(int, input().split()))\\np, d = list(map(int, input().split()))\\n\\nif x2 < x1:\\n    x1, x2 = s - x1, s - x2\\n    d *= -1\\n    p = s - p\\n\\n\\nif t2 <= t1:\\n    print(t2 * abs(x1 - x2))\\n    return\\n\\nif p <= x1 and d == 1:\\n    print(min(t2 * abs(x1 - x2), t1* abs(p - x2)))\\nelif d == 1:\\n    print(min(t2 * abs(x1 - x2), t1*s + t1*(s-p) + t1 * abs(x2)))\\nelse:\\n    print(min(t2 * abs(x1 - x2), t1*(p) + t1 * abs(x2)))\\n\", \"#!/usr/bin/env python3\\n\\ndef ri():\\n    return list(map(int, input().split()))\\n\\ns, x1, x2 = ri()\\nt1, t2 = ri()\\np, d = ri()\\n\\nif t1 >= t2:\\n    print(t2*abs(x2-x1))\\n    return\\n\\nm = abs(x2-x1)*t2\\nif d > 0:\\n    if p <= x1 and x1 <= x2:\\n        m = min(m, (x2-p)*t1)\\n    elif p <= x2 and x2 <= x1:\\n        m = min(m, (s-p+s-x2)*t1)\\n    elif x1 <= p  and p <= x2:\\n        m = min(m, (s-p+s+x2)*t1)\\n    elif x1 <= x2 and x2 <= p:\\n        m = min(m, (s-p+s+x2)*t1)\\n    elif x2 <= x1 and x1 <= p:\\n        m = min(m, (s-p+s-x2)*t1)\\n    elif x2 <= p and p <= x1:\\n        m = min(m, (s-p+s-x2)*t1)\\nelse:\\n    if p <= x1 and x1 <= x2:\\n        m = min(m, (p+x2)*t1)\\n    elif p <= x2 and x2 <= x1:\\n        m = min(m, (p+s+s-x2)*t1)\\n    elif x1 <= p  and p <= x2:\\n        m = min(m, (p+x2)*t1)\\n    elif x1 <= x2 and x2 <= p:\\n        m = min(m, (p+x2)*t1)\\n    elif x2 <= x1 and x1 <= p:\\n        m = min(m, (p-x2)*t1)\\n    elif x2 <= p and p <= x1:\\n        m = min(m, (p+s+s-x2)*t1)\\n\\nprint(m)\\n\", \"s,x1,x2=[int(i) for i in input().split()]\\nt1,t2=[int(i) for i in input().split()]\\np,d=[int(i) for i in input().split()]\\nans=abs(x1-x2)*t2\\nif d==-1:\\n    x1,x2=s-x1,s-x2\\n    p=s-p\\nx1t=[(x1-p)*t1,(2*s-x1-p)*t1,(2*s+x1-p)*t1]\\nx2t=[(x2-p)*t1,(2*s-x2-p)*t1,(2*s+x2-p)*t1]\\nwhile x1t[0]<0:\\n    x1t.pop(0)\\nwhile x2t[0]<x1t[0]:\\n    x2t.pop(0)\\nans=min(ans,x2t[0])\\nprint(ans)\\n\", \"from fractions import Fraction\\n# from math import ceil\\n\\ns, x1, x2 = [int(v) for v in input().split()]\\nt1, t2 = [int(v) for v in input().split()]\\np, d = [int(v) for v in input().split()]\\n\\n# s, x1, x2 = 4,2,4\\n# t1, t2 = 3,4\\n# p, d = 1,1\\n\\n# s, x1, x2 = 5,4,0\\n# t1, t2 = 1,2\\n# p, d = 3,1\\n\\nif x1 > x2:\\n\\tx1, x2 = s - x1, s - x2\\n\\tp = s - p\\n\\td = -d\\n\\nif d == -1:\\n\\tp = -p\\n\\td = 1\\nelif d == 1 and p > x1:\\n\\tp = -((s - p) + s)\\n\\n\\nif t2 <= t1:\\n\\t# print('a')\\n\\tprint((x2 - x1) * t2)\\nelse:\\n\\t# tram=t1, igor=t2\\n\\t# t = (x1 - p) * (t1 * t2) / (t2 - t1)\\n\\tmeet = x1 + Fraction((x1 - p) * t1, t2 - t1)\\n\\tif x1 <= meet < x2:\\n\\t\\t# print('b')\\n\\t\\tprint((x1 - p) * t1 + (x2 - x1) * t1)\\n\\telse:\\n\\t\\t# print('c')\\n\\t\\tprint((x2 - x1) * t2)\", \"#/usr/bin/env python3\\n\\nimport sys\\n\\ndef tram(inp):\\n    inp = list(map(int, inp.split()))\\n    s = inp[0]\\n    x1 = inp[1]\\n    x2 = inp[2]\\n    t1 = inp[3]\\n    t2 = inp[4]\\n    p = inp[5]\\n    d = inp[6]\\n\\n    if d < 0:\\n        x1 = s-x1\\n        x2 = s-x2\\n        p = s - p\\n\\n    walktime = abs(x1-x2)*t2\\n\\n    if (x2 > x1):\\n        if (p > x1):\\n            tramtime = (s-p + s +x2) * t1\\n        else:\\n            tramtime = (x2 - p) *t1\\n    else: \\n        tramtime = ((s-p) + s -x2) * t1\\n\\n    return min(walktime, tramtime)\\n\\n\\n    \\n\\n\\n\\n\\n\\n\\n\\ndef __starting_point():\\n    inp = sys.stdin.read()\\n    inp = inp.strip()\\n    print(tram(inp))\\n\\n\\n__starting_point()\", \"import sys\\n\\ns, x1, x2 = list(map(int, sys.stdin.readline().split()))\\nt1, t2 = list(map(int, sys.stdin.readline().split()))\\np, d = list(map(int, sys.stdin.readline().split()))\\n\\nif x2 > x1:\\n    dp = 1\\nelse:\\n    dp = -1\\n\\nif dp == d:\\n    if d*p <= d*x1:\\n        dx2 = abs(x2 - p)\\n    else:\\n        if d == 1:\\n            dx2 = (s + (s-p) + x2)\\n        else:\\n            dx2 = (s + p + (s - x2))\\nelse:\\n    if d == 1:\\n        dx2 = (2*s -p - x2)\\n    else:\\n        dx2 = p + x2\\n\\ntt = dx2*t1\\ndx = abs(x1 - x2)\\ntp = t2 * dx\\n\\nres = min(tp, tt)\\nprint(res)\\n\\n\", \"s, x1, x2 = map(int, input().split())\\nt1, t2 = map(int, input().split())\\np, d = map(int, input().split())\\n\\nig = abs(x2 - x1) * t2\\n\\ntr = ig\\nif d < 0:\\n    if x2 < x1:\\n        if x1 <= p:\\n            tr = (p - x2) * t1\\n        else:\\n            tr = (p + s + (s - x2)) * t1\\n    else:\\n        tr = (p + x2) * t1\\nelse:\\n    if x1 < x2:\\n        if p <= x1:\\n            tr = (x2 - p) * t1\\n        else:\\n            tr = ((s - p) + s + x2) * t1\\n    else:\\n        tr = ((s - p) + (s - x2)) * t1\\n\\nans = min(ig, tr)\\n\\nprint(ans)\", \"s, x1, x2 = list(map(int, input().split()))\\n\\nt1, t2 = list(map(int, input().split()))\\n\\np, d = list(map(int, input().split()))\\n\\nif x2 < x1:\\n    x1 = (s - x1)\\n    x2 = (s - x2)\\n    p = (s - p)\\n    d = -d\\n\\nvt = 1.0 / t1\\nvi = 1.0 / t2\\nxt0 = 0.0\\n\\nif d == -1:\\n    xt0 = -p\\nelif p <= x1:\\n    xt0 = p\\nelse:\\n    xt0 = -(s - p) - s\\n\\ndef solve(vt, xt0, vi, x1, x2):\\n    t1 = (x1 - xt0) / (vt - vi)\\n    t2 = (x2 - vi*t1 - x1) / vt\\n    t3 = (x1 - xt0) / (vt + vi)\\n    t4 = (x2 + vi*t3 - x1) / vt\\n    return min((x2-x1) / vi, min(t1 + t2, t3 + t4))\\n\\nif t2 <= t1:\\n    print(\\\"%.0f\\\" % ((x2 - x1) / vi))\\nelse:\\n    print(\\\"%.0f\\\" % solve(vt, xt0, vi, x1, x2))\\n\", \"from sys import stdin, stdout\\n\\ns, x1, x2 = map(int, stdin.readline().split())\\nspt, spp = map(int, stdin.readline().split())\\np, label = map(int, stdin.readline().split())\\nvt = 1 / spt\\nvp = 1 / spp\\n\\nans = abs(x2 - x1) * spp\\n\\nif vt > vp:\\n    if label == 1:\\n        \\n        \\n        \\n        if x2 >= x1:\\n            if p <= x1:\\n                t = (x1 - p) / (vt - vp)\\n                ans = min(ans, t + max(x2 - (x1 + t * vp), 0) * spt)\\n            else:\\n                t = (s - p + s) / vt\\n                t += (x1 + t * vp) / (vt - vp)\\n                x1 += t * vp\\n                ans = min(ans, t + max(x2 - x1, 0) * spt)\\n        else:\\n            t = (s - p) / vt\\n            t += (s - (x1 - t * vp)) / (vt - vp)\\n            x1 -= t * vp\\n            ans = min(ans, t + max(x1 - x2, 0) * spt)\\n    else:\\n        \\n        if x2 <= x1:\\n            if p >= x1:\\n                t = (p - x1) / (vt - vp)\\n                ans = min(ans, t + max(x1 - t * vp - x2, 0) * spt)\\n            else:\\n                t = (p + s) * spt\\n                t += (s - (x1 - t * vp)) / (vt - vp)\\n                ans = min(ans, t + max(x1 - t * vp - x2, 0) * spt)\\n        else:\\n            t = p * spt\\n            t += (x1 + t * vp) / (vt - vp)\\n            x1 += t * vp\\n            ans = min(ans, t + max(x2 - x1, 0) * spt)\\n            \\n            \\nstdout.write(str(int(ans)))\", \"import sys\\nfrom decimal import *\\n\\ndef check(t, w, s, p1, d1, p2, d2):\\n    if t*w >= 2*s:\\n        return True \\n\\n\\n\\n\\ndef main():\\n\\n    s,a,b = list(map(int,sys.stdin.readline().split()))\\n    w,v = list(map(int,sys.stdin.readline().split()))\\n    p1,d = list(map(int,sys.stdin.readline().split()))\\n\\n    r = abs(a-b)*v\\n    if v<=w:\\n        print(r)\\n        return\\n\\n    if p1 <= a:\\n        t_=0\\n        if d==-1 and p1!=a:\\n            t_ = p1*w\\n            a = a - t_/v\\n            p1 = 0\\n            d=1\\n        t1 = (a-p1)*v*w/(v+w)\\n        x1 = a-t1/v\\n        t1+=t_ \\n    else:\\n        t_=0\\n        if d==1:\\n            t_ = (s-p1)*w\\n            a = a + t_/v\\n            p1 = s\\n            d=-1\\n        t1 = (p1-a)*v*w/(v+w)\\n        x1 = a+t1/v\\n        t1+=t_\\n    if d==1:\\n        if x1 <=b:\\n            t2 = (b-x1)*w\\n        else:\\n            t2 = (2*s-x1-b)*w\\n    else:\\n        if x1 >=b:\\n            t2 = (x1-b)*w\\n        else:\\n            t2 = (x1+b)*w\\n\\n    t3 = t1 + t2\\n    t3i = int(t3)\\n    if t3i < t3 - 0.000001:\\n        t3i+=1\\n\\n    print(min(r, t3i))\\n\\n\\n\\nmain()\\n\", \"s , x1 , x2 = list(map(int, input().split()))\\nt1, t2= list(map(int, input().split()))\\np, d= list(map(int, input().split()))\\nalt = abs(x1 - x2) * t2\\n\\n\\ncurpos = p\\ncurtime = 0\\ninbus = False\\nwhile not (curpos == x2 and inbus):\\n    if curpos == x1:\\n        inbus = True\\n    if curpos == s and d == 1:\\n        d = -1\\n    if curpos == 0 and d == -1:\\n        d = 1    \\n    if d == 1:\\n        curpos += 1\\n    else:\\n        curpos -= 1\\n    curtime += t1\\nprint(min(curtime,alt))\\n        \\n     \\n\\n        \\n\", \"s, x1, x2 = list(map(int, input().split()))\\nt1, t2 = list(map(int, input().split()))\\np, d = list(map(int,input().split()))\\nwt = abs(x2-x1) * t2\\nif t2 <= t1:\\n    print(abs(x2-x1) * t2)\\n    return\\ntt = 0\\nif d == 1:\\n    if p <= x2:\\n        if x1 <= x2 and p <= x1:\\n            tt = abs(x2-p)*t1\\n        elif x1 > x2 and p <= x1:\\n            tt = (s - p + (s - x2))*t1\\n        elif x1 < p:\\n            tt = (s - p + s + x2)*t1\\n        else:\\n            raise Exception()\\n    else:\\n        if x1 > x2:\\n            tt = (s - p + s - x2) * t1\\n        else:\\n            tt = (s - p + s + x2) * t1\\nelse:\\n    if p >= x2:\\n        if x1 >= x2 and p >= x1:\\n            tt = abs(x2-p)*t1\\n        elif x1 < x2 and p >= x1:\\n            tt = (p + x2)*t1\\n        elif x1 > p:\\n            tt = (p + s + s - x2)*t1\\n        else:\\n            raise Exception()\\n    else:\\n        if x1 < x2:\\n            tt = (p + x2) * t1\\n        else:\\n            tt = (p + s + s-x2) * t1\\n\\nprint(min(tt, wt))\\n\", \"def codeforces(max_point, start, finish, tram_speed, legs_speed,\\n               tram_point, direction):\\n    if tram_point == start:\\n        time_to_start = 0\\n    elif start > tram_point:\\n        if direction == 1:\\n            time_to_start = (start - tram_point) * tram_speed\\n        else:\\n            direction = -direction\\n            time_to_start = ((start - tram_point) * tram_speed +\\n                             tram_point * 2 * tram_speed)\\n    elif start < tram_point:\\n        if direction == -1:\\n            time_to_start = (tram_point - start) * tram_speed\\n        else:\\n            direction = -direction\\n            time_to_start = ((tram_point - start) * tram_speed +\\n                             (max_point - tram_point) * 2 * tram_speed)\\n\\n    if start == finish:\\n        time_to_finish = 0\\n    elif finish > start:\\n        if direction == 1:\\n            time_to_finish = (finish - start) * tram_speed\\n        else:\\n            direction = -direction\\n            time_to_finish = ((finish - start) * tram_speed +\\n                              start * 2 * tram_speed)\\n    elif finish < start:\\n        if direction == -1:\\n            time_to_finish = (start - finish) * tram_speed\\n        else:\\n            direction = -direction\\n            time_to_finish = ((start - finish) * tram_speed +\\n                              (max_point - start) * 2 * tram_speed)\\n\\n    tram_time = time_to_start + time_to_finish\\n    legs_time = abs(finish - start) * legs_speed\\n    return min(tram_time, legs_time)\\n\\n\\nmax_point, start, finish = list(map(int, input().split()))\\ntram_speed, legs_speed = list(map(int, input().split()))\\ntram_point, direction = list(map(int, input().split()))\\n\\nprint((codeforces(max_point, start, finish, tram_speed, legs_speed,\\n                 tram_point, direction)))\\n\", \"s,x1,x2 = [int(i) for i in input().strip().split()]\\nt1,t2 = [int(i) for i in input().strip().split()]\\np,d = [int(i) for i in input().strip().split()]\\n\\nd2 = 1 if x2-x1>0 else -1\\nans = abs(x2-x1)*t2\\n\\nif d==d2==1:\\n  if p<=x1:\\n    ans = min(ans,(x2-p)*t1)\\n  elif p>x1:\\n    ans = min(ans,(2*s-p+x2)*t1)\\nelif d==d2==-1:\\n  if p>=x1:\\n    ans = min(ans,(p-x2)*t1)\\n  elif p<x1:\\n    ans = min(ans,(2*s+p-x2)*t1)\\nelif d!=d2 and d==1:\\n  ans = min(ans,(2*s-p-x2)*t1)\\nelif d!=d2 and d==-1:\\n  ans = min(ans,(p+x2)*t1)\\n\\nprint(ans)\", \"s,x1,x2 = map(int, input().split(\\\" \\\"))\\nt1,t2 = map(int, input().split(\\\" \\\"))\\np,d = map(int, input().split(\\\" \\\"))\\n\\n\\nif x2 > p and d == 1:\\n  train_dis = x2 - p\\nif x2 < p and d == 1:\\n  train_dis = s - p + s - x2\\nif x2 > p and d == -1:\\n  train_dis = p + x2\\nif x2 < p and d == -1:\\n  train_dis = p - x2\\n\\nif x1 < x2 and p>x1 and p<x2 and d == 1:\\n  train_dis += 2 * s\\nif x1 < x2 and p>x1 and p>x2:\\n  train_dis += 2 * x2\\n\\nif x1 > x2 and p > x2 and p < x1 and d == -1:\\n  train_dis += 2 * s\\nif x1 > x2 and p < x1 and p < x2:\\n  train_dis += 2 * (s-x2)\\n\\n\\ntrain_time = train_dis * t1\\n\\nigor_dis  = abs(x2-x1)\\nigor_time = igor_dis * t2\\n\\nprint(min(igor_time, train_time))\", \"s, x1, x2 = map(int, input().split())\\nt1, t2 = map(int, input().split())\\np, d = map(int, input().split())\\n\\ntp = abs(x1 - x2) * t2\\n\\nif p != x1:\\n    v = False\\nelse:\\n    v = True\\n\\ntt = 0\\nwhile 1:\\n    if p == s:\\n        d = -1\\n    \\n    if p == 0:\\n        d = 1\\n        \\n    p += d\\n    tt += t1\\n    if p == x1:\\n        v = True\\n        \\n    if v and p == x2:\\n        break\\nprint(min(tp, tt))\", \"s,x1,x2 = map(int,input().split())\\nt1,t2 = map(int,input().split())\\np,d = map(int,input().split())\\nans = abs(x2-x1)*t2\\nxyz = abs(x2-x1)*t1\\nif x2 > x1:\\n    if d == 1:\\n        if p > x1:\\n            xyz += ((s-p)+(s)+(x1))*t1\\n        else:\\n            xyz += (x1-p)*t1\\n    else:\\n        xyz += (p+x1)*t1\\nelse:\\n    if d == 1:\\n        xyz += ((s-p)+(s-x1))*t1\\n    else:\\n        if p >= x1:\\n            xyz += (p-x1)*t1\\n        else:\\n            xyz += ((p)+(s)+(s-x1))*t1\\nprint(min(ans,xyz))\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4 2 4\\n3 4\\n1 1\\n\",\n    \"5 4 0\\n1 2\\n3 1\\n\",\n    \"5 4 0\\n5 14\\n1 -1\\n\",\n    \"10 7 2\\n7 9\\n9 -1\\n\",\n    \"20 5 19\\n163 174\\n4 1\\n\",\n    \"1000 610 733\\n226 690\\n357 1\\n\",\n    \"40 31 14\\n628 1000\\n36 1\\n\",\n    \"100 20 83\\n186 434\\n64 -1\\n\",\n    \"200 179 81\\n126 457\\n37 -1\\n\",\n    \"400 30 81\\n193 1000\\n338 1\\n\",\n    \"500 397 440\\n202 1000\\n75 1\\n\",\n    \"600 443 587\\n260 1000\\n548 -1\\n\",\n    \"799 254 294\\n539 1000\\n284 -1\\n\",\n    \"801 489 351\\n86 702\\n125 1\\n\",\n    \"999 951 297\\n62 106\\n574 1\\n\",\n    \"1000 711 437\\n42 126\\n745 1\\n\",\n    \"1000 812 761\\n230 1000\\n696 -1\\n\",\n    \"1000 913 474\\n34 162\\n566 -1\\n\",\n    \"1000 394 798\\n155 673\\n954 -1\\n\",\n    \"1000 876 884\\n299 1000\\n825 1\\n\",\n    \"2 0 2\\n1 1\\n1 1\\n\",\n    \"5 4 2\\n1 2\\n3 1\\n\",\n    \"4 2 4\\n3 4\\n2 1\\n\",\n    \"200 10 100\\n1 100\\n20 1\\n\",\n    \"6 4 2\\n1 2\\n3 1\\n\",\n    \"3 1 3\\n1 2\\n1 1\\n\",\n    \"10 3 6\\n1 2\\n3 1\\n\",\n    \"1000 50 51\\n1 3\\n50 1\\n\",\n    \"100 1 2\\n1 100\\n1 1\\n\",\n    \"5 1 4\\n1 100\\n1 1\\n\",\n    \"10 0 5\\n1 100\\n7 1\\n\",\n    \"5 4 1\\n1 100\\n4 -1\\n\",\n    \"10 6 9\\n3 100\\n5 1\\n\",\n    \"50 10 30\\n1 50\\n10 1\\n\",\n    \"4 1 4\\n1 100\\n2 1\\n\",\n    \"10 5 9\\n1 10\\n5 1\\n\",\n    \"20 15 10\\n5 2\\n3 1\\n\",\n    \"2 2 0\\n7 3\\n1 1\\n\",\n    \"10 1 9\\n1 10\\n1 1\\n\",\n    \"1000 2 902\\n1 1000\\n2 1\\n\",\n    \"100 9 6\\n3 100\\n5 1\\n\",\n    \"10 1 6\\n1 10\\n3 -1\\n\",\n    \"1000 902 2\\n1 1000\\n902 -1\\n\",\n    \"100 50 25\\n1 1000\\n10 1\\n\",\n    \"5 3 0\\n1 2\\n4 -1\\n\",\n    \"4 1 2\\n1 10\\n3 1\\n\",\n    \"10 4 8\\n1 5\\n4 -1\\n\"\n  ],\n  \"outputs\": [\n    \"8\\n\",\n    \"7\\n\",\n    \"55\\n\",\n    \"45\\n\",\n    \"2436\\n\",\n    \"84870\\n\",\n    \"17000\\n\",\n    \"27342\\n\",\n    \"44786\\n\",\n    \"51000\\n\",\n    \"43000\\n\",\n    \"144000\\n\",\n    \"40000\\n\",\n    \"96836\\n\",\n    \"69324\\n\",\n    \"34356\\n\",\n    \"51000\\n\",\n    \"71118\\n\",\n    \"271560\\n\",\n    \"8000\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"480\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"18\\n\",\n    \"3\\n\",\n    \"12\\n\",\n    \"20\\n\",\n    \"10\\n\",\n    \"4\\n\",\n    \"10\\n\",\n    \"6\\n\",\n    \"8\\n\",\n    \"900\\n\",\n    \"300\\n\",\n    \"9\\n\",\n    \"900\\n\",\n    \"165\\n\",\n    \"4\\n\",\n    \"7\\n\",\n    \"12\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/746/C",
  "starter_code": ""
}