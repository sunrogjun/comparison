{
  "task_id": "APPS/213",
  "problem_id": 213,
  "prompt": "In a building where Polycarp lives there are equal number of flats on each floor. Unfortunately, Polycarp don't remember how many flats are on each floor, but he remembers that the flats are numbered from 1 from lower to upper floors. That is, the first several flats are on the first floor, the next several flats are on the second and so on. Polycarp don't remember the total number of flats in the building, so you can consider the building to be infinitely high (i.e. there are infinitely many floors). Note that the floors are numbered from 1.\n\nPolycarp remembers on which floors several flats are located. It is guaranteed that this information is not self-contradictory. It means that there exists a building with equal number of flats on each floor so that the flats from Polycarp's memory have the floors Polycarp remembers.\n\nGiven this information, is it possible to restore the exact floor for flat n? \n\n\n-----Input-----\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 100, 0 \u2264 m \u2264 100), where n is the number of the flat you need to restore floor for, and m is the number of flats in Polycarp's memory.\n\nm lines follow, describing the Polycarp's memory: each of these lines contains a pair of integers k_{i}, f_{i} (1 \u2264 k_{i} \u2264 100, 1 \u2264 f_{i} \u2264 100), which means that the flat k_{i} is on the f_{i}-th floor. All values k_{i} are distinct.\n\nIt is guaranteed that the given information is not self-contradictory.\n\n\n-----Output-----\n\nPrint the number of the floor in which the n-th flat is located, if it is possible to determine it in a unique way. Print -1 if it is not possible to uniquely restore this floor.\n\n\n-----Examples-----\nInput\n10 3\n6 2\n2 1\n7 3\n\nOutput\n4\n\nInput\n8 4\n3 1\n6 2\n5 2\n2 1\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example the 6-th flat is on the 2-nd floor, while the 7-th flat is on the 3-rd, so, the 6-th flat is the last on its floor and there are 3 flats on each floor. Thus, the 10-th flat is on the 4-th floor.\n\nIn the second example there can be 3 or 4 flats on each floor, so we can't restore the floor for the 8-th flat.",
  "solutions": "[\"def floo(num, k):\\n\\treturn (num - 1) // k + 1\\n\\ndef main():\\n\\tn, m = map(int, input().split())\\n\\tlow = 1\\n\\thigh = 10**9\\n\\n\\tif (m == 0):\\n\\t\\tif (n == 1):\\n\\t\\t\\tprint(1)\\n\\t\\telse:\\n\\t\\t\\tprint(-1)\\n\\t\\treturn\\n\\n\\tfor i in range(m):\\n\\t\\tk, f = map(int, input().split())\\n\\t\\tlow = max(low, (k + f - 1) // f)\\n\\t\\tif (f > 1):\\n\\t\\t\\thigh = min(high, (k - 1) // (f - 1))\\n\\tif (floo(n, low) == floo(n, high)):\\n\\t\\tprint(floo(n, low))\\n\\telse:\\n\\t\\tprint(-1)\\n\\n\\n\\nmain()\", \"n, m = [int(x) for x in input().split()]\\ndata = []\\nfor i in range(m):\\n    k, f = [int(x) for x in input().split()]\\n    data.append((k - 1, f - 1))\\nans = set()\\n#tmp = []\\nfor x in range(1, 101):\\n    for elem in data:\\n        if elem[0] // x != elem[1]:\\n            break\\n    else:\\n        ans.add((n - 1) // x + 1)\\n        #tmp.append((n - 1) // x + 1)\\nif len(ans) == 1:\\n    print(ans.pop())\\nelse:\\n    print(-1)\", \"n, m = map(int, input().split())\\na = []\\nfor i in range(m):\\n    k, f = map(int, input().split())\\n    a.append((k, f))\\nfl = []\\nps = 0\\nval = -1\\nfor i in range(1, 1000):\\n    flag = 1\\n    for j in range(m):\\n        if (a[j][0] - 1) // i != a[j][1] - 1:\\n            flag = 0\\n    if (flag):\\n        ps += 1\\n        fl.append(i)\\nans = []\\nfor i in range(len(fl)):\\n    ans.append(((n - 1) // fl[i]) + 1)\\nif not len(ans):\\n    print(-1)\\nelse:\\n    tmp = ans[0]\\n    flag = 1\\n    for i in range(len(ans)):\\n        if ans[i] != tmp:\\n            flag = 0\\n    if not flag:\\n        print(-1)\\n    else:\\n        print(ans[0])\", \"def rec(i):\\n    nonlocal a\\n    return i\\nimport sys\\nfrom collections import Counter\\nsys.setrecursionlimit(10**6)\\n#n=int(input())\\nn,m=list(map(int,input().split()))\\na=[[] for i in range(100)]\\nb=[i for i in range(1,101)]\\nfor i in range(m):\\n    x,y=list(map(int,input().split()))\\n    z=b.copy()\\n    for i0 in z:\\n        if not(((x-1)>=(y-1)*i0)and((x-1)<y*i0)):\\n            b.remove(i0)\\n\\na=set()\\nfor i0 in b:\\n    a.add((n-1)//i0)\\nif len(a)==1:\\n    print(a.pop()+1)\\nelse:\\n    print(-1)\\n\", \"a,b = list(map(int,input().split()))\\nmini = 1\\nmaxi = 10000\\nfor i in range(b):\\n    x,y = list(map(int,input().split()))\\n    if y==1:\\n        mini = max(mini,x)\\n    else:\\n        mx = (x-1)//(y-1) \\n        mn=(x-1)//y+1\\n        if mn*y>=x:\\n            mini = max(mini,mn)\\n        else:\\n            mini = max(mini,mn+1)\\n        if mx*y>=x:\\n            maxi = min(maxi,mx)\\nif (a-1)//maxi==(a-1)//mini:\\n    print((a-1)//maxi+1)\\nelse:\\n    print(-1)\\n\", \"n, m = list(map(int, input().split()))\\n#memory = [[] * 100 for i in range(100)]\\nmemory = []\\nfor i in range(m):\\n    a, b = list(map(int, input().split()))\\n    memory.append((a, b))\\n#memory.sort()\\n#count = 0\\nans = -1\\ngl_flag = 1\\nfor flat in range(1, 101):\\n    flag = 1\\n    for i in range(m):\\n        if not (memory[i][0] <= memory[i][1] * flat and memory[i][0] > (memory[i][1] - 1) * flat):\\n            flag = 0\\n            break\\n    if (flag == 1):\\n        #count += 1\\n        ans1 = (n - 1) // flat + 1\\n        if (ans != -1 and ans1 != ans):\\n            gl_flag = 0\\n            break\\n        else:\\n            ans = ans1 \\nif (gl_flag == 0):\\n    print(-1)\\nelse:\\n    print(ans)\\n\", \"import math\\nn,m=map(int,input().split())\\nznach=range(1,200)\\nfor i in range(m):\\n    k,f=map(int,input().split())\\n    if f==1:\\n        a=range(math.ceil(k/f),200)\\n    else:\\n        niz=math.ceil(k/f)\\n        verh=math.floor((k-1)/(f-1))\\n        a=range(niz,verh+1)\\n    znach=list(set(a)&set(znach))\\nif len(znach)==1:\\n    if n%znach[0]==0:\\n        print(n//znach[0])\\n    else:\\n        print(n//znach[0]+1)\\nelse:\\n    a=[]\\n    for i in range(len(znach)):\\n        if n%znach[i]==0:\\n            a.append(n//znach[i])\\n        else:\\n            a.append(n//znach[i]+1)\\n    a=list(set(a))\\n    if len(a)>1:\\n        print(-1)\\n    else:\\n        print(a[0])\", \"n, m = list(map(int, input().split()))\\nd = []\\n\\ncount_of_good = 0\\ngood_on_level = []\\n\\nfor i in range(m):\\n    a, b = list(map(int, input().split()))\\n    d.append((a, b))\\n\\nfor on_level in range(1, 101):\\n    good = True\\n    for el in d:\\n        etaj = el[1]\\n        kv = el[0]\\n        if not ((etaj - 1) * on_level < kv <= etaj * on_level):\\n            good = False\\n            break\\n    if good:\\n        count_of_good += 1\\n        good_on_level.append(on_level)\\n\\nans = []\\n\\nfor i in good_on_level:\\n    if n % i == 0:\\n        ans.append(n // i)\\n    else:\\n        ans.append(n // i + 1)\\n\\nif len(ans) == 1:\\n    print(ans[0])\\n    return\\n\\nfor i in range(1, len(ans)):\\n    if ans[i - 1] != ans[i]:\\n        print('-1')\\n        return\\n\\nprint(ans[0])\\n\", \"n, m = [int(i) for i in input().split()]\\nmn = 10 ** 5\\nmx = 1\\nn -= 1\\nfor i in range(m):\\n    x, y = [int(i) for i in input().split()]\\n    x -= 1\\n    y -= 1\\n    if y != 0:\\n        mn = min(mn, x // y)\\n    mx = max(mx, [(x + y) // (y + 1), x // (y + 1) + 1][x % (y + 1) == 0])\\na = n // mx\\nfor i in range(mx + 1, mn + 1):\\n    if a != n // i:\\n        print(-1)\\n        return\\nprint(a + 1)\", \"m, n = map(int, input().split())\\ncanbe = []\\nfor i in range(0, n):\\n    numb, et = map(int, input().split())\\n    can = []\\n    for j in range(1, 101):\\n        if j * et >= numb and j * (et - 1) < numb:\\n            can += [j]\\n    canbe += [can]\\n    can = []\\ncanbeat = []\\nfor i in range(1, 101):\\n    est = 0\\n    for el in canbe:\\n        if i in el:\\n            est += 1\\n    if est == n:\\n        canbeat += [i]\\nans = []\\nfor element in canbeat:\\n    if m % element == 0:\\n        ans += [m // element]\\n    else:\\n        ans += [m // element + 1]\\nwrit = ans[0]\\ntr = 0\\nfor element in ans:\\n    if element != writ:\\n        tr = -1\\nif tr == -1:\\n    print(tr)\\nelse:\\n    print(writ)\", \"n, m = list(map(int, input().split()))\\nkv = [None] * 101\\nboo = [False] * 101\\nfor i in range(m):\\n    k, j = list(map(int, input().split()))\\n    kv[k] = j\\nfor j in range(1, 101):\\n    qw = True\\n    for i in range(len(kv)):\\n        if kv[i] is not None:\\n            a = (i - 1) // j + 1\\n            if kv[i] != a:\\n                qw = False\\n    boo[j] = qw\\na = sum(boo)\\nfirst = 0\\nq = set()\\nfor i in range(len(boo)):\\n    if boo[i]:\\n        q.add((n - 1) // i + 1)\\n        \\n\\n\\nif len(q) == 1:\\n    print(q.pop())\\nelse:\\n    print(-1)\\n            \\n        \\n        \\n        \\n\", \"n, m = list(map(int, input().split()))\\ndata = []\\nfl = [0] * 1000000\\nan = -1\\nf = 0\\nfor i in range(m):\\n    data += [list(map(int, input().split()))]\\n    fl[data[i][0]] = data[i][1]\\n    if data[i][0] == n:\\n        an = data[i][1]\\n    f = max(data[i][1], f)\\n\\n\\nif an != -1:\\n    print(an)\\n    return\\ndata.sort()\\n\\nan = []\\nt = True\\nfor i in range(m):\\n    if data[i][0] != data[i][1]:\\n        t = False\\nif t:\\n    an += [n]\\n    \\nfor k in range(2, 10001):\\n    #print(k)\\n    t = True\\n    for i in range(m):\\n        f = data[i][0] // k + min(1, data[i][0] % k)\\n        if data[i][1] != f:\\n            t = False\\n            break\\n    if not t:\\n        continue\\n    \\n    an += [n // k + min(1, n % k)]\\n    #print(an)\\n\\nif len(set(an)) == 1:\\n    print(an[0])\\nelse:\\n    print(-1)\\n\", \"n, m = list(map(int, input().split()))\\nv = []\\nfor i in range(m):\\n    v.append(list(map(int, input().split())))\\nans = []\\nfor i in range(1, 101):\\n    o = True\\n    for p in v:\\n        if (p[0] - 1) // i != p[1] - 1:\\n            o = False\\n            break\\n    if o:\\n        if not(((n - 1) // i + 1) in ans):\\n            ans.append(((n - 1) // i + 1))\\nif len(ans) == 1:\\n    print(ans[0])\\nelse:\\n    print(-1)\\n\", \"def first(n, m, line):\\n    for i in range(0, n): \\n        k, f = list(map(int, input().split())) \\n        res = [] \\n        for j in range(1, 101): \\n            if j * f >= k and j * (f - 1) < k: \\n                res.append(j) \\n        line.append(res) \\n        res = [] \\n    return line\\n\\n\\ndef check(n, m, hz):\\n    for i in range(1, 101): \\n        dno = 0 \\n        for elem in line: \\n            if i in elem: \\n                dno += 1 \\n        if dno == n: \\n            hz.append(i)\\n    return hz\\n\\n\\nm, n = list(map(int, input().split())) \\nline = [] \\nline = first(n, m, line)\\nhz = [] \\nhz = check(n, m, hz)\\nans = [] \\n\\nfor element in hz: \\n    if m % element == 0: \\n        ans.append(m // element)\\n    else: \\n        ans.append(m // element + 1)\\nsmth = ans[0] \\nansw = 0 \\nfor element in ans: \\n    if element != smth: \\n        answ = -1 \\nif answ == -1: \\n    print(answ) \\nelse: \\n    print(smth)\\n\", \"m, n = map(int, input().split())\\narr = []\\nfor i in range(n):\\n    a, b = map(int, input().split())\\n    arr.append((a, b))\\nans = set()\\nfor k in range(1, 150):\\n    fl = True\\n    for i in range(n):\\n        if ((arr[i][0] - 1) // k + 1) != arr[i][1]:\\n            fl = False\\n            break\\n    if fl: ans.add((m - 1) // k + 1)\\nif len(ans) == 1:\\n    for i in ans:\\n        print(i)\\nelse:\\n    print(-1)\", \"k = []\\nn, m = list(map(int, input().split(\\\" \\\")))\\nfor i in range(m):\\n\\tx, y = list(map(int, input().split(' ')))\\n\\tk.append([x, y])\\n\\ndef ok(x):\\n\\tfor i in k:\\n\\t\\tif (i[0]-1)//x+1!=i[1]:\\n\\t\\t\\treturn False\\n\\treturn True\\n\\nposs = []\\nfor x in range(1, 101):\\n\\tif ok(x):\\n\\t\\tposs.append((n-1)//x+1)\\n\\nif len(list(set(poss))) == 1:\\n\\tprint(poss[0])\\nelse:\\n\\tprint(-1)\\n\\n\\n\", \"import sys, os\\nn, m = map(int, input().split())\\nmi = []\\nma = []\\nif m == 0:\\n    if n == 1:\\n        print(1)\\n    else:\\n        print(-1)\\n    return\\n    return\\n    os.abort()\\nfor i in range(m):\\n    a, b = map(int, input().split())\\n    if b == 1:\\n        ma.append(1000000000)\\n        mi.append(a)\\n        if n <= a:\\n            print(1)\\n            return\\n            return\\n            os.abort()\\n    else:\\n        mak = (a - 1) // (b - 1)\\n        ma.append(mak)\\n        if a % b == 0:\\n            mi.append(a // b)\\n        else:\\n            mi.append((a // b ) + 1)\\n#print(mi, ma)\\nmik = min(ma)\\nmak = max(mi)\\nif n % mik == 0:\\n    a = n // mik\\nelse:\\n    a = (n // mik) + 1\\n\\nif n % mak == 0:\\n    b = n // mak\\nelse:\\n    b = (n // mak) + 1\\nif a == b:\\n    print(b)\\nelse:\\n    print(-1)\", \"n, m = map(int, input().split())\\nl = set()\\ns = {i for i in range(1, 101)}\\nb = False\\nfor i in range(m):\\n  k, f = map(int, input().split())\\n  if k == n:\\n    print(f)\\n    b = True\\n    break\\n  j = 1\\n  if f == 1:\\n    l = {i for i in range(k, 101)}\\n  else:\\n    while j <= (k-j)//(f-1):\\n      if (k-j)%(f-1) == 0:\\n        l.add((k-j)//(f-1))\\n        j += f-1\\n      else:\\n        j += 1\\n  s &= l\\n  l.clear()\\na = -1\\nif b == False:\\n  t = True\\n  for j in s:\\n    if a == -1:\\n      a = (n-1)//j\\n    else:\\n      if (n-1)//j != a:\\n        print(-1)\\n        t = False\\n        break\\n  if t == True:\\n    print(a+1)\", \"n, m = map(int, input().split())\\nmin_ = 10000\\nmax_ = 0\\nfor i in range(m):\\n    k, f = map(int, input().split())\\n    if f > 1:\\n        min_ = min(k / (f - 1), min_)\\n    max_ = max(k / f, max_)\\nmin_, max_ = max_, min_\\n\\n\\nif(min_ != int(min_)):\\n    min_ +=1\\nmin_ = int(min_)\\n\\nif (max_ != int(max_)):\\n    max_+=1\\nmax_ = int(max_)\\n\\n#print(min_, max_)\\n\\ns = set()\\nfor i in range(max(1, min_), max_):\\n    b = n // i\\n    if (n % i) != 0:\\n        b+=1\\n    s.add(b)\\nif len(s) == 1:\\n    print(b)\\nelse:\\n    print(-1)\", \"n,m=list(map(int,input().split()))\\nk=[0]*m\\nf=[0]*m\\nl=1\\nr=100\\nfor i in range(m):\\n    k[i],f[i]=list(map(int,input().split()))\\nfor i in range(m):\\n    fl=True\\n    for kol in range(l,r+1):\\n        ch=k[i]-(f[i]-1)*kol\\n        if ch>0 and ch<=kol:\\n            if fl:\\n                l=kol\\n                fl=False\\n        elif not fl:\\n            r=kol-1\\n            break\\n    if r-l==0:\\n        print((n+r-1)//r)\\n        break\\nelse:\\n    kok=(n+r-1)//r\\n    for kol in range(l,r):\\n        if kok!=(n+kol-1)//kol:\\n            print(-1)\\n            break\\n    else:\\n        print(kok)\\n                \\n\", \"n, m = map(int, input().split())\\n\\nl = -100\\nr = 100\\nfor i in range(m):\\n    k, f = map(int, input().split())\\n    l = max(l, (k + f - 1) // f)\\n    if(f != 1):\\n        r = min(r, (k - 1) // (f - 1))\\n\\nif(l == r):\\n    print((n + r - 1) // r)\\nelif ((n + r - 1) // r == (n + l - 1) // l):\\n    print((n + r - 1) // r)\\nelse:\\n    print(-1)\", \"n, m = map(int, input().split())\\nlist1 = []\\nans = set()\\nif n == 1:\\n    print(1)\\nelse:\\n    for i in range(m):\\n        list1.append(list(map(int, input().split())))\\n    for i in range(1, 101):\\n        if len(ans) > 1:\\n            print(-1)\\n            break\\n        for j in range(len(list1)):\\n            if (list1[j][0] - 1) // i + 1 != list1[j][1]:\\n                break\\n        else:\\n            ans.add((n - 1) // i + 1)\\n    else:\\n        if len(ans) == 1:\\n            print(*list(ans))\\n        else:\\n            print(-1)\", \"import math\\n\\ndef f(m):\\n    nonlocal h\\n    f = True\\n    for i in range(len(h)):\\n        for j in h[i]:\\n            if not(j <= i * m and j > (i - 1) * m ):\\n                f = False\\n    return f\\n\\nn, m = map(int, input().split())\\nh  = [[] for i in range(110)]\\nfor i in range(m):\\n    a, b = map(int, input().split())\\n    h[b].append(a)\\nk = 0\\nans = []\\nfor i in range(1, 110):\\n    if f(i):\\n        k += 1\\n        ans.append(i)\\nfl = False\\nfor i in range(len(h)):\\n    for j in h[i]:\\n        if j == n:\\n            fl = True\\n            ans1 = i\\nif fl:\\n    print(ans1)\\nelif m == 0 and n == 1:\\n    print(1)\\nelif k > 1:\\n    pr = math.ceil(n / ans[0])\\n    fl1 = True\\n    for i in range(1, len(ans)):\\n        if pr != math.ceil(n / ans[i]):\\n            fl1 = False\\n    if not fl1:\\n        print(-1)\\n    else:\\n        print(pr)\\nelif k < 1:\\n    print(-1)\\nelse:\\n    print(math.ceil(n / ans[0]))\", \"\\nn,m=list(map(int,input().split()))\\nk=[]\\nf=[]\\nfor i in range(m):\\n    u,p=list(map(int,input().split()))\\n    k.append(u)\\n    f.append(p)\\ndef ok(x):\\n    for i in range(m):\\n        if (k[i]-1)//x+1!=f[i]:\\n            return False\\n    return True\\na=[]\\nfor i in range(1,101):\\n    if(ok(i)):\\n        a.append((n-1)//i+1)\\nif len(list(set(a)))==1:\\n    print(a[0])\\nelse:\\n    print(-1)\\n\", \"n, m = list(map(int, input().split()))\\n\\nn = n - 1\\net = []\\nfor i in range(m):\\n    et.append(tuple(map(lambda x: int(x) - 1, input().split())))\\net.sort()\\nres = -1\\nif n == 0:\\n    res = 1\\nelif len(et) == 0:\\n    pass\\nelse:\\n    et = [(-1, 0)] + et\\n    for i in range(len(et) - 1):\\n        if et[i][0] <= n <= et[i+1][0] and et[i][1] == et[i+1][1]:\\n            res = et[i][1] + 1\\n            break\\n    et = et[1:]\\n    if res == -1 and et[-1][1] != 0:\\n        y = []\\n        \\n        for i in range(1, et[-1][0] // et[-1][1] + 1):\\n            fl = True\\n            for j in range(len(et)):\\n                if et[j][0] // i != et[j][1]:\\n                    fl = False\\n                    break\\n            if fl:\\n                y.append(i)\\n        y1 = set([(n // tmp + 1) for tmp in y])\\n        if len(y1) == 1:\\n            res = y1.pop()\\nprint(res)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"10 3\\n6 2\\n2 1\\n7 3\\n\",\n    \"8 4\\n3 1\\n6 2\\n5 2\\n2 1\\n\",\n    \"8 3\\n7 2\\n6 2\\n1 1\\n\",\n    \"4 2\\n8 3\\n3 1\\n\",\n    \"11 4\\n16 4\\n11 3\\n10 3\\n15 4\\n\",\n    \"16 6\\n3 1\\n16 4\\n10 3\\n9 3\\n19 5\\n8 2\\n\",\n    \"1 0\\n\",\n    \"1 1\\n1 1\\n\",\n    \"1 1\\n1 1\\n\",\n    \"1 2\\n1 1\\n2 2\\n\",\n    \"2 2\\n2 1\\n1 1\\n\",\n    \"2 0\\n\",\n    \"2 1\\n3 3\\n\",\n    \"3 2\\n1 1\\n3 3\\n\",\n    \"3 3\\n1 1\\n3 3\\n2 2\\n\",\n    \"3 0\\n\",\n    \"1 1\\n2 1\\n\",\n    \"2 2\\n2 1\\n1 1\\n\",\n    \"2 3\\n3 2\\n1 1\\n2 1\\n\",\n    \"3 0\\n\",\n    \"3 1\\n1 1\\n\",\n    \"2 2\\n1 1\\n3 1\\n\",\n    \"1 3\\n1 1\\n2 1\\n3 1\\n\",\n    \"81 0\\n\",\n    \"22 1\\n73 73\\n\",\n    \"63 2\\n10 10\\n64 64\\n\",\n    \"88 3\\n37 37\\n15 15\\n12 12\\n\",\n    \"29 4\\n66 66\\n47 47\\n62 62\\n2 2\\n\",\n    \"9 40\\n72 72\\n47 47\\n63 63\\n66 66\\n21 21\\n94 94\\n28 28\\n45 45\\n93 93\\n25 25\\n100 100\\n43 43\\n49 49\\n9 9\\n74 74\\n26 26\\n42 42\\n50 50\\n2 2\\n92 92\\n76 76\\n3 3\\n78 78\\n44 44\\n69 69\\n36 36\\n65 65\\n81 81\\n13 13\\n46 46\\n24 24\\n96 96\\n73 73\\n82 82\\n68 68\\n64 64\\n41 41\\n31 31\\n29 29\\n10 10\\n\",\n    \"50 70\\n3 3\\n80 80\\n23 23\\n11 11\\n87 87\\n7 7\\n63 63\\n61 61\\n67 67\\n53 53\\n9 9\\n43 43\\n55 55\\n27 27\\n5 5\\n1 1\\n99 99\\n65 65\\n37 37\\n60 60\\n32 32\\n38 38\\n81 81\\n2 2\\n34 34\\n17 17\\n82 82\\n26 26\\n71 71\\n4 4\\n16 16\\n19 19\\n39 39\\n51 51\\n6 6\\n49 49\\n64 64\\n83 83\\n10 10\\n56 56\\n30 30\\n76 76\\n90 90\\n42 42\\n47 47\\n91 91\\n21 21\\n52 52\\n40 40\\n77 77\\n35 35\\n88 88\\n75 75\\n95 95\\n28 28\\n15 15\\n69 69\\n22 22\\n48 48\\n66 66\\n31 31\\n98 98\\n73 73\\n25 25\\n97 97\\n18 18\\n13 13\\n54 54\\n72 72\\n29 29\\n\",\n    \"6 0\\n\",\n    \"32 1\\n9 5\\n\",\n    \"73 2\\n17 9\\n21 11\\n\",\n    \"6 3\\n48 24\\n51 26\\n62 31\\n\",\n    \"43 4\\n82 41\\n52 26\\n88 44\\n41 21\\n\",\n    \"28 40\\n85 43\\n19 10\\n71 36\\n39 20\\n57 29\\n6 3\\n15 8\\n11 6\\n99 50\\n77 39\\n79 40\\n31 16\\n35 18\\n24 12\\n54 27\\n93 47\\n90 45\\n72 36\\n63 32\\n22 11\\n83 42\\n5 3\\n12 6\\n56 28\\n94 47\\n25 13\\n41 21\\n29 15\\n36 18\\n23 12\\n1 1\\n84 42\\n55 28\\n58 29\\n9 5\\n68 34\\n86 43\\n3 2\\n48 24\\n98 49\\n\",\n    \"81 70\\n55 28\\n85 43\\n58 29\\n20 10\\n4 2\\n47 24\\n42 21\\n28 14\\n26 13\\n38 19\\n9 5\\n83 42\\n7 4\\n72 36\\n18 9\\n61 31\\n41 21\\n64 32\\n90 45\\n46 23\\n67 34\\n2 1\\n6 3\\n27 14\\n87 44\\n39 20\\n11 6\\n21 11\\n35 18\\n48 24\\n44 22\\n3 2\\n71 36\\n62 31\\n34 17\\n16 8\\n99 50\\n57 29\\n13 7\\n79 40\\n100 50\\n53 27\\n89 45\\n36 18\\n43 22\\n92 46\\n98 49\\n75 38\\n40 20\\n97 49\\n37 19\\n68 34\\n30 15\\n96 48\\n17 9\\n12 6\\n45 23\\n65 33\\n76 38\\n84 42\\n23 12\\n91 46\\n52 26\\n8 4\\n32 16\\n77 39\\n88 44\\n86 43\\n70 35\\n51 26\\n\",\n    \"34 0\\n\",\n    \"63 1\\n94 24\\n\",\n    \"4 2\\n38 10\\n48 12\\n\",\n    \"37 3\\n66 17\\n89 23\\n60 15\\n\",\n    \"71 4\\n15 4\\n13 4\\n4 1\\n70 18\\n\",\n    \"77 40\\n49 13\\n66 17\\n73 19\\n15 4\\n36 9\\n1 1\\n41 11\\n91 23\\n51 13\\n46 12\\n39 10\\n42 11\\n56 14\\n61 16\\n70 18\\n92 23\\n65 17\\n54 14\\n97 25\\n8 2\\n87 22\\n33 9\\n28 7\\n38 10\\n50 13\\n26 7\\n7 2\\n31 8\\n84 21\\n47 12\\n27 7\\n53 14\\n19 5\\n93 24\\n29 8\\n3 1\\n77 20\\n62 16\\n9 3\\n44 11\\n\",\n    \"18 70\\n51 13\\n55 14\\n12 3\\n43 11\\n42 11\\n95 24\\n96 24\\n29 8\\n65 17\\n71 18\\n18 5\\n62 16\\n31 8\\n100 25\\n4 1\\n77 20\\n56 14\\n24 6\\n93 24\\n97 25\\n79 20\\n40 10\\n49 13\\n86 22\\n21 6\\n46 12\\n6 2\\n14 4\\n23 6\\n20 5\\n52 13\\n88 22\\n39 10\\n70 18\\n94 24\\n13 4\\n37 10\\n41 11\\n91 23\\n85 22\\n83 21\\n89 23\\n33 9\\n64 16\\n67 17\\n57 15\\n47 12\\n36 9\\n72 18\\n81 21\\n76 19\\n35 9\\n80 20\\n34 9\\n5 2\\n22 6\\n84 21\\n63 16\\n74 19\\n90 23\\n68 17\\n98 25\\n87 22\\n2 1\\n92 23\\n50 13\\n38 10\\n28 7\\n8 2\\n60 15\\n\",\n    \"89 0\\n\",\n    \"30 1\\n3 1\\n\",\n    \"63 2\\n48 6\\n17 3\\n\",\n    \"96 3\\n45 6\\n25 4\\n35 5\\n\",\n    \"37 4\\n2 1\\n29 4\\n27 4\\n47 6\\n\",\n    \"64 40\\n40 5\\n92 12\\n23 3\\n75 10\\n71 9\\n2 1\\n54 7\\n18 3\\n9 2\\n74 10\\n87 11\\n11 2\\n90 12\\n30 4\\n48 6\\n12 2\\n91 12\\n60 8\\n35 5\\n13 2\\n53 7\\n46 6\\n38 5\\n59 8\\n97 13\\n32 4\\n6 1\\n36 5\\n43 6\\n83 11\\n81 11\\n99 13\\n69 9\\n10 2\\n21 3\\n78 10\\n31 4\\n27 4\\n57 8\\n1 1\\n\",\n    \"17 70\\n63 8\\n26 4\\n68 9\\n30 4\\n61 8\\n84 11\\n39 5\\n53 7\\n4 1\\n81 11\\n50 7\\n91 12\\n59 8\\n90 12\\n20 3\\n21 3\\n83 11\\n94 12\\n37 5\\n8 1\\n49 7\\n34 5\\n19 3\\n44 6\\n74 10\\n2 1\\n73 10\\n88 11\\n43 6\\n36 5\\n57 8\\n64 8\\n76 10\\n40 5\\n71 9\\n95 12\\n15 2\\n41 6\\n89 12\\n42 6\\n96 12\\n1 1\\n52 7\\n38 5\\n45 6\\n78 10\\n82 11\\n16 2\\n48 6\\n51 7\\n56 7\\n28 4\\n87 11\\n93 12\\n46 6\\n29 4\\n97 13\\n54 7\\n35 5\\n3 1\\n79 10\\n99 13\\n13 2\\n55 7\\n100 13\\n11 2\\n75 10\\n24 3\\n33 5\\n22 3\\n\",\n    \"9 0\\n\",\n    \"50 1\\n31 2\\n\",\n    \"79 2\\n11 1\\n22 2\\n\",\n    \"16 3\\n100 7\\n94 6\\n3 1\\n\",\n    \"58 4\\n73 5\\n52 4\\n69 5\\n3 1\\n\",\n    \"25 40\\n70 5\\n28 2\\n60 4\\n54 4\\n33 3\\n21 2\\n51 4\\n20 2\\n44 3\\n79 5\\n65 5\\n1 1\\n52 4\\n23 2\\n38 3\\n92 6\\n63 4\\n3 1\\n91 6\\n5 1\\n64 4\\n34 3\\n25 2\\n97 7\\n89 6\\n61 4\\n71 5\\n88 6\\n29 2\\n56 4\\n45 3\\n6 1\\n53 4\\n57 4\\n90 6\\n76 5\\n8 1\\n46 3\\n73 5\\n87 6\\n\",\n    \"78 70\\n89 6\\n52 4\\n87 6\\n99 7\\n3 1\\n25 2\\n46 3\\n78 5\\n35 3\\n68 5\\n85 6\\n23 2\\n60 4\\n88 6\\n17 2\\n8 1\\n15 1\\n67 5\\n95 6\\n59 4\\n94 6\\n31 2\\n4 1\\n16 1\\n10 1\\n97 7\\n42 3\\n2 1\\n24 2\\n34 3\\n37 3\\n70 5\\n18 2\\n41 3\\n48 3\\n58 4\\n20 2\\n38 3\\n72 5\\n50 4\\n49 4\\n40 3\\n61 4\\n6 1\\n45 3\\n28 2\\n13 1\\n27 2\\n96 6\\n56 4\\n91 6\\n77 5\\n12 1\\n11 1\\n53 4\\n76 5\\n74 5\\n82 6\\n55 4\\n80 5\\n14 1\\n44 3\\n7 1\\n83 6\\n79 5\\n92 6\\n66 5\\n36 3\\n73 5\\n100 7\\n\",\n    \"95 0\\n\",\n    \"33 1\\n30 1\\n\",\n    \"62 2\\n14 1\\n15 1\\n\",\n    \"3 3\\n6 1\\n25 1\\n38 2\\n\",\n    \"44 4\\n72 3\\n80 3\\n15 1\\n36 2\\n\",\n    \"34 40\\n25 1\\n28 1\\n78 3\\n5 1\\n13 1\\n75 3\\n15 1\\n67 3\\n57 2\\n23 1\\n26 1\\n61 2\\n22 1\\n48 2\\n85 3\\n24 1\\n82 3\\n83 3\\n53 2\\n38 2\\n19 1\\n33 2\\n69 3\\n17 1\\n79 3\\n54 2\\n77 3\\n97 4\\n20 1\\n35 2\\n14 1\\n18 1\\n71 3\\n21 1\\n36 2\\n56 2\\n44 2\\n63 2\\n72 3\\n32 1\\n\",\n    \"83 70\\n79 3\\n49 2\\n2 1\\n44 2\\n38 2\\n77 3\\n86 3\\n31 1\\n83 3\\n82 3\\n35 2\\n7 1\\n78 3\\n23 1\\n39 2\\n58 2\\n1 1\\n87 3\\n72 3\\n20 1\\n48 2\\n14 1\\n13 1\\n6 1\\n70 3\\n55 2\\n52 2\\n25 1\\n11 1\\n61 2\\n76 3\\n95 3\\n32 1\\n66 3\\n29 1\\n9 1\\n5 1\\n3 1\\n88 3\\n59 2\\n96 3\\n10 1\\n63 2\\n40 2\\n42 2\\n34 2\\n43 2\\n19 1\\n89 3\\n94 3\\n24 1\\n98 4\\n12 1\\n30 1\\n69 3\\n17 1\\n50 2\\n8 1\\n93 3\\n16 1\\n97 4\\n54 2\\n71 3\\n18 1\\n33 2\\n80 3\\n15 1\\n99 4\\n75 3\\n4 1\\n\",\n    \"2 0\\n\",\n    \"36 1\\n96 1\\n\",\n    \"73 2\\n34 1\\n4 1\\n\",\n    \"6 3\\n37 1\\n22 1\\n70 1\\n\",\n    \"47 4\\n66 1\\n57 1\\n85 1\\n47 1\\n\",\n    \"9 40\\n73 1\\n21 1\\n37 1\\n87 1\\n33 1\\n69 1\\n49 1\\n19 1\\n35 1\\n93 1\\n71 1\\n43 1\\n79 1\\n85 1\\n29 1\\n72 1\\n76 1\\n47 1\\n17 1\\n67 1\\n95 1\\n41 1\\n54 1\\n88 1\\n42 1\\n80 1\\n98 1\\n96 1\\n10 1\\n24 1\\n78 1\\n18 1\\n3 1\\n91 1\\n2 1\\n15 1\\n5 1\\n60 1\\n36 1\\n46 1\\n\",\n    \"63 70\\n82 1\\n53 1\\n57 1\\n46 1\\n97 1\\n19 1\\n36 1\\n90 1\\n23 1\\n88 1\\n68 1\\n45 1\\n2 1\\n70 1\\n86 1\\n8 1\\n83 1\\n40 1\\n99 1\\n42 1\\n32 1\\n52 1\\n81 1\\n50 1\\n77 1\\n37 1\\n54 1\\n75 1\\n4 1\\n49 1\\n73 1\\n22 1\\n21 1\\n98 1\\n18 1\\n51 1\\n14 1\\n76 1\\n92 1\\n80 1\\n78 1\\n33 1\\n79 1\\n89 1\\n67 1\\n9 1\\n44 1\\n60 1\\n64 1\\n55 1\\n29 1\\n100 1\\n16 1\\n87 1\\n10 1\\n12 1\\n25 1\\n85 1\\n30 1\\n63 1\\n39 1\\n38 1\\n31 1\\n5 1\\n26 1\\n91 1\\n43 1\\n72 1\\n48 1\\n94 1\\n\",\n    \"2 0\\n\"\n  ],\n  \"outputs\": [\n    \"4\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"22\\n\",\n    \"63\\n\",\n    \"88\\n\",\n    \"29\\n\",\n    \"9\\n\",\n    \"50\\n\",\n    \"-1\\n\",\n    \"16\\n\",\n    \"37\\n\",\n    \"3\\n\",\n    \"22\\n\",\n    \"14\\n\",\n    \"41\\n\",\n    \"-1\\n\",\n    \"16\\n\",\n    \"1\\n\",\n    \"10\\n\",\n    \"18\\n\",\n    \"20\\n\",\n    \"5\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"8\\n\",\n    \"12\\n\",\n    \"5\\n\",\n    \"8\\n\",\n    \"3\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"-1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/858/B",
  "starter_code": ""
}