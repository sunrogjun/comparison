{
  "task_id": "APPS/500",
  "problem_id": 500,
  "prompt": "Dasha decided to have a rest after solving the problem. She had been ready to start her favourite activity \u2014 origami, but remembered the puzzle that she could not solve.  [Image] \n\nThe tree is a non-oriented connected graph without cycles. In particular, there always are n - 1 edges in a tree with n vertices.\n\nThe puzzle is to position the vertices at the points of the Cartesian plane with integral coordinates, so that the segments between the vertices connected by edges are parallel to the coordinate axes. Also, the intersection of segments is allowed only at their ends. Distinct vertices should be placed at different points. \n\nHelp Dasha to find any suitable way to position the tree vertices on the plane.\n\nIt is guaranteed that if it is possible to position the tree vertices on the plane without violating the condition which is given above, then you can do it by using points with integral coordinates which don't exceed 10^18 in absolute value.\n\n\n-----Input-----\n\nThe first line contains single integer n (1 \u2264 n \u2264 30) \u2014 the number of vertices in the tree. \n\nEach of next n - 1 lines contains two integers u_{i}, v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n) that mean that the i-th edge of the tree connects vertices u_{i} and v_{i}.\n\nIt is guaranteed that the described graph is a tree.\n\n\n-----Output-----\n\nIf the puzzle doesn't have a solution then in the only line print \"NO\".\n\nOtherwise, the first line should contain \"YES\". The next n lines should contain the pair of integers x_{i}, y_{i} (|x_{i}|, |y_{i}| \u2264 10^18) \u2014 the coordinates of the point which corresponds to the i-th vertex of the tree.\n\nIf there are several solutions, print any of them. \n\n\n-----Examples-----\nInput\n7\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\nOutput\nYES\n0 0\n1 0\n0 1\n2 0\n1 -1\n-1 1\n0 2\nInput\n6\n1 2\n2 3\n2 4\n2 5\n2 6\n\nOutput\nNO\n\nInput\n4\n1 2\n2 3\n3 4\nOutput\nYES\n3 3\n4 3\n5 3\n6 3\n\n\n-----Note-----\n\nIn the first sample one of the possible positions of tree is: [Image]",
  "solutions": "[\"def dfs(v, x, y, t, l, pr):\\n    ans[v] = x, y\\n    nx = [(l, 0), (0, -l), (-l, 0), (0, l)]\\n    if t == 0: p = 0, 1, 3\\n    if t == 1: p = 0, 1, 2\\n    if t == 2: p = 1, 2, 3\\n    if t == 3: p = 0, 2, 3\\n    listv = [u for u in g[v] if u != pr]\\n    g[v] = listv[:]\\n    for i in range(min(len(p), len(g[v]))):\\n        dx = nx[p[i]][0]\\n        dy = nx[p[i]][1]\\n        newx = x + dx\\n        newy = y + dy\\n        u = g[v][i]\\n        dfs(u, newx, newy, p[i], l // 4, v)\\n\\nread = lambda: map(int, input().split())\\nn = int(input())\\ng = [list() for i in range(n + 1)]\\nfor i in range(n - 1):\\n    u, v = read()\\n    g[u].append(v)\\n    g[v].append(u)\\ndef fail():\\n    print('NO')\\n    return\\nroot = 1\\nfor i in range(n + 1):\\n    if len(g[i]) > 4:\\n        fail()\\n    if len(g[i]) > len(g[root]):\\n        root = i\\nans = [0] * (n + 1)\\nans[root] = (0, 0)\\ninf = 10 ** 18\\nl = inf // 4\\nnx = [(l, 0), (0, -l), (-l, 0), (0, l)]\\nfor i in range(len(g[root])):\\n    dx = nx[i][0]\\n    dy = nx[i][1]\\n    newx = 0 + dx\\n    newy = 0 + dy    \\n    dfs(g[root][i], newx, newy, i, l // 4, root)\\nprint('YES')\\n[print(*i) for i in ans[1:]]\", \"def main():\\n\\tn = int(input())\\n\\tgraph = [[] for i in range(n)]\\n\\tans = [(0,0)] * n\\n\\t\\n\\tfor _ in range(n - 1):\\n\\t\\tu, v = [int(el) for el in input().split()]\\n\\t\\tu -= 1\\n\\t\\tv -= 1\\n\\t\\tgraph[u].append(v)\\n\\t\\tgraph[v].append(u)\\n\\t\\n\\tfor l in graph:\\n\\t\\tif len(l) > 4:\\n\\t\\t\\tprint('NO')\\n\\t\\t\\treturn\\n\\t\\n\\tstep = 1 << 28\\n\\t\\n\\tused = [False] * n\\n\\tdef dfs(v, direction, step, koord):\\n\\t\\tused[v] = True\\n\\t\\tif direction == 'u':\\n\\t\\t\\tmy_koord = (koord[0] + step, koord[1])\\n\\t\\t\\tdirs = ['u', 'l', 'r']\\n\\t\\telif direction == 'd':\\n\\t\\t\\tmy_koord = (koord[0] - step, koord[1])\\n\\t\\t\\tdirs = ['d', 'l', 'r']\\n\\t\\telif direction == 'l':\\n\\t\\t\\tmy_koord = (koord[0], koord[1] - step)\\n\\t\\t\\tdirs = ['u', 'd', 'l']\\n\\t\\telif direction == 'r':\\n\\t\\t\\tmy_koord = (koord[0], koord[1] + step)\\n\\t\\t\\tdirs = ['u', 'd', 'r']\\n\\t\\telif direction == '':\\n\\t\\t\\tmy_koord = (0, 0)\\n\\t\\t\\tdirs = ['u', 'd', 'l', 'r']\\n\\t\\t\\n\\t\\tans[v] = my_koord\\n\\t\\t\\n\\t\\td = 0\\n\\t\\tfor u in graph[v]:\\n\\t\\t\\tif not used[u]:\\n\\t\\t\\t\\tdfs(u, dirs[d], step >> 1, my_koord)\\n\\t\\t\\t\\td += 1\\n\\t\\n\\tdfs(0, '', step, (0, 0))\\n\\t\\n\\tprint('YES')\\n\\tfor k in ans:\\n\\t\\tprint(k[0], k[1])\\n\\t\\nmain()\", \"def dfs(v, x, y, t, l, pr):\\n    ans[v] = x, y\\n    p = [(0, 1, 3), (0, 1, 2), (1, 2, 3), (0, 2, 3)][t]\\n    g[v] = [u for u in g[v] if u != pr]\\n    for i in range(min(len(p), len(g[v]))):\\n        newx = x + nx[p[i]][0] * l\\n        newy = y + nx[p[i]][1] * l\\n        dfs(g[v][i], newx, newy, p[i], l // 4, v)\\n\\nread = lambda: map(int, input().split())\\nn = int(input())\\ng = [list() for i in range(n + 1)]\\nfor i in range(n - 1):\\n    u, v = read()\\n    g[u].append(v)\\n    g[v].append(u)\\nroot = 1\\nfor i in range(n + 1):\\n    if len(g[i]) > 4:\\n        print('NO')\\n        return\\nans = [0] * (n + 1)\\nans[root] = 0, 0\\ninf = 10 ** 18\\nl = inf // 4\\nnx = (1, 0), (0, -1), (-1, 0), (0, 1)\\nfor i in range(len(g[root])):\\n    dfs(g[root][i], nx[i][0] * l, nx[i][1] * l, i, l // 4, root)\\nprint('YES')\\n[print(*i) for i in ans[1:]]\", \"def dfs(v, x, y, t, l, pr):\\n    ans[v] = x, y\\n    p = [(0, 1, 3), (0, 1, 2), (1, 2, 3), (0, 2, 3)][t]\\n    g[v] = [u for u in g[v] if u != pr]\\n    for i in range(min(len(p), len(g[v]))):\\n        newx = x + nx[p[i]][0] * l\\n        newy = y + nx[p[i]][1] * l\\n        dfs(g[v][i], newx, newy, p[i], l // 4, v)\\n\\nread = lambda: map(int, input().split())\\nn = int(input())\\ng = [list() for i in range(n + 1)]\\nfor i in range(n - 1):\\n    u, v = read()\\n    g[u].append(v)\\n    g[v].append(u)\\nroot = 1\\nfor i in range(n + 1):\\n    if len(g[i]) > 4:\\n        print('NO')\\n        return\\nans = [0] * (n + 1)\\nans[root] = 0, 0\\ninf = 10 ** 18\\nl = inf // 4\\nnx = (1, 0), (0, -1), (-1, 0), (0, 1)\\nfor i in range(len(g[root])):\\n    dfs(g[root][i], nx[i][0] * l, nx[i][1] * l, i, l // 4, root)\\nprint('YES')\\n[print(*i) for i in ans[1:]]\", \"#!/usr/bin/env python3\\nfrom collections import *\\ndef ri():\\n    return list(map(int, input().split()))\\n\\n\\nd = [[1,0], [0, 1], [-1, 0], [0, -1]]\\n\\ndef bfs(s, adj, v, l):\\n    if v[s] == 1:\\n        return 0\\n    q = deque()\\n    q.append(s)\\n    v[s] = 1\\n    while q:\\n        n = q.popleft()\\n        for a in adj[n]:\\n            if v[a] == 0:\\n                for i in range(4):\\n                    if dv[n][i] == 0:\\n                        dv[n][i] = 1\\n                        break\\n                pos[a][0] = pos[n][0] + d[i][0]*2**(31-l[n])\\n                pos[a][1] = pos[n][1] + d[i][1]*2**(31-l[n])\\n                if i == 0:\\n                    dv[a][2] = 1\\n                elif i == 1:\\n                    dv[a][3] = 1\\n                elif i == 2:\\n                    dv[a][0] = 1\\n                elif i == 3:\\n                    dv[a][1] = 1\\n                l[a] = l[n] + 1\\n                q.append(a)\\n                v[a] = 1\\n\\n\\nn = int(input())\\nadj = [set() for i in range(n)]\\nv = [0 for i in range(n)]\\nl = [0 for i in range(n)]\\ndv = [[0,0,0,0] for i in range(n)]\\npos = [[0, 0] for i in range(n)]\\n\\nfor i in range(n-1):\\n    a, b = ri()\\n    a -= 1\\n    b -= 1\\n    adj[a].add(b)\\n    adj[b].add(a)\\n\\nfor i in range(n):\\n    if len(adj[i]) > 4:\\n        print(\\\"NO\\\")\\n        return\\n\\nbfs(0, adj, v, l)\\n\\nprint(\\\"YES\\\")\\nfor i in range(n):\\n    print(pos[i][0], pos[i][1])\\n\\n\", \"n = int(input())\\np = [set() for i in range(n)]\\nfor k in range(n - 1):\\n    u, v = map(int, input().split())\\n    p[u - 1].add(v - 1)\\n    p[v - 1].add(u - 1)\\n\\ns = [(0, 0)] * n\\nt = [(0, 1 << 30, 7)]\\nl = [1, 0, -1, 0, 1]\\n\\nwhile t:\\n    u, d, j = t.pop()\\n    x, y = s[u]\\n    i = 0\\n    for v in p[u]:\\n        if i == j: i += 1\\n        if i > 3: print('NO');return\\n        p[v].remove(u)\\n        s[v] = (x + l[i] * d, y + l[i + 1] * d)\\n        t.append((v, d >> 1, (i + 2) % 4))\\n        i += 1\\n\\nprint('YES')\\nfor x, y in s: print(x, y)\", \"from collections import deque\\n\\nn = int(input())\\ndx = [-1, 0, 1, 0]\\ndy = [0, -1, 0, 1]\\ngr = [[] for i in range(n)]\\n\\nfor i in range(n - 1):\\n    a, b = [int(i) for i in input().split()]\\n    a -= 1\\n    b -= 1\\n    gr[a].append(b)\\n    gr[b].append(a)\\nfor i in range(n):\\n    if len(gr[i]) > 4:\\n        print(\\\"NO\\\")\\n        return\\nprint(\\\"YES\\\")\\nd = deque()\\nd.append((0, 10 ** 18 // 2, 10 ** 18 // 2, -1, -1, 50))\\nans = [0] * n\\nwhile len(d) > 0:\\n    v = d[0][0]\\n    x = d[0][1]\\n    y = d[0][2]\\n    ans[v] = (d[0][1], d[0][2])\\n    p = d[0][4]\\n    dr = d[0][3]\\n    pw = d[0][5]\\n    d.popleft()\\n    if p != -1:\\n        gr[v].pop(gr[v].index(p))\\n    cur = 0\\n    for i in range(4):\\n        if i == dr:\\n            continue\\n        if cur == len(gr[v]):\\n            break\\n        ngh = gr[v][cur]\\n        d.append((ngh, x + 2 ** pw * dx[i], y + 2 ** pw * dy[i], (i + 2) % 4, v, pw - 1))\\n        cur += 1\\nfor i in ans:\\n    print(*i)\", \"n = int(input())\\nadj = [[] for _ in range(n)]\\n\\nfor _ in range(n - 1):\\n    u, v = list(map(int, input().split()))\\n    adj[u - 1].append(v - 1)\\n    adj[v - 1].append(u - 1)\\n\\nfrom collections import deque\\ndef bfs(v):\\n    vis = [i == v for i in range(n)]\\n    paths = deque([[v]])\\n\\n    while paths:\\n        p = paths.popleft()\\n        for nv in adj[p[-1]]:\\n            if not vis[nv]:\\n                vis[nv] = True\\n                paths.append(p + [nv]) \\n\\n    return p\\n\\ndiameter = bfs(0)\\ndiameter = bfs(diameter[-1])\\np = diameter[len(diameter) // 2]\\n\\nstart = (0, 0)\\nmove = [(0, 1), (1, 0), (0, -1), (-1, 0)]\\ngpt = lambda pt, i, dis : (pt[0] + move[i][0] * dis, pt[1] + move[i][1] * dis)\\n\\nvis = [False] * n\\ndis = 2 ** (len(diameter) + 1)\\n\\nans = [0] * n\\nq = deque([(p, start, -1, dis)])\\n\\nwhile q:\\n    p, start, dr, dis = q.popleft()\\n    vis[p] = True\\n    ans[p] = start\\n\\n    if len(adj[p]) > 4:\\n        print(\\\"NO\\\")\\n        return\\n    \\n    if dr == -1:\\n        drs = [i for i in range(4)]\\n    else:\\n        drs = [i for i in range(4) if gpt(move[i], dr, 1) != (0, 0)]\\n\\n    for nv in adj[p]:       \\n        if not vis[nv]:\\n            vis[nv], dr = True, drs.pop()\\n            npt = gpt(start, dr, dis)\\n            q.append((nv, npt, dr, dis // 2))\\n            ans[nv] = npt\\n\\nprint(\\\"YES\\\")\\nfor pt in ans:\\n    print(*pt)\\n\\n\\n\\n\", \"#https://codeforces.com/problemset/problem/761/E\\ndef solve():\\n    def push(u, v, g):\\n        if u not in g:\\n            g[u] = []\\n        if v not in g:\\n            g[v] = []    \\n        g[u].append(v)\\n        g[v].append(u)\\n        \\n    n = int(input())\\n    g = {}\\n    \\n    for _ in range(n-1):\\n        u, v = map(int, input().split())\\n        push(u, v, g)\\n    \\n    for u in g:\\n        if len(g[u]) > 4:\\n            return 'NO', None\\n    d = {}    \\n    build(1, 0, 0, 0, 31, -1, d, g)\\n    s = ''\\n    for u in range(1, n+1):\\n        x, y = d[u]\\n        s += str(x) + ' ' + str(y)\\n        s += '\\\\n'\\n    return 'YES', s\\n\\ndef cal_pos(dir_, cur_x, cur_y, cur_base):\\n    if dir_   == 0:\\n        return cur_x, cur_y + (1<<cur_base)\\n    elif dir_ == 1:\\n        return cur_x + (1<<cur_base), cur_y\\n    elif dir_ == 2:\\n        return cur_x, cur_y - (1<<cur_base)\\n    else:\\n        return cur_x - (1<<cur_base), cur_y\\n        \\ndef build(u, p, cur_x, cur_y, cur_base, pre_dir, d, g):\\n    d[u]  = [cur_x, cur_y]\\n    type_ = [0,1,2,3]\\n        \\n    if pre_dir in type_:\\n        type_.remove(pre_dir)\\n    \\n    if u in g:\\n        for v in g[u]:\\n            if v != p:\\n                dir_ = type_.pop() \\n                \\n                next_x, next_y =  cal_pos(dir_, cur_x, cur_y, cur_base)    \\n                build(v, u, next_x, next_y, cur_base-1, (dir_ - 2)%4, d, g)\\n                \\nans ,s = solve()\\nif ans == 'NO':\\n    print(ans)\\nelse:    \\n    print(ans)\\n    print(s)\"]",
  "input_output": "{\"inputs\": [\"7\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n\", \"6\\n1 2\\n2 3\\n2 4\\n2 5\\n2 6\\n\", \"4\\n1 2\\n2 3\\n3 4\\n\", \"10\\n2 9\\n9 3\\n3 10\\n9 4\\n9 6\\n9 5\\n2 7\\n2 1\\n2 8\\n\", \"10\\n2 5\\n5 6\\n6 1\\n6 7\\n6 8\\n5 10\\n5 3\\n2 9\\n2 4\\n\", \"8\\n7 8\\n8 2\\n2 4\\n8 6\\n8 5\\n7 3\\n7 1\\n\", \"10\\n10 9\\n9 3\\n3 4\\n4 5\\n5 1\\n1 8\\n8 2\\n2 6\\n6 7\\n\", \"12\\n1 5\\n5 7\\n7 4\\n4 6\\n4 2\\n7 11\\n7 9\\n5 10\\n5 3\\n1 8\\n1 12\\n\", \"15\\n2 5\\n5 10\\n10 14\\n14 3\\n3 7\\n7 11\\n3 6\\n3 15\\n14 1\\n14 8\\n14 12\\n10 13\\n5 4\\n2 9\\n\", \"20\\n12 7\\n7 17\\n17 19\\n19 15\\n15 4\\n4 5\\n5 18\\n18 16\\n16 13\\n13 2\\n2 3\\n16 8\\n18 9\\n18 11\\n5 10\\n5 14\\n4 6\\n17 1\\n17 20\\n\", \"21\\n12 20\\n20 6\\n6 9\\n9 11\\n11 5\\n5 7\\n7 17\\n17 16\\n16 19\\n19 8\\n16 21\\n17 13\\n7 4\\n5 18\\n11 3\\n11 1\\n6 14\\n6 2\\n20 15\\n20 10\\n\", \"20\\n6 20\\n20 10\\n10 5\\n5 2\\n2 7\\n7 14\\n14 4\\n4 3\\n14 15\\n14 19\\n7 18\\n7 8\\n2 13\\n5 9\\n5 1\\n10 12\\n20 11\\n20 17\\n6 16\\n\", \"15\\n8 14\\n14 3\\n3 1\\n1 13\\n13 5\\n5 15\\n15 2\\n15 4\\n5 10\\n13 6\\n1 12\\n3 11\\n14 7\\n8 9\\n\", \"13\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n3 10\\n4 11\\n4 12\\n4 13\\n\", \"20\\n1 2\\n1 3\\n1 4\\n1 5\\n2 6\\n2 7\\n2 8\\n3 9\\n3 10\\n3 11\\n4 12\\n4 13\\n4 14\\n5 15\\n5 16\\n5 17\\n18 17\\n19 17\\n20 17\\n\", \"1\\n\", \"20\\n6 1\\n7 1\\n8 1\\n6 5\\n5 4\\n4 3\\n3 2\\n7 9\\n9 10\\n10 11\\n11 12\\n12 13\\n14 8\\n15 14\\n15 16\\n17 16\\n17 18\\n18 19\\n19 20\\n\", \"25\\n1 2\\n1 3\\n1 4\\n2 5\\n5 6\\n6 7\\n7 8\\n2 9\\n9 10\\n11 2\\n12 11\\n13 12\\n3 14\\n14 15\\n14 16\\n16 17\\n14 18\\n18 19\\n20 4\\n20 21\\n20 22\\n22 23\\n20 24\\n24 25\\n\", \"30\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n1 8\\n1 9\\n1 10\\n1 11\\n1 12\\n1 13\\n1 14\\n1 15\\n1 16\\n1 17\\n1 18\\n1 19\\n1 20\\n1 21\\n1 22\\n1 23\\n1 24\\n1 25\\n1 26\\n1 27\\n1 28\\n1 29\\n1 30\\n\", \"21\\n17 7\\n7 14\\n14 6\\n6 2\\n2 20\\n20 11\\n11 4\\n11 18\\n20 16\\n20 13\\n2 1\\n2 15\\n6 19\\n6 5\\n14 21\\n14 10\\n7 3\\n7 12\\n17 9\\n17 8\\n\", \"17\\n9 17\\n17 4\\n4 1\\n1 3\\n3 14\\n14 7\\n7 16\\n16 10\\n16 15\\n7 8\\n14 13\\n3 11\\n1 6\\n4 5\\n17 2\\n9 12\\n\", \"19\\n3 12\\n12 11\\n11 17\\n17 2\\n2 19\\n19 16\\n19 4\\n19 1\\n2 8\\n2 5\\n17 14\\n17 10\\n11 13\\n11 9\\n12 18\\n12 6\\n3 15\\n3 7\\n\", \"18\\n17 13\\n13 11\\n11 9\\n9 15\\n15 3\\n3 16\\n3 14\\n15 10\\n15 5\\n9 1\\n9 7\\n11 4\\n11 2\\n13 6\\n13 12\\n17 18\\n17 8\\n\", \"30\\n29 3\\n3 13\\n13 7\\n7 5\\n5 6\\n6 10\\n10 8\\n8 26\\n26 17\\n26 15\\n8 25\\n8 12\\n8 11\\n10 27\\n10 14\\n6 21\\n5 2\\n5 1\\n5 19\\n5 30\\n7 4\\n13 18\\n3 9\\n3 28\\n3 24\\n3 20\\n29 16\\n29 23\\n29 22\\n\", \"30\\n28 30\\n30 20\\n20 29\\n29 15\\n15 2\\n2 27\\n27 6\\n6 4\\n6 11\\n6 7\\n6 10\\n6 24\\n27 14\\n27 5\\n27 22\\n2 16\\n15 13\\n15 9\\n15 25\\n29 1\\n29 3\\n29 12\\n29 26\\n30 8\\n30 18\\n30 23\\n30 17\\n30 19\\n28 21\\n\", \"2\\n2 1\\n\", \"3\\n1 2\\n2 3\\n\", \"4\\n2 1\\n1 3\\n3 4\\n\", \"5\\n2 4\\n4 1\\n1 3\\n3 5\\n\", \"6\\n3 4\\n4 1\\n1 5\\n5 2\\n2 6\\n\", \"7\\n5 4\\n4 7\\n7 1\\n1 2\\n2 3\\n3 6\\n\", \"8\\n5 6\\n6 8\\n8 2\\n2 7\\n7 1\\n1 4\\n4 3\\n\", \"9\\n7 1\\n1 4\\n4 5\\n5 6\\n6 2\\n2 8\\n8 3\\n3 9\\n\", \"3\\n2 1\\n3 1\\n\", \"4\\n2 1\\n1 3\\n1 4\\n\", \"5\\n5 1\\n1 4\\n1 3\\n2 1\\n\", \"30\\n1 15\\n15 30\\n30 14\\n14 16\\n16 19\\n19 12\\n19 22\\n19 2\\n16 9\\n16 21\\n16 23\\n16 24\\n14 7\\n14 29\\n14 17\\n14 18\\n30 13\\n30 27\\n30 4\\n30 8\\n15 10\\n15 11\\n15 5\\n15 3\\n15 25\\n1 6\\n1 26\\n1 28\\n1 20\\n\", \"30\\n29 18\\n18 8\\n8 27\\n27 26\\n26 17\\n17 11\\n11 23\\n23 16\\n16 6\\n23 19\\n23 22\\n23 2\\n23 28\\n23 1\\n11 14\\n11 13\\n11 5\\n11 9\\n11 30\\n17 15\\n26 3\\n26 7\\n26 25\\n27 24\\n27 4\\n8 21\\n18 20\\n18 12\\n29 10\\n\", \"30\\n10 15\\n15 17\\n17 14\\n14 7\\n7 3\\n3 27\\n3 25\\n3 21\\n3 5\\n3 9\\n7 11\\n7 18\\n7 26\\n7 16\\n7 4\\n7 8\\n7 23\\n7 2\\n7 29\\n17 12\\n17 30\\n17 13\\n17 24\\n17 20\\n17 28\\n17 22\\n17 1\\n15 6\\n10 19\\n\", \"30\\n8 23\\n23 13\\n13 29\\n29 14\\n13 18\\n13 5\\n13 24\\n13 21\\n13 4\\n13 1\\n13 9\\n13 16\\n13 19\\n23 12\\n23 17\\n23 11\\n23 27\\n23 22\\n23 28\\n23 20\\n8 3\\n8 10\\n8 26\\n8 15\\n8 25\\n8 6\\n8 30\\n8 7\\n8 2\\n\", \"17\\n2 13\\n13 7\\n7 6\\n6 12\\n6 9\\n6 14\\n6 1\\n6 4\\n7 8\\n7 11\\n13 17\\n13 10\\n2 3\\n2 5\\n2 16\\n2 15\\n\", \"20\\n17 18\\n18 13\\n13 6\\n6 3\\n6 2\\n6 14\\n13 20\\n13 15\\n18 11\\n18 7\\n18 19\\n18 9\\n17 5\\n17 4\\n17 12\\n17 10\\n17 16\\n17 1\\n17 8\\n\", \"6\\n2 1\\n1 4\\n4 6\\n4 3\\n1 5\\n\", \"10\\n9 1\\n9 10\\n9 5\\n9 8\\n9 2\\n9 7\\n9 3\\n9 6\\n9 4\\n\", \"15\\n5 2\\n2 7\\n7 3\\n3 9\\n9 15\\n9 12\\n3 10\\n3 11\\n7 1\\n7 6\\n2 13\\n2 8\\n5 14\\n5 4\\n\", \"30\\n7 20\\n20 25\\n25 4\\n4 17\\n17 28\\n4 23\\n4 3\\n4 10\\n25 18\\n25 13\\n25 9\\n25 14\\n25 29\\n25 27\\n25 21\\n25 6\\n20 5\\n20 15\\n20 16\\n20 24\\n20 2\\n7 26\\n7 12\\n7 8\\n7 1\\n7 30\\n7 19\\n7 11\\n7 22\\n\", \"30\\n6 29\\n29 27\\n27 4\\n4 2\\n2 10\\n10 19\\n10 8\\n10 25\\n2 16\\n2 15\\n2 28\\n4 1\\n4 30\\n27 18\\n27 12\\n27 20\\n27 7\\n27 3\\n29 26\\n29 23\\n29 17\\n29 22\\n29 14\\n29 24\\n6 5\\n6 9\\n6 13\\n6 21\\n6 11\\n\", \"19\\n13 3\\n3 10\\n10 19\\n19 14\\n19 16\\n19 17\\n19 2\\n19 11\\n10 7\\n10 6\\n10 18\\n10 12\\n10 15\\n10 8\\n3 9\\n3 5\\n13 1\\n13 4\\n\", \"18\\n12 16\\n16 5\\n5 10\\n10 7\\n10 11\\n5 18\\n5 8\\n5 13\\n5 6\\n5 3\\n5 1\\n16 2\\n16 9\\n12 17\\n12 15\\n12 4\\n12 14\\n\", \"15\\n5 13\\n13 15\\n15 10\\n10 9\\n10 6\\n10 8\\n15 7\\n13 4\\n13 11\\n13 2\\n5 14\\n5 1\\n5 3\\n5 12\\n\", \"4\\n3 2\\n3 4\\n3 1\\n\"], \"outputs\": [\"YES\\n0 0\\n0 1073741824\\n1073741824 0\\n0 1610612736\\n536870912 1073741824\\n1073741824 536870912\\n1610612736 0\\n\", \"NO\\n\", \"YES\\n0 0\\n0 1073741824\\n0 1610612736\\n0 1879048192\\n\", \"NO\\n\", \"YES\\n0 0\\n0 1879048192\\n-268435456 1610612736\\n134217728 1879048192\\n0 1610612736\\n0 1073741824\\n536870912 1073741824\\n-536870912 1073741824\\n0 2013265920\\n268435456 1610612736\\n\", \"YES\\n0 0\\n0 1879048192\\n536870912 1073741824\\n0 2013265920\\n-268435456 1610612736\\n268435456 1610612736\\n0 1073741824\\n0 1610612736\\n\", \"YES\\n0 0\\n1073741824 536870912\\n0 1879048192\\n0 1610612736\\n0 1073741824\\n1073741824 805306368\\n1073741824 939524096\\n1073741824 0\\n0 2013265920\\n0 2080374784\\n\", \"YES\\n0 0\\n134217728 1879048192\\n-536870912 1073741824\\n0 1879048192\\n0 1073741824\\n0 2013265920\\n0 1610612736\\n1073741824 0\\n-268435456 1610612736\\n536870912 1073741824\\n268435456 1610612736\\n0 -1073741824\\n\", \"NO\\n\", \"YES\\n0 0\\n536870912 1606418432\\n536870912 1608515584\\n536870912 1476395008\\n536870912 1543503872\\n603979776 1476395008\\n0 1610612736\\n545259520 1593835520\\n553648128 1577058304\\n570425344 1543503872\\n520093696 1577058304\\n0 1879048192\\n536870912 1602224128\\n503316480 1543503872\\n536870912 1342177280\\n536870912 1593835520\\n0 1073741824\\n536870912 1577058304\\n536870912 1073741824\\n-536870912 1073741824\\n\", \"YES\\n0 0\\n-134217728 1879048192\\n-536870912 1073741824\\n671088640 1342177280\\n536870912 1073741824\\n0 1879048192\\n536870912 1342177280\\n536870912 1593835520\\n0 1610612736\\n-67108864 2013265920\\n0 1073741824\\n0 2080374784\\n603979776 1476395008\\n134217728 1879048192\\n67108864 2013265920\\n536870912 1543503872\\n536870912 1476395008\\n805306368 1073741824\\n536870912 1577058304\\n0 2013265920\\n570425344 1543503872\\n\", \"YES\\n0 0\\n536870912 1073741824\\n536870912 1577058304\\n536870912 1543503872\\n0 1073741824\\n0 2013265920\\n536870912 1342177280\\n402653184 1342177280\\n-536870912 1073741824\\n0 1610612736\\n134217728 1879048192\\n268435456 1610612736\\n805306368 1073741824\\n536870912 1476395008\\n603979776 1476395008\\n0 2080374784\\n-134217728 1879048192\\n671088640 1342177280\\n469762048 1476395008\\n0 1879048192\\n\", \"YES\\n0 0\\n1073741824 939524096\\n0 1073741824\\n1207959552 805306368\\n1073741824 536870912\\n1610612736 0\\n268435456 1610612736\\n0 1879048192\\n0 2013265920\\n1342177280 536870912\\n536870912 1073741824\\n0 -1073741824\\n1073741824 0\\n0 1610612736\\n1073741824 805306368\\n\", \"YES\\n0 0\\n0 1073741824\\n1073741824 0\\n0 -1073741824\\n0 1610612736\\n536870912 1073741824\\n-536870912 1073741824\\n1073741824 536870912\\n1610612736 0\\n1073741824 -536870912\\n536870912 -1073741824\\n0 -1610612736\\n-536870912 -1073741824\\n\", \"YES\\n0 0\\n0 1073741824\\n1073741824 0\\n0 -1073741824\\n-1073741824 0\\n0 1610612736\\n536870912 1073741824\\n-536870912 1073741824\\n1073741824 536870912\\n1610612736 0\\n1073741824 -536870912\\n536870912 -1073741824\\n0 -1610612736\\n-536870912 -1073741824\\n-1073741824 536870912\\n-1073741824 -536870912\\n-1610612736 0\\n-1610612736 268435456\\n-1610612736 -268435456\\n-1879048192 0\\n\", \"YES\\n0 0\\n\", \"YES\\n0 0\\n0 2080374784\\n0 2013265920\\n0 1879048192\\n0 1610612736\\n0 1073741824\\n1073741824 0\\n0 -1073741824\\n1073741824 536870912\\n1073741824 805306368\\n1073741824 939524096\\n1073741824 1006632960\\n1073741824 1040187392\\n536870912 -1073741824\\n536870912 -805306368\\n536870912 -671088640\\n536870912 -603979776\\n536870912 -570425344\\n536870912 -553648128\\n536870912 -545259520\\n\", \"YES\\n0 0\\n0 1073741824\\n1073741824 0\\n0 -1073741824\\n0 1610612736\\n0 1879048192\\n0 2013265920\\n0 2080374784\\n536870912 1073741824\\n536870912 1342177280\\n-536870912 1073741824\\n-536870912 1342177280\\n-536870912 1476395008\\n1073741824 536870912\\n1073741824 805306368\\n1342177280 536870912\\n1342177280 671088640\\n805306368 536870912\\n805306368 671088640\\n536870912 -1073741824\\n536870912 -805306368\\n805306368 -1073741824\\n805306368 -939524096\\n536870912 -1342177280\\n671088640 -1342177280\\n\", \"NO\\n\", \"YES\\n0 0\\n0 1073741824\\n67108864 2013265920\\n536870912 1476395008\\n-268435456 1610612736\\n0 1610612736\\n0 2013265920\\n33554432 2080374784\\n0 2113929216\\n-134217728 1879048192\\n536870912 1342177280\\n-67108864 2013265920\\n536870912 805306368\\n0 1879048192\\n-536870912 1073741824\\n805306368 1073741824\\n0 2080374784\\n671088640 1342177280\\n268435456 1610612736\\n536870912 1073741824\\n134217728 1879048192\\n\", \"YES\\n0 0\\n268435456 1610612736\\n1073741824 0\\n0 1073741824\\n536870912 1073741824\\n0 -1073741824\\n1073741824 805306368\\n1207959552 805306368\\n0 1879048192\\n1073741824 1006632960\\n1610612736 0\\n0 2013265920\\n1342177280 536870912\\n1073741824 536870912\\n1140850688 939524096\\n1073741824 939524096\\n0 1610612736\\n\", \"YES\\n0 0\\n0 1610612736\\n0 2113929216\\n-536870912 1073741824\\n-268435456 1610612736\\n-33554432 2080374784\\n16777216 2113929216\\n268435456 1610612736\\n-67108864 2013265920\\n-134217728 1879048192\\n0 2013265920\\n0 2080374784\\n67108864 2013265920\\n134217728 1879048192\\n0 2130706432\\n536870912 1073741824\\n0 1879048192\\n33554432 2080374784\\n0 1073741824\\n\", \"YES\\n0 0\\n-268435456 1610612736\\n536870912 1342177280\\n268435456 1610612736\\n536870912 805306368\\n134217728 1879048192\\n-536870912 1073741824\\n67108864 2013265920\\n0 1073741824\\n805306368 1073741824\\n0 1610612736\\n-134217728 1879048192\\n0 1879048192\\n671088640 1342177280\\n536870912 1073741824\\n536870912 1476395008\\n0 2013265920\\n0 2080374784\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n0 0\\n0 1073741824\\n\", \"YES\\n0 0\\n0 1073741824\\n0 1610612736\\n\", \"YES\\n0 0\\n0 1073741824\\n1073741824 0\\n1073741824 536870912\\n\", \"YES\\n0 0\\n0 1610612736\\n1073741824 0\\n0 1073741824\\n1073741824 536870912\\n\", \"YES\\n0 0\\n1073741824 536870912\\n0 1610612736\\n0 1073741824\\n1073741824 0\\n1073741824 805306368\\n\", \"YES\\n0 0\\n1073741824 0\\n1073741824 536870912\\n0 1610612736\\n0 1879048192\\n1073741824 805306368\\n0 1073741824\\n\", \"YES\\n0 0\\n0 1610612736\\n1073741824 536870912\\n1073741824 0\\n0 2080374784\\n0 2013265920\\n0 1073741824\\n0 1879048192\\n\", \"YES\\n0 0\\n1073741824 939524096\\n1073741824 1040187392\\n1073741824 0\\n1073741824 536870912\\n1073741824 805306368\\n0 1073741824\\n1073741824 1006632960\\n1073741824 1056964608\\n\", \"YES\\n0 0\\n0 1073741824\\n1073741824 0\\n\", \"YES\\n0 0\\n0 1073741824\\n1073741824 0\\n0 -1073741824\\n\", \"YES\\n0 0\\n-1073741824 0\\n0 -1073741824\\n1073741824 0\\n0 1073741824\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n0 0\\n0 1073741824\\n1610612736 0\\n1073741824 0\\n0 -1073741824\\n1073741824 536870912\\n\", \"NO\\n\", \"YES\\n0 0\\n0 1610612736\\n536870912 1073741824\\n134217728 1879048192\\n0 1879048192\\n-536870912 1073741824\\n0 1073741824\\n-268435456 1610612736\\n536870912 1342177280\\n805306368 1073741824\\n536870912 805306368\\n671088640 1342177280\\n268435456 1610612736\\n0 2013265920\\n536870912 1476395008\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n0 0\\n0 1610612736\\n0 1073741824\\n536870912 1073741824\\n\"]}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/761/E",
  "starter_code": ""
}