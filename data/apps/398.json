{
  "task_id": "APPS/398",
  "problem_id": 398,
  "prompt": "Mahmoud has n line segments, the i-th of them has length a_{i}. Ehab challenged him to use exactly 3 line segments to form a non-degenerate triangle. Mahmoud doesn't accept challenges unless he is sure he can win, so he asked you to tell him if he should accept the challenge. Given the lengths of the line segments, check if he can choose exactly 3 of them to form a non-degenerate triangle.\n\nMahmoud should use exactly 3 line segments, he can't concatenate two line segments or change any length. A non-degenerate triangle is a triangle with positive area.\n\n\n-----Input-----\n\nThe first line contains single integer n (3 \u2264 n \u2264 10^5)\u00a0\u2014 the number of line segments Mahmoud has.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the lengths of line segments Mahmoud has.\n\n\n-----Output-----\n\nIn the only line print \"YES\" if he can choose exactly three line segments and form a non-degenerate triangle with them, and \"NO\" otherwise.\n\n\n-----Examples-----\nInput\n5\n1 5 3 2 4\n\nOutput\nYES\n\nInput\n3\n4 1 2\n\nOutput\nNO\n\n\n\n-----Note-----\n\nFor the first example, he can use line segments with lengths 2, 4 and 5 to form a non-degenerate triangle.",
  "solutions": "[\"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nok = False\\nfor i in range(n - 2):\\n\\tif a[i] + a[i + 1] > a[i + 2]:\\n\\t\\tok = True\\nprint((\\\"NO\\\", \\\"YES\\\")[ok])\", \"read = lambda: map(int, input().split())\\nn = int(input())\\na = sorted(read())\\nfor i in range(2, n):\\n    if a[i - 2] + a[i - 1] > a[i]:\\n        print('YES')\\n        break\\nelse:\\n    print('NO')\", \"n = int(input())\\nk = sorted(map(int, input().split()))\\nfor i in range(n - 2):\\n    if (k[i] + k[i + 1] > k[i + 2]):\\n        print(\\\"YES\\\")\\n        break\\nelse:\\n    print(\\\"NO\\\")\", \"input()\\na = list(map(int, input().split()))\\na.sort()\\n\\nfor i in range(len(a) - 2):\\n\\tif a[i] + a[i+1] > a[i+2]:\\n\\t\\tprint('YES')\\n\\t\\treturn\\n\\nprint('NO')\", \"n = int(input())\\narr = list(map(int, input().split()))\\narr.sort()\\nfor i in range(n - 2):\\n    a, b, c = arr[i], arr[i + 1], arr[i + 2]\\n    if a + b > c:\\n        print('YES')\\n        return\\nprint('NO')\\n\", \"\\n\\nn = int(input())\\nA = sorted([int(x) for x in input().split()])\\n\\n\\nfound = False\\nfor i in range(n - 2):\\n    if A[i] + A[i + 1] > A[i + 2]:\\n        found = True\\n\\nif found:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"def inp():\\n    return map(int, input().split(' '))\\n\\n\\ndef is_tr(a, b, c):\\n    if a < b + c:\\n        if b < a + c:\\n            if c < b + a:\\n                return True\\n    return False\\n\\n\\nn = int(input())\\na = list(inp())\\na.sort()\\n\\nfor i in range(n-2):\\n    if is_tr(a[i], a[i+1], a[i+2]):\\n        print('YES')\\n        return\\nprint('NO')\", \"n = int(input())\\nx = list(map(int, input().strip().split(' ')))\\n\\nx.sort()\\ntry:\\n    znak = True\\n    for i in range(len(x)):\\n        for j in range(i + 1, len(x) - 1):\\n            if x[i] + x[j] > x[j+1]:\\n                print('YES')\\n                znak = False\\n                1/0\\n    if znak:\\n        print('NO')\\n    \\nexcept:\\n    pass\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nf = False\\nfor i in range(n - 2):\\n    if a[i] + a[i + 1] > a[i + 2]:\\n        f = True\\nif f:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"#!/bin/python3\\nimport sys\\nn = int(input())\\na = list(map(int, input().split()))\\na = sorted(a)\\nfor i in range(0,n-2):\\n    if a[i] + a[i + 1] > a[i+2]:\\n        print(\\\"YES\\\")\\n        return\\nprint(\\\"NO\\\")\", \"\\ndef __starting_point():\\n\\tn, = map(int, input().split())\\n\\ta = list(map(int, input().split()))\\n\\tres = False\\n\\ta.sort()\\n\\tfor i in range(1, n-1):\\n\\t\\tif a[i-1] + a[i] > a[i+1]:\\n\\t\\t\\tres = True\\n\\t\\t\\tbreak\\n\\tif res:\\n\\t\\tprint(\\\"YES\\\")\\n\\telse:\\n\\t\\tprint(\\\"NO\\\")\\n__starting_point()\", \"import math, sys, itertools\\n\\ndef main():\\n\\tn = int(input())\\n\\ta = list(map(int, input().split()))\\n\\ta.sort()\\n\\tfor i in range(n-2):\\n\\t\\tif a[i]+a[i+1]>a[i+2]:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\treturn\\n\\tprint('NO')\\n\\t\\t\\t\\n\\t\\t\\n\\t\\t\\n\\t\\t \\n\\t\\t\\t\\n\\ndef __starting_point():\\n\\tmain()\\n\\n__starting_point()\", \"# Author: Maharshi Gor\\n\\ndef read(type=int):\\n    return type(input())\\n\\ndef read_arr(type=int):\\n    return [type(token) for token in input().split()]\\n\\nn = read()\\nA =  read_arr()\\n\\nA.sort()\\nfound = False\\nfor i in range(len(A)-2):\\n    if A[i] + A[i+1] > A[i+2]:\\n        found = True\\n        break\\nif found:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\", \"\\ndef isPossible(a):\\n    n = len(a)\\n    for i in range(2,n):\\n        if a[i] < a[i-1] + a[i-2]:\\n            return True\\n    return False\\n\\n\\n\\ndef __starting_point():\\n    n = int(input().strip())\\n    a = list(map(int, input().strip().split()))\\n    a = sorted(a)\\n\\n    if isPossible(a):\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\n\\n\\n    \\n\\n\\n__starting_point()\", \"n = int(input())\\na = [int(el) for el in input().split()]\\n\\na.sort()\\nfor i in range(n - 2):\\n\\tb, c, d = a[i], a[i+1], a[i+2]\\n\\tif b + c > d:\\n\\t\\tprint('YES')\\n\\t\\tbreak\\nelse:\\n\\tprint('NO')\\n\", \"n = int(input())\\na = [int(s) for s in input().split()]\\na.sort()\\nflag = False\\nfor i in range(len(a) - 2):\\n    if a[i] + a[i + 1] > a[i + 2]:\\n        flag = True\\n        break\\n\\nif (flag):\\n    print('YES')\\nelse:\\n    print('NO')\\n\", \"n = int(input())\\n\\nd = [int(i) for i in input().split()]\\n\\nd.sort()\\n\\nfor i in range(n - 2):\\n    a = d[i]\\n    b = d[i + 1]\\n    c = d[i + 2]\\n    if a + b > c and a + c > b and b + c > a:\\n        print(\\\"YES\\\")\\n        break\\nelse:\\n    print(\\\"NO\\\")\", \"#!/usr/bin/env python3\\ndef ri():\\n    return list(map(int, input().split()))\\n\\nn = int(input())\\n\\na = list(ri())\\n\\na.sort()\\n\\nfor i in range(len(a)-2):\\n    if a[i] + a[i+1] > a[i+2]:\\n        print(\\\"YES\\\")\\n        return\\n\\nprint(\\\"NO\\\")\\n\", \"n=int(input())\\na=sorted(map(int,input().split(\\\" \\\")))\\nf=False\\nfor i in range(n-2):\\n    if a[i]+a[i+1]>a[i+2]:\\n        f=True\\nprint(\\\"YES\\\" if f else \\\"NO\\\")\", \"n = int(input())\\na = sorted(map(int,input().split(' ')))\\n\\nans = \\\"NO\\\"\\nfor i in range(n-2):\\n    if a[i] + a[i+1] > a[i+2]:\\n        ans = \\\"YES\\\"\\nprint(ans)\\n\", \"n=int(input())\\nar=list(map(int,input().split()))\\nar.sort()\\nfl=False\\nfor i in range(1,n-1):\\n    if ar[n-i]<ar[n-i-1]+ar[n-i-2]:\\n        fl=True\\n        break\\nif fl:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"n=int(input())\\narr = list(map(int, input().split()))\\narr.sort()\\n\\ni,j=0,1\\nans = 'NO'\\nwhile(j<n-1):\\n    sm = arr[i]+arr[j]\\n    if(sm>arr[j+1]):\\n        ans = 'YES'\\n        break\\n    else:\\n        i+=1\\n        j+=1\\nprint(ans)\", \"n=int(input())\\nl=list(map(int,input().split()))\\nl=sorted(l)\\nc=0\\nfor i in range(n-2) :\\n    if l[i]+l[i+1]>l[i+2] :\\n        c=1\\n        break\\nif c==1 :\\n    print('YES')\\nelse :\\n    print('NO')\\n\", \"from collections import deque\\n\\ndef main():\\n    from sys import stdin\\n    lines = deque(line.strip() for line in stdin.readlines())\\n    # lines will now contain all of the input's lines in a list\\n    n = int(lines[0])\\n    nums = sorted(int(x) for x in lines[1].split())\\n    for i in range(2, n):\\n        if nums[i-2] + nums[i-1] > nums[i]:\\n            print(\\\"YES\\\")\\n            return\\n    print(\\\"NO\\\")\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"import sys\\n\\ndef debug(x, table):\\n    for name, val in table.items():\\n        if x is val:\\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\\n            return None\\n\\ndef solve():\\n    n = int(input())\\n    A = [int(i) for i in input().split()]\\n\\n    A.sort()\\n\\n    for i in range(n - 2):\\n        if A[i] + A[i + 1] > A[i + 2]:\\n            print('YES')\\n            return\\n    else:\\n        print('NO')\\n\\n\\ndef __starting_point():\\n    solve()\\n__starting_point()\"]",
  "input_output": "{\n  \"inputs\": [\n    \"5\\n1 5 3 2 4\\n\",\n    \"3\\n4 1 2\\n\",\n    \"30\\n197 75 517 39724 7906061 1153471 3 15166 168284 3019844 272293 316 16 24548 42 118 5792 5 9373 1866366 4886214 24 2206 712886 104005 1363 836 64273 440585 3576\\n\",\n    \"30\\n229017064 335281886 247217656 670601882 743442492 615491486 544941439 911270108 474843964 803323771 177115397 62179276 390270885 754889875 881720571 902691435 154083299 328505383 761264351 182674686 94104683 357622370 573909964 320060691 33548810 247029007 812823597 946798893 813659359 710111761\\n\",\n    \"40\\n740553458 532562042 138583675 75471987 487348843 476240280 972115023 103690894 546736371 915774563 35356828 819948191 138721993 24257926 761587264 767176616 608310208 78275645 386063134 227581756 672567198 177797611 87579917 941781518 274774331 843623616 981221615 630282032 118843963 749160513 354134861 132333165 405839062 522698334 29698277 541005920 856214146 167344951 398332403 68622974\\n\",\n    \"40\\n155 1470176 7384 765965701 1075 4 561554 6227772 93 16304522 1744 662 3 292572860 19335 908613 42685804 347058 20 132560 3848974 69067081 58 2819 111752888 408 81925 30 11951 4564 251 26381275 473392832 50628 180819969 2378797 10076746 9 214492 31291\\n\",\n    \"3\\n1 1000000000 1000000000\\n\",\n    \"4\\n1 1000000000 1000000000 1000000000\\n\",\n    \"3\\n1 1000000000 1\\n\",\n    \"5\\n1 2 3 5 2\\n\",\n    \"41\\n19 161 4090221 118757367 2 45361275 1562319 596751 140871 97 1844 310910829 10708344 6618115 698 1 87059 33 2527892 12703 73396090 17326460 3 368811 20550 813975131 10 53804 28034805 7847 2992 33254 1139 227930 965568 261 4846 503064297 192153458 57 431\\n\",\n    \"42\\n4317083 530966905 202811311 104 389267 35 1203 18287479 125344279 21690 859122498 65 859122508 56790 1951 148683 457 1 22 2668100 8283 2 77467028 13405 11302280 47877251 328155592 35095 29589769 240574 4 10 1019123 6985189 629846 5118 169 1648973 91891 741 282 3159\\n\",\n    \"43\\n729551585 11379 5931704 330557 1653 15529406 729551578 278663905 1 729551584 2683 40656510 29802 147 1400284 2 126260 865419 51 17 172223763 86 1 534861 450887671 32 234 25127103 9597697 48226 7034 389 204294 2265706 65783617 4343 3665990 626 78034 106440137 5 18421 1023\\n\",\n    \"44\\n719528276 2 235 444692918 24781885 169857576 18164 47558 15316043 9465834 64879816 2234575 1631 853530 8 1001 621 719528259 84 6933 31 1 3615623 719528266 40097928 274835337 1381044 11225 2642 5850203 6 527506 18 104977753 76959 29393 49 4283 141 201482 380 1 124523 326015\\n\",\n    \"45\\n28237 82 62327732 506757 691225170 5 970 4118 264024506 313192 367 14713577 73933 691225154 6660 599 691225145 3473403 51 427200630 1326718 2146678 100848386 1569 27 163176119 193562 10784 45687 819951 38520653 225 119620 1 3 691225169 691225164 17445 23807072 1 9093493 5620082 2542 139 14\\n\",\n    \"44\\n165580141 21 34 55 1 89 144 17711 2 377 610 987 2584 13 5 4181 6765 10946 1597 8 28657 3 233 75025 121393 196418 317811 9227465 832040 1346269 2178309 3524578 5702887 1 14930352 102334155 24157817 39088169 63245986 701408733 267914296 433494437 514229 46368\\n\",\n    \"3\\n1 1000000000 999999999\\n\",\n    \"5\\n1 1 1 1 1\\n\",\n    \"10\\n1 10 100 1000 10000 100000 1000000 10000000 100000000 1000000000\\n\",\n    \"5\\n2 3 4 10 20\\n\",\n    \"6\\n18 23 40 80 160 161\\n\",\n    \"4\\n5 6 7 888\\n\",\n    \"9\\n1 1 2 2 4 5 10 10 20\\n\",\n    \"7\\n3 150 900 4 500 1500 5\\n\",\n    \"3\\n2 2 3\\n\",\n    \"7\\n1 2 100 200 250 1000000 2000000\\n\",\n    \"8\\n2 3 5 5 5 6 6 13\\n\",\n    \"3\\n2 3 4\\n\",\n    \"6\\n1 1 1 4 5 100\\n\",\n    \"13\\n1 2 3 5 8 13 22 34 55 89 144 233 377\\n\",\n    \"4\\n2 3 4 8\\n\",\n    \"3\\n5 6 7\\n\",\n    \"5\\n1 4 5 6 1000000\\n\",\n    \"4\\n5 6 7 20\\n\",\n    \"6\\n1 1 1 1 1 65\\n\",\n    \"4\\n3 4 5 100\\n\",\n    \"3\\n2 4 5\\n\",\n    \"7\\n1 1 1 1 1 10 1000\\n\",\n    \"4\\n1 1 2 3\\n\",\n    \"11\\n1 2 5 6 7 8 9 17 18 19 100\\n\",\n    \"4\\n5 16 20 200\\n\",\n    \"5\\n17 6 3 3 1\\n\",\n    \"3\\n1 1 1\\n\",\n    \"6\\n1 1 1 2 3 5\\n\",\n    \"4\\n2 4 6 6\\n\",\n    \"9\\n1 2 4 4 4 4 7 8 20\\n\",\n    \"9\\n1 1 2 5 5 5 10 10 20\\n\",\n    \"7\\n3 150 600 4 1700 6000 5\\n\",\n    \"5\\n5761 20966 27841 28800 29399\\n\",\n    \"9\\n1 2 3 6 7 10 11 12 24\\n\",\n    \"4\\n1 2 1 1\\n\",\n    \"5\\n1 1 2 3 4\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/766/B",
  "starter_code": ""
}