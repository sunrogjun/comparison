{
  "task_id": "APPS/238",
  "problem_id": 238,
  "prompt": "You are given an array $a_1, a_2, \\dots , a_n$ and two integers $m$ and $k$.\n\nYou can choose some subarray $a_l, a_{l+1}, \\dots, a_{r-1}, a_r$. \n\nThe cost of subarray $a_l, a_{l+1}, \\dots, a_{r-1}, a_r$ is equal to $\\sum\\limits_{i=l}^{r} a_i - k \\lceil \\frac{r - l + 1}{m} \\rceil$, where $\\lceil x \\rceil$ is the least integer greater than or equal to $x$. \n\nThe cost of empty subarray is equal to zero.\n\nFor example, if $m = 3$, $k = 10$ and $a = [2, -4, 15, -3, 4, 8, 3]$, then the cost of some subarrays are:  $a_3 \\dots a_3: 15 - k \\lceil \\frac{1}{3} \\rceil = 15 - 10 = 5$;  $a_3 \\dots a_4: (15 - 3) - k \\lceil \\frac{2}{3} \\rceil = 12 - 10 = 2$;  $a_3 \\dots a_5: (15 - 3 + 4) - k \\lceil \\frac{3}{3} \\rceil = 16 - 10 = 6$;  $a_3 \\dots a_6: (15 - 3 + 4 + 8) - k \\lceil \\frac{4}{3} \\rceil = 24 - 20 = 4$;  $a_3 \\dots a_7: (15 - 3 + 4 + 8 + 3) - k \\lceil \\frac{5}{3} \\rceil = 27 - 20 = 7$. \n\nYour task is to find the maximum cost of some subarray (possibly empty) of array $a$.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $m$, and $k$ ($1 \\le n \\le 3 \\cdot 10^5, 1 \\le m \\le 10, 1 \\le k \\le 10^9$).\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$).\n\n\n-----Output-----\n\nPrint the maximum cost of some subarray of array $a$.\n\n\n-----Examples-----\nInput\n7 3 10\n2 -4 15 -3 4 8 3\n\nOutput\n7\n\nInput\n5 2 1000\n-13 -4 -9 -20 -11\n\nOutput\n0",
  "solutions": "[\"N, M, K = list(map(int, input().split()))\\nA = [int(a) for a in input().split()]\\nS = [0]\\nfor a in A:\\n    S.append(S[-1]+M*a-K)\\nMI = [(10**50)] * M\\nans = 0\\nfor i in range(N+1):\\n    MI[i%M] = min(MI[i%M], S[i])\\n    for j in range(M):\\n        ans = max(ans, (S[i]-MI[(i-j)%M] - K*((-j)%M))//M)\\nprint(ans)\\n\\n\", \"n, m, k = map(int, input().split())\\nA = list(map(int, input().split()))\\nglans = 0\\nfor s in range(m):\\n    B = []\\n    f = s\\n    su = 0\\n    sus = 0\\n    for i in range(s, n):\\n        su += A[i]\\n        sus = max(sus, su)\\n        if (i + 1) % m == s:\\n            B.append(sus - k)\\n            B.append(su - sus)\\n            su = 0\\n            sus = 0\\n            f = i + 1\\n    dob = 0\\n    klol = 0\\n    for j in range(f, n):\\n        dob += A[j]\\n        klol = max(klol, dob - k)\\n    B = [0] + B + [klol]\\n    for i in range(1, len(B)):\\n        B[i] += B[i - 1]\\n    cnt = -10 ** 10\\n    ans = [0, 0]\\n    minsum = 10 ** 10\\n    candidat = 0\\n    for i in range(len(B)):\\n        if B[i] - minsum > cnt:\\n            cnt = B[i] - minsum\\n            ans[1] = i\\n            ans[0] = candidat\\n        if B[i] <= minsum:\\n            minsum = B[i]\\n            candidat = i\\n    glans = max(glans, B[ans[1]] - B[ans[0]])\\nprint(glans)\", \"n,m,k = [int(w) for w in input().split()]\\na = [int(w) for w in input().split()]\\n\\ndef f(o):\\n    r = e = 0\\n    for i, x in enumerate(a):\\n        if i < o:\\n            continue\\n        if i % m == o:\\n            e -= k\\n            if e < -k:\\n                e = -k\\n        e += x\\n        if e > r:\\n            r = e\\n    return r\\n\\nprint(max(f(o) for o in range(m)))\\n\", \"import math\\n\\nn, m, k = list(map(int, input().split()))\\narr = list(map(int, input().split()))\\n\\npart_sum = [0]\\nfor i in range(n):\\n\\tpart_sum.append(part_sum[-1] + arr[i])\\n\\n# print(part_sum)\\n\\npart_sum_add = [[] for _ in range(m)]\\nmin_in_part_sum_add = [[] for _ in range(m)]\\nfor shift in range(m):\\n\\tcount_blocks = math.ceil((n - shift) / m + 1)\\n\\tfor i in range(n + 1):\\n\\t\\tcur_part_sum = part_sum[i] + k * (count_blocks - ((i - shift) // m))\\n\\t\\tif i == 0 or cur_part_sum < prev_min_in_part_sum_add:\\n\\t\\t\\tcur_min_in_part_sum_add = cur_part_sum\\n\\t\\telse:\\n\\t\\t\\tcur_min_in_part_sum_add = prev_min_in_part_sum_add\\n\\n\\t\\t# cur_min_in_part_sum_add = part_sum_add[shift][-1] if i == 0 else min(part_sum_add[shift][-1], min_in_part_sum_add[shift][-1])\\n\\t\\tpart_sum_add[shift].append(cur_part_sum)\\n\\t\\tmin_in_part_sum_add[shift].append(cur_min_in_part_sum_add)\\n\\t\\tprev_min_in_part_sum_add = cur_min_in_part_sum_add\\n\\t# print(shift, part_sum_add[shift], min_in_part_sum_add[shift])\\n\\nmax_result = 0\\nfor i in range(1, n + 1):\\n\\tcurrent_shift = i % m\\n\\tcurrent_min = min_in_part_sum_add[current_shift][i]\\n\\tcurrent_ans = part_sum_add[current_shift][i] - current_min\\n\\t# print('[{}] shift={} min={} ans={}'.format(i, current_shift, current_min, current_ans))\\n\\tif current_ans > max_result:\\n\\t\\tmax_result = current_ans\\n\\nprint(max_result)\", \"import sys\\n\\nn, m, k = list(map(int, sys.stdin.readline().strip().split()))\\na = list(map(int, sys.stdin.readline().strip().split()))\\nb = [0] * (n+1)\\nfor i in range (1, n+1):\\n    b[i] = b[i-1] + m * a[i-1] - k\\nM = [10 ** 20] * m\\nans = 0\\nfor i in range (0, n+1):\\n    M[i % m] = min([M[i % m], b[i]])\\n    for j in range (0, m):\\n        if i > j:\\n            ans = max([ans, b[i]-M[j]-k*((m*i+m-(i-j))%m)])\\n    # print(j, M, ans)\\nprint(ans // m)\\n\", \"import sys\\ninput = sys.stdin.readline\\nfrom itertools import accumulate\\nimport copy\\n\\nn,m,k = list(map(int,input().split()))\\nA = list(map(int,input().split()))\\nANS = 0\\n\\nfor i in range(m):\\n    B = copy.deepcopy(A)\\n\\n    for j in range(i,n,m):\\n        B[j] -= k\\n\\n    SUM = list(accumulate(B))\\n    SUMMIN = [float(\\\"inf\\\")]*n +[0]\\n\\n    if i==0:\\n        SUMMIN[0] = 0\\n\\n    for j in range(max(1,i),n):\\n        if j % m == i % m:\\n            SUMMIN[j] = min(SUMMIN[j-1],SUM[j-1])\\n        else:\\n            SUMMIN[j] = SUMMIN[j-1]\\n\\n    for j in range(i,n):\\n        ANS = max(ANS,SUM[j] - SUMMIN[j])\\n\\nprint(ANS)\\n\\n    \\n    \\n\", \"import sys\\ninput = sys.stdin.readline\\nn,m,k=list(map(int,input().split()))\\nA=[int(i) for i in input().split()]\\nif n<=m:\\n  AA=[0]*(n+1)\\n  for i in range(n):\\n    AA[i+1]=AA[i]+A[i]\\n  mm=0\\n  for i in range(n+1):\\n    for j in range(i+1,n+1):\\n      mm=max(mm,AA[j]-AA[i]-k)\\nelse:\\n  DP=[[0]*(m+1) for _ in range(n+1)]\\n  for i in range(n):\\n    a=A[i]\\n    DP[i+1][0]=max([DP[i][0],DP[i][m],DP[i][m]+a-k,DP[i][1]])\\n    DP[i+1][1]=max(a-k,DP[i][m]+a-k)\\n    for j in range(2,m+1):\\n      DP[i+1][0]=max(DP[i+1][0],DP[i][j])\\n      if j>i+1:\\n        continue\\n      else:\\n        DP[i+1][j]=max(DP[i][j-1]+a,DP[i][m]+a-k)\\nprint(max(A[0]-k,0) if n==1 else mm if n<=m else max(0,max(DP[n])))\\n\", \"import copy\\n\\nn,m,k=list(map(int,input().split()))\\nA=list(map(int,input().split()))\\n\\nANS=0\\n\\nfor i in range(m):\\n    B=copy.deepcopy(A)\\n    for j in range(i,n,m):\\n        B[j]-=k\\n\\n    NOW=0\\n\\n    for j in range(i,n):\\n        if j%m==i:\\n            NOW=max(NOW+B[j],B[j])\\n        else:\\n            NOW+=B[j]\\n\\n        ANS=max(ANS,NOW)\\n\\nprint(ANS)\\n        \\n    \\n\", \"from sys import stdin, stdout, exit\\n\\nn, m, k = list(map(int, stdin.readline().split()))\\na = list(map(int, stdin.readline().split()))\\n\\ndef bf(a):\\n    best = 0\\n    best_arg = (-1, -1)\\n    for i in range(n):\\n        for j in range(i, n):\\n            cur = sum(a[i:j+1]) - k*((j - i) // m + 1)\\n            if cur > best:\\n                best = max(best, cur)\\n                best_arg = (i,j)\\n    return best, best_arg\\n\\ndef max_sum(a):\\n    if len(a) == 0:\\n        return 0\\n    elif len(a) == 1:\\n        return max(0, a[0] - k)\\n    mid = len(a) // 2\\n    l_rec = max_sum(a[:mid])\\n    r_rec = max_sum(a[mid:])\\n    l_bests = [0]*m\\n    r_bests = [0]*m\\n    l_sum = 0\\n    for idx in range(1,mid+1):\\n        l_sum += a[mid-idx]\\n        if idx % m == 0:\\n            l_sum -= k\\n        l_bests[idx%m] = max(l_bests[idx%m], l_sum)\\n    r_sum = 0\\n    for idx in range(0, len(a)-mid):\\n        r_sum += a[idx+mid]\\n        if (idx+1) % m == 0:\\n            r_sum -= k\\n        r_bests[(idx+1)%m] = max(r_bests[(idx+1)%m], r_sum)\\n\\n #   print(\\\"Array:\\\", a, \\\"mid:\\\", mid)\\n#    print(l_bests)\\n  #  print(r_bests)\\n    best_acr = 0\\n    for i in range(m):\\n        for j in range(m):\\n            best_acr = max(best_acr, l_bests[i] + r_bests[j] - (k if i+j>0 else 0) - (k if i+j>m else 0))\\n    ans = max(l_rec,r_rec, best_acr)\\n   # print(\\\"Answer:\\\", ans)\\n    return ans\\n\\n\\nans = max_sum(a)\\nstdout.write(str(ans) + \\\"\\\\n\\\")\\n#stdout.write(str(bf(a))+\\\"\\\\n\\\")\\n\", \"n, m, k = [int(i) for i in input().split()]\\nA = [int(i) for i in input().split()]\\n\\nbestbest = 0\\n\\ndef brute(n, m, k, A):\\n    ans = 0\\n    val = (0, 0)\\n    for i in range(n):\\n        for j in range(i, n):\\n            if ans < sum(A[i:j+1]) - k*(ceil((j-i+1)/m)):\\n                ans = sum(A[i:j+1]) - k*(ceil((j-i+1)/m))\\n                val = (i, j)\\n    return val, ans\\n\\nfor off in range(m):\\n    B = A[off:]\\n    C = []\\n    canstart = []\\n    for i in range(len(B)):\\n        if i%m == 0:\\n            C.append(-k)\\n            canstart.append(1)\\n        canstart.append(0)\\n        C.append(B[i])\\n\\n    best = 0\\n    run = 0\\n\\n    for i in range(len(C)):\\n        run += C[i]\\n        if run < -k:\\n            run = -k\\n        best = max(best, run)\\n    #print(best, C)\\n    bestbest = max(bestbest, best)\\n\\nprint(bestbest)\\n\", \"def max_subarray(A):\\n    max_ending_here = max_so_far = A[0]\\n    for x in A[1:]:\\n        max_ending_here = max(x, max_ending_here + x)\\n        max_so_far = max(max_so_far, max_ending_here)\\n    return max_so_far\\n \\nans = 0\\nn, m, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nfor i in range(m):\\n    li = a[0:i] + [-k]\\n    s = 0\\n    while True:\\n        li += a[i+s:min(i+m+s, len(a))]\\n        li += [-k]\\n        if i+m+s >= len(a):\\n            break\\n        s += m\\n    ans = max(max_subarray(li) - k,ans)\\nprint(ans)\\n\\n\", \"\\ndef __starting_point():\\n    n, m, k = list(map(int, input().split()))\\n    aa = list(map(int,input().split()))\\n    ans = 0\\n    for start in range(m):\\n        ac = aa[:]\\n        for i in range(start, n, m):\\n            ac[i] -= k\\n        cur = 0\\n        for i in range(start, n):\\n            if i%m == start:\\n                cur = max(ac[i] + cur, ac[i])\\n            else:\\n                cur += ac[i]\\n            ans = max(cur, ans)\\n    print(ans)\\n\\n__starting_point()\", \"# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\\nfrom sys import stdin, stdout\\nimport collections\\n \\n#T = int(input())\\n \\n#W,H = [int(x) for x in stdin.readline().split()]\\n#arr = [int(x) for x in stdin.readline().split()]\\n \\n#s = input()\\n#N = len(s)\\n \\nN,M,K = [int(x) for x in stdin.readline().split()]\\narr = [int(x) for x in stdin.readline().split()]\\n \\n\\n\\nres = 0\\nfor j in range(M):\\n    s = 0\\n    mini = 0\\n    for i in range(j,N):\\n        if i%M==j:\\n            mini = min(mini,s)\\n            s -= K\\n        \\n        s += arr[i]\\n        \\n        res = max(res,s-mini)\\n        \\nprint(res)\\n\\n\", \"base = 1000000007\\nn , m , k = map(int,input().split())\\na = list(map(int,input().split()))\\nmx = 0\\ns = 0\\ndp = []\\ndd= []\\nfor j in range(m):\\n    for i in range(n+1):\\n        dp.append(base)\\n        dd.append(0)\\n    for i in range(n):\\n        dd[i+1]=dd[i]+a[i]-k*(i % m== j)\\n        dp[i+1] = min(dd[i],dp[i])\\n        #print(dd)\\n        #print(dp)\\n        if (i % m == j):\\n            mx = max ( mx , dd[i+1]-dp[i+1])\\nprint(mx)\", \"'''input\\n5 3 10\\n1 2 10 2 3\\n'''\\nimport math\\ndef max_sub(arr,n):\\n\\tdp = [0]*n\\n\\tdp[0] = arr[0]\\n\\tfor i in range(1,n):\\n\\t\\tdp[i] = max(dp[i-1]+arr[i],arr[i])\\n\\treturn max(0,max(dp))\\nn,m,k = map(int,input().split())\\narr = list(map(int,input().split()))\\nq = -math.inf\\ndp = [0]*(300100)\\nfor i in range(300100):\\n\\tdp[i] = [q]*(11)\\nif (m==1):\\n\\tfor i in range(n):\\n\\t\\tarr[i]= arr[i]-k\\n\\tprint(max_sub(arr,n))\\nelse:\\n\\tfor i in range(n):\\n\\t\\tdp[i][1] = arr[i]-k\\n\\t\\tfor j in range(m):\\n\\t\\t\\tif (i-1<0 or dp[i-1][j]==q):\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\tif ((j+1)%m!=1):\\n\\t\\t\\t\\tdp[i][(j+1)%m] = dp[i-1][j]+arr[i]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tdp[i][(j+1)%m] = max(arr[i]-k,dp[i-1][j]+arr[i]-k)\\n\\tma=0\\n\\tfor i in range(n):\\n\\t\\t# s = \\\"\\\"\\n\\t\\tfor j in range(m):\\n\\t\\t\\t# s+=str(dp[i][j])+\\\" \\\"\\n\\t\\t\\tma = max(ma,dp[i][j])\\n\\t\\t# print(s)\\n\\tprint(ma)\", \"N, M, K = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\nbv = 0\\nfor ms in range(M):\\n    cv = 0\\n    for i in range(ms, N):\\n        v = A[i]\\n        if i % M == ms:\\n            v -= K\\n            cv = max(0, cv)\\n        cv += v\\n        bv = max(bv, cv)\\nprint(bv)\\n\", \"#Bhargey Mehta (Junior)\\n#DA-IICT, Gandhinagar\\nimport sys, math, queue\\n#sys.stdin = open('input.txt', 'r')\\nMOD = 998244353\\nsys.setrecursionlimit(1000000)\\n\\nn, m, k = map(int, input().split())\\na = list(map(int, input().split()))\\n\\ndp = [[-10**20 for i in range(m)] for i in range(n)]\\ndp[0][0] = a[0]-k\\n\\nfor i in range(1, n):\\n\\tfor j in range(m):\\n\\t\\tif j == 0:\\n\\t\\t\\tdp[i][j] = max(dp[i-1][m-1]+a[i], a[i])-k\\n\\t\\telse:\\n\\t\\t\\tdp[i][j] = dp[i-1][j-1]+a[i]\\n\\nans = 0\\nfor i in range(n):\\n\\tans = max(ans, max(dp[i]))\\nprint(ans)\", \"#Bhargey Mehta (Junior)\\n#DA-IICT, Gandhinagar\\nimport sys, math, queue\\n#sys.stdin = open('input.txt', 'r')\\nMOD = 998244353\\nsys.setrecursionlimit(1000000)\\n\\nn, m, k = map(int, input().split())\\na = list(map(int, input().split()))\\n\\ndp = [[-10**20 for i in range(m)] for i in range(n)]\\n\\nfor i in range(n):\\n    for j in range(min(m, i+1)):\\n        if j == 0:\\n            dp[i][j] = max(dp[i-1][m-1]+a[i], a[i])-k\\n        else:\\n            dp[i][j] = dp[i-1][j-1]+a[i]\\n\\nans = 0\\nfor i in range(n):\\n\\tans = max(ans, max(dp[i]))\\nprint(ans)\", \"n, m, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nsa = [0]*n\\n\\nans = 0\\n\\nfor i in range(n):\\n    sa[i] = a[i] - k\\n    s = a[i]\\n    for j in range(i-1, max(-1, i-m-1), -1):\\n        sa[i] = max(sa[i], sa[j] + s - k)\\n        s += a[j]\\n    if i < m:\\n        sa[i] = max(sa[i], s - k)\\n    sa[i] = max(sa[i], 0)\\n    ans = max(ans, sa[i])\\n\\nprint(ans)\\n\", \"n, m, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nret = 0\\nfor i in range(m):\\n\\tcur = 0\\n\\tfor j in range(i, n):\\n\\t\\tif j % m == i:\\n\\t\\t\\tcur = max(0, cur)\\n\\t\\t\\tcur -= k\\n\\t\\tcur += a[j]\\n\\t\\tret = max(ret, cur)\\nprint(ret)\", \"n,m,k = list(map(int,input().split()))\\na = list(map(int,input().split()))\\ndp = [[float('-inf')]*m for i in range(n)]\\ndp[0][0] = a[0]\\nfor i in range(1,n):\\n    for j in range(1,m):\\n        dp[i][j] = dp[i-1][j-1] + a[i]\\n    dp[i][0] = max(dp[i-1][m-1]-k, 0)+a[i]\\n        #if dp[i-1][j] != float()\\nprint(max(max([max(x) for x in dp])-k,0))    \", \"n, m, k = list(map(int, input().split()));\\na = list(map(int, input().split()));\\n\\nvalues = list()\\n\\nfor j in range(n):\\n    result = a[j];\\n    sum1 = 0;\\n    for i in range(m):\\n        if j-i>=0:\\n            sum1 = sum1 + a[j-i];\\n            if sum1 > result:\\n                result = sum1;\\n        else:\\n            continue;\\n    if j-m>=0:\\n        result = max(result, sum1 + values[j-m]);\\n    values.append(max(0, result-k));\\nprint((max(values)));\\n\", \"n, m, k = list(map(int, input().strip().split()))\\n\\na = list(map(int, input().strip().split()))\\na = [0] + a\\ndp = [0] * 300005\\nans = 0\\nfor i in range(1, n + 1):\\n    a[i] += a[i - 1]\\n    for j in range(1, m + 1):\\n        if i - j >= 0:\\n            dp[i] = max(dp[i], a[i] - a[i - j] - k)\\n    if i - m >= 0:\\n        dp[i] = max(dp[i], a[i] - a[i - m] + dp[i - m] - k)\\n    ans = max(ans, dp[i])\\n\\nprint(ans)\\n\", \"n, m, k = list(map(int, input().split()))\\n\\na = list(map(int, input().split()))\\n\\nbest = 0\\ndp = [0] * (n + 1)\\nfor i in range(n):\\n    b2 = 0\\n    for j in range(max(-1, i - m), i + 1):\\n        b2 = max(b2, dp[j] - k + sum(a[j + 1:i + 1]))\\n    dp[i] = max(b2, a[i] - k)\\n    best = max(best, dp[i])\\n\\nprint(best)\\n# print(dp)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"7 3 10\\n2 -4 15 -3 4 8 3\\n\",\n    \"5 2 1000\\n-13 -4 -9 -20 -11\\n\",\n    \"5 10 10\\n1000000000 1000000000 1000000000 1000000000 1000000000\\n\",\n    \"1 1 1\\n2\\n\",\n    \"5 10 10\\n1000000000 1000000000 -1000000000 1000000000 1000000000\\n\",\n    \"6 2 5\\n2 2 2 2 2 2\\n\",\n    \"1 10 1000000000\\n999999999\\n\",\n    \"6 6 10\\n-1 1000000000 1000000000 1000000000 1000000000 1000000000\\n\",\n    \"5 4 10\\n1000000000 1000000000 1000000000 1000000000 9\\n\",\n    \"5 4 10\\n1000000000 1000000000 1 1000000000 1000000000\\n\",\n    \"6 5 10\\n1 0 0 0 5 6\\n\",\n    \"5 3 10\\n1 2 10 2 3\\n\",\n    \"5 2 9\\n2 1 2 10 4\\n\",\n    \"7 3 3\\n2 2 2 3 -1 -1 -1\\n\",\n    \"4 3 10\\n3 3 6 7\\n\",\n    \"4 2 10\\n1 1000 1000 1\\n\",\n    \"52 6 669\\n642 20 568 -469 -266 744 -486 639 813 632 -539 -818 464 438 -349 -950 280 -93 -529 -920 -831 462 559 961 -837 -349 -653 849 820 -21 -120 -144 -269 605 -99 -276 -844 54 -276 837 785 -42 -749 796 534 -948 -318 -262 342 -426 -575 183\\n\",\n    \"20 10 1000\\n631 -660 -608 -133 -1324 1698 -229 -107 -540 1837 1827 448 -1574 1576 1751 848 -890 213 -442 522\\n\",\n    \"4 3 3\\n1 2 3 4\\n\",\n    \"20 2 9\\n1 -8 -5 -6 -5 -7 8 -2 7 2 -4 0 -1 3 6 8 -8 -9 2 -8\\n\",\n    \"5 3 757773391\\n-708202672 725600885 714386358 885416061 999472550\\n\",\n    \"5 2 2\\n1 64 103 -164 13\\n\",\n    \"5 2 4\\n3 4 5 6 7\\n\",\n    \"10 2 1\\n-1 8 3 -9 7 5 4 -1 -7 -3\\n\",\n    \"15 10 10\\n1 2 8 2 6 -2 9 7 9 7 -4 6 2 0 4\\n\",\n    \"7 3 10\\n1 9 -1 9 9 4 17\\n\",\n    \"5 3 4\\n1 1 1 7 9\\n\",\n    \"15 6 17153\\n-28263 14597 4735 1452 -14292 -31177 -20198 247 20554 2438 22266 -4468 -13551 32664 13810\\n\",\n    \"3 7 349078044\\n346450461 -151361596 -625105856\\n\",\n    \"42 9 460853333\\n323861481 622701467 -873400999 658408343 778669784 692090162 -536855569 -568971791 141069853 976448931 702178349 946412568 251299867 45637990 438945856 504996643 33902725 -815383452 -825003302 854426262 -851164757 -799150044 -985979822 -679814718 -301626285 721177185 -457830126 -769806217 215778808 -232808115 -110027967 -607959163 -943650801 -777973009 735775736 -117195663 -397831392 -114273903 408852339 -886059538 -750897112 833959335\\n\",\n    \"4 3 3\\n1 1 1 2\\n\",\n    \"4 2 10\\n5 10 10 10\\n\",\n    \"10 7 7\\n-1 5 5 -8 8 -2 5 6 7 6\\n\",\n    \"8 2 2\\n7 -6 8 6 7 -4 -9 -4\\n\",\n    \"12 1 500000000\\n12 39045157 78090314 117135471 156180628 195225785 234270942 273316099 312361256 351406413 390451570 1000000000\\n\",\n    \"12 3 10\\n9 10 10 10 10 10 3 3 3 13 0 0\\n\",\n    \"20 4 18\\n-6 8 -5 2 -5 8 9 5 0 1 9 -6 0 6 -3 -3 -4 1 0 0\\n\",\n    \"4 3 10\\n2 20 30 3\\n\",\n    \"6 3 7\\n10 -4 5 8 8 8\\n\",\n    \"4 1 470344322\\n81705360 -386468301 -887628688 22906761\\n\",\n    \"12 10 907658609\\n-194209259 414274888 393675849 878456237 106365458 -731983555 810695417 -273909797 -389852212 -531227416 828543257 41731960\\n\",\n    \"4 3 2\\n1 100 100 100\\n\",\n    \"8 3 10\\n1 9 -1 9 9 4 17 7\\n\",\n    \"4 3 10\\n1 11 11 11\\n\",\n    \"3 3 2\\n-1 1000 -1\\n\",\n    \"50 4 30\\n23 -33 -90 85 99 38 -40 63 -20 25 33 49 34 -64 48 68 10 50 -38 -11 77 -89 -75 -31 86 68 -90 -28 -60 -71 -53 -37 -86 -57 6 -76 -50 -96 22 8 -29 18 54 79 79 -1 37 35 -5 52\\n\",\n    \"6 3 10\\n4 0 0 2 5 5\\n\",\n    \"5 3 5\\n3 0 3 3 3\\n\",\n    \"30 6 457506246\\n-969121117 617558553 -129415554 304607443 107130946 445638713 224436189 334186220 660301253 -602596009 866988526 -519228763 107776201 459643776 -936500703 -181433899 -877982207 -736482030 -788123194 339761560 -373447196 -280404579 132070889 -8613357 541579575 -861092082 664002743 -498027327 464062613 16247559\\n\",\n    \"5 1 10\\n-1 -2 -3 -4 -5\\n\",\n    \"15 9 10\\n1 2 3 4 5 6 10 -17 16 -10 -5 15 15 -15 20\\n\",\n    \"30 10 701\\n62684 13503 59709 58247 -2946 37536 -35525 -63986 -88876 -3666 -3230 -14139 48440 92198 30628 -37164 82238 28387 -14045 -55610 5422 -91184 69956 -33024 -45254 -55725 25882 25873 59433 -84008\\n\",\n    \"46 3 8132\\n-87069 -13299 21975 68314 17889 -6291 21617 -25617 -49430 -29853 53005 -71441 -19437 42706 -15175 70615 -32798 43270 -16466 -58461 -97023 49150 62915 -42788 -22273 34346 -57197 70365 -71500 90645 -68792 -7967 75319 45706 -88665 -50385 87550 -87412 -65222 -2725 40765 -44101 -82127 -79163 -33327 44106\\n\",\n    \"12 10 907658609\\n-19420959 414274888 393675849 878456237 106365458 -731983555 810695417 -273909797 -389852212 -531227416 828543257 41731960\\n\",\n    \"47 2 9677\\n10883 -66708 16724 -49642 57909 -53732 81024 77029 22526 -35794 -18204 -19574 1499 -62540 -51119 -59874 65981 -31282 -15193 98997 -54845 23633 96916 -88428 49361 -97121 -24209 -96118 46336 -98765 -98264 -54210 -86800 -37177 69190 -9649 54629 10242 -26690 28718 -72548 2403 -57427 -41639 -58621 66698 -7198\\n\",\n    \"100 9 95\\n-49 33 -30 7 43 29 -10 22 -42 -29 28 34 -49 28 33 -41 -42 4 -35 -7 48 -13 -39 -28 -48 -34 30 35 5 -25 4 0 29 48 33 -43 0 19 -5 -2 -39 -2 29 -34 13 -6 38 20 -6 -48 31 -7 2 10 -43 -17 8 48 33 31 -8 46 7 39 -19 26 -31 -40 35 25 28 30 -39 29 9 26 44 -21 33 3 -27 -2 -13 2 23 19 41 -21 34 -18 -16 20 43 -25 32 13 -7 -10 22 -34\\n\",\n    \"14 5 17\\n41 -15 -47 -59 67 -11 -50 43 -20 31 66 -27 -71 55\\n\",\n    \"8 7 6\\n15 -16 -9 7 -6 -1 -14 2\\n\",\n    \"20 6 88\\n40 50 94 31 -67 8 -69 54 66 84 96 -85 53 43 30 24 -68 -99 73 -85\\n\",\n    \"4 9 113164398\\n295556036 -507915019 -326982322 -518908220\\n\",\n    \"4 7 219\\n-789 -125 -357 -176\\n\",\n    \"10 7 46\\n27 41 -24 32 25 24 -36 -14 48 -27\\n\",\n    \"1 7 159145800\\n201321354\\n\",\n    \"40 9 877169647\\n116006513 366294771 -157813159 -36781809 805692362 731481079 217770583 -472673548 -489084560 -296209833 -194483928 -858075383 -290173195 291750625 -820414519 516786419 -450695951 -618132928 -757837884 915884506 853711807 -622799691 333763686 -809051647 -216743160 423809518 -597560349 435932120 -364484175 733886972 345751269 -463264748 378617674 -98147123 -219210294 179773108 -8439174 454095808 -319000468 632720932\\n\",\n    \"18 5 170181265\\n-961528298 -281699017 -401645735 -697368732 174334773 -57944971 716829060 126008019 -812563037 56039402 629804706 -676146717 98023638 648427010 570074144 -438361317 -497217942 331474787\\n\",\n    \"44 2 531595322\\n926215961 -385821837 -278841122 -422772006 -509196878 -81824369 -101501043 -33095577 -520514931 402836017 48602657 881104200 -110528684 52550046 -208588735 -814534121 -548420443 410430115 -636402169 -848516069 -70639158 775203498 -679440929 -427359667 33598904 656872639 -225600926 57010433 -686004588 954173921 -183691317 65245783 811865477 -280371354 385569766 -148554605 -6165789 -956818726 -707171951 -616296946 -463546019 152596440 315750998 520478951\\n\",\n    \"1 7 5983227\\n-908030083\\n\",\n    \"1 10 1\\n-10\\n\"\n  ],\n  \"outputs\": [\n    \"7\\n\",\n    \"0\\n\",\n    \"4999999990\\n\",\n    \"1\\n\",\n    \"2999999990\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"4999999990\\n\",\n    \"3999999990\\n\",\n    \"3999999981\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"1990\\n\",\n    \"1673\\n\",\n    \"5713\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"1841501578\\n\",\n    \"165\\n\",\n    \"14\\n\",\n    \"15\\n\",\n    \"39\\n\",\n    \"27\\n\",\n    \"13\\n\",\n    \"42750\\n\",\n    \"0\\n\",\n    \"4215688994\\n\",\n    \"1\\n\",\n    \"15\\n\",\n    \"23\\n\",\n    \"17\\n\",\n    \"500000000\\n\",\n    \"42\\n\",\n    \"4\\n\",\n    \"43\\n\",\n    \"21\\n\",\n    \"0\\n\",\n    \"963825685\\n\",\n    \"298\\n\",\n    \"27\\n\",\n    \"23\\n\",\n    \"998\\n\",\n    \"358\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"1913823788\\n\",\n    \"0\\n\",\n    \"30\\n\",\n    \"262636\\n\",\n    \"118647\\n\",\n    \"963825685\\n\",\n    \"161225\\n\",\n    \"109\\n\",\n    \"103\\n\",\n    \"9\\n\",\n    \"212\\n\",\n    \"182391638\\n\",\n    \"0\\n\",\n    \"79\\n\",\n    \"42175554\\n\",\n    \"1165480693\\n\",\n    \"1146343527\\n\",\n    \"584403220\\n\",\n    \"0\\n\",\n    \"0\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1197/D",
  "starter_code": ""
}