{
  "task_id": "APPS/524",
  "problem_id": 524,
  "prompt": "Let's call a list of positive integers $a_0, a_1, ..., a_{n-1}$ a power sequence if there is a positive integer $c$, so that for every $0 \\le i \\le n-1$ then $a_i = c^i$.\n\nGiven a list of $n$ positive integers $a_0, a_1, ..., a_{n-1}$, you are allowed to:  Reorder the list (i.e. pick a permutation $p$ of $\\{0,1,...,n - 1\\}$ and change $a_i$ to $a_{p_i}$), then  Do the following operation any number of times: pick an index $i$ and change $a_i$ to $a_i - 1$ or $a_i + 1$ (i.e. increment or decrement $a_i$ by $1$) with a cost of $1$. \n\nFind the minimum cost to transform $a_0, a_1, ..., a_{n-1}$ into a power sequence.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($3 \\le n \\le 10^5$).\n\nThe second line contains $n$ integers $a_0, a_1, ..., a_{n-1}$ ($1 \\le a_i \\le 10^9$).\n\n\n-----Output-----\n\nPrint the minimum cost to transform $a_0, a_1, ..., a_{n-1}$ into a power sequence.\n\n\n-----Examples-----\nInput\n3\n1 3 2\n\nOutput\n1\n\nInput\n3\n1000000000 1000000000 1000000000\n\nOutput\n1999982505\n\n\n\n-----Note-----\n\nIn the first example, we first reorder $\\{1, 3, 2\\}$ into $\\{1, 2, 3\\}$, then increment $a_2$ to $4$ with cost $1$ to get a power sequence $\\{1, 2, 4\\}$.",
  "solutions": "[\"\\n\\nn=int(input())\\na=list(map(int,input().split()))\\na=sorted(a)\\n\\nif(n>65):\\n\\tprint(sum(a)-n)\\nelif(n==1 or n==2):\\n\\tprint(a[0]-1)\\nelse:\\n\\tans=10**20\\n\\n\\tfor i in range(1,50000):\\n\\t\\tnow=1\\n\\t\\tta=0\\n\\t\\tfor j in a:\\n\\t\\t\\tta+=abs(now-j)\\n\\t\\t\\tnow*=i\\n\\t\\tans=min(ans,ta)\\n\\n\\tprint(ans)\\n\", \"n = int(input())\\nb = list(map(int, input().split()))\\nb.sort()\\nans = float(\\\"inf\\\")\\nj = 1\\nwhile (j ** (n - 1) <= 10 ** 10):\\n    s = 0\\n    for p in range(n):\\n        s += abs(j ** p - b[p])\\n    ans = min(ans, s)\\n    j += 1\\nprint(ans)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\", \"n = int(input())\\narr = sorted(list(map(int, input().split())))\\n\\nans = sum(arr) - n\\n\\nfor i in range(2, 10 ** 9):\\n    if abs(i ** (n - 1) - arr[-1]) > ans:\\n        break\\n\\n    ans2 = 0\\n    for j in range(0, n):\\n        ans2 += abs(i ** j - arr[j])\\n\\n    ans = min(ans, ans2)\\n\\nprint(ans)\\n\", \"from bisect import bisect_left as bl\\nfrom bisect import bisect_right as br\\nfrom heapq import heappush,heappop,heapify\\nimport math\\nfrom collections import *\\nfrom functools import reduce,cmp_to_key\\nimport sys\\ninput = sys.stdin.readline\\n\\nfrom itertools import accumulate\\nfrom functools import lru_cache\\n\\nM = mod = 998244353\\ndef factors(n):return sorted(set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0))))\\ndef inv_mod(n):return pow(n, mod - 2, mod)\\n\\ndef li():return [int(i) for i in input().rstrip('\\\\n').split()]\\ndef st():return input().rstrip('\\\\n')\\ndef val():return int(input().rstrip('\\\\n'))\\ndef li2():return [i for i in input().rstrip('\\\\n')]\\ndef li3():return [int(i) for i in input().rstrip('\\\\n')]\\n\\n\\n\\nn = val()\\nl = sorted(li())\\nif n <= 36:\\n    ans = float('inf')\\n    for i in range(1, 10 ** 5):\\n        curr = 0\\n        for j in range(n):\\n            curr += abs(l[j] - i ** j)\\n            if i ** j > 10 ** 10:\\n                curr = float('inf')\\n                break\\n        ans = min(ans, curr)\\nelse:\\n    ans = 0\\n    for j in l:\\n        ans += abs(j - 1)\\nprint(ans)\", \"n = int(input())\\nb = list(map(int,input().split()))\\nb.sort()\\nval = b[-1]**(1/(n-1))\\npos1 = int(val)\\npos2 = int(val) + 1\\nval1 = 0\\nval2 = 0\\nfor i in range(n):\\n\\tval1 += abs(b[i]-(pos1**i))\\n\\tval2 += abs(b[i]-(pos2**i))\\nprint(min(val1,val2))\\n\", \"import sys\\nimport heapq, functools, collections\\nimport math, random\\nfrom collections import Counter, defaultdict\\n\\n# available on Google, not available on Codeforces\\n# import numpy as np\\n# import scipy\\n\\n\\ndef solve(lst):  # fix inputs here\\n    lst = sorted(lst)\\n    console(\\\"----- solving ------\\\")\\n    console(lst)\\n\\n    if len(lst) > 40:\\n        return sum(lst) - len(lst)   \\n\\n    base = 0\\n    minres = 10**11\\n    while base**len(lst) < (10**15):\\n        req = [base**i for i in range(len(lst))]\\n        diff = [abs(r-x) for r,x in zip(req, lst)]\\n        # console(req, base, diff, sum(diff))\\n        minres = min(minres, sum(diff))\\n        base += 1\\n\\n    return minres\\n\\n\\ndef console(*args):  # the judge will not read these print statement\\n    print('\\\\033[36m', *args, '\\\\033[0m', file=sys.stderr)\\n    return\\n\\n# fast read all\\n# sys.stdin.readlines()\\n\\n# for case_num in range(int(input())):\\nfor _ in range(1):\\n    # read line as a string\\n    # strr = input()\\n\\n    # read line as an integer\\n    _ = int(input())\\n    \\n    # read one line and parse each word as a string\\n    # lst = input().split()\\n\\n    # read one line and parse each word as an integer\\n    lst = list(map(int,input().split()))\\n\\n    # read matrix and parse as integers (after reading read nrows)\\n    # lst = list(map(int,input().split()))\\n    # nrows = lst[0]  # index containing information, please change\\n    # grid = []\\n    # for _ in range(nrows):\\n    #     grid.append(list(map(int,input().split())))\\n\\n    res = solve(lst)  # please change\\n    \\n    # Google - case number required\\n    # print(\\\"Case #{}: {}\\\".format(case_num+1, res))\\n\\n    # Codeforces - no case number required\\n    print(res)\\n\", \"n = int(input())\\nan = list(sorted(map(int, input().split())))\\n\\nans = sum(an)-n\\nfor i in range(2, 10**5):\\n    newa = 0\\n    for j in range(n):\\n        newa += abs(an[j]-i**j)\\n        if newa >= ans:\\n            break\\n    if newa < ans:\\n        ans = newa\\n\\nprint(ans)\\n\", \"N = int(input())\\narr = [int(x) for x in input().split()]\\narr = sorted(arr)\\nMAX_NUM = 1e18\\n\\nans = 1e18\\nfor i in range(1,32000):\\n\\tcurr = 0\\n\\tnum = 1\\n\\tfor j in range(N):\\n\\t\\tcurr += abs(arr[j]-num)\\n\\t\\tnum *= i\\n\\t\\tif curr > MAX_NUM:\\n\\t\\t\\tbreak\\n\\tif curr > MAX_NUM:\\n\\t\\tbreak\\n\\tans = min(ans, curr)\\n\\nprint(ans)\", \"n = int(input())\\narr = [*map(int, input().split())]\\n\\narr.sort()\\nx = int(arr[-1] ** (1 / (n - 1)))\\ny = x + 1\\nans = res = 0\\n\\nfor i, j in zip(arr, range(n)):\\n\\tans += abs(i - (x ** j))\\n\\tres += abs(i - (y ** j))\\n\\nprint(min(ans, res))\", \"import sys\\nreader = (s.rstrip() for s in sys.stdin)\\ninput = reader.__next__\\n\\n            \\nn = int(input())\\n\\narry = list(map(int,input().split()))\\n\\nmaxNum = max(arry)\\n\\nmaxRecur = maxNum ** (1/(n-1))\\n\\ncurrMin=float(\\\"inf\\\")\\n#print(maxRecur)\\narry.sort()\\nfor i in range(int(maxRecur)+2):\\n    curr = 0\\n    for j in range(n):\\n        #print(i**j)\\n        curr += abs(i**j-arry[j])\\n    #print(i,curr)\\n    currMin = min(currMin,curr)\\nprint(currMin)\\n\\n\", \"n=int(input())\\nl=list(map(int,input().split()))\\nl.sort()\\ncost=sum([i-1 for i in l])\\nc=2\\ncon=True\\nwhile con:\\n    tmp=0\\n    cc=1\\n    for i in range(n):\\n        tmp+=abs(l[i]-cc)\\n        if cost<tmp: \\n            con=False\\n            break\\n        cc*=c\\n    if con: cost=tmp\\n    c+=1\\n\\nprint(cost)\", \"from collections import Counter\\nimport math\\nn=int(input())\\nl=list(map(int,input().split()))\\nl.sort()\\nm=l[-1]\\np=m**(1/(n-1))\\nans=math.ceil(p)\\nans1=int(p)\\nc1=0\\nc2=0\\nfor i in range(n):\\n    if((ans**i)!=l[i]):\\n        c1+=abs((ans**i)-l[i])\\nfor i in range(n):\\n    if((ans1**i)!=l[i]):\\n        c2+=abs((ans1**i)-l[i])\\nprint(min(c1,c2))\", \"n=int(input())\\na=list(map(int,input().split()))\\n\\na.sort()\\nshita=int(a[-1]**(1/(n-1)))\\nue=shita+1\\n\\nsumshita=0\\nsumue=0\\n\\nfor i in range(n):\\n    targetshita=shita**i\\n    sumshita+=abs(targetshita-a[i])\\n    targetue=ue**i\\n    sumue+=abs(targetue-a[i])\\n\\nprint(min(sumshita,sumue))\", \"n=int(input())\\na=list(map(int,input().split()))\\ndef f(x):\\n    p=1\\n    re=0\\n    for i in range(n):\\n        re+=abs(p-a[i])\\n        p*=x\\n    return re\\ndef g():\\n    re=0\\n    for i in range(n):\\n        re+=a[i]-1\\n    return re\\na.sort()\\nif n>32:\\n    print(g())\\n    return\\ni=1\\nans=10**18\\nwhile 1:\\n    tmp=f(i)\\n    if ans<tmp: break\\n    ans=tmp\\n    i+=1\\nprint(ans)\\n\", \"from math import log10\\nN = int(input())\\nl = list(map(int,input().split()))\\nl.sort()\\nx = round(pow(10,log10(l[-1])/(N-1)))\\nminm = pow(10,15)\\nfor b in range(max(1,x-3),x+2):\\n    n = 0\\n    for i in range(N):\\n        n += abs(pow(b,i) - l[i])\\n    minm = min(minm,n)\\nprint(minm)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nans = int(a[-1] ** (1 / (n - 1)))\\nprint(min(sum(abs(pow(ans, i) - a[i]) for i in range(n)), sum(abs(pow(ans + 1, i) - a[i]) for i in range(n))))\", \"n=int(input())\\narr=list(map(int,input().split()))\\narr.sort()\\nm=0\\nfor i in arr:\\n    m+=abs(i-1)\\nc=2\\nif n>10:\\n    while c<20:\\n        t=0\\n        for i in range(n):\\n            t+=abs(c**i-arr[i])\\n            if t>=m:\\n                break\\n        if t<m:\\n            m=t\\n        c+=1\\n    print(m)\\nelse:\\n    while c<=1000000:\\n        t=0\\n        for i in range(n):\\n            t+=abs(c**i-arr[i])\\n            if t>=m:\\n                break\\n        if t<m:\\n            m=t\\n        c+=1\\n    print(m)\\n\", \"def solve(arr):\\n    arr.sort()\\n    c = 2\\n    ans = sum(v - 1 for v in arr)\\n    while True:\\n        cur = 1\\n        cur_ans = 0\\n        for v in arr:\\n            if cur - arr[-1] > ans:\\n                return ans\\n            cur_ans += abs(v - cur)\\n            cur *= c\\n        ans = min(ans, cur_ans)\\n\\n        c += 1\\n\\n\\nn = int(input())\\n*arr, = list(map(int, input().split()))\\nprint(solve(arr))\\n\", \"\\\"\\\"\\\"\\nNTC here\\n\\\"\\\"\\\"\\n\\n\\ndef iin(): return int(input())\\n\\n\\ndef lin(): return list(map(int, input().split()))\\n\\n\\ndef main():\\n    T = 1\\n    for t in range(T):\\n        n = iin()\\n        a = lin()\\n        a.sort()\\n        ans = sum(a)-n\\n        for val in range(1, 100001):\\n            sm = 0\\n            ch = 1\\n            br = 0\\n            for i in a:\\n                sm += abs(ch-i)\\n                ch *= val\\n                if sm>ans:\\n                    br = 1\\n                    break\\n            else:\\n                # print(ans, sm, val)\\n                ans = min(ans, sm)\\n            if br:break\\n        print(ans)\\n\\n\\n\\nmain()\\n\\n\\\"\\\"\\\"\\n3\\n4 1 3 1\\n4 4 4 3\\n5 3 3 2\\n\\\"\\\"\\\"\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3\\n1 3 2\\n\",\n    \"3\\n1000000000 1000000000 1000000000\\n\",\n    \"20\\n51261 11877 300 30936722 84 75814681 352366 23 424 16392314 27267 832 4 562873474 33 516967731 158909407 32148531 66 757\\n\",\n    \"3\\n1 912387428 4\\n\",\n    \"4\\n5 5 5 5\\n\",\n    \"4\\n1 2 984127392 912830214\\n\",\n    \"5\\n1 1 912380429 929219321 1000000000\\n\",\n    \"100\\n14 2 16 934 46 169 31 17 1 234 11 335 211 3 4 1 55 84 5 31 1 28 2 5 364 925 240 74 94 248 36 84 12 9 423 8 358 169 1 29 365 263 4 695 1 425 135 48 707 9 18 67 126 849 119 373 8 21 8 14 43 533 8 4 330 24 1 14 1 1 111 6 167 9 168 12 14 268 1 592 181 6 16 2 912 797 12 637 108 7 43 16 5 647 7 278 883 888 118 12\\n\",\n    \"3\\n376 10 4243\\n\",\n    \"3\\n376 303865958 31262664\\n\",\n    \"3\\n377 9052790 230\\n\",\n    \"3\\n626908730 747379008 293295878\\n\",\n    \"3\\n804992154 25960556 592109135\\n\",\n    \"3\\n983075578 599509400 331113881\\n\",\n    \"6\\n189022 17862 1599106 1509 963 25932\\n\",\n    \"10\\n8 4676 1229 28377288 1062 7 7483297 521964 56330416 294497\\n\",\n    \"15\\n261955 1189957 24178 3154 10626918 6 18311438 700 81716 414491147 328152562 151704786 803178 411 1758\\n\",\n    \"3\\n959 747 656\\n\",\n    \"3\\n2498 14 28\\n\",\n    \"6\\n214 932 130 889 13 236\\n\",\n    \"6\\n1695 3441 465 1223 1512410 262484428\\n\",\n    \"9\\n61 925 605 571 301 250 368 776 404\\n\",\n    \"9\\n1151 825745 7633 17 1959654 131569 111202 148264 131\\n\",\n    \"12\\n524 737 575 957 583 292 530 677 398 87 83 559\\n\",\n    \"12\\n22 4907 2 287 211 1918823 200960457 295009 24176786 10531837 1349 7331\\n\",\n    \"16\\n293 795 930 120 937 954 791 22 834 136 895 268 502 275 16 186\\n\",\n    \"16\\n13182 7 94 1 299 76 2 1 96952931 33909 12 74 314 2 2204 667982\\n\",\n    \"20\\n862 462 758 955 541 169 622 200 328 248 14 272 217 340 461 127 442 258 900 595\\n\",\n    \"20\\n227445 1 2548 49166 282300772 1185 130620 141 206124981 3149 285325717 5723634 836527122 127 702305 9 135225194 79266 2017 2577441\\n\",\n    \"100\\n881 479 355 759 257 497 690 598 275 446 439 787 257 326 584 713 322 5 253 781 434 307 164 154 241 381 38 942 680 906 240 11 431 478 628 959 346 74 493 964 455 746 950 41 585 549 892 687 264 41 487 676 63 453 861 980 477 901 80 907 285 506 619 748 773 743 56 925 651 685 845 313 419 504 770 324 2 559 405 851 919 128 318 698 820 409 547 43 777 496 925 918 162 725 481 83 220 203 609 617\\n\",\n    \"31\\n1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 1000000000\\n\",\n    \"32\\n1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 1000000000 1000000000\\n\",\n    \"31\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n\",\n    \"30\\n1 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n\",\n    \"16\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n\",\n    \"32\\n1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 1000000000\\n\",\n    \"4\\n1 3 8 64\\n\",\n    \"6\\n1 2 4 8 16 16\\n\",\n    \"6\\n1 1 1 1 1 10\\n\",\n    \"4\\n1 3 9 15\\n\",\n    \"4\\n1 5 25 125\\n\",\n    \"4\\n1 3 3 27\\n\",\n    \"9\\n1 1 1 1 1 1 1 1 1526\\n\",\n    \"30\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n\",\n    \"11\\n1 1 1 1 1 1 1 1 1 1 256\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"1999982505\\n\",\n    \"850575966\\n\",\n    \"45210\\n\",\n    \"11\\n\",\n    \"912788665\\n\",\n    \"1839804347\\n\",\n    \"17351\\n\",\n    \"338\\n\",\n    \"31254273\\n\",\n    \"4152\\n\",\n    \"920190033\\n\",\n    \"618063088\\n\",\n    \"930594188\\n\",\n    \"325796\\n\",\n    \"45935236\\n\",\n    \"567739923\\n\",\n    \"1373\\n\",\n    \"37\\n\",\n    \"1233\\n\",\n    \"11585865\\n\",\n    \"3750\\n\",\n    \"1169827\\n\",\n    \"4663\\n\",\n    \"176878453\\n\",\n    \"7938\\n\",\n    \"89060318\\n\",\n    \"8751\\n\",\n    \"867268874\\n\",\n    \"50651\\n\",\n    \"73741824\\n\",\n    \"1221225472\\n\",\n    \"29000000001\\n\",\n    \"27926258178\\n\",\n    \"14715827883\\n\",\n    \"1000000104\\n\",\n    \"9\\n\",\n    \"16\\n\",\n    \"9\\n\",\n    \"12\\n\",\n    \"0\\n\",\n    \"6\\n\",\n    \"1517\\n\",\n    \"28926258177\\n\",\n    \"255\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1397/B",
  "starter_code": ""
}