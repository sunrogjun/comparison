{
  "task_id": "APPS/250",
  "problem_id": 250,
  "prompt": "As you know, every birthday party has a cake! This time, Babaei is going to prepare the very special birthday party's cake.\n\nSimple cake is a cylinder of some radius and height. The volume of the simple cake is equal to the volume of corresponding cylinder. Babaei has n simple cakes and he is going to make a special cake placing some cylinders on each other.\n\nHowever, there are some additional culinary restrictions. The cakes are numbered in such a way that the cake number i can be placed only on the table or on some cake number j where j < i. Moreover, in order to impress friends Babaei will put the cake i on top of the cake j only if the volume of the cake i is strictly greater than the volume of the cake j.\n\nBabaei wants to prepare a birthday cake that has a maximum possible total volume. Help him find this value.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 100 000)\u00a0\u2014 the number of simple cakes Babaei has.\n\nEach of the following n lines contains two integers r_{i} and h_{i} (1 \u2264 r_{i}, h_{i} \u2264 10 000), giving the radius and height of the i-th cake.\n\n\n-----Output-----\n\nPrint the maximum volume of the cake that Babaei can make. Your answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}.\n\nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{-6}$.\n\n\n-----Examples-----\nInput\n2\n100 30\n40 10\n\nOutput\n942477.796077000\n\nInput\n4\n1 1\n9 7\n1 4\n10 7\n\nOutput\n3983.539484752\n\n\n\n-----Note-----\n\nIn first sample, the optimal way is to choose the cake number 1.\n\nIn second sample, the way to get the maximum volume is to use cakes with indices 1, 2 and 4.",
  "solutions": "[\"import math\\nfrom functools import reduce\\nclass SegmentTree():\\n    def __init__(self, L, function = lambda x,y: x+y):\\n        self.function = function\\n        N = self.size = len(L)\\n        M = 1 << N.bit_length()\\n        self.margin = 2*M - N\\n        self.L = [None for i in range(self.margin)] + L\\n        for i in range(M-1, 0, -1):\\n            x, y = self.L[i<<1], self.L[i<<1|1]\\n            self.L[i] = None if x is None or y is None else function(x, y)\\n    def modify(self, pos, value):\\n        p = pos + self.margin\\n        self.L[p] = value \\n        while p > 1:\\n            x, y = self.L[p], self.L[p^1]\\n            if p&1: x, y = y, x\\n            self.L[p>>1] = None if x is None or y is None else self.function(x, y)\\n            p>>=1\\n    def query(self, left, right):\\n        l, r = left + self.margin, right + self.margin\\n        stack = []\\n        void = True\\n        while l < r:\\n            if l&1:\\n                if void:\\n                    result = self.L[l]\\n                    void = False\\n                else:\\n                    result = self.function(result, self.L[l])\\n                l+=1\\n            if r&1:\\n                r-=1\\n                stack.append(self.L[r])\\n            l>>=1\\n            r>>=1\\n        init = stack.pop() if void else result\\n        return reduce(self.function, reversed(stack), init)\\n\\nn = int(input())\\npies, index, first_equal = [0]*n, [0]*n, [0]*n\\nfor i in range(n):\\n    r, h = [int(x) for x in input().split()]\\n    pies[i] = r*r*h\\ns_pies = list(sorted(enumerate(pies), key = lambda p: p[1]))\\nfor i in range(n): index[s_pies[i][0]] = i\\nfor i in range(1, n):\\n    first_equal[s_pies[i][0]] = i if s_pies[i][1] != s_pies[i-1][1] else first_equal[s_pies[i-1][0]]\\ntowers = SegmentTree([0]*(n+1), max)\\nfor j, pie in enumerate(pies):\\n    i, k = index[j], first_equal[j]\\n    q = towers.query(0, k+1)\\n    towers.modify(i+1, q + pie)\\nprint(math.pi * towers.query(0, n+1))\\n\", \"from math import *\\nfrom bisect import *\\n\\ndef update(bit, size, idx, amount):\\n    while idx <= size:\\n        if bit[idx] < amount:\\n            bit[idx] = amount\\n        idx += idx & -idx\\n\\ndef read(bit, idx):\\n    rst = 0\\n    while idx >= 1:\\n        if bit[idx] > rst:\\n            rst = bit[idx]\\n        idx -= idx & -idx\\n    return rst\\n\\nn = int(input())\\narr = [list(map(int, input().split())) for _ in range(n)]\\narr = [r*r*h for r, h in arr]\\n\\narr2 = sorted(list(set(arr)))\\nn2 = len(arr2)\\nbit = [0] * (n2 + 1)\\n\\nfor v in arr:\\n    idx = bisect(arr2, v)\\n    update(bit, n2, idx, read(bit, idx-1) + v)\\n\\nprint(pi*max(bit))\\n\", \"from math import *\\nfrom bisect import *\\n\\ndef update(bit, size, idx, amount):\\n    while idx <= size:\\n        if bit[idx] < amount:\\n            bit[idx] = amount\\n        idx += idx & -idx\\n\\ndef read(bit, idx):\\n    rst = 0\\n    while idx >= 1:\\n        if bit[idx] > rst:\\n            rst = bit[idx]\\n        idx -= idx & -idx\\n    return rst\\n\\nn = int(input())\\narr = [map(int, input().split()) for _ in range(n)]\\narr = [pi*(r*r*h) for r, h in arr]\\n\\narr2 = sorted(list(set(arr)))\\nn2 = len(arr2)\\nbit = [0.0] * (n2 + 1)\\n\\nfor v in arr:\\n    idx = bisect(arr2, v)\\n    update(bit, n2, idx, read(bit, idx-1) + v)\\n\\nprint(max(bit))\", \"from sys import *\\nt = list(map(int, stdin.read().split()))\\np = [t[i + 1] * t[i] ** 2 for i in range(1, len(t), 2)]\\nk = {v: j for j, v in enumerate(sorted(set(p)))}\\nd = [0] * (len(k) + 1)\\nfor v in p: \\n    j = k[v]\\n    i = j + 1\\n    q = 0\\n    while j > 0:\\n        q = max(d[j], q)\\n        j -= j & -j\\n    q += v\\n    while i < len(d):\\n        d[i] = max(d[i], q)\\n        i += i & -i\\nprint(max(d) * 3.14159265)\", \"from sys import *\\nt = list(map(int, stdin.read().split()))\\np = [t[i + 1] * t[i] ** 2 for i in range(1, len(t), 2)]\\nk = {v: j for j, v in enumerate(sorted(set(p)))}\\nd = [0] * (len(k) + 1)\\nfor v in p: \\n    j = k[v]\\n    i = j + 1\\n    q = 0\\n    while j > 0:\\n        q = max(d[j], q)\\n        j -= j & -j\\n    q += v\\n    while i < len(d):\\n        d[i] = max(d[i], q)\\n        i += i & -i\\nprint(max(d) * 3.14159265)\\n\", \"from sys import *\\nt = list(map(int, stdin.read().split()))\\np = [t[i + 1] * t[i] ** 2 for i in range(1, len(t), 2)]\\nk = {v: j for j, v in enumerate(sorted(set(p)))}\\nd = [0] * (len(k) + 1)\\nfor v in p: \\n    j = k[v]\\n    i = j + 1\\n    q = 0\\n    while j > 0:\\n        q = max(d[j], q)\\n        j -= j & -j\\n    q += v\\n    while i < len(d):\\n        d[i] = max(d[i], q)\\n        i += i & -i\\nprint(max(d) * 3.14159265)\\n\", \"from math import pi\\nn = int(input())\\nsecuencia = [None] * n\\nmaximo_to = -1\\nfor num in range(n):\\n    r, h = (int(x) for x in input().strip().split())\\n    secuencia[num] = [r * r * h, num + 1]\\nsecuencia.reverse()\\nsecuencia.sort(key=lambda x: x[0])\\nactual = 0\\nbit = [0] * (n + 1)\\n\\ndef max_x(x, l):\\n    suma = 0\\n    while x != 0:\\n        suma = max(suma, l[x])\\n        x -= (x & -x)\\n    return suma\\n\\ndef update_x(x, l, max_n, val):\\n    while x <= max_n:\\n        if val > l[x]:\\n            l[x] = val\\n        else:\\n            return\\n        x += (x & -x)\\nfor e in range(n):\\n    maximo = secuencia[e][0] + max_x(secuencia[e][1] - 1, bit)\\n    update_x(secuencia[e][1], bit, n, maximo)\\n    if maximo > maximo_to:\\n        maximo_to = maximo\\nprint(maximo_to * pi)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2\\n100 30\\n40 10\\n\",\n    \"4\\n1 1\\n9 7\\n1 4\\n10 7\\n\",\n    \"3\\n2 2\\n1 1\\n3 3\\n\",\n    \"3\\n2 2\\n3 3\\n1 1\\n\",\n    \"3\\n3 3\\n1 1\\n2 2\\n\",\n    \"3\\n1 1\\n2 2\\n3 3\\n\",\n    \"3\\n1 1\\n3 3\\n2 2\\n\",\n    \"3\\n3 3\\n2 2\\n1 1\\n\",\n    \"1\\n1 1\\n\",\n    \"2\\n1 1\\n2 2\\n\",\n    \"2\\n2 2\\n1 1\\n\",\n    \"4\\n1 1\\n2 2\\n3 3\\n4 4\\n\",\n    \"4\\n1 1\\n2 2\\n4 4\\n3 3\\n\",\n    \"4\\n1 1\\n3 3\\n2 2\\n4 4\\n\",\n    \"4\\n1 1\\n3 3\\n4 4\\n2 2\\n\",\n    \"4\\n1 1\\n4 4\\n2 2\\n3 3\\n\",\n    \"4\\n1 1\\n4 4\\n3 3\\n2 2\\n\",\n    \"4\\n2 2\\n1 1\\n3 3\\n4 4\\n\",\n    \"4\\n2 2\\n1 1\\n4 4\\n3 3\\n\",\n    \"4\\n2 2\\n3 3\\n1 1\\n4 4\\n\",\n    \"4\\n2 2\\n3 3\\n4 4\\n1 1\\n\",\n    \"4\\n2 2\\n4 4\\n1 1\\n3 3\\n\",\n    \"4\\n2 2\\n4 4\\n3 3\\n1 1\\n\",\n    \"4\\n3 3\\n1 1\\n2 2\\n4 4\\n\",\n    \"4\\n3 3\\n1 1\\n4 4\\n2 2\\n\",\n    \"4\\n3 3\\n2 2\\n1 1\\n4 4\\n\",\n    \"4\\n3 3\\n2 2\\n4 4\\n1 1\\n\",\n    \"4\\n3 3\\n4 4\\n1 1\\n2 2\\n\",\n    \"4\\n3 3\\n4 4\\n2 2\\n1 1\\n\",\n    \"4\\n4 4\\n1 1\\n2 2\\n3 3\\n\",\n    \"4\\n4 4\\n1 1\\n3 3\\n2 2\\n\",\n    \"4\\n4 4\\n2 2\\n1 1\\n3 3\\n\",\n    \"4\\n4 4\\n2 2\\n3 3\\n1 1\\n\",\n    \"4\\n4 4\\n3 3\\n1 1\\n2 2\\n\",\n    \"4\\n4 4\\n3 3\\n2 2\\n1 1\\n\",\n    \"24\\n14 3600\\n105 64\\n40 441\\n15 3136\\n24 1225\\n42 400\\n84 100\\n12 4900\\n120 49\\n56 225\\n140 36\\n70 144\\n168 25\\n60 196\\n30 784\\n280 9\\n10 7056\\n21 1600\\n28 900\\n210 16\\n420 4\\n840 1\\n35 576\\n20 1764\\n\",\n    \"15\\n40 9\\n12 100\\n60 4\\n20 36\\n24 25\\n15 64\\n120 1\\n4 900\\n6 400\\n5 576\\n10 144\\n30 16\\n3 1600\\n2 3600\\n8 225\\n\",\n    \"14\\n8 324\\n12 144\\n72 4\\n144 1\\n48 9\\n3 2304\\n24 36\\n2 5184\\n9 256\\n36 16\\n6 576\\n4 1296\\n18 64\\n16 81\\n\",\n    \"15\\n4 1764\\n24 49\\n84 4\\n21 64\\n28 36\\n6 784\\n7 576\\n2 7056\\n168 1\\n56 9\\n3 3136\\n8 441\\n14 144\\n42 16\\n12 196\\n\",\n    \"15\\n3 3200\\n2 7200\\n20 72\\n8 450\\n60 8\\n15 128\\n4 1800\\n5 1152\\n24 50\\n40 18\\n120 2\\n6 800\\n30 32\\n12 200\\n10 288\\n\",\n    \"17\\n6 900\\n20 81\\n45 16\\n4 2025\\n15 144\\n9 400\\n2 8100\\n3 3600\\n10 324\\n30 36\\n5 1296\\n12 225\\n36 25\\n18 100\\n90 4\\n60 9\\n180 1\\n\",\n    \"13\\n24 72\\n3 4608\\n18 128\\n72 8\\n48 18\\n144 2\\n4 2592\\n16 162\\n9 512\\n6 1152\\n12 288\\n36 32\\n8 648\\n\",\n    \"14\\n60 12\\n20 108\\n24 75\\n120 3\\n3 4800\\n5 1728\\n6 1200\\n8 675\\n12 300\\n4 2700\\n30 48\\n15 192\\n40 27\\n10 432\\n\",\n    \"14\\n105 4\\n14 225\\n6 1225\\n7 900\\n35 36\\n10 441\\n30 49\\n5 1764\\n21 100\\n70 9\\n42 25\\n3 4900\\n210 1\\n15 196\\n\",\n    \"14\\n6 1296\\n216 1\\n18 144\\n3 5184\\n8 729\\n4 2916\\n72 9\\n12 324\\n9 576\\n54 16\\n36 36\\n27 64\\n108 4\\n24 81\\n\",\n    \"14\\n4 3528\\n12 392\\n24 98\\n84 8\\n14 288\\n42 32\\n168 2\\n56 18\\n6 1568\\n8 882\\n3 6272\\n21 128\\n28 72\\n7 1152\\n\",\n    \"18\\n3 6400\\n4 3600\\n20 144\\n8 900\\n24 100\\n15 256\\n30 64\\n16 225\\n10 576\\n48 25\\n5 2304\\n80 9\\n60 16\\n240 1\\n6 1600\\n40 36\\n12 400\\n120 4\\n\",\n    \"13\\n3 6912\\n144 3\\n24 108\\n18 192\\n16 243\\n36 48\\n9 768\\n12 432\\n4 3888\\n48 27\\n72 12\\n8 972\\n6 1728\\n\",\n    \"16\\n126 4\\n21 144\\n3 7056\\n14 324\\n42 36\\n63 16\\n28 81\\n36 49\\n7 1296\\n84 9\\n252 1\\n4 3969\\n6 1764\\n9 784\\n12 441\\n18 196\\n\",\n    \"16\\n45 32\\n12 450\\n60 18\\n9 800\\n180 2\\n6 1800\\n4 4050\\n36 50\\n3 7200\\n18 200\\n15 288\\n30 72\\n20 162\\n90 8\\n10 648\\n5 2592\\n\",\n    \"14\\n22 144\\n24 121\\n264 1\\n6 1936\\n132 4\\n33 64\\n4 4356\\n12 484\\n66 16\\n3 7744\\n44 36\\n11 576\\n88 9\\n8 1089\\n\",\n    \"14\\n30 80\\n5 2880\\n4 4500\\n3 8000\\n10 720\\n12 500\\n8 1125\\n6 2000\\n60 20\\n120 5\\n24 125\\n15 320\\n40 45\\n20 180\\n\",\n    \"14\\n27 100\\n135 4\\n3 8100\\n45 36\\n90 9\\n30 81\\n6 2025\\n270 1\\n54 25\\n18 225\\n10 729\\n15 324\\n5 2916\\n9 900\\n\",\n    \"14\\n28 100\\n140 4\\n20 196\\n5 3136\\n56 25\\n4 4900\\n40 49\\n7 1600\\n35 64\\n70 16\\n10 784\\n280 1\\n14 400\\n8 1225\\n\",\n    \"16\\n32 81\\n96 9\\n12 576\\n3 9216\\n18 256\\n144 4\\n36 64\\n16 324\\n72 16\\n4 5184\\n48 36\\n288 1\\n8 1296\\n6 2304\\n24 144\\n9 1024\\n\",\n    \"14\\n3 9408\\n12 588\\n4 5292\\n24 147\\n42 48\\n7 1728\\n168 3\\n84 12\\n6 2352\\n28 108\\n56 27\\n8 1323\\n21 192\\n14 432\\n\",\n    \"14\\n20 216\\n12 600\\n5 3456\\n10 864\\n15 384\\n3 9600\\n4 5400\\n30 96\\n8 1350\\n6 2400\\n24 150\\n60 24\\n120 6\\n40 54\\n\",\n    \"14\\n35 72\\n21 200\\n6 2450\\n5 3528\\n70 18\\n30 98\\n10 882\\n15 392\\n105 8\\n210 2\\n42 50\\n3 9800\\n14 450\\n7 1800\\n\",\n    \"16\\n100 9\\n3 10000\\n60 25\\n15 400\\n75 16\\n10 900\\n50 36\\n150 4\\n25 144\\n6 2500\\n12 625\\n5 3600\\n20 225\\n30 100\\n4 5625\\n300 1\\n\",\n    \"13\\n72 18\\n24 162\\n36 72\\n4 5832\\n18 288\\n54 32\\n12 648\\n9 1152\\n108 8\\n216 2\\n8 1458\\n27 128\\n6 2592\\n\",\n    \"15\\n36 75\\n45 48\\n6 2700\\n9 1200\\n30 108\\n18 300\\n12 675\\n20 243\\n5 3888\\n4 6075\\n60 27\\n90 12\\n10 972\\n180 3\\n15 432\\n\",\n    \"13\\n12 676\\n39 64\\n6 2704\\n8 1521\\n52 36\\n312 1\\n13 576\\n104 9\\n4 6084\\n156 4\\n24 169\\n78 16\\n26 144\\n\",\n    \"9\\n4 2\\n2 2\\n4 1\\n3 1\\n1 1\\n4 3\\n5 1\\n4 3\\n4 1\\n\",\n    \"5\\n8 3\\n6 3\\n4 2\\n7 3\\n6 3\\n\",\n    \"2\\n1 1\\n1 1\\n\",\n    \"3\\n10 10\\n10 10\\n10 10\\n\",\n    \"2\\n100 30\\n100 30\\n\"\n  ],\n  \"outputs\": [\n    \"942477.796077000\\n\",\n    \"3983.539484752\\n\",\n    \"109.955742876\\n\",\n    \"109.955742876\\n\",\n    \"84.823001647\\n\",\n    \"113.097335529\\n\",\n    \"87.964594301\\n\",\n    \"84.823001647\\n\",\n    \"3.141592654\\n\",\n    \"28.274333882\\n\",\n    \"25.132741229\\n\",\n    \"314.159265359\\n\",\n    \"229.336263712\\n\",\n    \"289.026524130\\n\",\n    \"289.026524130\\n\",\n    \"204.203522483\\n\",\n    \"204.203522483\\n\",\n    \"311.017672705\\n\",\n    \"226.194671058\\n\",\n    \"311.017672705\\n\",\n    \"311.017672705\\n\",\n    \"226.194671058\\n\",\n    \"226.194671058\\n\",\n    \"285.884931477\\n\",\n    \"285.884931477\\n\",\n    \"285.884931477\\n\",\n    \"285.884931477\\n\",\n    \"285.884931477\\n\",\n    \"285.884931477\\n\",\n    \"201.061929830\\n\",\n    \"201.061929830\\n\",\n    \"201.061929830\\n\",\n    \"201.061929830\\n\",\n    \"201.061929830\\n\",\n    \"201.061929830\\n\",\n    \"2216707.776373104\\n\",\n    \"45238.934211696\\n\",\n    \"65144.065264842\\n\",\n    \"88668.311054924\\n\",\n    \"90477.868423392\\n\",\n    \"101787.601976316\\n\",\n    \"130288.130529684\\n\",\n    \"135716.802635088\\n\",\n    \"138544.236023319\\n\",\n    \"146574.146845895\\n\",\n    \"177336.622109848\\n\",\n    \"180955.736846784\\n\",\n    \"195432.195794527\\n\",\n    \"199503.699873579\\n\",\n    \"203575.203952632\\n\",\n    \"218956.441584609\\n\",\n    \"226194.671058480\\n\",\n    \"229022.104446711\\n\",\n    \"246300.864041456\\n\",\n    \"260576.261059369\\n\",\n    \"266004.933164772\\n\",\n    \"271433.605270176\\n\",\n    \"277088.472046638\\n\",\n    \"282743.338823100\\n\",\n    \"293148.293691790\\n\",\n    \"305362.805928948\\n\",\n    \"305815.195271065\\n\",\n    \"304.734487398\\n\",\n    \"801.106126665\\n\",\n    \"3.141592654\\n\",\n    \"3141.592653590\\n\",\n    \"942477.796077000\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/629/D",
  "starter_code": ""
}