{
  "task_id": "APPS/412",
  "problem_id": 412,
  "prompt": "\u041f\u043e\u043b\u0438\u043a\u0430\u0440\u043f \u043c\u0435\u0447\u0442\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u043e\u043c \u0438 \u0444\u0430\u043d\u0430\u0442\u0435\u0435\u0442 \u043e\u0442 \u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439 \u0434\u0432\u043e\u0439\u043a\u0438. \u0421\u0440\u0435\u0434\u0438 \u0434\u0432\u0443\u0445 \u0447\u0438\u0441\u0435\u043b \u0435\u043c\u0443 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0440\u0430\u0432\u0438\u0442\u0441\u044f \u0442\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u0447\u0438\u0441\u043b\u0430 2. \n\n\u041f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0446\u0435\u043b\u044b\u0445 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b a_1, a_2, ..., a_{n} \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 r\u00a0\u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u0447\u0438\u0441\u043b\u0430 2, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b a_{i}, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 r.\n\n\n-----\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435-----\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n (1 \u2264 n \u2264 100)\u00a0\u2014 \u0434\u043b\u0438\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 a.\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435-----\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430:\n\n  r\u00a0\u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u0434\u0432\u043e\u0439\u043a\u0438, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438,  \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 r. \n\n\n-----\u041f\u0440\u0438\u043c\u0435\u0440\u044b-----\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n5\n80 7 16 4 48\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n16 3\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n4\n21 5 3 33\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1 4\n\n\n\n-----\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435-----\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0441\u0442\u0435\u043f\u0435\u043d\u044c \u0434\u0432\u043e\u0439\u043a\u0438, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e, \u0440\u0430\u0432\u043d\u0430 16 = 2^4, \u043d\u0430 \u043d\u0435\u0451 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u0430 80, 16 \u0438 48.\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u0441\u0435 \u0447\u0435\u0442\u044b\u0440\u0435 \u0447\u0438\u0441\u043b\u0430 \u043d\u0435\u0447\u0451\u0442\u043d\u044b\u0435, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 1 = 2^0. \u042d\u0442\u043e \u0438 \u0431\u0443\u0434\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u044c\u044e \u0434\u0432\u043e\u0439\u043a\u0438 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u0430.",
  "solutions": "[\"n = int(input())\\nl = list(map(int, input().split()))\\nmax1 = 1\\nfor i in l:\\n    k = 1\\n    x = i\\n    while x % 2 == 0:\\n        k *= 2\\n        x //= 2\\n    max1 = max(max1, k)\\nc = 0\\nfor i in l:\\n    if i % max1 == 0:\\n        c += 1\\nprint(max1, c)\", \"n = int(input())\\na = list(map(int, input().split()))\\npw = [0] * 40\\nfor i in a:\\n\\tx = 1\\n\\tpos = 0\\n\\twhile i % x == 0:\\n\\t\\tpw[pos] += 1\\n\\t\\tpos += 1\\n\\t\\tx *= 2\\nfor i in range(39, -1, -1):\\n\\tif pw[i] != 0:\\n\\t\\tprint(2 ** i, pw[i])\\n\\t\\tbreak\", \"read = lambda: list(map(int, input().split()))\\nn = int(input())\\na = list(read())\\nans = -1\\ncnt = 0\\nfor i in range(n):\\n    r = 0\\n    while a[i] % (2 ** r) == 0:\\n        r += 1\\n    r -= 1\\n    if r > ans:\\n        ans = r\\n        cnt = 1\\n    elif r == ans:\\n        cnt += 1\\nprint(2 ** ans, cnt)\\n               \\n\", \"import sys\\nn=int(input())\\nz=list(map(int,input().split()))\\nmax_=0\\nfor i in range(n):\\n    f=z[i]\\n    ctr=0\\n    while True:\\n        if f%2==0:\\n            f//=2\\n            ctr+=1\\n        else:\\n            break\\n    max_=max(max_,ctr)\\nprint(2**max_,end=' ')\\nctr=0\\nf=2**max_\\nfor i in range(n):\\n    if z[i]%f==0:\\n        ctr+=1\\nprint(ctr)\", \"from math import log2\\ndef c(a, b):\\n    for i in a:\\n        if i % b == 0:\\n            return True\\n    return False\\ndef cnt(a, b):\\n    ans = 0\\n    for i in a:\\n        if i % b == 0:\\n            ans += 1\\n    return ans\\ninput()\\na = [int(i) for i in input().split()]\\nb = 2\\nwhile c(a, b):\\n    b *= 2\\nprint(b // 2, cnt(a, b // 2))\", \"n = input()\\ncur = 0\\ncnt = 0\\nfor i in map(int, input().split()):\\n    c = 0\\n    while i % 2 == 0:\\n        i >>= 1\\n        c += 1\\n    if c > cur:\\n        cur = c\\n        cnt = 1\\n    elif c == cur:\\n        cnt += 1\\nprint(2 ** cur, cnt)\", \"n=int(input())\\na=list(map(int,input().split()))\\nma=0\\nfor i in range(n):\\n    s=a[i]\\n    st=1\\n    while s!=1:\\n        if s%2==0:\\n            s//=2\\n            st*=2\\n        else:\\n            break\\n    if st>ma:\\n        ma=st\\nv=0\\nfor i in range(n):\\n    if a[i]%ma==0:\\n        v+=1\\nprint(ma,v)\\n\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nr = 0\\nk = 0\\nb = a[:]\\nfor i in range(n):\\n    c = 1\\n    while b[i] % 2 == 0:\\n        c *= 2\\n        b[i] //= 2\\n    if c > r:\\n        r = c\\nfor i in range(n):\\n    if a[i] % r == 0:\\n        k += 1\\nprint(r, k)\\n\\n\\n\\n\\n\\n\\n\\n\", \"n = int(input())\\narr = list(map(int, input().split()))\\nstep = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912]\\nr = 0\\nc = 0\\nfor i in range(n):\\n    for j in range(29, -1, -1):\\n        if arr[i] % step[j] == 0:\\n            break\\n    if j == r:\\n        c += 1\\n    if j > r:\\n        r = j\\n        c = 1\\n        \\nprint(step[r], c)\", \"n = int(input())\\narr = list(map(int, input().split()))\\nans = [0 for i in range(n)]\\nj = 2\\nfor i in range(n):\\n    while arr[i] % j == 0:\\n        ans[i] += 1\\n        arr[i] //= j\\nprint(2 ** max(ans), ans.count(max(ans)))\\n\", \"def step(x):\\n\\tres = 0\\n\\twhile x > 0 and x % 2 ** (res + 1) == 0:\\n\\t\\tres += 1\\n\\treturn res\\n\\nn = int(input())\\nx = list(map(int, input().split()))\\nr = 0\\nm = 0\\nfor i in range(n):\\n\\tif step(x[i]) > r:\\n\\t\\tm = 1\\n\\t\\tr = step(x[i])\\n\\telif step(x[i]) == r:\\n\\t\\tm += 1\\nprint(2 ** r, m)\", \"n=int(input())\\na=list(map(int,input().split()))\\nr=2\\nk=0\\nr1=1\\nk1=0\\nt=True\\nwhile t:\\n    for i in range(n):\\n        if a[i]%r1==0:\\n            k1+=1\\n    if k1!=0:\\n        k=k1\\n        k1=0\\n        r=r1\\n        r1*=2\\n        t=True\\n    else:\\n        break\\nprint(r,k)\\n    \\n\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\nans = 1\\nansc = 0\\n\\nfor x in a:\\n   i = 0\\n   while (x % (2 ** i) == 0):\\n      i += 1\\n   i -= 1\\n   if (2 ** i == ans):\\n      ansc += 1\\n   if (2 ** i > ans):\\n      ans = 2 ** i\\n      ansc = 1\\n\\nprint(str(ans) + ' ' + str(ansc))\", \"n=int(input())\\na=list(map(int,input().split()))\\nk=1\\nn=0\\nfor i in range(len(a)):\\n    s=a[i]\\n    f=True\\n    while f:\\n        if s%(k*2)==0:\\n            k*=2\\n        else:\\n            f=False\\n    \\nfor i in range(len(a)):\\n    if a[i]%k==0:\\n        n+=1\\nprint(k,n)\\n        \\n        \\n    \\n    \\n\", \"n = int(input())\\na = [0]*n\\ns = input().split()\\nx = 0\\ny = 0\\nb = []\\nfor i in range(n):\\n    a[i] = int(s[i])\\nfor i in range(n):\\n    while (a[i])%2==0:\\n        a[i]=(a[i]//2)\\n        x += 1\\n    b.append(x)\\n    x = 0\\nprint(2**(max(b)), b.count(max(b)))\\n\\n\", \"r = 1\\nk = 0\\nn = int(input())\\na = list(map(int, input().split()))\\nfor i in a:\\n    if (i % r == 0):\\n        k += 1\\n    while(i % (r * 2) == 0):\\n        r *= 2\\n        k = 1\\nprint(r, k)\\n\", \"from math import *\\nn = int(input())\\ndata = list(map(int, input().split()))\\nans = []\\nfor i in range(100):\\n    help = [2 ** i, 0]\\n    for j in range(n):\\n        if data[j] % (2 ** i) == 0:\\n            help[1] += 1\\n    ans.append(help)\\nans.sort()\\nindex = 0\\nwhile ans[index][1]:\\n    index += 1\\nindex -= 1\\nprint(*ans[index])\", \"input()\\nnumbers = list(map(int, input().split(\\\" \\\")))\\n\\n\\ndef max2pow(number):\\n    answer = []\\n    for y in range(0, 1000):\\n        if number % pow(2, y) == 0:\\n            answer.append(y)\\n    return max(answer)\\n\\nans = []\\nfor x in numbers:\\n    ans.append(max2pow(x))\\nans = pow(2, max(ans))\\nans1 = 0\\nfor x in numbers:\\n    if x % ans == 0:\\n        ans1 += 1\\nprint(ans, ans1)\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nb = 0\\nc = 0\\nd = []\\nfor i in range(n) :\\n    while True :\\n        b = a[i] / 2 ** c\\n        if b != int(b) :\\n            break\\n        c += 1\\n    d.append(2 ** (c-1))\\n    c = 0\\np = max(d)\\np1 = d.count(p)\\nprint(p , p1)\", \"n = int(input())\\ns = list(map(int,input().split()))\\nx = n\\nd=2\\nc=0\\nused = [False]*n\\nwhile x>0:\\n    c=x\\n    for i in range(n):\\n        if used[i]==True:\\n            continue\\n        if s[i]%d!=0:\\n            x -= 1\\n            used[i]=True\\n    d *= 2\\nprint(d//4,c)\", \"maxst = 0\\ncount = 0\\nn = int(input())\\nM = input().split()\\nfor i in range(0,n):\\n    ni = int(M[i])\\n    for j in range(maxst,30):\\n        if ni % 2**j==0:\\n            if maxst<j:\\n                maxst = j\\n                count = 0\\n            count += 1\\n        else: break\\nprint(2**maxst,count)\\n\", \"import math\\n\\nn=int(input())\\na=[int(i) for i in input().split()]\\ndef checkStepen(a):\\n    stepen=0\\n    while True:\\n        if a%2==0:\\n            a//=2\\n            stepen+=1\\n        else: break;\\n    return 2**stepen\\nr=0\\nmax=0\\nfor i in a:\\n    k=checkStepen(i)\\n    if(k>r):\\n        max=1\\n        r=k\\n    elif (k==r):\\n        max+=1\\nprint(r,max)\", \"n = int(input())\\na = list(map(int,input().split()))\\n\\nk = 1\\n\\nfor i in range(n):\\n    k *= 2\\n    while a[i]%k == 0:\\n        k *= 2\\n    k //= 2\\nx = 0\\nfor i in range(n):\\n    if a[i]%k == 0:\\n        #print(1,end=' ')\\n        x += 1\\n#print()\\nprint(k,x)\", \"a = []\\nn = int(input())\\na += (int(i) for i in input().split())\\nr, m = 1, 1\\nwhile m != 0:\\n    m2 = m\\n    m = 0\\n    for i in range(n):\\n        if a[i] % r == 0:\\n            m += 1\\n    if m != 0:\\n        r = r * 2\\n    else:\\n        break\\nprint(r // 2, m2)\", \"a=int(input())\\nb=list(map(int, input().split()))\\nm=max(b)\\nr=0\\nf=0\\nu=0\\no=0\\nk=0\\nwhile f<=m:\\n    f=2**r\\n    r+=1\\nr-=1\\nfor i in range(a):\\n    for j in range(r):\\n        if b[i]%(2**j)==0:\\n            if 2**j>o:\\n                o=2**j\\nfor i in range(a):\\n    if b[i]%o==0:\\n        k+=1\\nprint(o,k)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"5\\n80 7 16 4 48\\n\",\n    \"4\\n21 5 3 33\\n\",\n    \"10\\n8 112 52 86 93 102 24 24 100 826791168\\n\",\n    \"3\\n458297759 18 104\\n\",\n    \"7\\n12 14 40 8 74 104 11\\n\",\n    \"11\\n35 16 664311776 46 48 52 63 82 84 80 23\\n\",\n    \"7\\n67 68 58 24 96 73 72\\n\",\n    \"8\\n48 112 40 8 112 14 80 36\\n\",\n    \"10\\n14 6 68 8 84 949689614 91 26 80 56\\n\",\n    \"4\\n39 56 939117699 56\\n\",\n    \"5\\n90 18 56 64 32\\n\",\n    \"9\\n64 95 32 64 96 80 100 96 66\\n\",\n    \"20\\n105407881 735510073 587127085 111067442 126807503 250859170 778634763 919694130 592496831 462347734 532487590 475786023 951527598 183635985 612791353 447723541 409812454 900700354 801564406 532793851\\n\",\n    \"20\\n850632510 530517796 700510265 454664263 131947796 418444926 921278498 251889644 705327498 892480283 884422799 479219117 399278535 80826412 496934492 448261193 39033930 49426174 621130971 808191947\\n\",\n    \"20\\n780355354 620754888 193377552 463211662 46248927 312489308 472238901 823707535 138518748 267363170 19751630 193171944 411443343 858525221 458019868 490268043 7864848 218005780 744553112 83590041\\n\",\n    \"20\\n29023024 579267278 217400978 121454376 235087976 154574217 708760940 84623652 195299056 329204104 527952531 822521791 513319036 285749488 292843688 389260660 498981613 835987320 444201058 251639011\\n\",\n    \"20\\n267784376 576420580 392773522 296581728 508523192 812838532 920098710 624114448 194991560 850559568 29915376 785467756 490019770 524237000 871021232 970867040 769417893 210139479 445850586 333230268\\n\",\n    \"20\\n860654784 630481952 430211228 13468621 33985780 279050728 782571295 83521731 818343376 508318323 550168944 763113524 152970477 502262855 934672824 712697136 451447464 732781790 71573907 50381000\\n\",\n    \"20\\n673865536 152236510 957204496 401364096 969402746 287701920 768559538 642049008 736330680 179648832 480094052 225156558 957671104 726304328 612058916 257008256 173639040 673864512 431405191 454360662\\n\",\n    \"20\\n706678380 597303020 176804438 146220776 485004772 799346560 692789954 737954674 398118372 231976240 957701828 556811840 74342144 966291136 893909760 745234360 44276827 878935416 975182148 322390872\\n\",\n    \"20\\n442107036 883530112 852749824 997931232 902004480 838557324 186049792 827163136 3843737 603467472 383038751 548720704 843680384 906511492 591629504 41722624 79778650 839163077 880599104 456148480\\n\",\n    \"20\\n667815852 318176276 693849088 724201296 188710200 39249152 929966576 651876056 580647856 575425536 367972188 647585808 833274694 578646160 593232968 747635620 973200384 608104976 754724885 832141532\\n\",\n    \"20\\n448394296 216942008 573160113 728121900 769966592 164290016 721604576 970539238 338262776 947927236 587084928 648622584 194610176 435895128 896641600 70371299 323855936 292543040 28980004 787518144\\n\",\n    \"20\\n269609216 130664082 366702720 254341120 817371149 791314720 886888448 933572608 411407552 86828928 280842240 259838684 821718144 131427072 316135424 189065544 173073728 20176393 508466777 927373184\\n\",\n    \"20\\n620004352 728068096 230808280 347805952 153777664 828290048 941633792 681387488 689396208 283672752 130113536 124222464 425923944 365087488 68677632 957876224 86529928 278224896 516674048 203400656\\n\",\n    \"20\\n957116416 938908864 254662656 28720000 829892752 344974528 22716709 493757015 729003570 868597760 675246081 648372096 233462945 949382272 600301600 979810000 695847936 383948336 388551600 125714432\\n\",\n    \"20\\n793801200 316289782 968725504 765722788 172605440 945717248 613921792 54457344 725727714 598109120 390593416 438184064 245627755 91785071 855031808 778218454 34154240 686966990 736207232 674856960\\n\",\n    \"20\\n356744192 260087808 498705408 60572928 360008038 968932864 66422016 929599488 973047264 426826855 483623936 826974208 487705600 787624960 951492608 343212032 661494459 244741040 409686016 20327511\\n\",\n    \"20\\n775136472 720896 585826304 479121408 116085124 608963940 286154752 103731391 192445952 745342784 887373824 351469568 201183616 579608192 26928128 861796540 579858432 30678450 359436288 476635136\\n\",\n    \"20\\n962265088 792592384 175088192 998003136 645410688 697606715 918541862 551100416 247733780 770750336 264468484 185550848 201588736 989953440 799341904 355386616 611975168 792208864 272619608 239038496\\n\",\n    \"20\\n420610048 361879464 11984896 648474908 567803904 811903488 777519104 677117952 794312704 362283008 946274304 824280862 716753756 318224096 114032640 470286336 153747456 698417152 410143376 577402584\\n\",\n    \"20\\n916422656 61941502 755804160 993386496 371458048 361240704 791150592 218434752 532807680 517277964 158990336 877143936 263469056 339735363 438097920 842006528 200088380 651153211 932184064 443051520\\n\",\n    \"20\\n855113728 457249360 705319632 368396992 886571008 261505024 647304078 73518537 749228480 194262008 148995424 860356608 950009856 649068544 430006272 363153728 105360192 37648488 426766453 565502131\\n\",\n    \"20\\n283119671 29874944 739246080 972336073 468233952 926107648 665047794 354091008 141526171 529537472 937811232 970178560 948105794 433304784 186908672 912261120 858259456 972472320 4889883 76907904\\n\",\n    \"20\\n386375302 77596672 411041792 683671552 667767296 625737728 947733007 612950256 129715876 813694976 782385152 164455808 647131408 385566720 65880960 96010240 484900864 385339335 533303296 660648928\\n\",\n    \"20\\n786432000 123007744 351391826 216719360 391303168 920693440 652456192 715653120 915090432 26559797 680345413 346423296 401288334 437510144 122224640 652606928 182370304 683278336 656773980 316229632\\n\",\n    \"20\\n850523026 993052212 100663296 830207504 281863570 426977070 803471360 796327936 369098752 842702848 526319616 785973248 501219328 801245229 853162496 689842176 292886257 859104512 631656960 512295035\\n\",\n    \"20\\n694157312 375128064 494927872 199980576 823836320 358259440 950409408 215242336 126689280 697139200 471849008 854435840 935337515 589698048 157286400 161334770 738197504 594549920 416464896 690872320\\n\",\n    \"20\\n785580032 987226112 398458880 437531712 335544320 676369664 533876736 181598976 117440512 924319744 469762048 443505526 949904673 710590464 533015579 17793024 781975552 803666112 973078528 866337472\\n\",\n    \"20\\n558266065 720866235 285275468 139607080 150235150 855638016 815792128 358744064 620756992 438077440 73404848 892534480 939524096 195793792 838860800 364010680 931135488 254242133 374493422 578846720\\n\",\n    \"20\\n909362176 291766272 557318144 348389376 426770432 526614528 213516288 932012606 344981504 138412032 6291456 354007477 536870912 557842432 536870912 668205056 398003707 609566463 893207232 83886080\\n\",\n    \"1\\n167959139\\n\",\n    \"2\\n641009859 54748095\\n\",\n    \"10\\n1000000 1 1000000 1 1000000 1 1000000 1 1000000 1\\n\",\n    \"5\\n1000000000 1000000000 1000000000 1000000000 1000000000\\n\",\n    \"8\\n1 1 1 1 1 1 1 1\\n\",\n    \"100\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\\n\",\n    \"100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"100\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n\",\n    \"100\\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\\n\",\n    \"1\\n536870912\\n\"\n  ],\n  \"outputs\": [\n    \"16 3\\n\",\n    \"1 4\\n\",\n    \"256 1\\n\",\n    \"8 1\\n\",\n    \"8 3\\n\",\n    \"32 1\\n\",\n    \"32 1\\n\",\n    \"16 4\\n\",\n    \"16 1\\n\",\n    \"8 2\\n\",\n    \"64 1\\n\",\n    \"64 2\\n\",\n    \"2 9\\n\",\n    \"4 5\\n\",\n    \"16 2\\n\",\n    \"16 3\\n\",\n    \"32 2\\n\",\n    \"64 1\\n\",\n    \"128 3\\n\",\n    \"256 2\\n\",\n    \"512 3\\n\",\n    \"1024 3\\n\",\n    \"1024 1\\n\",\n    \"4096 3\\n\",\n    \"8192 2\\n\",\n    \"16384 2\\n\",\n    \"32768 2\\n\",\n    \"65536 1\\n\",\n    \"65536 3\\n\",\n    \"262144 1\\n\",\n    \"524288 4\\n\",\n    \"1048576 2\\n\",\n    \"2097152 1\\n\",\n    \"2097152 1\\n\",\n    \"8388608 2\\n\",\n    \"2097152 1\\n\",\n    \"33554432 2\\n\",\n    \"67108864 1\\n\",\n    \"67108864 2\\n\",\n    \"134217728 1\\n\",\n    \"536870912 2\\n\",\n    \"1 1\\n\",\n    \"1 2\\n\",\n    \"64 5\\n\",\n    \"512 5\\n\",\n    \"1 8\\n\",\n    \"64 1\\n\",\n    \"1 100\\n\",\n    \"2 100\\n\",\n    \"1 100\\n\",\n    \"536870912 1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/649/A",
  "starter_code": ""
}