{
  "task_id": "APPS/256",
  "problem_id": 256,
  "prompt": "Kicker (table football) is a board game based on football, in which players control the footballers' figures mounted on rods by using bars to get the ball into the opponent's goal. When playing two on two, one player of each team controls the goalkeeper and the full-backs (plays defence), the other player controls the half-backs and forwards (plays attack).\n\nTwo teams of company Q decided to battle each other. Let's enumerate players from both teams by integers from 1 to 4. The first and second player play in the first team, the third and the fourth one play in the second team. For each of the four players we know their game skills in defence and attack. The defence skill of the i-th player is a_{i}, the attack skill is b_{i}.\n\nBefore the game, the teams determine how they will play. First the players of the first team decide who will play in the attack, and who will play in the defence. Then the second team players do the same, based on the choice of their opponents.\n\nWe will define a team's defence as the defence skill of player of the team who plays defence. Similarly, a team's attack is the attack skill of the player of the team who plays attack. We assume that one team is guaranteed to beat the other one, if its defence is strictly greater than the opponent's attack and its attack is strictly greater than the opponent's defence.\n\nThe teams of company Q know each other's strengths and therefore arrange their teams optimally. Identify the team that is guaranteed to win (if both teams act optimally) or tell that there is no such team.\n\n\n-----Input-----\n\nThe input contain the players' description in four lines. The i-th line contains two space-separated integers a_{i} and b_{i} (1 \u2264 a_{i}, b_{i} \u2264 100) \u2014 the defence and the attack skill of the i-th player, correspondingly.\n\n\n-----Output-----\n\nIf the first team can win, print phrase \"Team 1\" (without the quotes), if the second team can win, print phrase \"Team 2\" (without the quotes). If no of the teams can definitely win, print \"Draw\" (without the quotes).\n\n\n-----Examples-----\nInput\n1 100\n100 1\n99 99\n99 99\n\nOutput\nTeam 1\n\nInput\n1 1\n2 2\n3 3\n2 2\n\nOutput\nTeam 2\n\nInput\n3 3\n2 2\n1 1\n2 2\n\nOutput\nDraw\n\n\n\n-----Note-----\n\nLet consider the first test sample. The first team can definitely win if it will choose the following arrangement: the first player plays attack, the second player plays defence.\n\nConsider the second sample. The order of the choosing roles for players makes sense in this sample. As the members of the first team choose first, the members of the second team can beat them (because they know the exact defence value and attack value of the first team).",
  "solutions": "[\"a,b=list(map(int,input().split()))\\nc,d=list(map(int,input().split()))\\n\\n\\nx,y=list(map(int,input().split()))\\nz,w=list(map(int,input().split()))\\n\\n\\nTeam1=False\\nTeam2=False\\nif(a>w and a>y and d>x and d>z):\\n    Team1=True\\n\\nif(c>w and c>y and b>x and b>z):\\n    Team1=True\\n\\nif(((x>b and w>c) or (z>b and y>c)) and ((x>d and w>a) or (z>d and y>a))):\\n    Team2=True\\n\\n\\nif(Team1):\\n    print(\\\"Team 1\\\")\\nelif(Team2):\\n    print(\\\"Team 2\\\")\\nelse:\\n    print(\\\"Draw\\\")\\n\", \"def check(a1,b1,a2,b2):\\n\\tif b1 > a2 and a1 > b2:\\n\\t\\treturn True\\n\\treturn False\\ndef solve(x):\\n\\tif (check(x[0][0],x[1][1],x[2][0],x[3][1]) and check(x[0][0],x[1][1],x[3][0],x[2][1])) or \\\\\\n\\t   (check(x[1][0],x[0][1],x[2][0],x[3][1]) and check(x[1][0],x[0][1],x[3][0],x[2][1])):\\n\\t\\treturn 1\\n\\tif (check(x[3][0],x[2][1],x[0][0],x[1][1]) or check(x[2][0],x[3][1],x[0][0],x[1][1])) and \\\\\\n\\t   (check(x[3][0],x[2][1],x[1][0],x[0][1]) or check(x[2][0],x[3][1],x[1][0],x[0][1])):\\n\\t\\treturn 2\\n\\treturn 0\\ndef main():\\n\\tx = []\\n\\tfor i in range(4):\\n\\t\\ttmp = list(map(int,input().split()))\\n\\t\\tx.append(tmp)\\n\\tw = solve(x)\\n\\tif w == 0:\\n\\t\\tprint('Draw')\\n\\telse:\\n\\t\\tprint('Team {}'.format(w))\\nmain()\", \"def win(a,b,c,d):\\n    if a>d and b>c:  return 1\\n    return 0\\na={}\\nb={}\\nfor i in range(2):           \\n    a[i*2],b[i*2]=list(map(int,input('').split()))\\n    a[1+i*2],b[1+i*2]=list(map(int,input('').split()))\\n    h=b[i*2]\\n    b[i*2]=b[1+i*2]\\n    b[1+i*2]=h\\nif (win(a[0],b[0],a[2],b[2])*win(a[0],b[0],a[3],b[3])==1) or (win(a[1],b[1],a[2],b[2])*win(a[1],b[1],a[3],b[3])==1):\\n    print ('Team 1')\\n    return\\nif (win(a[2],b[2],a[0],b[0])*win(a[2],b[2],a[1],b[1])==1) or (win(a[3],b[3],a[0],b[0])*win(a[3],b[3],a[1],b[1])==1) or (win(a[2],b[2],a[0],b[0])*win(a[3],b[3],a[1],b[1])==1) or (win(a[2],b[2],a[1],b[1])*win(a[3],b[3],a[0],b[0])==1):\\n    print ('Team 2')\\n    return\\nprint('Draw')\\n\\n\\n\", \"def _win(a, b, c, d):\\n    if a[0] > c[1] and b[1] > d[0]:\\n        return 1\\n    elif a[0] < c[1] and b[1] < d[0]:\\n        return -1\\n    else:\\n        return 0\\n\\n\\ndef win(a, b, c, d):\\n    nonlocal p\\n    return _win(p[a], p[b], p[c], p[d])\\n\\n\\ndef win_comb(a, b, c, d):\\n    x, y = win(a, b, c, d), win(a, b, d, c)\\n    if x == 1 and y == 1:\\n        return 1\\n    if x == -1 or y == -1:\\n        return -1\\n    return 0\\n\\n\\ndef win_team1(a, b, c, d):\\n    x, y = win_comb(a, b, c, d), win_comb(b, a, c, d)\\n    if x == 1 or y == 1:\\n        return 1\\n    if x == -1 and y == -1:\\n        return -1\\n    return 0\\n\\np = []\\nfor i in range(4):\\n    p.append(tuple(map(int, input().split())))\\nw = win_team1(0, 1, 2, 3)\\nif w == 1:\\n    print('Team 1')\\nelif w == -1:\\n    print('Team 2')\\nelse:\\n    print('Draw')\\n\", \"team1, team2 = (lambda t : [[list(map(int, input().split())) for x in range(2)] for y in range(2)])('input')\\nif (lambda t1, t2 : any(all(t1[x][0] > t2[y][1] and t1[1 - x][1] > t2[1 - y][0] for y in range(2)) for x in range(2)))(team1, team2):\\n    print('Team 1')\\nelif (lambda t1, t2 : all(any(t2[y][0] > t1[x][1] and t2[1 - y][1] > t1[1 - x][0] for y in range(2)) for x in range(2)))(team1, team2):\\n    print('Team 2')\\nelse:\\n    print('Draw')\\n\", \"import sys\\nread = lambda: list(map(int, sys.stdin.readline().split()))\\na0, d0 = read()\\na1, d1 = read()\\n\\na2, d2 = read()\\na3, d3 = read()\\n\\nw02 = a0 > d3 and d1 > a2\\nw03 = a0 > d2 and d1 > a3\\nw12 = a1 > d3 and d0 > a2\\nw13 = a1 > d2 and d0 > a3\\n\\nw20 = a2 > d1 and d3 > a0\\nw21 = a2 > d0 and d3 > a1\\nw30 = a3 > d1 and d2 > a0\\nw31 = a3 > d0 and d2 > a1\\n\\nif w02 and w03 or w12 and w13:\\n    print(\\\"Team 1\\\")\\nelif (w20 or w30) and (w21 or w31):\\n    print(\\\"Team 2\\\")\\nelse:\\n    print(\\\"Draw\\\")\\n\", \"def main():\\n\\tM = [0] * 4\\n\\tfor i in range(4):\\n\\t\\tM[i] = list(map(int, input().split()))\\n\\n\\tW = [[0] * 2 for i in range(2)]\\n\\tfor i in range(0, 2):\\n\\t\\tfor j in range(2, 4):\\n\\t\\t\\tif M[i][0] > M[j][1] and M[i ^ 1][1] > M[j ^ 1][0]:\\n\\t\\t\\t\\tW[i][j - 2] = 1\\n\\t\\t\\telif M[i][0] < M[j][1] and M[i ^ 1][1] < M[j ^ 1][0]:\\n\\t\\t\\t\\tW[i][j - 2] = -1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tW[i][j - 2] = 0\\n\\tif max(W[0][0] + W[0][1], W[1][0] + W[1][1]) == 2:\\n\\t\\tprint(\\\"Team 1\\\")\\n\\telif min(W[0][0], W[0][1]) + min(W[1][0], W[1][1]) == -2:\\n\\t\\tprint(\\\"Team 2\\\")\\n\\telse:\\n\\t\\tprint(\\\"Draw\\\")\\n\\nmain()\", \"mtr=[[1,0],[0,1]]\\np1=list(map(int,input().split()))\\np2=list(map(int,input().split()))\\np3=list(map(int,input().split()))\\np4=list(map(int,input().split()))\\nw1=w2=0\\nfor l1 in mtr:\\n    wi1=wi2=0\\n    for l2 in mtr:\\n        at1=p1[1] if l1[0]==1 else p2[1]\\n        z1=p1[0] if l1[0]==0 else p2[0]\\n        at2=p3[1] if l2[0]==1 else p4[1]\\n        z2=p3[0] if l2[0]==0 else p4[0]\\n        if at1>z2 and z1>at2:\\n            wi1+=1\\n        elif at1<z2 and z1<at2:\\n            wi2+=1\\n    if wi2>=1:\\n        w2+=1\\n    elif wi1==2:\\n        w1+=1\\nif w2==2:\\n    print('Team 2')\\nelif w1>=1:\\n    print('Team 1')\\nelse:\\n    print('Draw')\\n\", \"def check(a, b, c, d):\\n    if a > d and b > c:\\n        return 1\\n    return 0\\na = [0 for i in range(4)]\\nb = [0 for i in range(4)]\\nfor i in range(4):\\n    a[i], b[i] = map(int, input().split())\\nif check(a[0], b[1], a[2], b[3]) and check(a[0], b[1], a[3], b[2]):\\n    print('Team 1')\\nelif check(a[1], b[0], a[2], b[3]) and check(a[1], b[0], a[3], b[2]):\\n    print('Team 1')\\nelif (check(a[2], b[3], a[0], b[1]) or check(a[3], b[2], a[0], b[1])) and (check(a[3], b[2], a[1], b[0]) or check(a[2], b[3], a[1], b[0])):\\n    print('Team 2')\\nelse:\\n    print('Draw')\", \"    \\ndef play(t1, t2):    \\n    r = 0\\n    if t1[0] > t2[1] and t1[1] > t2[0]:\\n        r = 1\\n    elif t1[0] < t2[1] and t1[1] < t2[0]:\\n        r = -1\\n    else:\\n        r = 0\\n    #print(\\\"play:\\\", t1, t2, r)\\n    return r\\n\\np = []\\nm = []\\nres = []\\n\\nfor _ in range(4):\\n    a, b = map(int, input().split(\\\" \\\"))\\n    p.append((a, b))    \\n\\nm.append((p[0][0], p[1][1]))\\nm.append((p[1][0], p[0][1]))\\nm.append((p[2][0], p[3][1]))\\nm.append((p[3][0], p[2][1]))\\n    \\nres.append((play(m[0], m[2]), play(m[0], m[3])))\\nres.append((play(m[1], m[2]), play(m[1], m[3])))\\n\\n#print(res)\\nmm = max([max(i) for i in res])\\nres = [i for i in res if max(i) == mm]\\nres = [min(i) for i in res]\\n#print(res)\\n#rr = min(res) + 1\\nif 1 in res:\\n    rr = 2\\nelse:\\n    rr = max(res) + 1\\nss = [\\\"Team 2\\\", \\\"Draw\\\", \\\"Team 1\\\"]\\nprint(ss[rr])\", \"def f():\\n    a, b = map(int, input().split())\\n    A, B = map(int, input().split())\\n    return ((a, B), (A, b))\\ndef g(u, v): return u[0] > v[1] and u[1] > v[0]\\nx, y = f(), f()\\nif any(all(g(j, i) for i in y) for j in x): print('Team 1')\\nelif all(any(g(i, j) for i in y) for j in x): print('Team 2')\\nelse: print('Draw')\", \"p1 = list(map(int, input().split()))\\np2 = list(map(int, input().split()))\\np3 = list(map(int, input().split()))\\np4 = list(map(int, input().split()))\\n\\nt1 = [(p1[0],p2[1]), (p2[0],p1[1])]\\nscore = [0,0]\\nt2 = [(p3[0],p4[1]), (p4[0],p3[1])]\\nt11 = t1[0]\\nt12 = t1[1]\\nt21 = t2[0]\\nt22 = t2[1]\\n# if any team of t1 wins both game, then t1 wins\\n# if any both team loses to any of t2, t2 wins\\n\\nif t11[0] > t21[1] and t11[0] > t22[1] and t11[1] > t21[0] and t11[1] >t22[0]:\\n    print(\\\"Team 1\\\")\\nelif t12[0] > t21[1] and t12[0] > t22[1] and t12[1] > t21[0] and t12[1] >t22[0]:\\n    print(\\\"Team 1\\\")\\nelif ((t11[0] < t21[1] and t11[1] < t21[0] ) or ( t11[0] < t22[1] and t11[1] < t22[0])) and ((t12[0] < t21[1] and t12[1] < t21[0] ) or ( t12[0] < t22[1] and t12[1] < t22[0])):\\n    print(\\\"Team 2\\\")\\nelse:\\n    print(\\\"Draw\\\")\\n\\n\\n\\n\\n\\n\\n\", \"def get_tuple():\\n\\ta, A = list(map(int, input().split()))\\n\\tb, B = list(map(int, input().split()))\\n\\treturn (a,B), (b,A)\\n\\ndef larger(a1, a2):\\n\\treturn a1[0] > a2[1] and a1[1] > a2[0]\\n\\ndef smaller(a1, a2):\\n\\treturn a1[0] < a2[1] and a1[1] < a2[0]\\n\\nt11, t12 = get_tuple()\\nt21, t22 = get_tuple()\\n\\nif larger(t11,t21) and larger(t11, t22):\\n\\tprint(\\\"Team 1\\\")\\nelif larger(t12, t21) and larger(t12, t22):\\n\\tprint(\\\"Team 1\\\")\\nelif (smaller(t11,t21) or smaller(t11, t22)) and (smaller(t12, t21) or smaller(t12, t22)):\\n\\tprint(\\\"Team 2\\\")\\nelse:\\n\\tprint(\\\"Draw\\\")\\n\\n\\n\\n\", \"p11 = list(map(int, input().split()))\\np12 = list(map(int, input().split()))\\np21 = list(map(int, input().split()))\\np22 = list(map(int, input().split()))\\n\\ndef f(a, b, c, d):\\n    if a[0] > d[1] and b[1] > c[0]:\\n        return 1\\n    if a[0] < d[1] and b[1] < c[0]:\\n        return 2\\n    return 0\\n\\nc1 = f(p11, p12, p21, p22)\\nc2 = f(p12, p11, p21, p22)\\nc3 = f(p11, p12, p22, p21)\\nc4 = f(p12, p11, p22, p21)\\n#print(c1, c2, c3, c4)\\n#false - win 1 true - win 2\\n\\nif ((c1 == 2 or c3 == 2) and (c2 == 2 or c4 == 2)):\\n    print(\\\"Team 2\\\")\\nelif ((c1 == 1 and c3 == 1) or (c2 == 1 and c4 == 1)):\\n    print(\\\"Team 1\\\")\\nelse:\\n    print(\\\"Draw\\\")\\n\", \"team1, team2 = (lambda t : [[list(map(int, input().split())) for x in range(2)] for y in range(2)])('input')\\nif (lambda t1, t2 : any(all(t1[x][0] > t2[y][1] and t1[1 - x][1] > t2[1 - y][0] for y in range(2)) for x in range(2)))(team1, team2):\\n    print('Team 1')\\nelif (lambda t1, t2 : all(any(t2[y][0] > t1[x][1] and t2[1 - y][1] > t1[1 - x][0] for y in range(2)) for x in range(2)))(team1, team2):\\n    print('Team 2')\\nelse:\\n    print('Draw')\\n\", \"def find_winer(defence1, attack1, defence2, attack2):\\n    if defence1[0] > attack2[1] and attack1[1] > defence2[0]:\\n        return 1\\n    elif defence1[0] < attack2[1] and attack1[1] < defence2[0]:\\n        return 2\\n    else:\\n        return 0\\n\\n\\ndef find_results(players):\\n    results = []\\n    results.append(find_winer(players[0], players[1], players[2], players[3]))\\n    results.append(find_winer(players[0], players[1], players[3], players[2]))\\n    results.append(find_winer(players[1], players[0], players[2], players[3]))\\n    results.append(find_winer(players[1], players[0], players[3], players[2]))\\n\\n    return results\\n\\n\\ndef solve():\\n    players = []\\n    for i in range(4):\\n        players.append(tuple(map(int, input().split())))\\n\\n    results = find_results(players)\\n    if (results[0] == 1 and results[1] == 1) or (results[2] == 1 and results[3] == 1):\\n        print (\\\"Team 1\\\")\\n    elif (results[0] == 2 or results[1] == 2) and (results[2] == 2 or results[3] == 2):\\n        print(\\\"Team 2\\\")\\n    else:\\n        print(\\\"Draw\\\")\\n\\n\\nsolve()\\n\", \"x = [tuple(int(i) for i in input().split()) for j in range(4)]\\nif x[0][0] + x[1][1] > x[0][1] + x[1][0]:\\n    t1atk = x[1][1]\\n    t1def = x[0][0]\\nelse:\\n    t1atk = x[0][1]\\n    t1def = x[1][0]\\n\\ndef f():\\n    if  t1atk > t2def and t1def > t2atk:\\n        return 0\\n    elif t1atk < t2def and t1def < t2atk:\\n        return 2\\n    else:\\n        return 1\\n\\nt2def = x[2][0]\\nt2atk = x[3][1]\\na = f()\\n\\nt2def = x[3][0]\\nt2atk = x[2][1]\\nb = f()\\n\\nif a > b:\\n    t2def = x[2][0]\\n    t2atk = x[3][1]\\nelse:\\n    t2def = x[3][0]\\n    t2atk = x[2][1]\\n\\nif t1atk > t2def and t1def > t2atk:\\n    print(\\\"Team 1\\\")\\nelif t1atk < t2def and t1def < t2atk:\\n    print(\\\"Team 2\\\")\\nelse:\\n    print(\\\"Draw\\\")\\n\\n\", \"p1 = input().split(\\\" \\\")\\np2 = input().split(\\\" \\\")\\np3 = input().split(\\\" \\\")\\np4 = input().split(\\\" \\\")\\n\\n# type 1, p1, p2\\nversion11 = int(p1[0]) > int(p3[1]) and int(p2[1]) > int(p4[0])\\nversion12 = int(p1[0]) > int(p4[1]) and int(p2[1]) > int(p3[0])\\nversion21 = int(p2[0]) > int(p3[1]) and int(p1[1]) > int(p4[0])\\nversion22 = int(p2[0]) > int(p4[1]) and int(p1[1]) > int(p3[0])\\n\\nversion112 = int(p1[0]) < int(p3[1]) and int(p2[1]) < int(p4[0])\\nversion122 = int(p1[0]) < int(p4[1]) and int(p2[1]) < int(p3[0])\\nversion212 = int(p2[0]) < int(p3[1]) and int(p1[1]) < int(p4[0])\\nversion222 = int(p2[0]) < int(p4[1]) and int(p1[1]) < int(p3[0])\\n\\nif (version11 and version12) or (version21 and version22):\\n\\tprint(\\\"Team 1\\\")\\nelif (version112 or version122) and (version212 or version222):\\n\\tprint(\\\"Team 2\\\")\\nelse:\\n\\tprint(\\\"Draw\\\")\\n\", \"a1,d1 = [int(a) for a in input().split()]\\na2,d2 = [int(a) for a in input().split()]\\na3,d3 = [int(a) for a in input().split()]\\na4,d4 = [int(a) for a in input().split()]\\n\\n# Team 1 wins if E a team 1 st A team 2, team 1 must win\\n# Team 2 wins if A team 1 E team 2 st team 2 must win\\n\\nteam1win = False\\nfor (A1,D1) in [(a1,d2),(a2,d1)]:\\n    good = True\\n    for (A2,D2) in [(a3,d4),(a4,d3)]:\\n        if A1 <= D2 or D1 <= A2:\\n            good = False\\n    if good:\\n        team1win = True\\nteam2win = True\\nfor (A1,D1) in [(a1,d2),(a2,d1)]:\\n    good = False\\n    for (A2,D2) in [(a3,d4),(a4,d3)]:\\n        if D2 > A1 and A2 > D1:\\n            good = True\\n    if not good:\\n        team2win = False\\n\\nif team1win:\\n    print('Team 1')\\nelif team2win:\\n    print('Team 2')\\nelse:\\n    print('Draw')\\n\", \"def f():\\n    a, b = list(map(int, input().split()))\\n    A, B = list(map(int, input().split()))\\n    return ((a, B), (A, b))\\ndef g(u, v): return u[0] > v[1] and u[1] > v[0]\\nx, y = f(), f()\\nif any(all(g(j, i) for i in y) for j in x): print('Team 1')\\nelif all(any(g(i, j) for i in y) for j in x): print('Team 2')\\nelse: print('Draw')\\n\", \"def f():\\n    a, b = list(map(int, input().split()))\\n    A, B = list(map(int, input().split()))\\n    return ((a, B), (A, b))\\ndef g(u, v): return u[0] > v[1] and u[1] > v[0]\\nx, y = f(), f()\\nif any(all(g(j, i) for i in y) for j in x): print('Team 1')\\nelif all(any(g(i, j) for i in y) for j in x): print('Team 2')\\nelse: print('Draw')\\n\", \"def f():\\n    a, b = list(map(int, input().split()))\\n    A, B = list(map(int, input().split()))\\n    return ((a, B), (A, b))\\ndef g(u, v): return u[0] > v[1] and u[1] > v[0]\\nx, y = f(), f()\\nif any(all(g(j, i) for i in y) for j in x): print('Team 1')\\nelif all(any(g(i, j) for i in y) for j in x): print('Team 2')\\nelse: print('Draw')\\n\", \"def f():\\n    a, b = list(map(int, input().split()))\\n    A, B = list(map(int, input().split()))\\n    return ((a, B), (A, b))\\ndef g(u, v): return u[0] > v[1] and u[1] > v[0]\\nx, y = f(), f()\\nif any(all(g(j, i) for i in y) for j in x): print('Team 1')\\nelif all(any(g(i, j) for i in y) for j in x): print('Team 2')\\nelse: print('Draw')\\n\", \"def f():\\n    a, b = list(map(int, input().split()))\\n    A, B = list(map(int, input().split()))\\n    return ((a, B), (A, b))\\ndef g(u, v): return u[0] > v[1] and u[1] > v[0]\\nx, y = f(), f()\\nif any(all(g(j, i) for i in y) for j in x): print('Team 1')\\nelif all(any(g(i, j) for i in y) for j in x): print('Team 2')\\nelse: print('Draw')\\n\", \"def f():\\n    a, b = list(map(int, input().split()))\\n    A, B = list(map(int, input().split()))\\n    return ((a, B), (A, b))\\ndef g(u, v): return u[0] > v[1] and u[1] > v[0]\\nx, y = f(), f()\\nif any(all(g(j, i) for i in y) for j in x): print('Team 1')\\nelif all(any(g(i, j) for i in y) for j in x): print('Team 2')\\nelse: print('Draw')\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"1 100\\n100 1\\n99 99\\n99 99\\n\",\n    \"1 1\\n2 2\\n3 3\\n2 2\\n\",\n    \"3 3\\n2 2\\n1 1\\n2 2\\n\",\n    \"80 79\\n79 30\\n80 81\\n40 80\\n\",\n    \"10 10\\n4 9\\n8 9\\n7 6\\n\",\n    \"10 2\\n9 3\\n3 1\\n9 4\\n\",\n    \"6 3\\n6 10\\n2 5\\n4 4\\n\",\n    \"8 7\\n1 5\\n7 4\\n8 8\\n\",\n    \"2 7\\n8 4\\n4 6\\n10 8\\n\",\n    \"8 3\\n4 9\\n6 1\\n5 6\\n\",\n    \"10 5\\n3 1\\n1 9\\n1 2\\n\",\n    \"6 5\\n10 6\\n8 1\\n3 2\\n\",\n    \"6 2\\n7 5\\n5 4\\n8 6\\n\",\n    \"1 10\\n1 10\\n1 1\\n7 8\\n\",\n    \"16 7\\n9 3\\n11 2\\n11 4\\n\",\n    \"20 17\\n14 10\\n10 7\\n19 18\\n\",\n    \"12 7\\n3 17\\n4 15\\n2 8\\n\",\n    \"8 14\\n8 12\\n7 20\\n14 6\\n\",\n    \"4 4\\n4 15\\n2 4\\n10 12\\n\",\n    \"4 10\\n9 9\\n9 12\\n13 10\\n\",\n    \"20 20\\n18 8\\n15 5\\n17 20\\n\",\n    \"12 10\\n7 3\\n10 5\\n1 14\\n\",\n    \"8 16\\n12 10\\n13 18\\n8 4\\n\",\n    \"16 15\\n19 1\\n16 16\\n20 9\\n\",\n    \"12 29\\n44 8\\n18 27\\n43 19\\n\",\n    \"28 46\\n50 27\\n23 50\\n21 45\\n\",\n    \"40 6\\n9 1\\n16 18\\n4 23\\n\",\n    \"4 16\\n6 28\\n12 32\\n28 3\\n\",\n    \"16 22\\n11 3\\n17 5\\n12 27\\n\",\n    \"32 32\\n10 28\\n14 23\\n39 5\\n\",\n    \"48 41\\n15 47\\n11 38\\n19 31\\n\",\n    \"8 9\\n11 17\\n11 6\\n5 9\\n\",\n    \"24 19\\n18 44\\n8 29\\n30 39\\n\",\n    \"22 4\\n29 38\\n31 43\\n47 21\\n\",\n    \"51 54\\n95 28\\n42 28\\n17 48\\n\",\n    \"11 64\\n92 47\\n88 93\\n41 26\\n\",\n    \"27 74\\n97 22\\n87 65\\n24 52\\n\",\n    \"43 32\\n49 48\\n42 33\\n60 30\\n\",\n    \"55 50\\n54 23\\n85 6\\n32 60\\n\",\n    \"19 56\\n59 46\\n40 70\\n67 34\\n\",\n    \"31 67\\n8 13\\n86 91\\n43 12\\n\",\n    \"47 77\\n13 88\\n33 63\\n75 38\\n\",\n    \"59 35\\n10 14\\n88 23\\n58 16\\n\",\n    \"63 4\\n18 60\\n58 76\\n44 93\\n\",\n    \"14 47\\n47 42\\n21 39\\n40 7\\n\",\n    \"67 90\\n63 36\\n79 56\\n25 56\\n\",\n    \"64 73\\n59 46\\n8 19\\n57 18\\n\",\n    \"23 80\\n62 56\\n56 31\\n9 50\\n\",\n    \"86 95\\n86 38\\n59 66\\n44 78\\n\",\n    \"10 3\\n2 5\\n1 10\\n2 10\\n\",\n    \"62 11\\n79 14\\n46 36\\n91 52\\n\",\n    \"8 4\\n9 10\\n7 3\\n6 5\\n\",\n    \"21 12\\n29 28\\n16 4\\n10 1\\n\",\n    \"91 71\\n87 45\\n28 73\\n9 48\\n\",\n    \"4 1\\n4 3\\n6 4\\n2 8\\n\",\n    \"11 7\\n12 8\\n15 14\\n14 14\\n\",\n    \"12 7\\n3 15\\n20 18\\n20 8\\n\",\n    \"4 7\\n24 11\\n17 30\\n21 4\\n\",\n    \"21 22\\n21 16\\n32 14\\n39 35\\n\",\n    \"16 48\\n16 49\\n10 68\\n60 64\\n\",\n    \"46 33\\n12 3\\n11 67\\n98 77\\n\",\n    \"19 9\\n47 28\\n83 41\\n76 14\\n\",\n    \"36 68\\n65 82\\n37 6\\n21 60\\n\",\n    \"70 98\\n62 5\\n30 50\\n66 96\\n\",\n    \"45 69\\n91 96\\n72 67\\n24 30\\n\",\n    \"34 38\\n91 17\\n2 12\\n83 90\\n\",\n    \"30 31\\n98 15\\n40 62\\n10 22\\n\"\n  ],\n  \"outputs\": [\n    \"Team 1\\n\",\n    \"Team 2\\n\",\n    \"Draw\\n\",\n    \"Team 2\\n\",\n    \"Team 1\\n\",\n    \"Draw\\n\",\n    \"Team 1\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Team 1\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Team 2\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Team 1\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Team 2\\n\",\n    \"Team 1\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Team 2\\n\",\n    \"Team 2\\n\",\n    \"Team 2\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Team 1\\n\",\n    \"Team 1\\n\",\n    \"Team 1\\n\",\n    \"Team 1\\n\",\n    \"Team 1\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Team 1\\n\",\n    \"Team 1\\n\",\n    \"Team 1\\n\",\n    \"Team 2\\n\",\n    \"Team 2\\n\",\n    \"Team 2\\n\",\n    \"Team 2\\n\",\n    \"Team 2\\n\",\n    \"Team 2\\n\",\n    \"Team 2\\n\",\n    \"Draw\\n\",\n    \"Team 1\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/411/C",
  "starter_code": ""
}