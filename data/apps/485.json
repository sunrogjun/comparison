{
  "task_id": "APPS/485",
  "problem_id": 485,
  "prompt": "The Cybermen and the Daleks have long been the Doctor's main enemies. Everyone knows that both these species enjoy destroying everything they encounter. However, a little-known fact about them is that they both also love taking Turing tests!\n\nHeidi designed a series of increasingly difficult tasks for them to spend their time on, which would allow the Doctor enough time to save innocent lives!\n\nThe funny part is that these tasks would be very easy for a human to solve.\n\nThe first task is as follows. There are some points on the plane. All but one of them are on the boundary of an axis-aligned square (its sides are parallel to the axes). Identify that point.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($2 \\le n \\le 10$).\n\nEach of the following $4n + 1$ lines contains two integers $x_i, y_i$ ($0 \\leq x_i, y_i \\leq 50$), describing the coordinates of the next point.\n\nIt is guaranteed that there are at least $n$ points on each side of the square and all $4n + 1$ points are distinct.\n\n\n-----Output-----\n\nPrint two integers\u00a0\u2014 the coordinates of the point that is not on the boundary of the square.\n\n\n-----Examples-----\nInput\n2\n0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n\nOutput\n1 1\n\nInput\n2\n0 0\n0 1\n0 2\n0 3\n1 0\n1 2\n2 0\n2 1\n2 2\n\nOutput\n0 3\n\n\n\n-----Note-----\n\nIn both examples, the square has four sides $x=0$, $x=2$, $y=0$, $y=2$.",
  "solutions": "[\"#!/usr/bin/env python\\nimport sys\\n\\nn = int(input())\\nk = (n << 2) + 1\\n\\nx, y = [], []\\nfor i in range(k):\\n    xi, yi = list(map(int, input().split()))\\n    x.append(xi)\\n    y.append(yi)\\n\\nfor lx in range(0, 50):\\n    for ly in range(0, 50):\\n        for side_len in range(1, 51):\\n            ok, idx = True, -1\\n            for i in range(k):\\n                if not (((x[i] == lx or x[i] == lx + side_len) and ly <= y[i] <= ly + side_len) or\\n                    ((lx <= x[i] <= lx + side_len) and (y[i] == ly or y[i] == ly + side_len))):\\n                    if idx != -1:\\n                        ok = False\\n                    else:\\n                        idx = i\\n            if ok:\\n                print(x[idx], y[idx])\\n                return\\n\", \"n = int(input())\\nl = [ list(map(int,input().split())) for _ in range(4*n+1) ]\\nx, y = list(map(list, list(zip(*l))))\\nhx, lx, hy, ly = max(x), min(x), max(y), min(y)\\ndef find(w, i):\\n    for j in l:\\n        if j[ w ] == i:\\n            return j\\n\\nif x.count(hx) == 1:\\n    print( *find( 0, hx ) )\\nelif x.count(lx) == 1:\\n    print( *find( 0, lx ) )\\nelif y.count(hy) == 1:\\n    print( *find( 1, hy ) )\\nelif y.count(ly) == 1:\\n    print( *find( 1, ly ) )\\nelse:\\n    for i in l:\\n        if i[ 0 ] not in[ hx, lx ] and i[ 1 ] not in [ hy, ly ]:\\n            print( *i )\\n            break\\n\", \"\\nN = int(input())\\n\\n#N,B = [int(x) for x in arr.split(' ')]\\n\\n#arr = input()\\n#A = [int(x) for x in arr.split(' ')]\\n\\nx_freq = {}\\ny_freq = {}\\n\\ndata = []\\nfor i in range(4*N+1):\\n    arr = input()\\n    x,y = [int(x) for x in arr.split(' ')]\\n    data.append([x,y])\\n    \\n    if x not in x_freq:\\n        x_freq[x] = 1\\n    else:\\n        x_freq[x] += 1\\n        \\n    if y not in y_freq:\\n        y_freq[y] = 1\\n    else:\\n        y_freq[y] += 1\\n        \\nx_inteval = []\\ny_inteval = []\\n\\nfor num in x_freq:\\n    if x_freq[num]>=(N):\\n        x_inteval.append(num)\\n        \\nfor num in y_freq:\\n    if y_freq[num]>=(N):\\n        y_inteval.append(num)\\n        \\nx_inteval = [min(x_inteval),max(x_inteval)]\\ny_inteval = [min(y_inteval),max(y_inteval)]\\n#print(x_inteval,y_inteval)\\nfor p in data:\\n    if (p[0] not in x_inteval) and (p[1] not in y_inteval):\\n        print(p[0],p[1])\\n        quit()\\n    elif p[0]<x_inteval[0] or p[0]>x_inteval[1]:\\n        print(p[0],p[1])\\n        quit()\\n    elif p[1]<y_inteval[0] or p[1]>y_inteval[1]:\\n        print(p[0],p[1])\\n        quit()\\n\", \"n = int(input())\\n\\nl = []\\ndx = dict()\\ndy = dict()\\n\\nfor _ in range(4 * n + 1):\\n    x, y = list(map(int, input().split(\\\" \\\")))\\n    l.append((x, y))\\n    dx[x] = dx.get(x, 0) + 1\\n    dy[y] = dy.get(y, 0) + 1\\n\\nxmin = min(dx.keys())\\nxmax = max(dx.keys())\\nymin = min(dy.keys())\\nymax = max(dy.keys())\\n\\ndef find(enu, f):\\n    for e in enu:\\n        if f(e):\\n            return e\\n    return None\\n\\nintruder = None\\nif dx[xmin] == 1:\\n    intruder = find(l, lambda e: e[0] == xmin)\\nelif dx[xmax] == 1:\\n    intruder = find(l, lambda e: e[0] == xmax)\\nelif dy[ymin] == 1:\\n    intruder = find(l, lambda e: e[1] == ymin)\\nelif dy[ymax] == 1:\\n    intruder = find(l, lambda e: e[1] == ymax)\\nelse:\\n    intruder = find(l, lambda e: e[0] > xmin and e[0] < xmax and e[1] > ymin and e[1] < ymax)\\n\\nx, y = intruder\\nprint(x, y)\\n\", \"# -*- coding: utf-8 -*-\\nimport sys\\nfrom operator import itemgetter\\nfrom fractions import gcd\\nfrom math import ceil, floor\\nfrom copy import deepcopy\\nfrom itertools import accumulate\\nfrom collections import Counter\\nimport math\\nfrom functools import reduce\\nfrom bisect import bisect_right\\nsys.setrecursionlimit(200000)\\ninput = sys.stdin.readline\\ndef ii(): return int(input())\\ndef mi(): return map(int, input().rstrip().split())\\ndef lmi(): return list(map(int, input().rstrip().split()))\\ndef li(): return list(input().rstrip())\\ndef debug(x): print(\\\"debug: \\\", x, file=sys.stderr)\\n# template\\n\\n\\ndef main():\\n    n = ii()\\n    a = [tuple(mi()) for i in range(4 * n + 1)]\\n    # print(a)\\n    for x in range(60):\\n        for y in range(60):\\n            for m in range(60):\\n                ans = []\\n                for i in range(4 * n + 1):\\n                    if ((x == a[i][0] or x + m == a[i][0]) and y <= a[i][1] <= y+m) or ((y == a[i][1] or y + m == a[i][1]) and x <= a[i][0] <= x+m):\\n                        continue\\n                    else:\\n                        ans.append(a[i])\\n                if len(ans) == 1:\\n                    # print(x, y, m)\\n                    print(ans[0][0], ans[0][1])\\n                    return\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n = int(input())\\n\\narr = []\\nfor i in range(4*n + 1):\\n    str_ = input()\\n    x, y = str_.split()\\n    arr.append((int(x), int(y)))\\n\\narr.sort()\\n\\nn1 = 4*n+1\\n\\ni = 1\\nwhile arr[i][0] == arr[i-1][0]:\\n    i += 1\\n\\nif i == 1:\\n    print(str(arr[0][0]) + ' ' + str(arr[0][1]))\\n    return\\nlow_x = arr[0][0]\\n\\ni = n1-2\\nwhile arr[i][0] == arr[i+1][0]:\\n    i -= 1\\nif i == n1-2:\\n    print(str(arr[n1-1][0]) + ' ' + str(arr[n1-1][1]))\\n    return\\nhigh_x = arr[n1-1][0]\\n\\n\\nfor i in range(n1):\\n    arr[i] = (arr[i][1], arr[i][0])\\n\\narr.sort()\\ni = 1\\nwhile arr[i][0] == arr[i-1][0]:\\n    i += 1\\nif i == 1:\\n    print(str(arr[0][1]) + ' ' + str(arr[0][0]))\\n    return\\nlow_y = arr[0][0]\\n\\ni = n1-2\\nwhile arr[i][0] == arr[i+1][0]:\\n    i -= 1\\nif i == n1-2:\\n    print(str(arr[n1-1][1]) + ' ' + str(arr[n1-1][0]))\\n    return\\nhigh_y = arr[n1-1][0]\\n\\nfor i in range(n1):\\n    arr[i] = (arr[i][1], arr[i][0])\\n\\nfor i in range(n1):\\n    if not (arr[i][0] == low_x or arr[i][0] == high_x or arr[i][1] == low_y or arr[i][1] == high_y):\\n        print(str(arr[i][0]) + ' ' + str(arr[i][1]))\\n        return\\n\\n\", \"import sys\\nimport math as m\\n\\ndef sort(a):\\n    mid = m.ceil(len(a)/2)\\n    if len(a) == 1:\\n        return a\\n    else:\\n        al = sort(a[:mid])\\n        ar = sort(a[mid:])\\n        i = 0\\n        j = 0\\n        sa = []\\n        c = []\\n        while i < len(al) or j < len(ar):\\n            if i == len(al):\\n                sa.append(ar[j])\\n                j += 1\\n            elif j == len(ar):\\n                sa.append(al[i])\\n                i += 1\\n            elif al[i]>ar[j]:\\n                sa.append(ar[j])\\n                j += 1\\n            else:\\n                sa.append(al[i])\\n                i += 1\\n        return sa\\n\\ndef main():\\n    input = sys.stdin.readline()\\n    n = int(input)\\n    x = []\\n    y = []\\n    for i in range(4*n+1):\\n        input = sys.stdin.readline()\\n        X, Y = [int(j) for j in input.split()]\\n        x.append(X)\\n        y.append(Y)\\n    xs = sort(x)\\n    ys = sort(y)\\n    px = 0\\n    py = 0\\n    if xs[0] != xs[1]:\\n        X = xs[0]\\n    elif xs[4*n-1] != xs[4*n]:\\n        X = xs[4*n]\\n    else:\\n        px = 1\\n    if ys[0] != ys[1]:\\n        Y = ys[0]\\n    elif ys[4 * n - 1] != ys[4 * n]:\\n        Y = ys[4 * n]\\n    else:\\n        py = 1\\n    if px and not(py):\\n        i = 0\\n        while i < 4*n+1 and y[i] != Y:\\n            i += 1\\n        X = x[i]\\n    if py and not(px):\\n        i = 0\\n        while i < 4 * n + 1 and x[i] != X:\\n            i += 1\\n        Y = y[i]\\n    if px and py:\\n        i = 0\\n        while x[i] == min(x) or x[i] == max(x) or y[i] == min(y) or y[i] == max(y):\\n            i += 1\\n        X, Y = x[i], y[i]\\n    print(X,Y)\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"n = int(input())\\ndef check(l):\\n    a = b = float('inf') # max points\\n    c = d = 0 # min points\\n    for x, y in l:\\n        a = min(a, x)\\n        b = min(b, y)\\n        c = max(c, x)\\n        d = max(d, y)\\n    borders = [0] * 4\\n    for x, y in l:\\n        \\n        if x in {a, c}:\\n            if y < b or y > d:\\n                return False\\n            if x == a:\\n                borders[0] += 1\\n            else:\\n                borders[1] += 1\\n        if y in {b, d}:\\n            if x < a or x > c:\\n                return False\\n            if y == b:\\n                borders[2] += 1\\n            else:\\n                borders[3] += 1\\n        if x not in {a, c} and y not in {b, d}:\\n            return False\\n    return all(e >= n for e in borders)\\n\\n\\nl = [[*map(int, input().split())] for _ in range(4 * n + 1)]\\n\\nfor i in range(len(l)):\\n    if check(l[:i] + l[i + 1:]):\\n        print(*l[i])\\n        return\", \"import math\\nimport sys,string,bisect,heapq\\ninput=sys.stdin.readline\\nfrom collections import deque,defaultdict\\nL=lambda : list(map(int,input().split()))\\nLs=lambda : list(input().split())\\nM=lambda : list(map(int,input().split()))\\nI=lambda :int(input())\\nn=I()\\nl=[]\\nx=defaultdict(int)\\ny=defaultdict(int)\\nfor i in range(4*n+1):\\n    a=L()\\n    l.append(a)\\n    x[a[0]]+=1\\n    y[a[1]]+=1\\nl.sort()\\nleftx=l[0][0]\\n\\nif(x[l[0][0]]==1 or x[l[0][0]]>n+2):\\n    keyx=l[0][0]\\n    leftx=l[1][0]\\n\\nrightx=l[-1][0]\\nif(x[l[-1][0]]==1 or x[l[-1][0]]>n+2):\\n    keyx=l[-1][0]\\n    rightx=l[-2][0]\\n\\nl.sort(key=lambda x:x[1])\\ndowny=l[0][1]\\nif(y[l[0][1]]==1 or y[l[0][1]]>n+2):\\n    keyy=l[0][1]\\n    downy=l[1][1]\\n\\nupy=l[-1][1]\\nif(y[l[-1][1]]==1 or y[l[-1][1]]>n+2):\\n    upy=l[-2][1]\\n    keyy=l[-1][1]\\nc=0\\nfor i in l:\\n    if(i[0]==leftx):\\n        if(i[1]<=upy and i[1]>=downy):\\n            c+=1\\n        else:\\n            print(*i)\\n            break\\n    elif(i[0]==rightx):\\n        if(i[1]<=upy and i[1]>=downy):\\n            c+=1\\n        else:\\n            print(*i)\\n            break\\n    else:\\n        if(i[1]==downy):\\n            if(i[0]>=leftx and i[0]<=rightx):\\n                c+=1\\n            else:\\n                print(*i)\\n                break\\n        elif(i[1]==upy):\\n            if(i[0]>=leftx and i[0]<=rightx):\\n                c+=1\\n            else:\\n                print(*i)\\n                break\\n        else:\\n            print(*i)\\n            break\\n\", \"n = int(input())\\nf = []\\nX = []\\nY = []\\nfor i in range(4 * n + 1):\\n    x, y = list(map(int, input().split()))\\n    f.append((x, y))\\n    X.append(x)\\n    Y.append(y)\\nl = min(X)\\nr = max(X)\\nd = min(Y)\\nu = max(Y)\\nif r - l == u - d:\\n    for i in f:\\n        if X.count(i[0]) == 1 and Y.count(i[1]) == 1:\\n            print(i[0], i[1])\\n            return\\n    for i in f:\\n        if l < i[0] < r and d < i[1] < u:\\n            print(i[0], i[1])\\n            return\\nelse:\\n    for i in f:\\n        if X.count(i[0]) == 1 and Y.count(i[1]) == 1:\\n            print(i[0], i[1])\\n            return\\n    for i in f:\\n        if X.count(i[0]) == 1 and (i[0] == l or i[0] == r):\\n            print(i[0], i[1])\\n            return\\n        elif Y.count(i[1]) == 1 and (i[1] == u or i[1] == d):\\n            print(i[0], i[1])\\n            return\\n\", \"n = int(input())\\nl = []\\nfor i in range(4*n+1):\\n    a,b = list(map(int, input().split()))\\n    l.append([a,b])\\nx1 = -1\\nx2 = -1\\ny1 = -1\\ny2 = -1\\nh = [0]*51\\nfor i in range(4*n+1):\\n    h[l[i][0]]+=1\\nfor i in range(51):\\n    if(h[i]>=n and x1==-1):\\n        x1=i\\n    if(h[50-i]>=n and x2==-1):\\n        x2=50-i\\nh = [0]*51\\nfor i in range(4*n+1):\\n    h[l[i][1]]+=1\\nfor i in range(51):\\n    if(h[i]>=n and y1==-1):\\n        y1=i\\n    if(h[50-i]>=n and y2==-1):\\n        y2=50-i\\n#print(x1,x2,y1,y2)\\nfor i in range(4*n+1):\\n    if(l[i][0]==x1 or l[i][0]==x2):\\n        if(not(l[i][1]>=y1 and l[i][1]<=y2)):\\n            print(l[i][0],l[i][1])\\n            break\\n    else:\\n        if(l[i][1]==y1 or l[i][1]==y2):\\n            if(not(l[i][0]>=x1 and l[i][0]<=x2)):\\n                print(l[i][0],l[i][1])\\n                break\\n        else:\\n            print(l[i][0],l[i][1])\\n            break\\n        \\n    \\n\", \"#!/usr/bin/env python\\n\\nn = int(input())\\n\\nseenx = set()\\nseeny = set()\\nxs = []\\nys = []\\n\\nfor _ in range(4*n + 1):\\n    x, y = list(map(int, input().strip().split()))\\n    seenx.add(x)\\n    seeny.add(y)\\n    xs.append(x)\\n    ys.append(y)\\n\\nbadx, bady = -1, -1\\n\\nminx = min(xs)\\nmaxx = max(xs)\\nif xs.count(minx) < n:\\n    badx = minx\\n    bady = ys[xs.index(minx)]\\nelif xs.count(maxx) < n:\\n    badx = maxx\\n    bady = ys[xs.index(maxx)]\\nminy = min(ys)\\nmaxy = max(ys)\\nif bady == -1:\\n    if ys.count(miny) < n:\\n        bady = miny\\n        badx = xs[ys.index(miny)]\\n    elif ys.count(maxy) < n:\\n        bady = maxy\\n        badx = xs[ys.index(maxy)]\\n\\nif badx == -1: #the point is inside the square\\n    for i, x in enumerate(xs):\\n        if x not in (minx, maxx) and ys[i] not in (miny, maxy):\\n            badx = x\\n            bady = ys[i]\\n            break\\n\\nprint(badx, bady)\\n\", \"from collections import Counter\\n\\nn = int(input())\\n\\npoints = [[int(i) for i in input().split()] for _ in range(4 * n + 1)]\\n\\nc_x = Counter(map(lambda a: a[0], points))\\nc_y = Counter(map(lambda a: a[1], points))\\n\\nx = [a for a in  c_x if c_x[a] >= n]\\ny = [a for a in  c_y if c_y[a] >= n]\\n\\ns_x = (min(x), max(x))\\ns_y = (min(y), max(y))\\n\\nfor p in points:\\n    if not ((p[0] in s_x and s_y[0] <= p[1] <= s_y[1]) or\\\\\\n            (p[1] in s_y and s_x[0] <= p[0] <= s_x[1])):\\n        print(*p)\", \"MAXV = 53\\n\\ndef is_on_border(x_min, x_max, y_min, y_max, x, y):\\n\\tif (x == x_min or x == x_max) and (y_min <= y and y <= y_max):\\n\\t\\treturn True\\n\\treturn (y == y_min or y == y_max) and (x_min <= x and x <= x_max)\\n\\ndef unique_non_border(p, x_min, x_max, y_min, y_max):\\n\\tres = -1\\n\\tfor i in range(len(p)):\\n\\t\\tif not is_on_border(x_min, x_max, y_min, y_max, p[i][0], p[i][1]):\\n\\t\\t\\tif res != -1:\\n\\t\\t\\t\\treturn -1\\n\\t\\t\\tres = i\\n\\treturn res\\n\\ndef sol(p):\\n\\tfor l in range(1, MAXV + 1):\\n\\t\\tfor x in range(0, MAXV - l + 1):\\n\\t\\t\\tfor y in range(0, MAXV - l + 1):\\n\\t\\t\\t\\tres = unique_non_border(p, x, x + l, y, y + l)\\n\\t\\t\\t\\tif res != -1:\\n\\t\\t\\t\\t\\treturn res\\n\\tassert(False)\\n\\treturn -1\\n\\nn = int(input())\\np = []\\nfor i in range(4 * n + 1):\\n\\tx, y = list(map(int, input().split()))\\n\\tp.append((x, y))\\nans = sol(p)\\nprint(*p[ans])\\n\", \"from sys import stdin, stdout\\ndef rsingle_int():\\n    return int(stdin.readline().rstrip())\\n \\ndef rmult_int():\\n    return [ int(x) for x in stdin.readline().rstrip().split() ]\\n \\ndef r_str():\\n    return stdin.readline().rstrip()\\n    \\ndef rsingle_char():\\n    return stdin.read(1)\\n \\ndef main():\\n    n = rsingle_int()\\n    num_p = 4 * n + 1\\n    points = []\\n    for i in range(num_p):\\n        points.append(rmult_int())\\n    \\n    point_x = {}\\n    for point in points:\\n        if point[0] not in point_x:\\n            point_x[point[0]] = 0\\n        point_x[point[0]] += 1\\n    \\n    point_y = {}\\n    for point in points:\\n        if point[1] not in point_y:\\n            point_y[point[1]] = 0\\n        point_y[point[1]] += 1\\n    \\n    x_min = 51\\n    x_max = -1\\n    for x_key in point_x.keys():\\n        if x_key > x_max and point_x[x_key] > 1:\\n            x_max = x_key\\n        if x_key < x_min and point_x[x_key] > 1:\\n            x_min = x_key\\n    \\n    \\n    y_min = 51\\n    y_max = -1\\n    for y_key in point_y.keys():\\n        if y_key > y_max and point_y[y_key] > 1:\\n            y_max = y_key\\n        if y_key < y_min and point_y[y_key] > 1:\\n            y_min = y_key\\n    \\n    # print(x_max, y_max), (x_min, y_min)\\n    found = False\\n    for point in points:\\n        if point[0] == x_max or point[0] == x_min:\\n            if not (point[1] <= y_max and point[1] >= y_min):\\n                found = True\\n        elif point[1] == y_max or point[1] == y_min:\\n            if not (point[0] <= x_max and point[0] >= x_min):\\n                found = True\\n        else:\\n            found = True\\n        if found:\\n            break\\n    if found:\\n        print(\\\"{} {}\\\".format(point[0], point[1]))\\n    else:\\n        print(\\\"Error\\\")\\n \\nmain()\", \"n = int(input())\\n\\npoints = list(tuple(map(int, input().split())) for i in range(4*n + 1))\\nxs = list(sorted(points))\\nys = list(sorted(points, key = lambda x: (x[1], x[0])))\\n\\nxsize = xs[-1][0] - xs[0][0]\\nysize = ys[-1][1] - ys[0][1]\\n\\ndef check(point):\\n    p1 = xs[-1][0] if xs[-1] != point else xs[-2][0]\\n    p2 = xs[0][0] if xs[0] != point else xs[1][0]\\n    p3 = ys[-1][1] if ys[-1] != point else ys[-2][1]\\n    p4 = ys[0][1] if ys[0] != point else ys[1][1]\\n    return p1 - p2 == p3 - p4\\n\\nif xsize == ysize:\\n    for p in points:\\n        if p[0] != xs[0][0] and p[0] != xs[-1][0] and p[1] != ys[-1][1] and p[1] != ys[0][1]:\\n            print(p[0], p[1])\\nelse:\\n    if check(xs[-1]):\\n        print(xs[-1][0], xs[-1][1])\\n    elif check(xs[0]):\\n        print(xs[0][0], xs[0][1])\\n    elif check(ys[-1]):\\n        print(ys[-1][0], ys[-1][1])\\n    elif check(ys[0]):\\n        print(ys[0][0], ys[0][1])\\n\", \"from collections import defaultdict\\n\\nn = int(input())\\ndx = defaultdict(int)\\ndy = defaultdict(int)\\nmx = my = 0\\nlx = ly = 100\\ns = set()\\nfor i in range(4 * n + 1):\\n    x, y = list(map(int, input().split()))\\n    s.add((x, y))\\n    dx[x] += 1\\n    dy[y] += 1\\n    if dx[x] > 1:\\n        if x > mx:\\n            mx = x\\n        if x < lx:\\n            lx = x\\n    if dy[y] > 1:\\n        if y > my:\\n            my = y\\n        if y < ly:\\n            ly = y\\nfor el in s:\\n    if ((lx < el[0] < mx) and (ly < el[1] < my)) or el[0] < lx or el[0] > mx or el[1] < ly or el[1] > my:\\n        print(*el)\\n\", \"def check(index):\\n    point1 = points[index]\\n    count = 0\\n    for point in points:\\n        if point[1] == point1[1]:\\n            count += 1\\n    if count == 1:\\n        return False\\n    count = 0\\n    for point in points:\\n        if point[0] == point1[0]:\\n            count += 1\\n    if count == 1:\\n        return False\\n\\n\\nn = int(input())\\npoints = []\\nfor i in range(4 * n + 1):\\n    x, y = map(int, input().split())\\n    points.append((x, y))\\nindex = 0\\nmax_x = count1 = max_y = count2 = count3 = count4 = 0\\nmin_x = min_y = 51\\nfor point in points:\\n    if point[0] > max_x:\\n        max_x = point[0]\\n    if point[0] < min_x:\\n        min_x = point[0]\\n    if point[1] > max_y:\\n        max_y = point[1]\\n    if point[1] < min_y:\\n        min_y = point[1]\\nfor point in points:\\n    if point[0] == max_x:\\n        count1 += 1\\n    if point[0] == min_x:\\n        count2 += 1\\n    if point[1] == max_y:\\n        count3 += 1\\n    if point[1] == min_y:\\n        count4 += 1\\nif count1 == 1:\\n    for point in points:\\n        if point[0] == max_x:\\n            print(point[0], point[1])\\n            return\\nif count2 == 1:\\n    for point in points:\\n        if point[0] == min_x:\\n            print(point[0], point[1])\\n            return\\nif count3 == 1:\\n    for point in points:\\n        if point[1] == max_y:\\n            print(point[0], point[1])\\n            return\\nif count4 == 1:\\n    for point in points:\\n        if point[1] == min_y:\\n            print(point[0], point[1])\\n            return\\nfor point in points:\\n    if point[0] != max_x and point[0] != min_x and point[1] != max_y and point[1] != min_y:\\n        print(point[0], point[1])\\n        return\", \"n = int(input())\\npoints = []\\nfor i in range(4 * n + 1):\\n    x, y = map(int, input().split())\\n    points.append((x, y))\\nmax_x = count1 = max_y = count2 = count3 = count4 = 0\\nmin_x = min_y = 51\\nfor point in points:\\n    if point[0] > max_x:\\n        max_x = point[0]\\n    if point[0] < min_x:\\n        min_x = point[0]\\n    if point[1] > max_y:\\n        max_y = point[1]\\n    if point[1] < min_y:\\n        min_y = point[1]\\nfor point in points:\\n    if point[0] == max_x:\\n        count1 += 1\\n    if point[0] == min_x:\\n        count2 += 1\\n    if point[1] == max_y:\\n        count3 += 1\\n    if point[1] == min_y:\\n        count4 += 1\\nif count1 == 1:\\n    for point in points:\\n        if point[0] == max_x:\\n            print(point[0], point[1])\\n            return\\nif count2 == 1:\\n    for point in points:\\n        if point[0] == min_x:\\n            print(point[0], point[1])\\n            return\\nif count3 == 1:\\n    for point in points:\\n        if point[1] == max_y:\\n            print(point[0], point[1])\\n            return\\nif count4 == 1:\\n    for point in points:\\n        if point[1] == min_y:\\n            print(point[0], point[1])\\n            return\\nfor point in points:\\n    if point[0] != max_x and point[0] != min_x and point[1] != max_y and point[1] != min_y:\\n        print(point[0], point[1])\\n        return\", \"# cook your dish here\\nn=int(input())\\nminx=miny=maxx=maxy=0\\nc=[]\\ndx={}\\ndy={}\\nfor i in range(4*n+1):\\n    x,y=list(map(int,input().split(' ')))\\n    c.append([x,y])\\n    if x not in dx:\\n        dx[x]=1\\n    else:\\n        dx[x]+=1\\n    if y not in dy:\\n        dy[y]=1\\n    else:\\n        dy[y]+=1\\n\\nminx=miny=maxx=maxy=0\\n\\nfor i in sorted(dx.keys()):\\n    if dx[i]>=2 and minx==0:\\n        minx=i\\n        break\\n    \\nfor i in sorted(dy.keys()):\\n    if dy[i]>=2 and miny==0:\\n        miny=i\\n        break\\n\\nfor i in list(reversed(sorted(dx.keys()))):\\n    if dx[i]>=2 and maxx==0:\\n        maxx=i\\n        break\\n\\nfor i in list(reversed(sorted(dy.keys()))):\\n    if dy[i]>=2 and maxy==0:\\n        maxy=i\\n        break\\n        \\n\\n\\nfor i in c:\\n    if minx<=i[0]<=maxx and miny<=i[1]<=maxy:\\n        if (i[0]!=minx and i[0]!=maxx) and (i[1]!=miny and i[1]!=maxy):\\n            print(i[0],i[1])\\n            break\\n    else:\\n        print(i[0],i[1])\\n        break\\n        \\n    \\n\", \"# https://codeforces.com/contest/1184/problem/C1\\nn = int(input())\\np = []\\ndx = {}\\ndy = {}\\nmin_x = None \\nmax_x = None\\nmin_y = None\\nmax_y = None\\n\\nfor _ in range(4*n+1):\\n    x, y = list(map(int, input().split()))\\n    p.append([x, y])\\n    \\n    if x not in dx:\\n        dx[x] = 0\\n    dx[x] += 1\\n        \\n    if y not in dy:\\n        dy[y] = 0\\n    dy[y] += 1\\n    \\nfor x in sorted(dx.keys()):\\n    if dx[x] >= n:\\n        min_x = x\\n        break\\n        \\nfor x in sorted(dx.keys())[::-1]:\\n    if dx[x] >= n:\\n        max_x = x\\n        break\\n        \\nfor y in sorted(dy.keys()):\\n    if dy[y] >= n:\\n        min_y = y\\n        break\\n        \\nfor y in sorted(dy.keys())[::-1]:\\n    if dy[y] >= n:\\n        max_y = y\\n        break    \\n\\noutlier = None  \\n#print(min_x, max_x), (min_y, max_y)   \\n\\nfor x, y in p: \\n    if (x-min_x)*(x-max_x) <= 0 and (y-min_y)*(y-max_y) <= 0:\\n        if (x-min_x)*(x-max_x) < 0 and (y-min_y)*(y-max_y) < 0:\\n            outlier = x, y\\n            break\\n    else:\\n        outlier = x, y\\n        break\\n        \\nprint(' '.join([str(x) for x in outlier]))        \\n#2\\n#0 0\\n#0 1\\n#0 2\\n#1 0\\n#1 1\\n#1 2\\n#2 0\\n#2 1\\n#2 2\\n\", \"def find_inside_point(points, maxx, minx, maxy, miny):\\n    # print('inside point')\\n    for x, y in points:\\n        if minx < x < maxx and miny < y < maxy:\\n            print(x, y)\\n            return\\n\\n\\ndef find_outside_point(points, maxx, minx, maxy, miny):\\n    # print('outside point')\\n    maxx_points = [ (x, y) for x, y in points if x == maxx ]\\n    minx_points = [ (x, y) for x, y in points if x == minx ]\\n    maxy_points = [ (x, y) for x, y in points if y == maxy ]\\n    miny_points = [ (x, y) for x, y in points if y == miny ]\\n\\n    if len(maxx_points) == 1: print(*maxx_points[0])\\n    elif len(minx_points) == 1: print(*minx_points[0])\\n    elif len(maxy_points) == 1: print(*maxy_points[0])\\n    else: print(*miny_points[0])\\n\\n\\ndef process(n, points):\\n    xs, ys = [ x for x, _ in points ], [ y for _, y in points ]\\n    maxx, minx = max(xs), min(xs)\\n    maxy, miny = max(ys), min(ys)\\n\\n    # count = sum([ 1 for x, y in points if minx < x < maxx and miny < y < maxy])\\n    if maxx - minx == maxy - miny: find_inside_point(points, maxx, minx, maxy, miny)\\n    else: find_outside_point(points, maxx, minx, maxy, miny)\\n\\n\\ndef __starting_point():\\n    n = int(input())\\n    points = []\\n\\n    for _ in range(4*n+1):\\n        x, y = [ int(z) for z in input().split() ]\\n        # print(x, y)\\n        points.append((x, y))\\n\\n    process(n, points)\\n__starting_point()\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2\\n0 0\\n0 1\\n0 2\\n1 0\\n1 1\\n1 2\\n2 0\\n2 1\\n2 2\\n\",\n    \"2\\n0 0\\n0 1\\n0 2\\n0 3\\n1 0\\n1 2\\n2 0\\n2 1\\n2 2\\n\",\n    \"2\\n5 14\\n5 17\\n25 43\\n26 43\\n32 41\\n33 0\\n38 0\\n48 17\\n48 30\\n\",\n    \"2\\n17 44\\n19 14\\n19 25\\n24 27\\n32 1\\n34 27\\n38 1\\n45 5\\n45 12\\n\",\n    \"2\\n1 2\\n1 27\\n1 45\\n10 45\\n28 48\\n38 1\\n44 1\\n45 7\\n45 26\\n\",\n    \"2\\n2 27\\n2 40\\n9 44\\n10 13\\n12 1\\n22 44\\n26 13\\n33 22\\n33 36\\n\",\n    \"2\\n0 30\\n0 33\\n18 1\\n21 1\\n31 47\\n42 50\\n49 16\\n49 21\\n49 50\\n\",\n    \"3\\n1 3\\n1 18\\n1 41\\n4 43\\n12 1\\n21 50\\n27 1\\n27 50\\n33 1\\n34 50\\n50 6\\n50 7\\n50 26\\n\",\n    \"3\\n8 18\\n8 25\\n8 31\\n13 43\\n14 43\\n24 11\\n33 43\\n34 11\\n37 11\\n40 21\\n40 28\\n40 35\\n44 38\\n\",\n    \"3\\n9 8\\n23 15\\n23 19\\n23 23\\n27 30\\n31 30\\n37 30\\n38 6\\n39 6\\n47 6\\n47 16\\n47 21\\n47 25\\n\",\n    \"3\\n10 9\\n10 39\\n10 40\\n21 2\\n26 40\\n28 40\\n41 38\\n43 2\\n45 2\\n46 40\\n48 4\\n48 11\\n48 33\\n\",\n    \"3\\n8 7\\n8 26\\n8 27\\n14 32\\n15 7\\n16 32\\n17 7\\n18 32\\n24 36\\n31 7\\n33 12\\n33 16\\n33 28\\n\",\n    \"4\\n22 8\\n22 9\\n22 14\\n22 26\\n22 32\\n25 30\\n30 5\\n30 30\\n32 30\\n34 30\\n39 5\\n41 5\\n47 5\\n47 11\\n47 20\\n47 23\\n47 25\\n\",\n    \"4\\n5 15\\n5 19\\n5 28\\n5 46\\n9 6\\n14 49\\n22 6\\n27 6\\n27 49\\n29 23\\n32 6\\n37 49\\n45 49\\n48 21\\n48 33\\n48 34\\n48 48\\n\",\n    \"4\\n3 7\\n3 17\\n3 18\\n3 22\\n8 2\\n10 32\\n15 32\\n18 2\\n21 25\\n22 2\\n28 32\\n29 2\\n29 32\\n33 14\\n33 18\\n33 21\\n33 26\\n\",\n    \"4\\n0 41\\n1 11\\n1 17\\n1 21\\n1 40\\n10 47\\n19 3\\n19 47\\n27 3\\n28 3\\n35 3\\n36 47\\n42 47\\n45 4\\n45 24\\n45 27\\n45 41\\n\",\n    \"4\\n3 0\\n10 24\\n10 36\\n10 38\\n10 47\\n11 19\\n18 50\\n22 50\\n23 19\\n28 19\\n29 50\\n33 50\\n35 19\\n41 21\\n41 25\\n41 45\\n41 47\\n\",\n    \"5\\n7 3\\n7 8\\n7 18\\n7 24\\n7 29\\n7 35\\n8 35\\n9 3\\n14 35\\n18 35\\n22 35\\n26 3\\n26 13\\n34 3\\n34 35\\n39 3\\n39 5\\n39 9\\n39 10\\n39 20\\n39 26\\n\",\n    \"5\\n0 4\\n0 35\\n0 36\\n0 42\\n0 43\\n2 50\\n3 50\\n5 0\\n20 0\\n21 50\\n23 5\\n24 0\\n28 0\\n32 0\\n38 50\\n42 50\\n50 3\\n50 34\\n50 37\\n50 38\\n50 44\\n\",\n    \"5\\n7 20\\n7 23\\n7 30\\n7 32\\n7 43\\n9 47\\n14 10\\n15 47\\n18 10\\n26 47\\n27 10\\n28 29\\n29 10\\n38 47\\n41 10\\n44 10\\n44 20\\n44 39\\n44 41\\n44 45\\n44 47\\n\",\n    \"5\\n3 23\\n3 32\\n3 33\\n3 34\\n3 35\\n4 41\\n6 11\\n6 41\\n9 41\\n11 21\\n13 21\\n17 21\\n17 41\\n18 21\\n21 21\\n21 41\\n23 23\\n23 30\\n23 33\\n23 38\\n23 39\\n\",\n    \"5\\n3 10\\n3 18\\n3 24\\n3 27\\n3 42\\n4 7\\n8 45\\n8 48\\n9 7\\n11 45\\n21 7\\n21 45\\n28 7\\n29 7\\n31 45\\n39 45\\n41 7\\n41 21\\n41 25\\n41 28\\n41 36\\n\",\n    \"6\\n9 19\\n9 23\\n9 26\\n9 28\\n9 30\\n9 35\\n10 39\\n16 19\\n17 19\\n20 39\\n21 19\\n21 39\\n25 19\\n25 39\\n26 19\\n27 39\\n28 19\\n28 39\\n29 22\\n29 24\\n29 27\\n29 31\\n29 32\\n29 36\\n49 23\\n\",\n    \"6\\n2 17\\n2 22\\n2 23\\n2 29\\n2 36\\n2 42\\n3 9\\n3 43\\n4 43\\n6 9\\n7 43\\n8 9\\n11 9\\n23 43\\n24 43\\n24 47\\n25 9\\n29 43\\n34 9\\n36 10\\n36 13\\n36 20\\n36 26\\n36 27\\n36 32\\n\",\n    \"6\\n21 7\\n21 12\\n21 16\\n21 19\\n21 24\\n21 25\\n21 28\\n24 28\\n27 7\\n29 7\\n34 7\\n35 7\\n35 28\\n37 28\\n40 7\\n41 28\\n42 7\\n42 8\\n42 10\\n42 11\\n42 21\\n42 22\\n42 24\\n42 28\\n44 49\\n\",\n    \"6\\n1 14\\n1 16\\n1 18\\n1 19\\n1 31\\n1 39\\n5 14\\n7 14\\n7 49\\n9 37\\n9 49\\n10 14\\n14 14\\n15 14\\n21 49\\n22 14\\n25 49\\n27 49\\n31 49\\n36 26\\n36 30\\n36 31\\n36 36\\n36 41\\n36 44\\n\",\n    \"6\\n11 15\\n20 10\\n20 13\\n20 14\\n20 16\\n20 27\\n20 28\\n22 32\\n24 6\\n25 6\\n27 32\\n30 32\\n34 32\\n35 6\\n36 6\\n39 6\\n39 32\\n43 6\\n43 32\\n46 7\\n46 12\\n46 18\\n46 22\\n46 27\\n46 31\\n\",\n    \"7\\n14 11\\n14 12\\n14 15\\n14 18\\n14 22\\n14 31\\n14 37\\n16 11\\n16 20\\n17 11\\n17 38\\n18 11\\n22 38\\n25 11\\n25 38\\n27 11\\n30 38\\n31 38\\n35 11\\n37 11\\n37 38\\n38 38\\n41 11\\n41 18\\n41 21\\n41 25\\n41 26\\n41 31\\n41 37\\n\",\n    \"7\\n4 1\\n4 5\\n4 9\\n4 25\\n4 26\\n4 37\\n4 40\\n4 41\\n5 1\\n9 1\\n14 1\\n15 42\\n17 42\\n20 42\\n22 1\\n25 1\\n28 42\\n30 42\\n37 42\\n38 33\\n40 1\\n41 42\\n45 6\\n45 12\\n45 30\\n45 32\\n45 34\\n45 35\\n45 40\\n\",\n    \"7\\n7 15\\n7 17\\n7 22\\n7 24\\n7 26\\n7 30\\n7 36\\n9 8\\n11 8\\n13 8\\n18 36\\n19 8\\n20 8\\n20 36\\n25 36\\n28 8\\n29 36\\n31 8\\n32 36\\n33 36\\n35 9\\n35 11\\n35 18\\n35 20\\n35 24\\n35 25\\n35 31\\n35 36\\n50 32\\n\",\n    \"7\\n2 7\\n2 11\\n2 12\\n2 16\\n2 22\\n2 30\\n2 39\\n9 50\\n11 50\\n12 4\\n13 50\\n16 4\\n17 4\\n18 32\\n22 4\\n23 4\\n27 50\\n28 4\\n28 50\\n36 50\\n40 4\\n40 50\\n48 10\\n48 14\\n48 17\\n48 20\\n48 32\\n48 37\\n48 42\\n\",\n    \"7\\n9 5\\n9 10\\n9 13\\n9 14\\n9 17\\n9 19\\n9 22\\n12 2\\n14 35\\n16 2\\n17 2\\n20 35\\n22 34\\n25 2\\n25 35\\n30 2\\n31 2\\n31 35\\n34 35\\n39 2\\n39 35\\n41 35\\n42 16\\n42 20\\n42 25\\n42 27\\n42 28\\n42 30\\n42 35\\n\",\n    \"8\\n3 3\\n15 16\\n15 17\\n15 20\\n15 23\\n15 27\\n15 28\\n15 42\\n15 48\\n16 49\\n20 16\\n21 16\\n21 49\\n23 49\\n27 16\\n30 49\\n31 16\\n32 16\\n32 49\\n35 16\\n35 49\\n43 16\\n46 16\\n47 49\\n48 16\\n48 20\\n48 26\\n48 31\\n48 34\\n48 37\\n48 39\\n48 48\\n48 49\\n\",\n    \"8\\n0 11\\n0 26\\n0 28\\n0 35\\n0 37\\n0 44\\n0 46\\n0 47\\n1 3\\n3 50\\n7 3\\n8 50\\n9 50\\n10 50\\n13 3\\n18 3\\n18 50\\n19 50\\n26 3\\n28 37\\n33 50\\n34 3\\n44 50\\n45 3\\n47 3\\n47 12\\n47 15\\n47 16\\n47 17\\n47 18\\n47 33\\n47 45\\n47 50\\n\",\n    \"8\\n14 10\\n14 14\\n14 23\\n14 30\\n14 31\\n14 34\\n14 35\\n14 38\\n15 27\\n16 10\\n18 44\\n19 44\\n22 44\\n23 44\\n24 44\\n25 10\\n26 44\\n28 10\\n30 10\\n31 10\\n38 44\\n39 10\\n40 10\\n43 10\\n47 44\\n48 11\\n48 17\\n48 22\\n48 30\\n48 35\\n48 36\\n48 43\\n48 44\\n\",\n    \"8\\n15 29\\n28 26\\n28 28\\n28 29\\n28 33\\n28 37\\n28 39\\n28 40\\n28 41\\n30 23\\n30 44\\n31 44\\n33 23\\n33 44\\n34 44\\n36 23\\n37 23\\n37 44\\n39 23\\n40 23\\n40 44\\n42 44\\n44 44\\n45 23\\n47 23\\n49 23\\n49 25\\n49 30\\n49 34\\n49 36\\n49 41\\n49 42\\n49 44\\n\",\n    \"8\\n1 0\\n1 2\\n1 19\\n1 29\\n1 30\\n1 35\\n1 38\\n1 39\\n3 39\\n8 0\\n12 39\\n14 39\\n15 0\\n19 39\\n20 0\\n24 24\\n24 39\\n25 0\\n26 0\\n28 39\\n29 39\\n30 0\\n33 0\\n34 39\\n36 0\\n40 0\\n40 9\\n40 17\\n40 19\\n40 24\\n40 25\\n40 31\\n40 39\\n\",\n    \"9\\n7 1\\n7 5\\n7 8\\n7 16\\n7 22\\n7 28\\n7 29\\n7 30\\n7 37\\n7 40\\n11 41\\n15 1\\n20 41\\n22 1\\n23 1\\n23 27\\n26 41\\n28 41\\n29 1\\n29 41\\n31 41\\n32 1\\n33 41\\n35 41\\n43 1\\n44 1\\n44 41\\n47 1\\n47 2\\n47 5\\n47 6\\n47 9\\n47 22\\n47 23\\n47 29\\n47 31\\n47 37\\n\",\n    \"9\\n25 6\\n25 7\\n25 8\\n25 12\\n25 16\\n25 17\\n25 18\\n25 25\\n25 26\\n27 6\\n28 29\\n30 29\\n31 6\\n31 29\\n32 6\\n34 6\\n36 6\\n36 29\\n37 6\\n38 29\\n39 6\\n40 29\\n40 37\\n42 6\\n42 29\\n44 29\\n46 29\\n48 6\\n48 7\\n48 9\\n48 11\\n48 12\\n48 14\\n48 21\\n48 24\\n48 28\\n48 29\\n\",\n    \"9\\n0 5\\n0 15\\n0 16\\n0 17\\n0 25\\n0 32\\n0 33\\n0 38\\n0 45\\n1 1\\n4 1\\n4 46\\n10 1\\n14 46\\n17 46\\n18 46\\n19 1\\n21 1\\n21 46\\n22 1\\n22 46\\n33 46\\n34 1\\n35 1\\n38 46\\n40 1\\n43 46\\n44 4\\n45 2\\n45 4\\n45 5\\n45 11\\n45 19\\n45 21\\n45 27\\n45 44\\n45 45\\n\",\n    \"9\\n0 13\\n0 16\\n0 22\\n0 25\\n0 27\\n0 33\\n0 34\\n0 38\\n0 39\\n0 40\\n2 41\\n3 41\\n4 13\\n5 41\\n7 41\\n8 13\\n9 13\\n12 13\\n13 13\\n14 13\\n16 41\\n18 41\\n22 41\\n24 41\\n26 13\\n27 13\\n27 41\\n28 20\\n28 22\\n28 25\\n28 30\\n28 31\\n28 32\\n28 36\\n28 37\\n28 39\\n32 33\\n\",\n    \"9\\n0 2\\n0 3\\n0 8\\n0 10\\n0 15\\n0 19\\n0 20\\n0 25\\n0 27\\n1 47\\n3 1\\n5 47\\n7 1\\n7 47\\n8 47\\n9 1\\n9 47\\n11 1\\n20 1\\n22 1\\n23 1\\n29 47\\n30 47\\n31 47\\n32 47\\n36 19\\n39 1\\n44 1\\n46 2\\n46 3\\n46 5\\n46 11\\n46 21\\n46 25\\n46 34\\n46 45\\n46 47\\n\",\n    \"10\\n11 11\\n11 12\\n11 15\\n11 17\\n11 18\\n11 19\\n11 28\\n11 33\\n11 38\\n11 40\\n12 11\\n15 46\\n17 11\\n17 46\\n18 46\\n19 11\\n19 46\\n20 11\\n20 46\\n24 46\\n25 46\\n26 11\\n32 11\\n32 46\\n33 11\\n34 46\\n36 11\\n39 11\\n40 46\\n43 11\\n44 0\\n46 14\\n46 15\\n46 17\\n46 22\\n46 26\\n46 28\\n46 32\\n46 43\\n46 45\\n46 46\\n\",\n    \"10\\n4 7\\n4 14\\n4 15\\n4 16\\n4 17\\n4 18\\n4 24\\n4 28\\n4 29\\n4 32\\n6 32\\n7 6\\n7 32\\n9 6\\n11 6\\n12 6\\n12 32\\n14 6\\n14 32\\n17 6\\n17 32\\n19 32\\n20 32\\n21 32\\n22 6\\n23 32\\n24 6\\n26 6\\n28 32\\n29 6\\n30 9\\n30 10\\n30 11\\n30 12\\n30 18\\n30 21\\n30 28\\n30 29\\n30 30\\n30 31\\n38 42\\n\",\n    \"10\\n8 1\\n8 2\\n8 7\\n8 12\\n8 14\\n8 17\\n8 18\\n8 22\\n8 26\\n8 29\\n8 30\\n9 1\\n9 41\\n11 41\\n12 22\\n14 1\\n14 41\\n25 1\\n26 41\\n29 1\\n31 1\\n33 41\\n38 41\\n41 1\\n41 41\\n42 1\\n42 41\\n44 1\\n44 41\\n46 1\\n48 4\\n48 14\\n48 17\\n48 21\\n48 27\\n48 31\\n48 32\\n48 37\\n48 38\\n48 39\\n48 41\\n\",\n    \"10\\n0 17\\n0 24\\n0 28\\n0 30\\n0 32\\n0 33\\n0 36\\n0 39\\n0 42\\n0 43\\n4 16\\n7 16\\n8 43\\n9 16\\n10 16\\n10 43\\n12 16\\n12 43\\n15 43\\n16 16\\n17 16\\n19 43\\n21 16\\n22 43\\n23 16\\n23 43\\n25 16\\n25 43\\n26 43\\n27 21\\n27 26\\n27 27\\n27 28\\n27 31\\n27 33\\n27 34\\n27 36\\n27 40\\n27 42\\n27 43\\n30 33\\n\",\n    \"10\\n0 2\\n0 5\\n0 6\\n0 15\\n0 20\\n0 33\\n0 34\\n0 40\\n0 41\\n0 46\\n6 44\\n9 2\\n11 47\\n13 2\\n15 2\\n16 47\\n18 2\\n19 47\\n22 47\\n23 2\\n26 2\\n26 47\\n28 2\\n29 2\\n30 47\\n31 47\\n39 2\\n40 47\\n42 47\\n43 2\\n43 47\\n45 2\\n45 7\\n45 9\\n45 13\\n45 14\\n45 15\\n45 20\\n45 40\\n45 41\\n45 44\\n\"\n  ],\n  \"outputs\": [\n    \"1 1\\n\",\n    \"0 3\\n\",\n    \"32 41\\n\",\n    \"17 44\\n\",\n    \"28 48\\n\",\n    \"12 1\\n\",\n    \"31 47\\n\",\n    \"4 43\\n\",\n    \"44 38\\n\",\n    \"9 8\\n\",\n    \"41 38\\n\",\n    \"24 36\\n\",\n    \"22 32\\n\",\n    \"29 23\\n\",\n    \"21 25\\n\",\n    \"0 41\\n\",\n    \"3 0\\n\",\n    \"26 13\\n\",\n    \"23 5\\n\",\n    \"28 29\\n\",\n    \"6 11\\n\",\n    \"8 48\\n\",\n    \"49 23\\n\",\n    \"24 47\\n\",\n    \"44 49\\n\",\n    \"9 37\\n\",\n    \"11 15\\n\",\n    \"16 20\\n\",\n    \"38 33\\n\",\n    \"50 32\\n\",\n    \"18 32\\n\",\n    \"22 34\\n\",\n    \"3 3\\n\",\n    \"28 37\\n\",\n    \"15 27\\n\",\n    \"15 29\\n\",\n    \"24 24\\n\",\n    \"23 27\\n\",\n    \"40 37\\n\",\n    \"44 4\\n\",\n    \"32 33\\n\",\n    \"36 19\\n\",\n    \"44 0\\n\",\n    \"38 42\\n\",\n    \"12 22\\n\",\n    \"30 33\\n\",\n    \"6 44\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1184/C1",
  "starter_code": ""
}