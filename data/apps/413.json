{
  "task_id": "APPS/413",
  "problem_id": 413,
  "prompt": "Vasya has found a strange device. On the front panel of a device there are: a red button, a blue button and a display showing some positive integer. After clicking the red button, device multiplies the displayed number by two. After clicking the blue button, device subtracts one from the number on the display. If at some point the number stops being positive, the device breaks down. The display can show arbitrarily large numbers. Initially, the display shows number n.\n\nBob wants to get number m on the display. What minimum number of clicks he has to make in order to achieve this result?\n\n\n-----Input-----\n\nThe first and the only line of the input contains two distinct integers n and m (1 \u2264 n, m \u2264 10^4), separated by a space .\n\n\n-----Output-----\n\nPrint a single number \u2014 the minimum number of times one needs to push the button required to get the number m out of number n.\n\n\n-----Examples-----\nInput\n4 6\n\nOutput\n2\n\nInput\n10 1\n\nOutput\n9\n\n\n\n-----Note-----\n\nIn the first example you need to push the blue button once, and then push the red button once.\n\nIn the second example, doubling the number is unnecessary, so we need to push the blue button nine times.",
  "solutions": "[\"def main():\\n    n, m = map(int, input().split())\\n    res, delta = 0, 1\\n    while n < m:\\n        res += 1\\n        n *= 2\\n        delta *= 2\\n    while n > m:\\n        while n - delta >= m:\\n            res += 1\\n            n -= delta\\n        delta //= 2\\n    print(res)\\n\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"\\n\\nsrc, dest = [int(x) for x in str(input()).strip().split()]\\nnum_steps = 0\\nif src >= dest:\\n    num_steps = (src - dest)\\nelse:\\n    while dest > src:\\n        if dest % 2 == 1:\\n            dest += 1\\n        else:\\n            dest //= 2\\n        num_steps += 1\\n    num_steps += (src - dest)\\n\\nprint(num_steps)\\n\", \"def two_degree(n, m):\\n    deg = 0\\n    res = n\\n    while res<m:\\n        res *=2\\n        deg+=1\\n    print (res)\\n    return deg, res-m\\n\\n\\nmy_str = input()\\nn, m = int(my_str.split()[0]), int(my_str.split()[1])\\nif m<n:\\n    print(n-m)\\nelse:\\n    res = n\\n    oper = 0\\n    while res!=m:\\n        if m%2==1 and m>res:\\n            m += 1\\n            oper += 1\\n        elif m>res:\\n            m =int(m/2)\\n            oper += 1\\n        elif m<res:\\n            oper += (res-m)\\n            m = res\\n      #  print (m)\\n    print (oper)\\n            \\n\", \"import math\\n\\ninstr = input()\\nspace = instr.find(' ')\\ninint = int(instr[:space])\\noutint = int(instr[space+1:])\\n\\nnowhalf = outint\\ncounts = 0\\nadds = 0\\nwhile True:\\n    if inint >= nowhalf:\\n        print(int(inint-nowhalf+counts+adds))\\n        break\\n    counts += 1\\n    pasthalf = nowhalf\\n    nowhalf = math.ceil(nowhalf/2)\\n    if nowhalf*2 > pasthalf:\\n        adds += 1\\n\", \"import math\\nt=input()\\nloc=t.split(' ')\\nn=int(loc[0])\\nm=int(loc[1])\\n\\nb=math.ceil(math.log2(m/n))\\nc=0\\ntemp=m\\nif m<=n:\\n    d=n-m\\nelse:\\n    for i in range(1,b+1):\\n        if temp%2==0:\\n            temp=temp/2\\n        else:\\n            c=c+1\\n            temp=(temp+1)/2\\n        \\n    d=c+n-temp+b\\n\\nprint(int(d))\\n    \\n\", \"[n, m] = [int(i) for i in input().split()]\\ncnt = 0\\nwhile n < m:\\n    if m % 2:\\n        m += 1\\n        cnt += 1\\n    else:\\n        m //= 2\\n        cnt += 1\\nprint(cnt + n - m)\", \"n, m = list(map(int, input().split()))\\nq = [n]\\nb = 1\\nr = 0\\ni = 0\\nused = [False] * (2 * 10 ** 4 + 10)\\nused[n] = True\\nwhile i < len(q):\\n    if i == b:\\n        b = len(q)\\n        r += 1\\n    if q[i] == m:\\n        print(r)\\n        break\\n    if q[i] > 1:\\n        if not used[q[i] - 1]:\\n            q.append(q[i] - 1)\\n            used[q[i] - 1] = True\\n    if q[i] < m:\\n        if not used[q[i] * 2]:\\n            q.append(q[i] * 2)\\n            used[q[i] * 2] = True\\n    i += 1\\n\", \"#import sys\\n#sys.setrecursionlimit(20000)\\nf = lambda: input()\\nn,m = list(map(int, f().split()))\\n\\ndp = [99999] * 10001\\ndp[n] = 0\\n\\ndef click():\\n    for i in range(0, n+1):\\n        dp[i] = n-i;\\n        if i*2 <= 10000:\\n            if dp[i*2] > dp[i]+1:\\n                dp[i*2] = dp[i]+1\\n\\n    for i in range(n+1, 10001):\\n        if dp[i] == 99999:\\n            d = 1\\n            while(i+d <= 10000 and dp[i+d] == 99999):\\n                d+=1\\n            if i+d <= 10000:\\n                dp[i] = d + dp[i+d]\\n\\n        if i*2 <= 10000 and dp[i*2] > dp[i]+1:\\n            dp[i*2] = dp[i]+1\\n\\nclick()\\n\\n#print(dp)\\nprint(dp[m])\\n\", \"n,m=map(int,input().split());a=0\\nwhile n!=m:\\n    a+=1;m+=1 if m<n or m&1 else-m//2\\nprint(a)\", \"def fun(n, m):\\n    if n >= m:\\n        return (n-m)\\n    Q = [n]\\n    mySet = set()\\n    cnt = 1\\n    while(True):\\n        new_Q = []\\n        for num in Q:\\n            x = 2*num\\n            y = num-1\\n            if x == m or y == m:\\n                return cnt\\n            if not x in mySet and x < 20000 and x > 0:\\n                mySet.add(x)\\n                new_Q.append(x)\\n            if not y in mySet and y < 20000 and y > 0:\\n                mySet.add(y)\\n                new_Q.append(y)\\n        Q = new_Q\\n        cnt += 1\\n        \\n            \\nn, m = [int(c) for c in input().split()]\\nprint(fun(n, m))\", \"3\\n# -*- coding: utf-8 -*-\\n\\nn, m = list(map(int, input().split()))\\nmem = [2**30] * 4 * (max(n, m))\\nmem[n] = 0\\nq = [n]\\nwhile q:\\n    c = q.pop(0)\\n    if 2 * c < len(mem) and mem[2 * c] > mem[c] + 1:\\n        q.append(2 * c)\\n        mem[2 * c] = mem[c] + 1\\n    if c > 1 and mem[c - 1] > mem[c] + 1:\\n        q.append(c - 1)\\n        mem[c - 1] = mem[c] + 1\\nprint(mem[m])\\n\", \"a,b=map(int,input().split())\\nz=0\\nwhile a<b:\\n    if b%2==True:\\n        z+=1\\n        b+=1\\n    else:\\n        b=b//2\\n        z+=1\\nprint(str(int(abs((z+a-b)))))\", \"n, m = map(int, input().split())\\nres = 0\\nif n >= m:\\n    res = n - m\\nelse:\\n    while m > n:\\n        if m % 2 == 1:\\n            m += 1\\n        else:\\n            m //= 2\\n        res += 1\\n    res += (n - m)\\nprint(res)\", \"m, n = [int(i) for i in input().split()]\\n\\ndef d(begin, end):\\n   #print(begin, end)\\n    if begin == end:\\n       return 0\\n\\n    if begin == end + 1:\\n        return 1\\n\\n    if end % 2 == 0 and end // 2 == begin:\\n        return 1\\n\\n    if begin > end:\\n        return begin - end\\n\\n    if end % 2 == 0:\\n        return d(begin, end // 2) + 1\\n\\n    return d(begin, end + 1) + 1\\n\\nprint(d(m, n))\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\", \"from math import ceil\\nn, m = list(map(int, input().split()))\\nstep = 0\\nif n >= m:\\n\\tstep += n-m\\nelse:\\n\\tk = m\\n\\twhile n < k:\\n\\t\\tk = k / 2\\n\\twhile n != m:\\n\\t\\tif n - 1>= k:\\n\\t\\t\\tn -= 1\\n\\t\\t\\tstep += 1\\n\\t\\telse:\\n\\t\\t\\tk = 2*k\\n\\t\\t\\tn = 2*n\\n\\t\\t\\tstep += 1\\nprint(step)\\n\", \"def main() -> object:\\n    \\\"\\\"\\\"\\n\\n    :rtype : Integer\\n    :return: The answer which the problem is required.\\n    \\\"\\\"\\\"\\n    n, m = [int(i) for i in input().split()]\\n    count = 0\\n    while n < m:\\n        if m % 2 == 0:\\n            m >>= 1\\n        else:\\n            m += 1\\n        count += 1\\n    count += n - m\\n    return count\\n\\ndef __starting_point():\\n    print(main())\\n__starting_point()\", \"\\\"\\\"\\\"\\ndef main():\\n    n, m = map(int, input().split())\\n    max = 10 ** 4\\n    gr = []\\n    for i in range(max):\\n        gr.append([0] * max)\\n    i, j, k, l = 0,0,m,n\\n    while gr[i][j] != 1\\n    \\ndef main():\\n    n, m = map(int, input().split())\\n    l = 0\\n    while n != m:\\n        if n >= m:\\n            l += n-m\\n            n = m\\n        else:\\n            if m % 2:\\n                l += 1\\n                m += 1\\n            else:\\n                if m // 2 <= n:\\n                    l += 1 + n - m //2\\n                    n = m\\n                else:\\n                    n *= 2\\n                    l += 1\\n    print(l)\\n\\\"\\\"\\\"\\ndef main():\\n    n, m = list(map(int, input().split()))\\n    print(rec(n,m))\\ndef rec(n,m):\\n    if m <= n:\\n        return n-m\\n    else:\\n        if m % 2:\\n            return rec(n,m+1)+1\\n        else:\\n            return rec(n, m // 2) + 1\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def main():\\n    n, m = list(map(int, input().split()))\\n    print(rec(n,m))\\ndef rec(n,m):\\n    if m <= n:\\n        return n-m\\n    else:\\n        if m % 2:\\n            return rec(n,m+1)+1\\n        else:\\n            return rec(n, m // 2) + 1\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n,m = list(map(int,input().split()));\\na = 0\\nwhile n != m:\\n    a+=1;m+=1 if m<n or m&1 else-m//2\\nprint(a)\\n\", \"def buttons(m,n, Steps) :\\n    if m == n :\\n        return Steps\\n    elif m%2 == 0 and m > n :\\n        return buttons(m//2 , n, Steps + 1)\\n    elif m%2 == 1 and  m > n :\\n        return buttons((m+1)//2, n, Steps + 2)\\n    else :\\n        return Steps + (n - m)\\n\\n[n,m] = (input()).split(' ')\\nprint(buttons(int(m),int(n),0))\\n\\n\\n\\n\", \"inpt = input().split()\\nn = int(inpt[0])\\nm= int(inpt[1])\\nmoves =0\\nwhile(m != n):\\n    if(m%2==1 or m <n):\\n        m +=1\\n        moves +=1\\n    else:\\n        m=m/2\\n        moves +=1\\nprint(moves)\\n        \\n\", \"import sys\\nnumbers=sys.stdin.readline().split(\\\" \\\")\\nnumbers = list(map(int, numbers))\\np=numbers[0]\\nq=numbers[1]\\n\\ncount2=0\\ncount1=0\\n\\nwhile(q>p):\\n    \\n    if(q%2!=0):\\n        q=(q+1)/2\\n        count2=count2+1\\n        count1=count1+1\\n\\n    elif(q%2==0):\\n        q=q/2\\n        count2=count2+1\\n\\ndiff=p-q\\nans=count2+count1+diff\\nprint(int(ans))\\n    \\n\\n\", \"# red, blue, display\\n# init - display N\\n# red: N*2\\n# blue N-1\\n\\nimport sys\\n#sys.setrecursionlimit(10000)\\nfrom functools import lru_cache\\nn, m = [int(x) for x in input().split()]\\n\\n# Other direction:\\n# m++ or m/2, reach n\\n\\n\\nres = 0\\nwhile n < m:\\n    res += 1\\n    if m % 2 == 0:\\n        m //= 2\\n    else: m += 1\\n\\nres += (n-m)\\n\\nprint(res)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4 6\\n\",\n    \"10 1\\n\",\n    \"1 2\\n\",\n    \"2 1\\n\",\n    \"1 3\\n\",\n    \"3 1\\n\",\n    \"2 10\\n\",\n    \"100 99\\n\",\n    \"99 100\\n\",\n    \"10 17\\n\",\n    \"666 6666\\n\",\n    \"6666 666\\n\",\n    \"1 8192\\n\",\n    \"1 8193\\n\",\n    \"9999 10000\\n\",\n    \"10000 9999\\n\",\n    \"10000 1\\n\",\n    \"1234 5678\\n\",\n    \"9102 9103\\n\",\n    \"8192 1\\n\",\n    \"9912 1023\\n\",\n    \"100 500\\n\",\n    \"9997 9999\\n\",\n    \"5000 10000\\n\",\n    \"4000 7997\\n\",\n    \"1 10000\\n\",\n    \"1 8191\\n\",\n    \"9999 10000\\n\",\n    \"9097 9998\\n\",\n    \"886 9383\\n\",\n    \"1 9\\n\",\n    \"1918 10000\\n\",\n    \"1 3\\n\",\n    \"1 4\\n\",\n    \"2 10000\\n\",\n    \"3 10000\\n\",\n    \"4 10000\\n\",\n    \"9998 10000\\n\",\n    \"5000 10000\\n\",\n    \"5001 10000\\n\",\n    \"10000 1\\n\",\n    \"1 9999\\n\",\n    \"7777 9999\\n\",\n    \"2 100\\n\",\n    \"10 8722\\n\",\n    \"848 4561\\n\",\n    \"9967 9973\\n\",\n    \"5555 10000\\n\",\n    \"999 10000\\n\",\n    \"3 6\\n\",\n    \"9 38\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"9\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"50\\n\",\n    \"3\\n\",\n    \"255\\n\",\n    \"6000\\n\",\n    \"13\\n\",\n    \"27\\n\",\n    \"5000\\n\",\n    \"1\\n\",\n    \"9999\\n\",\n    \"528\\n\",\n    \"4552\\n\",\n    \"8191\\n\",\n    \"8889\\n\",\n    \"41\\n\",\n    \"4999\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"20\\n\",\n    \"14\\n\",\n    \"5000\\n\",\n    \"4099\\n\",\n    \"305\\n\",\n    \"7\\n\",\n    \"671\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"19\\n\",\n    \"17\\n\",\n    \"18\\n\",\n    \"4999\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"9999\\n\",\n    \"21\\n\",\n    \"2779\\n\",\n    \"9\\n\",\n    \"18\\n\",\n    \"283\\n\",\n    \"4982\\n\",\n    \"556\\n\",\n    \"378\\n\",\n    \"1\\n\",\n    \"8\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/520/B",
  "starter_code": ""
}