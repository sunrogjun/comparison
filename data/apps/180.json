{
  "task_id": "APPS/180",
  "problem_id": 180,
  "prompt": "Andrey received a postcard from Irina. It contained only the words \"Hello, Andrey!\", and a strange string consisting of lowercase Latin letters, snowflakes and candy canes. Andrey thought that this string is an encrypted message, and decided to decrypt it.\n\nAndrey noticed that snowflakes and candy canes always stand after the letters, so he supposed that the message was encrypted as follows. Candy cane means that the letter before it can be removed, or can be left. A snowflake means that the letter before it can be removed, left, or repeated several times.\n\nFor example, consider the following string:  [Image] \n\nThis string can encode the message \u00abhappynewyear\u00bb. For this, candy canes and snowflakes should be used as follows:   candy cane 1: remove the letter w,  snowflake 1: repeat the letter p twice,  candy cane 2: leave the letter n,  snowflake 2: remove the letter w,  snowflake 3: leave the letter e. \n\n [Image] \n\nPlease note that the same string can encode different messages. For example, the string above can encode \u00abhayewyar\u00bb, \u00abhapppppynewwwwwyear\u00bb, and other messages.\n\nAndrey knows that messages from Irina usually have a length of $k$ letters. Help him to find out if a given string can encode a message of $k$ letters, and if so, give an example of such a message.\n\n\n-----Input-----\n\nThe first line contains the string received in the postcard. The string consists only of lowercase Latin letters, as well as the characters \u00ab*\u00bb and \u00ab?\u00bb, meaning snowflake and candy cone, respectively. These characters can only appear immediately after the letter. The length of the string does not exceed $200$.\n\nThe second line contains an integer number $k$ ($1 \\leq k \\leq 200$), the required message length.\n\n\n-----Output-----\n\nPrint any message of length $k$ that the given string can encode, or \u00abImpossible\u00bb if such a message does not exist.\n\n\n-----Examples-----\nInput\nhw?ap*yn?eww*ye*ar\n12\n\nOutput\nhappynewyear\n\nInput\nab?a\n2\n\nOutput\naa\nInput\nab?a\n3\n\nOutput\naba\nInput\nababb\n5\n\nOutput\nababb\nInput\nab?a\n1\n\nOutput\nImpossible",
  "solutions": "[\"s = input()\\nk = int(input())\\nc = 0\\np = 0\\nhas_star = False\\nfor i in range(len(s)):\\n    if s[i] in ['*', '?']:\\n        if s[i] == '*':\\n            has_star = True\\n        c -= 1\\n    else:\\n        p += 1\\n        c += 1\\nif k < c:\\n    print(\\\"Impossible\\\")\\nelif (not has_star) and (k > p):\\n    print(\\\"Impossible\\\")\\nelse:\\n    signs_to_add = k - c\\n    ans = \\\"\\\"\\n    for i in s:\\n        if signs_to_add == 0:\\n            if i not in ['*', '?']:\\n                ans += i\\n            else:\\n                ans = ans[:-1]\\n            continue\\n        if i == '?':\\n            signs_to_add -= 1\\n        elif i == '*':\\n            signs_to_add -= 1\\n            while signs_to_add > 0:\\n                ans += ans[-1]\\n                signs_to_add -= 1\\n        else:\\n            ans += i\\n    print(ans)\\n\\n\", \"s = input()\\nk = int(input())\\n\\nmin_l = max_l = 0\\nfor c in s:\\n    if c=='?' or c=='*':\\n        min_l -= 1\\n    else:\\n        min_l += 1\\n        max_l += 1\\n\\nif k < min_l or (k > max_l and '*' not in s):\\n    print('Impossible')\\nelse:\\n    r = ''\\n    d = k - min_l\\n    l = len(s)\\n    for i in range(l):\\n        if i+1 < l and s[i+1] == '?':\\n            if d > 0:\\n                r += s[i]\\n                d -= 1\\n        elif i+1 < l and s[i+1] == '*':\\n            while d > 0:\\n                r += s[i]\\n                d -= 1\\n        elif s[i]!='?' and s[i]!='*':\\n            r += s[i]\\n    print(r)\\n\", \"a = input()\\nk = int(input())\\n\\nml = 0\\nfor i in a:\\n    if i == '?' or i == '*':\\n        ml -= 1\\n    else:\\n        ml += 1\\n\\nif k < ml:\\n    print('Impossible')\\n    import sys\\n    return\\n\\ndl = k - ml\\nt = ''\\nn = len(a)\\nfor i in range(n):\\n    if i + 1 < n and a[i + 1] == '?':\\n        if dl <= 0: continue\\n        t += a[i]\\n        dl -= 1\\n        continue\\n    if i + 1 < n and a[i + 1] == '*':\\n        if dl <= 0: continue\\n        while dl > 0:\\n            t += a[i]\\n            dl -= 1\\n        continue\\n    if a[i] not in '?*':\\n        t += a[i]\\n\\nif len(t) == k:\\n    print(t)\\nelse:\\n    print('Impossible')\\n\", \"def read_nums():\\n    return [int(x) for x in input().split()]\\n\\n\\ndef parse_input(text, symbols='?*'):\\n    res = []\\n    prev_index = 0\\n    for index, char in enumerate(text):\\n        if char in symbols:\\n            res.append(('', text[prev_index: index - 1]))\\n            res.append((char, text[index - 1]))\\n            prev_index = index + 1\\n    last_chunk = text[prev_index:]\\n    if len(last_chunk) != 0:\\n        res.append(('', last_chunk))\\n    return res\\n\\n\\ndef calc_length(parsed_input):\\n    res = 0\\n    for part in parsed_input:\\n        if part[0] == '':\\n            res += len(part[1])\\n    return res\\n\\n\\ndef main():\\n    msg = input()\\n    n, = read_nums()\\n    parsed_input = parse_input(msg)\\n    length = calc_length(parsed_input)\\n\\n    out = []\\n    for part in parsed_input:\\n        if part[0] == '':\\n            out.append(part[1])\\n        elif length < n:\\n            if part[0] == '?':\\n                out.append(part[1])\\n                length += 1\\n            else:\\n                out.append(part[1] * (n - length))\\n                length = n\\n\\n    res = ''.join(out)\\n    if len(res) == n:\\n        print(res)\\n    else:\\n        print('Impossible')\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\"]",
  "input_output": "{\n  \"inputs\": [\n    \"hw?ap*yn?eww*ye*ar\\n12\\n\",\n    \"ab?a\\n2\\n\",\n    \"ab?a\\n3\\n\",\n    \"ababb\\n5\\n\",\n    \"ab?a\\n1\\n\",\n    \"z\\n1\\n\",\n    \"n\\n96\\n\",\n    \"c*b*dosavq*gwy*e*j?jx?t?li*m?fik*m*l?i?b?z?kv*wm*u*j?h?o?hg*c*hf?l*n*dl*q*t?bi*m?g*c*k?p*e*di*o?iqfn*sj?k*t?zyqz*ihjpt?a?vr?a*r\\n83\\n\",\n    \"a?u?kb*exg?l*z?xc?gbpbms*vc?ll*u*qy*g*k?k*ky?n?r?qur?m*kyr*gd?o*t*hw*hzk*u*vq*j*v*ag*ljyiu?uy*qqub?y?hbp*zsr*u*m*a?hx*ca*vvn?c\\n55\\n\",\n    \"jkhu?wd?fxtgkrqmqukirdwywr?yk?hmdz?xghwgkr?pkbvsx?xe?l?\\n57\\n\",\n    \"gfkesp?jh?enf?rnu?riyu?mcvtswlzerx?mumzrqh?aqbbdujqwdwezqrsn?hqxpxsq?rh?cqgzxlchgtoyevlrojxovstvo?bw\\n79\\n\",\n    \"s?g?h?e?m?h?i?t?m?e?y?z?r?a?c?r?p?v?f?o?r?z?q?t?s?c?o?z?h?z\\n34\\n\",\n    \"uduzhzchjkaddukfwqngffblohjmqbgyfrzomuznircygatbxoyfxflurhoewioptyqlpoozlksyxrntwsqozghcamszlgeawisninpntpwpuemybjwmhwmpqkurkrnjzfoppmoopwrmpylvhtntghxkavveeyfmdqsvuqiflyemklnshfrtskmyhkbzhwmlaqcasjbw\\n200\\n\",\n    \"gpejouiegzleonpiwdchbwdkjdrqsxvydqjqilapciriackdiamzxvxizagjouqhoagefmildgxxxafuxuingzaosxjzmuwlfpfccjllogrwlfxpacgdgxmqgzguqqmwynmutfpnuigclbsphhimpvsckcnxrvenhvtgegkxemybpluactvv\\n91\\n\",\n    \"wd?t?a?fk?pnuuetr?emvsfrppk?o?emnskin?pn?qyv?d?rs?hvmqtwew?sy?efn?badndz?p?xixeeiofsfqewp?t?f?sgdlcw\\n63\\n\",\n    \"c?dhff?f?y?m?h?i?fj?v?rz?v?bh?m?m?t?x?g?yn?e?a?q?fb?t?k?xvsk?v?i?a?zcrz?f?i?c?ge?jo?g?j?l?suj?u?c?h?\\n15\\n\",\n    \"m?tsw\\n98\\n\",\n    \"z*mt*o?mxh?g\\n11\\n\",\n    \"npra?bhx?rr*w?f*t\\n14\\n\",\n    \"d*b*w?j?n*kc?e?rdp*ca?u*gg?\\n29\\n\",\n    \"zymhgthoob\\n10\\n\",\n    \"flvlowstjhhx\\n6\\n\",\n    \"grzlreuaqtgs\\n12\\n\",\n    \"gqososjozfdbrdlkggisefpuruqcqvstqnfktvysoiauxumctikhwuvdbetvpbzlcqhgsjdzzzgburoayzsdkhfkfdwunmxt\\n94\\n\",\n    \"mxneywurhzffwkfkrcmesdczjpeqgxfttmomdhgwwndudvabntrwegfouthzjrhjqancqgcputqzdvgsqzivuctnpzjbgjdo\\n96\\n\",\n    \"cqbpdkhounszhavfvgjqogwnwblypesjyvjiqxartehljficmjcfvgiwcknmilplixlbcuzifkgxvawlhmzufjgxhkfodihhsguc\\n100\\n\",\n    \"afwugkkewbpehxxokgqrldztdxclciigzqbwipfpbuzmlksbvphclblhslgujqfdyjgwkbakiketyhgnlqroeqecuwxriqmmkuky\\n10\\n\",\n    \"f?\\n1\\n\",\n    \"n?l\\n2\\n\",\n    \"s?l\\n8\\n\",\n    \"u?wp?v?k?yxlp\\n7\\n\",\n    \"mrx?ut?aefu?mr?ivh?kt?jpirdn?cjgpk?s?dd\\n11\\n\",\n    \"u?q?l?x?g?g?u?l?l?f?z?q\\n8\\n\",\n    \"zr\\n7\\n\",\n    \"n*\\n98\\n\",\n    \"w*r\\n15\\n\",\n    \"k*n\\n2\\n\",\n    \"zm*g*ho*mo\\n12\\n\",\n    \"np*lr*lg*br*t*x\\n26\\n\",\n    \"db*wm*zn*k*ibe*w*x*d*f\\n42\\n\",\n    \"aobs*fhm*w*da*u*a*s*b*l*qxnfbv*ct*nmt*x*t*g*n*oni*oo*c*bu*to*eooa*\\n43\\n\",\n    \"n*zc*lb*e*ppp*\\n14\\n\",\n    \"ya*tspfh*qmjmhx*ja*ql*w*i*vt*g*hehet*x*t*j*uo*o*s*p*bv*\\n29\\n\",\n    \"nze*bf*wq*bx*idy*ml*sn*y*cpp*u*cz*v*ht*e*mwlq*izh*p*uq*v*j*r*z*r*n\\n45\\n\",\n    \"cb*dhu*s*hv*vjow*w*lps*y*jq*a*th*j*im*c*vicni*p*i*l*czfg*vw*hzf*g*hfdh*suh*a*f*x*r*j*nlq*t*w*h*imtku\\n9\\n\",\n    \"a*wgkw*ph*xkq*l*z*d*c*cizbi*f*bzls*v*hl*l*s*gjf*y*gk*aie*y*g*lreeux*imkku*rg*c*s*ot*hea*izkos*nqj*va\\n66\\n\",\n    \"w*r?\\n3\\n\",\n    \"k*n?\\n99\\n\",\n    \"gj?g\\n10\\n\",\n    \"h*y?i\\n95\\n\",\n    \"c*vb*a*r\\n12\\n\",\n    \"au*e?f*h?hdza*sp*zxw*i*qc?x?m*t*xf?nciic?a*doi?o?t*q*v?r?hl?r?ol?l?pu*p?m?zz*a*k\\n35\\n\",\n    \"cii*f*hrlorz*a?l\\n17\\n\",\n    \"y?f*sp*f*ha?ji*e?j*ac?w*iag*h*ei*w?xp*d*qol?b*vz*mx?l*n?nxw?n?mu*syi*tb\\n26\\n\",\n    \"n*zj*aw?jx*i*d*yc?srcm?u?w*r?hvmk?qq*g*jud*nrn*ng*x*v?cc*dg*wsnudwejta?pee*kc*x*tz?\\n72\\n\",\n    \"ab*\\n10\\n\",\n    \"a*b?\\n200\\n\",\n    \"aa*a\\n7\\n\",\n    \"a*\\n2\\n\",\n    \"abab*b?\\n3\\n\",\n    \"kek*\\n100\\n\",\n    \"a*\\n20\\n\",\n    \"a*\\n100\\n\",\n    \"a*\\n30\\n\",\n    \"a*\\n3\\n\",\n    \"a*b*c*d*e*f\\n100\\n\",\n    \"ab*cdefghijkl\\n10\\n\",\n    \"a*\\n5\\n\",\n    \"a*\\n10\\n\",\n    \"ab*a\\n10\\n\",\n    \"p*\\n5\\n\",\n    \"a*\\n12\\n\",\n    \"a*\\n4\\n\",\n    \"a?b*\\n12\\n\",\n    \"a*b\\n5\\n\",\n    \"abc*\\n2\\n\",\n    \"aba?a*\\n5\\n\",\n    \"a*a\\n5\\n\",\n    \"h*\\n12\\n\"\n  ],\n  \"outputs\": [\n    \"hwapppyewyar\",\n    \"aa\",\n    \"aba\",\n    \"ababb\",\n    \"Impossible\",\n    \"z\",\n    \"Impossible\",\n    \"ccccccccccccccccccccccccccccccccccccccccccccccccccccdosavgwjlfikwhhdbdiqfszyqihjpvr\",\n    \"aukbbbbbbbbbbbbbexxgbpbmvlqkqukyghhzvaljyiuqquhbzshcvvc\",\n    \"Impossible\",\n    \"gfkespjenrnriymcvtswlzermumzrqaqbbdujqwdwezqrshqxpxsrcqgzxlchgtoyevlrojxovstvbw\",\n    \"Impossible\",\n    \"uduzhzchjkaddukfwqngffblohjmqbgyfrzomuznircygatbxoyfxflurhoewioptyqlpoozlksyxrntwsqozghcamszlgeawisninpntpwpuemybjwmhwmpqkurkrnjzfoppmoopwrmpylvhtntghxkavveeyfmdqsvuqiflyemklnshfrtskmyhkbzhwmlaqcasjbw\",\n    \"Impossible\",\n    \"wdtafpnuuetemvsfrppemnskipqyrhvmqtwesefbadndxixeeiofsfqewsgdlcw\",\n    \"Impossible\",\n    \"Impossible\",\n    \"zzzzzzzmmxg\",\n    \"nprabhxrrrrrrt\",\n    \"ddddddddddddddddddddddddkrdcg\",\n    \"zymhgthoob\",\n    \"Impossible\",\n    \"grzlreuaqtgs\",\n    \"Impossible\",\n    \"mxneywurhzffwkfkrcmesdczjpeqgxfttmomdhgwwndudvabntrwegfouthzjrhjqancqgcputqzdvgsqzivuctnpzjbgjdo\",\n    \"cqbpdkhounszhavfvgjqogwnwblypesjyvjiqxartehljficmjcfvgiwcknmilplixlbcuzifkgxvawlhmzufjgxhkfodihhsguc\",\n    \"Impossible\",\n    \"f\",\n    \"nl\",\n    \"Impossible\",\n    \"uwpyxlp\",\n    \"Impossible\",\n    \"uqlxgguq\",\n    \"Impossible\",\n    \"nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn\",\n    \"wwwwwwwwwwwwwwr\",\n    \"kn\",\n    \"zmmmmmmmmhmo\",\n    \"npppppppppppppppppppppllbx\",\n    \"dbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbwzibf\",\n    \"aobsssssssssssssssssssssfhdqxnfbcnmonobteoo\",\n    \"nnnnnnnnnnzlpp\",\n    \"yaaaaaaaaaatspfqmjmhjqvheheub\",\n    \"nzeeeeeeeeeeeeeeeeeeeeeeeeebwbidmscpchmwlizun\",\n    \"Impossible\",\n    \"aaaaaaaaaaaaaaaaaaaaaaaaaawgkpxkcizbbzlhgjgailreeuimkkroheizkonqva\",\n    \"www\",\n    \"kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk\",\n    \"Impossible\",\n    \"hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhi\",\n    \"ccccccccccvr\",\n    \"auuuuuuuuuuuuuuuhdzszxqxnciidohopzk\",\n    \"ciiiiiiiiiihrlorl\",\n    \"yffffffshjaiaexqovmnxmsytb\",\n    \"nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnzajysrchvmqjunrncdwsnudwejtpekt\",\n    \"abbbbbbbbb\",\n    \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n    \"aaaaaaa\",\n    \"aa\",\n    \"aba\",\n    \"kekkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk\",\n    \"aaaaaaaaaaaaaaaaaaaa\",\n    \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n    \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n    \"aaa\",\n    \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaf\",\n    \"Impossible\",\n    \"aaaaa\",\n    \"aaaaaaaaaa\",\n    \"abbbbbbbba\",\n    \"ppppp\",\n    \"aaaaaaaaaaaa\",\n    \"aaaa\",\n    \"abbbbbbbbbbb\",\n    \"aaaab\",\n    \"ab\",\n    \"abaaa\",\n    \"aaaaa\",\n    \"hhhhhhhhhhhh\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1099/C",
  "starter_code": ""
}