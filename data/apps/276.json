{
  "task_id": "APPS/276",
  "problem_id": 276,
  "prompt": "You took a peek on Thanos wearing Infinity Gauntlet. In the Gauntlet there is a place for six Infinity Gems:  the Power Gem of purple color,  the Time Gem of green color,  the Space Gem of blue color,  the Soul Gem of orange color,  the Reality Gem of red color,  the Mind Gem of yellow color. \n\nUsing colors of Gems you saw in the Gauntlet determine the names of absent Gems.\n\n\n-----Input-----\n\nIn the first line of input there is one integer $n$ ($0 \\le n \\le 6$)\u00a0\u2014 the number of Gems in Infinity Gauntlet.\n\nIn next $n$ lines there are colors of Gems you saw. Words used for colors are: purple, green, blue, orange, red, yellow. It is guaranteed that all the colors are distinct. All colors are given in lowercase English letters.\n\n\n-----Output-----\n\nIn the first line output one integer $m$ ($0 \\le m \\le 6$)\u00a0\u2014 the number of absent Gems.\n\nThen in $m$ lines print the names of absent Gems, each on its own line. Words used for names are: Power, Time, Space, Soul, Reality, Mind. Names can be printed in any order. Keep the first letter uppercase, others lowercase.\n\n\n-----Examples-----\nInput\n4\nred\npurple\nyellow\norange\n\nOutput\n2\nSpace\nTime\n\nInput\n0\n\nOutput\n6\nTime\nMind\nSoul\nPower\nReality\nSpace\n\n\n\n-----Note-----\n\nIn the first sample Thanos already has Reality, Power, Mind and Soul Gems, so he needs two more: Time and Space.\n\nIn the second sample Thanos doesn't have any Gems, so he needs all six.",
  "solutions": "[\"n = int(input())\\na = [input() for i in range(n)]\\nsol = []\\nfor i in range(6):\\n    c = ['purple', 'green', 'blue', 'orange', 'red', 'yellow'][i]\\n    if c not in a:\\n        sol.append(['Power', 'Time', 'Space', 'Soul', 'Reality', 'Mind'][i])\\nprint(len(sol))\\nfor i in sol:\\n    print(i)\\n\", \"n = int(input())\\n\\nnames = []\\nfor _ in range(n):\\n    names.append(input().strip())\\n\\nnames = set(names)\\n\\nstones = {\\n    'purple': 'Power',\\n    'green': 'Time',\\n    'blue': 'Space',\\n    'orange': 'Soul',\\n    'red': 'Reality',\\n    'yellow': 'Mind',\\n}\\n\\nmissing = set(stones.keys()) - names\\nprint(len(missing))\\nprint('\\\\n'.join(stones[v] for v in missing))\\n\", \"\\nn = int(input())\\na = {'purple':'Power', 'green' : 'Time', 'blue' : 'Space', 'orange' : 'Soul', 'red' : 'Reality', 'yellow' : 'Mind'}\\nfor _ in range(n):\\n\\ts = input()\\n\\ta[s] = 1\\nprint (6-n)\\nfor i in a:\\n\\tif a[i]!=1:\\n\\t\\tprint (a[i])\", \"'''input\\n4\\nred\\npurple\\nyellow\\norange\\n\\n'''\\n\\ndef list_input():\\n    return list(map(int,input().split()))\\ndef map_input():\\n    return map(int,input().split())\\ndef map_string():\\n    return input().split()\\n    \\nn = int(input())    \\nd = {}\\nd[\\\"purple\\\"] = \\\"Power\\\"\\nd[\\\"green\\\"] = \\\"Time\\\"\\nd[\\\"blue\\\"] = \\\"Space\\\"\\nd[\\\"orange\\\"] = \\\"Soul\\\"\\nd[\\\"red\\\"] = \\\"Reality\\\"\\nd[\\\"yellow\\\"] = \\\"Mind\\\"\\n\\na = []\\nfor i in range(n): a.append(input())\\nb = []\\nfor i in d:\\n\\tif i not in a:\\n\\t\\tb.append(d[i])\\nprint(len(b))\\nfor i in b: print(i)\\t\\t\", \"n = int(input())\\nd = {\\\"purple\\\":\\\"Power\\\",\\\"green\\\":\\\"Time\\\",\\\"blue\\\":\\\"Space\\\",\\\"orange\\\":\\\"Soul\\\",\\\"red\\\":\\\"Reality\\\",\\\"yellow\\\":\\\"Mind\\\"}\\nfor i in range(n):\\n    s = input()\\n    del(d[s])\\nprint(len(d))\\nfor k in d:\\n    print(d[k])\\n\", \"n = int(input())\\na = {'Power','Time','Space','Soul','Reality','Mind'}\\nfor i in range(n):\\n\\ts = input()\\n\\tif s == 'red':\\n\\t\\ta.remove('Reality')\\n\\telif s == 'purple':\\n\\t\\ta.remove('Power')\\n\\telif s == 'green':\\n\\t\\ta.remove('Time')\\n\\telif s == 'blue':\\n\\t\\ta.remove('Space')\\n\\telif s == 'orange':\\n\\t\\ta.remove('Soul')\\n\\telif s == 'yellow':\\n\\t\\ta.remove('Mind')\\nprint(len(a))\\nfor i in a:\\n\\tprint(i)\\n\", \"# cook your dish here\\n# from math import * \\nd = {\\\"Power\\\":\\\"purple\\\",\\\"Time\\\":\\\"green\\\",\\\"Space\\\":\\\"blue\\\",\\\"Soul\\\":\\\"orange\\\",\\\"Reality\\\":\\\"red\\\",\\\"Mind\\\":\\\"yellow\\\"}; \\nn = int(input())\\nl =[]\\nfor _ in range(n):\\n    l.append(input())\\nprint(6-n)\\nfor ele in d:\\n    if d[ele] not in l:\\n        print(ele)\", \"from copy import deepcopy\\nimport itertools\\nfrom bisect import bisect_left\\n\\ndef read():\\n    return int(input())\\n\\n\\ndef readmap():\\n    return list(map(int, input().split()))\\n\\n\\ndef readlist():\\n    return list(map(int, input().split()))\\n\\n\\ncolor = [\\\"purple\\\", \\\"green\\\", \\\"blue\\\", \\\"orange\\\", \\\"red\\\", \\\"yellow\\\"]\\ngem = [\\\"Power\\\", \\\"Time\\\", \\\"Space\\\", \\\"Soul\\\", \\\"Reality\\\", \\\"Mind\\\"]\\n\\nN = int(input())\\ns = set()\\nfor _ in range(N):\\n    s.add(input())\\n\\nm = 6 - N\\nprint(m)\\nfor i in range(6):\\n    if not color[i] in s:\\n        print(gem[i])\\n\\n\", \"n = int(input())\\nans = ['Power', 'Time', 'Space', 'Soul', 'Reality', 'Mind']\\nfor i in range(n):\\n    s = input()\\n    if s == 'purple':\\n        del ans[ans.index('Power')]\\n    elif s == 'green':\\n        del ans[ans.index('Time')]\\n    elif s == 'blue':\\n        del ans[ans.index('Space')]\\n    elif s == 'orange':\\n        del ans[ans.index('Soul')]\\n    elif s == 'red':\\n        del ans[ans.index('Reality')]\\n    else:\\n        del ans[ans.index('Mind')]\\nprint(len(ans))\\nfor a in ans:\\n    print(a)\\n\", \"n = int(input())\\ns = {'purple': \\\"Power\\\", \\\"green\\\": \\\"Time\\\", \\\"blue\\\":\\\"Space\\\", \\\"orange\\\":\\\"Soul\\\", \\\"red\\\":\\\"Reality\\\", \\\"yellow\\\":\\\"Mind\\\"}\\nfor i in range(n):\\n    u = input()\\n    s.pop(u)\\nprint(6-n)\\nfor i in s:\\n    print(s[i])\", \"#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n\\\"\\\"\\\"\\nCreated on Tue May 29 21:01:01 2018\\n\\n@st0rmbring3r\\n\\\"\\\"\\\"\\n# l = [int(x) for x in input().split()]\\n\\nd2 = {'Power':'purple','Time':'green','Space': 'blue','Soul': 'orange','Reality': 'red','Mind': 'yellow'}\\nd1 = {d2[x]:x for x in d2}\\n# color: power\\ns = set(y for y in d1)\\n\\nfor _ in range(int(input())):\\n    s.remove(input())\\n\\nprint(len(s))\\nfor x in s:\\n    print(d1[x])\", \"d={\\\"purple\\\":\\\"Power\\\",\\\"green\\\":\\\"Time\\\",\\\"blue\\\":\\\"Space\\\",\\\"orange\\\":\\\"Soul\\\",\\\"red\\\":\\\"Reality\\\",\\\"yellow\\\":\\\"Mind\\\"}\\nn=int(input())\\ntemp=set()\\nfor i in range(n):\\n    temp|={d[input()]}\\n#m,n=list(map(int,input().split()))\\n#a=list(map(int,input().split()))\\n#ans=0\\nans=set()\\nfor i in d:\\n    ans|={d[i]}\\nans=ans-temp\\nprint(len(ans))\\nfor i in ans:\\n    print(i)\", \"n = int(input())\\na = []\\nb = [\\\"red\\\",\\n\\\"purple\\\",\\n\\\"yellow\\\",\\n\\\"orange\\\",\\n\\\"blue\\\",\\n\\\"green\\\"]\\n\\nx = {\\\"purple\\\" : \\\"Power\\\",\\n\\\"blue\\\" : \\\"Space\\\",\\n\\\"orange\\\" : \\\"Soul\\\",\\n\\\"yellow\\\" : \\\"Mind\\\",\\n\\\"green\\\" : \\\"Time\\\",\\n\\\"red\\\" : \\\"Reality\\\",}\\nfor i in range(n):\\n    a.append(input())\\nans = []\\nfor i in b:\\n    if i not in a:\\n        ans.append(x[i])\\nprint(len(ans))\\nfor i in ans:\\n    print(i)\", \"n = int(input())\\na = ['purple', 'green', 'blue', 'orange', 'red', 'yellow']\\nb = ['Power', 'Time', 'Space', 'Soul', 'Reality', 'Mind']\\nfor i in range(n):\\n    s = input()\\n    i = a.index(s)\\n    a.pop(i)\\n    b.pop(i)\\nprint(6-n)\\nfor i in b:print(i)\\n\", \"n=int(input())\\ns=set()\\nm={\\\"purple\\\":\\\"Power\\\",\\\"green\\\":\\\"Time\\\",\\\"blue\\\":\\\"Space\\\",\\\"orange\\\":\\\"Soul\\\",\\\"red\\\":\\\"Reality\\\",\\\"yellow\\\":\\\"Mind\\\"}\\nl=[ 'purple', 'green', 'blue', 'orange', 'red', 'yellow']\\nfor i in range(n):\\n      ch=input()\\n      s.add(ch)\\nl1=[]\\nfor i in l:\\n      if i not in s:\\n            l1.append(i)\\nprint(len(l1))\\nfor i in l1:\\n      print(m[i])\\n\", \"n = int(input())\\nl = ['Power','Time','Space','Soul','Reality','Mind']\\na = ['purple','green','blue','orange','red','yellow']\\nx = []\\nfor i in range(n):\\n    s = input()\\n    x.append(s)\\nprint(6-len(x))\\nfor i in a:\\n    if(i not in x):\\n        print(l[a.index(i)])\", \"gems = {'purple':'Power', 'green':'Time', 'blue':'Space', 'orange':'Soul','red':'Reality','yellow':'Mind' }\\n\\nN = int(input())\\narr = []\\n\\nfor i in range(N):\\n    del gems[input()]\\n\\nprint(len(gems))\\nfor cols in gems:\\n    print(gems[cols])\\n\\n\", \"n = int(input())\\ns = []\\nfor i in range(n):\\n\\ta = input()\\n\\ts.append(a)\\n\\nprint(6-n)\\nif \\\"purple\\\" not in s:\\n\\tprint (\\\"Power\\\")\\nif \\\"green\\\" not in s:\\n\\tprint (\\\"Time\\\")\\nif \\\"blue\\\" not in s:\\n\\tprint (\\\"Space\\\")\\nif \\\"orange\\\" not in s:\\n\\tprint(\\\"Soul\\\")\\nif \\\"red\\\" not in s:\\n\\tprint(\\\"Reality\\\")\\nif \\\"yellow\\\" not in s:\\n\\tprint(\\\"Mind\\\")\", \"n = int(input())\\ninpL = []\\nfor z in range(n):\\n    inpL.append(str(input()))\\nprint(6-n)\\n\\nif \\\"purple\\\" not in inpL:\\n    print(\\\"Power\\\")\\nif \\\"green\\\" not in inpL:\\n    print(\\\"Time\\\")\\nif \\\"blue\\\" not in inpL:\\n    print(\\\"Space\\\")\\nif \\\"yellow\\\" not in inpL:\\n    print(\\\"Mind\\\")\\nif \\\"red\\\" not in inpL:\\n    print(\\\"Reality\\\")\\nif \\\"orange\\\" not in inpL:\\n    print(\\\"Soul\\\")\\n\", \"n=int(input())\\na=[]\\nd={}\\nd['purple']='Power'\\nd['green']='Time'\\nd['blue']='Space'\\nd['orange']='Soul'\\nd['red']='Reality'\\nd['yellow']='Mind'\\nfor i in range(n):\\n\\ta.append(input())\\nb=[]\\nprint(6-n)\\nfor i in d:\\n\\tif i not in a:\\n\\t\\tprint(d[i])\\n\", \"n=int(input())\\nar=[]\\nfor i in range(n):\\n    s=input()\\n    if(s==\\\"purple\\\"):\\n        ar.append(\\\"Power\\\")\\n    if(s==\\\"green\\\"):\\n        ar.append(\\\"Time\\\")\\n    if(s==\\\"blue\\\"):\\n        ar.append(\\\"Space\\\")\\n    if(s==\\\"orange\\\"):\\n        ar.append(\\\"Soul\\\")\\n    if(s==\\\"red\\\"):\\n        ar.append(\\\"Reality\\\")\\n    if(s==\\\"yellow\\\"):\\n        ar.append(\\\"Mind\\\")\\nans=[\\\"Mind\\\",\\\"Reality\\\",\\\"Soul\\\",\\\"Space\\\",\\\"Time\\\",\\\"Power\\\"]\\na=[]\\nfor x in ans:\\n    if(x in ar):\\n        continue\\n    a.append(x)\\nprint(len(a))\\nfor x in a:\\n    print(x)\\n    \\n\", \"t=int(input())\\n#l=list(map(int,input().strip().split()))\\n#n,m=map(int,input().strip().split())\\nd={\\\"red\\\":\\\"Reality\\\",\\\"purple\\\":\\\"Power\\\",\\\"green\\\":\\\"Time\\\",\\\"blue\\\":\\\"Space\\\",\\\"orange\\\":\\\"Soul\\\",\\\"yellow\\\":\\\"Mind\\\"}\\nl=list(d.values())\\nfor i in range(t):\\n\\tr=input()\\n\\tl.remove(d[r])\\nprint (len(l))\\nfor y in l:\\n\\tprint (y)\", \"a = int(input())\\nc = set()\\nfor i in range(a):\\n    b = input()\\n    c.add(b)\\nd = []\\nif 'purple' not in c:\\n    d.append('Power')\\nif 'green' not in c:\\n    d.append('Time')\\nif 'blue' not in c:\\n    d.append('Space')\\nif 'orange' not in c:\\n    d.append('Soul')\\nif 'red' not in c:\\n    d.append('Reality')\\nif 'yellow' not in c:\\n    d.append('Mind')\\nprint(len(d))\\nfor i in d:\\n    print(i)\\n\", \"mp = {\\n'purple' : 'Power',\\n'green' : 'Time',\\n'blue' : 'Space',\\n'orange' : 'Soul',\\n'red' : 'Reality',\\n'yellow' : 'Mind',\\n}\\nn = int(input())\\nL = ['Power', 'Time', 'Space', 'Soul', 'Reality', 'Mind']\\nfor _ in range(n):\\n    co = input().strip()\\n    L.remove(mp[co])\\nprint(len(L))\\nfor x in L:\\n    print(x)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4\\nred\\npurple\\nyellow\\norange\\n\",\n    \"0\\n\",\n    \"6\\npurple\\nblue\\nyellow\\nred\\ngreen\\norange\\n\",\n    \"1\\npurple\\n\",\n    \"3\\nblue\\norange\\npurple\\n\",\n    \"2\\nyellow\\nred\\n\",\n    \"1\\ngreen\\n\",\n    \"2\\npurple\\ngreen\\n\",\n    \"1\\nblue\\n\",\n    \"2\\npurple\\nblue\\n\",\n    \"2\\ngreen\\nblue\\n\",\n    \"3\\npurple\\ngreen\\nblue\\n\",\n    \"1\\norange\\n\",\n    \"2\\npurple\\norange\\n\",\n    \"2\\norange\\ngreen\\n\",\n    \"3\\norange\\npurple\\ngreen\\n\",\n    \"2\\norange\\nblue\\n\",\n    \"3\\nblue\\ngreen\\norange\\n\",\n    \"4\\nblue\\norange\\ngreen\\npurple\\n\",\n    \"1\\nred\\n\",\n    \"2\\nred\\npurple\\n\",\n    \"2\\nred\\ngreen\\n\",\n    \"3\\nred\\npurple\\ngreen\\n\",\n    \"2\\nblue\\nred\\n\",\n    \"3\\nred\\nblue\\npurple\\n\",\n    \"3\\nred\\nblue\\ngreen\\n\",\n    \"4\\npurple\\nblue\\ngreen\\nred\\n\",\n    \"2\\norange\\nred\\n\",\n    \"3\\nred\\norange\\npurple\\n\",\n    \"3\\nred\\norange\\ngreen\\n\",\n    \"4\\nred\\norange\\ngreen\\npurple\\n\",\n    \"3\\nblue\\norange\\nred\\n\",\n    \"4\\norange\\nblue\\npurple\\nred\\n\",\n    \"4\\ngreen\\norange\\nred\\nblue\\n\",\n    \"5\\npurple\\norange\\nblue\\nred\\ngreen\\n\",\n    \"1\\nyellow\\n\",\n    \"2\\npurple\\nyellow\\n\",\n    \"2\\ngreen\\nyellow\\n\",\n    \"3\\npurple\\nyellow\\ngreen\\n\",\n    \"2\\nblue\\nyellow\\n\",\n    \"3\\nyellow\\nblue\\npurple\\n\",\n    \"3\\ngreen\\nyellow\\nblue\\n\",\n    \"4\\nyellow\\nblue\\ngreen\\npurple\\n\",\n    \"2\\nyellow\\norange\\n\",\n    \"3\\nyellow\\npurple\\norange\\n\",\n    \"3\\norange\\nyellow\\ngreen\\n\",\n    \"4\\ngreen\\nyellow\\norange\\npurple\\n\",\n    \"3\\nyellow\\nblue\\norange\\n\",\n    \"4\\norange\\npurple\\nblue\\nyellow\\n\",\n    \"4\\nblue\\norange\\nyellow\\ngreen\\n\",\n    \"5\\ngreen\\nyellow\\norange\\nblue\\npurple\\n\",\n    \"3\\nyellow\\npurple\\nred\\n\",\n    \"3\\nred\\ngreen\\nyellow\\n\",\n    \"4\\nred\\npurple\\ngreen\\nyellow\\n\",\n    \"3\\nred\\nyellow\\nblue\\n\",\n    \"4\\nblue\\nyellow\\nred\\npurple\\n\",\n    \"4\\nblue\\nyellow\\nred\\ngreen\\n\",\n    \"5\\nred\\nyellow\\ngreen\\nblue\\npurple\\n\",\n    \"3\\nred\\nyellow\\norange\\n\",\n    \"4\\norange\\ngreen\\nyellow\\nred\\n\",\n    \"5\\norange\\nred\\ngreen\\nyellow\\npurple\\n\",\n    \"4\\nyellow\\nred\\norange\\nblue\\n\",\n    \"5\\npurple\\nblue\\norange\\nyellow\\nred\\n\",\n    \"5\\norange\\nblue\\nyellow\\nred\\ngreen\\n\"\n  ],\n  \"outputs\": [\n    \"2\\nTime\\nSpace\\n\",\n    \"6\\nReality\\nTime\\nMind\\nSpace\\nPower\\nSoul\\n\",\n    \"0\\n\",\n    \"5\\nMind\\nSpace\\nReality\\nSoul\\nTime\\n\",\n    \"3\\nReality\\nMind\\nTime\\n\",\n    \"4\\nTime\\nPower\\nSoul\\nSpace\\n\",\n    \"5\\nReality\\nSpace\\nMind\\nPower\\nSoul\\n\",\n    \"4\\nSpace\\nReality\\nSoul\\nMind\\n\",\n    \"5\\nMind\\nSoul\\nTime\\nPower\\nReality\\n\",\n    \"4\\nReality\\nTime\\nSoul\\nMind\\n\",\n    \"4\\nPower\\nMind\\nSoul\\nReality\\n\",\n    \"3\\nSoul\\nReality\\nMind\\n\",\n    \"5\\nReality\\nTime\\nSpace\\nMind\\nPower\\n\",\n    \"4\\nTime\\nSpace\\nReality\\nMind\\n\",\n    \"4\\nMind\\nReality\\nSpace\\nPower\\n\",\n    \"3\\nReality\\nSpace\\nMind\\n\",\n    \"4\\nPower\\nReality\\nMind\\nTime\\n\",\n    \"3\\nMind\\nReality\\nPower\\n\",\n    \"2\\nMind\\nReality\\n\",\n    \"5\\nSoul\\nTime\\nPower\\nMind\\nSpace\\n\",\n    \"4\\nSoul\\nMind\\nSpace\\nTime\\n\",\n    \"4\\nSoul\\nSpace\\nPower\\nMind\\n\",\n    \"3\\nMind\\nSpace\\nSoul\\n\",\n    \"4\\nSoul\\nTime\\nPower\\nMind\\n\",\n    \"3\\nTime\\nSoul\\nMind\\n\",\n    \"3\\nSoul\\nMind\\nPower\\n\",\n    \"2\\nMind\\nSoul\\n\",\n    \"4\\nTime\\nSpace\\nMind\\nPower\\n\",\n    \"3\\nTime\\nSpace\\nMind\\n\",\n    \"3\\nPower\\nMind\\nSpace\\n\",\n    \"2\\nSpace\\nMind\\n\",\n    \"3\\nPower\\nMind\\nTime\\n\",\n    \"2\\nMind\\nTime\\n\",\n    \"2\\nPower\\nMind\\n\",\n    \"1\\nMind\\n\",\n    \"5\\nSoul\\nTime\\nSpace\\nReality\\nPower\\n\",\n    \"4\\nReality\\nSpace\\nSoul\\nTime\\n\",\n    \"4\\nReality\\nSoul\\nPower\\nSpace\\n\",\n    \"3\\nReality\\nSoul\\nSpace\\n\",\n    \"4\\nTime\\nReality\\nPower\\nSoul\\n\",\n    \"3\\nTime\\nSoul\\nReality\\n\",\n    \"3\\nPower\\nSoul\\nReality\\n\",\n    \"2\\nReality\\nSoul\\n\",\n    \"4\\nPower\\nReality\\nSpace\\nTime\\n\",\n    \"3\\nSpace\\nTime\\nReality\\n\",\n    \"3\\nPower\\nSpace\\nReality\\n\",\n    \"2\\nReality\\nSpace\\n\",\n    \"3\\nTime\\nReality\\nPower\\n\",\n    \"2\\nReality\\nTime\\n\",\n    \"2\\nReality\\nPower\\n\",\n    \"1\\nReality\\n\",\n    \"3\\nSoul\\nSpace\\nTime\\n\",\n    \"3\\nSpace\\nPower\\nSoul\\n\",\n    \"2\\nSoul\\nSpace\\n\",\n    \"3\\nSoul\\nTime\\nPower\\n\",\n    \"2\\nSoul\\nTime\\n\",\n    \"2\\nPower\\nSoul\\n\",\n    \"1\\nSoul\\n\",\n    \"3\\nPower\\nSpace\\nTime\\n\",\n    \"2\\nPower\\nSpace\\n\",\n    \"1\\nSpace\\n\",\n    \"2\\nPower\\nTime\\n\",\n    \"1\\nTime\\n\",\n    \"1\\nPower\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/987/A",
  "starter_code": ""
}