{
  "task_id": "APPS/560",
  "problem_id": 560,
  "prompt": "You are given a rectangular cake, represented as an r \u00d7 c grid. Each cell either has an evil strawberry, or is empty. For example, a 3 \u00d7 4 cake may look as follows: [Image] \n\nThe cakeminator is going to eat the cake! Each time he eats, he chooses a row or a column that does not contain any evil strawberries and contains at least one cake cell that has not been eaten before, and eats all the cake cells there. He may decide to eat any number of times.\n\nPlease output the maximum number of cake cells that the cakeminator can eat.\n\n\n-----Input-----\n\nThe first line contains two integers r and c (2 \u2264 r, c \u2264 10), denoting the number of rows and the number of columns of the cake. The next r lines each contains c characters \u2014 the j-th character of the i-th line denotes the content of the cell at row i and column j, and is either one of these:   '.' character denotes a cake cell with no evil strawberry;  'S' character denotes a cake cell with an evil strawberry. \n\n\n-----Output-----\n\nOutput the maximum number of cake cells that the cakeminator can eat.\n\n\n-----Examples-----\nInput\n3 4\nS...\n....\n..S.\n\nOutput\n8\n\n\n\n-----Note-----\n\nFor the first example, one possible way to eat the maximum number of cake cells is as follows (perform 3 eats). [Image]  [Image]  [Image]",
  "solutions": "[\"r, c = list(map(int, input().split()))\\ncake = [input().strip() for _ in range(r)]\\nans = 0\\nfor i in range(r):\\n    for j in range(c):\\n        if cake[i][j] == '.' and ('S' not in cake[i] or 'S' not in list(zip(*cake))[j]):\\n            ans += 1\\nprint(ans)\\n\", \"r,c=input().split()\\nr=int(r)\\nc=int(c)\\nrows=[]\\nevils=0\\nfor i in range(r):\\n    rows.append(input())\\n    evils+=rows[-1].count('S')\\neaten=(r*c)-evils\\ncolumns=[]\\nfor i in range(c):\\n    L=[]\\n    for j in range(r):\\n        L.append(rows[j][i])\\n    columns.append(L)\\n\\nfor i in range(r):\\n    for j in range(c):\\n        if(rows[i][j]=='S'):\\n            continue\\n        elif('S' in rows[i] and 'S' in columns[j]):            \\n            eaten-=1\\nprint(eaten)\\n\\n\\n\", \"n,m = map(int,input().split())\\ngrid = [input() for line in range(n)]\\nrows = len([line for line in grid if line == '.'*m])\\ncols = len([True for col in range(m) if len([row[col] for row in grid if row[col] == '.']) == n])\\nprint(rows*m+cols*n-rows*cols)\", \"def eat_cake(cols, rows, string):\\n    \\\"\\\"\\\"\\n    >>> eat_cake(4, 3, ['S...', '....', '..S.'])\\n    8\\n    \\\"\\\"\\\"\\n    result = 0\\n    #each row\\n    for i in range(0, rows):\\n        if 'S' not in string[i]:\\n            result += cols\\n            string[i] = string[i].replace('.', 'E')\\n\\n    #each coloumn\\n    for i in range(0, cols):\\n        contains = False\\n        all_eaten = True\\n        already_eaten = 0\\n        for j in range(0, rows):\\n            if string[j][i] == 'S':\\n                contains = True\\n            if string[j][i] == '.':\\n                all_eaten = False\\n            \\n            if string[j][i] == 'E':\\n                already_eaten += 1\\n                \\n\\n        if (all_eaten == False and contains == False):\\n            result += rows - already_eaten\\n            for row in range(0, rows):\\n                string[row] = string[row][0 : i] + 'E' + string[row][i+1:]\\n                \\n            \\n\\n    return result\\n    \\n        \\n\\n\\ndef main():\\n    first_line = input()\\n    first_line = first_line.split()\\n    \\n    rows = int(first_line[0])\\n    coloumns = int(first_line[1])\\n\\n    l = []\\n    for i in range(rows):\\n        line = input()\\n        l.append(line)\\n        \\n    print(eat_cake(coloumns, rows, l))\\n    \\n\\n#import doctest\\n#doctest.testmod()\\nmain()   \\n\", \"import sys\\nfin = sys.stdin\\n\\nn, m = map(int, fin.readline().split())\\nisRowFree = [True] * n\\nisColFree = [True] * m\\n\\nfor i in range(n):\\n    s = fin.readline().strip()\\n    for j in range(m):\\n        if s[j] == 'S':\\n            isRowFree[i] = False\\n            isColFree[j] = False\\n      \\ndef FreeRows():\\n    return sum(1 for i in range(n) if isRowFree[i])\\ndef FreeColumns():\\n    return sum(1 for i in range(m) if isColFree[i])      \\n\\na = FreeRows()\\nb = FreeColumns()      \\n      \\nprint(a * m + b * (n - a))\", \"r, c = list(map(int, input().split()))\\nstr = []\\nfor i in range (0, r):\\n    aLine = input()\\n    str.append(aLine)\\nres = 0\\nfor i in range (0, r):\\n    k = 1\\n    for j in range (0, c):\\n        if str[i][j] == 'S':\\n            k = 0\\n            break\\n    if k == 1:\\n        res = res + c\\n        str[i] = ''\\n        for j in range (0, c):\\n            str[i] = str[i] + '0'\\nfor j in range (0, c):\\n    k = 1\\n    for i in range (0, r):\\n        if str[i][j] == 'S':\\n            k = 0\\n            break\\n    if k == 1:\\n        for i in range (0, r):\\n            if str[i][j] == '.':\\n                res = res + 1\\nprint (res)\\n\\n\", \"n,m =[int(x) for x in input().split()]\\na = []\\nans = 0\\nfor i in range(n):\\n    a.append(list(input()))\\nfor i in range(n):\\n    flag = 1\\n    for j in range(m):\\n        if a[i][j] == 'S':\\n            flag = 0\\n    if flag == 1:\\n        for j in range(m):\\n            a[i][j] = 'T'\\nfor i in range(m):\\n    flag = 1\\n    for j in range(n):\\n        if a[j][i] == 'S':\\n            flag = 0\\n    if flag == 1:\\n        for j in range(n):\\n            a[j][i] = 'T'\\nfor i in range(n):\\n    for j in range(m):\\n        if a[i][j] == 'T':\\n            ans +=1 \\nprint(ans)\", \"n,m = list(map(int,input().split()))\\ng = [input() for i in range(n)]\\nprint(sum([1 for i in range(n) for j in range(m) if g[i][j] == '.' and not (any([g[i][k] == 'S' for k in range(m)]) and any([g[k][j] == 'S' for k in range(n)]))]))\\n\", \"I=input\\nn,m = list(map(int,I().split()))\\ng = [I() for i in range(n)]\\nprint(n*m-len([1 for i in g if i.count('S')])*len([1 for i in zip(*g) if i.count('S')]))\\n\", \"import sys\\n\\t\\ndef main():\\n\\tcake = []\\n\\tr, c = list(map(int, sys.stdin.readline().split()))\\n\\tfor i in range(r):\\n\\t\\tcake.append(sys.stdin.readline().strip())\\n\\trow_count = 0\\n\\tfor i in range(r):\\n\\t\\tfound_strawberry = False\\n\\t\\tfor j in range(c):\\n\\t\\t\\tif cake[i][j] == 'S':\\n\\t\\t\\t\\tfound_strawberry = True\\n\\t\\t\\t\\tbreak\\n\\t\\tif found_strawberry is False:\\n\\t\\t\\trow_count += 1\\n\\tcol_count = 0\\n\\tfor j in range(c):\\n\\t\\tfound_strawberry = False\\n\\t\\tfor i in range(r):\\n\\t\\t\\tif cake[i][j] == 'S':\\n\\t\\t\\t\\tfound_strawberry = True\\n\\t\\t\\t\\tbreak\\n\\t\\tif found_strawberry is False:\\n\\t\\t\\tcol_count += 1\\n\\tprint(row_count * c + col_count * r - row_count * col_count)\\n\\t\\ndef __starting_point():\\n    return(main())\\n\\n__starting_point()\", \"n, m = list(map(int, input().split()))\\narr = [input() for _ in range(n)]\\nset1 = []\\nset2 = []\\nfor i in range(n):\\n  for j in range(m):\\n    if arr[i][j]=='S':\\n      set1.append(i)\\n      set2.append(j)\\nlen1 = int(n - len(set(set1)))\\nlen2 = int(m - len(set(set2)))\\n\\nprint(len1 * m + len2 *n - len2 * len1)\\n\\n\\n\", \"r,c = list(map (int, input().split()))\\n\\nhoriz,vert = [], []\\n\\nfor i in range(r):\\n    horiz.append ([])\\nfor i in range(c):\\n    vert.append ([])\\n\\nfor i in range (r):\\n    s = input()\\n    for j in range (c):\\n        horiz[i].append (s[j])\\n        vert[j].append (s[j])\\n\\nans = r * c\\nfor i in range (r):\\n    for j in range (c):\\n        if ('S' in horiz[i]) and ('S' in vert[j]):\\n            ans -= 1\\nprint (ans)\\n\", \"S=input\\nn,m=map(int,S().split())\\ng=[S() for i in range(n)]\\nprint(n*m-len([1 for i in g if i.count('S')])*len([1 for i in zip(*g) if i.count('S')]))\", \"r, c = map(int, input().split())\\na = [input() for i in range(r)]\\nt1 = set()\\nt2 = set()\\nfor i in range(r):\\n    for j in range(c):\\n        if a[i][j] == 'S':\\n            t1.add(i)\\n            t2.add(j)\\nn = r - len(t1)\\nm = c - len(t2)\\nprint(n * c + m * r - n * m)\", \"r, c = map(int, input().split())\\na = [input() for i in range(r)]\\nn = len([0 for s in a if 'S' not in s])\\nm = len([0 for j in range(c) if len([s[j] for s in a if s[j] =='.']) == r])\\nprint(n * c + m * r - n * m)\", \"n, m = list(map(int, input().split()))\\narr = [input() for _ in range(n)]\\nset1 = []\\nset2 = []\\nfor i in range(n):\\n  for j in range(m):\\n    if arr[i][j]=='S':\\n      set1.append(i)\\n      set2.append(j)\\nlen1 = int(n - len(set(set1)))\\nlen2 = int(m - len(set(set2)))\\n\\nprint(len1 * m + len2 *n - len2 * len1)\\n\", \"s = input().split()\\nr = int( s[0] )\\nc = int( s[1] )\\na = []\\nfor i in range( r ):\\n\\ta.append( input() )\\nrow = r\\ncol = c\\nfor s in a:\\n\\tfor x in s:\\n\\t\\tif x == 'S':\\n\\t\\t\\trow -= 1\\n\\t\\t\\tbreak\\nfor i in range( c ):\\n\\tfor j in range( r ):\\n\\t\\tif a[j][i] == 'S':\\n\\t\\t\\tcol -= 1\\n\\t\\t\\tbreak\\n\\t\\t\\t\\nprint( row*c + col*r - col*row )\\n\\t\\t\\n\", \"\\nr,c=list(map(int,input().split()))\\n\\nl=[0]*c\\nh=[0]*r\\na=[]\\nfor i in range(r):\\n    a.append([])\\n    ls=list(input())\\n    for j in range(c):\\n        a[i].append(ls[j])\\n       \\n        if a[i][j]!='.' :\\n            l[j]=1\\n            h[i]=1\\n        else:\\n            a[i][j]=1\\n\\n            \\n\\nt=0\\nfor i in range(r):\\n    if h[i]==0 :\\n        for j in range(c):\\n            t+=a[i][j]\\n            a[i][j]=0\\n\\nfor i in range(c):\\n    if l[i]==0:\\n        for j in range(r):\\n            t+=a[j][i]\\n            a[j][i]=0\\n\\nprint(t)      \\n\\n         \\n\", \"import sys\\nmy_file = sys.stdin\\n#my_file = open(\\\"input.txt\\\", \\\"r\\\")\\nline = [int(i) for i in my_file.readline().strip(\\\"\\\\n\\\").split()]\\nr, c = line[0], line[1]\\ntable = my_file.read().split()\\nnew_table = []\\nfor line in table:\\n    if \\\"S\\\" in line:\\n        new_table.append(line)\\nres = (len(table) - len(new_table))*c\\nr -= len(table) - len(new_table)\\nfor col in range(c):\\n    for row in range(r):\\n        if \\\"S\\\" in new_table[row][col]:\\n            break\\n    else:\\n        res += r\\nprint(res)\", \"r, c = list(map(int, input().split()))\\n\\nrt = [0] * 10\\nct = [0] * 10\\n\\nfor i in range(r):\\n    s = str(input())\\n    for j in range(len(s)):\\n        if s[j] == 'S':\\n            rt[i] = 1\\n            ct[j] = 1\\n\\ncnt = 0\\nfor i in range(r):\\n    for j in range(c):\\n        if rt[i] == 0 or ct[j] == 0:\\n            cnt += 1\\n\\nprint(cnt)\\n\", \"a, b = map(int, input().split())\\ns, p = 0, [[0] * b for i in range(a)]\\nfor i in range(a):\\n    t = input()\\n    if 'S' in t:\\n        for j in range(b):\\n            p[i][j] |= 1\\n            if t[j] == 'S':\\n                for k in range(a):\\n                    p[k][j] |= 2\\nfor i in range(a):\\n    s += p[i].count(3)\\nprint(a * b - s)\", \"def main(r,c,seq):\\n\\tanswer = 0\\n\\tfor i in range(r):\\n\\t\\tk = seq[i].count(1)\\n\\t\\tif k==0:\\n\\t\\t\\tfor j in range(c):\\n\\t\\t\\t\\titem = seq[i][j]\\n\\t\\t\\t\\tif item==0:\\n\\t\\t\\t\\t\\tseq[i][j]=2\\n\\t\\t\\t\\t\\tanswer+=1\\n\\tfor i in range(c):\\n\\t\\ttemp = 0\\n\\t\\tfor j in range(r):\\n\\t\\t\\titem = seq[j][i]\\n\\t\\t\\tif item==0:\\n\\t\\t\\t\\ttemp+=1\\n\\t\\t\\telif item==1:\\n\\t\\t\\t\\ttemp=0\\n\\t\\t\\t\\tbreak\\n\\n\\t\\tanswer+=temp\\n\\n\\n\\treturn answer\\n\\ndef init():\\n\\tr,c = list(map(int, input().split()))\\n\\tseq = []\\n\\tfor i in range(r):\\n\\t\\ttemp = []\\n\\t\\tfor item in input():\\n\\t\\t\\tif item=='S':\\n\\t\\t\\t\\ttemp+=[1]\\n\\t\\t\\telse:\\n\\t\\t\\t\\ttemp+=[0]\\n\\t\\tseq.append(temp)\\n\\n\\tprint(main(r,c,seq))\\n\\ninit()\", \"def how_many(rows, cols):\\n    n = 0\\n\\n    # Eat rows\\n    for i in range(len(rows)):\\n        if 'S' not in rows[i]:\\n            for j in range(len(cols)):\\n                rows[i][j] = 'E'\\n                cols[j][i] = 'E'\\n                n += 1\\n    # eat coloumns\\n    for j in range(len(cols)):\\n            if 'S' not in cols[j]:\\n                n += cols[j].count('.')\\n                \\n    return n\\n\\n            \\n\\ndef main():\\n    first_line = input()\\n    first_line = first_line.split()\\n    \\n    r = int(first_line[0])\\n    c = int(first_line[1])\\n    \\n    rows = []\\n\\n    for i in range(r):\\n        line = input()\\n        rows += [list(line)]\\n\\n    coloumns = [[rows[i][j] for i in range(r)] for j in range(c)]\\n\\n    print(how_many(rows, coloumns))\\n    \\n        \\n    \\n\\n\\nmain()   \\n\", \"r,c=list(map(int,input().split()))\\n\\nL=[]\\n\\nfor i in range(r):\\n    s=input()\\n    L.append(str(s))\\nans=r*c\\nfor i in range(r):\\n    for j in range(c):\\n        if(L[i][j]==\\\"S\\\"):\\n            ans-=1\\n            continue\\n        if(\\\"S\\\" in L[i]):\\n            case=False\\n            for z in range(r):\\n                if(L[z][j]==\\\"S\\\"):\\n                    case=True\\n                    break\\n            if(case):\\n                ans-=1\\nprint(ans)\\n\", \"r, c = list(map(int, input().split()))\\na = []\\nfor i in range(r):\\n    a.append(input())\\n\\nx = r\\nfor i in range(r):\\n    for j in range(c):\\n        if a[i][j] == 'S':\\n            x -= 1\\n            break\\n\\ny = c\\nfor j in range(c):\\n    for i in range(r):\\n        if a[i][j] == 'S':\\n            y -= 1\\n            break\\n\\nprint(x*c+r*y-x*y)\\n\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3 4\\nS...\\n....\\n..S.\\n\",\n    \"2 2\\n..\\n..\\n\",\n    \"2 2\\nSS\\nSS\\n\",\n    \"7 3\\nS..\\nS..\\nS..\\nS..\\nS..\\nS..\\nS..\\n\",\n    \"3 5\\n..S..\\nSSSSS\\n..S..\\n\",\n    \"10 10\\nSSSSSSSSSS\\nSSSSSSSSSS\\nSSSSSSSSSS\\nSSSSSSSSSS\\nSSSSSSSSSS\\nSSSSSSSSSS\\nSSSSSSSSSS\\nSSSSSSSSSS\\nSSSSSSSSSS\\nSSSSSSSSSS\\n\",\n    \"10 10\\n.....SSSSS\\n.....SSSSS\\n.....SSSSS\\n.....SSSSS\\n.....SSSSS\\n..........\\n..........\\n..........\\n..........\\n..........\\n\",\n    \"10 10\\nS...SSSSSS\\nS...SSSSSS\\nS...SSSSSS\\nS...SSSSSS\\nS...SSSSSS\\nS...SSSSSS\\nS...SSSSSS\\nS...SSSSSS\\nS...SSSSSS\\nS...SSSSSS\\n\",\n    \"10 10\\nSSSSSSSSSS\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n\",\n    \"8 9\\n.........\\n.........\\n.........\\n.........\\n.........\\n.........\\nSSSSSSSSS\\n.........\\n\",\n    \"5 6\\nSSSSSS\\n......\\nSSSSSS\\nSSSSSS\\n......\\n\",\n    \"10 10\\n....S..S..\\n....S..S..\\n....S..S..\\n....S..S..\\n....S..S..\\n....S..S..\\n....S..S..\\n....S..S..\\n....S..S..\\n....S..S..\\n\",\n    \"9 5\\nSSSSS\\nSSSSS\\nSSSSS\\nSSSSS\\nSSSSS\\nSSSSS\\nSSSSS\\nSSSSS\\nSSSSS\\n\",\n    \"9 9\\n...S.....\\nS.S.....S\\n.S....S..\\n.S.....SS\\n.........\\n..S.S..S.\\n.SS......\\n....S....\\n..S...S..\\n\",\n    \"5 6\\nSSSSSS\\nSSSSSS\\nSSSSSS\\nSS.S..\\nS.S.SS\\n\",\n    \"9 8\\n........\\n.......S\\n........\\nS.......\\n........\\n........\\nS.......\\n........\\n.......S\\n\",\n    \"9 7\\n......S\\n......S\\nS.S.S..\\n.......\\n.......\\n.S.....\\n.S....S\\n..S....\\n.S....S\\n\",\n    \"10 10\\n..S..SS..S\\nS.........\\n.S.......S\\n....S.....\\n.S........\\n...S.SS...\\n.....S..S.\\n......S...\\n..S....SS.\\n...S......\\n\",\n    \"10 10\\n.......S..\\n..........\\n.S........\\nS..S......\\nS....S....\\nS......S..\\n.......S..\\n..S.......\\n.....S....\\n...S.S....\\n\",\n    \"10 6\\n...S..\\n.....S\\n...S..\\n.S....\\n......\\n......\\n.S....\\n.S...S\\n......\\n......\\n\",\n    \"6 10\\n..........\\nS.........\\n......S...\\n.S........\\n.........S\\n..S.......\\n\",\n    \"9 6\\n....S.\\n...S.S\\n.S..S.\\nS.....\\n...S..\\n..S...\\n.....S\\n......\\n......\\n\",\n    \"5 10\\nS.S.......\\n...SS.....\\n.SSS......\\n.........S\\n..........\\n\",\n    \"10 10\\n.....S....\\n....SS..S.\\n.S...S....\\n........SS\\n.S.......S\\nSS..S.....\\n.SS.....SS\\nS..S......\\n.......SSS\\nSSSSS....S\\n\",\n    \"5 7\\nS...SSS\\nS.S..S.\\nS.S.S..\\nS.S.S..\\n.......\\n\",\n    \"6 7\\n..S.SS.\\n......S\\n....S.S\\nSS..S..\\nS..SS.S\\n.....S.\\n\",\n    \"10 6\\n.SSSSS\\nSSS.SS\\nSSSSSS\\nS.SSSS\\nSSSSS.\\nS.SSSS\\nSS.SSS\\n.SSS.S\\n.SSS..\\nSS..SS\\n\",\n    \"2 4\\n....\\n....\\n\",\n    \"2 2\\n..\\n..\\n\",\n    \"3 3\\n...\\n...\\n...\\n\",\n    \"3 2\\nS.\\n.S\\nS.\\n\",\n    \"3 2\\nS.\\n.S\\nS.\\n\",\n    \"4 3\\n.S.\\nS.S\\n.S.\\nS.S\\n\",\n    \"2 3\\n...\\nSSS\\n\",\n    \"4 3\\nSSS\\n...\\n...\\n...\\n\",\n    \"2 4\\nS.SS\\nS.SS\\n\",\n    \"2 2\\n..\\n.S\\n\",\n    \"3 2\\n.S\\n.S\\nSS\\n\",\n    \"4 4\\nS.S.\\nS.S.\\n.SSS\\nS...\\n\",\n    \"2 4\\nSS.S\\n..S.\\n\",\n    \"2 3\\n...\\nS..\\n\",\n    \"2 4\\n...S\\n....\\n\"\n  ],\n  \"outputs\": [\n    \"8\\n\",\n    \"4\\n\",\n    \"0\\n\",\n    \"14\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"75\\n\",\n    \"30\\n\",\n    \"90\\n\",\n    \"63\\n\",\n    \"12\\n\",\n    \"80\\n\",\n    \"0\\n\",\n    \"17\\n\",\n    \"0\\n\",\n    \"64\\n\",\n    \"28\\n\",\n    \"0\\n\",\n    \"46\\n\",\n    \"42\\n\",\n    \"35\\n\",\n    \"12\\n\",\n    \"26\\n\",\n    \"10\\n\",\n    \"15\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"8\\n\",\n    \"4\\n\",\n    \"9\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"3\\n\",\n    \"9\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"5\\n\",\n    \"7\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/330/A",
  "starter_code": ""
}