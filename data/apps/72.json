{
  "task_id": "APPS/72",
  "problem_id": 72,
  "prompt": "After the big birthday party, Katie still wanted Shiro to have some more fun. Later, she came up with a game called treasure hunt. Of course, she invited her best friends Kuro and Shiro to play with her.\n\nThe three friends are very smart so they passed all the challenges very quickly and finally reached the destination. But the treasure can only belong to one cat so they started to think of something which can determine who is worthy of the treasure. Instantly, Kuro came up with some ribbons.\n\nA random colorful ribbon is given to each of the cats. Each color of the ribbon can be represented as an uppercase or lowercase Latin letter. Let's call a consecutive subsequence of colors that appears in the ribbon a subribbon. The beauty of a ribbon is defined as the maximum number of times one of its subribbon appears in the ribbon. The more the subribbon appears, the more beautiful is the ribbon. For example, the ribbon aaaaaaa has the beauty of $7$ because its subribbon a appears $7$ times, and the ribbon abcdabc has the beauty of $2$ because its subribbon abc appears twice.\n\nThe rules are simple. The game will have $n$ turns. Every turn, each of the cats must change strictly one color (at one position) in his/her ribbon to an arbitrary color which is different from the unchanged one. For example, a ribbon aaab can be changed into acab in one turn. The one having the most beautiful ribbon after $n$ turns wins the treasure.\n\nCould you find out who is going to be the winner if they all play optimally?\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($0 \\leq n \\leq 10^{9}$)\u00a0\u2014 the number of turns.\n\nNext 3 lines contain 3 ribbons of Kuro, Shiro and Katie one per line, respectively. Each ribbon is a string which contains no more than $10^{5}$ uppercase and lowercase Latin letters and is not empty. It is guaranteed that the length of all ribbons are equal for the purpose of fairness. Note that uppercase and lowercase letters are considered different colors.\n\n\n-----Output-----\n\nPrint the name of the winner (\"Kuro\", \"Shiro\" or \"Katie\"). If there are at least two cats that share the maximum beauty, print \"Draw\".\n\n\n-----Examples-----\nInput\n3\nKuroo\nShiro\nKatie\n\nOutput\nKuro\n\nInput\n7\ntreasurehunt\nthreefriends\nhiCodeforces\n\nOutput\nShiro\n\nInput\n1\nabcabc\ncbabac\nababca\n\nOutput\nKatie\n\nInput\n15\nfoPaErcvJ\nmZaxowpbt\nmkuOlaHRE\n\nOutput\nDraw\n\n\n\n-----Note-----\n\nIn the first example, after $3$ turns, Kuro can change his ribbon into ooooo, which has the beauty of $5$, while reaching such beauty for Shiro and Katie is impossible (both Shiro and Katie can reach the beauty of at most $4$, for example by changing Shiro's ribbon into SSiSS and changing Katie's ribbon into Kaaaa). Therefore, the winner is Kuro.\n\nIn the fourth example, since the length of each of the string is $9$ and the number of turn is $15$, everyone can change their ribbons in some way to reach the maximal beauty of $9$ by changing their strings into zzzzzzzzz after 9 turns, and repeatedly change their strings into azzzzzzzz and then into zzzzzzzzz thrice. Therefore, the game ends in a draw.",
  "solutions": "[\"turns = int(input())\\ns0 = input()\\ns1 = input()\\ns2 = input()\\n\\nd0 = dict()\\nd1 = dict()\\nd2 = dict()\\n\\nalphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\\nfor char in alphabet:\\n\\td0[char] = 0\\n\\td1[char] = 0\\n\\td2[char] = 0\\n\\nfor char in s0:\\n\\td0[char] += 1\\nfor char in s1:\\n\\td1[char] += 1\\nfor char in s2:\\n\\td2[char] += 1\\t\\n\\nm0 = max([d0[char] for char in alphabet])\\nm1 = max([d1[char] for char in alphabet])\\nm2 = max([d2[char] for char in alphabet])\\n\\nl0 = len(s0)\\nl1 = len(s1)\\nl2 = len(s2)\\n\\nif turns == 1 and m0 == l0:\\n\\tscore0 = m0 - 1\\nelse:\\n\\tscore0 = min(l0,m0+turns)\\n\\nif turns == 1 and m1 == l1:\\n\\tscore1 = m1 - 1\\nelse:\\n\\tscore1 = min(l1,m1+turns)\\n\\nif turns == 1 and m2 == l2:\\n\\tscore2 = m2 - 1\\nelse:\\n\\tscore2 = min(l2,m2+turns)\\n\\t\\nscores = [score0,score1,score2]\\nbestscore = max(scores)\\n\\nwinnerlist = [i for i in range(3) if scores[i] == bestscore]\\nif len(winnerlist) > 1:\\n\\tprint('Draw')\\nelse:\\n\\tprint(['Kuro','Shiro','Katie'][winnerlist[0]])\", \"#!/usr/bin/env python3\\n\\nfrom collections import Counter\\n\\nn = int(input().strip())\\nnames = ['Kuro', 'Shiro', 'Katie']\\nss = {}\\nfor name in names:\\n\\tss[name] = input().strip()\\n\\ndef beauty(s, n):\\n\\tcm = Counter(s).most_common(1)[0][1]\\n\\tif n == 1 and cm == len(s):\\n\\t\\treturn cm - 1\\n\\telse:\\n\\t\\treturn min(len(s), cm + n)\\n\\nres = {}\\nfor name in names:\\n\\tres[name] = beauty(ss[name], n)\\n\\nbestv = max(res.values())\\nif list(res.values()).count(bestv) > 1:\\n\\tprint ('Draw')\\nelse:\\n\\tfor name, v in list(res.items()):\\n\\t\\tif v == bestv:\\n\\t\\t\\tprint (name)\\n\\n\", \"from collections import Counter;\\n\\nn = int(input())\\n\\na = input()\\nb = input()\\nc = input()\\n\\nfa = Counter(a);\\nfb = Counter(b);\\nfc = Counter(c);\\n\\nla = min(fa.most_common(1)[0][1] + n, len(a))\\nlb = min(fb.most_common(1)[0][1] + n, len(a))\\nlc = min(fc.most_common(1)[0][1] + n, len(a))\\n\\nif fa.most_common(1)[0][1] == len(a) and n == 1:\\n    la = len(a)-1\\n\\nif fb.most_common(1)[0][1] == len(b) and n == 1:\\n    lb = len(b)-1\\n\\nif fc.most_common(1)[0][1] == len(c) and n == 1:\\n    lc = len(c)-1\\n\\n\\n\\nif la > max(lb, lc):\\n    print(\\\"Kuro\\\")\\nelif lb > max(la, lc):\\n    print(\\\"Shiro\\\")\\nelif lc > max(la, lb):\\n    print(\\\"Katie\\\")\\nelse:\\n    print(\\\"Draw\\\")\\n\\n\", \"N = int(input())\\nS = [input() for i in range(3)]\\nbu = []\\nfor s in S:\\n    cnt = {}\\n    mx = 0\\n    for c in s:\\n        if c not in cnt:\\n            cnt[c] = 0\\n        cnt[c] += 1\\n        mx = max(mx, cnt[c])\\n    if mx == len(s) and N == 1:\\n        bu.append(mx - 1)\\n    else:\\n        bu.append(min(len(s), mx + N))\\n\\nans = -1\\nansmx = -1\\nfor i in range(3):\\n    if bu[i] > ansmx:\\n        ans = i\\n        ansmx = bu[i]\\n    elif bu[i] == ansmx:\\n        ans = -1\\n\\nif ans == -1:\\n    print('Draw')\\nelif ans == 0:\\n    print('Kuro')\\nelif ans == 1:\\n    print('Shiro')\\nelse:\\n    print('Katie')\\n\", \"s = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\\nn = int(input())\\n\\na = input()\\nb = input()\\nc = input()\\n\\nm = len(a)\\n\\nx = max([a.count(r) for r in s])\\ny = max([b.count(r) for r in s])\\nz = max([c.count(r) for r in s])\\n\\nif n == 1:\\n    if x == m: x -= 1\\n    else: x += 1\\n    if y == m: y -= 1\\n    else: y += 1\\n    if z == m: z -= 1\\n    else: z += 1\\nelse:\\n    x = min(m, x+n)\\n    y = min(m, y+n)\\n    z = min(m, z+n)\\n\\nmx = max(x, y, z)\\n\\nif x == mx and y < mx and z < mx:\\n    print ('Kuro')\\nelif x < mx and y == mx and z < mx:\\n    print ('Shiro')\\nelif x < mx and y < mx and z == mx:\\n    print ('Katie')\\nelse:\\n    print ('Draw')\\n\", \"def ct(s):\\n    a=[0]*26*2\\n    for i in s:\\n        if ord(i)<97:\\n            a[ord(i)-65]+=1\\n        else:\\n            a[ord(i)-97+26]+=1\\n    return max(a)\\nn=int(input())\\ns1=input()\\nln=len(s1)\\ns1=ct(s1)\\ns2=ct(input())\\ns3=ct(input())\\ns=[s1,s2,s3]\\nfor i in range(len(s)):\\n    if s[i]==ln and n==1: s[i]=ln-1\\n    else:s[i]=s[i]+n\\n    if s[i]>ln: s[i]=ln\\ns1=s[0]\\ns2=s[1]\\ns3=s[2]\\n#print(s)\\ns.sort()\\nif s[2]==s[1]:\\n    print('Draw')\\nelif s[-1]==s1:\\n    print('Kuro')\\nelif s[-1]==s2:\\n    print('Shiro')\\nelif s[-1]==s3:\\n    print('Katie')\\n\\n\\n    \\n\\n\\n##////////////////      //////        ///////      //             ///////     //  //   //\\n##////          //    ///   ///     ///    ///     //            ///  ///     ////     //\\n##////    ////       ///     ///   ///      ///    //           /////////     ////     ///////\\n##////     /////    ///       /// ///        ///   //          ///    ///     ////     //   //\\n##//////////////     ///////////   ///////////     //////     ///     ///     //  //   //   //\\n\\n\\n\\n\", \"from collections import Counter\\n\\ndef solve(n, ribbons):\\n\\tL = len(ribbons[0])\\n\\ta = [Counter(r).most_common(1)[0][1] for r in ribbons]\\n\\n\\tr = sorted([(x, i) for i, x in enumerate(a)], reverse=True)\\n\\n\\tif n == 1:\\n\\t\\tc = Counter(a)\\n\\t\\tif c[L - 1] == 1:\\n\\t\\t\\tfor i in range(3):\\n\\t\\t\\t\\tif a[i] == L - 1: return i\\n\\t\\tif c[L - 1] > 1:\\n\\t\\t\\treturn 3\\n\\t\\tif c[L] + c[L - 2] == 1:\\n\\t\\t\\tfor i in range(3):\\n\\t\\t\\t\\tif a[i] == L or a[i] == L-2:\\n\\t\\t\\t\\t\\treturn i\\n\\t\\tif c[L] + c[L - 2] > 1:\\n\\t\\t\\treturn 3\\n\\n\\tif r[1][0] == r[0][0]:\\n\\t\\treturn 3\\n\\tif r[1][0] + n >= L:\\n\\t\\treturn 3\\n\\treturn r[0][1]\\n\\n\\tprint(a)\\n\\ndef main():\\n\\tn = int(input())\\n\\tcats = ('Kuro', 'Shiro', 'Katie', 'Draw')\\n\\n\\tribbons = [input().strip() for _ in range(3)]\\n\\n\\t# print(ribbons)\\n\\tk = solve(n, ribbons)\\n\\tprint(cats[k])\\n\\ndef __starting_point():\\n\\tmain()\\n__starting_point()\", \"def gc(a):\\n  ans = dict()\\n  for d in a:\\n    if d in list(ans.keys()):\\n      ans[d] += 1\\n    else:\\n      ans[d] = 1\\n  return  ans[max(ans, key=lambda i: ans[i])]\\ndef f(t,n,s):\\n  if t == s and n == 1:\\n    return s - 1\\n  return min(t + n,s)\\n\\nn = int(input())\\na = input()\\nb = input()\\nc = input()\\nsize = len(c)\\n\\narr = [f(gc(a), n,size), f(gc(b), n,size), f(gc(c), n,size)]\\n\\nif arr[0] > arr[1] and arr[0] > arr[2]:\\n  print(\\\"Kuro\\\")\\nelif arr[1] > arr[0] and arr[1] > arr[2]:\\n  print(\\\"Shiro\\\")\\nelif arr[2] > arr[1] and arr[2] > arr[0]:\\n  print(\\\"Katie\\\")\\nelse:\\n  print(\\\"Draw\\\")\\n\", \"n=int(input()); m1=0; m2=0; m3=0;\\ns1=input()\\ns2=input()\\ns3=input()\\nx=len(s1)\\n\\nfor  t in 'qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM':\\n    m1=max(m1, s1.count(t))\\n    m2=max(m2, s2.count(t))\\n    m3=max(m3, s3.count(t))\\nd=[[m1,'Kuro'], [m2, 'Shiro'], [m3,'Katie']]\\nd.sort()\\nif (d[2][0]==x) and (n==1):\\n    if (d[1][0]==x):\\n        if (d[0][0]==x-1):\\n            print(d[0][1])\\n        else:\\n            print('Draw')\\n    else:\\n        if (d[1][0]==x-1):\\n            if d[0][0]==x-1:\\n                print('Draw')\\n            else:\\n                print(d[1][1])\\n        else:\\n            if d[1][0]==x-2:\\n                print('Draw')\\n            else:\\n                print(d[2][1])\\n            \\nelif d[1][0]+n>=x:\\n    print('Draw')\\nelse:\\n    if m1>max(m2, m3):\\n        print('Kuro')\\n    else:\\n        if m2>max(m1, m3):\\n            print('Shiro')\\n        else:\\n            if m3>max(m2, m1):\\n                print('Katie')\\n            else:\\n                print('Draw')\\n\\n\", \"n = int(input())\\nku, sh, ka = input(), input(), input()\\nl_ku, l_sh, l_ka = max([ku.count(i) for i in list(set(ku))]), max([sh.count(i) for i in list(set(sh))]), max([ka.count(i) for i in list(set(ka))])\\nif len(ku) - l_ku > n:\\n    l_ku += n\\nelif l_ku == len(ku) and n == 1:\\n    l_ku -= 1\\nelse:\\n    l_ku = len(ku)\\nif len(sh) - l_sh > n:\\n    l_sh += n\\nelif l_sh == len(sh) and n == 1:\\n    l_sh -= 1\\nelse:\\n    l_sh = len(sh)\\nif len(ka) - l_ka > n:\\n    l_ka += n\\nelif l_ka == len(ka) and n == 1:\\n    l_ka -= 1\\nelse:\\n    l_ka = len(ka)\\nma = max([l_sh, l_ku, l_ka])\\nif (l_ka == l_sh and l_ka == ma) or (l_ku == l_sh and l_ku == ma) or (l_ka == l_ku and l_ka == ma):\\n    print('Draw')\\nelif ma == l_ka:\\n    print('Katie')\\nelif ma == l_sh:\\n    print('Shiro')\\nelif ma == l_ku:\\n    print('Kuro')\", \"import itertools\\n\\ndef beauty(string, n):\\n    string = sorted(string)\\n    maxlen = 0\\n    for k, g in itertools.groupby(string):\\n        maxlen = max(maxlen, len(list(g)))\\n    if maxlen == len(string) and n == 1:\\n        return maxlen - 1\\n    else:\\n        return min(len(string), n + maxlen)\\n    \\n\\nn = int(input())\\nli = []\\nli.append((beauty(input(), n), 'Kuro'))\\nli.append((beauty(input(), n), 'Shiro'))\\nli.append((beauty(input(), n), 'Katie'))\\nli.sort(reverse = True)\\nif li[0][0] == li[1][0]:\\n    print('Draw')\\nelse:\\n    print(li[0][1])\\n\\n\", \"n = int(input())\\nku = input()\\nsi = input()\\nka = input()\\n\\ndef bu2num(bu):\\n  dif = ord(bu) - ord('a')\\n  if dif >= 0 and dif < 26:\\n    return dif\\n  else:\\n    return ord(bu) - ord('A') + 26\\n\\ndef num2bu(num):\\n  return chr(ord('a') + num if num < 26 else ord('a') + num - 26)\\n\\ndef bus(s):\\n  x = [0] * 26 * 2\\n  for bu in s:\\n    x[bu2num(bu)] += 1\\n  return x\\n\\ndef mabus(arr):\\n  max = 0\\n  for a in arr:\\n    if a > max:\\n      max = a\\n  return max\\n\\ndef calc(s):\\n  l = len(s)\\n  m = mabus(bus(s))\\n  d = m + n\\n  if m == l and n == 1:\\n    return l - 1\\n  elif d <= l:\\n    return d\\n  else:\\n    return l\\n\\nkun = calc(ku)\\nsin = calc(si)\\nkan = calc(ka)\\n\\nif kun > sin and kun > kan:\\n  print('Kuro')\\nelif sin > kun and sin > kan:\\n  print('Shiro')\\nelif kan > kun and kan > sin:\\n  print('Katie')\\nelse:\\n  print('Draw')\\n\", \"N = int(input())\\nn = [0,0,0]\\n\\nfor i in range(3):\\n\\tz = [0 for i in range(128)]\\n\\tx = input()\\n\\tfor j in x:\\n\\t\\tz[ord(j)]+=1\\n\\tn[i]=min(N+max(z),len(x)-1 if (N==1 and len(x)==max(z)) else len(x))\\nr=max(n)\\nif n.count(r)==1:\\n\\tif(n[0]==r):\\n\\t\\tprint(\\\"Kuro\\\")\\n\\telif(n[1]==r):\\n\\t\\tprint(\\\"Shiro\\\")\\n\\telse:\\n\\t\\tprint(\\\"Katie\\\")\\nelse:\\n\\tprint(\\\"Draw\\\")\\n\", \"n = int(input())\\ns1 = input()\\ns2 = input()\\ns3 = input()\\n\\nk = len(s1)\\n\\nss = []\\n\\nss.append (sorted(s1))\\nss.append (sorted(s2))\\nss.append (sorted(s3))\\n\\nmm = [0]*3\\n\\nfor i in range(3):\\n    mmi = 1\\n    ssi = ss[i]\\n    for j in range(k-1):\\n        if ssi[j] == ssi[j+1]:\\n            mmi = mmi + 1\\n        else:\\n            mmi = 1\\n        if mmi > mm[i]:\\n            mm[i] = mmi\\n\\nif n == 1:\\n    for i in range(3):\\n        if mm[i] == k:\\n            mm[i] = k - 1\\n        else:\\n            mm[i] = mm[i] + n\\n            if mm[i] > k:\\n                mm[i] = k\\nelse:\\n    for i in range(3):\\n        mm[i] = mm[i] + n\\n        if mm[i] > k:\\n            mm[i] = k\\n        \\nmmm = max(mm)\\nmmn = 0\\n\\nfor i in range(3):\\n    if mmm == mm[i]:\\n        mmn = mmn + 1\\n        \\nif mmn > 1:\\n    print('Draw')\\nelse:\\n    ind = mm.index(mmm)\\n    print(['Kuro','Shiro','Katie'][ind])\", \"n = int(input())\\na = input()\\nb = input()\\nc = input()\\n\\ndef count(s, n):\\n    cnt = {}\\n    for c in s:\\n        cnt[c] = cnt.get(c, 0) + 1\\n    maxc = 0\\n    for c in cnt:\\n        if cnt[c] > maxc: maxc = cnt[c]\\n    if len(s) == maxc and n == 1:\\n        return maxc - 1\\n    else:\\n        return min(maxc+n, len(s))\\n\\nac = count(a, n)\\nbc = count(b, n)\\ncc = count(c, n)\\n\\nif ac > bc and ac > cc:\\n    print(\\\"Kuro\\\")\\nelif bc > ac and bc > cc:\\n    print(\\\"Shiro\\\")\\nelif cc > bc and cc > ac:\\n    print(\\\"Katie\\\")\\nelse:\\n    print(\\\"Draw\\\")\", \"n = int(input())\\ns1 = input().strip()\\ns2 = input().strip()\\ns3 = input().strip()\\nd1 = [0 for _ in range(52)]\\nd2 = [0 for _ in range(52)]\\nd3 = [0 for _ in range(52)]\\n\\nmaxi1 = 0\\nmaxi2 = 0\\nmaxi3 = 0\\n\\nfor i in s1:\\n    if ord(i) <= 90:\\n        j = ord(i) - 65\\n    else:\\n        j = ord(i) - 97 + 26\\n    d1[j] += 1\\nmaxi1 = max(d1)\\nfor i in s2:\\n    if ord(i) <= 90:\\n        j = ord(i) - 65\\n    else:\\n        j = ord(i) - 97 + 26\\n    d2[j] += 1\\nmaxi2 = max(d2)\\nfor i in s3:\\n    if ord(i) <= 90:\\n        j = ord(i) - 65\\n    else:\\n        j = ord(i) - 97 + 26\\n    d3[j] += 1\\nmaxi3 = max(d3)\\n\\nif maxi1 + n <= len(s1):\\n    maxi1 += n\\nelse:\\n    if n == 1:\\n        maxi1 = len(s1) - 1\\n    else:\\n        maxi1 = len(s1)\\n        \\nif maxi2 + n <= len(s1):\\n    maxi2 += n\\nelse:\\n    if n == 1:\\n        maxi2 = len(s1) - 1    \\n    else:\\n        maxi2 = len(s1)\\n                \\nif maxi3 + n <= len(s1):\\n    maxi3 += n\\nelse:    \\n    if n == 1:\\n        maxi3 = len(s1) - 1    \\n    else:\\n        maxi3 = len(s1)\\n        \\nif maxi1 > maxi2 and maxi1 > maxi3:\\n    print('Kuro')\\nelif maxi2 > maxi1 and maxi2 > maxi3:\\n    print('Shiro')\\nelif maxi3 > maxi1 and maxi3 > maxi2:\\n    print('Katie')\\nelse:\\n    print('Draw')    \\n\", \"n = int(input())\\nkuro = input()\\nshiro = input()\\nkatie = input()\\nkurod = {}\\nshirod = {}\\nkatied = {}\\nkurov = 0\\nshirov = 0\\nkatiev = 0\\nfor c in kuro:\\n    if c not in kurod:\\n        kurod[c] = 1\\n    else:\\n        kurod[c] += 1\\n    kurov = max(kurov, kurod[c])\\nfor c in shiro:\\n    if c not in shirod:\\n        shirod[c] = 1\\n    else:\\n        shirod[c] += 1\\n    shirov = max(shirov, shirod[c])\\nfor c in katie:\\n    if c not in katied:\\n        katied[c] = 1\\n    else:\\n        katied[c] += 1\\n    katiev = max(katiev, katied[c])\\nkuroans = 0\\nshiroans = 0\\nkatieans = 0\\nif len(kurod) > 1:\\n    kuroans = min(kurov + n, len(kuro))\\nelif n == 1 and len(kuro) > 1:\\n    kuroans = len(kuro) - 1\\nelse:\\n    kuroans = len(kuro)\\nif len(shirod) > 1:\\n    shiroans = min(shirov + n, len(shiro))\\nelif n == 1 and len(shiro) > 1:\\n    shiroans = len(shiro) - 1\\nelse:\\n    shiroans = len(shiro)\\nif len(katied) > 1:\\n    katieans = min(katiev + n, len(katie))\\nelif n == 1 and len(katie) > 1:\\n    katieans = len(katie) - 1\\nelse:\\n    katieans = len(katie)\\n\\narr = [kuroans, shiroans, katieans]\\narr = sorted(arr)\\nif arr[1] == arr[2]:\\n    print('Draw')\\nelse:\\n    if kuroans > max(shiroans, katieans):\\n        print('Kuro')\\n    elif shiroans > max(kuroans, katieans):\\n        print('Shiro')\\n    else:\\n        print('Katie')\", \"n=int(input())\\nd1={}\\nd2={}\\nd3={}\\ns=input()\\nfor i in s:\\n  try:\\n    d1[i]+=1\\n  except KeyError:\\n    d1[i]=1\\ns=input()\\nfor i in s:\\n  try:\\n    d2[i]+=1\\n  except KeyError:\\n    d2[i]=1\\ns=input()\\nfor i in s:\\n  try:\\n    d3[i]+=1\\n  except KeyError:\\n    d3[i]=1\\nl=len(s)\\nn1=-1\\nfor i in d1:\\n  n1=max(n1,d1[i])\\nn2=-2\\nfor i in d2:\\n  n2=max(n2,d2[i])\\nn3=-3\\nfor i in d3:\\n  n3=max(n3,d3[i])\\n\\nif(n1==l):\\n  if(n==1):\\n    n1-=1\\nelse:\\n  n1=min(l,n1+n)\\nif(n2==l):\\n  if(n==1):\\n    n2-=1\\nelse:\\n  n2=min(l,n2+n)\\nif(n3==l):\\n  if(n==1):\\n    n3-=1\\nelse:\\n  n3=min(l,n3+n)\\n\\n\\nif(n1>n2 and n1>n3):\\n  print(\\\"Kuro\\\")\\nelif(n2>n1 and n2>n3):\\n  print(\\\"Shiro\\\")\\nelif(n3>n1 and n3>n2):\\n  print(\\\"Katie\\\")\\nelse:\\n  print(\\\"Draw\\\")\\n\\n\\n\\n\", \"n=int(input())\\nd1={}\\nd2={}\\nd3={}\\ns=input()\\nfor i in s:\\n  try:\\n    d1[i]+=1\\n  except KeyError:\\n    d1[i]=1\\ns=input()\\nfor i in s:\\n  try:\\n    d2[i]+=1\\n  except KeyError:\\n    d2[i]=1\\ns=input()\\nfor i in s:\\n  try:\\n    d3[i]+=1\\n  except KeyError:\\n    d3[i]=1\\nl=len(s)\\nn1=-1\\nfor i in d1:\\n  n1=max(n1,d1[i])\\nn2=-2\\nfor i in d2:\\n  n2=max(n2,d2[i])\\nn3=-3\\nfor i in d3:\\n  n3=max(n3,d3[i])\\n\\nif(n1==l):\\n  if(n==1):\\n    n1-=1\\nelse:\\n  n1=min(l,n1+n)\\nif(n2==l):\\n  if(n==1):\\n    n2-=1\\nelse:\\n  n2=min(l,n2+n)\\nif(n3==l):\\n  if(n==1):\\n    n3-=1\\nelse:\\n  n3=min(l,n3+n)\\n\\n\\nif(n1>n2 and n1>n3):\\n  print(\\\"Kuro\\\")\\nelif(n2>n1 and n2>n3):\\n  print(\\\"Shiro\\\")\\nelif(n3>n1 and n3>n2):\\n  print(\\\"Katie\\\")\\nelse:\\n  print(\\\"Draw\\\")\\n\\n\\n\\n\", \"def get_score(s,n):\\n    freq=[0 for i in range(100)]\\n    for i in range(len(s)):\\n        freq[ord(s[i])-50]+=1\\n    \\n    if(n==0):\\n        return max(freq)\\n    elif(n==1):\\n        if(max(freq)==len(s)):\\n            return len(s)-1\\n        else:\\n            return max(freq)+1\\n    else:\\n        return min(len(s),max(freq)+n)\\nn=int(input())\\ns1=input()\\ns2=input()\\ns3=input()\\n\\nsc1=get_score(s1,n)\\nsc2=get_score(s2,n)\\nsc3=get_score(s3,n)\\n#print(sc1,sc2,sc3)\\nif(sc1>sc2 and sc1>sc3):\\n    print('Kuro')\\nelif(sc2>sc1 and sc2>sc3):\\n    print('Shiro')\\nelif(sc3>sc1 and sc3>sc2):\\n    print('Katie')\\nelse:\\n    print('Draw')\", \"n = int(input())\\na = input()\\nb = input()\\nc = input()\\nDa = {}\\nDb = {}\\nDc = {}\\nal = \\\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\\\"\\nfor i in al:\\n    Da[i] = 0\\n    Db[i] = 0\\n    Dc[i] = 0\\nfor j in a:\\n    Da[j]+=1\\nfor j in b:\\n    Db[j]+=1\\nfor j in c:\\n    Dc[j]+=1\\npa = 0\\nia = 0\\npb = 0\\nib = 0\\npc = 0\\nic = 0\\nfor x in Da:\\n    if Da[x] % 2 == 0:\\n        pa = max(pa, Da[x])\\n    else:\\n        ia = max(ia, Da[x])\\nfor x in Db:\\n    if Db[x] % 2 == 0:\\n        pb = max(pb, Db[x])\\n    else:\\n        ib = max(ib, Db[x])\\nfor x in Dc:\\n    if Dc[x] % 2 == 0:\\n        pc = max(pc, Dc[x])\\n    else:\\n        ic = max(ic, Dc[x])\\nt = len(a)\\na1 = 0\\na2 = 0\\nif pa + n <= t:\\n    a1 = pa + n\\nelse:\\n    a1 = t\\nif ia + n <= t:\\n    a2 = ia + n\\nelse:\\n    a2 = t\\nb1 = 0\\nb2 = 0\\nif pb + n <= t:\\n    b1 = pb + n\\nelse:\\n    b1 = t\\nif ib + n <= t:\\n    b2 = ib + n\\nelse:\\n    b2 = t\\nc1 = 0\\nc2 = 0\\nif pc + n <= t:\\n    c1 = pc + n\\nelse:\\n    c1 = t\\nif ic + n <= t:\\n    c2 = ic + n\\nelse:\\n    c2 = t\\nA = max(a1, a2)\\nB = max(b1, b2)\\nC = max(c1, c2)\\nif (pa==t or ia==t) and n==1:\\n    A = t-1\\nif (pb==t or ib==t) and n==1:\\n    B = t-1\\nif (pc==t or ic==t) and n==1:\\n    C = t-1\\nif A > B and A > C:\\n    print(\\\"Kuro\\\")\\nelif B > A and B > C:\\n    print(\\\"Shiro\\\")\\nelif C > A and C > B:\\n    print(\\\"Katie\\\")\\nelse:\\n    print(\\\"Draw\\\")\\n\", \"from collections import Counter\\n\\nn = int(input())\\nnames = ['Kuro', 'Shiro', 'Katie']\\ns, sc = [], []\\nfor i in range(3):\\n    s.append(input())\\n    sc.append(Counter(s[i]).most_common(1)[0][1])\\n\\nls = len(s[0])\\nif n >= ls:\\n    print('Draw')\\n    return\\n\\ndef modify(sc, n, ls):\\n    if sc == ls and n == 1:\\n        return sc - 1\\n    else:\\n        return min(sc + n, ls)\\nsc = [modify(scx, n, ls) for scx in sc]\\n\\nm = max(sc)\\nif sc.count(m) > 1:\\n    print('Draw')\\nelse:\\n    print(names[sc.index(m)])\", \"n = int(input())\\n\\nkuro = input()\\nshiro = input()\\nkatie = input()\\n\\nwords = [kuro, shiro, katie]\\n\\nbank = [ [0 for i in range(0, ord(\\\"z\\\")-ord(\\\"A\\\")+1)] for j in range(0, 3) ]\\n\\nfor i in range(0, 3):\\n\\n    for l in words[i]:\\n         bank[i][ord(l)-65] += 1\\n\\n    ##if sum(bank[i]) == max(bank[i]):\\n        ##max(bank)-=1\\n\\n    summ = sum(bank[i])\\n\\n    if summ == max(bank[i]) and n==1:\\n        for j in range(0, 52):\\n            if bank[i][j] == summ:\\n                bank[i][j]-=2\\n                break\\n\\nkuro = min(len(words[0]), max(bank[0])+n)\\nshiro = min(len(words[1]), max(bank[1])+n)\\nkatie = min(len(words[2]), max(bank[2])+n)\\n\\nif kuro > shiro and kuro > katie:\\n    print(\\\"Kuro\\\")\\n\\nelse:\\n    if shiro > kuro and shiro > katie:\\n        print(\\\"Shiro\\\")\\n\\n    else:\\n        if katie > kuro and katie > shiro:\\n            print(\\\"Katie\\\")\\n\\n        else:\\n\\n            if katie == shiro or katie == kuro or shiro == kuro: ## AT LEAST TWO share ... :(\\n                print(\\\"Draw\\\")\\n\", \"n = int(input())\\none = input()\\ntwo = input()\\nthr = input()\\nd1 = {}\\nd2 = {}\\nd3 = {}\\nm1 = 0\\nm2 = 0\\nm3 = 0\\nl = len(one)\\n\\ndef f(q):\\n    if q == l and n == 1:\\n        return l - 1\\n    if q == l:\\n        return l\\n    if q + n <= l:\\n        return q + n\\n    else:\\n        return l\\nfor i in range(len(one)):\\n    try:\\n        d1[one[i]] += 1\\n    except KeyError:\\n        d1[one[i]] = 1\\n    #m1 = max(m1, f(d1[one[i]]))\\nfor i in range(len(one)):\\n    try:\\n        d2[two[i]] += 1\\n    except KeyError:\\n        d2[two[i]] = 1\\n    #m2 = max(m2, f(d2[two[i]]))\\nfor i in range(len(one)):\\n    try:\\n        d3[thr[i]] += 1\\n    except KeyError:\\n        d3[thr[i]] = 1\\n    #m3 = max(m3, f(d3[thr[i]]))\\nfor i in range(l):\\n    m1 = max(m1, f(d1[one[i]]))\\n    m2 = max(m2, f(d2[two[i]]))\\n    m3 = max(m3, f(d3[thr[i]]))\\n# print(d1, d2, d3)\\nl = len(one)\\n#print(m1, m2, m3)\\nif [m1, m2, m3].count(max(m1, m2, m3)) != 1:\\n    print('Draw')\\n    return\\nif max(m1, m2, m3) == m1:\\n    print('Kuro')\\nelif max(m1, m2, m3) == m2:\\n    print('Shiro')\\nelse:\\n    print('Katie')\", \"n = int(input())\\none = input()\\ntwo = input()\\nthr = input()\\nd1 = {}\\nd2 = {}\\nd3 = {}\\nm1 = 0\\nm2 = 0\\nm3 = 0\\nl = len(one)\\n\\ndef f(q):\\n    if q == l and n == 1:\\n        return l - 1 \\n    if q == l:\\n        return l\\n    if q + n <= l:\\n        return q + n\\n    else:\\n        return l\\nfor i in range(len(one)):\\n    try:\\n        d1[one[i]] += 1\\n    except KeyError:\\n        d1[one[i]] = 1\\n    #m1 = max(m1, f(d1[one[i]]))\\nfor i in range(len(one)):\\n    try:\\n        d2[two[i]] += 1\\n    except KeyError:\\n        d2[two[i]] = 1\\n    #m2 = max(m2, f(d2[two[i]]))\\nfor i in range(len(one)):\\n    try:\\n        d3[thr[i]] += 1\\n    except KeyError:\\n        d3[thr[i]] = 1\\n    #m3 = max(m3, f(d3[thr[i]]))\\nfor i in range(l):\\n    m1 = max(m1, f(d1[one[i]]))\\n    m2 = max(m2, f(d2[two[i]]))\\n    m3 = max(m3, f(d3[thr[i]]))\\n# print(d1, d2, d3)\\nl = len(one)\\n#print(m1, m2, m3)\\nif [m1, m2, m3].count(max(m1, m2, m3)) != 1:\\n    print('Draw')\\n    return\\nif max(m1, m2, m3) == m1:\\n    print('Kuro')\\nelif max(m1, m2, m3) == m2:\\n    print('Shiro')\\nelse:\\n    print('Katie')\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3\\nKuroo\\nShiro\\nKatie\\n\",\n    \"7\\ntreasurehunt\\nthreefriends\\nhiCodeforces\\n\",\n    \"1\\nabcabc\\ncbabac\\nababca\\n\",\n    \"15\\nfoPaErcvJ\\nmZaxowpbt\\nmkuOlaHRE\\n\",\n    \"1\\naaaaaaaaaa\\nAAAAAAcAAA\\nbbbbbbzzbb\\n\",\n    \"60\\nddcZYXYbZbcXYcZdYbddaddYaZYZdaZdZZdXaaYdaZZZaXZXXaaZbb\\ndcdXcYbcaXYaXYcacYabYcbZYdacaYbYdXaccYXZZZdYbbYdcZZZbY\\nXaZXbbdcXaadcYdYYcbZdcaXaYZabbXZZYbYbcXbaXabcXbXadbZYZ\\n\",\n    \"9174\\nbzbbbzzzbbzzccczzccczzbzbzcbzbbzccbzcccbccczzbbcbbzbzzzcbczbzbzzbbbczbbcbzzzbcbzczbcczb\\ndbzzzccdcdczzzzzcdczbbzcdzbcdbzzdczbzddcddbdbzzzczcczzbdcbbzccbzzzdzbzddcbzbdzdcczccbdb\\nzdczddzcdddddczdczdczdcdzczddzczdzddczdcdcdzczczzdzccdccczczdzczczdzcdddzddzccddcczczzd\\n\",\n    \"727\\nbaabbabbbababbbbaaaabaabbaabababaaababaaababbbbababbbbbbbbbbaaabaabbbbbbbbaaaabaabbaaabaabbabaa\\nddcdcccccccdccdcdccdddcddcddcddddcdddcdcdccddcdddddccddcccdcdddcdcccdccccccdcdcdccccccdccccccdc\\nfffeefeffeefeeeeffefffeeefffeefffefeefefeeeffefefefefefefffffffeeeeeffffeefeeeeffffeeeeeefeffef\\n\",\n    \"61\\nbzqiqprzfwddqwctcrhnkqcsnbmcmfmrgaljwieajfouvuiunmfbrehxchupmsdpwilwu\\njyxxujvxkwilikqeegzxlyiugflxqqbwbujzedqnlzucdnuipacatdhcozuvgktwvirhs\\ntqiahohijwfcetyyjlkfhfvkhdgllxmhyyhhtlhltcdspusyhwpwqzyagtsbaswaobwub\\n\",\n    \"30\\njAjcdwkvcTYSYBBLniJIIIiubKWnqeDtUiaXSIPfhDTOrCWBQetm\\nPQPOTgqfBWzQvPNeEaUaPQGdUgldmOZsBtsIqZGGyXozntMpOsyY\\nNPfvGxMqIULNWOmUrHJfsqORUHkzKQfecXsTzgFCmUtFmIBudCJr\\n\",\n    \"3\\nabcabcabcabcdddabc\\nzxytzytxxtytxyzxyt\\nfgffghfghffgghghhh\\n\",\n    \"3\\naaaaa\\naaaaa\\naaaab\\n\",\n    \"3\\naaaaaaa\\naaaabcd\\nabcdefg\\n\",\n    \"3\\naaaaaaa\\naaabcde\\nabcdefg\\n\",\n    \"3\\naaaaaaa\\naaaabbb\\nabcdefg\\n\",\n    \"3\\naaa\\nbbb\\nabc\\n\",\n    \"3\\naaaaa\\nabcde\\nabcde\\n\",\n    \"3\\naaaaa\\nqwert\\nlkjhg\\n\",\n    \"3\\naaaaa\\nbbbbb\\naabcd\\n\",\n    \"3\\nabcde\\nfghij\\nkkkkk\\n\",\n    \"4\\naaaabcd\\naaaabcd\\naaaaaaa\\n\",\n    \"3\\naaaabb\\naabcde\\nabcdef\\n\",\n    \"2\\naaab\\nabcd\\naaaa\\n\",\n    \"3\\naaaaaa\\naaaaaa\\nabcdef\\n\",\n    \"1\\nAAAAA\\nBBBBB\\nABCDE\\n\",\n    \"1\\nabcde\\naaaaa\\naaaaa\\n\",\n    \"4\\naaabbb\\nabfcde\\nabfcde\\n\",\n    \"0\\naaa\\naab\\nccd\\n\",\n    \"3\\naaaaa\\naaaaa\\naabbb\\n\",\n    \"3\\nxxxxxx\\nxxxooo\\nabcdef\\n\",\n    \"2\\noooo\\naaac\\nabcd\\n\",\n    \"1\\naaaaaaa\\naaabcde\\nabcdefg\\n\",\n    \"3\\nooooo\\naaabb\\nabcde\\n\",\n    \"3\\naaaaa\\nqwert\\nqwery\\n\",\n    \"2\\naaaaaa\\nbbbbbb\\naaaaab\\n\",\n    \"3\\naabb\\naabb\\naabc\\n\",\n    \"2\\naaa\\naab\\naab\\n\",\n    \"3\\nbbbbcc\\nbbbbbb\\nsadfgh\\n\",\n    \"3\\naaaaaacc\\nxxxxkkkk\\nxxxxkkkk\\n\",\n    \"2\\naaaac\\nbbbbc\\nccccc\\n\",\n    \"3\\naaaaaaaaa\\naaabbbbbb\\nabcdewert\\n\",\n    \"3\\naaabc\\naaaab\\nabcde\\n\",\n    \"3\\naaaaaaaa\\naaaaaaab\\naaaabbbb\\n\",\n    \"2\\nabcdefg\\nabccccc\\nacccccc\\n\",\n    \"3\\naaaaa\\naabcd\\nabcde\\n\",\n    \"4\\naaabbb\\nabcdef\\nabcdef\\n\",\n    \"4\\naaabbb\\naabdef\\nabcdef\\n\",\n    \"3\\nabba\\nbbbb\\naaaa\\n\",\n    \"3\\naaaaa\\nbbaaa\\nabcde\\n\",\n    \"2\\naaa\\naaa\\nabc\\n\",\n    \"3\\naaaaa\\nabcda\\nabcde\\n\",\n    \"3\\naaaaa\\nabcde\\nbcdef\\n\",\n    \"3\\naaabb\\naabbc\\nqwert\\n\",\n    \"3\\naaaaaa\\naabbcc\\naabbcc\\n\",\n    \"3\\nAAAAAA\\nAAAAAB\\nABCDEF\\n\",\n    \"3\\nabc\\naac\\nbbb\\n\",\n    \"2\\naaaab\\naabbc\\naabbc\\n\",\n    \"2\\naaaaaab\\naaaaabb\\nabcdefg\\n\",\n    \"3\\naaaaaaaaaaa\\nbbbbbbbbaaa\\nqwertyuiasd\\n\",\n    \"3\\naaaa\\nbbbb\\naabb\\n\",\n    \"3\\naaaabb\\naaabcd\\nabcdef\\n\",\n    \"3\\naaa\\nabc\\nbbb\\n\",\n    \"1\\naa\\nab\\nbb\\n\",\n    \"1\\naacb\\nabcd\\naaaa\\n\",\n    \"3\\naaaabb\\naaabbb\\nabcdef\\n\",\n    \"3\\naaaa\\naaaa\\nabcd\\n\",\n    \"2\\nabcd\\nabcd\\naaad\\n\",\n    \"3\\naaa\\nbbb\\naab\\n\",\n    \"3\\naaaaaa\\naaaaab\\naaaaaa\\n\",\n    \"2\\naaab\\nabcd\\nabcd\\n\",\n    \"3\\nooooo\\nShiro\\nKatie\\n\",\n    \"3\\naaabb\\naabcd\\nabcde\\n\",\n    \"4\\nabcd\\nabcd\\naaaa\\n\",\n    \"4\\naaa\\nbbb\\naab\\n\",\n    \"2\\nxxxx\\nyyyx\\nabcd\\n\",\n    \"3\\nAAAAA\\nAAAAB\\nABCDE\\n\",\n    \"3\\naaaacdc\\naaaaabc\\naaaaabc\\n\",\n    \"3\\naaaaaa\\naabcde\\naabcde\\n\",\n    \"3\\naaabb\\naaabb\\naaaaa\\n\",\n    \"5\\nabbbbb\\ncbbbbb\\nabcdef\\n\",\n    \"3\\naaaaaaaaa\\naaaaabbbb\\naaaaabbbb\\n\",\n    \"4\\naaaaaab\\naaabbbb\\naaabbbb\\n\",\n    \"3\\naaaabb\\naaaabb\\naaabbb\\n\",\n    \"2\\naaaabb\\naaaaab\\nabcdef\\n\",\n    \"2\\naaaaa\\naaaae\\nabcde\\n\",\n    \"3\\naaaaaa\\nbbbcde\\nabcdef\\n\",\n    \"4\\naaaabbb\\naabcdef\\naabcdef\\n\",\n    \"2\\naaaaa\\naaaab\\nabcde\\n\",\n    \"3\\naabbbbb\\naaabbbb\\nabcdefg\\n\",\n    \"3\\nabcde\\naabcd\\naaaaa\\n\",\n    \"5\\naaabbcc\\nabcdefg\\nabcdefg\\n\",\n    \"3\\naabbb\\nabcde\\nabcde\\n\",\n    \"0\\nbbb\\nabb\\nqer\\n\",\n    \"5\\naabbbbb\\naaaaaaa\\nabcdefg\\n\",\n    \"2\\naaaab\\naaaab\\naaabb\\n\",\n    \"2\\naaaaaab\\naaaabbb\\naaaaccc\\n\",\n    \"3\\naaaaaaaaaaaa\\naaaaaaaaaaab\\naaaaaabbbbbb\\n\",\n    \"3\\naaabb\\nabcde\\naaaaa\\n\",\n    \"3\\naaaaaac\\naaaaebc\\naaaaaac\\n\",\n    \"3\\naaaaaa\\naaabbb\\nqwerty\\n\",\n    \"3\\ncccca\\nabcde\\nabcde\\n\",\n    \"100005\\nAA\\nBC\\nCC\\n\",\n    \"3\\naaaa\\nbbbb\\nccca\\n\",\n    \"3\\naaaaa\\nbcdef\\nbcdef\\n\",\n    \"2\\naaab\\naabb\\nqwer\\n\",\n    \"3\\nabcddd\\nabcdef\\nbbaaaa\\n\",\n    \"2\\naaaa\\naaaa\\naabc\\n\",\n    \"3\\naaaa\\naaaa\\naaab\\n\",\n    \"3\\nabcddd\\nabcdef\\naaaaaa\\n\",\n    \"1\\naaaa\\nabcd\\naaab\\n\"\n  ],\n  \"outputs\": [\n    \"Kuro\\n\",\n    \"Shiro\\n\",\n    \"Katie\\n\",\n    \"Draw\\n\",\n    \"Shiro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Katie\\n\",\n    \"Draw\\n\",\n    \"Katie\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Katie\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Shiro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Katie\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Kuro\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Kuro\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Draw\\n\",\n    \"Katie\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/979/B",
  "starter_code": ""
}