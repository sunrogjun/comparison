{
  "task_id": "APPS/469",
  "problem_id": 469,
  "prompt": "A girl named Xenia has a cupboard that looks like an arc from ahead. The arc is made of a semicircle with radius r (the cupboard's top) and two walls of height h (the cupboard's sides). The cupboard's depth is r, that is, it looks like a rectangle with base r and height h + r from the sides. The figure below shows what the cupboard looks like (the front view is on the left, the side view is on the right). [Image] \n\nXenia got lots of balloons for her birthday. The girl hates the mess, so she wants to store the balloons in the cupboard. Luckily, each balloon is a sphere with radius $\\frac{r}{2}$. Help Xenia calculate the maximum number of balloons she can put in her cupboard. \n\nYou can say that a balloon is in the cupboard if you can't see any part of the balloon on the left or right view. The balloons in the cupboard can touch each other. It is not allowed to squeeze the balloons or deform them in any way. You can assume that the cupboard's walls are negligibly thin.\n\n\n-----Input-----\n\nThe single line contains two integers r, h (1 \u2264 r, h \u2264 10^7).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum number of balloons Xenia can put in the cupboard.\n\n\n-----Examples-----\nInput\n1 1\n\nOutput\n3\n\nInput\n1 2\n\nOutput\n5\n\nInput\n2 1\n\nOutput\n2",
  "solutions": "[\"from math import *\\n\\nr, h = list(map(int, input().split()))\\nd = h % r\\n\\nif d * 2 < r:\\n    print(h // r * 2 + 1)\\nelif sqrt(3) * (r / 2) + r - 1e-6 <= d + r:\\n    print(h // r * 2 + 3)\\nelse:\\n    print(h // r * 2 + 2)\\n\", \"from math import sqrt\\n\\nr,h = list(map (int, input().split()))\\ncount = h // r * 2\\nh -= h // r * r\\nif h >= sqrt(3) / 2 * r:\\n  count += 3\\nelif h >= r / 2:\\n  count += 2\\nelse:\\n  count += 1\\nprint (count)\\n\", \"r, h = map(int, input().split())\\nh *= 2\\nif h < r:\\n    print(1)\\n    return\\nr *= 2\\nans = (h + r // 2) // r * 2\\nh -= r * (ans // 2 - 1)\\nif (h ** 2) * 4 >= (r ** 2) * 3:\\n    ans += 1\\nprint(ans)\", \"\\n\\ndef __starting_point():\\n    inp = input()\\n    arr = inp.split(\\\" \\\")\\n    r = int(arr[0])\\n    h = int(arr[1])\\n    ans = 2*(h//r)\\n    d = h%r\\n    if d*2>=r:\\n        ans+=2\\n        if 4*d*d >= 3*r*r:\\n            ans+=1\\n\\n    else:\\n        ans+=1\\n    print(ans)\\n    \\n\\n__starting_point()\", \"3\\n\\nfrom math import sqrt\\n\\nr, h = tuple(map(int, input().split()))\\nans = (2 * h + r) // (2 * r)\\nprint(2 * ans + (ans * r + sqrt(3.0) * r / 2 <= h + r))\\n\", \"3\\n\\nr, h = tuple(map(int, input().split()))\\nans = (2 * h + r) // (2 * r)\\nprint(2 * ans + (3 * r**2 <= 4 * (h + r - ans * r)**2))\\n\", \"r, h = list(map(int, input().split()))\\na = 1 + 2 * h // r\\nif h % r >=3 ** 0.5 * r / 2:\\n    a += 1\\nprint(a)\\n\", \"from math import sqrt\\nr, h = [int(x) for x in input().split()]\\nr <<= 1\\nh <<= 1\\n\\nans = h // r * 2\\nh %= r\\nif h >= (r // 2):\\n  ans += 2\\n  if 3 * r * r <= 4 * h * h:\\n    ans += 1\\nelse:\\n  ans += 1\\nprint(ans)\\n\", \"r, h = map(int, input().split())\\n\\nhalf_count = (2 * h + r) // (2 * r)\\n\\nres = 2 * half_count\\n\\nx1 = 0\\ny1 = h + r / 2\\n\\nx2 = r / 2\\ny2 = (r * (2 * half_count - 1)) / 2\\n\\nif (x1 - x2) ** 2 + (y1 - y2) ** 2 >= r * r:\\n  res += 1\\n  \\nprint(res)\", \"r, h = map(int, input().split())\\nd, p = (3 ** 0.5) / 2 - 1, h / r\\nprint(max(1 + 2 * int(p - d), 2 * int(p + 0.5)))\", \"r, h = map(int, input().split())\\na = 2 * (h // r)\\nh = h % r\\nprint (a + 1 + (2*h>=r) + (4*h*h >= 3*r*r))\", \"r,h = map(int,input().split())\\ns = h%r\\na =  (h//r)*2\\nif s*s >= 3*r*r/4:\\n\\ta += 3\\nelif 2*s >= r:\\n\\ta += 2\\nelse:\\n\\ta += 1\\nprint(a)\", \"import math\\n\\nr, h = [int(r) for r in input().split(' ')]\\nprint(math.floor((h / r * 2 + 1) + math.floor((h % r) / r + 0.15)))\\n# print((h % r) / r)\\n\", \"r, h = list(map(int, input().split()))\\n\\na = 2 * (h // r)\\n\\nh = h % r\\n\\nprint(a + 1 + (2*h>=r) + (4*h*h >= 3*r*r))\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"import math\\nr, h = map(int, input().split())\\na = h // r * 2\\nif 2 * (h % r) >= math.sqrt(3) * r:\\n  a += 3\\nelif 2 * (h % r) >= r:\\n  a += 2\\nelse:\\n  a += 1\\nprint(a)\", \"from math import sqrt\\nr, h = list(map(int, input().split()))\\nnum = h//r\\nrem = h % r\\nans = num*2\\nif rem*2 < r:\\n    ans += 1\\nelif rem*2 >= sqrt(3) * r:\\n    ans += 3\\nelse:\\n    ans += 2\\nprint(ans)\\n\", \"r, h = map(int, input().split())\\nif (h%r)/r >= 3**0.5/2: print(2*(h//r)+3)\\nelif 0.5 <= (h%r)/r : print(2*(h//r)+2)\\nelse: print(2*(h//r)+1)\", \"#!/bin/python\\nfrom math import sqrt\\n\\nr, h = (int(x) for x in input().split(' '))\\n\\n# You can always put two in each \\\"row\\\" of the rectangle and one in the dome\\nin_box = 2 * h // r + 1\\n\\n# You can add an additional one, like so:\\n#  O\\n# O\\n#\\n# since they all have radius r/2, you can get the height needed to add an additional one through Pythagorean theorem\\nremainder = h % r + r\\nheight = r * sqrt(3) / 2 + r\\n\\nif remainder < height:\\n\\tprint(in_box)\\nelse:\\n\\tprint(in_box + 1)\", \"r, h = map(int, input().split())\\nk = (h // r) * 2\\nd = h % r\\nif d >= 2 * r / 3 + 1:\\n    k += 3\\nelif d >= r / 2:\\n    k += 2\\nelse:\\n    k += 1\\nprint(k)\", \"r,h=list(map(int,input().split()))\\nans=(h//r)*2\\nh%=r \\nif 2*h<r:\\n    ans+=1 \\nelif 2*h<1.732*r:\\n    ans+=2 \\nelse:\\n    ans+=3 \\nprint(ans)    \\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"1 1\\n\",\n    \"1 2\\n\",\n    \"2 1\\n\",\n    \"2 2\\n\",\n    \"2 3\\n\",\n    \"4 1\\n\",\n    \"5 1\\n\",\n    \"5 2\\n\",\n    \"5 3\\n\",\n    \"5 4\\n\",\n    \"5 5\\n\",\n    \"5 6\\n\",\n    \"5 9\\n\",\n    \"5 10\\n\",\n    \"5 11\\n\",\n    \"674098 1358794\\n\",\n    \"3983458 7761504\\n\",\n    \"4841874 9131511\\n\",\n    \"667586 5534221\\n\",\n    \"1526002 6904227\\n\",\n    \"4835362 5823289\\n\",\n    \"5693778 7001807\\n\",\n    \"6552194 8371814\\n\",\n    \"2377906 4774524\\n\",\n    \"4365659 4738707\\n\",\n    \"98 1358794\\n\",\n    \"458 7761504\\n\",\n    \"874 9131511\\n\",\n    \"586 5534221\\n\",\n    \"2 6904227\\n\",\n    \"1 10000000\\n\",\n    \"2 10000000\\n\",\n    \"3 10000000\\n\",\n    \"4 10000000\\n\",\n    \"3 9999999\\n\",\n    \"10000000 866254\\n\",\n    \"10000000 8660255\\n\",\n    \"100 50\\n\",\n    \"100 49\\n\",\n    \"100 199\\n\",\n    \"8 7\\n\",\n    \"10000 9999\\n\",\n    \"1000000 1999999\\n\",\n    \"2000000 1999999\\n\",\n    \"18 16\\n\",\n    \"100 87\\n\",\n    \"10 19\\n\",\n    \"10000 38661\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"17\\n\",\n    \"10\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"27731\\n\",\n    \"33894\\n\",\n    \"20897\\n\",\n    \"18889\\n\",\n    \"6904228\\n\",\n    \"20000001\\n\",\n    \"10000001\\n\",\n    \"6666667\\n\",\n    \"5000001\\n\",\n    \"6666667\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"9\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/342/C",
  "starter_code": ""
}