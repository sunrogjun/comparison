{
  "task_id": "APPS/135",
  "problem_id": 135,
  "prompt": "Imp is watching a documentary about cave painting. [Image] \n\nSome numbers, carved in chaotic order, immediately attracted his attention. Imp rapidly proposed a guess that they are the remainders of division of a number n by all integers i from 1 to k. Unfortunately, there are too many integers to analyze for Imp.\n\nImp wants you to check whether all these remainders are distinct. Formally, he wants to check, if all $n \\text{mod} i$, 1 \u2264 i \u2264 k, are distinct, i.\u00a0e. there is no such pair (i, j) that:   1 \u2264 i < j \u2264 k,  $n \\operatorname{mod} i = n \\operatorname{mod} j$, where $x \\operatorname{mod} y$ is the remainder of division x by y. \n\n\n-----Input-----\n\nThe only line contains two integers n, k (1 \u2264 n, k \u2264 10^18).\n\n\n-----Output-----\n\nPrint \"Yes\", if all the remainders are distinct, and \"No\" otherwise.\n\nYou can print each letter in arbitrary case (lower or upper).\n\n\n-----Examples-----\nInput\n4 4\n\nOutput\nNo\n\nInput\n5 3\n\nOutput\nYes\n\n\n\n-----Note-----\n\nIn the first sample remainders modulo 1 and 4 coincide.",
  "solutions": "[\"def main():\\n\\tn, k = map(int, input().split())\\n\\tfor i in range(1, k + 1):\\n\\t\\tif (n % i != (i - 1)):\\n\\t\\t\\tprint(\\\"No\\\")\\n\\t\\t\\treturn\\n\\tprint(\\\"Yes\\\")\\n\\nmain()\", \"#! /usr/bin/env python3\\n\\nimport math\\nimport sys\\n\\n\\ndef lcm(u, v):\\n    return u * v // math.gcd(u, v)\\n\\n\\ndef main():\\n    n, k = list(map(int, input().split()))\\n    m = 1\\n    for i in range(1, k + 1):\\n        m = lcm(m, i)\\n        if m - 1 > n:\\n            print('No')\\n            return\\n    if (n + 1) % m == 0:\\n        print('Yes')\\n    else:\\n        print('No')\\n\\n\\ndef __starting_point():\\n    main()\\n\\n\\n__starting_point()\", \"n, k = input().split()\\nn, k = int(n), int(k)\\n\\nans = True\\n\\nn += 1\\nfor i in range(1, min(100, k+1)):\\n    if (n % i) != 0:\\n        ans = False\\n\\nif ans:\\n    print('Yes')\\nelse:\\n    print('No')\\n\", \"n, k = input().split()\\nn = int(n)\\nk = int(k)\\n\\nif n < 0 or k < 0:\\n    pass\\nelse:\\n    rem = []\\n    found = False\\n    for i in range(1, k+1):\\n        check = n % i\\n        if check in rem:\\n            print(\\\"No\\\\n\\\")\\n            found = True\\n            break\\n        rem.append(check)\\n    if not found:\\n        print(\\\"Yes\\\\n\\\")\\n\", \"n, k = map(int, input().split())\\nmas = []\\nfor i in range(1, k + 1):\\n    q = n%i\\n    if q in mas:\\n        print(\\\"No\\\")\\n        return\\n    else:\\n        mas.append(q)\\nprint(\\\"Yes\\\")\", \"n, k = map(int, input().split())\\n\\ns = set()\\n\\nfor i in range(1, k + 1):\\n\\tcur = n % i\\n\\tif cur in s:\\n\\t\\tprint('No')\\n\\t\\treturn\\n\\ts.add(cur)\\n\\nprint('Yes')\", \"import sys\\n\\n#f = open('input', 'r')\\nf = sys.stdin\\n\\nn,k = list(map(int, f.readline().split()))\\n\\nans = 'Yes'\\nfor tk in range(1, k+1):\\n  if len(set(n%(i+1) for i in range(tk))) != tk:\\n    ans = 'No'\\n    break\\n\\nprint(ans)\\n\", \"def gcd(a, b):\\n    if b == 0:\\n        return a\\n    return gcd(b, a % b)\\n\\ndef lcm(a, b):\\n    return a // gcd(a, b) * b;\\n\\nn, k = list(map(int, input().split()))\\ninf = 10 ** 18\\nx = 1\\n\\nfor i in range(1, k + 1):\\n    x = lcm(x, i)\\n    if x > inf:\\n        break\\n\\nif x > inf or n % x != x - 1:\\n    print(\\\"No\\\")\\nelse:\\n    print(\\\"Yes\\\")\\n\\n\", \"def remainderSet(n, k):\\n    rem=set()\\n    for i in range(1,k+1):\\n        r=n%i\\n        if r in rem:\\n            return False\\n        else:\\n            rem.add(r)\\n    return True\\n\\ndef test():\\n    print(remainderSet(4,4))\\n    print(remainderSet(5,3))\\n\\ndef nia():\\n    s=input()\\n    while len(s)==0:\\n        s=input()\\n    s=s.split()\\n    iVal=[];\\n    for i in range (len(s)):\\n        iVal.append(int(s[i]))\\n    return iVal\\n\\ndef solve():\\n    arr=nia()\\n    if remainderSet(arr[0], arr[1]):\\n        print(\\\"Yes\\\")\\n    else:\\n        print(\\\"No\\\")\\n        \\nsolve()\\n\", \"s=input()\\ns=s.split()\\nn=int(s[0])\\nk=int(s[1])\\nb=1\\na=[]\\nfor i in range(1,k+1):\\n    c=n%i\\n    a.append(c)\\n    if c in a[:-1]:\\n        print('No')\\n        b=0\\n        break\\nif b==1:\\n    print('Yes')\\n\", \"n,k=list(map(int,input().split()))\\nl=[]\\nc=0\\nfor i in range(1,k+1):\\n    l.append(n%i)\\n    p=set(l)\\n    if len(p)!=len(l):\\n        print (\\\"No\\\")\\n        c=1\\n        break\\nif c==0:\\n    print (\\\"Yes\\\")\\n\\n\", \"n, k = [int(i) for i in input().split()]\\n\\ns = set()\\n\\nfor i in range(1, k+1):\\n    if n % i in s:\\n        print(\\\"No\\\")\\n        break\\n    s.add(n % i)\\nelse:\\n    print(\\\"Yes\\\")\", \"n,k=list(map(int,input().split()))\\na=set()\\nfor i in range(1,k+1):\\n    if n%i in a:\\n        print('No')\\n        return\\n    else:\\n        a.add(n%i)\\nprint('Yes')\\n\", \"n, k = list(map(int, input().split()))\\n\\nans = \\\"Yes\\\"\\nfor i in range(2, k + 1):\\n    if n % i != i - 1:\\n        ans = \\\"No\\\"\\n        break\\n    elif 1e6 < i:\\n        break\\nprint(ans)\\n\", \"n,k = list(map(int,input().split()))\\n\\nfor i in range(1,min(k+1,10000000)):\\n    if n%i != i-1:\\n        print('No')\\n        break\\nelse:\\n    print('Yes')\\n\", \"\\ndef __starting_point():\\n    n,k = input().strip().split()\\n    n=int(n) ; k=int(k)\\n    a = {}\\n    for i in range(1,k+1):\\n        if n%i in a:\\n            print('No')\\n            return\\n        else:\\n            a[n%i] = 1\\n    print('Yes')\\n__starting_point()\", \"n, k = list(map(int, input().split()))\\nc = 1\\nz = 1\\nok = 1\\n\\nfor i in range(1, k + 1):\\n    c = z\\n    while z % i != 0:\\n        z += c\\n    if z > n + 10:\\n        ok = 0\\n        break\\nif (n + 1) % z == 0 and ok:\\n    print('Yes')\\nelse:\\n    print('No')\\n\", \"from fractions import gcd\\ndef lcm(a, b):\\n    return (a // gcd(a, b)) * b\\n    \\nn, k = map(int, input().split())\\nif k == 1:\\n    print(\\\"Yes\\\")\\n    return\\nn1 = 1\\nfor i in range(1, k + 1):\\n    n1 = lcm(n1, i)\\n    if n % n1 != n1 - 1:\\n        print(\\\"No\\\")\\n        return\\nif n % n1 == n1 - 1:\\n    print(\\\"Yes\\\")\\n    return\\nprint(\\\"No\\\")\", \"n, k = map(int, input().strip().split())\\n\\nif k == 1:\\n    print('Yes')\\nelse:\\n    # k! - 1 must divide into n\\n    '''\\n        prod = 1\\n    count = 2\\n    while prod < n:\\n        prod *= count\\n        if n % (prod - 1) == 0 and count >= k:\\n            #res = n // (prod - 1)\\n            # note: existance means k must be really small\\n            rems = [n % i for i in range(1, k + 1)]\\n            #print(rems)\\n            if len(set(rems)) == len(rems):\\n                print('Yes')\\n                break\\n        count += 1\\n    else:\\n        print('No')\\n    '''\\n    if k > 50000:\\n        print('No')\\n    else:\\n        rems = [n % i for i in range(1, k + 1)]\\n        #print(rems)\\n        print('Yes' if len(set(rems)) == len(rems) else 'No')\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4 4\\n\",\n    \"5 3\\n\",\n    \"1 1\\n\",\n    \"744 18\\n\",\n    \"47879 10\\n\",\n    \"1000000000000000000 1000000000000000000\\n\",\n    \"657180569218773599 42\\n\",\n    \"442762254977842799 30\\n\",\n    \"474158606260730555 1\\n\",\n    \"807873101233533988 39\\n\",\n    \"423 7\\n\",\n    \"264306177888923090 5\\n\",\n    \"998857801526481788 87\\n\",\n    \"999684044704565212 28\\n\",\n    \"319575605003866172 71\\n\",\n    \"755804560577415016 17\\n\",\n    \"72712630136142067 356370939\\n\",\n    \"807264258068668062 33080422\\n\",\n    \"808090496951784190 311661970\\n\",\n    \"808916740129867614 180178111\\n\",\n    \"1 2\\n\",\n    \"2 1\\n\",\n    \"57334064998850639 19\\n\",\n    \"144353716412182199 11\\n\",\n    \"411002215096001759 11\\n\",\n    \"347116374613371527 3\\n\",\n    \"518264351335130399 37\\n\",\n    \"192435891235905239 11\\n\",\n    \"491802505049361659 7\\n\",\n    \"310113769227703889 3\\n\",\n    \"876240758958364799 41\\n\",\n    \"173284263472319999 33\\n\",\n    \"334366426725130799 29\\n\",\n    \"415543470272330399 26\\n\",\n    \"631689521541558479 22\\n\",\n    \"581859366558790319 14\\n\",\n    \"224113913709159599 10\\n\",\n    \"740368848764104559 21\\n\",\n    \"895803074828822159 17\\n\",\n    \"400349974997012039 13\\n\",\n    \"205439024252247599 5\\n\",\n    \"197688463911338399 39\\n\",\n    \"283175367224349599 39\\n\",\n    \"893208176423362799 31\\n\",\n    \"440681012669897999 27\\n\",\n    \"947403664618451039 19\\n\",\n    \"232435556779345919 19\\n\",\n    \"504428493840551279 23\\n\",\n    \"30019549241681999 20\\n\",\n    \"648000813924303839 16\\n\",\n    \"763169499725761451 488954176053755860\\n\",\n    \"199398459594277592 452260924647536414\\n\",\n    \"635627415167826436 192195636386541160\\n\",\n    \"71856370741375281 155502380685354417\\n\",\n    \"731457367464667229 118809129279134971\\n\",\n    \"167686318743248777 858743836723172421\\n\",\n    \"603915274316797622 822050585316952974\\n\",\n    \"647896534275160623 65689274138731296\\n\",\n    \"648722777453244047 501918229712280140\\n\",\n    \"649549020631327471 41923378183538525\\n\",\n    \"650375259514443599 597748177714153637\\n\",\n    \"651201506987494319 33977137582669778\\n\",\n    \"652027745870610447 470206093156218622\\n\",\n    \"652853989048693871 906435048729767466\\n\",\n    \"653680227931809999 342664004303316311\\n\",\n    \"654506475404860719 375019787446735639\\n\",\n    \"655332714287976847 438493956600157103\\n\",\n    \"166512305365727033 900267947832156186\\n\",\n    \"167338548543810457 336496907700672326\\n\",\n    \"168164787426926585 772725863274221171\\n\",\n    \"523 3\\n\",\n    \"39211 6\\n\",\n    \"22151 9\\n\",\n    \"1 3\\n\",\n    \"47 5\\n\",\n    \"999999998999999999 1000000000\\n\",\n    \"11 6\\n\",\n    \"7 4\\n\",\n    \"1 10\\n\",\n    \"9 5\\n\",\n    \"2519 20\\n\",\n    \"700001 3\\n\",\n    \"13 7\\n\",\n    \"999999 10000\\n\",\n    \"1 4\\n\",\n    \"232792559 30\\n\",\n    \"1 5\\n\",\n    \"5 4\\n\",\n    \"5 8\\n\",\n    \"55 4\\n\"\n  ],\n  \"outputs\": [\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/922/C",
  "starter_code": ""
}