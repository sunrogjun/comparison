{
  "task_id": "APPS/434",
  "problem_id": 434,
  "prompt": "Polycarpus develops an interesting theory about the interrelation of arithmetic progressions with just everything in the world. His current idea is that the population of the capital of Berland changes over time like an arithmetic progression. Well, or like multiple arithmetic progressions.\n\nPolycarpus believes that if he writes out the population of the capital for several consecutive years in the sequence a_1, a_2, ..., a_{n}, then it is convenient to consider the array as several arithmetic progressions, written one after the other. For example, sequence (8, 6, 4, 2, 1, 4, 7, 10, 2) can be considered as a sequence of three arithmetic progressions (8, 6, 4, 2), (1, 4, 7, 10) and (2), which are written one after another.\n\nUnfortunately, Polycarpus may not have all the data for the n consecutive years (a census of the population doesn't occur every year, after all). For this reason, some values of a_{i} \u200b\u200bmay be unknown. Such values are represented by number -1.\n\nFor a given sequence a = (a_1, a_2, ..., a_{n}), which consists of positive integers and values \u200b\u200b-1, find the minimum number of arithmetic progressions Polycarpus needs to get a. To get a, the progressions need to be written down one after the other. Values \u200b\u200b-1 may correspond to an arbitrary positive integer and the values a_{i} > 0 must be equal to the corresponding elements of sought consecutive record of the progressions.\n\nLet us remind you that a finite sequence c is called an arithmetic progression if the difference c_{i} + 1 - c_{i} of any two consecutive elements in it is constant. By definition, any sequence of length 1 is an arithmetic progression.\n\n\n-----Input-----\n\nThe first line of the input contains integer n (1 \u2264 n \u2264 2\u00b710^5) \u2014 the number of elements in the sequence. The second line contains integer values a_1, a_2, ..., a_{n} separated by a space (1 \u2264 a_{i} \u2264 10^9 or a_{i} =  - 1).\n\n\n-----Output-----\n\nPrint the minimum number of arithmetic progressions that you need to write one after another to get sequence a. The positions marked as -1 in a can be represented by any positive integers.\n\n\n-----Examples-----\nInput\n9\n8 6 4 2 1 4 7 10 2\n\nOutput\n3\n\nInput\n9\n-1 6 -1 2 -1 4 7 -1 2\n\nOutput\n3\n\nInput\n5\n-1 -1 -1 -1 -1\n\nOutput\n1\n\nInput\n7\n-1 -1 4 5 1 2 3\n\nOutput\n2",
  "solutions": "[\"import sys\\nimport math\\n\\nn = int(sys.stdin.readline())\\nif n <= 2:\\n  print(1)\\n  return\\n\\na = [int(s) for s in sys.stdin.readline().split()]\\n\\nst = -1 # index of first positive number in current subset of a\\ned = -1 # index last positive number in current subset of a \\n        # differation is (a[ed] - a[st])/(ed - st)\\nleading_zeros = 0 # -1 before a[st]\\nseg_count = 1\\n\\nfor (i, v) in enumerate(a):\\n  if v == -1:\\n    if st == -1:\\n      leading_zeros += 1\\n    else:\\n      if ed != -1:\\n        # check if v should be a non-positive number\\n        if a[ed] + (i-ed) * (a[ed] - a[st])/(ed-st) <= 0:\\n          st = -1\\n          ed = -1\\n          leading_zeros = 1\\n          seg_count += 1\\n        else:\\n          pass\\n      else:\\n        pass\\n  else:\\n    if st == -1:\\n      st = i # find first positive number\\n    else:\\n      if ed == -1:\\n        ed = i\\n        #print(i)\\n        if (v - a[st]) % (i-st) != 0 or a[st] - (v-a[st])/(i-st) * leading_zeros <= 0:\\n          # a[st..i] can't be an arithmetic progression\\n          st = i\\n          ed = -1\\n          seg_count += 1\\n          leading_zeros = 0\\n        else:\\n          ed = i\\n      else:\\n        if (v-a[ed])%(i-ed) != 0 or (v-a[ed]) * (ed - st) != (a[ed] - a[st]) * (i-ed):\\n          st = i\\n          ed = -1\\n          seg_count += 1\\n          leading_zeros = 0\\n        else:\\n          ed = i #leave ed the first positive number after a[st] is also ok\\n  #print( \\\"[\\\" +str(st) + \\\" \\\" + str(ed) + \\\"] \\\" + str(seg_count) + \\\" \\\" + str(leading_zeros) )\\n\\nprint(seg_count)\", \"n = int(input())\\na = list(map(int, input().split()))\\ni = 0\\nans = 0\\nwhile i < n:\\n    ans += 1\\n    i1 = i\\n    while i1 < n and a[i1] == -1:\\n        i1 += 1\\n    if i1 == n:\\n        break\\n    i2 = i1 + 1\\n    while i2 < n and a[i2] == -1:\\n        i2 += 1\\n    if i2 == n:\\n        break\\n    dist = i2 - i1\\n    step = (a[i2] - a[i1]) // dist\\n    if (a[i2] - a[i1]) % dist != 0 or (step > 0 and a[i1] - (i1 - i) * step <= 0):\\n        i = i2\\n        continue\\n    i3 = i2 + 1\\n    while i3 < n:\\n        nxt = a[i2] + step * (i3 - i2)\\n        if nxt <= 0 or (a[i3] != -1 and a[i3] != nxt):\\n            break\\n        i3 += 1\\n        \\n    i = i3\\nprint(ans)\\n\\n    \\n\", \"n = int(input())\\na = list(map(int, input().split()))\\ni = 0\\nans = 0\\nwhile i < n:\\n    ans += 1\\n    i1 = i\\n    while i1 < n and a[i1] == -1:\\n        i1 += 1\\n    if i1 == n:\\n        break\\n    i2 = i1 + 1\\n    while i2 < n and a[i2] == -1:\\n        i2 += 1\\n    if i2 == n:\\n        break\\n    dist = i2 - i1\\n    step = (a[i2] - a[i1]) // dist\\n    if (a[i2] - a[i1]) % dist != 0 or (step > 0 and a[i1] - (i1 - i) * step <= 0):\\n        i = i2\\n        continue\\n    i3 = i2 + 1\\n    while i3 < n:\\n        nxt = a[i2] + step * (i3 - i2)\\n        if nxt <= 0 or (a[i3] != -1 and a[i3] != nxt):\\n            break\\n        i3 += 1\\n        \\n    i = i3\\nprint(ans)\", \"n = int(input())\\na = list(map(int, input().split()))\\ni = 0\\nans = 0\\n\\nwhile i < n:\\n    ans += 1\\n    i1 = i\\n    while i1 < n and a[i1] == -1:\\n        i1 += 1\\n    if i1 == n:\\n        break\\n    i2 = i1 + 1\\n    while i2 < n and a[i2] == -1:\\n        i2 += 1\\n    if i2 == n:\\n        break\\n    dist = i2 - i1\\n    step = (a[i2] - a[i1]) // dist\\n    if (a[i2] - a[i1]) % dist != 0 or (step > 0 and a[i1] - (i1 - i) * step <= 0):\\n        i = i2\\n        continue\\n    i3 = i2 + 1\\n    while i3 < n:\\n        nxt = a[i2] + step * (i3 - i2)\\n        if nxt <= 0 or (a[i3] != -1 and a[i3] != nxt):\\n            break\\n        i3 += 1\\n        \\n    i = i3\\nprint(ans)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"9\\n8 6 4 2 1 4 7 10 2\\n\",\n    \"9\\n-1 6 -1 2 -1 4 7 -1 2\\n\",\n    \"5\\n-1 -1 -1 -1 -1\\n\",\n    \"7\\n-1 -1 4 5 1 2 3\\n\",\n    \"1\\n1\\n\",\n    \"1\\n65\\n\",\n    \"1\\n1000000000\\n\",\n    \"1\\n-1\\n\",\n    \"2\\n1000000000 1000000000\\n\",\n    \"2\\n1000000000 -1\\n\",\n    \"2\\n-1 1000000000\\n\",\n    \"2\\n-1 -1\\n\",\n    \"3\\n999999999 1000000000 -1\\n\",\n    \"3\\n999999999 -1 1000000000\\n\",\n    \"3\\n1000000000 999999999 1000000000\\n\",\n    \"3\\n-1 1000000000 999999999\\n\",\n    \"3\\n-1 1000000000 -1\\n\",\n    \"3\\n-1 1 2\\n\",\n    \"3\\n-1 1 1000000000\\n\",\n    \"5\\n-1 1 7 -1 5\\n\",\n    \"7\\n-1 2 4 -1 4 1 5\\n\",\n    \"2\\n-1 21\\n\",\n    \"3\\n39 42 -1\\n\",\n    \"4\\n45 -1 41 -1\\n\",\n    \"5\\n-1 40 42 -1 46\\n\",\n    \"6\\n-1 6 1 -1 -1 -1\\n\",\n    \"7\\n32 33 34 -1 -1 37 38\\n\",\n    \"8\\n-1 12 14 16 18 20 -1 -1\\n\",\n    \"9\\n42 39 36 33 -1 -1 -1 34 39\\n\",\n    \"10\\n29 27 -1 23 42 -1 -1 45 -1 -1\\n\",\n    \"5\\n40 -1 44 46 48\\n\",\n    \"6\\n43 40 37 34 -1 -1\\n\",\n    \"7\\n11 8 5 -1 -1 -1 -1\\n\",\n    \"8\\n-1 12 14 16 18 20 -1 -1\\n\",\n    \"9\\n42 39 36 33 -1 -1 -1 34 39\\n\",\n    \"10\\n29 27 -1 23 42 -1 -1 45 -1 -1\\n\",\n    \"11\\n9 21 17 13 -1 -1 -1 -1 -1 -1 -1\\n\",\n    \"12\\n-1 17 -1 54 -1 64 -1 74 79 84 -1 94\\n\",\n    \"13\\n25 24 23 22 24 27 -1 33 -1 2 2 2 -1\\n\",\n    \"14\\n-1 5 3 -1 -1 31 31 31 -1 31 -1 -1 4 7\\n\",\n    \"15\\n-1 28 -1 32 34 26 -1 26 -1 -1 26 26 26 -1 -1\\n\",\n    \"16\\n3 8 13 18 23 -1 -1 -1 43 48 53 45 -1 -1 -1 -1\\n\",\n    \"17\\n-1 -1 -1 -1 64 68 72 -1 45 46 47 48 49 50 51 52 53\\n\",\n    \"18\\n21 19 -1 -1 -1 48 50 -1 54 -1 5 1 -1 -1 -1 37 36 35\\n\",\n    \"19\\n23 26 -1 -1 35 38 41 -1 -1 -1 53 -1 59 62 6 7 8 9 -1\\n\",\n    \"6\\n-1 2 6 -1 -1 6\\n\",\n    \"8\\n-1 -1 1 7 -1 9 5 2\\n\",\n    \"20\\n-1 32 37 -1 -1 -1 57 -1 -1 40 31 33 -1 -1 39 47 43 -1 35 32\\n\",\n    \"13\\n2 -1 3 1 3 1 -1 1 3 -1 -1 1 1\\n\",\n    \"3\\n-1 1 -1\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/416/D",
  "starter_code": ""
}