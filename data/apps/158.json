{
  "task_id": "APPS/158",
  "problem_id": 158,
  "prompt": "Berland annual chess tournament is coming!\n\nOrganizers have gathered 2\u00b7n chess players who should be divided into two teams with n people each. The first team is sponsored by BerOil and the second team is sponsored by BerMobile. Obviously, organizers should guarantee the win for the team of BerOil.\n\nThus, organizers should divide all 2\u00b7n players into two teams with n people each in such a way that the first team always wins.\n\nEvery chess player has its rating r_{i}. It is known that chess player with the greater rating always wins the player with the lower rating. If their ratings are equal then any of the players can win.\n\nAfter teams assignment there will come a drawing to form n pairs of opponents: in each pair there is a player from the first team and a player from the second team. Every chess player should be in exactly one pair. Every pair plays once. The drawing is totally random.\n\nIs it possible to divide all 2\u00b7n players into two teams with n people each so that the player from the first team in every pair wins regardless of the results of the drawing?\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 100).\n\nThe second line contains 2\u00b7n integers a_1, a_2, ... a_2n (1 \u2264 a_{i} \u2264 1000).\n\n\n-----Output-----\n\nIf it's possible to divide all 2\u00b7n players into two teams with n people each so that the player from the first team in every pair wins regardless of the results of the drawing, then print \"YES\". Otherwise print \"NO\".\n\n\n-----Examples-----\nInput\n2\n1 3 2 4\n\nOutput\nYES\n\nInput\n1\n3 3\n\nOutput\nNO",
  "solutions": "[\"n = int(input())\\nz = list(map(int, input().split()))\\nz.sort()\\nif z[n - 1] < z[n]:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\\n    \\n\", \"n=int(input())\\na=sorted(list(map(int,input().split())))\\nprint('YES'if a[n-1]<a[n] else 'NO')\\n\", \"n = int(input())\\n\\nnums = list(map(int, input().split()))\\nnums = sorted(nums)\\nif(nums[len(nums)//2 - 1] < nums[len(nums)//2]):\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\nf = True\\n\\na.sort()\\n\\nif a[n] == a[n - 1]:\\n    f = False\\n\\nif f == True:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\", \"input()\\na = sorted(map(int, input().split()))\\n\\nif a[len(a)//2 -1] < a[len(a)//2]:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"n = int (input())\\na = sorted([int(i) for i in input().split()])\\nif a[n-1] < a[n]:\\n    print ('YES')\\nelse:\\n    print ('NO')\", \"n = int(input())\\na = [int(i) for i in input().split()]\\na.sort()\\nif a[n] == a[n - 1]:\\n\\tprint('NO')\\nelse:\\n\\tprint('YES')\", \"n = int(input())\\na = sorted(map(int, input().split()))\\nprint('YES' if a[n] > a[n-1] else 'NO')\", \"n=int(input())\\na=list(map(int ,input().strip().split(' ')))\\na.sort()\\nif a[n-1]<a[n]:\\n  print('YES')\\nelse:\\n  print('NO')\", \"import sys, os\\n\\nn = int(input())\\nn *= 2\\ndata = list(map(int, input().split()))\\ndata = sorted(data)\\ndata1 = data[:n//2]\\ndata2 = data[n//2:]\\nfor i in range(n // 2):\\n    if data1[i] in data2:\\n        print(\\\"NO\\\")\\n        return\\n        sys.exit\\n        os.abort()\\nprint(\\\"YES\\\")\\n\", \"n = int(input())\\n\\na = list(map(int, input().split()))\\n\\na.sort()\\n\\nprint(\\\"YES\\\" if a[n] > a[n - 1] else \\\"NO\\\") \\n\", \"\\nn = int(input())\\nplayers = list(map(int, input().split()))\\n\\nplayers.sort()\\n\\nif players[n] > players[n - 1]:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\\n\", \"n = int(input())\\n\\nl=[int(i) for i in input().split()]\\n\\nl.sort()\\n\\nif l[n]>l[n-1]:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"n = int(input())\\nar = list(map(int, input().split()))\\nar.sort()\\na = ar[:n]\\nb = ar[n:]\\nif len(set(a) & set(b)) == 0:\\n    print('YES')\\nelse:\\n    print('NO')\", \"n=int(input())\\na=list(map(int, input().split()))\\na.sort()\\nif a[n-1]<a[n]:\\n    print('YES')\\nelse:\\n    print('NO')\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nif a[n - 1] == a[n]:\\n    print('NO')\\nelse:\\n    print('YES')\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nassert(len(a) == n+n)\\n\\na.sort()\\nif a[n-1] < a[n]:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"n = int(input())\\nA = sorted([int(i) for i in input().split()])\\nif A[n] > A[n-1]:\\n    print('YES')\\nelse:\\n    print('NO')\\n\\n\", \"n = int(input())\\nl  = sorted(map(int, input().split()))\\n\\nprint(['NO', 'YES'][l[n] > l[n-1]])\\n\", \"n = int(input())\\ndata = list(map(int, input().split()))\\ndata.sort()\\nif n == 1 and data[0] == data[1] or data[0] == data[-1] or data[n] == data[n - 1]:\\n    print('NO')\\nelse:\\n    print('YES')\\n\", \"def main():\\n    nbEquipe=int(input())\\n    liste=list(map(int,input().split()))\\n    liste.sort()\\n    if(liste[nbEquipe]>liste[nbEquipe-1]):\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\nmain()\\n    \\n\", \"# A. Chess Tourney\\n\\nn = int(input())\\nr = list(map(int, input().split()))\\n\\nr = sorted(r)\\n\\nf, s = min(r[n:]), max(r[:n])\\n\\nif f > s:\\n\\tprint('YES')\\nelse:\\n\\tprint('NO')\\n\", \"n=int(input())\\na=[int(i) for i in input().split()]\\na=sorted(a)\\nb=a[:int(len(a)/2)]\\nc=a[int(len(a)/2):]\\nif(c[0]>b[len(b)-1]):\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\", \"n = int(input())\\na = list(sorted(list(map(int, input().split())), reverse=True))\\n\\nif min(a[:n]) > max(a[n:]):\\n    print('YES')\\nelse:\\n    print('NO')\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nif a[n - 1] == a[n]:\\n    print(\\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\")\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2\\n1 3 2 4\\n\",\n    \"1\\n3 3\\n\",\n    \"5\\n1 1 1 1 2 2 3 3 3 3\\n\",\n    \"5\\n1 1 1 1 1 2 2 2 2 2\\n\",\n    \"10\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n\",\n    \"1\\n2 3\\n\",\n    \"100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"35\\n919 240 231 858 456 891 959 965 758 30 431 73 505 694 874 543 975 445 16 147 904 690 940 278 562 127 724 314 30 233 389 442 353 652 581 383 340 445 487 283 85 845 578 946 228 557 906 572 919 388 686 181 958 955 736 438 991 170 632 593 475 264 178 344 159 414 739 590 348 884\\n\",\n    \"5\\n1 2 3 4 10 10 6 7 8 9\\n\",\n    \"2\\n1 1 1 2\\n\",\n    \"2\\n10 4 4 4\\n\",\n    \"2\\n2 3 3 3\\n\",\n    \"4\\n1 2 3 4 5 4 6 7\\n\",\n    \"4\\n2 5 4 5 8 3 1 5\\n\",\n    \"4\\n8 2 2 4 1 4 10 9\\n\",\n    \"2\\n3 8 10 2\\n\",\n    \"3\\n1 3 4 4 5 6\\n\",\n    \"2\\n3 3 3 4\\n\",\n    \"2\\n1 1 2 2\\n\",\n    \"2\\n1 1 3 3\\n\",\n    \"2\\n1 2 3 2\\n\",\n    \"10\\n1 2 7 3 9 4 1 5 10 3 6 1 10 7 8 5 7 6 1 4\\n\",\n    \"3\\n1 2 3 3 4 5\\n\",\n    \"2\\n2 2 1 1\\n\",\n    \"7\\n1 2 3 4 5 6 7 7 8 9 10 11 12 19\\n\",\n    \"5\\n1 2 3 4 5 3 3 5 6 7\\n\",\n    \"4\\n1 1 2 2 3 3 3 3\\n\",\n    \"51\\n576 377 63 938 667 992 959 997 476 94 652 272 108 410 543 456 942 800 917 163 931 584 357 890 895 318 544 179 268 130 649 916 581 350 573 223 495 26 377 695 114 587 380 424 744 434 332 249 318 522 908 815 313 384 981 773 585 747 376 812 538 525 997 896 859 599 437 163 878 14 224 733 369 741 473 178 153 678 12 894 630 921 505 635 128 404 64 499 208 325 343 996 970 39 380 80 12 756 580 57 934 224\\n\",\n    \"3\\n3 3 3 2 3 2\\n\",\n    \"2\\n5 3 3 6\\n\",\n    \"2\\n1 2 2 3\\n\",\n    \"2\\n1 3 2 2\\n\",\n    \"2\\n1 3 3 4\\n\",\n    \"2\\n1 2 2 2\\n\",\n    \"3\\n1 2 7 19 19 7\\n\",\n    \"3\\n1 2 3 3 5 6\\n\",\n    \"2\\n1 2 2 4\\n\",\n    \"2\\n6 6 5 5\\n\",\n    \"2\\n3 1 3 1\\n\",\n    \"3\\n1 2 3 3 1 1\\n\",\n    \"3\\n3 2 1 3 4 5\\n\",\n    \"3\\n4 5 6 4 2 1\\n\",\n    \"3\\n1 1 2 3 2 4\\n\",\n    \"3\\n100 99 1 1 1 1\\n\",\n    \"3\\n1 2 3 6 5 3\\n\",\n    \"2\\n2 2 1 2\\n\",\n    \"4\\n1 2 3 4 5 6 7 4\\n\",\n    \"3\\n1 2 3 1 1 1\\n\",\n    \"3\\n6 5 3 3 1 3\\n\",\n    \"2\\n1 2 1 2\\n\",\n    \"3\\n1 2 5 6 8 6\\n\",\n    \"5\\n1 2 3 4 5 3 3 3 3 3\\n\",\n    \"2\\n1 2 4 2\\n\",\n    \"3\\n7 7 4 5 319 19\\n\",\n    \"3\\n1 2 4 4 3 5\\n\",\n    \"3\\n3 2 3 4 5 2\\n\",\n    \"5\\n1 2 3 4 4 5 3 6 7 8\\n\",\n    \"3\\n3 3 4 4 5 1\\n\",\n    \"2\\n3 4 3 3\\n\",\n    \"2\\n2 5 4 4\\n\",\n    \"5\\n1 2 3 3 4 5 6 7 8 4\\n\",\n    \"3\\n1 2 3 3 5 5\\n\",\n    \"2\\n3 4 4 4\\n\",\n    \"2\\n1 4 5 4\\n\",\n    \"2\\n1 2 3 3\\n\",\n    \"2\\n1 1 2 1\\n\",\n    \"4\\n1 1 1 1 2 2 2 2\\n\",\n    \"4\\n1 2 3 5 6 7 8 5\\n\",\n    \"2\\n4 3 3 1\\n\",\n    \"3\\n3 1 2 4 3 5\\n\",\n    \"3\\n1 2 3 3 4 6\\n\",\n    \"4\\n2 2 2 4 5 5 5 5\\n\",\n    \"2\\n1 3 4 3\\n\",\n    \"2\\n3 3 2 3\\n\",\n    \"2\\n1 2 1 1\\n\",\n    \"3\\n1 3 4 4 2 5\\n\",\n    \"4\\n4 7 1 2 3 5 6 4\\n\",\n    \"2\\n3 2 2 2\\n\",\n    \"1\\n2 1\\n\",\n    \"2\\n3 3 1 2\\n\",\n    \"1\\n8 6\\n\",\n    \"7\\n6 7 6 7 3 1 9 4 6 10 8 2 5 7\\n\",\n    \"2\\n3 9 2 1\\n\",\n    \"2\\n3 3 3 3\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/845/A",
  "starter_code": ""
}