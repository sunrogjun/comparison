{
  "task_id": "APPS/185",
  "problem_id": 185,
  "prompt": "Finished her homework, Nastya decided to play computer games. Passing levels one by one, Nastya eventually faced a problem. Her mission is to leave a room, where a lot of monsters live, as quickly as possible.\n\nThere are $n$ manholes in the room which are situated on one line, but, unfortunately, all the manholes are closed, and there is one stone on every manhole. There is exactly one coin under every manhole, and to win the game Nastya should pick all the coins. Initially Nastya stands near the $k$-th manhole from the left. She is thinking what to do.\n\nIn one turn, Nastya can do one of the following:   if there is at least one stone on the manhole Nastya stands near, throw exactly one stone from it onto any other manhole (yes, Nastya is strong).  go to a neighboring manhole;  if there are no stones on the manhole Nastya stays near, she can open it and pick the coin from it. After it she must close the manhole immediately (it doesn't require additional moves). \n\n [Image] The figure shows the intermediate state of the game. At the current position Nastya can throw the stone to any other manhole or move left or right to the neighboring manholes. If she were near the leftmost manhole, she could open it (since there are no stones on it). \n\nNastya can leave the room when she picks all the coins. Monsters are everywhere, so you need to compute the minimum number of moves Nastya has to make to pick all the coins.\n\nNote one time more that Nastya can open a manhole only when there are no stones onto it.\n\n\n-----Input-----\n\nThe first and only line contains two integers $n$ and $k$, separated by space ($2 \\leq n \\leq 5000$, $1 \\leq k \\leq n$)\u00a0\u2014 the number of manholes and the index of manhole from the left, near which Nastya stays initially. Initially there is exactly one stone near each of the $n$ manholes. \n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 minimum number of moves which lead Nastya to pick all the coins.\n\n\n-----Examples-----\nInput\n2 2\n\nOutput\n6\n\nInput\n4 2\n\nOutput\n13\n\nInput\n5 1\n\nOutput\n15\n\n\n\n-----Note-----\n\nLet's consider the example where $n = 2$, $k = 2$. Nastya should play as follows:\n\n  At first she throws the stone from the second manhole to the first. Now there are two stones on the first manhole.  Then she opens the second manhole and pick the coin from it.  Then she goes to the first manhole, throws two stones by two moves to the second manhole and then opens the manhole and picks the coin from it. \n\nSo, $6$ moves are required to win.",
  "solutions": "[\"n, k = list(map(int,input().split()))\\nif k == 1 or k == n:\\n    print(3 * n)\\nelse:\\n    print(3 * n + min(k - 1, n - k))\\n\", \"l = list(map(int, input().split()))\\nprint(3*l[0]+min(l[1]-1,l[0]-l[1]))\\n\", \"import getpass\\nimport math\\nimport sys\\nimport string\\nimport re\\nimport math\\nimport random\\nfrom decimal import Decimal, getcontext\\n\\n\\ndef ria():\\n    return [int(i) for i in input().split()]\\n\\n\\nif getpass.getuser() != 'frohenk':\\n    filename = 'half'\\n    # sys.stdin = open('input.txt')\\n    # sys.stdout = open('output.txt', 'w')\\nelse:\\n    sys.stdin = open('input.txt')\\n    # sys.stdin.close()\\n\\nn, k = ria()\\nrcks = n + 1\\nmny = n\\nmvs = min((k - 1) * 2 + (n - k), (k - 1) + (n - k) * 2)\\n\\nif k == 1:\\n    mvs = n - 1\\n\\nif k == n:\\n    mvs = n - 1\\n    \\nprint(mvs + rcks + mny)\\n\", \"n, k = map(int, input().split())\\nans = 2 * n + 1\\nans += n - 1 + min(k - 1, n - k)\\nprint(ans)\", \"n,k = list(map(int,input().split()))\\n\\nif k == 1:\\n    print(3*(n-1)+3)\\nelif k == n:\\n    print(3*(n-1)+3)\\n\\nelse:\\n    shorter = min(k-1,n-k)\\n    longer = max(k-1,n-k)\\n    out = 0\\n    out += shorter*3 + shorter + longer*3 +3\\n    print (out)\\n\", \"ii = lambda: int(input())\\nmi = lambda: map(int, input().split())\\nli = lambda: list(mi())\\n\\nn, k = mi()\\nif k - 1 > n - k:\\n    k = n - k + 1\\n\\nans = n + k - 1 + 1 + n + n - 1\\nprint(ans)\", \"# -*- coding: utf-8 -*-\\n\\n\\ndef rli():\\n    return list(map(int, input().split()))\\n\\n\\ndef main():\\n    n, k = rli()\\n    ans = n * 3\\n    if k != n and k != 1:\\n        ans += min(n - k, k - 1)\\n    print(ans)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n, k = list(map(int, input().split()))\\nprint(n * 3 + min(k, n + 1 - k) - 1)\\n\", \"n,k=[int(x) for x in input().split()]\\nprint(min(n-k,k-1)+3*n)\\n\", \"n,k=list(map(int,input().split()))\\ndiff1=k-1\\ndiff2=n-k\\nans=2\\nif(diff1<=diff2):\\n\\tans+=4*(diff1)\\n\\tans+=1\\n\\tans+=3*(diff2)\\nelse:\\n\\tans+=4*(diff2)\\n\\tans+=1\\n\\tans+=3*(diff1)\\nprint(ans)\\n\", \"N, K = list(map(int, input().split()))\\nprint(3*N+min(K-1, N-K))\\n\", \"n, k = map(int, input().split())\\nprint(n + min(k-1, n-k) + n + n)\", \"#      \\nimport collections, atexit, math, sys, bisect \\n\\nsys.setrecursionlimit(1000000)\\n\\nisdebug = False\\ntry :\\n    #raise ModuleNotFoundError\\n    import pylint\\n    import numpy\\n    def dprint(*args, **kwargs):\\n        #print(*args, **kwargs, file=sys.stderr)\\n        # in python 3.4 **kwargs is invalid???\\n        print(*args,  file=sys.stderr)\\n    dprint('debug mode')\\n    isdebug = True\\nexcept Exception:\\n    def dprint(*args, **kwargs):\\n        pass\\n\\n\\ndef red_inout():\\n    inId = 0\\n    outId = 0\\n    if not isdebug:\\n        inId = 0\\n        outId = 0\\n    if inId>0:\\n        dprint('use input', inId)\\n        try:\\n            f = open('input'+ str(inId) + '.txt', 'r')\\n            sys.stdin = f #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\n        except Exception:\\n            dprint('invalid input file')\\n    if outId>0:\\n        dprint('use output', outId)\\n        try:\\n            f = open('stdout'+ str(outId) + '.txt', 'w')\\n            sys.stdout = f #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\n        except Exception:\\n            dprint('invalid output file')\\n            \\n        atexit.register(lambda :sys.stdout.close())     #idle \\u4e2d\\u4e0d\\u4f1a\\u6267\\u884c atexit\\n\\nif isdebug and len(sys.argv) == 1:\\n    red_inout()\\n\\ndef getIntList():\\n    return list(map(int, input().split()))            \\n\\ndef solve(): \\n    pass\\n    \\nT_ = 1    \\n#T_, = getIntList()\\n\\nfor iii_ in range(T_):\\n    #solve()\\n    N, K = getIntList()\\n    #print(N)\\n    r = N+1\\n    r+= N\\n    r +=N\\n    r += min(K-1, N-K) -1\\n    print(r)\\n    \\n\\n\\n\\n\\n\\n\\n\", \"n, k = map(int, input().split())\\nk -= 1\\n\\ngo_to_border = min(k, n-k-1)\\nmore = 3 * n\\nprint(go_to_border + more)\", \"n, k = list(map(int, input().split()))\\nans = 0\\nif k != 1 and k != n:\\n    ans = 2 * min(k - 1, n - k) + max(k - 1, n - k) + 2 * n + 1\\nelse:\\n    ans = 3 * n\\nprint(ans)\\n\", \"n, k = list(map(int, input().split()))\\nans = (n + 1) + n + min(n - k, k - 1) + (n - 1)\\nprint(ans)\\n\", \"n, k = list(map(int, input().split()))\\n\\nl = k - 1\\nr = n - k\\n\\nprint(1 + n + 2 * min(l, r) + max(l, r) + n)\\n\", \"n, k = map(int, input().split())\\nif 2 * k <= (n + 1):\\n    print(3 * n + k - 1)\\nelse:\\n    print(4 * n - k)\", \"n, k = list(map( int, input().split()))\\n\\nmn = min( k - 1, n - k )\\n\\nprint( 3*n + mn )\\n\", \"n,k=map(int,input().split())\\nans=n*3\\nu=min(n-k,k-1)\\nans=ans+u\\nprint(ans)\", \"n, k = (int(t) for t in input().split(' '))\\nprint(n*3 + min(k-1, (n-k)))\", \"n, k = list(map(int, input().split()))\\nprint(n + 1 + n + n - 1 + min(k - 1, n - k))\\n\", \"n, m = list(map(int,input().split()))\\nprint(n * 3 + min(m - 1, n - m))\\n\", \"def main():\\n    n,k = list(map(int,input().split()))\\n    moves = 2*n\\n    moves += 1\\n    moves += min(k-1,n-k)\\n    moves += n-1\\n\\n    print (moves)\\n\\nmain()\\n\", \"n,k = list(map(int,input().split()))\\nif k > n//2:\\n\\tk = n + 1 - k\\nprint( 2 * (k - 1) + 1 + k + 2 + 2 * (n - k - 1 ) + n)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 2\\n\",\n    \"4 2\\n\",\n    \"5 1\\n\",\n    \"64 49\\n\",\n    \"24 6\\n\",\n    \"91 39\\n\",\n    \"87 87\\n\",\n    \"72 36\\n\",\n    \"4237 4112\\n\",\n    \"1815 1371\\n\",\n    \"5000 1628\\n\",\n    \"5000 3531\\n\",\n    \"5000 2895\\n\",\n    \"5000 539\\n\",\n    \"5000 3576\\n\",\n    \"3474 3427\\n\",\n    \"3400 1203\\n\",\n    \"4345 1015\\n\",\n    \"2944 2468\\n\",\n    \"2029 360\\n\",\n    \"4951 4649\\n\",\n    \"3058 82\\n\",\n    \"113 42\\n\",\n    \"3355 2536\\n\",\n    \"1214 76\\n\",\n    \"4158 2162\\n\",\n    \"1052 1052\\n\",\n    \"2116 1\\n\",\n    \"530 530\\n\",\n    \"675 675\\n\",\n    \"308 1\\n\",\n    \"731 1\\n\",\n    \"4992 1\\n\",\n    \"4676 1\\n\",\n    \"3247 1623\\n\",\n    \"4291 2145\\n\",\n    \"3010 1505\\n\",\n    \"4919 2459\\n\",\n    \"978 489\\n\",\n    \"3151 1575\\n\",\n    \"3046 1523\\n\",\n    \"2563 1281\\n\",\n    \"2266 1133\\n\",\n    \"3068 1534\\n\",\n    \"2229 1114\\n\",\n    \"1237 618\\n\",\n    \"4602 2301\\n\",\n    \"2 1\\n\",\n    \"8 2\\n\",\n    \"10 9\\n\",\n    \"10 2\\n\",\n    \"9 1\\n\",\n    \"8 4\\n\",\n    \"40 24\\n\",\n    \"10 4\\n\",\n    \"3 3\\n\",\n    \"44 1\\n\",\n    \"18 12\\n\",\n    \"88 33\\n\",\n    \"7 3\\n\",\n    \"65 61\\n\",\n    \"87 27\\n\",\n    \"5000 3336\\n\",\n    \"5000 2653\\n\",\n    \"5000 4494\\n\",\n    \"5000 2612\\n\",\n    \"5000 3378\\n\",\n    \"5000 888\\n\",\n    \"5000 1\\n\",\n    \"5000 2500\\n\",\n    \"3 1\\n\",\n    \"2 1\\n\",\n    \"1029 1028\\n\",\n    \"10 9\\n\",\n    \"4 1\\n\",\n    \"1024 1023\\n\",\n    \"1023 999\\n\",\n    \"1000 199\\n\",\n    \"1000 201\\n\"\n  ],\n  \"outputs\": [\n    \"6\\n\",\n    \"13\\n\",\n    \"15\\n\",\n    \"207\\n\",\n    \"77\\n\",\n    \"311\\n\",\n    \"261\\n\",\n    \"251\\n\",\n    \"12836\\n\",\n    \"5889\\n\",\n    \"16627\\n\",\n    \"16469\\n\",\n    \"17105\\n\",\n    \"15538\\n\",\n    \"16424\\n\",\n    \"10469\\n\",\n    \"11402\\n\",\n    \"14049\\n\",\n    \"9308\\n\",\n    \"6446\\n\",\n    \"15155\\n\",\n    \"9255\\n\",\n    \"380\\n\",\n    \"10884\\n\",\n    \"3717\\n\",\n    \"14470\\n\",\n    \"3156\\n\",\n    \"6348\\n\",\n    \"1590\\n\",\n    \"2025\\n\",\n    \"924\\n\",\n    \"2193\\n\",\n    \"14976\\n\",\n    \"14028\\n\",\n    \"11363\\n\",\n    \"15017\\n\",\n    \"10534\\n\",\n    \"17215\\n\",\n    \"3422\\n\",\n    \"11027\\n\",\n    \"10660\\n\",\n    \"8969\\n\",\n    \"7930\\n\",\n    \"10737\\n\",\n    \"7800\\n\",\n    \"4328\\n\",\n    \"16106\\n\",\n    \"6\\n\",\n    \"25\\n\",\n    \"31\\n\",\n    \"31\\n\",\n    \"27\\n\",\n    \"27\\n\",\n    \"136\\n\",\n    \"33\\n\",\n    \"9\\n\",\n    \"132\\n\",\n    \"60\\n\",\n    \"296\\n\",\n    \"23\\n\",\n    \"199\\n\",\n    \"287\\n\",\n    \"16664\\n\",\n    \"17347\\n\",\n    \"15506\\n\",\n    \"17388\\n\",\n    \"16622\\n\",\n    \"15887\\n\",\n    \"15000\\n\",\n    \"17499\\n\",\n    \"9\\n\",\n    \"6\\n\",\n    \"3088\\n\",\n    \"31\\n\",\n    \"12\\n\",\n    \"3073\\n\",\n    \"3093\\n\",\n    \"3198\\n\",\n    \"3200\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1136/B",
  "starter_code": ""
}