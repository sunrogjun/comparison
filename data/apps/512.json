{
  "task_id": "APPS/512",
  "problem_id": 512,
  "prompt": "There is a building with 2N floors, numbered 1, 2, \\ldots, 2N from bottom to top.\nThe elevator in this building moved from Floor 1 to Floor 2N just once.\nOn the way, N persons got on and off the elevator. Each person i (1 \\leq i \\leq N) got on at Floor A_i and off at Floor B_i. Here, 1 \\leq A_i < B_i \\leq 2N, and just one person got on or off at each floor.\nAdditionally, because of their difficult personalities, the following condition was satisfied:\n - Let C_i (= B_i - A_i - 1) be the number of times, while Person i were on the elevator, other persons got on or off. Then, the following holds:\n - If there was a moment when both Person i and Person j were on the elevator, C_i = C_j.\nWe recorded the sequences A and B, but unfortunately, we have lost some of the records. If the record of A_i or B_i is lost, it will be given to you as -1.\nAdditionally, the remaining records may be incorrect.\nDetermine whether there is a pair of A and B that is consistent with the remaining records.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - A_i = -1 or 1 \\leq A_i \\leq 2N.\n - B_i = -1 or 1 \\leq B_i \\leq 2N.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 B_1\nA_2 B_2\n:\nA_N B_N\n\n-----Output-----\nIf there is a pair of A and B that is consistent with the remaining records, print Yes; otherwise, print No.\n\n-----Sample Input-----\n3\n1 -1\n-1 4\n-1 6\n\n-----Sample Output-----\nYes\n\nFor example, if B_1 = 3, A_2 = 2, and A_3 = 5, all the requirements are met.\nIn this case, there is a moment when both Person 1 and Person 2 were on the elevator, which is fine since C_1 = C_2 = 1.",
  "solutions": "[\"import sys\\n\\nreadline = sys.stdin.readline\\nMOD = 10 ** 9 + 7\\nINF = float('INF')\\nsys.setrecursionlimit(10 ** 5)\\n\\n\\ndef main():\\n    N = int(readline())\\n    L = 2 * N\\n    floor = [[0, 0] for _ in range(L)]\\n    com = dict()\\n\\n    for i in range(1, N + 1):\\n        A, B = map(int, readline().split())\\n        com[i] = [-1, -1]\\n        if A != -1:\\n            if floor[A - 1][1] == 0:\\n                floor[A - 1] = [i, 1]\\n                com[i][0] = A - 1\\n            else:\\n                return print(\\\"No\\\")\\n        if B != -1:\\n            if floor[B - 1][1] == 0:\\n                floor[B - 1] = [i, 2]\\n                com[i][1] = B - 1\\n            else:\\n                return print(\\\"No\\\")\\n        if A != -1 and B != -1:\\n            if A >= B:\\n                return print(\\\"No\\\")\\n\\n    dp = [False] * (L + 1)\\n\\n    if floor[0][1] == 2:\\n        return print(\\\"No\\\")\\n    else:\\n        dp[0] = True\\n\\n    for i in range(L):\\n        if not dp[i]:\\n            continue\\n        for j in range(i + 1, L, 2):\\n            ok = True\\n            w = (j - i + 1) // 2\\n            for k in range(w):\\n                p = i + k\\n                q = i + w + k\\n                if floor[p][1] == 2 or floor[q][1] == 1:\\n                    ok = False\\n                if floor[p][1] == 1 and floor[q][1] == 2:\\n                    if floor[p][0] != floor[q][0]:\\n                        ok = False\\n                if floor[p][1] == 1:\\n                    f = floor[p][0]\\n                    if com[f][1] != q and com[f][1] != -1:\\n                        ok = False\\n                if floor[q][1] == 2:\\n                    f = floor[q][0]\\n                    if com[f][0] != p and com[f][0] != -1:\\n                        ok = False\\n            if ok:\\n                dp[j + 1] = True\\n\\n    print(\\\"Yes\\\") if dp[L] else print(\\\"No\\\")\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"(n,),*t=[[*map(int,t.split())]for t in open(0)]\\ne=[f:=0]*n*4\\nfor a,b in t:\\n for j,(c,d)in enumerate(t):\\n  f|=d>0<a<c<b>b-a!=d-c\\n  if b>c>a>0>d:t[j]=c,c+b-a\\nfor a,b in t:e[a]+=1;e[b]+=1\\nprint('YNeos'[f+max(e[:-1])>1::2])\", \"N=int(input())\\nA=[0 for i in range(N)]\\nB=[0 for i in range(N)]\\nused=[0 for i in range(2*N)]\\ncom=[-1 for i in range(2*N)]\\nfor i in range(N):\\n    A[i],B[i]=list(map(int,input().split()))\\n    if A[i]!=-1:\\n        A[i]-=1\\n        if used[A[i]]:\\n            print(\\\"No\\\")\\n            return\\n        used[A[i]]=i+1\\n    if B[i]!=-1:\\n        B[i]-=1\\n        if used[B[i]]:\\n            print(\\\"No\\\")\\n            return\\n        used[B[i]]=-(i+1)\\n    if A[i]!=-1 and B[i]!=-1:\\n        if A[i]>B[i]:\\n            print(\\\"No\\\")\\n            return\\n        com[A[i]]=B[i]\\n        com[B[i]]=A[i]\\ndp=[False for i in range(2*N+1)]\\ndp[0]=True\\nfor i in range(2*N):\\n    if not(dp[i]):continue\\n    for j in range(i+1,2*N,2):\\n        w=(j-i+1)//2\\n        ok=True\\n        for k in range(w):\\n            p=i+k\\n            q=i+k+w\\n            if com[p]!=-1 and com[p]!=q:\\n                ok=False\\n            if com[q]!=-1 and com[q]!=p:\\n                ok=False\\n            if used[p]!=0 and used[q]!=0 and used[p]+used[q]!=0:\\n                ok=False\\n            if used[p]<0 or used[q]>0:\\n                ok=False\\n        if ok:\\n            dp[j+1]=True\\nif dp[2*N]:\\n    print(\\\"Yes\\\")\\nelse:\\n    print(\\\"No\\\")\\n\", \"R,P,I,J=range,print,input,int\\nn=J(I())\\nA,C,L=[list(map(J,I().split()))for i in R(n)],[0]*(2*n),[-1]*(2*n)\\nfor i in R(n):\\n a,b=A[i];a-=1;b-=1\\n if a!=-2:\\n  if L[a]>=0:P(\\\"No\\\");return\\n  C[a]=1;L[a]=i\\n if b!=-2:\\n  if L[b] >= 0:P(\\\"No\\\");return\\n  C[b]=-1;L[b]=i\\ndef f(l,r):\\n m=(l+r)//2\\n if min(C[l:m])==-1 or max(C[m:r])==1:return 0\\n X,Y=L[l:m],L[m:r]\\n for i in R(len(X)):\\n  if X[i]==Y[i]:continue\\n  elif X[i]!=-1!=Y[i]:return 0\\n  elif (X[i]!=-1 and X[i] in Y) or (Y[i]!=-1 and Y[i] in X):return 0\\n return 1\\ndp=[0]*(n+1)\\ndp[0]=1\\nfor i in R(n):\\n for j in R(i+1,n+1):\\n  if dp[i]*f(i*2,j*2):dp[j]=1\\nP(\\\"NYoe s\\\"[dp[n]::2])\", \"n = int(input())\\nAB = tuple(tuple(map(int, input().split())) for _ in range(n))\\nC = [(-1, -1)]*(2*n+1)\\nfor i, (a, b) in enumerate(AB):\\n  if a == -1 and b == -1:\\n    continue\\n  if a == -1:\\n    if C[b][0] != -1:\\n      print(\\\"No\\\")\\n      return\\n    C[b] = (1, i)\\n    continue\\n  if b == -1:\\n    if C[a][0] != -1:\\n      print(\\\"No\\\")\\n      return\\n    C[a] = (0, i)\\n    continue\\n  if a >= b:\\n    print(\\\"No\\\")\\n    return\\n  if C[a][0] != -1 or C[b][0] != -1:\\n    print(\\\"No\\\")\\n    return\\n  C[a] = (0, i)\\n  C[b] = (1, i)\\n\\ndef f(l, r):\\n  m = (r-l+1)//2\\n  for i in range(l, l+m):\\n    left_direct, left_idx = C[i]\\n    right_direct, right_idx = C[i+m]\\n    if left_direct == 1 or right_direct == 0:\\n      return False\\n    if left_direct != -1 and right_direct != -1:\\n      if left_idx != right_idx:\\n        return False\\n      continue\\n    if left_direct != -1:\\n      left_b = AB[left_idx][1]\\n      if left_b != -1 and i+m != left_b:\\n        return False\\n    if right_direct != -1:\\n      right_a = AB[right_idx][0]\\n      if right_a != -1 and i != right_a:\\n        return False\\n  return True\\n  \\ndp = [False]*(n+1)\\ndp[0] = True\\nfor i in range(n):\\n  if not dp[i]:\\n    continue\\n  for j in range(i+1, n+1):\\n    if f(2*i+1, 2*j):\\n      dp[j] = True\\nif dp[n]:\\n  print(\\\"Yes\\\")\\nelse:\\n  print(\\\"No\\\")\", \"def match(l,r):\\n    L = r-l\\n    if L%2==1: return False\\n    for i in range(L//2):\\n        if R[P[l+i]]>=r and R[P[l+i]]!=-1: return False\\n        if (P[l+i]==Q[l+L//2+i] or P[l+i]==0 or Q[l+L//2+i]==0) and Q[l+i]==P[l+L//2+i]==0: continue\\n        return False\\n    return True\\nN = int(input())\\nP, Q = [0]*(2*N), [0]*(2*N)\\nR = [-1]*(N+1)\\nfor i in range(1,N+1):\\n    A, B = map(int, input().split())\\n    if (A!=-1 and P[A-1]!=0) or (B!=-1 and Q[B-1]!=0): print(\\\"No\\\"); return\\n    if A!=-1: P[A-1] = i\\n    if B!=-1: Q[B-1] = i; R[i] = B-1\\ndp = [0]*(2*N+1)\\ndp[0] = 1\\nfor i in range(2,2*N+1):\\n    for j in range(i):\\n        if dp[j]==True and match(j,i):\\n            dp[i] = True\\n            break\\nprint(\\\"Yes\\\" if dp[-1] else \\\"No\\\")\", \"N = int(input())\\n\\n\\ndef check_AB(A, B):\\n\\tif B >= N * 2:\\n\\t\\treturn False\\n\\t\\n\\tif A_table[B] != None:\\n\\t\\treturn False\\n\\t\\n\\tif B_table[A] != None:\\n\\t\\treturn False\\n\\t\\n\\tAr = B_table[B]\\n\\tBr = A_table[A]\\n\\t\\n\\tif Ar == -1 and Br == -1:\\n\\t\\treturn False\\n\\t\\n\\tif not(Ar == -1 or Ar == None or Ar == A):\\n\\t\\treturn False\\n\\t\\n\\tif not(Br == -1 or Br == None or Br == B):\\n\\t\\treturn False\\n\\t\\n#\\tprint(A, B, Ar, Br)\\n\\treturn True\\n\\ndef check_A2B(A, B):\\n\\tif not check_AB(A, B):\\n\\t\\treturn False\\n\\tC = B - A - 1\\n\\tfor A2 in range(A + 1, B):\\n\\t\\tB2 = A2 + C + 1\\n\\t\\tif not check_AB(A2, B2):\\n\\t\\t\\treturn False\\n\\t\\n#\\tprint(A, B)\\n\\treturn check(B + C + 1)\\n\\ndef check(A):\\n\\tif A >= N * 2:\\n\\t\\treturn True\\n\\t\\n\\tif B_table[A] != None:\\n\\t\\treturn False\\n\\n\\tB = A_table[A]\\n\\tif B == None or B == -1:\\n\\t\\tB_min = A + 1\\n\\t\\tB_max = N * 2\\n\\t\\tif not(B_min < B_max):\\n\\t\\t\\treturn False\\n\\telse:\\n\\t\\tB_min = B\\n\\t\\tB_max = B + 1\\n\\t\\n\\tfor B in range(B_min, B_max):\\n\\t\\tif check_A2B(A, B):\\n\\t\\t\\treturn True\\n\\treturn False\\n\\nA_table = [None] * (2 * N)\\nB_table = [None] * (2 * N)\\ndef read():\\n\\tfree_count = 0\\n\\tfor _ in range(N):\\n\\t\\tA, B = list(map(int, input().split()))\\n\\t\\tif A >= 1:\\n\\t\\t\\tA -= 1\\n\\t\\tif B >= 1:\\n\\t\\t\\tB -= 1\\n\\t\\tif A != -1 and B != -1 and B <= A:\\n\\t\\t\\treturn False\\n\\t\\n\\t\\tif A == -1 and B == -1:\\n\\t\\t\\tfree_count += 1\\n\\t\\t\\n\\t\\tif A != -1:\\n\\t\\t\\tif A_table[A] != None or B_table[A] != None:\\n\\t\\t\\t\\treturn False\\n\\n\\t\\tif B != -1:\\n\\t\\t\\tif B_table[B] != None or A_table[B] != None:\\n\\t\\t\\t\\treturn False\\n\\n\\t\\tif A != -1:\\n\\t\\t\\tA_table[A] = B\\n\\t\\t\\n\\t\\tif B != -1:\\n\\t\\t\\tB_table[B] = A\\n\\t\\n\\treturn check(0)\\n\\nif read():\\n\\tprint(\\\"Yes\\\")\\nelse:\\n\\tprint(\\\"No\\\")\\n\", \"def f(l,r):\\n    L=r-l\\n    if L%2:return 0\\n    for i in range(l,l+L//2):\\n        if R[P[i]]>=r and R[P[i]]+1:return 0\\n        if (P[i]==Q[L//2+i]or P[i]*Q[L//2+i]==0)*(Q[i]+P[L//2+i]==0):continue\\n        return 0\\n    return 1\\nN=int(input())\\nM=2*N\\nP,Q,R,d=[0]*M,[0]*M,[-1]*(N+1),[0]*(M+1)\\nfor i in range(1,N+1):\\n    A,B=map(int,input().split())\\n    if (A+1and P[A-1]!=0)or(B+1and Q[B-1]):print(\\\"No\\\");return\\n    if A+1:P[A-1]=i\\n    if B+1:Q[B-1]=i;R[i]=B-1\\nd[0]=1\\nfor i in range(2,M+1):\\n    for j in range(i):\\n        if d[j]*f(j,i):d[i]=1;break\\nprint('NYoe s'[d[-1]::2])\", \"def f(l,r):\\n    L=r-l\\n    if L%2==1: return 0\\n    for i in range(l,l+L//2):\\n        if R[P[i]]>=r and R[P[i]]!=-1: return 0\\n        if (P[i]==Q[L//2+i] or P[i]*Q[L//2+i]==0)*(Q[i]==P[L//2+i]==0):continue\\n        return 0\\n    return 1\\nN=int(input())\\nM=2*N\\nP,Q,R=[0]*M,[0]*M,[-1]*(N+1)\\nfor i in range(1,N+1):\\n    A,B=map(int,input().split())\\n    if (A!=-1and P[A-1]!=0)or(B!=-1 and Q[B-1]!=0):print(\\\"No\\\");return\\n    if A!=-1:P[A-1]=i\\n    if B!=-1:Q[B-1]=i;R[i]=B-1\\nd=[0]*(M+1)\\nd[0]=1\\nfor i in range(2,M+1):\\n    for j in range(i):\\n        if d[j]*f(j,i):d[i]=1;break\\nprint('NYoe s'[d[-1]::2])\", \"import sys\\nsys.setrecursionlimit(10**7)\\n\\ndef main(n,ab):\\n    f=[[-1,-1] for _ in range(2*n)]\\n    mi=set(range(2*n))\\n    for i,(a,b) in enumerate(ab):\\n        a,b=a-1,b-1\\n        if a>=0 and a not in mi:return False\\n        if b>=0 and b not in mi:return False\\n        if a>=0 and b>=0 and a>=b:return False\\n        mi.discard(a)\\n        mi.discard(b)\\n        if a>=0 and b>=0:\\n            f[a][0]=1\\n            f[a][1]=i\\n            f[b][0]=0\\n            f[b][1]=i\\n        elif a>=0:\\n            f[a][0]=1\\n            f[a][1]=i\\n        elif b>=0:\\n            f[b][0]=0\\n            f[b][1]=i\\n    if f[0][0]==0:return False\\n    if f[-1][0]==1:return False\\n    now=0\\n    memo={}\\n\\n    # \\u533a\\u9593[l,r]\\u306f\\u3072\\u3068\\u3064\\u306e\\u5358\\u4f4d\\u533a\\u9593\\u3068\\u3057\\u3066\\u6210\\u308a\\u7acb\\u3064\\u304b\\u3002\\n    def chk(l,r):\\n        if (l,r) in memo:return memo[(l,r)]\\n        if (r-l)%2==0:return False\\n        ret=True\\n        ci=(r-l)//2\\n        rid=[]\\n        for i in range(l,l+ci+1):\\n            if f[i][0]==0:ret=False\\n            rid.append(f[i][1])\\n        j=0\\n        for i in range(l+ci+1,r+1):\\n            if f[i][0]==1:ret=False\\n            if rid[j]!=-1 and f[i][1]!=-1 and rid[j]!=f[i][1]:ret=False\\n            j+=1\\n        memo[(l,r)]=ret\\n        return ret\\n\\n    # \\u533a\\u9593[l,2*n]\\u306f\\u8907\\u6570\\u306e\\u5358\\u4f4d\\u533a\\u9593\\u306e\\u307f\\u304b\\u3089\\u6210\\u308b\\u533a\\u9593\\u304b\\u3002l\\u3088\\u308a\\u5de6\\u306f\\u3059\\u3067\\u306bTrue\\n    def dp(l):\\n        if l==2*n:return True\\n        for ri in range(l+1,2*n):\\n            tmp=chk(l,ri)\\n            if tmp:\\n                if dp(ri+1):return True\\n        return False\\n\\n    return dp(0)\\n\\nn=int(input())\\nab=[list(map(int,input().split())) for _ in range(n)]\\nret=main(n,ab)\\nprint(('Yes' if ret else 'No'))\\n\", \"INF=float('inf')\\ndef no():\\n    print('No')\\n    return\\n\\nN=int(input())\\n\\nms=0\\narr=[]\\nL=[]\\nR=[]\\nseen=[False]*(2*N)\\nfor i in range(N):\\n    A,B=map(int,input().split())\\n    if A==-1 and B==-1:\\n        ms+=1\\n    elif A==-1:\\n        R.append(B-1)\\n    elif B==-1:\\n        L.append(A-1)\\n    else:\\n        arr.append((A-1,B-1))\\n    if A!=-1:\\n        if seen[A-1]:\\n            no()\\n        seen[A-1]^=1\\n    if B!=-1:\\n        if seen[B-1]:\\n            no()\\n        seen[B-1]^=1\\n\\nfor i in range(len(arr)):\\n    for j in range(len(arr)):\\n        if i==j:\\n            continue\\n        l1,r1=arr[i]\\n        l2,r2=arr[j]\\n        if l1<=l2 and l2<=r1 and r1-l1!=r2-l2:\\n            no()\\n\\n\\ndp=[INF]*(2*N+1)\\ndp[0]=0\\n\\nfor k in range(1,2*N+1):\\n    if k%2:\\n        continue\\n    for j in range(k-1):\\n        if dp[j]==INF:\\n            continue\\n        M=0\\n        for l in range(j,(j+k)//2):\\n            if ((l,l+(k-j)//2) in arr) or (l in L) or ((l+(k-j)//2) in R):\\n                continue\\n            else:\\n                M+=1\\n        if M<=ms:\\n            dp[k]=min(dp[k],dp[j]+M)\\nprint('Yes' if dp[2*N]==ms else 'No')\", \"(n,),*t=[[*map(int,t.split())]for t in open(0)]\\nc=[0]*(2*n+1)\\nfor i in range(n):\\n    a,b=t[i]\\n    if a>-1<b and a>=b:print('No');return\\n    if a>-1:c[a]+=1\\n    if b>-1:c[b]+=1\\nif max(c)>1:print('No');return\\nfor _ in range(n):\\n    for i in range(n):\\n        a,b=t[i]\\n        if a>-1<b:\\n            for j in range(n):\\n                c,d=t[j]\\n                if c==d==-1:continue\\n                elif c>-1<d:\\n                    if d<a or b<c:continue\\n                    if d-c!=b-a:print('No');return\\n                elif c>-1:\\n                    if a<c<b:\\n                        t[j][1]=c+b-a\\n                else:\\n                    if a<d<b:\\n                        t[j][0]=d-b+a\\nc=[0]*(2*n+1)\\nfor i in range(n):\\n    a,b=t[i]\\n    if a>-1:c[a]+=1\\n    if b>-1:c[b]+=1\\nif max(c)>1:print('No');return\\nprint('Yes')\", \"import sys\\nsys.setrecursionlimit(10**7)\\n\\ndef main(n,ab):\\n    f=[[-1,-1] for _ in range(2*n)]\\n    mi=set(range(2*n))\\n    for i,(a,b) in enumerate(ab):\\n        a,b=a-1,b-1\\n        if a>=0 and a not in mi:return False\\n        if b>=0 and b not in mi:return False\\n        if a>=0 and b>=0 and a>=b:return False\\n        mi.discard(a)\\n        mi.discard(b)\\n        if a>=0 and b>=0:\\n            f[a][0]=1\\n            f[a][1]=i\\n            f[b][0]=0\\n            f[b][1]=i\\n        elif a>=0:\\n            f[a][0]=1\\n            f[a][1]=i\\n        elif b>=0:\\n            f[b][0]=0\\n            f[b][1]=i\\n    if f[0][0]==0:return False\\n    if f[-1][0]==1:return False\\n    #for x in f:\\n    #    print(x)\\n    now=0\\n    memo={}\\n    def chk(l,r):\\n        # \\u533a\\u9593[l,r]\\u306f\\u6210\\u308a\\u7acb\\u3064\\u304b\\u3002\\n        if (l,r) in memo:return memo[(l,r)]\\n        if (r-l)%2==0:return False\\n        ret=True\\n        ci=(r-l)//2\\n        rid=[]\\n        for i in range(l,l+ci+1):\\n            if f[i][0]==0:ret=False\\n            rid.append(f[i][1])\\n        j=0\\n        for i in range(l+ci+1,r+1):\\n            if f[i][0]==1:ret=False\\n            if rid[j]!=-1 and f[i][1]!=-1 and rid[j]!=f[i][1]:ret=False\\n            j+=1\\n        memo[(l,r)]=ret\\n        return ret\\n    def dp(l):\\n        if l==2*n:return True\\n        ret=False\\n        # l\\u3092\\u533a\\u9593\\u306e\\u5de6\\u7aef\\u3068\\u3057\\u305f\\u3068\\u304d\\u3001\\u6b8b\\u308a\\u306f\\u6210\\u308a\\u7acb\\u3064\\u304b\\u3002l\\u3088\\u308a\\u5de6\\u306f\\u6210\\u7acb\\u3057\\u3066\\u3044\\u308b\\u3002\\n        for ri in range(l+1,2*n):\\n            tmp=chk(l,ri)\\n            if tmp:\\n                if dp(ri+1):return True\\n        return False\\n\\n\\n    dp(0)\\n    #for k,v in memo.items():\\n    #    print(k,v)\\n    return dp(0)\\n#\\\"\\\"\\\"\\nn=int(input())\\nab=[list(map(int,input().split())) for _ in range(n)]\\nret=main(n,ab)\\nprint(('Yes' if ret else 'No'))\\n\", \"N = int(input())\\nAB = [tuple(map(int,input().split())) for i in range(N)]\\nfrom collections import Counter\\nctr = Counter()\\npairs = {}\\nstarts = set()\\nends = set()\\nfree = 0\\nfor a,b in AB:\\n    if a > 0 and b > 0:\\n        pairs[a] = b\\n        ctr[a] += 1\\n        ctr[b] += 1\\n    elif a > 0:\\n        ctr[a] += 1\\n        starts.add(a)\\n    elif b > 0:\\n        ctr[b] += 1\\n        ends.add(b)\\n    else:\\n        free += 1\\n\\nif any(v>1 for v in ctr.values()):\\n    print('No')\\n    return\\n\\ndp = [False] * (N+1)\\ndp[0] = True\\nfor i in range(N):\\n    if not dp[i]: continue\\n    for j in range(i+1,N+1):\\n        if dp[j]: continue\\n        l = j-i\\n        for s in range(2*i+1, 2*i+l+1):\\n            t = s+l\\n            if s in pairs:\\n                if pairs[s] != t: break\\n            if s in starts and t in ends: break\\n            if s in ends: break\\n            if t in starts: break\\n        else:\\n            dp[j] = True\\nprint('Yes' if dp[-1] else 'No')\", \"(n,),*t=[[*map(int,t.split())]for t in open(0)]\\ns='Yes'\\nr=range(n)\\nfor _ in r:\\n  for a,b in t:\\n    if min(a,b)<0:continue\\n    for j in r:\\n      c,d=t[j]\\n      if a<c<b>b-a!=d-c<d>0:s='No'\\n      if b>c>a>0>d:t[j]=c,c+b-a\\n      if a<d<b>0>c:t[j]=d-b+a,d\\nc=[0]*n*4\\nfor a,b in t:\\n  c[a]+=1\\n  c[b]+=1\\nprint((s,'No')[max(c[:n*3])>1])\", \"import sys\\nsys.setrecursionlimit(1919810)\\n\\ndef dfs(i):\\n    if i == 2 * n + 1:\\n        nonlocal ans\\n        ans = \\\"Yes\\\"\\n        return\\n    if ans == \\\"No\\\":\\n        if y[i] == 0:\\n            for k in range(1, n):\\n                if ok(k, i):\\n                    dfs(i + 2 * k)\\n        else:\\n            if ok(y[i], i):\\n                dfs(i + 2 * y[i])\\n    return\\n\\ndef ok(k, i):\\n    if k + i >= 2 * n + 1:\\n        return 0\\n    f = 1\\n    for l in range(k):\\n        if k + i + l >= 2 * n + 1:\\n            f = 0\\n            break\\n        if x[i + l] == 2 or x[k + i + l] == 1:\\n            f = 0\\n            break\\n        if not (y[i + l] == 0 or y[i + l] == k):\\n            f = 0\\n            break\\n        if not z[i + l] == z[k + i + l] and min(z[i + l], z[k + i + l]) >= 1:\\n            f = 0\\n            break\\n    return f\\n\\nn = int(input())\\nans = \\\"Yes\\\"\\nx = [0] * (2 * n + 2)\\ny = [0] * (2 * n + 2)\\nz = [0] * (2 * n + 2)\\nfor i in range(1, n + 1):\\n    a, b = map(int, input().split())\\n    if a >= b and not (a == -1 or b == -1):\\n        ans = \\\"No\\\"\\n    if not (x[a] == 0 and x[b] == 0):\\n        ans = \\\"No\\\"\\n    if not a == -1:\\n        x[a] = 1\\n        z[a] = i\\n    if not b == -1:\\n        x[b] = 2\\n        z[b] = i\\n    if not (a == -1 or b == -1):\\n        y[a] = b - a\\nif ans == \\\"No\\\":\\n    print(ans)\\n    return\\nans = \\\"No\\\"\\ndfs(1)\\nprint(ans)\", \"def main(): \\n    n = int(input())\\n    arr = [[0,0] for i in range(2*n+1)]\\n    for i in range(n):\\n        a,b = map(int,input().split())\\n        if a==-1:\\n            pass\\n        elif arr[a]==[0,0]:\\n            arr[a] = [i+1,b]\\n        else:\\n            arr[a] = [2**16,2**16]\\n        if b==-1:\\n            pass\\n        elif arr[b]==[0,0]:\\n            arr[b] = [-i-1,a]\\n        else:\\n            arr[b] = [2**16,2**16]\\n    ans = [False for i in range(n+1)]\\n    ans[0] = True\\n\\n    for hi in range(2,2*n+2,2):\\n        for lo in range(1,hi+1,2):\\n            if not ans[lo//2]:\\n                continue\\n            flag = True\\n            for i in range(lo,lo+(hi-lo+1)//2):\\n                x,y = arr[i],arr[i+(hi-lo+1)//2]\\n                #print(x,y)\\n                if x==[0,0] and y==[0,0]:\\n                    continue\\n                elif x==[0,0]:\\n                    if y[0]>0 or y[1]!=-1:\\n                        flag = False\\n                        break\\n                elif y==[0,0]:\\n                    if x[0]<0 or x[1]!=-1:\\n                        flag = False\\n                        break\\n                else:\\n                    if x[0]!=-y[0] or x[0]<0:\\n                        flag = False\\n                        break\\n                    elif x[1]!=i+1+(hi-lo-1)//2 or y[1]!=i:\\n                        flag = False\\n                        break\\n\\n            if not flag:\\n                continue\\n            ans[hi//2] = True\\n\\n    if ans[-1]:\\n        print(\\\"Yes\\\")\\n    else:\\n        print(\\\"No\\\")\\n    #print(ans)\\n    #print(arr)\\n\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"(n,),*t=[[*map(int,t.split())]for t in open(0)]\\ne=[f:=0]*n*4\\nfor _ in t:\\n for a,b in t:\\n  if a>0<b:\\n   for j,(c,d)in enumerate(t):\\n    f|=a<c<b>b-a!=d-c<d>0\\n    if b>c>a>0>d:t[j]=c,c+b-a\\n    if a<d<b>0>c:t[j]=d-b+a,d\\nfor a,b in t:e[a]+=1;e[b]+=1\\nprint('YNeos'[f+max(e[:-1])>1::2])\", \"# C - Fair Elevator\\nn = int(input())\\nc = {} # \\u4e57\\u308a\\u964d\\u308a\\u3059\\u308b\\u968e\\u3092\\u30ab\\u30a6\\u30f3\\u30c8\\u30022\\u500b\\u4ee5\\u4e0a\\u5b58\\u5728\\u3057\\u305f\\u3089No\\u3068\\u3059\\u308b\\u3002\\np = {} # \\u4e57\\u308a\\u964d\\u308a\\u3059\\u308b\\u968e\\u304c\\u78ba\\u5b9a\\u3057\\u3066\\u3044\\u308b\\u5834\\u5408\\u3001\\u305d\\u306e\\u968e\\u306e\\u30da\\u30a2\\u3092\\u683c\\u7d0d\\u3002\\ns = set() # \\u964d\\u308a\\u308b\\u968e\\u304c-1\\u306e\\u3068\\u304d\\u306e\\u4e57\\u308b\\u968e\\u3002\\ne = set() # \\u4e57\\u308b\\u968e\\u304c-1\\u306e\\u3068\\u304d\\u306e\\u964d\\u308a\\u308b\\u968e\\u3002\\nfor i in range(n):\\n  a,b = list(map(int,input().split()))\\n  if a in c:\\n    c[a] += 1\\n  else:\\n    c[a] = 1\\n  if b in c:\\n    c[b] += 1\\n  else:\\n    c[b] = 1\\n  if a > 0 and b > 0:\\n    if a >= b:\\n      print('No')\\n      return\\n    else:\\n      p[a] = b\\n  elif a > 0:\\n    s.add(a)\\n  else:\\n    e.add(b)\\n\\nfor k,v in list(c.items()):\\n  if k < 0:\\n    continue\\n  if v > 1:\\n    print('No')\\n    return\\n\\n# dp[i]:i*2\\u968e\\u307e\\u3067\\u307f\\u3066\\u3001\\u6b63\\u3057\\u3044a,b\\u306e\\u7d44\\u307f\\u5408\\u308f\\u305b\\u304c\\u3042\\u308b\\u304b\\u5426\\u304b\\u3002\\n# dp[i]\\u304cTrue\\u306e\\u3068\\u304d\\u306b\\u3001dp[i+1]\\u4ee5\\u964d\\u306b\\u6b63\\u3057\\u3044a,b\\u306e\\u7d44\\u307f\\u5408\\u308f\\u305b\\u304c\\u3042\\u308b\\u304b\\u5426\\u304b\\u691c\\u8a3c\\u3059\\u308b\\u3002\\n# \\u6b63\\u3057\\u3044\\u7d44\\u307f\\u5408\\u308f\\u305b\\u306e\\u3068\\u304d\\u3001\\u5404\\u968e\\u3092\\u3044\\u304f\\u3064\\u304b\\u306e\\u30d6\\u30ed\\u30c3\\u30af\\u306b\\u308f\\u3051\\u308b\\u3053\\u3068\\u304c\\u3067\\u304d\\u3001\\n# \\u540c\\u3058\\u30d6\\u30ed\\u30c3\\u30af\\u3067\\u306f\\u964d\\u308a\\u308b\\u968e-\\u4e57\\u308b\\u968e\\u304c\\u7b49\\u3057\\u304f\\u306a\\u308b\\u3002\\ndp = [False for _ in range(n+1)]\\ndp[0] = True\\nfor i in range(n):\\n  if not dp[i]:\\n    continue\\n  for j in range(i+1,n+1):\\n    if dp[j]:\\n      continue\\n    f = True\\n    for k in range(j-i):\\n      x = i*2+k+1 # \\u4e57\\u308b\\u968e\\n      y = x+(j-i) # \\u964d\\u308a\\u308b\\u968e\\n      # print(i,j,x,y)\\n      if x in p:\\n        if p[x] != y:\\n          f = False\\n          break\\n      if x in s and y in e:\\n        f = False\\n        break\\n      if x in e:\\n        f = False\\n        break\\n      if y in s:\\n        f = False\\n        break\\n    if f:\\n      dp[j] = True\\nprint(('Yes' if dp[-1] else 'No'))\\n#print(dp)\\n\", \"N, *AB = map(int, open(0).read().split())\\nAB = list(zip(*[iter(AB)] * 2))\\n\\nmemo = [False] * (2 * N + 1)\\nfor i, (a, b) in enumerate(AB):\\n    if (a != -1 and memo[a] or b != -1 and memo[b] or\\n        a != -1 and b != -1 and a > b):\\n        print(\\\"No\\\")\\n        return\\n\\n    if a != -1:\\n        memo[a] = True\\n    if b != -1:\\n        memo[b] = True\\n\\ndp = [True] + [False] * N\\nfor i in range(N):\\n    if not dp[i]:\\n        continue\\n\\n    for j in range(1, N - i + 1):\\n        if dp[i + j]:\\n            continue\\n\\n        ok = True\\n        for a, b in AB:\\n            if not ok:\\n                break\\n\\n            in_a = (2 * i + 1 <= a <= 2 * i + j)\\n            in_b = (2 * i + j + 1 <= b <= 2 * i + 2 * j)\\n            if a != -1 and b != -1 and (in_a ^ in_b) or in_a and in_b and b - a != j:\\n                ok = False\\n\\n            if a != -1 and 2 * i + j + 1 <= a <= 2 * i + 2 * j or in_a and b - a != j and memo[a + j]:\\n                ok = False\\n\\n            if b != -1 and 2 * i + 1 <= b <= 2 * i + j or in_b and b - a != j and memo[b - j]:\\n                ok = False\\n\\n        dp[i + j] = ok\\n\\nif dp[N]:\\n    print(\\\"Yes\\\")\\nelse:\\n    print(\\\"No\\\")\", \"def check():\\n  N = int(input())\\n  up,down = [0]*(2*N+1), [0]*(2*N+1)\\n  A,B = [0]*N,[0]*N\\n  for i in range(N):\\n    A[i],B[i] = map(int, input().split())\\n  for a,b in zip(A,B):\\n    if 0<b<=a or b==1 or a==2*N:\\n      return 'No'\\n    if a==-1:\\n      pass\\n    elif up[a]==0:\\n      up[a] = b\\n    else:\\n      return 'No'\\n    if b==-1:\\n      pass\\n    elif down[b]==0:\\n      down[b] = a\\n    else:\\n      return 'No'    \\n  dp = [[(i-j)%2 for j in range(2*N+1)] for i in range(2*N)]\\n  for l in range(1,2*N):\\n    if l%2==1:\\n      x = (l+1)//2\\n      for left in range(1,2*N-l+1):\\n        for y in range(left,left+x):\\n          if (up[y]>0 and up[y]!=y+x) or down[y]!=0:\\n            dp[left][left+l] = 0\\n          if up[y+x]!=0 or (down[y+x]>0 and down[y+x]!=y):\\n            dp[left][left+l] = 0\\n          if up[y]==-1 and down[y+x]==-1:\\n            dp[left][left+l] = 0\\n      if l==1:\\n        continue\\n    for left in range(1,2*N+1-l):\\n      right = left+l\\n      for a in range(left+1,right-1):\\n        dp[left][right] |= dp[left][a]&dp[a+1][right]\\n  if dp[1][-1]==1:\\n    return 'Yes'\\n  return 'No'\\nprint(check())\", \"(n,),*t=[[*map(int,t.split())]for t in open(0)]\\ne=[f:=0]*n*4\\nfor a,b in t:\\n j=0\\n for c,d in t:f|=d>0<a<c<b>b-a!=d-c;t[j][1]=(d,c+b-a)[b>c>a>0>d];j+=1\\nfor a,b in t:e[a]+=1;e[b]+=1\\nprint('YNeos'[f+max(e[:-1])>1::2])\", \"(n,),*t=[[*map(int,t.split())]for t in open(0)]\\ne=[f:=0]*n*4\\nfor a,b in t:\\n j=-1\\n for c,d in t:\\n  f|=d>0<a<c<b>b-a!=d-c;j+=1\\n  if b>c>a>0>d:t[j]=c,c+b-a\\nfor a,b in t:e[a]+=1;e[b]+=1\\nprint('YNeos'[f+max(e[:-1])>1::2])\", \"# n = int(input())\\n# ab = []\\n# for i in range(n):\\n#     ab.append(list(map(int, input().split())))\\n\\n# 1 -1\\n# -1 -1\\n# -1 -1\\n# -1 4\\n# -1 -1\\n# -1 6\\n\\n# 1 -1 1\\n# 2 -1 2\\n# -1 2 2\\n# -1 1 3\\n\\n# people = x, floor = 2x\\n# 1 0\\n# 2 0\\n# 3 0 0 3\\n# 0 1\\n# 0 2\\n# 0 3\\n\\nN = int(input())\\n\\n# decided pairs\\nkettei = []\\n# all floors not decided pairs\\nnobori = []\\nkudari = []\\n\\n# floors people get out\\nall_ori = set()\\n# floors people get in\\nall_nobori = set()\\n\\nflag = False\\n\\nfor i in range(N):\\n    a, b = list(map(int, input().split()))\\n    if a == -1 and b == -1:\\n        continue\\n    elif a == -1:\\n        # never get out at first\\n        # never two men get out at same floor\\n        if b == 1 or b in all_ori:\\n            flag = True\\n        kudari.append(b)\\n        all_ori.add(b)\\n    elif b == -1:\\n        # never get out at top\\n        # never two men get in at same floor\\n        if a == 2 * N or a in all_nobori:\\n            flag = True\\n        nobori.append(a)\\n        all_nobori.add(a)\\n    else:\\n        if a >= b:\\n            flag = True\\n        else:\\n            if a in all_nobori or b in all_ori:\\n                flag = True\\n            kettei.append((a, b))\\n            all_nobori.add(a)\\n            all_ori.add(b)\\n\\nif flag:\\n    print(\\\"No\\\")\\n    return\\n\\ndp = [-1] * (2 * N + 1)\\n# 1 2\\n# 3 4\\n# 5 6\\n# decide C from decided pairs for each floor.\\n# if this is mistaken, it is unfair.\\nfor a, b in kettei:\\n    for i in range(a, b):\\n        if dp[i] == -1:\\n            dp[i] = b - a\\n        elif dp[i] != b - a:\\n            print(\\\"No\\\")\\n            return\\n\\nnobori.sort()\\nkudari = sorted(kudari)[::-1]\\n\\nfor a in nobori:\\n    # no problem\\n    if dp[a] == -1:\\n        continue\\n    else:\\n        # find b from decided C\\n        b = a + dp[a]\\n        # if C is not valid, it's failed\\n        if b > 2 * N or b in all_ori:\\n            print(\\\"No\\\")\\n            return\\n        else:\\n            all_ori.add(b)\\n            for i in range(a, b):\\n                if dp[i] == -1:\\n                    dp[i] = b - a\\n                elif dp[i] != b - a:\\n                    print(\\\"No\\\")\\n                    return\\n\\nfor b in kudari:\\n    if dp[b] == -1:\\n        continue\\n    else:\\n        a = b - dp[b]\\n        if a < 1 or a in all_nobori:\\n            print(\\\"No\\\")\\n            return\\n        else:\\n            all_nobori.add(a)\\n            for i in range(a, b):\\n                if dp[i] == -1:\\n                    dp[i] = b - a\\n                elif dp[i] != b - a:\\n                    print(\\\"No\\\")\\n                    return\\n\\nprint(\\\"Yes\\\")\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\ndef I(): return int(input())\\ndef MI(): return list(map(int, input().split()))\\ndef LI(): return list(map(int, input().split()))\\n\\n\\\"\\\"\\\"\\n\\u3042\\u308b\\u4e00\\u584a\\u3092\\u898b\\u308b\\u3068\\uff0c\\u30b9\\u30e9\\u30a4\\u30c9\\u3057\\u305f\\u5f62\\u306b\\u3057\\u304b\\u306a\\u3089\\u306a\\u3044\\uff0c\\u3068\\u3044\\u3046\\u4e8b\\u5b9f\\u306f\\u3042\\u308a\\u305d\\u3046\\n(14)(25)(36)\\u307f\\u305f\\u3044\\u306a\\n\\n\\u4ed6\\u306e\\u3082\\u306e\\u306f\\u5185\\u5305\\u3057\\u306a\\u3044\\uff0e(14)(23)\\u307f\\u305f\\u3044\\u306a\\u306e\\u306f\\u306a\\u3044\\n\\n\\u306a\\u306e\\u3067\\uff0c\\u57cb\\u307e\\u308b\\u6642\\u306f\\u533a\\u9593\\u304c\\u57cb\\u307e\\u3063\\u3066\\u3044\\u304f\\uff0cl,r\\u304c\\u3042\\u3063\\u3066\\uff0c[l,r)\\u304c\\u5168\\u3066\\u4e00\\u4f7f\\u7528\\u6e08\\u307f\\u306b\\u306a\\u308b\\u611f\\u3058\\n\\u533a\\u9593dp\\u3067\\u304d\\u308b\\u304b?\\n\\u3044\\u3084\\uff0c\\u533a\\u9593\\u3092\\u8de8\\u3050\\u3084\\u3064\\u3069\\u3046\\u3057\\u3088\\u3046\\u4e0d\\u53ef\\u306e\\u533a\\u9593\\u30922\\u3064\\u7e4b\\u3052\\u3066\\u53ef\\u306b\\u306a\\u308b\\u3053\\u3068\\u304c\\u3042\\u308b\\n\\n\\u5165\\u529b\\u4f8b1\\u3067\\u3044\\u3046\\u3068\\u3053\\u308d\\u306e(14)\\u304c\\u3042\\u308a\\u3048\\u306a\\u3044\\u3053\\u3068\\u306b\\u6ce8\\u610f\\uff0e\\n\\u3064\\u307e\\u308a\\uff0cAB\\u304c\\u3068\\u3082\\u306b\\u6c7a\\u307e\\u3063\\u3066\\u3044\\u308b\\u3082\\u306e\\u4ee5\\u5916\\uff0c\\u53f3\\u5411\\u304d/\\u5de6\\u5411\\u304d\\u306f\\uff0c\\u672a\\u6c7a\\u5b9a\\u306e\\u3082\\u306e\\u3068\\u7d44\\u3080\\u3057\\u304b\\u306a\\u3044\\u306e\\u304b\\n\\n\\u306a\\u3093\\u3060\\u304b\\u8caa\\u6b32\\u3067\\u3067\\u304d\\u305d\\u3046\\u306a\\u6c17\\u3082\\u3059\\u308b...\\n(0d)\\u3092\\u3064\\u306a\\u3052\\u308b\\u304b\\uff1f\\u3092\\u3084\\u3063\\u3066\\uff0c\\u3067\\u304d\\u308b\\u306a\\u3089(d+1,x)\\u307f\\u305f\\u3044\\u306a\\u3053\\u3068\\u3092\\u307e\\u305f\\u3084\\u3063\\u3066\\uff0c\\u3068\\u884c\\u3051\\u3070\\u826f\\u3044\\uff1f\\n\\u3042\\u30fc\\u3067\\u3082\\uff0c\\u3053\\u308c\\u7d50\\u5c40\\u533a\\u9593\\u306e\\u60c5\\u5831\\u3092dp\\u307f\\u305f\\u3044\\u306b\\u6301\\u3064\\u304b\\uff0c\\u30e1\\u30e2\\u5316?\\n\\n\\u533a\\u9593\\u3092\\u6c7a\\u3081\\u305f\\u3068\\u304d\\uff0c\\u305d\\u306e\\u533a\\u9593\\u5185\\u3067OK\\u304b\\u3069\\u3046\\u304b\\u3092\\u6c7a\\u3081\\u308b\\u306e\\u306f\\u3081\\u3093\\u3069\\u3044\\u3051\\u3069\\uff0c\\n\\u305d\\u306e\\u533a\\u9593\\u304c\\u4e00\\u584a\\u306b\\u306a\\u308c\\u308b\\u304b\\u3069\\u3046\\u304b\\u306e\\u5224\\u5b9a\\u306f\\u697d(\\u5de6\\u53f3\\u304c\\u6c7a\\u307e\\u308c\\u3070\\u7d44\\u307f\\u65b9\\u306f\\u4e00\\u610f)\\n\\n\\u3053\\u308c\\u3092\\u5168\\u3066\\u306e[l,r)\\u3067\\u8a66\\u305b\\u3070\\u826f\\u3044\\n\\n\\\"\\\"\\\"\\ndef main():\\n    mod=10**9+7\\n    N=I()\\n    st=[0]*(2*N) # \\u4e0d\\u660e:0\\uff0c\\u5de6\\u5411\\u304d:-1\\uff0c\\u3000\\u53f3\\u5411\\u304d:1\\u3000\\u3000(\\u305f\\u3060\\u3057\\u76f8\\u65b9\\u304c\\u78ba\\u5b9a\\u6e08\\u307f\\u306e\\u4eba\\u306f0\\u3068\\u3059\\u308b)\\n    flag=1\\n    looked=[]#\\u4e57\\u308a\\u964d\\u308a\\u3059\\u308b\\u968e\\u304c\\u88ab\\u3063\\u3066\\u306f\\u3044\\u3051\\u306a\\u3044\\n    \\n    fixed=[-1]*(2*N) #\\u78ba\\u5b9a\\u3057\\u305f\\u76f8\\u65b9\\u304c\\u3069\\u3053\\u306b\\u3044\\u308b\\u304b\\uff0c\\u3044\\u306a\\u3051\\u308c\\u3070-1\\n    \\n    for i in range(N):\\n        a,b=MI()\\n        a-=1\\n        b-=1\\n        if a!=-2:\\n            looked.append(a)\\n        if b!=-2:\\n            looked.append(b)\\n            \\n        \\n        if a!=-2 and b!=-2:#\\u76f8\\u65b9\\u78ba\\u5b9a\\n            fixed[a]=b\\n            fixed[b]=a\\n            if b<=a:#\\u4e0a\\u306e\\u968e\\u304b\\u3089\\u4e57\\u3063\\u3066\\u304f\\u308b\\u4eba\\u304c\\u3044\\u305f\\u3089\\u4e0d\\u53ef\\n                flag==0\\n        else:\\n            #\\u5411\\u304d\\u3092\\u30bb\\u30c3\\u30c8\\n            if a!=-2:\\n                st[a]=1\\n            if b!=-2:\\n                st[b]=-1\\n            \\n    looked.sort()\\n    for i in range(len(looked)-1):\\n        aa=looked[i]\\n        bb=looked[i+1]\\n        if aa==bb:\\n            flag=0\\n            \\n    if flag==0:\\n        print(\\\"No\\\")\\n        return\\n        \\n    from collections import defaultdict\\n    dd = defaultdict(int)\\n    \\n    def check(a,d):\\n        # a\\u3092\\u5de6\\u7aef\\u3068\\u3057\\u3066\\uff0c(a,a+d)\\u3092\\u7d50\\u3079\\u308b\\u304b\\n        \\n        if a+2*d-1>=2*N:# \\u30aa\\u30fc\\u30d0\\u30fc\\n            return False\\n        \\n        for i in range(d):#a\\u304b\\u3089\\u4f55\\u307e\\u3059\\u53f3\\u306b\\u884c\\u3063\\u305f\\u3068\\u3053\\u308d\\u304b\\u3089\\u958b\\u59cb\\u3059\\u308b\\u304b\\n            # l\\u3068r\\u3092\\u7d50\\u3076\\n            l=a+i\\n            r=l+d\\n            \\n            # print(l,r)\\n            \\n            if fixed[l]!=-1:# l\\u306b\\u78ba\\u5b9a\\u76f8\\u65b9\\u304c\\u3044\\u308b\\u306a\\u3089\\n                if fixed[l]!=r:# r\\u3058\\u3083\\u306a\\u3044\\u3068\\u3060\\u3081\\n                    return False\\n            elif fixed[r]!=-1:# r\\u306b\\u78ba\\u5b9a\\u76f8\\u65b9\\u304c\\u3044\\u308b\\u306a\\u3089\\n                if fixed[r]!=l:# l\\u3058\\u3083\\u306a\\u3044\\u3068\\u3060\\u3081\\n                    return False\\n            else:#\\u3000l\\u3082r\\u3082\\u76f8\\u65b9\\u304c\\u672a\\u5b9a\\n                # l\\u306f\\u5de6\\u3092\\u5411\\u3044\\u3066\\u306f\\u3044\\u3051\\u306a\\u3044\\n                if st[l]==-1:\\n                    return False\\n                # r\\u306f\\u53f3\\u3092\\u5411\\u3044\\u3066\\u306f\\u3044\\u3051\\u306a\\u3044\\n                if st[r]==1:\\n                    return False\\n                \\n                # \\u4e00\\u898b\\u826f\\u3055\\u305d\\u3046\\u3060\\u3051\\u3069\\uff0c\\u9055\\u3046\\u4eba\\u540c\\u58eb\\u3092\\u7d50\\u3070\\u306a\\u3044\\u3068\\u3060\\u3081\\uff0c\\u3069\\u3061\\u3089\\u304b\\u306f0\\u51fa\\u306a\\u3051\\u308c\\u3070\\u306a\\u3089\\u306a\\u3044\\n                if st[l] * st[r] != 0:\\n                    return False\\n        return True\\n                \\n            \\n    # [l,r)\\u3067\\u3072\\u3068\\u307e\\u3068\\u3081\\u306b\\u3067\\u304d\\u308b\\u3068\\u3053\\u308d\\u3092\\u6709\\u5411\\u8fba\\u3067\\u7e4b\\u3050\\uff0c0\\u304b\\u30892N\\u307e\\u3067\\u884c\\u3051\\u305f\\u3089OK\\n    adj=[[]for _ in range(2*N+1)]\\n    for i in range(2*N):\\n        for d in range(1,N+3):\\n            if (i+2*d)<=2*N:\\n               if check(i,d):\\n                    adj[i].append(i+2*d)\\n                \\n    can=[0]*(2*N+1)\\n    can[0]=1\\n    \\n    import queue\\n    q=queue.Queue()\\n    q.put(0)\\n    \\n    while not q.empty():\\n        v=q.get()\\n        for nv in adj[v]:\\n            if can[nv]==0:\\n                can[nv]=1\\n                q.put(nv)\\n                \\n    # print(st)\\n    # print(fixed)\\n    # print(adj)        \\n    \\n    if can[-1]:\\n        print(\\\"Yes\\\")\\n    else:\\n        print(\\\"No\\\")\\n            \\n\\n  \\n        \\n    \\n\\nmain()\\n\", \"\\ndef main(): \\n    n = int(input())\\n    \\n    #\\u5404\\u968e\\u306e\\u4e57\\u964d\\u5ba2\\u306e\\u60c5\\u5831\\n    arr = [[0,0] for i in range(2*n+1)]\\n    \\n    for i in range(n):\\n        a,b = map(int,input().split())\\n        #\\u4e57\\u3063\\u305f\\u968e\\u5c64\\u306e\\u60c5\\u5831\\u304c\\u4e0e\\u3048\\u3089\\u308c\\u3066\\u3044\\u306a\\u3044\\n        #The \\n        if a==-1:\\n            pass\\n        #\\u5225\\u306e\\u4e57\\u5ba2\\u304c\\u305d\\u306e\\u968e\\u5c64\\u3067\\u4e57\\u964d\\u3057\\u3066\\u3044\\u306a\\u3044\\n        elif arr[a]==[0,0]:\\n            arr[a] = [i+1,b]\\n        #\\u5225\\u306e\\u4e57\\u5ba2\\u304c\\u305d\\u306e\\u968e\\u5c64\\u3067\\u4e57\\u964d\\u3057\\u3066\\u3044\\u308b\\u306e\\u3067\\u3001\\u554f\\u984c\\u6761\\u4ef6\\u3092\\u6e80\\u305f\\u3055\\u306a\\u3044\\n        else:\\n            arr[a] = [2**16,2**16]\\n        if b==-1:\\n            pass\\n        elif arr[b]==[0,0]:\\n            arr[b] = [-i-1,a]\\n        else:\\n            arr[b] = [2**16,2**16]\\n            \\n    #2i\\u968e\\u307e\\u3067\\u6761\\u4ef6\\u3092\\u6e80\\u305f\\u3059\\u968e\\u5c64\\u306e\\u7d44\\u307f\\u5408\\u308f\\u305b\\u304c\\u3042\\u308b\\u304b\\u3092\\u8a18\\u61b6\\n    ans = [False for i in range(n+1)]\\n    ans[0] = True\\n\\n    #lo\\u968e\\u304b\\u3089hi\\u968e\\u307e\\u3067\\u306b\\u3064\\u3044\\u3066\\u8003\\u3048\\u308b\\n    for hi in range(2,2*n+2,2):\\n        for lo in range(1,hi+1,2):\\n          \\n          \\t#lo-1\\u968e\\u3078\\u305f\\u3069\\u308a\\u7740\\u304f\\u7d44\\u307f\\u5408\\u308f\\u305b\\u304c\\u306a\\u3044\\u306e\\u3067\\u30b9\\u30ad\\u30c3\\u30d7\\n            if not ans[lo//2]:\\n                continue\\n                \\n            #lo\\u968e\\u304b\\u3089hi\\u968e\\u307e\\u3067\\u306b\\u3064\\u3044\\u3066\\u3001\\u554f\\u984c\\u6761\\u4ef6\\u3092\\u6e80\\u305f\\u3057\\u3066\\u3044\\u308b\\u304b\\n            flag = True\\n            for i in range(lo,lo+(hi-lo+1)//2):\\n              \\n              \\t#x\\u968e\\u3067\\u4e57\\u5ba2\\u304c\\u4e57\\u3063\\u305f\\u5834\\u5408\\u3001y\\u968e\\u3067\\u964d\\u308a\\u308c\\u3070\\u6761\\u4ef6\\u3092\\u6e80\\u305f\\u3059\\n                x,y = arr[i],arr[i+(hi-lo+1)//2]\\n\\n                #x\\u968e\\u3001y\\u968e\\u5171\\u306b\\u307e\\u3060\\u4e57\\u964d\\u3059\\u308b\\u4e57\\u5ba2\\u304c\\u6307\\u5b9a\\u3055\\u308c\\u3066\\u3044\\u306a\\u3044\\n                if x==[0,0] and y==[0,0]:\\n                    continue\\n                    \\n                #x\\u968e\\u306e\\u307f\\u6307\\u5b9a\\u3055\\u308c\\u3066\\u3044\\u306a\\u3044\\n                elif x==[0,0]:\\n                  \\t#y\\u968e\\u3067\\u5ba2\\u304c\\u4e57\\u3063\\u3066\\u3044\\u308b\\u304b\\u3001y\\u968e\\u3067\\u964d\\u308a\\u305f\\u5ba2\\u306fx\\u968e\\u4ee5\\u5916\\u306e\\u968e\\u5c64\\u3067\\u4e57\\u3063\\u3066\\u3044\\u308b\\n                    if y[0]>0 or y[1]!=-1:\\n                        flag = False\\n                        break\\n                        \\n                elif y==[0,0]:\\n                    if x[0]<0 or x[1]!=-1:\\n                        flag = False\\n                        break\\n                        \\n                #x\\u968e\\u3001y\\u968e\\u5171\\u306b\\u4e57\\u5ba2\\u304c\\u6307\\u5b9a\\u3055\\u308c\\u3066\\u3044\\u308b\\n                else:\\n                  \\t#x\\u968e\\u3001y\\u968e\\u3067\\u4e57\\u964d\\u3057\\u305f\\u5ba2\\u304c\\u540c\\u3058\\u3067\\u306a\\u3044\\u304b\\u3001x\\u968e\\u3067\\u964d\\u308a\\u3066y\\u968e\\u3067\\u4e57\\u3063\\u3066\\u3044\\u308b\\n                    if x[0]!=-y[0] or x[0]<0:\\n                        flag = False\\n                        break\\n                    elif x[1]!=i+1+(hi-lo-1)//2 or y[1]!=i:\\n                        flag = False\\n                        break\\n\\n            #lo\\u968e\\u304b\\u3089hi\\u968e\\u307e\\u3067\\u306e\\u7d44\\u307f\\u5408\\u308f\\u305b\\u304c\\u6761\\u4ef6\\u3092\\u6e80\\u305f\\u3057\\u3066\\u3044\\u308b\\u304b\\n            if not flag:\\n                continue\\n            ans[hi//2] = True\\n\\n    if ans[-1]:\\n        print(\\\"Yes\\\")\\n    else:\\n        print(\\\"No\\\")\\n\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"(n,),*t=[[*map(int,t.split())]for t in open(0)]\\ne=[f:=0]*n*4\\nfor a,b in t:\\n j=0\\n for c,d in t:f|=d>0<a<c<b>b-a!=d-c;t[j]=c,(d,c+b-a)[b>c>a>d];j+=1\\nfor a,b in t:e[a]+=1;e[b]+=1\\nprint('YNeos'[f+max(e[:-1])>1::2])\", \"def main():\\n    n = int(input())\\n    ab = [list(map(int, input().split())) for _ in [0]*n]\\n    d_left = dict()\\n    d_right = dict()\\n    s_left = set()\\n    s_right = set()\\n    s = set()\\n    for a, b in ab:\\n        if a == -1 and b == -1:\\n            continue\\n        elif a == -1:\\n            if b in s:\\n                print(\\\"No\\\")\\n                return 0\\n            s_right.add(b)\\n            s.add(b)\\n        elif b == -1:\\n            if a in s:\\n                print(\\\"No\\\")\\n                return 0\\n            s_left.add(a)\\n            s.add(a)\\n        elif a > b:\\n            print(\\\"No\\\")\\n            return 0\\n        else:\\n            if a in s:\\n                print(\\\"No\\\")\\n                return 0\\n            if b in s:\\n                print(\\\"No\\\")\\n                return 0\\n            d_left[a] = b\\n            d_right[b] = a\\n            s.add(a)\\n            s.add(b)\\n\\n    def check(x, y):\\n        size = (y-x)//2\\n        for i in range(x, x+size):\\n            if i in d_left:\\n                if d_left[i] != i+size:\\n                    return False\\n            elif i in s_right:\\n                return False\\n            elif i in d_right:\\n                return False\\n            elif i in s_left:\\n                if i+size in s_right:\\n                    return False\\n        for i in range(x+size, x+2*size):\\n            if i in d_right:\\n                if d_right[i] != i-size:\\n                    return False\\n            elif i in s_left:\\n                return False\\n            elif i in d_left:\\n                return False\\n            elif i in s_right:\\n                if i-size in s_left:\\n                    return False\\n        return True\\n    dp = [False]*(n+1)\\n    dp[0] = True\\n\\n    for i in range(1, n+1):\\n        for j in range(i-1, -1, -1):\\n            if dp[j]:\\n                if check(2*j+1, 2*i+1):\\n                    dp[i] = True\\n                    break\\n    print([\\\"No\\\", \\\"Yes\\\"][dp[-1]])\\n\\n\\nmain()\", \"(n,),*t=[[*map(int,t.split())]for t in open(0)]\\ne=[f:=0]*n*4\\nfor a,b in t:\\n j=0\\n for c,d in t:f|=d>0<a<c<b>b-a!=d-c;t[j]=c,(d,c+b-a)[b>c>a>0>d];j+=1\\nfor a,b in t:e[a]+=1;e[b]+=1\\nprint('YNeos'[f+max(e[:-1])>1::2])\", \"def main():\\n    n = int(input())\\n    ab = [list(map(int, input().split())) for _ in [0]*n]\\n    d_left = dict()\\n    d_right = dict()\\n    s_left = set()\\n    s_right = set()\\n    s = set()\\n    for a, b in ab:\\n        if a == -1 and b == -1:\\n            continue\\n        elif a == -1:\\n            if b in s:\\n                print(\\\"No\\\")\\n                return 0\\n            s_right.add(b)\\n            s.add(b)\\n        elif b == -1:\\n            if a in s:\\n                print(\\\"No\\\")\\n                return 0\\n            s_left.add(a)\\n            s.add(a)\\n        elif a > b:\\n            print(\\\"No\\\")\\n            return 0\\n        else:\\n            if a in s:\\n                print(\\\"No\\\")\\n                return 0\\n            if b in s:\\n                print(\\\"No\\\")\\n                return 0\\n            d_left[a] = b\\n            d_right[b] = a\\n            s.add(a)\\n            s.add(b)\\n\\n    def check(x, y):\\n        size = (y-x)//2\\n        for i in range(x, x+size):\\n            if i in d_left:\\n                if d_left[i] != i+size:\\n                    return False\\n            elif i in s_right:\\n                return False\\n            elif i in d_right:\\n                return False\\n            elif i in s_left:\\n                if i+size in s_right:\\n                    return False\\n        for i in range(x+size, x+2*size):\\n            if i in d_right:\\n                if d_right[i] != i-size:\\n                    return False\\n            elif i in s_left:\\n                return False\\n            elif i in d_left:\\n                return False\\n            elif i in s_right:\\n                if i-size in s_left:\\n                    return False\\n        return True\\n    dp = [False]*(n+1)\\n    dp[0] = True\\n\\n    for i in range(1, n+1):\\n        for j in range(i-1, -1, -1):\\n            if dp[j]:\\n                if check(2*j+1, 2*i+1):\\n                    dp[i] = True\\n                    break\\n    print([\\\"No\\\", \\\"Yes\\\"][dp[-1]])\\n\\n\\nmain()\", \"import sys\\nsys.setrecursionlimit(1919810)\\n\\ndef dfs(i):\\n    if i == 2 * n + 1:\\n        nonlocal ans\\n        ans = \\\"Yes\\\"\\n        return\\n    if ans == \\\"No\\\":\\n        if y[i] == 0:\\n            for k in range(1, n):\\n                if ok(k, i):\\n                    dfs(i + 2 * k)\\n        else:\\n            if ok(y[i], i):\\n                dfs(i + 2 * y[i])\\n    return\\n\\ndef ok(k, i):\\n    if k + i >= 2 * n + 1:\\n        return 0\\n    f = 1\\n    for l in range(k):\\n        if k + i + l >= 2 * n + 1:\\n            f = 0\\n            break\\n        if x[i + l] == 2 or x[k + i + l] == 1:\\n            f = 0\\n            break\\n        if not (y[i + l] == 0 or y[i + l] == k):\\n            f = 0\\n            break\\n        if not z[i + l] == z[k + i + l] and min(z[i + l], z[k + i + l]) >= 1:\\n            f = 0\\n            break\\n    return f\\n\\nn = int(input())\\nans = \\\"Yes\\\"\\nx = [0] * (2 * n + 2)\\ny = [0] * (2 * n + 2)\\nz = [0] * (2 * n + 2)\\nfor i in range(1, n + 1):\\n    a, b = map(int, input().split())\\n    if a >= b and not (a == -1 or b == -1):\\n        ans = \\\"No\\\"\\n    if not (x[a] == 0 and x[b] == 0):\\n        ans = \\\"No\\\"\\n    if not a == -1:\\n        x[a] = 1\\n        z[a] = i\\n    if not b == -1:\\n        x[b] = 2\\n        z[b] = i\\n    if not (a == -1 or b == -1):\\n        y[a] = b - a\\nif ans == \\\"No\\\":\\n    print(ans)\\n    return\\nans = \\\"No\\\"\\ndfs(1)\\nprint(ans)\", \"(n,),*t=[[*map(int,t.split())]for t in open(0)]\\ne=[f:=0]*n*4\\nfor a,b in t:\\n for j in range(n):\\n  c,d=t[j];f|=d>0<a<c<b>b-a!=d-c\\n  if b>c>a>0>d:t[j]=c,c+b-a\\nfor a,b in t:e[a]+=1;e[b]+=1\\nprint('YNeos'[f+max(e[:-1])>1::2])\", \"import sys\\n\\ndef main():\\n    sys.setrecursionlimit(10**7)\\n    LI = lambda : [int(x) for x in sys.stdin.readline().split()]\\n    NI = lambda : int(sys.stdin.readline())\\n\\n    N = NI()\\n\\n    c = [0] * (2*N+1)\\n    f = [0] * (2*N+1)\\n    for _ in range(N):\\n        a,b = LI()\\n        if a > 0:\\n            if c[a] != 0 or f[a] != 0:\\n                print('No')\\n                return\\n            c[a] = b\\n        if b > 0:\\n            if c[b] != 0 or f[b] != 0:\\n                print('No')\\n                return\\n            f[b] = a\\n        if a >= b and a > 0 and b > 0:\\n            print('No')\\n            return\\n    dp = [[-1] * (2*N+1) for _ in range(2*N+1)]\\n\\n    def check(i,j):\\n        if dp[i][j] >= 0: return bool(dp[i][j])\\n        for k in range(i,j+1):\\n            if c[k] != 0:\\n                if k > (i+j) // 2:\\n                    break\\n                if c[k] > 0 and c[k] - k != (j-i+1) // 2:\\n                    break\\n                if c[k] < 0 and f[k + (j-i+1) // 2] != 0:\\n                    break\\n            if f[k] != 0:\\n                if k <= (i+j) // 2:\\n                    break\\n                if f[k] > 0 and k - f[k] != (j-i+1) // 2:\\n                    break\\n                if f[k] < 0 and c[k - (j-i+1) // 2] != 0:\\n                    break\\n        else:\\n            dp[i][j] = 1\\n            return bool(dp[i][j])\\n\\n        for k in range(i+2,j,2):\\n            ret1 = check(i,k-1)\\n            ret2 = check(k,j)\\n            if ret1 and ret2:\\n                dp[i][j] = 1\\n                return bool(dp[i][j])\\n\\n        dp[i][j] = 0\\n        return bool(dp[i][j])\\n\\n    if check(1,2*N):\\n        print('Yes')\\n    else:\\n        print('No')\\n\\n\\n\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"(n,),*t=[[*map(int,t.split())]for t in open(0)]\\nf=0\\nfor _ in t:\\n for a,b in t:\\n  if a>0<b:\\n   for j,(c,d)in enumerate(t):\\n    f|=a<c<b>b-a!=d-c<d>0\\n    if b>c>a>0>d:t[j]=c,c+b-a\\n    if a<d<b>0>c:t[j]=d-b+a,d\\nc=[0]*n*4\\nfor a,b in t:c[a]+=1;c[b]+=1\\nprint('YNeos'[f+max(c[:-1])>1::2])\", \"def match(l,r):\\n    L=r-l\\n    if L%2==1: return 0\\n    for i in range(l,l+L//2):\\n        if R[P[i]]>=r and R[P[i]]!=-1: return 0\\n        if (P[i]==Q[L//2+i] or P[i]==0 or Q[L//2+i]==0)and Q[i]==P[L//2+i]==0: continue\\n        return 0\\n    return 1\\nN=int(input())\\nP,Q=[0]*(2*N),[0]*(2*N)\\nR=[-1]*(N+1)\\nfor i in range(1,N+1):\\n    A,B=map(int,input().split())\\n    if (A!=-1and P[A-1]!=0)or(B!=-1 and Q[B-1]!=0):print(\\\"No\\\");return\\n    if A!=-1:P[A-1]=i\\n    if B!=-1:Q[B-1]=i;R[i]=B-1\\ndp=[0]*(2*N+1)\\ndp[0]=1\\nfor i in range(2,2*N+1):\\n    for j in range(i):\\n        if dp[j]*match(j,i):dp[i]=1;break\\nprint('NYoe s'[dp[-1]::2])\", \"N, *AB = map(int, open(0).read().split())\\nAB = list(zip(*[iter(AB)] * 2))\\n\\n\\nmemo = [False] * (2 * N + 1)\\nfor i, (a, b) in enumerate(AB):\\n    if (a != -1 and memo[a] or b != -1 and memo[b] or\\n        a != -1 and b != -1 and a > b):\\n        print(\\\"No\\\")\\n        return\\n\\n    if a != -1:\\n        memo[a] = True\\n    if b != -1:\\n        memo[b] = True\\n\\ndp = [True] + [False] * N\\nfor i in range(N):\\n    if not dp[i]:\\n        continue\\n\\n    for j in range(1, N - i + 1):\\n        if dp[i + j]:\\n            continue\\n\\n        ok = True\\n        for a, b in AB:\\n            if not ok:\\n                break\\n\\n            in_a = (2 * i + 1 <= a <= 2 * i + j)\\n            in_b = (2 * i + j + 1 <= b <= 2 * i + 2 * j)\\n            if a != -1 and b != -1 and (in_a ^ in_b) or in_a and in_b and b - a != j:\\n                ok = False\\n\\n            if a != -1 and 2 * i + j + 1 <= a <= 2 * i + 2 * j or in_a and b - a != j and memo[a + j]:\\n                ok = False\\n\\n            if b != -1 and 2 * i + 1 <= b <= 2 * i + j or in_b and b - a != j and memo[b - j]:\\n                ok = False\\n\\n        dp[i + j] = ok\\n\\nif dp[N]:\\n    print(\\\"Yes\\\")\\nelse:\\n    print(\\\"No\\\")\", \"(n,),*t=[[*map(int,t.split())]for t in open(0)]\\ne=[f:=0]*n*4\\nfor a,b in t:\\n for j,(c,d)in enumerate(t):\\n  f|=d>0<a<c<b>b-a!=d-c\\n  if b>c>a>0>d:t[j]=c,c+b-a\\n  if c<0<a<d<b:t[j]=d-b+a,d\\nfor a,b in t:e[a]+=1;e[b]+=1\\nprint('YNeos'[f+max(e[:-1])>1::2])\", \"N = int(input())\\nAB = [0] * N\\nL = [[-1] * 2 for i in range(2 * N + 1)]\\nfor i in range(N):\\n  a, b = list(map(int, input().split()))\\n  AB[i] = [a, b]\\n  if a != -1:\\n    if L[a] == [-1, -1]:\\n      L[a] = [1, i]\\n    else:\\n      print(\\\"No\\\")\\n      return\\n  if b != -1:\\n    if L[b] == [-1, -1]:\\n      L[b] = [0, i]\\n    else:\\n      print(\\\"No\\\")\\n      return   \\n    \\n  \\n#print(L)  \\n  \\nDP = [False] * (2 * N + 1)\\nDP[0] = True\\nfor i in range(2, 2 * N + 1, 2):\\n  for j in range(1, i, 2):#j ~ i\\u3092\\u4e00\\u3064\\u3068\\u3057\\u3066\\u8003\\u3048\\u308b\\n    if DP[j - 1]:#False\\u306a\\u3089\\u305d\\u3082\\u305d\\u3082\\u8003\\u3048\\u306a\\u304f\\u3066OK\\n      x = int((i - j + 1) / 2)#(j, j+x), (j+1, j+1+x), ... , (i-x, i)\\n      T = True\\n      for k in range(j, i + 1):#(k, k + x) or (k - x, k)\\n        if L[k] == [-1, -1]:\\n          continue\\n        else:\\n          p, q = L[k]#p:\\u5411\\u304d, q:\\u4eba\\u306eid\\n          if p == 0 and (k - x >= j):#k \\u306f\\u5927\\u304d\\u3044\\u65b9\\u306e\\u5024 #k - x\\u306b\\u76f8\\u65b9\\u304c\\u5165\\u308c\\u308c\\u3070OK\\n            if AB[q][0] == -1:#\\u76f8\\u65b9\\u306e\\u4f4d\\u7f6e\\u672a\\u5b9a\\n              if L[k - x] == [-1, -1]:\\n                continue\\n              else:\\n                T = False\\n            elif AB[q][0] == k - x:#\\u76f8\\u65b9\\u304ck-x\\n              continue\\n            else:#\\u76f8\\u65b9\\u304c\\u9055\\u3046\\u3068\\u3053\\u308d\\u306b\\u3044\\u308b\\n              T = False\\n          elif p == 1 and (k + x <= i):#k \\u306f\\u5c0f\\u3055\\u3044\\u65b9\\u306e\\u5024 #k + x\\u306b\\u76f8\\u65b9\\u304c\\u5165\\u308c\\u308c\\u3070OK\\n            if AB[q][1] == -1:\\n              if L[k + x] == [-1, -1]:\\n                continue\\n              else:\\n                T = False\\n            elif AB[q][1] == k + x:\\n              continue\\n            else:\\n              T = False \\n          else:\\n            T = False\\n      if T:\\n        DP[i] = True\\n        \\n  #print(DP)        \\nif DP[-1]:\\n  print(\\\"Yes\\\")\\nelse:\\n  print(\\\"No\\\")\\n  \\n    \\n\\n\", \"import collections\\nimport sys\\nfrom functools import total_ordering\\nfrom typing import List\\n\\nsys.setrecursionlimit(10 ** 9)\\n\\n\\ndef lmi():\\n    return list(map(int, input().split()))\\n\\n\\ndef main():\\n    N = int(input())\\n    AB = [lmi() for _ in range(N)]\\n    result = solve(N, AB)\\n    print(result)\\n\\n\\ndef solve(N: int, AB: List[List[int]]) -> str:\\n    for a, b in AB:\\n        if a != -1 and b != -1 and not a < b:\\n            return 'No'\\n    tp = [0] * (2 * N + 1)\\n    for a, b in AB:\\n        if a != -1:\\n            if tp[a] != 0:\\n                return 'No'\\n            tp[a] = -1\\n        if b != -1:\\n            if tp[b] != 0:\\n                return 'No'\\n            tp[b] = 1\\n    P = [[0] * (2 * N + 1) for _ in range(2 * N + 1)]\\n    for a, b in AB:\\n        if a != -1 and b != -1:\\n            for i in range(0, 2 * N + 1):\\n                P[a][i] = -1\\n                P[i][a] = -1\\n                P[i][b] = -1\\n                P[b][i] = -1\\n            for i in range(0, a):\\n                for j in range(b + 1, 2 * N + 1):\\n                    P[i][j] = -1\\n            for i in range(a + 1, b):\\n                for j in range(i, b):\\n                    P[i][j] = -1\\n            P[a][b] = 0\\n        elif a != -1:\\n            for i in range(a + 1, 2 * N + 1):\\n                if tp[i] != 0:\\n                    P[a][i] = -1\\n            for i in range(1, a):\\n                P[i][a] = -1\\n        elif b != -1:\\n            for j in range(0, b):\\n                if tp[j] != 0:\\n                    P[j][b] = -1\\n            for j in range(b + 1, 2 * N + 1):\\n                P[j][b] = -1\\n\\n    dp = [False] * (2 * N + 1)\\n    dp[0] = True\\n    for i in range(0, 2 * N + 1, 2):\\n        if dp[i]:\\n            for j in range(i + 2, 2 * N + 1, 2):\\n                ng = False\\n                step = (j - i) // 2\\n                for k in range(step):\\n                    a = i + 1 + k\\n                    b = a + step\\n                    if P[a][b] == -1:\\n                        ng = True\\n                        break\\n                if not ng:\\n                    dp[j] = True\\n\\n    return 'Yes' if dp[2 * N] else 'No'\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"#from collections import deque,defaultdict\\nprintn = lambda x: print(x,end='')\\ninn = lambda : int(input())\\ninl   = lambda: list(map(int, input().split()))\\ninm   = lambda:      map(int, input().split())\\nins = lambda : input().strip()\\nDBG = True  and False\\nBIG = 10**18\\nR = 10**9 + 7\\n#R = 998244353\\n\\ndef ddprint(x):\\n  if DBG:\\n    print(x)\\n\\ndef leaf(x,y):\\n    nonlocal hl\\n    if (x,y) in hl:\\n        return hl[(x,y)]\\n    m = (y-x)//2\\n    for aa,bb in pairs:\\n        if aa<x<bb or aa<y<bb or (x<=aa<bb<=y and bb-aa!=m):\\n            hl[(x,y)] = False\\n            return False\\n    for i in range(m):\\n        if bl[x+i] or al[x+m+i]:\\n            hl[(x,y)] = False\\n            return False\\n    hl[(x,y)] = True\\n    return True\\n\\ndef dfs(x,y):\\n    nonlocal hd\\n    if leaf(x,y):\\n        return True\\n    if y-x==2:\\n        return False\\n    if (x,y) in hd:\\n        return hd[(x,y)]\\n    for aa,bb in pairs:\\n        if aa<x<bb or aa<y<bb:\\n            hd[(x,y)] = False\\n            ddprint(f\\\"dfs {x=} {y=} F\\\")\\n            return False\\n    for i in range(x+2,y,2):\\n        if dfs(x,i) and dfs(i,y):\\n            hd[(x,y)] = True\\n            ddprint(f\\\"dfs {x=} {y=} T\\\")\\n            return True\\n    hd[(x,y)] = False\\n    ddprint(f\\\"dfs {x=} {y=} F2\\\")\\n    return False\\n\\n\\nn = inn()\\nal = [False]*(2*n)\\nbl = [False]*(2*n)\\naonly = []\\nbonly = []\\npairs = []\\nfor i in range(n):\\n    a,b = inm()\\n    a -= 1\\n    b -= 1\\n    if a>=0 and (al[a] or bl[a]) or b>=0 and (al[b] or bl[b]):\\n        print('No')\\n        return\\n    if a>=0:\\n        al[a] = True\\n        if b<0:\\n            aonly.append(a)\\n    if b>=0:\\n        bl[b] = True\\n        if a<0:\\n            bonly.append(b)\\n    if a>=0 and b>=0:\\n        if a>=b:\\n            print('No')\\n            return\\n        pairs.append((a,b))\\n\\nddprint(al)\\nddprint(bl)\\nddprint(pairs)\\n\\nchged = True\\nwhile chged:\\n  ddprint(\\\"chg loop\\\")\\n  chged = False\\n  for aa in aonly:\\n    ddprint(f\\\"{aa=}\\\")\\n    dela = False\\n    for i in range(len(pairs)):\\n        ap,bp = pairs[i]\\n        ddprint(f\\\"{i=} {ap=} {bp=}\\\")\\n        if ap<aa<bp:\\n            bb = aa+bp-ap\\n            if bb>=2*n or al[bb] or bl[bb]:\\n                ddprint(f\\\"{bb=}\\\")\\n                print('No')\\n                return\\n            pairs.append((aa,bb))\\n            bl[bb] = True\\n            chged = True\\n            dela = True\\n            break\\n    if dela:\\n        aonly.remove(aa)\\n        break\\n\\n  for bb in bonly:\\n    delb = False\\n    for i in range(len(pairs)):\\n        ap,bp = pairs[i]\\n        if ap<bb<bp:\\n            aa = bb-(bp-ap)\\n            if aa<0 or al[aa] or bl[aa]:\\n                print('No')\\n                return\\n            al[aa] = True\\n            pairs.append((aa,bb))\\n            delb = True\\n            chged = True\\n            break\\n    if delb:\\n        bonly.remove(bb)\\n        break\\n\\nhd = {}\\nhl = {}\\nprint('Yes' if dfs(0,2*n) else 'No')\\n\", \"(n,),*t=[[*map(int,t.split())]for t in open(0)]\\ns='Yes'\\nfor _ in t:\\n  for a,b in t:\\n    if min(a,b)<0:continue\\n    for j,(c,d)in enumerate(t):\\n      if a<c<b>b-a!=d-c<d>0:s='No'\\n      if b>c>a>0>d:t[j]=c,c+b-a\\n      if a<d<b>0>c:t[j]=d-b+a,d\\nc=[0]*n*4\\nfor a,b in t:\\n  c[a]+=1\\n  c[b]+=1\\nprint((s,'No')[max(c[:n*3])>1])\", \"N = int(input())\\nAB = [list(map(int,input().split())) for _ in range(N)]\\n\\njudge = True\\nflag = [0]*201\\n\\nfor i in AB:\\n  if i[0]==-1:\\n    if i[1]!=-1:\\n      if flag[i[1]]:\\n        judge = False\\n      else:\\n        flag[i[1]] = i\\n  else:\\n    if i[1]==-1:\\n      if flag[i[0]]:\\n        judge = False\\n      else:\\n        flag[i[0]] = i\\n    else:\\n      if (flag[i[0]])or(flag[i[1]]):\\n        judge = False\\n      else:\\n        if i[0]>=i[1]:\\n          judge = False\\n        else:\\n          flag[i[0]] = i\\n          flag[i[1]] = i\\n\\ndp = [0] * (2*N+1)\\ndp[0] = 1\\nfor left in range(1,2*N,2):\\n  for right in range(left+1, 2*N + 1,2):\\n    length = (right - left + 1)//2\\n    for i in range(left, left + length):\\n      x = flag[i]\\n      if x:\\n        if (x[0]!=-1)and(x[1]!=-1)and(x[1]-x[0]!=length):\\n          break\\n        elif (x[0]==-1):\\n          break\\n        elif (x[1]==-1)and(flag[i+length]):\\n          break\\n        elif (x[1]==i):\\n          break\\n          \\n      else:\\n        if (flag[i+length])and(flag[i+length][0]!=-1)and(flag[i+length][0]!=i):\\n          break\\n          \\n    else:\\n      if dp[left-1]:\\n        dp[right] = 1\\n        \\nif judge and dp[-1]:\\n  print('Yes')\\nelse:\\n  print('No')\", \"(n,),*t=[[*map(int,t.split())]for t in open(0)]\\ne=[f:=0]*n*4\\nfor a,b in t:\\n if a>0<b:\\n  for j,(c,d)in enumerate(t):\\n   f|=a<c<b>b-a!=d-c<d>0\\n   if b>c>a>0>d:t[j]=c,c+b-a\\n   if a<d<b>0>c:t[j]=d-b+a,d\\nfor a,b in t:e[a]+=1;e[b]+=1\\nprint('YNeos'[f+max(e[:-1])>1::2])\", \"_,*t=[[*map(int,t.split())]for t in open(0)]\\ne=[f:=0]*999\\nfor a,b in t:\\n j=0\\n for c,d in t:f|=d>0<a<c<b>b-a!=d-c;t[j]=c,(d,c+b-a)[b>c>a>d];j+=1\\nfor a,b in t:e[a]+=1;e[b]+=1\\nprint('YNeos'[f+max(e[:-1])>1::2])\", \"(n,),*t=[[*map(int,t.split())]for t in open(0)]\\ns='Yes'\\nr=range(n)\\nfor _ in r:\\n  for a,b in t:\\n    if min(a,b)<0:continue\\n    for j in r:\\n      c,d=t[j]\\n      if a<c<b>b-a!=d-c<d>0<c:s='No'\\n      if b>c>a>0>d:t[j]=c,c+b-a\\n      if a<d<b>0>c:t[j]=d-b+a,d\\nc=[0]*n*4\\nfor a,b in t:\\n  c[a]+=1\\n  c[b]+=1\\nprint((s,'No')[max(c[:n*3])>1])\", \"n = int(input())\\ninout = [[0,0] for i in range(2*n+1)]\\n\\nfor i in range(n):\\n    a,b = map(int,input().split())\\n    if a!=-1: \\n        if inout[a]==[0,0]:\\n            inout[a] = [i+1,b]\\n        else:\\n            print('No')\\n            return\\n    if b!=-1:\\n        if inout[b]==[0,0]:\\n            inout[b] = [-i-1,a]\\n        else:\\n            print('No')\\n            return\\n            \\nans = [False for i in range(n+1)]\\nans[0] = True\\n\\nfor OUT in range(2,2*n+1,2):\\n    for IN in range(1,OUT+1,2):\\n        if ans[IN//2]:\\n            flg=True\\n            for i in range(IN,IN+(OUT-IN+1)//2):\\n                x=inout[i]\\n                y=inout[i+(OUT-IN+1)//2]\\n                if x==[0,0] and y==[0,0]:\\n                    continue\\n                elif x==[0,0]:\\n                    if y[0]>0 or y[1]!=-1:\\n                        flg=False\\n                        break\\n                elif y==[0,0]:\\n                    if x[0]<0 or x[1]!=-1:\\n                        flg=False\\n                        break\\n                else:\\n                    if x[0]!=-y[0] or x[0]<0:\\n                        flg=False\\n                        break\\n                    elif x[1]!=i+(OUT-IN+1)//2 or y[1]!=i:\\n                        flg=False\\n                        break\\n            if flg==False: continue\\n            ans[OUT//2]=True\\nif ans[-1]:\\n    print(\\\"Yes\\\")\\nelse:\\n    print(\\\"No\\\")\", \"import sys\\n\\ndef input(): return sys.stdin.readline().strip()\\ndef list2d(a, b, c): return [[c for j in range(b)] for i in range(a)]\\ndef list3d(a, b, c, d): return [[[d for k in range(c)] for j in range(b)] for i in range(a)]\\ndef list4d(a, b, c, d, e): return [[[[e for l in range(d)] for k in range(c)] for j in range(b)] for i in range(a)]\\ndef ceil(x, y=1): return int(-(-x // y))\\ndef INT(): return int(input())\\ndef MAP(): return list(map(int, input().split()))\\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\\ndef Yes(): print('Yes')\\ndef No(): print('No')\\ndef YES(): print('YES')\\ndef NO(): print('NO')\\nsys.setrecursionlimit(10**9)\\nINF = 10**19\\nMOD = 10**9 + 7\\nEPS = 10**-10\\n\\nN = INT()\\nS = set()\\nS1 = set()\\nS2 = set()\\nused = [-1] * (N*2)\\nfor i in range(N):\\n    a, b = MAP()\\n    a -= 1; b -= 1\\n    if a != -2 and b != -2 and a >= b or a in S or b in S:\\n        No()\\n        return\\n    if a != -2:\\n        S.add(a)\\n        S1.add(i)\\n        used[a] = i\\n    if b != -2:\\n        S.add(b)        \\n        S2.add(i)\\n        used[b] = i\\nN *= 2\\n\\ndef check(l, r):\\n    d = r - l\\n    for i in range(d//2):\\n        fr = used[l+i]\\n        to = used[l+d//2+i]\\n        if fr == to:\\n            continue\\n        if fr == -1 and to not in S1:\\n            continue\\n        if to == -1 and fr not in S2:\\n            continue\\n        return False\\n    return True\\n\\n# dp[l][r] := \\u533a\\u9593[l,r)\\u3067\\u30b0\\u30eb\\u30fc\\u30d7\\u3092\\u5f62\\u6210\\u3067\\u304d\\u308b\\u304b\\u3069\\u3046\\u304b\\ndp = list2d(N+1, N+1, False)\\nfor i in range(N-1):\\n    dp[i][i+2] = check(i, i+2)\\nfor d in range(4, N+1, 2):\\n    for l in range(N+1-d):\\n        r = l + d\\n        for m in range(l+1, r):\\n            dp[l][r] |= dp[l][m] & dp[m][r]\\n        # \\u3053\\u306e[l,r)\\u30921\\u3064\\u306e\\u533a\\u9593\\u3068\\u3057\\u3066\\u30c1\\u30a7\\u30c3\\u30af\\n        dp[l][r] |= check(l, r)\\nif dp[0][N]:\\n    Yes()\\nelse:\\n    No()\\n\", \"n = int(input())\\nab = [list(map(int, input().split())) for i in range(n)]\\ncnt = [0] * (2 * n)\\nlis = [-1] * (2 * n)\\nfor i, (a, b) in enumerate(ab):\\n    if a != -1:\\n        if lis[a - 1] >= 0:\\n            print(\\\"No\\\");return\\n        cnt[a - 1] = 1\\n        lis[a - 1] = i\\n    if b != -1:\\n        if lis[b - 1] >= 0:\\n            print(\\\"No\\\");return\\n        cnt[b - 1] = -1\\n        lis[b - 1] = i\\ndef ok(l, r):\\n    if min(cnt[l:(l + r) // 2]) == -1 or max(cnt[(l + r) // 2:r]) == 1:\\n        return False\\n    lis_l, lis_r = lis[l:(l + r) // 2], lis[(l + r) // 2:r]\\n    for i in range(len(lis_l)):\\n        if lis_l[i] == lis_r[i]:\\n            continue\\n        elif lis_l[i] != -1 != lis_r[i]:\\n            return False\\n        elif (lis_l[i] != -1 and lis_l[i] in lis_r) or (lis_r[i] != -1 and lis_r[i] in lis_l):\\n            return False\\n    return True\\ndp = [False] * (n + 1)\\ndp[0] = True\\nfor i in range(n):\\n    if dp[i]:\\n        for j in range(i + 1, n + 1):\\n            if ok(i * 2, j * 2):\\n                dp[j] = True\\n    else:\\n        continue\\nprint(\\\"Yes\\\" if dp[-1] else \\\"No\\\")\\n\", \"import sys\\ninput = lambda : sys.stdin.readline().rstrip()\\nsys.setrecursionlimit(max(1000, 10**9))\\nwrite = lambda x: sys.stdout.write(x+\\\"\\\\n\\\")\\n\\nn = int(input())\\nab = [tuple(map(int, input().split())) for _ in range(n)]\\nt = [None]*(2*n)\\nans = None\\nfor a,b in ab:\\n    if a>0 and b>0:\\n        if t[a-1] is not None or a>=b:\\n            ans = -1\\n            break\\n        if t[b-1] is not None:\\n            ans = -1\\n            break\\n        t[a-1] = (1, b-a)\\n        t[b-1] = (2, b-a)\\n    elif a>0:\\n        if t[a-1] is not None:\\n            ans = -1\\n            break\\n        t[a-1] = (1, None) # \\u4e57\\u3063\\u305f\\n    elif b>0:\\n        if t[b-1] is not None:\\n            ans = -1\\n            break\\n        t[b-1] = (2, None) # \\u964d\\u308a\\u305f\\nif ans==-1:\\n    print(\\\"No\\\")\\nelse:\\n    for i in range(len(t)):\\n        if t[i] is None:\\n            t[i] = (0, None)\\n    dp = [False]*(2*n+1) # i\\u756a\\u76ee\\u306e\\u76f4\\u5f8c\\u3067\\u4ed5\\u5207\\u308c\\u308b\\u304b\\n    dp[0] = True\\n    def sub(j,i):\\n        if (i-j)%2==1:\\n            return False\\n        for k in range((i-j)//2):\\n            if t[j+k][0]==2 or t[j+(i-j)//2+k][0]==1:\\n                return False\\n            elif t[j+k][1] is not None and t[j+k][1]!=(i-j)//2:\\n                return False\\n            elif t[j+(i-j)//2+k][1] is not None and t[j+(i-j)//2+k][1]!=(i-j)//2:\\n                return False\\n            elif t[j+k][0]!=0 and t[j+k][1] is None and t[j+k+(i-j)//2][0]!=0:\\n#                 print(j,k,i)\\n                return False\\n            elif t[j+(i-j)//2+k][0]!=0 and t[j+(i-j)//2+k][1] is None and t[j+k][0]!=0:\\n#                 print(j,k,i)\\n                return False\\n        return True\\n    for i in range(1,2*n+1):\\n        val = False\\n        for j in range(i):\\n            if dp[j] and sub(j,i):\\n                val = True\\n        dp[i] = val\\n    if dp[2*n]:\\n        print(\\\"Yes\\\")\\n    else:\\n        print(\\\"No\\\")\", \"import sys\\nfrom typing import List\\n\\nsys.setrecursionlimit(10 ** 9)\\n\\n\\ndef lmi():\\n    return list(map(int, input().split()))\\n\\n\\ndef main():\\n    N = int(input())\\n    AB = [lmi() for _ in range(N)]\\n    result = solve(N, AB)\\n    print(result)\\n\\n\\ndef solve(N: int, AB: List[List[int]]) -> str:\\n    for a, b in AB:\\n        if a != -1 and b != -1 and not a < b:\\n            return 'No'\\n    exists = [False] * (2 * N + 1)\\n    for a, b in AB:\\n        if a != -1:\\n            if exists[a]:\\n                return 'No'\\n            exists[a] = True\\n        if b != -1:\\n            if exists[b]:\\n                return 'No'\\n            exists[b] = True\\n    P = [[0] * (2 * N + 1) for _ in range(2 * N + 1)]\\n    for a, b in AB:\\n        if a != -1:\\n            for i in range(1, a):\\n                P[i][a] = -1\\n            for i in range(a + 1, 2 * N + 1):\\n                if exists[i]:\\n                    P[a][i] = -1\\n        if b != -1:\\n            for i in range(b + 1, 2 * N + 1):\\n                P[b][i] = -1\\n            for j in range(0, b):\\n                if exists[j]:\\n                    P[j][b] = -1\\n        if a != -1 and b != -1:\\n            for i in range(0, a):\\n                for j in range(b + 1, 2 * N + 1):\\n                    P[i][j] = -1\\n            for i in range(a + 1, b):\\n                for j in range(i, b):\\n                    P[i][j] = -1\\n            P[a][b] = 0\\n\\n    dp = [False] * (2 * N + 1)\\n    dp[0] = True\\n    for i in range(0, 2 * N + 1, 2):\\n        if dp[i]:\\n            for j in range(i + 2, 2 * N + 1, 2):\\n                ng = False\\n                step = (j - i) // 2\\n                for k in range(step):\\n                    a = i + 1 + k\\n                    b = a + step\\n                    if P[a][b] == -1:\\n                        ng = True\\n                        break\\n                if not ng:\\n                    dp[j] = True\\n\\n    return 'Yes' if dp[2 * N] else 'No'\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def check(l, r):\\n    if (r - l) % 2 == 1:\\n        return False\\n    n = (r - l) // 2\\n    res = True\\n    for j in range(l, l + n):\\n        k = j + n\\n        res = res and P[j][k]\\n    return res\\n\\nN = int(input())\\nF = [(0, '\\u672a')]*(2*N + 1)\\nfor i in range(N):\\n    a, b = [int(x) for x in input().split()]\\n    if 1 <= a:\\n        if F[a][1] != '\\u672a':\\n            (print('No'));return\\n        F[a] = (i, '\\u4e57')\\n    if 1 <= b:\\n        if F[b][1] != '\\u672a':\\n            print('No');return\\n        F[b] = (i, '\\u964d')\\n\\nP = [[False]*(2*N + 1) for _ in range(2*N + 1)]\\nfor a in range(1, 2*N + 1):\\n    for b in range(a + 1, 2*N + 1):\\n        pair = (F[a][1], F[b][1])\\n        if pair in (('\\u672a', '\\u672a'), ('\\u672a', '\\u964d'), ('\\u4e57', '\\u672a')):\\n            P[a][b] = True\\n        if pair == ('\\u4e57', '\\u964d'):\\n            P[a][b] = F[a][0] == F[b][0]\\n\\ndp = [False]*(N + 1)\\ndp[0] = True\\nfor i in range(N + 1):\\n    if dp[i]:\\n        for j in range(i + 1, N + 1):\\n            if check(2 * i + 1, 2 * j + 1):\\n                dp[j] = True\\n\\nprint('Yes' if dp[N] else 'No')\", \"R,P,I,J=range,print,input,int\\nn=J(I())\\nA,C,L=[list(map(J,I().split()))for i in R(n)],[0]*(2*n),[-1]*(2*n)\\nfor i in R(n):\\n a,b=A[i];a-=1;b-=1\\n if a!=-2:\\n  if L[a]>=0:P(\\\"No\\\");return\\n  C[a]=1;L[a]=i\\n if b!=-2:\\n  if L[b] >= 0:P(\\\"No\\\");return\\n  C[b]=-1;L[b]=i\\ndef f(l,r):\\n m=(l+r)//2\\n if min(C[l:m])==-1 or max(C[m:r])==1:return 0\\n X,Y=L[l:m],L[m:r]\\n for i in range(len(X)):\\n  if X[i]==Y[i]:continue\\n  elif X[i]!=-1!=Y[i]:return 0\\n  elif (X[i]!=-1 and X[i] in Y) or (Y[i]!=-1 and Y[i] in X):return 0\\n return 1\\ndp=[0]*(n+1)\\ndp[0]=1\\nfor i in range(n):\\n for j in range(i+1,n+1):\\n  if dp[i]*f(i*2,j*2):dp[j]=1\\nP(\\\"NYoe s\\\"[dp[n]::2])\", \"import numpy as np\\nfrom numpy import int8, int32, int64\\n\\n\\ndef solve_core(N, ca, cb, dp):\\n    def check(n, d):\\n        k = 2 * n\\n        for m in range(k, k + d):\\n            if cb[m] > 0:\\n                return 0\\n            if ca[m] > 0 and ca[m] != d:\\n                return 0\\n            if ca[m] == -1 and cb[m + d] > 0:\\n                return 0\\n        for m in range(k + d, k + 2 * d):\\n            if ca[m] != 0:\\n                return 0\\n        return 1\\n\\n    for i in range(N - 1, -1, -1):\\n        dp[i] = 0\\n        for j in range(i + 1, N + 1):\\n            d = j - i\\n            if dp[j] and check(i, d):\\n                dp[i] = 1\\n                break\\n    return dp[0]\\n\\n\\ndef solve(N, ab):\\n    ca = np.zeros(2 * N, dtype=int64)\\n    cb = np.zeros(2 * N, dtype=int64)\\n\\n    for i in range(ab.shape[0]):\\n        a = ab[i, 0]\\n        b = ab[i, 1]\\n        # \\u4e21\\u65b9\\u306e\\u5024\\u304c\\u3042\\u308b\\u5834\\u5408\\n        if a > - 1 and b > -1:\\n            if b - a <= 0:\\n                return 0\\n            if ca[a] != 0 or cb[a] > 0 or ca[b] != 0 or cb[b] > 0:\\n                return 0\\n            ca[a] = b - a\\n            cb[b] = 1\\n        elif a > -1:\\n            if ca[a] != 0 or cb[a] > 0:\\n                return 0\\n            ca[a] = -1\\n        elif b > -1:\\n            if ca[b] != 0 or cb[b] > 0:\\n                return 0\\n            cb[b] = 1\\n\\n    dp = np.empty(N + 1, dtype=int64)\\n    dp[N] = 1\\n    return solve_core(N, ca, cb, dp)\\n\\n\\ndef main(in_file):\\n    f = open(in_file)\\n    N = int(f.readline())\\n    ab = np.fromstring(f.read(), dtype=int64, sep=' ')\\n    ab -= 1\\n    ab = ab.reshape((-1, 2))\\n    ans = solve(N, ab)\\n    return ans\\n\\ndef __starting_point():\\n    ans = main(0)\\n    print('Yes' if ans else 'No')\\n__starting_point()\", \"n = int(input())\\nab = [list(map(int, input().split())) for i in range(n)]\\ncnt = [0] * (2 * n)\\nlis = [-1] * (2 * n)\\nfor i, (a, b) in enumerate(ab):\\n    if a != -1:\\n        if lis[a - 1] >= 0:\\n            print(\\\"No\\\");return\\n        cnt[a - 1] = 1\\n        lis[a - 1] = i\\n    if b != -1:\\n        if lis[b - 1] >= 0:\\n            print(\\\"No\\\");return\\n        cnt[b - 1] = -1\\n        lis[b - 1] = i\\ndef ok(l, r):\\n    if min(cnt[l:(l + r) // 2]) == -1 or max(cnt[(l + r) // 2:r]) == 1:\\n        return False\\n    lis_l, lis_r = lis[l:(l + r) // 2], lis[(l + r) // 2:r]\\n    for i in range(len(lis_l)):\\n        if lis_l[i] == lis_r[i]:\\n            continue\\n        elif lis_l[i] != -1 != lis_r[i]:\\n            return False\\n        elif (lis_l[i] != -1 and lis_l[i] in lis_r) or (lis_r[i] != -1 and lis_r[i] in lis_l):\\n            return False\\n    return True\\ndp = [False] * (n + 1)\\ndp[0] = True\\nfor i in range(n):\\n    if dp[i]:\\n        for j in range(i + 1, n + 1):\\n            if dp[i] == True and ok(i * 2, j * 2):\\n                dp[j] = True\\n    else:\\n        continue\\nprint(\\\"Yes\\\" if dp[-1] else \\\"No\\\")\", \"n = int(input())\\nab = [list(map(int, input().split())) for i in range(n)]\\ncnt = [0] * (2 * n)\\nlis = [-1] * (2 * n)\\nfor i, (a, b) in enumerate(ab):\\n    if a != -1:\\n        if lis[a - 1] >= 0:\\n            print(\\\"No\\\");return\\n        cnt[a - 1] = 1\\n        lis[a - 1] = i\\n    if b != -1:\\n        if lis[b - 1] >= 0:\\n            print(\\\"No\\\");return\\n        cnt[b - 1] = -1\\n        lis[b - 1] = i\\ndef ok(l, r):\\n    if min(cnt[l:(l + r) // 2]) == -1 or max(cnt[(l + r) // 2:r]) == 1:\\n        return False\\n    lis_l, lis_r = lis[l:(l + r) // 2], lis[(l + r) // 2:r]\\n    for i in range(len(lis_l)):\\n        if lis_l[i] == lis_r[i]:\\n            continue\\n        elif lis_l[i] != -1 != lis_r[i]:\\n            return False\\n        elif (lis_l[i] != -1 and lis_l[i] in lis_r) or (lis_r[i] != -1 and lis_r[i] in lis_l):\\n            return False\\n    return True\\ndp = [False] * (n + 1)\\ndp[0] = True\\nfor i in range(n):\\n    if dp[i]:\\n        for j in range(i + 1, n + 1):\\n            if dp[i] == True and ok(i * 2, j * 2):\\n                dp[j] = True\\n    else:\\n        continue\\nprint(\\\"Yes\\\" if dp[-1] else \\\"No\\\")\\n\", \"\\\"\\\"\\\"\\n\\u89e3\\u8aac\\uff06prd_xxx\\u3055\\u3093 #17179888\\u3000\\u304b\\u3089\\u5f15\\u7528\\n\\u57fa\\u672c\\u65b9\\u91dd:dp\\u3067OK,NG\\u3092\\u5224\\u5b9a\\u3057\\u306a\\u304c\\u3089\\u6700\\u5f8c\\u307e\\u3067OK\\u3044\\u3051\\u305f\\u3089YES\\n\\u5236\\u7d04\\u6761\\u4ef6\\nstart,end\\u306f\\u9055\\u3046\\u4eba\\u3092\\u30da\\u30a2\\u306b\\u3057\\u3066\\u306f\\u3044\\u3051\\u306a\\u3044\\n\\u540c\\u6642\\u306b\\u4e57\\u3063\\u305f\\u4eba\\u306f\\u3001\\u540c\\u3058\\u968e\\u6570\\u3092\\u79fb\\u52d5\\u3059\\u308b\\n\\u3042\\u308b\\u968e\\u3067\\u306f\\u8ab0\\u304b\\u304c\\u4e57\\u308bor\\u4e0b\\u308a\\u308b\\u306e\\u307f\\u3002\\n\\\"\\\"\\\"\\n\\nN = int(input())\\nAB = [tuple(map(int,input().split())) for i in range(N)]\\nimport collections \\nctr = collections.defaultdict(int)\\npairs = {}#\\u4e57\\u964d\\u3068\\u3082\\u306b\\u308f\\u304b\\u3063\\u3066\\u3044\\u308b\\nstarts = set()#\\u4e57\\u306e\\u307f\\u308f\\u304b\\u3063\\u3066\\u3044\\u308b\\nends = set()#\\u964d\\u306e\\u307f\\u308f\\u304b\\u3063\\u3066\\u3044\\u308b\\nfor a,b in AB:\\n    if a > 0 and b > 0:#\\u4e57\\u964d\\u3068\\u3082\\u306b\\u308f\\u304b\\u3063\\u3066\\u3044\\u308b\\n        pairs[a] = b\\n        ctr[a] += 1\\n        ctr[b] += 1\\n    elif a > 0:#\\u4e57\\u306e\\u307f\\u308f\\u304b\\u3063\\u3066\\u3044\\u308b\\n        ctr[a] += 1\\n        starts.add(a)\\n    elif b > 0:#\\u964d\\u306e\\u307f\\u308f\\u304b\\u3063\\u3066\\u3044\\u308b\\n        ctr[b] += 1\\n        ends.add(b)\\n    else:#\\u3069\\u3063\\u3061\\u3082\\u308f\\u304b\\u3093\\u306a\\u3044\\n        continue\\n    \\nif any(v>1 for v in list(ctr.values())):#\\u91cd\\u8907\\u30c1\\u30a7\\u30c3\\u30af\\n    print('No')\\n    return\\n\\ndp = [False] * (N+1)#\\u6dfb\\u3048\\u5b57\\u306f\\u30c1\\u30a7\\u30c3\\u30af\\u3057[\\u7d42\\u308f\\u3063\\u305f\\u968e/2]\\u3068\\u601d\\u3048\\u3070\\u3088\\u3044\\u3002\\u533a\\u9593\\u306f\\u5076\\u6570\\u306e\\u3069\\u3053\\u304b\\u3067\\u5207\\u308c\\u308b\\u306e\\u3067N+1\\u3067\\u7ba1\\u7406\\u3067\\u304d\\u308b 2\\u968ex N\\u533a\\u9593 + \\u521d\\u671f1\\u3068\\u3044\\u3046\\u610f\\u5473\\u3002\\ndp[0] = True#\\u306f\\u3058\\u3081\\u306fok\\nfor i in range(N):#i\\u306f\\u78ba\\u5b9a\\u3057\\u305f\\u533a\\u5207\\u308a\\u306e\\u6700\\u7d42\\u533a\\u9593No\\u3092\\u793a\\u3059\\u5f15\\u6570\\u3000\\u3064\\u304e\\u306e\\u30b0\\u30eb\\u30fc\\u30d7\\u306e\\u6700\\u521d\\u306b\\u4e57\\u308b\\u4eba\\u306e\\u968e\\u306f2*i+1\\u306b\\u306a\\u308b\\n    if not dp[i]: continue#\\u78ba\\u5b9a\\u3057\\u305f\\u533a\\u9593\\u304cfalse\\u72b6\\u614b\\u3067\\u306f\\u3001\\u305d\\u306e\\u5f8c\\u3069\\u3046\\u3084\\u3063\\u3066\\u3082True\\u306b\\u3067\\u304d\\u306a\\u3044\\u304b\\u3089false\\u306e\\u307e\\u307e\\u30c1\\u30a7\\u30c3\\u30af\\u3092\\u7d42\\u308f\\u3089\\u305b\\u308b\\n    for j in range(i+1,N+1):#j\\u306fi(\\u78ba\\u5b9a\\u3057\\u305f\\u533a\\u5207\\u308a\\u306e\\u6700\\u7d42\\u533a\\u9593No\\u3092\\u793a\\u3059\\u5f15\\u6570)+1\\u4ee5\\u964d\\u3067\\u4e57\\u3063\\u305f\\u30b0\\u30eb\\u30fc\\u30d7\\u306e\\u4eba\\u304c\\u964d\\u308a\\u308b\\u533a\\u9593\\u7d42\\u7aef\\u3092\\u793a\\u3059\\u5f15\\u6570 \\u3000\\u4e57\\u308b\\u533a\\u9593\\u3092l\\u3068\\u3059\\u308b\\u3068\\u3001i + l = j \\u3067\\u7ba1\\u7406\\u3055\\u308c\\u308b\\u3002\\n        if dp[j]: continue#\\u3059\\u3067\\u306b\\u6210\\u7acb\\u6e08\\u307f\\u306a\\u3089\\u3068\\u3070\\u3059\\n        l = j-i#\\u306e\\u308b\\u533a\\u9593\\u306f\\u4e57\\u308b\\u968e\\u6570\\u3068\\u540c\\u3058\\n        for s in range(2*i+1, 2*i+l+1):#s\\u306f\\u4e57\\u308b\\u968e\\u3002i+1\\u533a\\u9593\\u306e\\u306f\\u3058\\u3081\\u306b\\u4e57\\u308b(2*i+1)\\u968e\\u3068 \\u305d\\u306e\\u4eba\\u304c\\u964d\\u308a\\u308b2*i+l+1\\u968e\\u306e\\u9593\\u306e\\u968e\\u306f\\u4e57\\u3063\\u3066\\u304f\\u308b\\u3072\\u3068\\u3070\\u304b\\u308a\\u3002\\u3068\\u4eee\\u5b9a\\u3059\\u308b\\n            t = s+l#\\u5404\\u306e\\u3063\\u3066\\u304f\\u308b\\u3072\\u3068\\u304c\\u4e0b\\u308a\\u308b\\u968e\\n            if s in pairs:#\\u4e57\\u308b\\u968e\\u304c\\u30da\\u30a2\\u306b\\u3042\\u308b\\n                if pairs[s] != t: break#\\u4e57\\u308b\\u968e\\u3068\\u964d\\u308a\\u308b\\u968e\\u304c\\u30da\\u30a2\\u5236\\u7d04\\u306b\\u53cd\\u3059\\u308b\\u3068\\u30c0\\u30e1\\n            if s in starts and t in ends: break#\\u4e57\\u308b\\u968e\\u3001\\u964d\\u308a\\u308b\\u968e\\u304c\\u3001\\u3059\\u3067\\u306b\\u78ba\\u5b9a\\u3057\\u3066\\u3044\\u308b\\uff12\\u4eba\\u306e\\u6761\\u4ef6\\u3068\\u304b\\u3076\\u308b\\u306e\\u3067\\u5236\\u7d04\\u306b\\u53cd\\u3057\\u3066\\u30c0\\u30e1\\u3002start,end\\u306f\\u9055\\u3046\\u4eba\\u3092\\u30da\\u30a2\\u306b\\u3057\\u3066\\u306f\\u3044\\u3051\\u306a\\u3044\\n            if s in ends: break#\\u4e57\\u308b\\u968e\\u304c\\u964d\\u308a\\u308b\\u968e\\u30ea\\u30b9\\u30c8\\u306b\\u3042\\u3063\\u3066\\u3082\\u30c0\\u30e1\\n            if t in starts: break#\\u964d\\u308a\\u308b\\u968e\\u304c\\u4e57\\u308b\\u968e\\u30ea\\u30b9\\u30c8\\u306b\\u3042\\u3063\\u3066\\u3082\\u30c0\\u30e1\\n        else:\\n            dp[j] = True#j\\u307e\\u3067\\u306e\\u533a\\u9593\\u306f\\u77db\\u76fe\\u304c\\u306a\\u3044\\u3053\\u3068\\u3092\\u30e1\\u30e2\\nprint(('Yes' if dp[-1] else 'No'))#\\u6700\\u5f8c\\u307e\\u3067\\u77db\\u76fe\\u304c\\u306a\\u3051\\u308c\\u3070Yes\\n\", \"# -*- coding: utf-8 -*-\\nimport bisect\\nimport heapq\\nimport math\\nimport random\\nfrom collections import Counter, defaultdict, deque\\nfrom decimal import ROUND_CEILING, ROUND_HALF_UP, Decimal\\nfrom fractions import Fraction\\nfrom functools import lru_cache, reduce\\nfrom itertools import combinations, combinations_with_replacement, product, permutations, accumulate\\nfrom operator import add, mul, sub, itemgetter, attrgetter\\n\\n\\nimport sys\\n# sys.setrecursionlimit(10**6)\\n# readline = sys.stdin.buffer.readline\\nreadline = sys.stdin.readline\\n\\nINF = 1 << 60\\n\\n\\ndef read_int():\\n    return int(readline())\\n\\n\\ndef read_int_n():\\n    return list(map(int, readline().split()))\\n\\n\\ndef read_float():\\n    return float(readline())\\n\\n\\ndef read_float_n():\\n    return list(map(float, readline().split()))\\n\\n\\ndef read_str():\\n    return readline().strip()\\n\\n\\ndef read_str_n():\\n    return readline().strip().split()\\n\\n\\ndef ep(*args):\\n    print(*args, file=sys.stderr)\\n\\n\\ndef mt(f):\\n    import time\\n\\n    def wrap(*args, **kwargs):\\n        s = time.perf_counter()\\n        ret = f(*args, **kwargs)\\n        e = time.perf_counter()\\n\\n        ep(e - s, 'sec')\\n        return ret\\n\\n    return wrap\\n\\n\\n@mt\\ndef slv(N, AB):\\n    used = set()\\n    for a, b in AB:\\n        if a > 0 and b > 0 and a >= b:\\n            return 'No'\\n        if a > 0 and a in used:\\n            return 'No'\\n        else:\\n            used.add(a)\\n        if b > 0 and b in used:\\n            return 'No'\\n        else:\\n            used.add(b)\\n\\n    AB = [(a-1, b-1) for a, b in AB]\\n\\n    @lru_cache(maxsize=None)\\n    def f(s):\\n        if s == 2*N:\\n            return True\\n        for r in range(s+2, 2*N+1, 2):\\n            l = r - s\\n            l2 = l // 2\\n            r2 = s + l2\\n\\n            used = Counter()\\n            for a, b in AB:\\n                if a >= 0 and r2 <= a < r:\\n                    break\\n                if b >= 0 and  s <= b < r2:\\n                    break\\n                if s <= a < r2 and r2 <= b < r and b - a != l2:\\n                    break\\n                if s <= a < r2:\\n                    used[a] += 1\\n                    if b < 0:\\n                        used[a+l2] += 1\\n                if r2 <= b < r:\\n                    used[b] += 1\\n                    if a < 0:\\n                        used[b-l2] += 1\\n\\n            else:\\n                if used and used.most_common()[0][1] > 1:\\n                    pass\\n                elif f(r):\\n                    ep(s, True)\\n                    return True\\n        ep(s, False)\\n        return False\\n\\n    return 'Yes' if f(0) else 'No'\\n\\n\\n\\n\\ndef main():\\n    N = read_int()\\n    AB = [read_int_n() for _ in range(N)]\\n    print(slv(N, AB))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"R,P,I,J=range,print,input,int\\nn=J(I())\\nA,C,L=[list(map(J,I().split()))for i in R(n)],[0]*(2*n),[-1]*(2*n)\\nfor i,(a,b) in enumerate(A):\\n a-=1;b-=1\\n if a!=-2:\\n  if L[a]>=0:P(\\\"No\\\");return\\n  C[a]=1;L[a]=i\\n if b!=-2:\\n  if L[b] >= 0:P(\\\"No\\\");return\\n  C[b]=-1;L[b]=i\\ndef f(l,r):\\n m=(l+r)//2\\n if min(C[l:m])==-1 or max(C[m:r])==1:return 0\\n X,Y=L[l:m],L[m:r]\\n for i in R(len(X)):\\n  if X[i]==Y[i]:continue\\n  elif X[i]!=-1!=Y[i]:return 0\\n  elif (X[i]!=-1 and X[i] in Y) or (Y[i]!=-1 and Y[i] in X):return 0\\n return 1\\ndp=[0]*(n+1)\\ndp[0]=1\\nfor i in R(n):\\n for j in R(i+1,n+1):\\n  if dp[i]*f(i*2,j*2):dp[j]=1\\nP(\\\"NYoe s\\\"[dp[n]::2])\", \"R,P,I,J=range,print,input,int\\nn=J(I())\\nA,C,L=[list(map(J,I().split()))for i in R(n)],[0]*(2*n),[-1]*(2*n)\\nfor i,(a,b) in enumerate(A):\\n a-=1;b-=1\\n if a!=-2:\\n  if L[a]>=0:P(\\\"No\\\");return\\n  C[a]=1;L[a]=i\\n if b!=-2:\\n  if L[b] >= 0:P(\\\"No\\\");return\\n  C[b]=-1;L[b]=i\\ndef f(l,r):\\n m=(l+r)//2\\n if min(C[l:m])==-1 or max(C[m:r])==1:return 0\\n X,Y=L[l:m],L[m:r]\\n for i in range(len(X)):\\n  if X[i]==Y[i]:continue\\n  elif X[i]!=-1!=Y[i]:return 0\\n  elif (X[i]!=-1 and X[i] in Y) or (Y[i]!=-1 and Y[i] in X):return 0\\n return 1\\ndp=[0]*(n+1)\\ndp[0]=1\\nfor i in range(n):\\n if dp[i]:\\n  for j in range(i+1,n+1):\\n   if dp[i] and f(i*2,j*2):dp[j]=1\\nP(\\\"NYoe s\\\"[dp[n]::2])\", \"N = int(input())\\nel = []\\nfor i in range(N):\\n    a,b = map(int,input().split())\\n    if a > 0 and b > 0 and a >= b:\\n        print(\\\"No\\\")\\n        return\\n    el.append((a,b))\\n#print(el)\\nfloor = [0]*2*N\\nfor i in range(N):\\n    if el[i][0] != -1:\\n        if floor[el[i][0]-1] != 0:\\n            print(\\\"No\\\")\\n            return\\n        floor[el[i][0]-1] = -(i+1)\\n    if el[i][1] != -1:\\n        if floor[el[i][1]-1] != 0:\\n            print(\\\"No\\\")\\n            return\\n        floor[el[i][1]-1] = i+1\\n#print(floor)\\n\\ndp = [False]*(N+1)\\ndp[0] = True\\nfor i in range(1,N+1):\\n    for j in range(i+1):\\n\\n        if dp[j] == True:\\n            \\n            l,r = j*2,i*2\\n            high = (r-l)//2\\n            for k in range(l,l+high):\\n\\n                if floor[k] > 0:\\n                    break\\n\\n                if floor[k+high] < 0:\\n                    break\\n                \\n                if floor[k] < 0:\\n                    if floor[k+high] != -floor[k] and floor[k+high] != 0:\\n                        break\\n                    elif floor[k+high] == 0:\\n                        if el[-floor[k]-1][1] != -1:\\n                            break\\n                            \\n                if floor[k+high] > 0:\\n                    if floor[k] != -floor[k+high] and floor[k] != 0:\\n                        break\\n                    elif floor[k] == 0:\\n                        if el[floor[k+high]-1][0] != -1:\\n                            break\\n            \\n            else:\\n                dp[i] = True\\n                break\\n\\ndef yn(p):\\n    if p:\\n        return \\\"Yes\\\"\\n    else:\\n        return \\\"No\\\"\\nprint(yn(dp[-1]))\", \"n = int(input())\\nAB = [tuple(map(int,input().split())) for i in range(n)]\\n\\nl = [-1]*(2*n+1)\\nm = 0\\n\\nfor k  in range(n):\\n    i,j = AB[k]\\n    if i == -1 and j == -1:\\n        m += 1\\n        continue\\n    if i == -1:\\n        if l[j]>=0:\\n            print(\\\"No\\\")\\n            return\\n        l[j] = k\\n        continue\\n    if j == -1:\\n        if l[i]>=0:\\n            print(\\\"No\\\")\\n            return\\n        l[i] = k\\n        continue\\n    if i >= j or j-i > n:\\n        print(\\\"No\\\")\\n        return\\n    if l[j]>=0:\\n        print(\\\"No\\\")\\n        return\\n    l[j] = k\\n    if l[i]>=0:\\n        print(\\\"No\\\")\\n        return\\n    l[i] = k\\n\\ndp = [-1]*(2*n+1)\\ndp[0] = m\\nfor i in range(1,2*n+2,2):\\n    #print(dp)\\n    if dp[i-1] == -1:\\n        continue\\n    for j in range(i+2,2*n+2,2):\\n        \\n        x = dp[i-1]\\n        count = [0]*(2*n+1)\\n        dif = (j-i)//2\\n        for k in range(n):\\n            a,b = AB[k]\\n            if a == b == -1:\\n                continue\\n            if a == -1:\\n                if i+dif <= b < j:\\n                    if count[b] or count[b-dif]:\\n                        continue\\n                    count[b] += 1\\n                    count[b-dif] += 1\\n            elif b == -1:\\n                if i <= a < i+dif:\\n                    if count[a] or count[a+dif]:\\n                        continue\\n                    count[a] += 1\\n                    count[a+dif] += 1\\n            else:\\n                if i <= a < i+dif and a+dif == b:\\n                    if count[a] or count[b]:\\n                        continue\\n                    count[a] += 1\\n                    count[a+dif] += 1\\n        if x*2 >= j-i-sum(count):\\n            dp[j-1] = max(dp[j-1],x-(j-i-sum(count))//2)\\n\\nif dp[-1] >= 0:\\n    print(\\\"Yes\\\")\\nelse:\\n    print(\\\"No\\\")\", \"# Reference: https://atcoder.jp/contests/arc104/submissions/17167838\\nimport sys\\nfrom functools import lru_cache\\n\\nsys.setrecursionlimit(100000)\\n\\n\\n@lru_cache(None)\\ndef dfs(f):\\n    if f == 2 * n + 1:\\n        return True\\n    \\n    max_up = (2 * n - f + 1) // 2\\n    for up in range(1, max_up + 1):\\n        for i in range(f, f + up):\\n            if floors[i] < 0:\\n                # Fail by off at bottom half of segment\\n                break\\n            if floors[i + up] > 0:\\n                # Fail by on at top half of segment\\n                break\\n            if floors[i] != 0 and floors[i + up] != 0 and floors[i] != -1 * floors[i + up]:\\n                # In segment not matched on and off\\n                break\\n        else:\\n            # Check uppper segment with just passed this segment f with up.\\n            # Every person in this segment off after up amount.\\n            if dfs(f + 2 * up):\\n                return True\\n            else:\\n                # Fail to satisfy in any upper segments, then continue to next possible up at f.\\n                pass\\n    return False\\n\\n\\nn = int(input())\\nfloors = [0] * (2 * n + 1)\\n\\nfor i in range(1, n + 1):\\n    a, b = map(int, input().split())\\n    if a != -1:\\n        if floors[a] != 0:\\n            print('No')\\n            return\\n        floors[a] = i\\n    if b != -1:\\n        if floors[b] != 0:\\n            print('No')\\n            return\\n        floors[b] = -i\\n\\nprint('Yes' if dfs(1) else 'No')\", \"def main():\\n    n = int(input())\\n    AB = [list(map(int, input().split())) for _ in range(n)]\\n    YesFlag = True\\n    arr = [True]*(2*n+1)\\n    cnt = 0\\n    for a, b in AB:\\n        if a != -1 and b != -1 and a > b:\\n            YesFlag = False\\n        if a != -1 and not arr[a]:\\n            YesFlag = False\\n        if b != -1 and not arr[b]:\\n            YesFlag = False\\n        if a != -1:\\n            arr[a] = False\\n        if b != -1:\\n            arr[b] = False\\n        if a == -1 and b == -1:\\n            cnt += 1\\n    dp = [-1]*(2*n+1)\\n    dp[0] = cnt\\n    for i in range(0, 2*n+1, 2):\\n        if dp[i] < 0:\\n            continue\\n        for j in range(i+2, 2*n+1, 2):\\n            fs = [True]*(2*n+1)\\n            lngth = (j-i)//2\\n            sf = True\\n            for a, b in AB:\\n                if (a == -1 and b == -1) or (a != -1 and (a <= i or j < a)) or (b != -1 and (b <= i or j < b)):\\n                    continue\\n                if a != -1 and b != -1:\\n                    if b-a != lngth or a <= i or j < b:\\n                        sf = False\\n                        break\\n                    else:\\n                        if not fs[a] or not fs[b]:\\n                            sf = False\\n                            break\\n                        else:\\n                            fs[a] = False\\n                            fs[b] = False\\n                elif a == -1:\\n                    p = b - lngth\\n                    if p <= i or j < b:\\n                        sf = False\\n                        break\\n                    if not fs[p] or not fs[b]:\\n                        sf = False\\n                        break\\n                    else:\\n                        fs[p] = False\\n                        fs[b] = False\\n                else:\\n                    q = a + lngth\\n                    if a <= i or j < q:\\n                        sf = False\\n                        break\\n                    if not fs[a] or not fs[q]:\\n                        sf = False\\n                        break\\n                    else:\\n                        fs[a] = False\\n                        fs[q] = False\\n            if sf:\\n                c = 0\\n                for k in range(i+1, j+1):\\n                    if fs[k]:\\n                        c += 1\\n                if dp[j] < dp[i] - c//2:\\n                    dp[j] = dp[i] - c//2\\n    if dp[-1] != 0:\\n        YesFlag = False\\n    if YesFlag:\\n        print(\\\"Yes\\\")\\n    else:\\n        print(\\\"No\\\")\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"import sys\\ninput = sys.stdin.readline\\n\\ndef solve():\\n    N = int(input())\\n    noInOuts = [None] * (2*N+1)  # (-1, '')\\n    fIns = [-1] * (N+1)\\n    fOuts = [-1] * (N+1)\\n    for no in range(1, N+1):\\n        A, B = list(map(int, input().split()))\\n        if A != -1:\\n            if noInOuts[A] is not None:\\n                return False\\n            noInOuts[A] = (no, 'in')\\n            fIns[no] = A\\n        if B != -1:\\n            if noInOuts[B] is not None:\\n                return False\\n            noInOuts[B] = (no, 'out')\\n            fOuts[no] = B\\n\\n    def check(fr, to):\\n        L = (to+1-fr)//2\\n        for i in range(L):\\n            if noInOuts[fr+i] is not None:\\n                no, dire = noInOuts[fr+i]\\n                if dire == 'in':\\n                    if noInOuts[fr+i+L] is not None:\\n                        no2, dire2 = noInOuts[fr+i+L]\\n                        if no2 != no:\\n                            return False\\n                    else:\\n                        if fOuts[no] != -1:\\n                            return False\\n                else:\\n                    return False\\n        for i in range(L):\\n            if noInOuts[fr+i+L] is not None:\\n                no, dire = noInOuts[fr+i+L]\\n                if dire == 'out':\\n                    if noInOuts[fr+i] is not None:\\n                        no2, dire2 = noInOuts[fr+i]\\n                        if no2 != no:\\n                            return False\\n                    else:\\n                        if fIns[no] != -1:\\n                            return False\\n                else:\\n                    return False\\n        return True\\n\\n    dp = [False] * (2*N+1)\\n    dp[0] = True\\n    for i in range(0, 2*N, 2):\\n        if not dp[i]: continue\\n        for j in range(i+2, 2*N+1, 2):\\n            if check(i+1, j):\\n                dp[j] = True\\n\\n    return dp[2*N]\\n\\n\\nif solve():\\n    print('Yes')\\nelse:\\n    print('No')\\n\", \"n = int(input())\\nd = [-1] * (2 * n)\\nok = True\\nfor _ in range(n):\\n    s, t = list(map(int, input().split()))\\n    s -= 1; t -= 1\\n    if s == t == -2:\\n        continue\\n    if (\\n      s >= 0 and d[s] != -1 or\\n      t >= 0 and d[t] != -1 or\\n      s >= 0 and t >= 0 and s >= t\\n    ):\\n        print('No')\\n        return\\n    if s == -2:\\n        d[t] = -2\\n    elif t == -2:\\n        d[s] = -3\\n    else:\\n        d[s] = t\\n        d[t] = s\\ndp = [[False] * (2 * n + 1) for _ in range(2 * n + 1)]\\nfor w in range(2, 2 * n + 1, 2):\\n    for i in range(0, 2 * n - w + 1, 2):\\n        j = i + w\\n        k = i + w // 2\\n        if all(\\n          d[a] == -1 and (d[b] == -1 or d[b] == -2) or\\n          d[a] == -3 and d[b] == -1 or\\n          d[a] == b and d[b] == a\\n          for a, b in zip(list(range(i, k)), list(range(k, j)))\\n        ) or any(\\n            dp[i][k] and dp[k][j] for k in range(i+2, j, 2)\\n        ):\\n            dp[i][j] = True\\nprint(('Yes' if dp[0][2 * n] else 'No'))\\n\", \"n = int(input())\\nAB = tuple(tuple(map(int, input().split())) for _ in range(n))\\nC = [(-1, -1)]*(2*n+1)\\nfor i, (a, b) in enumerate(AB):\\n  if a == -1 and b == -1:\\n    continue\\n  if a == -1:\\n    if C[b][0] != -1:\\n      print(\\\"No\\\")\\n      return\\n    C[b] = (1, i)\\n    continue\\n  if b == -1:\\n    if C[a][0] != -1:\\n      print(\\\"No\\\")\\n      return\\n    C[a] = (0, i)\\n    continue\\n  if a >= b:\\n    print(\\\"No\\\")\\n    return\\n  if C[a][0] != -1 or C[b][0] != -1:\\n    print(\\\"No\\\")\\n    return\\n  C[a] = (0, i)\\n  C[b] = (1, i)\\n\\ndef f(l, r):\\n  m = (r-l+1)//2\\n  for i in range(l, l+m):\\n    left_direct, left_idx = C[i]\\n    right_direct, right_idx = C[i+m]\\n    if left_direct == 1 or right_direct == 0:\\n      return False\\n    if left_direct != -1 and right_direct != -1:\\n      if left_idx != right_idx:\\n        return False\\n      continue\\n    if left_direct != -1:\\n      left_b = AB[left_idx][1]\\n      if left_b != -1 and i+m != left_b:\\n        return False\\n    if right_direct != -1:\\n      right_a = AB[right_idx][0]\\n      if right_a != -1 and i != right_a:\\n        return False\\n  return True\\n  \\ndp = [False]*(n+1)\\ndp[0] = True\\nfor i in range(n):\\n  if not dp[i]:\\n    continue\\n  for j in range(i+1, n+1):\\n    if f(2*i+1, 2*j):\\n      dp[j] = True\\nif dp[n]:\\n  print(\\\"Yes\\\")\\nelse:\\n  print(\\\"No\\\")\", \"import sys\\n\\nN = int(input())\\nfixed = []\\nup_only = []\\ndown_only = []\\nup_set = set()\\ndown_set = set()\\n\\nfor i in range(N):\\n    A,B = map(int, input().split())\\n    if A == -1 and B == -1:\\n        continue\\n    elif A in up_set or B in down_set or A == 2*N or B == 1:\\n        print(\\\"No\\\")\\n        return\\n    elif A == -1:\\n        down_only.append((A,B))\\n        down_set.add(B)\\n    elif B == -1:\\n        up_only.append((A,B))\\n        up_set.add(A)\\n    else:\\n        fixed.append((A,B))\\n        down_set.add(B)\\n        up_set.add(A)\\n    \\ndp = [-1]*(2*N+1)\\n\\nfor a,b in fixed:\\n    if a >= b:\\n        print(\\\"No\\\")\\n        return\\n    else:\\n        c = b - a\\n        for i in range(a,b):\\n            if dp[i] == -1:\\n                dp[i] = c\\n            elif dp[i] != c:\\n                print(\\\"No\\\")\\n                return\\n                \\ndown_only.sort(reverse=True)\\nup_only.sort()\\n\\nfor na,b in down_only:\\n    if dp[b]!=-1:\\n        na = b - dp[b]\\n        if na < 1 or na in up_set:\\n            print(\\\"No\\\")\\n            return\\n        else:\\n            up_set.add(na)\\n        for i in range(na,b):\\n            if dp[i] == -1:\\n                dp[i] = dp[b]\\n            elif dp[i] != dp[b]:\\n                print(\\\"No\\\")\\n                return\\nfor a,nb in up_only:\\n    if dp[a] != -1:\\n        nb = a + dp[a]\\n        if nb > 2*N or nb in down_set:\\n            print(\\\"No\\\")\\n            return\\n        else:\\n            down_set.add(nb)\\n        for i in range(a,nb):\\n            if dp[i] == -1:\\n                dp[i] = dp[a]\\n            elif dp[i] != dp[a]:\\n                print(\\\"No\\\")\\n                return\\n\\nprint(\\\"Yes\\\")\", \"R,P,I,J=range,print,input,int\\nn=J(I())\\nA,C,L=[list(map(J,I().split()))for i in R(n)],[0]*(2*n),[-1]*(2*n)\\nfor i in R(n):\\n a,b=A[i];a-=1;b-=1\\n if a!=-2:\\n  if L[a]>=0:P(\\\"No\\\");return\\n  C[a]=1;L[a]=i\\n if b!=-2:\\n  if L[b]>=0:P(\\\"No\\\");return\\n  C[b]=-1;L[b]=i\\ndef f(l,r):\\n m=(l+r)//2\\n if min(C[l:m])==-1 or max(C[m:r])==1:return 0\\n X,Y=L[l:m],L[m:r]\\n for i in R(len(X)):\\n  if X[i]==Y[i]:continue\\n  elif X[i]!=-1!=Y[i]:return 0\\n  elif (X[i]!=-1 and X[i] in Y)or(Y[i]!=-1 and Y[i] in X):return 0\\n return 1\\ndp=[0]*(n+1)\\ndp[0]=1\\nfor i in R(n):\\n for j in R(i+1,n+1):\\n  if dp[i]*f(i*2,j*2):dp[j]=1\\nP(\\\"NYoe s\\\"[dp[n]::2])\", \"N = int(input())\\nP = [list(map(int, input().split())) for _ in range(N)]\\nE = [[-1, ''] for _ in range(2*N+1)]\\nfor i in range(1, N+1):\\n    a, b = P[i-1]\\n    if a != -1:\\n        if E[a][0] != -1:\\n            print(\\\"No\\\")\\n            return\\n        else:\\n            E[a][0] = i\\n            E[a][1] = 'S'\\n    \\n    if b != -1:\\n        if E[b][0] != -1:\\n            print(\\\"No\\\")\\n            return\\n        else:\\n            E[b][0] = i\\n            E[b][1] = 'G'\\n\\n    if a >= b and a != -1 and b != -1:\\n        print(\\\"No\\\")\\n        return\\n\\ndp = [False] * (2*N+1)\\ndp[0] = True\\nfor x in range(1, 2*N+1):\\n    for k in range(1, 2*N+1-x):\\n        if x+2*k-1 > 2*N: continue \\n        ok = True\\n        for i in range(k):\\n            if E[x+i][0] != -1 and E[x+k+i][0] != -1 and E[x+i][0] != E[x+k+i][0]: \\n                ok = False\\n                break\\n\\n            if E[x+i][1] == 'G':\\n                ok = False\\n                break\\n\\n            if E[x+k+i][1] == 'S':\\n                ok = False\\n                break\\n        \\n        dp[x+2*k-1] = dp[x+2*k-1] or (dp[x-1] and ok)\\n\\nans = 'Yes' if dp[2*N] else 'No'\\nprint(ans)\", \"#from collections import deque,defaultdict\\nprintn = lambda x: print(x,end='')\\ninn = lambda : int(input())\\ninl   = lambda: list(map(int, input().split()))\\ninm   = lambda:      map(int, input().split())\\nins = lambda : input().strip()\\nDBG = True  and False\\nBIG = 10**18\\nR = 10**9 + 7\\n#R = 998244353\\n\\ndef ddprint(x):\\n  if DBG:\\n    print(x)\\n\\ndef leaf(x,y):\\n    m = (y-x)//2\\n    for aa,bb in pairs:\\n        if aa<x<bb or aa<y<bb or (x<=aa<bb<=y and bb-aa!=m):\\n            return False\\n    for i in range(m):\\n        if bl[x+i] or al[x+m+i] or \\\\\\n           (al[x+i] and not pal[x+i] and bl[x+m+i]):\\n            return False\\n    return True\\n\\nn = inn()\\npal = [False]*(2*n)\\nal = [False]*(2*n)\\nbl = [False]*(2*n)\\npairs = []\\nfor i in range(n):\\n    a,b = inm()\\n    a -= 1\\n    b -= 1\\n    if a>=0 and (al[a] or bl[a]) or b>=0 and (al[b] or bl[b]):\\n        print('No')\\n        return\\n    if a>=0:\\n        al[a] = True\\n    if b>=0:\\n        bl[b] = True\\n    if a>=0 and b>=0:\\n        if a>=b:\\n            print('No')\\n            return\\n        pairs.append((a,b))\\n        pal[a] = True\\n\\ndp = [False]*(2*n+1)\\ndp[0] = True\\nfor i in range(1,n+1):\\n    for j in range(i):\\n        if dp[j] and leaf(2*j,2*i):\\n            dp[i] = True\\n            break\\nprint('Yes' if dp[n] else 'No')\\n\", \"#!/usr/bin/env python3\\nimport sys\\ndef input(): return sys.stdin.readline().rstrip()\\n\\n\\ndef check(Elevator, takedown, left, right):  # \\u4e21\\u958b\\u533a\\u9593\\n    aida = right-left+1\\n    for i in range(2*left, 2*left+aida):\\n        i, seti = i, i+aida\\n        if Elevator[i][0] != -1:\\n            iperson = Elevator[i][0]\\n            if Elevator[i][1] != 'A':\\n                return False\\n            elif Elevator[seti][0] != -1:\\n                if Elevator[seti] != [iperson, 'B']:\\n                    return False\\n            if takedown[iperson][1] != -1:\\n                if takedown[iperson][1] != seti:\\n                    return False\\n        if Elevator[seti][0] != -1:\\n            iperson = Elevator[seti][0]\\n            if Elevator[seti][1] != 'B':\\n                return False\\n            if takedown[iperson][0] != -1:\\n                if takedown[iperson][0] != i:\\n                    return False\\n    return True\\n\\n\\ndef main():\\n    n = int(input())\\n    Elevator = [[-1, -1] for i in range(2*n)]\\n    takedown = [[-1, -1] for i in range(n)]\\n    for i in range(n):\\n        # print(Elevator)\\n        # print(takedown)\\n        a, b = list(map(int, input().split()))\\n        if a != -1:\\n            a -= 1\\n            if Elevator[a][0] != -1:\\n                print('No')\\n                return\\n            Elevator[a] = [i, 'A']\\n            takedown[i][0] = a\\n        if b != -1:\\n            b -= 1\\n            if Elevator[b][0] != -1:\\n                print('No')\\n                return\\n            Elevator[b] = [i, 'B']\\n            takedown[i][1] = b\\n            if a >= b:\\n                print('No')\\n                return\\n    dp = [False]*(n+1)\\n    dp[-1] = True\\n    for i in range(n):\\n        for j in range(i+1):\\n            if dp[j-1]:\\n                if check(Elevator, takedown, j, i):\\n                    dp[i] = True\\n                    break\\n    #print(dp)\\n    print(('Yes' if dp[-2] else 'No'))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"import sys\\n(n,),*t=[[*map(int,t.split())]for t in open(0)]\\ns='Yes'\\nfor _ in t:\\n  for a,b in t:\\n    if min(a,b)<0:continue\\n    for j,(c,d)in enumerate(t):\\n      if a<c<b and b-a!=d-c<d>0:s='No'\\n      if b>c>a>0>d:t[j]=c,c+b-a\\n      if a<d<b>0>c:t[j]=d-b+a,d\\nc=[0]*n*4\\nfor a,b in t:\\n  c[a]+=1\\n  c[b]+=1\\nprint((s,'No')[max(c[:n*3])>1])\", \"def f(l,r):\\n    L=r-l\\n    if L%2:return 0\\n    for i in b(l,l+L//2):\\n        if R[P[i]]>=r and R[P[i]]+1:return 0\\n        if (P[i]==Q[L//2+i]or P[i]*Q[L//2+i]==0)*(Q[i]+P[L//2+i]==0):continue\\n        return 0\\n    return 1\\na,b,c=input,range,print\\nN=int(a())\\nM=2*N\\nP,Q,R,d=[0]*M,[0]*M,[-1]*(N+1),[0]*(M+1)\\nfor i in b(1,N+1):\\n    A,B=map(int,a().split())\\n    if (A+1and P[A-1]!=0)or(B+1and Q[B-1]):c(\\\"No\\\");return\\n    if A+1:P[A-1]=i\\n    if B+1:Q[B-1]=i;R[i]=B-1\\nd[0]=1\\nfor i in b(2,M+1):\\n    for j in b(i):\\n        if d[j]*f(j,i):d[i]=1;break\\nc('NYoe s'[d[-1]::2])\", \"# \\u533a\\u9593[i, j)\\ndef checkAtomic(i, j):\\n    length = (j - i) // 2\\n    for k in range(i, (i + j) // 2):\\n        if A[k] == INF and A[k + length] is not None:\\n            return False\\n        if A[k] is not None and A[k] != INF and A[k] != k + length:\\n            return False\\n\\n    for k in range((i + j) // 2, j):\\n        if A[k] == -1 and A[k - length] is not None:\\n            return False\\n        if A[k] is not None and A[k] != -1 and A[k] != k - length:\\n            return False\\n\\n    return True\\n\\nimport sys\\nN = int(input())\\nfloors = [[int(x) for x in input().split()] for _ in range(N)]\\nON = 0;  OFF = 1;\\nINF = float('inf')\\nfloors.sort()\\n\\nans = True\\nA = [None] * (2 * N + 1)\\n\\nfor on, off in floors:\\n    if on == -1 and off == -1:\\n        continue\\n    elif on == -1:\\n        if A[off] is not None:\\n            print('No')\\n            return\\n        A[off] = -1  # \\u4e57\\u3063\\u305f\\u5834\\u6240\\u306f\\u308f\\u304b\\u3089\\u306a\\u3044\\n        continue\\n    elif off == -1:\\n        if A[on] is not None:\\n            print('No')\\n            return\\n        A[on] = INF # \\u964d\\u308a\\u305f\\u5834\\u6240\\u306f\\u308f\\u304b\\u3089\\u306a\\u3044\\n        continue\\n    elif on >= off:\\n        print('No')\\n        return\\n    elif (A[on] is not None) or (A[off] is not None):\\n        print('No')\\n        return\\n    else:\\n        A[on] = off\\n        A[off] = on\\n\\n\\n\\ndp = [[0 for _ in range(2 * N + 2)] for _ in range(2 * N + 1)]\\n\\nfor length in range(2, 2 * N + 1, 2):\\n    for i in range(1, 2 * N + 2 - length):\\n        j = i + length\\n        dp[i][j] = sum(dp[i][k] * dp[k][j] for k in range(i + 2, j, 2)) + checkAtomic(i, j)\\n        res = dp[i][j]\\n\\nif dp[1][2 * N + 1]:\\n    print('Yes')\\nelse:\\n    print('No')\", \"import sys\\ndef input(): return sys.stdin.readline().strip()\\ndef mapint(): return map(int, input().split())\\nsys.setrecursionlimit(10**9)\\n\\nN = int(input())\\n\\nAs = set()\\nBs = set()\\ndirc = [0]*(N*2)\\npair = [-1]*(N*2)\\nfor _ in range(N):\\n    a, b = mapint()\\n    if a!=-1 and b!=-1:\\n        if dirc[a-1]!=0 or dirc[b-1]!=0 or b<=a:\\n            print('No')\\n            return\\n        dirc[a-1] = 1\\n        pair[a-1] = b-1\\n        dirc[b-1] = -1\\n        pair[b-1] = a-1\\n    elif a!=-1:\\n        if dirc[a-1]!=0:\\n            print('No')\\n            return\\n        As.add(a-1)\\n        dirc[a-1] = 1\\n    elif b!=-1:\\n        if dirc[b-1]!=0:\\n            print('No')\\n            return\\n        Bs.add(b-1)\\n        dirc[b-1] = -1\\n\\ndp = [0]*(N*2+1)\\ndp[0] = 1\\nfor l in range(1, N*2):\\n    if not dp[l-1]:\\n        continue\\n    for r in range(l+1, N*2+1):\\n        if (r-l+1)%2!=0:\\n            continue\\n        _range = (r-l+1)//2\\n        tmp = [0]*(N*2+1)\\n        for i in range(l-1, r):\\n            d = dirc[i]\\n            if d==0:\\n                continue\\n            p = pair[i]\\n            if (d==-1 and i-_range<l-1) or (d==1 and i+_range>=r):\\n                break\\n            if p>=r or (p!=-1 and p<l-1):\\n                break\\n            tmp[i] = 1\\n            if p==-1:\\n                if d==1:\\n                    if i + _range>=r or i + _range in Bs:\\n                        break\\n                    tmp[i+_range] = 1\\n                elif d==-1:\\n                    if i - _range<l-1 or i - _range in As:\\n                        break\\n                    tmp[i-_range] = 1\\n                else:\\n                    pair_idx = i+_range if i+_range<r else i-_range\\n                    tmp[pair_idx] = 1\\n            else:\\n                if abs(p-i)!=_range or (tmp[p]!=0 and pair[p]!=i):\\n                    break\\n                tmp[p] = 1\\n        else:\\n            dp[r] = 1\\nprint('Yes' if dp[-1] else 'No')\", \"N=int(input())\\nX=[list(map(int,input().split())) for i in range(N)]\\nY=[0]*(2*N+2)\\nfor i in range(N):\\n  for j in range(2):\\n    Y[X[i][j]]+=1\\nif max(Y[1:2*N+1])>1:\\n  print('No')\\n  return\\nfor i in range(N):\\n  if X[i][0]>X[i][1] and X[i][1]!=-1:\\n    print('No')\\n    return\\nX.sort(key=lambda x:max(x)%(N*3))\\nDP=[-1]*(N+1)\\nDP[N]=1\\nV=[N*3]*(N+1)\\nV[0]=0\\nC=0\\nY=[-1]*(N*2+1)\\nfor i in range(N):\\n  for j in range(2):\\n    if X[i][j]!=-1:\\n      Y[X[i][j]]=(i,j)\\n    else:\\n      X[i][j]=N*3\\n  if sum(X[i])==N*6:\\n    C+=1\\ndef f(n,x):\\n  if x>C:\\n    return 0\\n  V[n]=min(x,V[n])\\n  if DP[n]!=-1:\\n    return DP[n]\\n  DP[n]=0\\n  for i in range(1,N-n+1):\\n    c=V[n]\\n    Z=[]\\n    for j in range(2*n+1,2*(n+i)+1):\\n      if Y[j]==-1:\\n        Z.append(-1)\\n        continue\\n      if min(X[Y[j][0]])<=2*n:\\n        Z=-1\\n        break\\n      Z.append(Y[j][0])\\n    if Z==-1:\\n      continue\\n    for j in range(i):\\n      if min(Z[j],Z[i+j])!=-1 and Z[j]!=Z[i+j]:\\n        Z=-1\\n        break\\n    if Z==-1:\\n      continue\\n    for j in range(i):\\n      if Z[j]!=-1 and X[Z[j]][1]!=N*3 and X[Z[j]][1]!=2*n+i+j+1:\\n        Z=-1\\n        break\\n      j+=i\\n      if Z[j]!=-1 and X[Z[j]][0]!=N*3 and X[Z[j]][0]!=2*n+j-i+1:\\n        Z=-1\\n        break\\n    if Z==-1:\\n      continue\\n    for j in range(i):\\n      if max(Z[j],Z[i+j])==-1:\\n        c+=1\\n    DP[n]|=f(n+i,c)\\n  return DP[n]\\n\\nif f(0,0):\\n  print('Yes')\\nelse:\\n  print('No')\\n\", \"import collections\\nimport heapq\\n\\ndef default():\\n  return -1\\n\\nn=int(input())\\narr=[list(map(int,input().split())) for _ in range(n)]\\ndica=[-1]*(2*n+1)\\ndicb=[-1]*(2*n+1)\\ncnta=collections.defaultdict(int)\\ncntb=collections.defaultdict(int)\\nfor a,b in arr:\\n  c=b-a-1\\n  if ((a!=-1 and b!=-1) and (a>=b or n<b-a)) or (cnta[a]==1 or cntb[a]==1 or cnta[b]==1 or cntb[b]==1):\\n    print('No')\\n    return\\n  if a!=-1:\\n    cnta[a]+=1\\n    dica[a]=b\\n  if b!=-1:\\n    cntb[b]+=1\\n    dicb[b]=a\\nflag=[True]*(2*n+1)\\nq=[]\\nheapq.heappush(q,1)\\ns=set()\\ns.add(1)\\ndef judge(i,j):\\n  k=j-i\\n  for pos in range(i,j):\\n    a=pos\\n    b=pos+k\\n    if cnta[b]==1 or cntb[a]==1 or (cnta[a]==1 and cntb[b]==1 and dica[a]!=b):\\n      return False\\n  return True\\nwhile len(q)!=0:\\n  i=heapq.heappop(q)\\n  if i==2*n+1:\\n    print('Yes')\\n    return\\n  for j in range(i+1,n+(i+1)//2+1):\\n    if judge(i,j):\\n      if 2*j-i not in s:\\n        heapq.heappush(q,2*j-i)\\n        s.add(2*j-i)\\nprint('No')\\nreturn\", \"N = int(input())\\nstate = [(-1,-1) for _ in range(2*N+1)]\\nfor i in range(N):\\n    A,B = map(int,input().split())\\n    if A != -1 and B == -1:\\n        if state[A] != (-1,-1):\\n            print(\\\"No\\\")\\n            return\\n        state[A] = (0,-1)\\n    if A == -1 and B != -1:\\n        if state[B] != (-1,-1):\\n            print(\\\"No\\\")\\n            return\\n        state[B] = (1,-1)\\n    if A != -1 and B != -1:\\n        if B <= A or state[A] != (-1,-1) or state[B] != (-1,-1):\\n            print(\\\"No\\\")\\n            return\\n        state[A] = (0,B-A)\\n        state[B] = (1,B-A)\\ndp = [0]*(N+1)\\ndp[0] = 1\\nfor i in range(N):\\n    if dp[i]:\\n        for k in range(1,N-i+1):\\n            flag = True\\n            for j in range(2*i+1,2*i+k+1):\\n                if state[j][0] == 1:\\n                    flag = False\\n                if state[j+k][0] == 0:\\n                    flag = False\\n                if state[j][0] == 0 and state[j+k][0] == 1:\\n                    if not (state[j][1] == k and state[j+k][1] == k):\\n                        flag = False\\n                if state[j][0] == 0 and state[j][1] != -1:\\n                    if state[j][1] != k:\\n                        flag = False\\n                if state[j+k][0] == 1 and state[j+k][1] != -1:\\n                    if state[j][1] != k:\\n                        flag = False\\n            if flag:\\n                dp[i+k] = 1\\nif dp[N]:\\n    print(\\\"Yes\\\")\\nelse:\\n    print(\\\"No\\\")\", \"import collections\\nimport heapq\\n\\ndef default():\\n  return -1\\n\\nn=int(input())\\narr=[list(map(int,input().split())) for _ in range(n)]\\ndica=[-1]*(2*n+1)\\ndicb=[-1]*(2*n+1)\\ncnta=collections.defaultdict(int)\\ncntb=collections.defaultdict(int)\\nfor a,b in arr:\\n  c=b-a-1\\n  if ((a!=-1 and b!=-1) and (a>=b or n<b-a)) or (cnta[a]==1 or cntb[a]==1 or cnta[b]==1 or cntb[b]==1):\\n    print('No')\\n    return\\n  if a!=-1:\\n    cnta[a]+=1\\n    dica[a]=b\\n  if b!=-1:\\n    cntb[b]+=1\\n    dicb[b]=a\\nflag=[True]*(2*n+1)\\nq=[]\\nheapq.heappush(q,1)\\ns=set()\\ns.add(1)\\ndef judge(i,j):\\n  k=j-i\\n  for pos in range(i,j):\\n    a=pos\\n    b=pos+k\\n    if cnta[b]==1 or cntb[a]==1 or (cnta[a]==1 and cntb[b]==1 and dica[a]!=b):\\n      return False\\n  return True\\nwhile len(q)!=0:\\n  i=heapq.heappop(q)\\n  if i==2*n+1:\\n    print('Yes')\\n    return\\n  for j in range(i+1,n+(i+1)//2+1):\\n    if judge(i,j):\\n      if 2*j-i not in s:\\n        heapq.heappush(q,2*j-i)\\n        s.add(2*j-i)\\nprint('No')\\nreturn\", \"import sys\\n\\nN = int(input())\\nevents = [(0, False)] * 2 * N\\nfor i in range(1,N+1):\\n    A, B = list(map(int, input().split()))\\n    if A != -1:\\n        if events[A - 1][0] != 0:\\n            print('No')\\n            return\\n        events[A-1] = (i, B!=-1) # \\u4eba\\u306eid, \\u964d\\u308a\\u308b\\u5834\\u6240\\u304c\\u6c7a\\u307e\\u3063\\u3066\\u308b\\u304b\\n    if B != -1:\\n        if events[B - 1][0] != 0:\\n            print('No')\\n            return\\n        events[B - 1] = (-1 * i, A != -1)  # \\u4eba\\u306eid, \\u306e\\u308b\\u5834\\u6240\\u304c\\u6c7a\\u307e\\u3063\\u3066\\u308b\\u304b\\n    if A != -1 and B != -1 and B <= A:\\n        print('No')\\n        return\\n\\ndef judge(l, r):\\n    if l % 2 != 0 or r % 2 != 0:\\n        return False\\n    d = (r - l) // 2\\n    for i in range(l, l + d):\\n        l_id, l_flg = events[i]\\n        r_id, r_flg = events[i + d]\\n        if l_flg or r_flg:\\n            if (l_id != -1*r_id):\\n                return False\\n        if l_id != 0 and r_id != 0:\\n            if l_id != -1*r_id:\\n                return False\\n        if r_id > 0:\\n            return False\\n        if l_id < 0:\\n            return False\\n    return True\\n\\n\\ndp = [False] * (N+1) # 2*i\\u307e\\u3067\\u306e\\u533a\\u9593\\u3067\\u77db\\u76fe\\u306a\\u304f\\u3001\\u304b\\u3064\\u5730\\u70b92*i\\u3067\\u4eba\\u3092\\u4e00\\u4eba\\u3082\\u8f09\\u305b\\u306a\\u3044\\u3088\\u3046\\u306b\\u3067\\u304d\\u308b\\u304b\\ndp[0] = True\\nfor i in range(N + 1):\\n    if dp[i]:\\n        for j in range(i + 1, N + 1):\\n            if judge(2 * i, 2 * j):\\n                dp[j] = True\\n\\nif dp[-1]:\\n    print('Yes')\\nelse:\\n    print('No')\\n\", \"import sys\\ndef input(): return sys.stdin.readline().strip()\\n\\ndef main():\\n    N = int(input())\\n    start = []\\n    end = []\\n    confirmed = set()\\n    confirmed_start = set()\\n    confirmed_end = set()\\n    start_set = set()\\n    end_set = set()\\n    start_only = set()\\n    end_only = set()\\n    ill_input = False\\n    for _ in range(N):\\n        a, b = list(map(int, input().split()))\\n        if a != -1: a -= 1\\n        if b != -1: b -= 1\\n        if a != -1 and b != -1 and a >= b:\\n            ill_input = True\\n        if a != -1 and (a in start_set or a in end_set):\\n            ill_input = True\\n        if b != -1 and (b in start_set or b in end_set):\\n            ill_input = True\\n        start.append(a)\\n        end.append(b)\\n        if a != -1: start_set.add(a)\\n        if b != -1: end_set.add(b)\\n        if a != -1 and b == -1: start_only.add(a)\\n        if a == -1 and b != -1: end_only.add(b)\\n        if a != -1 and b != -1:\\n            confirmed.add((a, b))\\n            confirmed_start.add(a)\\n            confirmed_end.add(b)\\n    if ill_input:\\n        print(\\\"No\\\")\\n        return\\n    \\n    \\\"\\\"\\\"\\n    \\u91cd\\u306a\\u308a\\u304c\\u3042\\u308b\\u5834\\u5408\\u306f\\u4e57\\u308a\\u964d\\u308a\\u306e\\u95a2\\u4fc2\\u304c1\\u305a\\u3064\\u305a\\u308c\\u308b\\u3053\\u3068\\u306b\\u6c17\\u3065\\u304f\\u3002\\n    \\u306a\\u306e\\u30672N\\u500b\\u306e\\u30d5\\u30ed\\u30a2\\u3092\\u3046\\u307e\\u304f\\u5076\\u6570\\u533a\\u9593\\u306b\\u533a\\u5207\\u3063\\u3066\\u3001\\u5404\\u533a\\u9593\\u5185\\u3067\\u4e57\\u308a\\u964d\\u308a\\u304c\\n    1\\u305a\\u3064\\u305a\\u308c\\u308b\\u3001\\u304b\\u3064\\u305d\\u308c\\u304c\\u4e0e\\u3048\\u3089\\u308c\\u305f\\u6761\\u4ef6\\u306b\\u5408\\u3046\\u304b\\u78ba\\u8a8d\\u3059\\u308c\\u3070\\u826f\\u3044\\u3002\\n\\n    \\u3053\\u308c\\u306fdp\\u3067\\u5224\\u5b9a\\u3059\\u308b\\u3002\\n        dp[i] = (\\u6700\\u5f8c\\u306bi\\u756a\\u76ee\\u3067\\u533a\\u5207\\u3063\\u305f\\u3068\\u3057\\u3066\\u3001\\u305d\\u3053\\u307e\\u3067\\u3067\\u6761\\u4ef6\\u3092\\u6e80\\u305f\\u3059\\u306e\\u304c\\u53ef\\u80fd\\u304b)\\n    \\\"\\\"\\\"\\n    # preprocess-part\\n    state = [0] * (N * 2)  # state[i] = {1: start, 0: none, -1: end}\\n    for s, e in zip(start, end):\\n        if s != -1: state[s] = 1\\n        if e != -1: state[e] = -1\\n    \\n    ok = [[0] * (N * 2) for _ in range(N * 2)]\\n    for s in range(N * 2):\\n        for e in range(s + 1):\\n            ok[s][e] = -1\\n    \\n    for s in start_only:\\n        for e in range(s + 1, N * 2):\\n            if e in confirmed_start or e in confirmed_end or e in end_only or e in start_set: ok[s][e] = -1\\n    for e in end_only:\\n        for s in range(e):\\n            if s in confirmed_start or s in confirmed_end or s in start_only or s in end_set: ok[s][e] = -1\\n    \\n    for s in range(N * 2):\\n        if s in start_only: continue\\n        for e in range(s + 1, N * 2):\\n            if e in confirmed_start or e in confirmed_end or e in start_only: ok[s][e] = -1\\n    for e in range(N * 2):\\n        if e in end_only: continue\\n        for s in range(e):\\n            if s in confirmed_start or s in confirmed_end or s in end_only: ok[s][e] = -1\\n        \\n    for s, e in confirmed:\\n        ok[s][e] = 1\\n        for ns in range(N * 2):\\n            if ns != s: ok[ns][e] = -1\\n            ok[ns][s] = -1\\n        for ne in range(N * 2):\\n            if ne != e: ok[s][ne] = -1\\n            ok[e][ne] = -1\\n    \\n    #for row in ok: print(\\\"    {}\\\".format(row))\\n    \\n    # dp-part\\n    dp = [False] * (N * 2 + 1)\\n    dp[0] = True\\n    for i in range(2, N * 2 + 1, 2):\\n        flag = False\\n        for j in range(i - 2, -1, -2):\\n            if not dp[j]: continue\\n            stride = (i - j) // 2\\n            for k in range(j, j + stride):\\n                if state[k] == -1 or state[k + stride] == 1 or ok[k][k + stride] == -1:\\n                    break\\n            else:\\n                #print(\\\"[{}, {}) worked!\\\".format(j, i))\\n                flag = True\\n                break\\n        if flag:\\n            dp[i] = True\\n        #print(\\\"i={}, dp={}\\\".format(i, dp))\\n    \\n    if dp[-1]:\\n        print(\\\"Yes\\\")\\n    else:\\n        print(\\\"No\\\")\\n    \\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\"]",
  "input_output": "{\"inputs\": [\"3\\n1 -1\\n-1 4\\n-1 6\\n\", \"2\\n1 4\\n2 3\\n\", \"2\\n4 1\\n2 4\\n\", \"2\\n3 -1\\n-1 2\\n\", \"6\\n6 10\\n5 9\\n1 2\\n11 12\\n4 8\\n3 7\\n\", \"1\\n1 2\\n\", \"98\\n17 49\\n139 171\\n-1 114\\n147 179\\n26 58\\n-1 50\\n11 43\\n1 2\\n74 106\\n134 166\\n157 189\\n67 99\\n33 -1\\n155 187\\n25 57\\n156 -1\\n21 53\\n-1 126\\n98 130\\n6 38\\n153 185\\n8 40\\n81 113\\n69 101\\n84 116\\n150 182\\n89 121\\n34 66\\n154 186\\n32 64\\n95 127\\n162 194\\n-1 119\\n16 48\\n19 51\\n76 108\\n-1 45\\n75 107\\n79 111\\n149 181\\n161 -1\\n-1 104\\n3 35\\n93 125\\n22 -1\\n77 109\\n151 -1\\n85 -1\\n195 196\\n20 52\\n68 100\\n152 184\\n31 63\\n158 190\\n132 164\\n-1 180\\n160 192\\n140 172\\n78 110\\n-1 62\\n86 118\\n133 165\\n131 163\\n71 103\\n7 39\\n135 167\\n146 -1\\n27 59\\n5 37\\n15 47\\n4 36\\n12 44\\n97 129\\n137 -1\\n29 -1\\n143 175\\n136 168\\n159 191\\n91 123\\n24 56\\n88 120\\n145 177\\n14 46\\n96 128\\n90 122\\n144 176\\n92 124\\n28 60\\n138 170\\n142 174\\n70 102\\n23 55\\n10 42\\n9 41\\n73 105\\n-1 112\\n141 173\\n83 115\\n\", \"93\\n95 -1\\n137 140\\n144 147\\n81 84\\n131 133\\n9 -1\\n53 55\\n160 167\\n-1 111\\n92 99\\n32 39\\n58 -1\\n125 130\\n93 100\\n13 14\\n7 10\\n71 74\\n-1 114\\n158 165\\n143 146\\n28 35\\n172 175\\n145 148\\n151 153\\n118 120\\n132 134\\n155 162\\n60 65\\n156 163\\n17 20\\n15 18\\n24 26\\n149 150\\n8 11\\n61 66\\n31 38\\n43 46\\n182 184\\n68 70\\n107 110\\n-1 -1\\n44 47\\n79 82\\n-1 37\\n23 25\\n141 142\\n41 42\\n51 52\\n169 170\\n123 128\\n33 40\\n157 164\\n87 89\\n109 112\\n72 75\\n73 76\\n173 176\\n77 78\\n-1 6\\n171 174\\n88 90\\n49 50\\n1 2\\n-1 126\\n122 127\\n45 48\\n105 106\\n16 -1\\n96 103\\n-1 168\\n-1 34\\n91 -1\\n97 104\\n135 138\\n185 186\\n177 178\\n-1 83\\n57 62\\n159 166\\n115 116\\n179 180\\n67 69\\n3 5\\n117 119\\n136 139\\n-1 56\\n85 86\\n94 101\\n124 129\\n152 154\\n-1 36\\n59 64\\n21 22\\n\", \"98\\n-1 164\\n138 170\\n-1 55\\n-1 188\\n5 37\\n81 -1\\n11 43\\n142 174\\n146 178\\n-1 181\\n-1 173\\n93 125\\n152 -1\\n137 169\\n158 190\\n98 130\\n144 176\\n-1 -1\\n85 117\\n160 192\\n94 -1\\n-1 101\\n30 62\\n139 171\\n91 123\\n16 48\\n25 57\\n-1 59\\n97 129\\n74 106\\n31 63\\n19 51\\n-1 109\\n29 61\\n140 172\\n32 -1\\n-1 165\\n82 114\\n-1 56\\n131 163\\n95 127\\n22 54\\n20 52\\n145 177\\n70 -1\\n7 39\\n136 -1\\n67 99\\n3 35\\n12 -1\\n155 -1\\n143 -1\\n13 45\\n89 121\\n90 122\\n26 58\\n151 183\\n92 124\\n153 185\\n84 116\\n-1 186\\n148 180\\n161 193\\n-1 105\\n72 104\\n-1 103\\n134 166\\n-1 60\\n33 -1\\n18 50\\n157 189\\n83 115\\n162 194\\n-1 191\\n76 108\\n147 179\\n68 -1\\n88 120\\n79 111\\n9 41\\n87 119\\n86 -1\\n80 -1\\n-1 46\\n195 196\\n10 -1\\n96 128\\n78 -1\\n4 36\\n17 49\\n150 182\\n135 167\\n-1 53\\n15 47\\n1 2\\n8 40\\n-1 -1\\n6 38\\n\", \"90\\n-1 123\\n-1 166\\n101 102\\n-1 19\\n78 82\\n-1 168\\n69 -1\\n23 -1\\n77 81\\n85 -1\\n161 162\\n-1 65\\n21 22\\n31 32\\n-1 -1\\n1 2\\n89 93\\n95 96\\n154 -1\\n48 60\\n-1 104\\n-1 -1\\n25 -1\\n-1 -1\\n-1 84\\n107 119\\n99 100\\n-1 83\\n115 -1\\n67 -1\\n151 -1\\n-1 -1\\n175 180\\n26 30\\n134 -1\\n16 20\\n169 170\\n37 -1\\n-1 -1\\n-1 140\\n97 98\\n45 57\\n143 147\\n-1 120\\n-1 139\\n90 94\\n-1 59\\n-1 -1\\n73 -1\\n-1 128\\n24 -1\\n-1 -1\\n174 -1\\n39 -1\\n51 63\\n13 17\\n131 132\\n113 125\\n-1 42\\n-1 -1\\n54 66\\n-1 135\\n9 11\\n117 129\\n-1 -1\\n33 34\\n105 -1\\n159 160\\n-1 150\\n50 62\\n114 126\\n70 72\\n118 -1\\n173 178\\n112 -1\\n-1 58\\n-1 -1\\n171 -1\\n43 55\\n74 -1\\n141 145\\n-1 18\\n10 -1\\n49 -1\\n35 -1\\n-1 -1\\n142 -1\\n3 4\\n5 -1\\n52 64\\n\", \"94\\n145 146\\n59 64\\n101 103\\n79 80\\n17 18\\n25 26\\n62 67\\n179 -1\\n44 -1\\n117 118\\n161 163\\n124 129\\n127 132\\n165 167\\n185 186\\n97 99\\n41 46\\n2 4\\n45 50\\n-1 86\\n105 110\\n-1 184\\n42 47\\n119 120\\n27 30\\n123 128\\n69 72\\n173 178\\n19 20\\n61 66\\n157 160\\n-1 122\\n5 8\\n139 140\\n170 -1\\n-1 24\\n6 9\\n87 88\\n21 22\\n155 158\\n107 112\\n141 -1\\n29 32\\n71 74\\n7 -1\\n135 138\\n75 76\\n28 31\\n15 16\\n156 159\\n60 -1\\n51 52\\n169 174\\n81 82\\n147 -1\\n166 168\\n153 154\\n-1 40\\n92 95\\n108 113\\n172 177\\n171 -1\\n149 150\\n53 54\\n133 136\\n91 94\\n-1 58\\n34 36\\n102 104\\n1 3\\n143 144\\n-1 137\\n115 -1\\n43 -1\\n13 14\\n162 164\\n106 111\\n77 78\\n83 84\\n63 68\\n151 152\\n187 188\\n181 182\\n-1 35\\n11 12\\n125 -1\\n70 73\\n-1 100\\n93 96\\n109 114\\n126 131\\n37 39\\n89 90\\n55 56\\n\", \"94\\n50 52\\n159 160\\n187 188\\n-1 45\\n124 128\\n80 82\\n97 100\\n59 63\\n162 -1\\n-1 90\\n-1 140\\n131 -1\\n83 84\\n53 -1\\n182 184\\n21 22\\n147 148\\n98 101\\n167 169\\n61 65\\n57 58\\n172 174\\n67 69\\n15 17\\n132 134\\n33 36\\n-1 180\\n117 119\\n141 -1\\n47 48\\n108 110\\n29 30\\n87 88\\n44 46\\n99 102\\n35 -1\\n19 20\\n114 -1\\n-1 32\\n161 164\\n72 -1\\n149 150\\n75 76\\n16 18\\n13 14\\n4 6\\n-1 129\\n23 24\\n-1 -1\\n-1 37\\n111 -1\\n-1 127\\n143 -1\\n1 2\\n175 176\\n157 158\\n79 81\\n177 179\\n3 -1\\n11 12\\n151 152\\n126 130\\n25 -1\\n155 156\\n-1 86\\n49 51\\n93 94\\n181 183\\n171 -1\\n54 56\\n68 70\\n107 109\\n-1 120\\n-1 166\\n95 96\\n8 10\\n40 -1\\n91 92\\n27 28\\n-1 64\\n71 73\\n103 105\\n113 115\\n62 -1\\n135 137\\n121 122\\n-1 186\\n168 170\\n39 41\\n77 78\\n-1 106\\n7 9\\n144 146\\n153 154\\n\", \"94\\n111 -1\\n12 -1\\n125 129\\n21 22\\n73 74\\n27 28\\n9 10\\n166 -1\\n121 -1\\n-1 79\\n-1 106\\n97 105\\n-1 89\\n61 65\\n-1 -1\\n187 188\\n23 -1\\n-1 -1\\n175 178\\n135 136\\n76 80\\n101 109\\n164 -1\\n160 168\\n113 116\\n133 134\\n147 -1\\n85 86\\n96 104\\n157 158\\n137 -1\\n-1 153\\n48 -1\\n5 6\\n-1 50\\n102 -1\\n38 46\\n100 108\\n141 -1\\n93 94\\n32 40\\n53 55\\n91 92\\n-1 184\\n78 82\\n124 -1\\n152 154\\n62 -1\\n176 179\\n131 132\\n14 18\\n-1 -1\\n67 68\\n83 84\\n60 -1\\n11 15\\n99 107\\n71 72\\n162 170\\n49 52\\n185 -1\\n77 81\\n181 183\\n19 20\\n177 180\\n1 2\\n-1 41\\n-1 45\\n95 103\\n24 26\\n35 43\\n-1 119\\n123 127\\n13 17\\n-1 120\\n59 -1\\n165 173\\n-1 -1\\n88 90\\n139 -1\\n159 167\\n54 56\\n149 150\\n155 156\\n126 130\\n29 -1\\n57 58\\n112 115\\n161 -1\\n140 144\\n7 8\\n-1 39\\n69 70\\n142 146\\n\", \"99\\n14 46\\n-1 -1\\n131 -1\\n-1 63\\n152 184\\n135 -1\\n-1 102\\n-1 -1\\n30 62\\n-1 194\\n-1 -1\\n-1 2\\n-1 -1\\n17 -1\\n146 -1\\n-1 -1\\n-1 114\\n12 44\\n-1 -1\\n67 99\\n-1 -1\\n5 -1\\n160 192\\n-1 36\\n84 -1\\n132 164\\n153 -1\\n-1 60\\n71 103\\n-1 -1\\n74 -1\\n93 125\\n-1 -1\\n-1 -1\\n-1 121\\n139 -1\\n-1 42\\n-1 -1\\n-1 -1\\n25 -1\\n-1 129\\n78 110\\n-1 188\\n-1 -1\\n-1 -1\\n-1 190\\n11 -1\\n69 -1\\n136 168\\n79 111\\n-1 193\\n154 -1\\n-1 104\\n27 -1\\n150 182\\n-1 -1\\n83 -1\\n-1 180\\n-1 -1\\n145 177\\n-1 -1\\n138 -1\\n195 197\\n16 -1\\n-1 -1\\n3 35\\n133 165\\n-1 -1\\n157 189\\n21 53\\n73 105\\n-1 55\\n80 -1\\n-1 -1\\n-1 119\\n149 181\\n22 -1\\n32 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n134 166\\n34 -1\\n8 40\\n-1 51\\n95 127\\n26 -1\\n-1 107\\n151 183\\n92 124\\n81 -1\\n-1 -1\\n33 65\\n86 118\\n-1 -1\\n91 -1\\n-1 -1\\n-1 128\\n196 198\\n\", \"94\\n-1 184\\n-1 144\\n174 176\\n98 100\\n52 -1\\n-1 73\\n101 104\\n6 10\\n78 81\\n45 47\\n182 187\\n122 130\\n19 20\\n171 172\\n142 145\\n85 89\\n-1 94\\n97 99\\n54 62\\n29 30\\n87 91\\n-1 170\\n162 -1\\n15 18\\n121 129\\n-1 178\\n86 90\\n3 4\\n72 76\\n136 140\\n-1 27\\n22 26\\n70 74\\n102 105\\n37 40\\n103 106\\n149 153\\n157 158\\n161 163\\n95 96\\n88 92\\n57 65\\n134 -1\\n181 186\\n-1 125\\n173 175\\n79 82\\n107 -1\\n-1 75\\n33 35\\n133 137\\n115 123\\n180 185\\n-1 32\\n118 126\\n110 112\\n38 -1\\n159 160\\n83 -1\\n152 156\\n43 44\\n135 -1\\n151 155\\n166 169\\n77 80\\n109 111\\n-1 -1\\n116 124\\n55 63\\n113 114\\n131 132\\n-1 148\\n21 25\\n58 66\\n120 128\\n13 -1\\n165 168\\n119 127\\n5 9\\n34 -1\\n143 -1\\n67 -1\\n14 17\\n39 42\\n-1 64\\n7 11\\n-1 50\\n8 12\\n150 154\\n183 -1\\n1 2\\n-1 -1\\n46 48\\n-1 28\\n\", \"98\\n-1 179\\n74 172\\n36 -1\\n-1 100\\n54 152\\n68 166\\n22 120\\n27 125\\n-1 189\\n35 -1\\n51 149\\n84 182\\n48 146\\n14 112\\n66 164\\n-1 193\\n49 147\\n6 104\\n73 171\\n-1 121\\n76 174\\n56 154\\n77 -1\\n83 181\\n96 -1\\n92 190\\n-1 178\\n-1 177\\n85 -1\\n63 161\\n1 99\\n67 165\\n97 -1\\n62 160\\n64 162\\n-1 116\\n-1 140\\n-1 -1\\n16 114\\n98 196\\n37 135\\n87 -1\\n-1 105\\n90 188\\n61 159\\n33 131\\n26 124\\n65 163\\n28 126\\n40 138\\n-1 107\\n47 -1\\n93 191\\n39 137\\n94 192\\n44 142\\n12 110\\n8 106\\n11 109\\n78 176\\n17 115\\n38 136\\n89 187\\n5 103\\n46 144\\n15 113\\n19 117\\n-1 -1\\n30 -1\\n20 118\\n21 -1\\n59 157\\n72 170\\n41 139\\n52 150\\n70 168\\n75 173\\n25 123\\n29 127\\n4 102\\n45 143\\n50 148\\n13 -1\\n43 141\\n53 151\\n-1 155\\n86 184\\n88 186\\n82 180\\n34 132\\n58 156\\n60 158\\n3 -1\\n-1 -1\\n31 129\\n71 169\\n24 122\\n32 130\\n\", \"94\\n147 148\\n33 39\\n135 137\\n118 120\\n112 116\\n75 79\\n86 88\\n140 144\\n-1 51\\n174 178\\n141 145\\n48 52\\n95 96\\n-1 -1\\n110 114\\n29 30\\n182 184\\n37 43\\n-1 170\\n-1 132\\n7 9\\n77 81\\n142 146\\n100 106\\n-1 179\\n123 129\\n59 65\\n-1 172\\n101 107\\n19 -1\\n-1 87\\n187 -1\\n124 130\\n31 32\\n-1 42\\n12 16\\n-1 18\\n1 4\\n3 6\\n21 23\\n91 92\\n63 69\\n173 177\\n83 84\\n62 68\\n153 154\\n46 50\\n155 -1\\n165 171\\n149 151\\n99 105\\n-1 103\\n181 183\\n8 10\\n139 143\\n35 41\\n-1 66\\n93 94\\n163 169\\n162 168\\n57 58\\n78 82\\n11 15\\n61 67\\n22 24\\n117 119\\n98 104\\n157 -1\\n72 74\\n176 180\\n128 134\\n109 113\\n45 49\\n161 167\\n89 90\\n25 26\\n38 44\\n121 122\\n127 133\\n13 17\\n136 138\\n159 -1\\n53 -1\\n102 108\\n185 186\\n111 115\\n54 56\\n27 28\\n64 70\\n2 5\\n34 40\\n76 -1\\n71 73\\n150 152\\n\", \"96\\n168 174\\n113 -1\\n51 54\\n106 -1\\n127 129\\n64 66\\n-1 46\\n83 88\\n143 -1\\n137 -1\\n141 144\\n42 48\\n1 2\\n53 56\\n-1 155\\n49 -1\\n122 -1\\n-1 -1\\n4 7\\n169 175\\n38 44\\n-1 45\\n166 -1\\n-1 32\\n-1 89\\n9 10\\n86 91\\n-1 136\\n-1 27\\n-1 76\\n87 92\\n67 70\\n161 162\\n142 -1\\n-1 24\\n-1 -1\\n57 59\\n3 6\\n-1 107\\n41 47\\n99 100\\n-1 43\\n103 109\\n105 -1\\n-1 62\\n33 34\\n-1 -1\\n148 -1\\n125 126\\n77 80\\n85 90\\n-1 154\\n-1 171\\n-1 12\\n147 152\\n-1 72\\n170 176\\n102 108\\n68 -1\\n63 65\\n181 184\\n23 28\\n97 98\\n73 74\\n14 17\\n115 118\\n180 183\\n-1 120\\n167 -1\\n5 -1\\n78 81\\n58 60\\n151 156\\n158 160\\n79 82\\n-1 134\\n94 -1\\n104 110\\n116 119\\n-1 18\\n20 25\\n128 -1\\n177 178\\n-1 -1\\n157 159\\n52 55\\n139 140\\n35 -1\\n29 31\\n179 182\\n-1 -1\\n21 26\\n-1 192\\n13 -1\\n186 188\\n189 190\\n\", \"100\\n159 189\\n1 2\\n36 66\\n99 129\\n137 167\\n147 177\\n11 41\\n163 193\\n151 -1\\n145 175\\n24 54\\n17 47\\n26 -1\\n14 44\\n-1 -1\\n28 58\\n142 172\\n155 185\\n12 -1\\n73 103\\n3 5\\n195 197\\n33 63\\n161 191\\n74 104\\n160 -1\\n131 133\\n-1 169\\n162 192\\n15 45\\n30 60\\n78 108\\n149 179\\n-1 39\\n68 70\\n156 186\\n67 69\\n96 126\\n-1 130\\n83 113\\n-1 116\\n138 168\\n16 46\\n-1 49\\n76 106\\n35 65\\n199 200\\n141 171\\n140 170\\n79 -1\\n132 134\\n88 118\\n77 107\\n82 112\\n13 43\\n90 120\\n72 102\\n4 6\\n91 121\\n143 173\\n135 165\\n93 -1\\n32 62\\n92 122\\n27 57\\n34 64\\n144 174\\n25 55\\n23 53\\n-1 198\\n84 114\\n95 125\\n71 101\\n152 182\\n136 166\\n158 188\\n75 105\\n153 183\\n94 124\\n80 -1\\n-1 -1\\n85 115\\n89 119\\n20 -1\\n8 38\\n-1 -1\\n148 178\\n87 117\\n164 194\\n-1 187\\n150 180\\n154 184\\n29 59\\n31 61\\n18 48\\n22 52\\n97 127\\n98 128\\n81 111\\n21 51\\n\", \"90\\n151 152\\n57 -1\\n-1 -1\\n135 136\\n51 62\\n32 36\\n7 8\\n139 141\\n177 -1\\n42 48\\n114 -1\\n157 161\\n165 171\\n166 172\\n37 43\\n9 10\\n83 86\\n123 134\\n29 33\\n49 60\\n79 80\\n-1 20\\n168 -1\\n25 27\\n145 148\\n95 99\\n-1 129\\n1 4\\n52 63\\n147 150\\n82 85\\n-1 124\\n39 45\\n31 -1\\n54 65\\n159 163\\n146 149\\n26 28\\n160 164\\n96 100\\n153 -1\\n58 69\\n94 -1\\n103 109\\n170 176\\n116 127\\n106 112\\n12 14\\n87 88\\n41 -1\\n115 126\\n76 78\\n105 111\\n11 13\\n73 74\\n158 162\\n-1 108\\n53 64\\n59 70\\n56 67\\n154 156\\n15 16\\n71 72\\n40 46\\n117 128\\n18 21\\n75 77\\n104 110\\n120 131\\n-1 133\\n119 130\\n19 22\\n169 175\\n121 132\\n2 5\\n93 97\\n89 91\\n50 61\\n143 -1\\n38 44\\n55 66\\n30 34\\n90 92\\n81 -1\\n137 138\\n167 173\\n178 180\\n101 -1\\n3 6\\n23 24\\n\", \"92\\n29 -1\\n8 12\\n59 66\\n179 182\\n79 83\\n125 132\\n37 40\\n85 86\\n49 52\\n113 116\\n21 22\\n149 150\\n-1 34\\n-1 98\\n2 4\\n36 -1\\n16 20\\n56 63\\n159 160\\n120 127\\n144 -1\\n154 156\\n80 84\\n109 111\\n157 158\\n46 48\\n174 176\\n93 94\\n26 28\\n169 170\\n141 145\\n35 38\\n90 92\\n99 102\\n178 181\\n122 129\\n55 62\\n105 -1\\n136 140\\n23 24\\n121 128\\n107 108\\n77 81\\n124 131\\n72 76\\n-1 166\\n-1 64\\n5 9\\n-1 75\\n45 47\\n173 175\\n89 91\\n-1 117\\n134 138\\n177 180\\n43 44\\n78 82\\n101 104\\n14 -1\\n183 184\\n31 32\\n13 17\\n87 88\\n50 53\\n6 10\\n165 168\\n15 19\\n51 54\\n119 -1\\n110 112\\n133 137\\n142 146\\n61 68\\n143 147\\n135 139\\n7 11\\n100 -1\\n25 27\\n41 -1\\n58 65\\n123 -1\\n153 155\\n1 3\\n115 118\\n161 162\\n60 67\\n95 96\\n151 152\\n-1 172\\n-1 73\\n164 167\\n70 74\\n\", \"91\\n-1 177\\n46 -1\\n10 -1\\n57 -1\\n35 36\\n118 -1\\n-1 16\\n-1 -1\\n76 85\\n138 -1\\n-1 -1\\n121 -1\\n157 -1\\n-1 -1\\n-1 89\\n134 -1\\n-1 153\\n-1 154\\n-1 104\\n131 132\\n-1 -1\\n158 162\\n-1 -1\\n-1 33\\n156 -1\\n-1 -1\\n165 166\\n-1 108\\n181 -1\\n-1 171\\n136 -1\\n163 164\\n39 40\\n155 159\\n-1 150\\n37 38\\n-1 52\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 90\\n-1 -1\\n45 49\\n-1 82\\n-1 -1\\n-1 68\\n8 17\\n174 178\\n-1 -1\\n-1 -1\\n167 168\\n-1 61\\n-1 -1\\n-1 -1\\n47 51\\n-1 60\\n119 126\\n-1 26\\n71 80\\n59 -1\\n9 18\\n120 -1\\n-1 -1\\n69 78\\n-1 -1\\n139 -1\\n72 -1\\n-1 100\\n-1 124\\n-1 142\\n-1 44\\n58 65\\n27 31\\n-1 83\\n-1 -1\\n77 86\\n122 129\\n3 4\\n-1 22\\n135 144\\n105 -1\\n-1 113\\n110 114\\n112 -1\\n-1 97\\n-1 -1\\n-1 -1\\n-1 179\\n12 21\\n-1 -1\\n170 172\\n\", \"97\\n-1 12\\n119 -1\\n-1 -1\\n151 -1\\n-1 156\\n177 -1\\n55 56\\n-1 128\\n73 -1\\n45 -1\\n-1 174\\n-1 -1\\n-1 -1\\n121 122\\n-1 72\\n-1 192\\n167 -1\\n-1 -1\\n169 170\\n85 86\\n-1 -1\\n-1 -1\\n115 -1\\n43 -1\\n145 -1\\n-1 114\\n-1 20\\n35 36\\n-1 -1\\n61 62\\n137 138\\n-1 76\\n41 -1\\n-1 -1\\n23 24\\n87 -1\\n-1 32\\n65 -1\\n-1 92\\n-1 -1\\n-1 110\\n-1 -1\\n-1 -1\\n-1 34\\n-1 154\\n-1 126\\n-1 -1\\n79 -1\\n97 -1\\n-1 -1\\n25 -1\\n53 -1\\n-1 -1\\n-1 144\\n131 -1\\n-1 4\\n59 60\\n105 106\\n-1 -1\\n-1 -1\\n179 -1\\n-1 194\\n-1 48\\n163 -1\\n-1 64\\n-1 -1\\n-1 -1\\n-1 -1\\n123 -1\\n-1 28\\n139 140\\n-1 -1\\n-1 -1\\n-1 18\\n-1 -1\\n187 188\\n99 -1\\n141 142\\n161 162\\n57 58\\n147 148\\n-1 102\\n-1 70\\n21 -1\\n-1 -1\\n-1 -1\\n51 -1\\n-1 -1\\n111 112\\n-1 -1\\n81 -1\\n-1 -1\\n1 2\\n83 -1\\n-1 -1\\n-1 -1\\n107 108\\n\", \"1\\n1 2\\n\", \"100\\n65 165\\n6 106\\n41 141\\n1 101\\n4 104\\n33 133\\n5 105\\n57 157\\n98 198\\n15 115\\n52 152\\n53 153\\n46 146\\n29 129\\n42 142\\n8 108\\n12 112\\n69 169\\n47 147\\n87 187\\n79 179\\n88 188\\n67 167\\n26 126\\n55 155\\n73 173\\n72 172\\n74 174\\n95 195\\n36 136\\n61 161\\n10 110\\n17 117\\n7 107\\n23 123\\n30 130\\n14 114\\n90 190\\n66 166\\n99 199\\n94 194\\n91 191\\n82 182\\n62 162\\n81 181\\n44 144\\n51 151\\n78 178\\n11 111\\n43 143\\n50 150\\n19 119\\n83 183\\n49 149\\n80 180\\n54 154\\n18 118\\n21 121\\n75 175\\n34 134\\n77 177\\n31 131\\n28 128\\n68 168\\n84 184\\n92 192\\n22 122\\n60 160\\n24 124\\n38 138\\n93 193\\n13 113\\n9 109\\n100 200\\n58 158\\n45 145\\n97 197\\n63 163\\n89 189\\n16 116\\n56 156\\n37 137\\n20 120\\n48 148\\n39 139\\n96 196\\n71 171\\n32 132\\n64 164\\n2 102\\n70 170\\n35 135\\n3 103\\n59 159\\n76 176\\n25 125\\n40 140\\n86 186\\n85 185\\n27 127\\n\", \"100\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n\", \"55\\n92 93\\n49 -1\\n34 -1\\n-1 89\\n25 -1\\n-1 99\\n33 -1\\n-1 -1\\n106 107\\n104 105\\n1 2\\n41 98\\n15 16\\n42 61\\n-1 60\\n-1 -1\\n-1 67\\n-1 64\\n-1 72\\n43 -1\\n62 65\\n84 85\\n70 97\\n12 13\\n31 100\\n-1 -1\\n-1 81\\n-1 78\\n82 91\\n101 102\\n-1 -1\\n17 110\\n94 -1\\n-1 -1\\n44 55\\n-1 21\\n-1 36\\n-1 53\\n46 47\\n-1 27\\n-1 90\\n-1 -1\\n-1 59\\n4 5\\n6 7\\n87 88\\n3 8\\n68 -1\\n32 39\\n-1 -1\\n45 54\\n-1 109\\n23 -1\\n76 77\\n-1 -1\\n\", \"74\\n80 -1\\n43 46\\n-1 66\\n10 -1\\n109 110\\n14 -1\\n121 124\\n-1 126\\n138 141\\n96 97\\n132 -1\\n73 74\\n21 -1\\n-1 135\\n-1 71\\n-1 45\\n54 77\\n-1 88\\n55 -1\\n-1 83\\n130 131\\n34 -1\\n47 -1\\n-1 -1\\n116 125\\n117 -1\\n79 -1\\n99 -1\\n98 103\\n-1 -1\\n100 101\\n-1 58\\n-1 140\\n52 53\\n72 75\\n63 64\\n35 38\\n4 5\\n27 -1\\n145 146\\n2 3\\n-1 142\\n-1 70\\n32 49\\n133 136\\n-1 -1\\n12 111\\n-1 6\\n60 -1\\n78 89\\n-1 -1\\n29 90\\n-1 148\\n17 20\\n30 51\\n143 -1\\n-1 108\\n-1 68\\n62 65\\n-1 -1\\n128 129\\n15 -1\\n118 119\\n7 8\\n26 91\\n94 -1\\n-1 115\\n33 42\\n31 50\\n13 106\\n113 -1\\n-1 37\\n23 104\\n122 123\\n\", \"31\\n3 4\\n-1 -1\\n-1 6\\n23 -1\\n-1 -1\\n39 40\\n9 -1\\n-1 20\\n37 -1\\n-1 27\\n21 -1\\n41 -1\\n-1 -1\\n-1 30\\n51 52\\n1 2\\n58 61\\n55 62\\n47 50\\n36 45\\n-1 -1\\n-1 57\\n25 -1\\n48 49\\n-1 43\\n34 35\\n-1 32\\n-1 54\\n12 17\\n33 46\\n-1 -1\\n\", \"93\\n-1 186\\n89 -1\\n166 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 170\\n-1 -1\\n-1 179\\n-1 -1\\n-1 176\\n-1 112\\n139 98\\n-1 161\\n-1 -1\\n23 -1\\n-1 -1\\n-1 -1\\n-1 129\\n-1 8\\n-1 -1\\n-1 -1\\n-1 46\\n-1 -1\\n-1 -1\\n-1 128\\n140 -1\\n159 66\\n108 107\\n-1 -1\\n-1 74\\n67 128\\n-1 73\\n16 -1\\n-1 170\\n-1 85\\n-1 -1\\n133 -1\\n151 152\\n-1 -1\\n3 -1\\n-1 107\\n111 -1\\n13 17\\n141 -1\\n-1 -1\\n158 186\\n115 33\\n-1 42\\n101 -1\\n-1 -1\\n58 63\\n37 40\\n139 143\\n-1 -1\\n43 144\\n-1 -1\\n147 149\\n52 55\\n175 -1\\n133 134\\n115 -1\\n-1 105\\n-1 170\\n-1 -1\\n57 62\\n43 44\\n78 -1\\n-1 -1\\n59 -1\\n-1 -1\\n103 -1\\n16 35\\n-1 -1\\n-1 54\\n-1 -1\\n159 163\\n-1 120\\n18 14\\n-1 30\\n7 9\\n-1 35\\n-1 125\\n-1 42\\n-1 119\\n-1 -1\\n93 98\\n6 -1\\n185 186\\n-1 88\\n-1 142\\n-1 -1\\n\", \"96\\n134 136\\n3 4\\n49 51\\n163 -1\\n185 188\\n-1 -1\\n-1 34\\n46 48\\n102 106\\n5 7\\n-1 138\\n43 44\\n140 142\\n143 145\\n126 129\\n152 158\\n24 30\\n164 168\\n19 25\\n161 162\\n100 104\\n16 18\\n23 -1\\n147 153\\n-1 90\\n148 154\\n70 -1\\n117 118\\n36 40\\n99 103\\n11 13\\n127 130\\n9 10\\n183 186\\n21 27\\n86 92\\n-1 157\\n171 172\\n76 78\\n-1 122\\n15 17\\n75 -1\\n110 112\\n159 160\\n63 66\\n50 -1\\n80 82\\n55 58\\n131 -1\\n177 179\\n69 71\\n165 169\\n149 155\\n31 -1\\n87 93\\n53 54\\n79 81\\n-1 94\\n45 47\\n113 115\\n190 -1\\n61 64\\n-1 191\\n133 -1\\n-1 -1\\n97 98\\n101 105\\n-1 187\\n150 156\\n62 -1\\n121 124\\n57 60\\n173 175\\n67 68\\n181 182\\n120 123\\n56 59\\n20 26\\n95 96\\n125 128\\n-1 91\\n38 42\\n166 170\\n144 146\\n107 108\\n-1 180\\n174 -1\\n12 -1\\n73 74\\n109 -1\\n6 8\\n-1 89\\n139 141\\n37 41\\n35 39\\n1 2\\n\", \"90\\n142 -1\\n-1 -1\\n109 114\\n150 154\\n41 46\\n85 -1\\n59 51\\n27 23\\n18 -1\\n102 101\\n44 -1\\n-1 -1\\n87 -1\\n172 177\\n-1 90\\n105 -1\\n56 64\\n108 113\\n-1 135\\n29 31\\n143 -1\\n-1 38\\n-1 112\\n98 -1\\n106 111\\n-1 175\\n168 -1\\n-1 180\\n93 -1\\n138 141\\n116 124\\n-1 65\\n55 63\\n21 -1\\n17 -1\\n42 -1\\n22 26\\n84 82\\n-1 -1\\n10 13\\n-1 83\\n-1 -1\\n161 162\\n146 -1\\n115 123\\n94 96\\n69 70\\n119 127\\n30 32\\n-1 -1\\n-1 3\\n39 40\\n45 -1\\n-1 8\\n1 2\\n88 92\\n74 77\\n52 60\\n121 129\\n75 78\\n43 48\\n171 -1\\n54 -1\\n80 79\\n157 159\\n-1 -1\\n-1 53\\n118 -1\\n24 -1\\n131 -1\\n76 73\\n173 178\\n145 147\\n71 72\\n-1 -1\\n-1 -1\\n-1 122\\n149 153\\n-1 35\\n16 -1\\n-1 68\\n169 174\\n99 100\\n-1 133\\n-1 164\\n165 166\\n151 155\\n-1 6\\n103 104\\n-1 156\\n\", \"91\\n18 26\\n97 99\\n114 -1\\n161 163\\n47 -1\\n24 32\\n70 29\\n49 58\\n22 30\\n149 112\\n133 135\\n116 125\\n179 26\\n148 -1\\n-1 176\\n120 176\\n172 26\\n17 25\\n141 109\\n-1 128\\n131 132\\n108 110\\n77 93\\n111 112\\n19 27\\n-1 160\\n-1 39\\n147 160\\n-1 -1\\n169 153\\n21 29\\n82 -1\\n3 36\\n165 -1\\n84 92\\n97 65\\n-1 25\\n165 181\\n143 158\\n53 62\\n137 138\\n-1 168\\n88 96\\n107 109\\n11 176\\n67 -1\\n171 95\\n86 94\\n-1 61\\n162 164\\n134 136\\n-1 -1\\n50 59\\n165 167\\n117 80\\n151 159\\n-1 93\\n-1 -1\\n87 64\\n152 124\\n-1 68\\n23 29\\n13 14\\n20 -1\\n43 45\\n150 158\\n1 2\\n9 10\\n-1 89\\n118 127\\n121 130\\n117 -1\\n75 76\\n-1 91\\n148 156\\n51 60\\n20 -1\\n171 -1\\n47 48\\n152 26\\n113 122\\n-1 40\\n-1 42\\n117 104\\n33 60\\n117 -1\\n175 176\\n105 106\\n34 36\\n44 46\\n20 28\\n\", \"95\\n181 182\\n18 17\\n183 50\\n94 -1\\n4 182\\n-1 163\\n108 110\\n69 72\\n88 86\\n57 58\\n150 35\\n123 127\\n-1 38\\n126 -1\\n-1 105\\n150 2\\n16 -1\\n96 90\\n143 144\\n187 189\\n115 43\\n85 87\\n84 83\\n53 54\\n188 190\\n14 13\\n186 185\\n124 -1\\n103 106\\n81 82\\n3 6\\n124 128\\n139 140\\n-1 164\\n-1 35\\n-1 128\\n92 98\\n115 116\\n112 74\\n39 176\\n89 -1\\n78 -1\\n184 183\\n-1 174\\n19 20\\n176 -1\\n37 40\\n104 54\\n117 118\\n121 97\\n12 11\\n107 109\\n155 -1\\n9 -1\\n68 71\\n-1 13\\n-1 80\\n-1 153\\n59 -1\\n-1 112\\n150 145\\n149 -1\\n61 65\\n64 60\\n137 -1\\n131 23\\n154 160\\n47 -1\\n75 129\\n126 162\\n-1 177\\n171 173\\n26 32\\n-1 125\\n-1 120\\n115 141\\n133 74\\n153 121\\n131 -1\\n44 97\\n132 -1\\n-1 -1\\n68 33\\n-1 -1\\n39 129\\n179 180\\n62 66\\n150 -1\\n94 125\\n28 34\\n56 35\\n147 148\\n5 8\\n47 49\\n51 38\\n\", \"93\\n-1 100\\n-1 36\\n-1 -1\\n64 72\\n146 -1\\n-1 84\\n37 -1\\n4 8\\n57 65\\n-1 142\\n39 -1\\n-1 75\\n48 53\\n167 171\\n121 -1\\n-1 108\\n29 30\\n47 -1\\n31 34\\n-1 170\\n96 99\\n128 -1\\n113 118\\n93 94\\n174 179\\n-1 98\\n176 181\\n38 42\\n173 178\\n59 67\\n61 69\\n62 70\\n-1 -1\\n13 -1\\n160 163\\n165 -1\\n63 71\\n111 116\\n-1 135\\n152 -1\\n-1 90\\n21 22\\n103 -1\\n-1 19\\n137 -1\\n46 51\\n151 154\\n149 150\\n112 -1\\n183 184\\n77 78\\n40 -1\\n2 6\\n-1 26\\n125 133\\n88 91\\n143 144\\n55 -1\\n185 186\\n81 83\\n-1 172\\n-1 105\\n89 -1\\n-1 132\\n119 120\\n79 -1\\n-1 115\\n-1 -1\\n153 156\\n58 66\\n175 -1\\n126 134\\n159 -1\\n1 5\\n85 86\\n3 7\\n138 140\\n-1 -1\\n24 27\\n-1 -1\\n49 54\\n-1 11\\n-1 164\\n-1 130\\n32 -1\\n-1 20\\n25 28\\n60 68\\n102 106\\n10 12\\n-1 114\\n177 -1\\n-1 147\\n\", \"90\\n23 26\\n55 27\\n103 155\\n98 100\\n37 41\\n25 126\\n111 50\\n19 106\\n58 -1\\n134 136\\n89 10\\n48 77\\n88 91\\n137 150\\n122 135\\n133 60\\n159 -1\\n140 164\\n51 74\\n57 125\\n12 4\\n112 94\\n157 160\\n143 107\\n109 163\\n9 -1\\n175 177\\n80 18\\n115 124\\n102 67\\n95 -1\\n153 156\\n56 68\\n151 154\\n79 142\\n139 132\\n53 7\\n38 49\\n-1 174\\n21 64\\n15 17\\n45 84\\n166 92\\n47 63\\n162 99\\n59 65\\n6 171\\n104 46\\n176 30\\n73 138\\n123 148\\n179 72\\n52 3\\n117 14\\n120 129\\n144 180\\n83 -1\\n97 81\\n39 8\\n167 86\\n93 105\\n75 178\\n31 32\\n40 44\\n76 82\\n2 66\\n116 141\\n165 169\\n16 61\\n152 158\\n147 42\\n33 35\\n149 113\\n101 28\\n24 114\\n85 110\\n87 108\\n173 90\\n70 146\\n168 172\\n54 62\\n5 20\\n29 78\\n161 131\\n121 -1\\n34 36\\n11 13\\n1 96\\n119 128\\n118 127\\n\", \"96\\n53 119\\n13 8\\n191 192\\n131 137\\n156 -1\\n185 186\\n-1 76\\n-1 178\\n89 140\\n123 -1\\n3 106\\n31 138\\n105 150\\n40 172\\n95 158\\n102 151\\n96 108\\n-1 -1\\n187 85\\n145 52\\n33 36\\n159 162\\n25 26\\n121 122\\n19 115\\n38 154\\n66 72\\n91 93\\n18 23\\n17 22\\n118 120\\n177 51\\n-1 134\\n176 46\\n16 70\\n112 -1\\n37 42\\n-1 174\\n160 163\\n59 43\\n125 126\\n181 183\\n75 116\\n79 94\\n161 164\\n-1 -1\\n48 60\\n80 190\\n61 179\\n39 99\\n54 56\\n-1 35\\n47 50\\n82 180\\n1 90\\n-1 170\\n-1 21\\n68 184\\n132 171\\n153 44\\n-1 136\\n28 142\\n147 88\\n144 149\\n92 14\\n-1 78\\n57 173\\n155 34\\n15 20\\n143 9\\n67 73\\n117 -1\\n97 100\\n141 152\\n104 109\\n166 133\\n65 71\\n-1 87\\n77 24\\n111 114\\n-1 86\\n167 45\\n11 62\\n83 30\\n182 74\\n129 135\\n27 29\\n189 188\\n-1 6\\n63 69\\n2 107\\n101 58\\n41 12\\n5 10\\n-1 110\\n146 157\\n\", \"94\\n78 18\\n172 46\\n47 48\\n-1 34\\n113 114\\n-1 176\\n1 2\\n140 144\\n59 63\\n115 116\\n-1 52\\n123 127\\n39 41\\n40 74\\n60 64\\n85 -1\\n25 27\\n104 106\\n61 35\\n133 134\\n149 152\\n101 102\\n20 23\\n62 66\\n37 38\\n179 -1\\n89 91\\n57 58\\n12 16\\n5 6\\n54 56\\n84 87\\n14 82\\n93 94\\n69 79\\n159 -1\\n11 -1\\n32 65\\n33 100\\n31 158\\n165 166\\n118 120\\n95 98\\n177 178\\n71 73\\n53 55\\n43 50\\n72 42\\n44 174\\n19 70\\n121 122\\n29 30\\n147 150\\n185 186\\n3 4\\n8 10\\n-1 119\\n21 24\\n148 151\\n142 146\\n67 81\\n167 169\\n49 45\\n154 156\\n136 138\\n135 137\\n153 155\\n161 164\\n90 86\\n97 36\\n181 112\\n139 143\\n77 68\\n111 183\\n131 132\\n141 145\\n83 92\\n26 28\\n107 109\\n175 80\\n103 105\\n171 173\\n125 129\\n13 17\\n168 170\\n96 99\\n75 22\\n182 184\\n160 163\\n108 110\\n187 188\\n-1 9\\n126 130\\n-1 128\\n\", \"90\\n121 139\\n-1 104\\n31 92\\n81 149\\n80 86\\n77 156\\n71 44\\n-1 180\\n45 36\\n101 88\\n103 162\\n107 69\\n3 6\\n93 70\\n32 85\\n142 22\\n-1 11\\n143 132\\n145 66\\n37 65\\n18 4\\n119 72\\n117 75\\n95 63\\n154 155\\n96 19\\n59 -1\\n79 8\\n89 -1\\n113 147\\n177 -1\\n105 133\\n110 64\\n10 62\\n82 124\\n1 175\\n26 125\\n15 97\\n160 129\\n-1 -1\\n58 99\\n2 20\\n158 128\\n169 76\\n174 108\\n94 61\\n144 127\\n171 60\\n17 112\\n120 131\\n54 111\\n122 24\\n13 100\\n41 42\\n30 23\\n173 176\\n118 12\\n123 164\\n115 126\\n46 5\\n146 134\\n-1 151\\n74 102\\n178 91\\n114 28\\n-1 27\\n56 33\\n-1 35\\n90 150\\n167 106\\n57 68\\n39 40\\n9 148\\n165 47\\n51 163\\n157 161\\n153 83\\n29 98\\n52 130\\n49 21\\n137 34\\n138 140\\n25 168\\n50 38\\n14 67\\n141 48\\n159 84\\n43 166\\n109 170\\n55 172\\n\", \"95\\n111 112\\n72 76\\n175 176\\n97 100\\n85 88\\n127 132\\n42 45\\n161 162\\n8 12\\n7 -1\\n-1 108\\n150 153\\n74 78\\n22 25\\n41 44\\n117 121\\n126 -1\\n93 96\\n35 60\\n15 17\\n83 84\\n71 75\\n37 39\\n-1 110\\n115 116\\n55 59\\n86 89\\n182 186\\n165 167\\n87 90\\n33 34\\n183 187\\n64 69\\n62 67\\n-1 -1\\n29 32\\n2 5\\n-1 180\\n128 133\\n1 4\\n47 48\\n80 82\\n136 140\\n54 58\\n-1 -1\\n119 123\\n49 50\\n-1 168\\n125 130\\n38 40\\n3 6\\n73 77\\n79 81\\n9 13\\n28 31\\n137 141\\n155 158\\n184 188\\n16 18\\n10 14\\n101 103\\n163 164\\n19 -1\\n143 145\\n91 94\\n135 139\\n113 114\\n63 68\\n147 148\\n171 174\\n177 178\\n-1 -1\\n92 95\\n65 70\\n43 46\\n27 30\\n118 122\\n23 26\\n156 159\\n21 24\\n99 98\\n53 57\\n51 52\\n129 134\\n56 36\\n144 146\\n189 190\\n106 109\\n120 124\\n102 -1\\n157 160\\n61 66\\n151 154\\n149 152\\n170 -1\\n\", \"88\\n-1 129\\n9 97\\n32 120\\n18 106\\n28 116\\n34 122\\n49 137\\n73 161\\n25 113\\n17 105\\n67 155\\n72 160\\n31 119\\n52 140\\n75 163\\n63 151\\n48 136\\n27 115\\n61 149\\n80 168\\n82 170\\n44 132\\n66 154\\n56 144\\n30 118\\n5 93\\n33 121\\n71 159\\n6 94\\n2 90\\n81 169\\n19 107\\n64 152\\n76 164\\n23 111\\n7 95\\n60 148\\n10 98\\n40 128\\n74 162\\n47 135\\n65 153\\n68 156\\n8 96\\n29 117\\n41 -1\\n50 138\\n79 167\\n57 145\\n11 99\\n36 124\\n85 173\\n77 165\\n26 114\\n55 143\\n16 104\\n54 142\\n84 172\\n35 123\\n53 141\\n88 176\\n15 103\\n78 166\\n21 109\\n22 110\\n39 127\\n58 146\\n43 131\\n24 112\\n3 91\\n45 133\\n70 158\\n86 174\\n20 108\\n59 147\\n12 100\\n87 175\\n42 130\\n62 150\\n1 89\\n13 101\\n46 134\\n51 139\\n4 92\\n14 102\\n38 126\\n83 171\\n37 125\\n\", \"82\\n19 101\\n33 115\\n68 150\\n3 85\\n45 127\\n46 128\\n25 107\\n49 131\\n37 119\\n13 95\\n2 84\\n65 147\\n70 152\\n11 93\\n32 114\\n35 117\\n48 130\\n82 164\\n20 102\\n53 135\\n41 123\\n22 104\\n47 129\\n15 97\\n64 146\\n40 122\\n78 160\\n12 94\\n43 125\\n56 138\\n58 140\\n-1 110\\n28 -1\\n24 106\\n77 159\\n6 88\\n14 96\\n54 136\\n10 -1\\n9 91\\n52 134\\n42 124\\n17 99\\n27 109\\n75 157\\n60 142\\n34 116\\n16 98\\n1 83\\n51 133\\n80 162\\n-1 92\\n66 148\\n72 154\\n57 139\\n55 137\\n61 143\\n59 141\\n44 126\\n29 111\\n62 144\\n74 156\\n26 108\\n73 155\\n39 121\\n23 105\\n4 86\\n30 112\\n69 151\\n63 145\\n81 163\\n79 161\\n76 158\\n18 100\\n67 149\\n50 132\\n38 120\\n71 153\\n7 89\\n21 103\\n36 118\\n31 113\\n\", \"68\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 81\\n-1 -1\\n1 69\\n-1 111\\n60 128\\n2 -1\\n49 -1\\n-1 -1\\n14 -1\\n55 -1\\n-1 -1\\n31 99\\n63 -1\\n-1 117\\n-1 -1\\n-1 -1\\n13 -1\\n-1 -1\\n-1 -1\\n67 -1\\n-1 -1\\n64 -1\\n-1 -1\\n-1 -1\\n47 115\\n4 -1\\n-1 97\\n-1 -1\\n-1 -1\\n52 120\\n40 -1\\n-1 74\\n57 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n-1 -1\\n23 91\\n-1 -1\\n-1 -1\\n27 -1\\n-1 80\\n-1 126\\n-1 102\\n28 96\\n-1 133\\n-1 -1\\n-1 -1\\n-1 76\\n-1 -1\\n-1 131\\n-1 -1\\n68 136\\n3 -1\\n-1 124\\n-1 123\\n-1 -1\\n-1 82\\n-1 72\\n-1 -1\\n-1 -1\\n-1 113\\n-1 -1\\n\", \"3\\n3 6\\n1 -1\\n1 -1\\n\", \"3\\n1 4\\n-1 6\\n-1 6\\n\", \"4\\n3 6\\n2 -1\\n4 -1\\n1 8\\n\"], \"outputs\": [\"Yes\\n\", \"No\\n\", \"No\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"Yes\\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"Yes\\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"Yes\\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"No\\n\"]}",
  "difficulty": "interview",
  "url": "https://atcoder.jp/contests/arc104/tasks/arc104_c",
  "starter_code": ""
}