{
  "task_id": "APPS/574",
  "problem_id": 574,
  "prompt": "Developing tools for creation of locations maps for turn-based fights in a new game, Petya faced the following problem.\n\nA field map consists of hexagonal cells. Since locations sizes are going to be big, a game designer wants to have a tool for quick filling of a field part with identical enemy units. This action will look like following: a game designer will select a rectangular area on the map, and each cell whose center belongs to the selected rectangle will be filled with the enemy unit.\n\nMore formally, if a game designer selected cells having coordinates (x_1, y_1) and (x_2, y_2), where x_1 \u2264 x_2 and y_1 \u2264 y_2, then all cells having center coordinates (x, y) such that x_1 \u2264 x \u2264 x_2 and y_1 \u2264 y \u2264 y_2 will be filled. Orthogonal coordinates system is set up so that one of cell sides is parallel to OX axis, all hexagon centers have integer coordinates and for each integer x there are cells having center with such x coordinate and for each integer y there are cells having center with such y coordinate. It is guaranteed that difference x_2 - x_1 is divisible by 2.\n\nWorking on the problem Petya decided that before painting selected units he wants to output number of units that will be painted on the map.\n\nHelp him implement counting of these units before painting.\n\n [Image] \n\n\n-----Input-----\n\nThe only line of input contains four integers x_1, y_1, x_2, y_2 ( - 10^9 \u2264 x_1 \u2264 x_2 \u2264 10^9,  - 10^9 \u2264 y_1 \u2264 y_2 \u2264 10^9) \u2014 the coordinates of the centers of two cells.\n\n\n-----Output-----\n\nOutput one integer \u2014 the number of cells to be filled.\n\n\n-----Examples-----\nInput\n1 1 5 5\n\nOutput\n13",
  "solutions": "[\"x1, y1, x2, y2 = map(int, input().split())\\n\\ndx, dy = (x2 - x1) // 2, (y2 - y1) // 2\\nprint(dx + 1 + (2 * dx + 1) * dy)\", \"x1,y1,x2,y2 = list(map(int,input().split(' ')))\\nb = int((y2 - y1 + 1)/2) + 1\\ns = b - 1\\nl = x2 - x1 + 1\\nans = b * int((l+1)/2) + s * int(l/2)\\nprint(ans)\\n\", \"x1,y1,x2,y2 = map(int, input().split())\\nx = x2 - x1\\ny = y2 - y1\\nprint((y//2+(y//2+1))*x//2+y//2+1)\", \"(x, y, x1, y1) = list(map(int, input().split()))\\nres1 = (y1 - y + 1) // 2\\nres2 = (y1 - y + 1) - res1\\nresx1 = (x1 - x + 1) // 2\\nresx2 = (x1 - x + 1) - resx1\\nprint(res1 * resx1 + res2 * resx2)\\n\", \"x1, y1, x2, y2 = map(int, input().split())\\nans1 = ((x2 - x1) // 2 + 1) * ((y2 - y1) // 2 + 1)\\nx1 += 1\\ny1 += 1\\nx2 -= 1\\ny2 -= 1\\nans2 = 0\\nif x1 <= x2 and y1 <= y2:\\n  ans2 = ((x2 - x1) // 2 + 1) * ((y2 - y1) // 2 + 1)\\nprint(ans1 + ans2)\", \"x1, y1, x2, y2 = list(map(int, input().split()))\\nprint(((y2 - y1) // 2 + 1) * ((x2 - x1 + 2) // 2) + ((y2 - y1) // 2 + (y2 - y1) % 2) * ((x2 - x1 + 1) // 2))\\n\\n#if y0 % 2 == 0\\\\\\n#(x2 // 2 * 2) - ((x1 + 1) // 2 * 2)\\n#if y0 % 2 == 1\\\\\\n#()\\n\", \"3\\n\\nx1, y1, x2, y2 = [int(i) for i in input().split()]\\n\\ndx = x2 - x1 + 1\\ndy = (y2 - y1) // 2 + 1\\n\\nif dx%2 == 1:\\n\\tans = dy * (dx//2 + 1) + (dy-1) * (dx//2)\\nelse:\\n\\tans = dx*dy\\n\\nprint(ans)\\n\", \"x1,y1,x2,y2 = map(int,input().split())\\ns = (x2-x1+1)*((y2-y1+1)//2) + ((x2-x1+2)//2)*((y2-y1+1)%2)\\nprint(s)\", \"import re\\nst = input()\\ns = re.split(r'[\\\\s]', st)\\nx1 = int(s[0])\\ny1 = int(s[1])\\nx2 = int(s[2])\\ny2 = int(s[3])\\ns = ((y2 - y1) // 2 + 1) * ((x2 - x1) // 2 + 1) + ((y2 - y1) // 2 * (x2 - x1) // 2)\\nprint (s)\", \"x,y,a,b = map(int,input().split(\\\" \\\"))\\n\\n\\nresult = ( a-x+1 ) * ( (b-y)//2 + 1 ) - ( (a-x)//2 )\\n\\nprint(result)\", \"x1, y1, x2, y2 = [int(i) for i in input().split()]\\n\\nt = y2 - y1 + 1\\nh = (x2 - x1 + 2) // 2\\n\\nprint(t // 2 * (h - 1) + (t // 2 + t % 2) * h)\\n\", \"x, u, y, v = list(map(int, input().split()))\\nN, M = y - x + 1, v - u + 1\\nn, m = (N >> 1) * (N&1), (M >> 1) * (M&1)\\nprint((N - n)*(M - m) + n*m)\\n\", \"ch=input()\\nd=ch.split(\\\" \\\")\\nx1=int(d[0])\\ny1=int(d[1])\\nx2=int(d[2])\\ny2=int(d[3])\\n\\nnby=(y2-y1)//2+1\\nnbx=(x2-x1)//2+1\\nprint(nby*nbx+(nby-1)*(nbx-1))\\n\", \"x1, y1, x2, y2 = map(int, input().split())\\n\\nd = (x2 - x1) // 2 + 1\\ne = (y2 - y1) // 2 + 1\\nif (y2 - y1) % 2 == 0:\\n\\tans = d * e + (d - 1) * (e - 1)\\nelse:\\n\\tans = (2 * d - 1) * (e - 1)\\nprint(ans)\", \"x1, y1, x2, y2 = [int(x) for x in input().split()]\\nprint((x2-x1+1)*(y2-y1+1)//2 + ((y2-y1)%2 == 0))\\n\", \"\\nx1, y1, x2, y2 = map(int, input().split())\\n\\ndx = x2 - x1\\ndy = y2 - y1\\n\\n#ux = False\\n#uy = False\\n\\n#if dx % 2 == 1:\\n#  ux = True\\n#  dx += 1\\n\\n#if dy % 2 == 1:\\n#  uy = True\\n#  dy += 1\\n\\nresx = int(dx/2+1)\\nresy = int(dy/2+1)\\n\\ntotal = resx*resy + (resx-1)*(resy-1)\\n\\nprint (total)\\nreturn\\n\\nif ux or uy:\\n    total -= 1\\n    if ux:\\n        total -= dy/2\\n    if uy:\\n        total -= dx/2\\n\\nprint (int(total))\", \"x1, y1, x2, y2 = map(int, input().split())\\na, b = (x2 - x1) // 2, (y2 - y1) // 2\\nprint(a * b + (a + 1) * (b + 1))\", \"x1, y1, x2, y2 = map(int, input().split())\\n\\nx = (x2 - x1) // 2\\ny = (y2 - y1) // 2\\n\\nprint(2 * x * y + x + y + 1)\", \"x1, y1, x2, y2 = input().split()\\ndx, dy = int(x2)-int(x1), int(y2)-int(y1)\\nif(dy%2!=0):\\n    print(dy+1)//2*(dx+1)\\nelse:\\n    print((dy//2+1)*(dx//2+1)+dy//2*dx//2)\", \"a, b, c, d = map(int, input().split(' '))\\ndy = (d-b)//2+1\\ndx = c - a + 1\\nprint(dy*dx - (dx//2))\"]",
  "input_output": "{\n  \"inputs\": [\n    \"1 1 5 5\\n\",\n    \"-1 -3 1 3\\n\",\n    \"-2 -2 2 2\\n\",\n    \"0 0 2 2\\n\",\n    \"0 0 2 0\\n\",\n    \"0 0 0 0\\n\",\n    \"0 -2 0 2\\n\",\n    \"-2 -2 -2 0\\n\",\n    \"-1000000000 -1000000000 1000000000 1000000000\\n\",\n    \"-999999999 -999999999 999999999 999999999\\n\",\n    \"-999999999 -999999999 -1 -1\\n\",\n    \"-411495869 33834653 -234317741 925065545\\n\",\n    \"-946749893 -687257665 -539044455 -443568671\\n\",\n    \"-471257905 -685885153 782342299 909511043\\n\",\n    \"-26644507 -867720841 975594569 264730225\\n\",\n    \"-537640548 -254017710 62355638 588691834\\n\",\n    \"309857887 -687373065 663986893 403321751\\n\",\n    \"-482406510 -512306894 412844236 -168036050\\n\",\n    \"-330513944 -970064382 500608496 369852884\\n\",\n    \"-157778763 218978791 976692563 591093087\\n\",\n    \"1000000000 1000000000 1000000000 1000000000\\n\",\n    \"1 0 5 6\\n\",\n    \"-1 -4 1 4\\n\",\n    \"-2 -3 2 3\\n\",\n    \"0 -1 2 3\\n\",\n    \"0 -1 2 1\\n\",\n    \"0 -1 0 1\\n\",\n    \"0 -3 0 3\\n\",\n    \"-2 -3 -2 1\\n\",\n    \"-1000000000 -999999999 1000000000 999999999\\n\",\n    \"-999999999 -1000000000 999999999 1000000000\\n\",\n    \"-999999999 -1000000000 -1 0\\n\",\n    \"-411495869 33834652 -234317741 925065546\\n\",\n    \"-946749893 -687257666 -539044455 -443568670\\n\",\n    \"-471257905 -685885154 782342299 909511044\\n\",\n    \"-26644507 -867720842 975594569 264730226\\n\",\n    \"-537640548 -254017711 62355638 588691835\\n\",\n    \"309857887 -687373066 663986893 403321752\\n\",\n    \"-482406510 -512306895 412844236 -168036049\\n\",\n    \"-330513944 -970064383 500608496 369852885\\n\",\n    \"-157778763 218978790 976692563 591093088\\n\",\n    \"1000000000 999999999 1000000000 999999999\\n\"\n  ],\n  \"outputs\": [\n    \"13\",\n    \"11\",\n    \"13\",\n    \"5\",\n    \"2\",\n    \"1\",\n    \"3\",\n    \"2\",\n    \"2000000002000000001\",\n    \"1999999998000000001\",\n    \"499999999000000001\",\n    \"78953311064369599\",\n    \"49676664342971903\",\n    \"999994499807710193\",\n    \"567493356068872580\",\n    \"252811256874252458\",\n    \"193123336242128360\",\n    \"154104365578285608\",\n    \"556817654843544374\",\n    \"211076500156631060\",\n    \"1\",\n    \"18\",\n    \"14\",\n    \"18\",\n    \"8\",\n    \"5\",\n    \"2\",\n    \"4\",\n    \"3\",\n    \"2000000000000000000\",\n    \"2000000000000000000\",\n    \"500000000000000000\",\n    \"78953311241547728\",\n    \"49676664750677342\",\n    \"999994501061310398\",\n    \"567493357071111657\",\n    \"252811257474248645\",\n    \"193123336596257367\",\n    \"154104366473536355\",\n    \"556817655674666815\",\n    \"211076501291102387\",\n    \"1\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/630/E",
  "starter_code": ""
}