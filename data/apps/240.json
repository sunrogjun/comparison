{
  "task_id": "APPS/240",
  "problem_id": 240,
  "prompt": "Vasya decided to pass a very large integer n to Kate. First, he wrote that number as a string, then he appended to the right integer k\u00a0\u2014 the number of digits in n. \n\nMagically, all the numbers were shuffled in arbitrary order while this note was passed to Kate. The only thing that Vasya remembers, is a non-empty substring of n (a substring of n is a sequence of consecutive digits of the number n).\n\nVasya knows that there may be more than one way to restore the number n. Your task is to find the smallest possible initial integer n. Note that decimal representation of number n contained no leading zeroes, except the case the integer n was equal to zero itself (in this case a single digit 0 was used).\n\n\n-----Input-----\n\nThe first line of the input contains the string received by Kate. The number of digits in this string does not exceed 1 000 000.\n\nThe second line contains the substring of n which Vasya remembers. This string can contain leading zeroes. \n\nIt is guaranteed that the input data is correct, and the answer always exists.\n\n\n-----Output-----\n\nPrint the smalles integer n which Vasya could pass to Kate.\n\n\n-----Examples-----\nInput\n003512\n021\n\nOutput\n30021\n\nInput\n199966633300\n63\n\nOutput\n3036366999",
  "solutions": "[\"import math\\nfrom collections import Counter\\n\\ns = list(map(int, input()))\\nsubstr = input().rstrip()\\nt = list(map(int, substr))\\n\\nm = len(s)\\nx, y = 0, m\\nz = (x + y) // 2\\nwhile z != x:\\n    if z + math.floor(math.log10(z)) + 1 <= m:\\n        x = z\\n    else:\\n        y = z\\n    z = (x + y)//2\\nm1 = z\\nk = math.floor(math.log10(m1)) + 1\\n\\nD = Counter(s)\\nD.subtract(list(map(int, str(m1))))\\nD.subtract(t)\\ntry:\\n    c1 = min(i for i in range(1, 10) if D[i] > 0)\\n    c2 = t[0]\\n\\n    D[c1] -= 1\\n    _prefix = [c1]\\n    \\n    for c in range(c2):\\n        _prefix += [c] * D[c]\\n    _suffix = []\\n    for c in range(c2 + 1, 10):\\n        _suffix += [c] * D[c]\\n    num = ''.join([str(c2)] * D[c2])\\n    prefix = ''.join(map(str, _prefix))\\n    suffix = ''.join(map(str, _suffix))\\n\\n    if c2 == 0:\\n        print((min(prefix + substr + num + suffix,\\n                  prefix + num + substr + suffix)))\\n    else:\\n        D[c1] += 1\\n        st = []\\n        for c in range(10):\\n            st += [c] * D[c]\\n        print((min(prefix + substr + num + suffix,\\n                  prefix + num + substr + suffix,\\n                  substr + ''.join(map(str, st)))))\\nexcept ValueError:\\n    print(substr + '0'*D[0])\\n\", \"def main():\\n    s = input()\\n    if s in (\\\"01\\\", \\\"10\\\"):\\n        print(0)\\n        return\\n    cnt = [0] * 58\\n    for j in map(ord, s):\\n        cnt[j] += 1\\n    n, s1 = sum(cnt), input()\\n    for le in range(n - 1, 0, -1):\\n        if len(str(le)) + le == n:\\n            break\\n    for s in s1, str(le):\\n        for j in map(ord, s):\\n            cnt[j] -= 1\\n    res = [''.join([s1] + [chr(i) * a for i, a in enumerate(cnt) if a])] if s1[0] > '0' else []\\n    for i in range(49, 58):\\n        if cnt[i]:\\n            cnt[i] -= 1\\n            l = [chr(i) * a for i, a in enumerate(cnt) if a]\\n            l.append(s1)\\n            res.append(''.join([chr(i)] + sorted(l)))\\n            break\\n    print(min(res))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"import sys\\n\\ndef main():\\n    a = sys.stdin.readline().strip()\\n    b = sys.stdin.readline().strip()\\n\\n    if a == \\\"01\\\" or a == \\\"10\\\":\\n        print(\\\"0\\\")\\n        return\\n\\n    cnt = [0] * 256\\n    for i in map(ord, a):\\n        cnt[i] += 1\\n    n = sum(cnt)\\n\\n    l = 0\\n    for i in range(1, 8):\\n        if i == len(str(n - i)):\\n            l = n - i\\n            break;\\n\\n    for s in b, str(l):\\n        for i in map(ord, s):\\n            cnt[i] -= 1\\n\\n    res = [\\\"\\\".join([b] + [chr(k) * v for k, v in enumerate(cnt) if v > 0 ])] if b[0] > \\\"0\\\" else []\\n\\n    for i in range(ord(\\\"1\\\"), ord(\\\"9\\\") + 1):\\n        if cnt[i] > 0:\\n            cnt[i] -= 1\\n            others = [chr(k) * v for k, v in enumerate(cnt) if v > 0]\\n            others.append(b)\\n            res.append(\\\"\\\".join([chr(i)] + sorted(others)))\\n            break\\n\\n    print(min(res))\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"import sys\\n\\ndef main():\\n    a = sys.stdin.readline().strip()\\n    b = sys.stdin.readline().strip()\\n\\n    if a == \\\"01\\\" or a == \\\"10\\\":\\n        print(\\\"0\\\")\\n        return\\n\\n    cnt = [0] * 256\\n    for i in map(ord, a):\\n        cnt[i] += 1\\n    n = sum(cnt)\\n\\n    l = 0\\n    for i in range(1, 8):\\n        if i == len(str(n - i)):\\n            l = n - i\\n            break;\\n\\n    for s in b, str(l):\\n        for i in map(ord, s):\\n            cnt[i] -= 1\\n\\n    res = [\\\"\\\".join([b] + [chr(k) * v for k, v in enumerate(cnt) if v > 0 ])] if b[0] > \\\"0\\\" else []\\n\\n    for i in range(ord(\\\"1\\\"), ord(\\\"9\\\") + 1):\\n        if cnt[i] > 0:\\n            cnt[i] -= 1\\n            others = [chr(k) * v for k, v in enumerate(cnt) if v > 0]\\n            others.append(b)\\n            res.append(\\\"\\\".join([chr(i)] + sorted(others)))\\n            break\\n\\n    print(min(res))\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"a = input()\\nb = input()\\nd = [0] * 10\\nn = 0\\nfor j in range(1000100):\\n    t = str(j)\\n    if len(t) + j == len(a):\\n        n = j\\nfor x in str(n):\\n    d[ord(x) - ord('0')] -= 1\\nfor x in a:\\n    d[ord(x) - ord('0')] += 1\\nfor x in b:\\n    d[ord(x) - ord('0')] -= 1\\nif sum(d)==0:\\n    print(b)\\nelse:\\n    A = []\\n    B = []\\n    C = []\\n    D = []\\n    if b[0] != '0':\\n        A = list(b)\\n        for j in range(10):\\n            for k in range(d[j]):\\n                A.append(chr(ord('0') + j))\\n    t = 1\\n    while t < len(d) and d[t] == 0:\\n        t += 1\\n    oo = ord('0')\\n    if t < len(d):\\n        B.append(chr(oo+t))\\n        d[t] -= 1\\n        for j in range(ord(b[0]) - oo):\\n            for k in range(d[j]):\\n                B.append(chr(ord('0') + j))\\n        B.extend(list(b))\\n        for j in range(ord(b[0]) - oo, 10):\\n            for k in range(d[j]):\\n                B.append(chr(ord('0') + j))\\n        \\n        \\n        C.append(chr(oo+t))\\n        for j in range(min(ord(b[0]) - oo+1, 10)):\\n            for k in range(d[j]):\\n                C.append(chr(ord('0') + j))\\n        C.extend(list(b))\\n        for j in range(ord(b[0]) - oo+1, 10):\\n            for k in range(d[j]):\\n                C.append(chr(ord('0') + j))\\n        \\n    ans = []\\n    if len(A) > 0:\\n        ans.append(''.join(A))\\n    \\n    if len(B) > 0:\\n        ans.append(''.join(B))\\n    \\n    if len(C) > 0:\\n        ans.append(''.join(C))\\n    \\n    print(min(ans))\"]",
  "input_output": "{\n  \"inputs\": [\n    \"003512\\n021\\n\",\n    \"199966633300\\n63\\n\",\n    \"01\\n0\\n\",\n    \"0000454312911\\n9213544\\n\",\n    \"13\\n3\\n\",\n    \"00010454312921\\n9213544\\n\",\n    \"11317110\\n01\\n\",\n    \"1516532320120301262110112013012410838210025280432402042406224604110031740090203024020012\\n0126064\\n\",\n    \"233121122272652143504001162131110307236110231414093112213120271312010423132181004\\n0344011\\n\",\n    \"1626112553124100114021300410533124010061200562040601301\\n00612141\\n\",\n    \"040005088\\n0\\n\",\n    \"420002200110100211206222101201021321440210\\n00\\n\",\n    \"801095116\\n0\\n\",\n    \"070421120216020020\\n000024\\n\",\n    \"825083\\n0\\n\",\n    \"6201067\\n0\\n\",\n    \"34404430311310306128103301112523111011050561125004200941114005444000000040133002103062151514033103\\n010215110013511400400140133404\\n\",\n    \"14\\n4\\n\",\n    \"21\\n2\\n\",\n    \"204\\n4\\n\",\n    \"12\\n2\\n\",\n    \"05740110115001520111222011422101032503200010203300510014413\\n000151\\n\",\n    \"116051111111001510011110101111111101001111111101111101101\\n00111111111\\n\",\n    \"1161100\\n01110\\n\",\n    \"101313020013110703821620035452130200177115540090000\\n002001320\\n\",\n    \"03111100110111111118\\n01001111111101111\\n\",\n    \"01170141\\n01114\\n\",\n    \"0500014440100110264222000342611000102247070652310723\\n0003217\\n\",\n    \"111011111101111131113111111111011\\n0111111111111111010111111111\\n\",\n    \"11003040044200003323519101102070252000010622902208104150200400140042011224011154237302003323632011235\\n0\\n\",\n    \"111111011110101141110110011010011114110111\\n01010111111011111\\n\",\n    \"011010171110\\n010110117\\n\",\n    \"510017\\n0\\n\",\n    \"00111111110114112110011105\\n0\\n\",\n    \"320403902031031110003113410860101243100423120201101124080311242010930103200001451200132304400000\\n01\\n\",\n    \"125\\n15\\n\",\n    \"1160190\\n110019\\n\",\n    \"11111111111101101111110101011111010101001111001110010011810010110111101101112140110110\\n110101100101111101011111111101111111111110111110011111011000111010100111011111000002\\n\",\n    \"2206026141112316065224201412118064151200614042100160093001020024005013121010030020083221011\\n280060226\\n\",\n    \"63007511113226210230771304213600010311075400082011350143450007091200\\n25\\n\",\n    \"142245201505011321217122212\\n12521721230\\n\",\n    \"712\\n17\\n\",\n    \"11011111111003010101111111111103111\\n101111111110110111111011001011111\\n\",\n    \"143213104201201003340424615500135122127119000020020017400111102423312241032010400\\n235321200411204201121201304100003\\n\",\n    \"080001181\\n18\\n\",\n    \"4141403055010511470013300502174230460332129228041229160601006121052601201100001153120100000\\n49\\n\",\n    \"2131\\n112\\n\",\n    \"0111110011011110111012109101101111101111150011110111110111001\\n10110010111111011111111011001101001111111111111110001011012\\n\",\n    \"251137317010111402300506643001203241303324162124225270011006213015100\\n3512\\n\",\n    \"12140051050330004342310455231200020252193200\\n23012\\n\",\n    \"291\\n19\\n\",\n    \"11011011000111101111111111081101110001011111101111110111111111011111011011111100111\\n1110111111111\\n\",\n    \"170422032160671323013220212523333410720410110020005012206133500200001015971250190240204004002041\\n10010405153200037262043200214001340010615320\\n\",\n    \"210042022032002310001424611003103312001401111120015141083050404330261401411234412400319100212120\\n10014121114054\\n\",\n    \"222122228\\n2221\\n\",\n    \"10\\n0\\n\",\n    \"11007000\\n1000\\n\",\n    \"3323\\n32\\n\",\n    \"1001016\\n1001\\n\",\n    \"50104\\n10\\n\",\n    \"2023\\n20\\n\",\n    \"0001116\\n1001\\n\",\n    \"32334\\n32\\n\",\n    \"1103\\n10\\n\",\n    \"023335\\n23\\n\",\n    \"111111111110\\n1\\n\",\n    \"501105\\n110\\n\",\n    \"1110006\\n1001\\n\"\n  ],\n  \"outputs\": [\n    \"30021\\n\",\n    \"3036366999\\n\",\n    \"0\\n\",\n    \"92135440000\\n\",\n    \"3\\n\",\n    \"100009213544\\n\",\n    \"1011113\\n\",\n    \"10000000000000000000000012606411111111111111222222222222222222333333334444444455567889\\n\",\n    \"1000000000003440111111111111111111111112222222222222222233333333333444455666778\\n\",\n    \"10000000000000006121411111111111222222333344445556666\\n\",\n    \"40000058\\n\",\n    \"1000000000000011111111112222222222223446\\n\",\n    \"10011569\\n\",\n    \"1000000024122227\\n\",\n    \"20388\\n\",\n    \"100267\\n\",\n    \"100000000000000000000102151100135114004001401334041111111111111122222233333333333444444455555668\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"40\\n\",\n    \"2\\n\",\n    \"100000000000000000001511111111111111222222222333334444555\\n\",\n    \"1000000000000011111111111111111111111111111111111111116\\n\",\n    \"101110\\n\",\n    \"1000000000000002001320111111111222333334555567778\\n\",\n    \"301001111111101111\\n\",\n    \"1001114\\n\",\n    \"10000000000000000032171111112222222233444444566677\\n\",\n    \"1011111111111111101011111111113\\n\",\n    \"100000000000000000000000000000000001111111111111111222222222222222222333333333334444444445555566778\\n\",\n    \"1000000101011111101111111111111111111114\\n\",\n    \"1010110117\\n\",\n    \"10017\\n\",\n    \"100000011111111111111115\\n\",\n    \"1000000000000000000000000000000000011111111111111111111122222222222233333333333334444444456889\\n\",\n    \"15\\n\",\n    \"110019\\n\",\n    \"110101100101111101011111111101111111111110111110011111011000111010100111011111000002\\n\",\n    \"10000000000000000000000000111111111111111111111222222222222228006022633333444444455566666\\n\",\n    \"100000000000000000000011111111111112222222533333333444455567777789\\n\",\n    \"1001111125217212302222445\\n\",\n    \"17\\n\",\n    \"101111111110110111111011001011111\\n\",\n    \"1000000000000001111111111222222223532120041120420112120130410000333334444445567\\n\",\n    \"10000118\\n\",\n    \"10000000000000000000000000000011111111111111111112222222222223333333444444495555556666677\\n\",\n    \"112\\n\",\n    \"10110010111111011111111011001101001111111111111110001011012\\n\",\n    \"1000000000000000001111111111111122222222223333333335124444455566677\\n\",\n    \"100000000000001111222222301233333444555559\\n\",\n    \"19\\n\",\n    \"100000000000000000011101111111111111111111111111111111111111111111111111111111111\\n\",\n    \"1000000000000000100104051532000372620432002140013400106153201111111122222222222233333445567779\\n\",\n    \"1000000000000000000000000010014121114054111111111111111111222222222222223333333333444444445668\\n\",\n    \"22212222\\n\",\n    \"0\\n\",\n    \"1000001\\n\",\n    \"323\\n\",\n    \"100101\\n\",\n    \"1005\\n\",\n    \"202\\n\",\n    \"100101\\n\",\n    \"3233\\n\",\n    \"101\\n\",\n    \"23033\\n\",\n    \"1111111111\\n\",\n    \"11005\\n\",\n    \"100101\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/670/F",
  "starter_code": ""
}