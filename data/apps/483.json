{
  "task_id": "APPS/483",
  "problem_id": 483,
  "prompt": "There will be a launch of a new, powerful and unusual collider very soon, which located along a straight line. n particles will be launched inside it. All of them are located in a straight line and there can not be two or more particles located in the same point. The coordinates of the particles coincide with the distance in meters from the center of the collider, x_{i} is the coordinate of the i-th particle and its position in the collider at the same time. All coordinates of particle positions are even integers.\n\nYou know the direction of each particle movement\u00a0\u2014 it will move to the right or to the left after the collider's launch start. All particles begin to move simultaneously at the time of the collider's launch start. Each particle will move straight to the left or straight to the right with the constant speed of 1 meter per microsecond. The collider is big enough so particles can not leave it in the foreseeable time.\n\nWrite the program which finds the moment of the first collision of any two particles of the collider. In other words, find the number of microseconds before the first moment when any two particles are at the same point.\n\n\n-----Input-----\n\nThe first line contains the positive integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of particles. \n\nThe second line contains n symbols \"L\" and \"R\". If the i-th symbol equals \"L\", then the i-th particle will move to the left, otherwise the i-th symbol equals \"R\" and the i-th particle will move to the right.\n\nThe third line contains the sequence of pairwise distinct even integers x_1, x_2, ..., x_{n} (0 \u2264 x_{i} \u2264 10^9)\u00a0\u2014 the coordinates of particles in the order from the left to the right. It is guaranteed that the coordinates of particles are given in the increasing order. \n\n\n-----Output-----\n\nIn the first line print the only integer\u00a0\u2014 the first moment (in microseconds) when two particles are at the same point and there will be an explosion. \n\nPrint the only integer -1, if the collision of particles doesn't happen. \n\n\n-----Examples-----\nInput\n4\nRLRL\n2 4 6 10\n\nOutput\n1\n\nInput\n3\nLLR\n40 50 60\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first sample case the first explosion will happen in 1 microsecond because the particles number 1 and 2 will simultaneously be at the same point with the coordinate 3. \n\nIn the second sample case there will be no explosion because there are no particles which will simultaneously be at the same point.",
  "solutions": "[\"import sys, math\\nn=int(input())\\ns=input()\\nz=list(map(int,input().split()))\\nbest = 10**9\\nfor i in range(len(s)-1):\\n    if s[i]=='R' and s[i+1]=='L':\\n        best=min(best, z[i+1]-(z[i]+z[i+1])//2)\\nif best != 10**9:\\n    print(best)\\nelse:\\n    print(-1)\\n\", \"n = int(input())\\ns = input()\\nx = list(map(int, input().split()))\\nans = float('inf')\\nlast = None\\nfor i in range(n):\\n    if s[i] == 'R':\\n        last = x[i]\\n    elif last != None:\\n        cur = (x[i] - last) // 2\\n        ans = min(ans, cur)\\nif ans == float('inf'):\\n    ans = -1\\nprint(ans)\\n\", \"n = int(input())\\ns = input()\\nl = list(map(int, input().split()))\\nans = 10 ** 18\\nlast_r = -1\\nfor i in range(len(l)):\\n    if s[i] == 'R':\\n        last_r = i\\n    else:\\n        if last_r != -1:\\n            ans = min(ans, (l[i] - l[last_r]) // 2)\\nif ans == 10 ** 18:\\n    print(-1)\\nelse:\\n    print(ans)\\n\", \"n = int(input())\\na = input()\\nanswer = float('infinity')\\nA = list(map(int, input().split()))\\nfor i in range(n-1):\\n    if a[i]=='R' and a[i+1] == 'L':\\n        answer = min(answer, (A[i+1] - A[i])//2)\\nif answer != float('infinity'):\\n    print(answer)\\nelse:\\n    print(-1)\", \"n = int(input())\\ns = input()\\na = list(map(int, input().split()))\\nmaxl = -1\\nmini = 100000000000000000000000\\nfor i in range(n):\\n    if s[i] == 'R':\\n        maxl = a[i]\\n    if s[i] == 'L' and maxl != -1:\\n        mini = min(mini, a[i] - maxl)\\nif mini == 100000000000000000000000:\\n    print(-1)\\nelse:\\n    print(mini // 2)\\n\", \"N = int(input())\\ndirections = input()\\npoints = [int(x) for x in input().split()]\\nanswer = -1\\nfor i in range(0, N-1):\\n\\tif directions[i]=='R' and directions[i+1]=='L':\\n\\t\\tif answer==-1 or answer>(points[i+1]-points[i])//2:\\n\\t\\t\\tanswer = (points[i+1]-points[i])//2\\nprint (answer)\", \"n = int(input())\\ns = input().rstrip()\\na = list(map(int, input().split()))\\nl, r = [], []\\nfor i in range(n):\\n    if s[i] == 'R':\\n        r.append(a[i])\\n    else:\\n        l.append(a[i])\\ni = j = 0\\nans = 10 ** 10\\nwhile i < len(r) and j < len(l):\\n    if r[i] < l[j]:\\n        ans = min(ans, l[j] - r[i])\\n        i += 1\\n    else:\\n        j += 1\\nif ans == 10 ** 10:\\n    print(-1)\\nelse:\\n    print(ans // 2)\", \"input()\\nl=list(input())\\nx=list(map(int,input().split(' ')))\\n\\np = [ i for i in range(len(l)-1) if l[i]=='R' and l[i+1]=='L']\\n\\nif not p :\\n    print(-1)\\nelse :\\n    t = [x[i+1]-x[i] for i in p]\\n    print(min(t)//2)\", \"n = int(input())\\ndirection = input()\\nxi = [int(x) for x in input().split(' ')]\\n\\nm = []\\n\\nfor i in range(n-1):\\n\\tif direction[i:i+2] != 'RL': continue\\n\\tm.append(xi[i+1] - xi[i])\\n\\nif not m: print(-1)\\nelse: print(int(min(m)/2))\", \"#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n\\nimport time\\n\\nn   = int(input())\\n\\nN   = [i for i in input()]\\nx   = [int(i) for i in input().split()]\\n\\nstart = time.time()\\n\\nflag = False\\nans  = float('Inf')\\n\\nfor i in range(n):\\n    if N[i] == 'R':\\n        left = i\\n        flag = True\\n    elif flag == True:\\n         buf = x[i] - x[left]\\n         if buf < ans:\\n             ans = buf\\n         flag = False\\n\\nif ans < float('Inf'):\\n    print(ans//2)\\nelse:\\n    print(-1)\\n\\nfinish = time.time()\\n#print(finish - start)\\n\", \"n = int(input())\\ns = input()\\nans = 1234567890\\ni = 0\\nlast_r = -1\\nfor x in input().split():\\n    now = int(x)\\n    if s[i] == 'R':\\n        \\n        last_r = now\\n    else:\\n        if last_r != -1:\\n            ans = min(ans,(now-last_r)//2)\\n            \\n    i+=1\\nif ans == 1234567890:\\n    print('-1')\\nelse:\\n    print(ans)\\n\", \"n = int(input())\\ns = list(input())\\nx = list(map(int,input().split()))\\n\\nans = 10**10\\n\\nfor i in range(n-1):\\n    if s[i] == \\\"R\\\" and s[i+1] == \\\"L\\\":\\n        ans = min(ans, (x[i+1] - x[i]) // 2)\\n\\nif ans > 10 ** 9:\\n    ans = -1\\n\\nprint(ans)\\n\", \"NONE = 10 ** 10\\n\\nn = int(input())\\ndirect = input()\\npos = [int(x) for x in input().split()]\\n\\nbest = NONE\\nfor i,x in enumerate(pos):\\n    if i+1 == n:\\n        break\\n    if direct[i:i+2] != 'RL':\\n        continue\\n\\n    best = min(best, pos[i+1] - x)\\n\\nif best == NONE:\\n    best = -1\\nelse:\\n    best = best // 2\\n\\nprint(best)\\n\", \"n=int(input())\\ns=input()\\nx=list(map(int,input().split()))\\np=sorted([(x[i],s[i]) for i in range(n)])\\nans=-1\\nmi=10**10\\nfor i in range(1,n):\\n    if p[i-1][1]=='R' and p[i][1]=='L' and p[i][0]-p[i-1][0]<mi:\\n        mi=p[i][0]-p[i-1][0]; ans=mi//2\\nprint(ans)\", \"n = int(input())\\nd = input()\\nx = list(map(int, input().split()))\\ninf = 10**10\\ndef solve():\\n    if n == 1:\\n        return -1\\n    ret = inf\\n    for i in range(1, n):\\n        if d[i - 1] == 'R' and d[i] == 'L':\\n            ret = min(ret, (x[i] - x[i - 1]) // 2)\\n    if ret == inf:\\n        return -1\\n    return ret\\nprint(solve())            \\n\", \"#!/usr/bin/env python3\\n\\ntry:\\n    while True:\\n        n = int(input())\\n        s = input()\\n        a = list(map(int, input().split()))\\n        result = -1\\n        for i in range(1, n):\\n            if s[i - 1] == 'R' != s[i]:\\n                t = (a[i] - a[i - 1]) >> 1\\n                if result == -1 or t < result:\\n                    result = t\\n        print(result)\\n\\nexcept EOFError:\\n    pass\\n\", \"input()\\nds = str.strip(input())\\nxs = list(map(int, str.split(input())))\\n\\n\\nbest = None\\nlast_right = None\\nfor d, x in zip(ds, xs):\\n\\n    if d == \\\"R\\\":\\n\\n        last_right = x\\n\\n    elif last_right is not None:\\n\\n        t = (x - last_right) // 2\\n        best = min(best or t, t)\\n\\nprint(best or -1)\\n\", \"n = int(input())\\nst = input()\\na = [int(i) for i in input().split()]\\n\\nfor i in range(n-1):\\n\\tif(a[i]==a[i+1]):\\n\\t\\tprint(0)\\n\\t\\treturn\\n\\nans = 10**9\\nfor i in range(n-1):\\n\\tif st[i]=='R' and st[i+1]=='L': ans = min(ans,(a[i+1]-a[i])//2)\\n\\nif ans!=10**9: print(ans)\\nelse: print(-1)\", \"n = int(input())\\nvelocities = input()\\ncoordinates = input()\\nspeed = [0] * n\\ntime = 10**9\\n\\ncoordinates = list(map(int, coordinates.split()))\\n\\nfor i in range(len(velocities) - 1):\\n    if velocities[i] == 'R' and velocities[i + 1] == 'L':\\n        time = min(time, (coordinates[i + 1] - coordinates[i]) // 2)\\n\\nif time == 10**9:\\n    time = -1\\nprint(time)\", \"n=int(input())\\ns=str(input())\\nip=list(map(int,input().split()))\\nq=[1 for i in range(n)]\\nop=[]\\nfor i in range(n):\\n    if s[i]=='L':\\n        q[i]=-q[i]\\nfor i in range(n-1):\\n    if q[i+1]-q[i]<0:\\n        op.append((ip[i+1]-ip[i])/abs(q[i+1]-q[i]))\\nif len(op)==0:\\n    print(-1)\\nelse:\\n    print(int(min(op)))\\n\", \"def main():\\n    input()\\n    l, r = [], []\\n    for c, x in zip(input(), list(map(int, input().split()))):\\n        if c == 'L':\\n            l.append(x)\\n        else:\\n            r.append(x)\\n    ilo, ihi = iter(r), iter(l)\\n    res = 10 ** 10\\n    try:\\n        lo, hi = next(ilo), next(ihi)\\n        while True:\\n            if lo < hi:\\n                if res > hi - lo:\\n                    res = hi - lo\\n                lo = next(ilo)\\n            else:\\n                hi = next(ihi)\\n    except StopIteration:\\n        print(res // 2 if res < 10 ** 10 else -1)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def main():\\n    n = input()\\n    s = input()\\n    d = input()\\n    number = []\\n    res = False\\n    maxi = float('inf')\\n    for i in d.split(\\\" \\\"):\\n        number.append(int(i))\\n    for i in range(len(s) - 1):\\n        if ( s[i] == \\\"R\\\" and s[i + 1] == \\\"L\\\" ):\\n            cal = number[i+1] - number[i]\\n            if (cal < maxi):\\n                maxi = cal\\n            res = True\\n    \\n    if (res == True):\\n        maxi = int(maxi/2)\\n        print(maxi)\\n    else:\\n        print(\\\"-1\\\")\\n\\nmain()\\n\", \"3\\n\\ninf = 1e9\\n\\ndef main():\\n    n = int(input())\\n    dir = input()\\n    coords = list(map(int, input().split()))\\n\\n    res = inf\\n    maxr = -1\\n    for i in range(n):\\n        if dir[i] == \\\"R\\\":\\n            maxr = coords[i]\\n        else:\\n            if maxr != -1:\\n                res = min((coords[i] - maxr) / 2, res)\\n\\n    if res == inf:\\n        print(-1)\\n    else:\\n        print(int(res))\\n\\nmain()\\n\", \"n = int(input())\\ns = input()\\npos = [int(i) for i in input().split()]\\nmin = 10**18\\nnosol = True\\nfor i in range(1,n):\\n\\tif s[i-1] == 'R' and s[i] == 'L':\\n\\t\\tdist = pos[i] - pos[i-1]\\n\\t\\tif dist < min:\\n\\t\\t\\tmin = dist\\n\\t\\t\\tnosol = False\\nif nosol:\\n\\tprint(-1)\\nelse:\\n\\tprint(min>>1)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4\\nRLRL\\n2 4 6 10\\n\",\n    \"3\\nLLR\\n40 50 60\\n\",\n    \"4\\nRLLR\\n46 230 264 470\\n\",\n    \"6\\nLLRLLL\\n446 492 650 844 930 970\\n\",\n    \"8\\nRRLLLLLL\\n338 478 512 574 594 622 834 922\\n\",\n    \"10\\nLRLRLLRRLR\\n82 268 430 598 604 658 670 788 838 1000\\n\",\n    \"2\\nRL\\n0 1000000000\\n\",\n    \"12\\nLRLLRRRRLRLL\\n254 1260 1476 1768 2924 4126 4150 4602 5578 7142 8134 9082\\n\",\n    \"14\\nRLLRRLRLLRLLLR\\n698 2900 3476 3724 3772 3948 4320 4798 5680 6578 7754 8034 8300 8418\\n\",\n    \"16\\nRRLLLRLRLLLLRLLR\\n222 306 968 1060 1636 1782 2314 2710 3728 4608 5088 6790 6910 7156 7418 7668\\n\",\n    \"18\\nRLRLLRRRLLLRLRRLRL\\n1692 2028 2966 3008 3632 4890 5124 5838 6596 6598 6890 8294 8314 8752 8868 9396 9616 9808\\n\",\n    \"20\\nRLLLLLLLRRRRLRRLRRLR\\n380 902 1400 1834 2180 2366 2562 2596 2702 2816 3222 3238 3742 5434 6480 7220 7410 8752 9708 9970\\n\",\n    \"22\\nLRRRRRRRRRRRLLRRRRRLRL\\n1790 2150 2178 2456 2736 3282 3622 4114 4490 4772 5204 5240 5720 5840 5910 5912 6586 7920 8584 9404 9734 9830\\n\",\n    \"24\\nLLRLRRLLRLRRRRLLRRLRLRRL\\n100 360 864 1078 1360 1384 1438 2320 2618 3074 3874 3916 3964 5178 5578 6278 6630 6992 8648 8738 8922 8930 9276 9720\\n\",\n    \"26\\nRLLLLLLLRLRRLRLRLRLRLLLRRR\\n908 1826 2472 2474 2728 3654 3716 3718 3810 3928 4058 4418 4700 5024 5768 6006 6128 6386 6968 7040 7452 7774 7822 8726 9338 9402\\n\",\n    \"28\\nRRLRLRRRRRRLLLRRLRRLLLRRLLLR\\n156 172 1120 1362 2512 3326 3718 4804 4990 5810 6242 6756 6812 6890 6974 7014 7088 7724 8136 8596 8770 8840 9244 9250 9270 9372 9400 9626\\n\",\n    \"30\\nRLLRLRLLRRRLRRRLLLLLLRRRLRRLRL\\n128 610 1680 2436 2896 2994 3008 3358 3392 4020 4298 4582 4712 4728 5136 5900 6088 6232 6282 6858 6934 7186 7224 7256 7614 8802 8872 9170 9384 9794\\n\",\n    \"10\\nLLLLRRRRRR\\n0 2 4 6 8 10 12 14 16 18\\n\",\n    \"5\\nLLLLL\\n0 10 20 30 40\\n\",\n    \"6\\nRRRRRR\\n40 50 60 70 80 100\\n\",\n    \"1\\nR\\n0\\n\",\n    \"2\\nRL\\n2 1000000000\\n\",\n    \"2\\nRL\\n0 400000\\n\",\n    \"2\\nRL\\n0 200002\\n\",\n    \"2\\nRL\\n2 20000000\\n\",\n    \"4\\nLLRL\\n2 4 10 100\\n\",\n    \"4\\nRLRL\\n2 10 12 14\\n\",\n    \"2\\nRL\\n0 100000000\\n\",\n    \"2\\nRL\\n2 600002\\n\",\n    \"1\\nL\\n0\\n\",\n    \"2\\nRL\\n0 600000\\n\",\n    \"5\\nRRRRR\\n0 2 4 6 8\\n\",\n    \"2\\nRL\\n2 200000000\\n\",\n    \"2\\nRL\\n0 267382766\\n\",\n    \"3\\nRRL\\n4 8 999999998\\n\",\n    \"2\\nRL\\n0 2\\n\",\n    \"2\\nRL\\n2 400002\\n\",\n    \"2\\nLL\\n2 4\\n\",\n    \"2\\nLL\\n0 2\\n\",\n    \"2\\nRL\\n0 100000\\n\",\n    \"2\\nRL\\n2 200000020\\n\",\n    \"2\\nRL\\n2000000 4000000\\n\",\n    \"2\\nRL\\n0 199998\\n\",\n    \"3\\nLRR\\n40 50 60\\n\",\n    \"2\\nRL\\n200 400400\\n\",\n    \"2\\nRL\\n2 400004\\n\",\n    \"2\\nRL\\n0 200000000\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"-1\\n\",\n    \"92\\n\",\n    \"97\\n\",\n    \"17\\n\",\n    \"3\\n\",\n    \"500000000\\n\",\n    \"108\\n\",\n    \"88\\n\",\n    \"123\\n\",\n    \"10\\n\",\n    \"252\\n\",\n    \"48\\n\",\n    \"27\\n\",\n    \"59\\n\",\n    \"10\\n\",\n    \"7\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"499999999\\n\",\n    \"200000\\n\",\n    \"100001\\n\",\n    \"9999999\\n\",\n    \"45\\n\",\n    \"1\\n\",\n    \"50000000\\n\",\n    \"300000\\n\",\n    \"-1\\n\",\n    \"300000\\n\",\n    \"-1\\n\",\n    \"99999999\\n\",\n    \"133691383\\n\",\n    \"499999995\\n\",\n    \"1\\n\",\n    \"200000\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"50000\\n\",\n    \"100000009\\n\",\n    \"1000000\\n\",\n    \"99999\\n\",\n    \"-1\\n\",\n    \"200100\\n\",\n    \"200001\\n\",\n    \"100000000\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/699/A",
  "starter_code": ""
}