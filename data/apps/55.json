{
  "task_id": "APPS/55",
  "problem_id": 55,
  "prompt": "Jamie is preparing a Codeforces round. He has got an idea for a problem, but does not know how to solve it. Help him write a solution to the following problem:\n\nFind k integers such that the sum of two to the power of each number equals to the number n and the largest integer in the answer is as small as possible. As there may be multiple answers, you are asked to output the lexicographically largest one. \n\nTo be more clear, consider all integer sequence with length k (a_1, a_2, ..., a_{k}) with $\\sum_{i = 1}^{k} 2^{a_{i}} = n$. Give a value $y = \\operatorname{max}_{1 \\leq i \\leq k} a_{i}$ to each sequence. Among all sequence(s) that have the minimum y value, output the one that is the lexicographically largest.\n\nFor definitions of powers and lexicographical order see notes.\n\n\n-----Input-----\n\nThe first line consists of two integers n and k (1 \u2264 n \u2264 10^18, 1 \u2264 k \u2264 10^5)\u00a0\u2014 the required sum and the length of the sequence.\n\n\n-----Output-----\n\nOutput \"No\" (without quotes) in a single line if there does not exist such sequence. Otherwise, output \"Yes\" (without quotes) in the first line, and k numbers separated by space in the second line\u00a0\u2014 the required sequence.\n\nIt is guaranteed that the integers in the answer sequence fit the range [ - 10^18, 10^18].\n\n\n-----Examples-----\nInput\n23 5\n\nOutput\nYes\n3 3 2 1 0 \n\nInput\n13 2\n\nOutput\nNo\n\nInput\n1 2\n\nOutput\nYes\n-1 -1 \n\n\n\n-----Note-----\n\nSample 1:\n\n2^3 + 2^3 + 2^2 + 2^1 + 2^0 = 8 + 8 + 4 + 2 + 1 = 23\n\nAnswers like (3, 3, 2, 0, 1) or (0, 1, 2, 3, 3) are not lexicographically largest.\n\nAnswers like (4, 1, 1, 1, 0) do not have the minimum y value.\n\nSample 2:\n\nIt can be shown there does not exist a sequence with length 2.\n\nSample 3:\n\n$2^{-1} + 2^{-1} = \\frac{1}{2} + \\frac{1}{2} = 1$\n\nPowers of 2:\n\nIf x > 0, then 2^{x} = 2\u00b72\u00b72\u00b7...\u00b72 (x times).\n\nIf x = 0, then 2^{x} = 1.\n\nIf x < 0, then $2^{x} = \\frac{1}{2^{-x}}$.\n\nLexicographical order:\n\nGiven two different sequences of the same length, (a_1, a_2, ... , a_{k}) and (b_1, b_2, ... , b_{k}), the first one is smaller than the second one for the lexicographical order, if and only if a_{i} < b_{i}, for the first i where a_{i} and b_{i} differ.",
  "solutions": "[\"from collections import defaultdict\\n\\ndef solve(n, k):\\n    as_bin = bin(n)[2:]\\n    cnt = defaultdict(int)\\n    cnt.update({i : 1 for i, b in enumerate(reversed(as_bin)) if b == '1'})\\n    curr_len = len(cnt)\\n    curr_pow = len(as_bin) - 1\\n\\n    if curr_len > k:\\n        return None\\n\\n    while True:\\n        new_len = curr_len + cnt[curr_pow]\\n        if new_len > k:\\n            break\\n        cnt[curr_pow - 1] += 2 * cnt[curr_pow]\\n        del cnt[curr_pow]\\n        curr_pow -= 1\\n        curr_len = new_len\\n\\n    i = min(cnt.keys())\\n    while curr_len < k:\\n        cnt[i] -= 1\\n        cnt[i - 1] += 2\\n        curr_len += 1\\n        i -= 1\\n\\n    ans = []\\n    for i in sorted(list(cnt.keys()), reverse=True):\\n        ans.extend([i] * cnt[i])\\n    return ans\\n\\nn, k = [int(v) for v in input().split()]\\nans = solve(n, k)\\n\\nif ans is None:\\n    print('No')\\nelse:\\n    print('Yes')\\n    print(' '.join(str(c) for c in ans))\\n\", \"from collections import defaultdict\\n\\ndef solve(n, k):\\n    as_bin = bin(n)[2:]\\n    cnt = defaultdict(int)\\n    cnt.update({i : 1 for i, b in enumerate(reversed(as_bin)) if b == '1'})\\n    curr_len = len(cnt)\\n    curr_pow = len(as_bin) - 1\\n\\n    if curr_len > k:\\n        return None\\n\\n    while True:\\n        new_len = curr_len + cnt[curr_pow]\\n        if new_len > k:\\n            break\\n        cnt[curr_pow - 1] += 2 * cnt[curr_pow]\\n        del cnt[curr_pow]\\n        curr_pow -= 1\\n        curr_len = new_len\\n\\n    ans = []\\n    for i in sorted(list(cnt.keys()), reverse=True):\\n        ans.extend([i] * cnt[i])\\n\\n    if curr_len < k:\\n        last = ans.pop()\\n        ans.extend(reversed(list(range(last - (k - curr_len), last))))\\n        ans.append(ans[-1])\\n\\n    return ans\\n\\nn, k = [int(v) for v in input().split()]\\nans = solve(n, k)\\n\\nif ans is None:\\n    print('No')\\nelse:\\n    print('Yes')\\n    print(' '.join(str(c) for c in ans))\\n\", \"def count1(n):\\n    count = 0\\n    while n > 0:\\n        n &= (n-1)\\n        count+= 1\\n    return count\\n\\n\\ndef find(n, k):\\n    ones = count1(n)\\n    l = list()\\n    if ones > k:\\n        print('No')\\n    else:\\n        tmp = n\\n        pow2 = 1\\n        index = 0\\n        while tmp > 0:\\n            if tmp % 2 == 1:\\n                l.append(index)\\n            tmp //= 2\\n            pow2 *= 2\\n            index += 1\\n        length = len(l)\\n        while length < k:\\n            m = max(l)\\n            c = l.count(m)\\n            rem = [i for i in l if i < m]\\n            if k - length >= c:\\n                rem += [m-1]*(2*c)\\n                l = rem\\n                length = len(l)\\n            else:\\n                # to_add = k - length\\n                # rem += [m] * (c - to_add) + [m-1] * (to_add * 2)\\n                mini = min(l)\\n                to_fill  = k - length\\n                l.remove(mini)\\n                for i in range(to_fill):\\n                    mini -=1\\n                    l.append(mini)\\n                l.append(mini)\\n                break\\n        print('Yes')\\n        l.sort(reverse=True)\\n        # print(len(l))\\n        print(' '.join([str(i) for i in l]))\\n\\n# find(23,5)\\n# find(13,2)\\n# find(1,2)\\nnn, kk = list(map(int, input().strip().split()))\\nfind(nn, kk)\\n\\n# find(1000000000000000000, 100000)\\n\", \"n, k = map(int, input().split())\\ncnt = [0] * 200010\\nans = ''\\nfor i in range(64):\\n  if (n >> i)&1:\\n    k -= 1\\n    cnt[i] = 1;\\nif k < 0:\\n  print(\\\"No\\\")\\nelse:\\n  print(\\\"Yes\\\")\\n  for i in range(64, -64, -1):\\n    if k >= cnt[i]:\\n      cnt[i - 1] += cnt[i] * 2\\n      k -= cnt[i]\\n      cnt[i] = 0\\n    else: break\\n  for i in range(-64, 64):\\n    if cnt[i]:\\n      while k:\\n        cnt[i] -= 1\\n        cnt[i - 1] += 2 \\n        i -= 1\\n        k-= 1\\n      break\\n  for i in range(64, -100010, -1): ans += (str(i) + ' ') * cnt[i] \\n  print(ans)\", \"#! /usr/bin/env python3\\n'''\\nAuthor:    krishna\\nCreated:   Fri Jan 19 20:39:10 2018 IST\\nFile Name: b.py\\nUSAGE:\\n      b.py\\nDescription:\\n\\n'''\\nimport sys, os\\n\\n\\ndef main():\\n    '''\\n    The Main\\n    '''\\n    n, k = list(map(int, sys.stdin.readline().split()))\\n\\n    x =  bin(n)[2:]\\n    if x.count('1') > k:\\n        print(\\\"No\\\")\\n        return\\n\\n    ans = [0] * (10 ** 5)\\n\\n    val = len(x) - 1\\n    idx = len(x) - 1\\n    cnt = 0\\n    for i in x:\\n        if (int(i)):\\n            ans[val] = 1\\n            # print(val)\\n            cnt += 1\\n\\n        val -= 1\\n\\n    for i in range(k-cnt):\\n        ans[idx] -= 1\\n        ans[idx-1] += 2\\n        if (ans[idx] == 0):\\n            idx -= 1\\n\\n    # print(ans[18])\\n    # return\\n\\n    maxIdx = idx - 1\\n    minIdx = idx - 1\\n    nonZeroIdx = idx - 1\\n    while (1):\\n        if (minIdx < 0) and (ans[minIdx] == 0):\\n            minIdx += 1\\n            break\\n        if ans[minIdx]:\\n            nonZeroIdx = minIdx\\n        minIdx -= 1\\n\\n    minIdx = nonZeroIdx\\n    # print(ans[0:10])\\n    # print(maxIdx, minIdx)\\n\\n    while (1):\\n        if (\\n            (ans[maxIdx] > 2)\\n            or ((ans[maxIdx] == 2 )and (maxIdx != minIdx))\\n        ):\\n            ans[minIdx] -= 1\\n            ans[minIdx - 1] += 2\\n            ans[maxIdx] -= 2\\n            ans[maxIdx + 1] += 1\\n            minIdx -= 1\\n        else:\\n            maxIdx -= 1\\n\\n        if (maxIdx <= minIdx):\\n            break\\n\\n\\n    print(\\\"Yes\\\")\\n    x = []\\n    while (1):\\n        for i in range(ans[idx]):\\n            x.append(idx)\\n        idx -= 1\\n        if (idx < 0) and (ans[idx] == 0):\\n            break\\n\\n    # print([(i, ans[i]) for i in range(len(ans)) if ans[i] < 0])\\n    # print(sum(ans))\\n    # print(len(x))\\n    print(\\\" \\\".join(map(str, x)))\\n\\n\\ndef __starting_point():\\n   main()\\n\\n__starting_point()\", \"n, k = map(int, input().split())\\nc = [0] * 200010\\nk -= c.count(1)\\n\\nfor i in range(64):\\n    if (n >> i) & 1:\\n        k -= 1\\n        c[i] = 1\\n\\nif k < 0:\\n    print('No')\\nelse:\\n    print('Yes')\\n\\n    for i in range(64, -64, -1):\\n        if k >= c[i]:\\n            c[i - 1] += c[i] * 2\\n            k -= c[i]\\n            c[i] = 0\\n        else:\\n            break\\n\\n    for i in range(-64, 64):\\n        if c[i]:\\n            while k:\\n                c[i] -= 1\\n                c[i - 1] += 2\\n                i -= 1\\n                k -= 1\\n            break\\n\\n    for i in range(64, -100010, -1):\\n        print('{} '.format(i) * c[i], end='')\\n\", \"n,m = list(map(int,input().split()))\\nmax_pows = -1\\ntemp = n\\nlist_pow = {}\\nwhile temp >0:\\n    factor = -1\\n    index = 1\\n    while index <= temp:\\n        index *=2\\n        factor +=1\\n    temp = temp - index//2\\n    if max_pows == -1:\\n        max_pows = factor\\n    list_pow[factor] = 1\\nmin_pows = factor\\nif len(list_pow) > m:\\n    print(\\\"No\\\")\\nelse:\\n    pow_count = len(list_pow)\\n    cur_pow = max_pows\\n  \\n    while pow_count + list_pow[cur_pow] <=m:\\n        list_pow[cur_pow] -=1\\n        if cur_pow - 1 in list_pow:\\n            list_pow[cur_pow - 1] +=2\\n        else:\\n            list_pow[cur_pow - 1] = 2\\n        pow_count +=1\\n        if list_pow[cur_pow]==0: \\n            cur_pow -=1\\n        min_pows = min(min_pows,cur_pow)    \\n            \\n    cur_pow = min_pows\\n    \\n    while pow_count!= m:\\n        list_pow[cur_pow] -=1\\n        if cur_pow - 1 in list_pow:\\n            list_pow[cur_pow - 1] +=2\\n        else:\\n            list_pow[cur_pow - 1] = 2\\n        pow_count +=1\\n        cur_pow -=1        \\n    print(\\\"Yes\\\")\\n    cur_count = 0\\n    while cur_count !=m:\\n        if max_pows in list_pow:\\n            for i in range(list_pow[max_pows]):\\n                cur_count +=1\\n                print(max_pows,end = \\\" \\\")\\n        max_pows -=1\\n        \\n\", \"from collections import *\\nN, K = list(map(int, input().split()))\\n\\na = deque()\\nfor i in range(60): # 2**60 > 1e18\\n\\tif N & (1<<i):\\n\\t\\ta.appendleft([i,1])\\nk = len(a)\\n\\nif k > K:\\n\\tprint(\\\"No\\\")\\n\\treturn\\n\\n# high\\nwhile k + a[0][1] <= K:\\n\\te, c = a.popleft()\\n\\tif len(a) == 0 or a[0][0] != e - 1:\\n\\t\\ta.appendleft([e-1,0])\\n\\ta[0][1] += 2 * c\\n\\tk += c\\n\\n# low\\nif K - k:\\n\\ta[-1][1] -= 1\\n\\tcount = K - k\\n\\tfirst = a[-1][0] - 1\\n\\tlast = first - count + 1\\n\\tfor i in range(first, last - 1, -1):\\n\\t\\ta.append([i,1])\\n\\ta.append([last,1])\\n\\tk = K\\n\\nans = []\\t\\t\\nfor i in a:\\n\\tans += [i[0]] * i[1]\\nans = list(map(str, ans))\\nans = \\\"Yes\\\\n\\\" + \\\" \\\".join(ans)\\nprint(ans)\\n\", \"n, k = map(int,input().split())\\n\\nbits = [0 for i in range(128)]\\ntmp = n\\nsumBits = 0\\n\\nfor i in range(64):\\n    if tmp%2==1:\\n        bits[63-i] = 1\\n        sumBits += 1\\n    tmp = tmp>>1\\nif sumBits>k:\\n    print(\\\"No\\\")\\nelif sumBits==k:\\n    print(\\\"Yes\\\")\\n    res = []\\n    for i in range(63,-1,-1):\\n        if bits[63-i] == 1:\\n            res.append(i)\\n    print(*res)\\nelse:\\n    ind = 0\\n    while k!=sumBits:\\n        if bits[ind] != 0:\\n            if bits[ind]<=k-sumBits:\\n                bits[ind+1] += 2*bits[ind]\\n                sumBits += bits[ind]\\n                bits[ind] = 0\\n            else:\\n                break\\n        ind += 1\\n    if k!=sumBits:\\n        for i in range(127,-1,-1):\\n            if bits[i] != 0:\\n                bits[i] -= 1\\n                first = i + 1\\n                break\\n        if k - sumBits < 128 - first:\\n            for i in range(first,k - sumBits + first):\\n                bits[i] = 1\\n            bits[k - sumBits + first - 1] = 2\\n        else:\\n            for i in range(first,128):\\n                bits[i] = 1\\n            bits += [1]*(k - sumBits + first - 128)\\n            bits[-1] = 2\\n    print(\\\"Yes\\\")\\n    res = []\\n    for i in range(len(bits)):\\n        if bits[i] != 0:\\n            res += [63-i]*bits[i]\\n    print(*res)\", \"from collections import Counter\\nbits = (10**18).bit_length()\\nn, k = map(int, input().split())\\nnum = Counter(i for i in range(bits) if (n >> i) & 1)\\nk -= len(num)\\nif k >= 0:\\n\\tprint('Yes')\\n\\tfor i in range(bits, -bits, -1):\\n\\t\\tif num[i] > k: break\\n\\t\\tnum[i-1] += num[i] * 2\\n\\t\\tk -= num.pop(i, 0)\\n\\ti = next(filter(num.get, range(-bits, bits)))\\n\\tfor k in range(k):\\n\\t\\tnum[i] -= 1\\n\\t\\tnum[i-1] += 2\\n\\t\\ti -= 1\\n\\ts = sorted(num.elements(), reverse=True)\\n\\tprint(' '.join(map(str, s)))\\nelse:\\n\\tprint('No')\", \"inp=lambda:map(int,input().split())\\nn,k=inp()\\nn2=n\\n\\na=[0]*100\\ni=0\\n\\nwhile(n2>0):\\n    a[i]=n2%2\\n    n2//=2\\n    i+=1\\n\\ncnt=i-1\\ncnt2=cnt\\nsum=0\\narr=[0]*(10**7+1)\\nq=[0]*(10**7+1)\\n\\n\\nfor i in range(cnt,-1,-1):\\n    sum+=a[i]\\n    q[i]=a[cnt-i]\\n\\nif sum>k:\\n    print(\\\"No\\\")\\n    quit()\\n\\nk2=k-sum\\n\\nbeg=0\\nwhile k2>0:\\n    if(q[beg]<=k2):\\n        k2-=q[beg]\\n        q[beg+1]+=2*q[beg]\\n        q[beg]=0\\n        beg+=1\\n    else:\\n       break\\n\\ncnt+=1000\\n\\nwhile(q[cnt]==0):\\n    cnt-=1   \\n\\n\\n\\nwhile k2>0:\\n    q[cnt]-=1\\n    q[cnt+1]+=2\\n    cnt+=1\\n    k2-=1\\n   \\n\\n\\n\\nprint(\\\"Yes\\\")\\n \\nfor i in range(beg,cnt+1):\\n    for j in range(1,q[i]+1):\\n        print(cnt2-i,'', end='')\\n\", \"inp=lambda:map(int,input().split())\\nn,k=inp()\\nn2=n\\n\\na=[0]*100\\ni=0\\n\\nwhile(n2>0):\\n    a[i]=n2%2\\n    n2//=2\\n    i+=1\\n\\ncnt=i-1\\ncnt2=cnt\\nsum=0\\narr=[0]*(10**7+1)\\nq=[0]*(10**7+1)\\n\\n\\nfor i in range(cnt,-1,-1):\\n    sum+=a[i]\\n    q[i]=a[cnt-i]\\n\\nif sum>k:\\n    print(\\\"No\\\")\\n    quit()\\n\\nk2=k-sum\\n\\nbeg=0\\nwhile k2>0:\\n    if(q[beg]<=k2):\\n        k2-=q[beg]\\n        q[beg+1]+=2*q[beg]\\n        q[beg]=0\\n        beg+=1\\n    else:\\n       break\\n\\ncnt+=1000\\n\\nwhile(q[cnt]==0):\\n    cnt-=1   \\n\\n\\n\\nwhile k2>0:\\n    q[cnt]-=1\\n    q[cnt+1]+=2\\n    cnt+=1\\n    k2-=1\\n   \\n\\n\\n\\nprint(\\\"Yes\\\");\\n \\nfor i in range(beg,cnt+1):\\n    for j in range(1,q[i]+1):\\n        print(cnt2-i,'', end='')\\n\", \"def solve(n, k):\\n    bn = binary(n)\\n    if k < len(bn):\\n        return 'No'\\n\\n    cur_dec = len(bn)\\n    next_dec = cur_dec+1\\n    while True:\\n        if k < next_dec:\\n            dif = k - cur_dec\\n            bn = list(reversed(bn))\\n            for _ in range(dif):\\n                e = bn.pop()\\n                bn += [e-1, e-1]\\n            return 'Yes\\\\n' + ' '.join(map(str,bn))\\n        cur_dec = next_dec\\n        cnt = bn.count(bn[-1])\\n        bn = bn[:-cnt] + [bn[-1]-1]*(cnt*2)\\n        next_dec = cur_dec+bn.count(bn[-1])\\n\\n\\n\\ndef binary(x):\\n    out = []\\n    for i in reversed(list(range(64+1))):\\n        if x >= 2**i:\\n            x -= 2**i\\n            out.append(i)\\n    return list(reversed(out))\\n\\n\\ndef __starting_point():\\n    n, k = list(map(int, input().split()))\\n    print(solve(n, k))\\n\\n__starting_point()\", \"read = lambda: map(int, input().split())\\nn, k = read()\\nb = bin(n)[2:]\\nbl = len(b)\\nk -= b.count('1')\\nif k < 0:\\n    print('No')\\n    return\\nprint('Yes')\\nm = -2\\na = {}\\nfor _ in range(bl):\\n    if b[_] == '1':\\n        a[bl - _ - 1] = 1\\n        if m is -2:\\n            m = bl - _ - 1\\nwhile k > 0:\\n    if k >= a[m]:\\n        k -= a[m]\\n        a[m - 1] = a.get(m - 1, 0) + a[m] * 2\\n        a.pop(m)\\n        m -= 1\\n    else:\\n        break\\nm = min(a.keys())\\nwhile k > 0:\\n    k -= 1\\n    if a[m] is 1:\\n        a.pop(m)\\n    else:\\n        a[m] -= 1\\n    a[m - 1] = a.get(m - 1, 0) + 2\\n    m -= 1\\nfor k in sorted(list(a.keys()), reverse=True):\\n    print(('%d ' % k) * a[k], end='')\\n\", \"#!/usr/bin/env python\\n# -*- coding: utf-8 -*-\\n# @Time    : 2017/10/20 13:52\\n# @Author  : litianshuang\\n# @Email   : litianshuang@jingdata.com\\n# @File    : test.py\\n# @Desc    :\\n\\n\\ndef __starting_point():\\n    h, k = [int(n) for n in input().split(' ')]\\n    level = 0\\n    ret = []\\n    while h > 0:\\n        if h % 2 == 0:\\n            h //= 2\\n            level += 1\\n        else:\\n            ret.append(level)\\n            h -= 1\\n    if len(ret) > k:\\n        print('No')\\n    else:\\n        print('Yes')\\n        cntnum = {}\\n        maxn = ret[0]\\n        minn = ret[0]\\n        total_len = len(ret)\\n        for i in ret:\\n            if i not in cntnum:\\n                cntnum[str(i)] = 0\\n            cntnum[str(i)] += 1\\n            if maxn < i:\\n                maxn = i\\n            if minn > i:\\n                minn = i\\n\\n        while total_len <= k:\\n            if total_len + cntnum[str(maxn)] <= k:\\n                if str(maxn - 1) not in cntnum:\\n                    cntnum[str(maxn - 1)] = 0\\n                cntnum[str(maxn-1)] += 2 * cntnum[str(maxn)]\\n                total_len += cntnum[str(maxn)]\\n                cntnum[str(maxn)] = 0\\n                maxn -= 1\\n                minn = min(minn, maxn)\\n            else:\\n                break\\n\\n        while total_len < k:\\n            cntnum[str(minn - 1)] = 2\\n            cntnum[str(minn)] -= 1\\n            minn -= 1\\n            total_len += 1\\n\\n        ans = []\\n        for num, v in list(cntnum.items()):\\n            for i in range(0, v):\\n                ans.append(int(num))\\n        ans.sort(reverse=True)\\n\\n        print(\\\" \\\".join([str(x) for x in ans]))\\n\\n__starting_point()\", \"n, k = list(map(int, input().split()))\\n\\ncnt = [0] * 200010\\n\\nans = ''\\n\\nfor i in range(64):\\n\\n  if (n >> i)&1:\\n\\n    k -= 1\\n\\n    cnt[i] = 1;\\n\\nif k < 0:\\n\\n  print(\\\"No\\\")\\n\\nelse:\\n\\n  print(\\\"Yes\\\")\\n\\n  for i in range(64, -64, -1):\\n\\n    if k >= cnt[i]:\\n\\n      cnt[i - 1] += cnt[i] * 2\\n\\n      k -= cnt[i]\\n\\n      cnt[i] = 0\\n\\n    else: break\\n\\n  for i in range(-64, 64):\\n\\n    if cnt[i]:\\n\\n      while k:\\n\\n        cnt[i] -= 1\\n\\n        cnt[i - 1] += 2 \\n\\n        i -= 1\\n\\n        k-= 1\\n\\n      break\\n\\n  for i in range(64, -100010, -1): ans += (str(i) + ' ') * cnt[i] \\n\\n  print(ans)\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"read = lambda: map(int, input().split())\\nn, k = read()\\nb = bin(n)[2:]\\nbl = len(b)\\nk -= b.count('1')\\nif k < 0:\\n    print('No')\\n    return\\nprint('Yes')\\nm = -2\\na = {}\\nfor _ in range(bl):\\n    if b[_] == '1':\\n        a[bl - _ - 1] = 1\\n        if m is -2:\\n            m = bl - _ - 1\\nwhile k > 0:\\n    if k >= a[m]:\\n        k -= a[m]\\n        a[m - 1] = a.get(m - 1, 0) + a[m] * 2\\n        a.pop(m)\\n        m -= 1\\n    else:\\n        break\\nm = min(a.keys())\\nwhile k > 0:\\n    k -= 1\\n    if a[m] is 1:\\n        a.pop(m)\\n    else:\\n        a[m] -= 1\\n    a[m - 1] = a.get(m - 1, 0) + 2\\n    m -= 1\\nfor k in sorted(list(a.keys()), reverse=True):\\n    print(('%d ' % k) * a[k], end='')\", \"n,k=map(int,input().split())\\na=list(bin(n))\\na=a[2:]\\nb=[]\\nfor i in range(100005):\\n\\tb.append(0)\\nl=len(a)\\nc=0\\nfor i in range(l):\\n\\tif(a[i]==\\\"1\\\"):\\n\\t\\tb[65-(l-i-1)]=1\\n\\t\\tc+=1\\n\\t\\tlini=65-(l-i-1)\\nif(c<=k):\\n\\tgfati=0\\n\\tfor i in range(129):\\n\\t\\tif(gfati==1):\\n\\t\\t\\tbreak\\n\\t\\tif(c==k):\\n\\t\\t\\tbreak\\n\\t\\tif(b[i]==0):\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\tif(i>lini):\\n\\t\\t\\t\\tlini=i\\n\\t\\t\\t#print(c,2*b[i])\\n\\t\\t\\tif(c+b[i]<=k):\\n\\t\\t\\t\\t#print(\\\"why\\\")\\n\\t\\t\\t\\tb[i+1]+=2*b[i]\\n\\t\\t\\t\\tc+=b[i]\\n\\t\\t\\t\\tb[i]=0\\n\\t\\t\\telse:\\n\\t\\t\\t\\tgfati=1\\n\\t#print(c,lini)\\n\\tif(1):\\n\\t\\tfor i in range(lini,1000005,1):\\n\\t\\t\\tif(c==k):\\n\\t\\t\\t\\tbreak\\n\\t\\t\\tif(b[i]!=0):\\n\\t\\t\\t\\tif(c+1<=k):\\n\\t\\t\\t\\t\\tb[i]-=1\\n\\t\\t\\t\\t\\tc+=1\\n\\t\\t\\t\\t\\tb[i+1]+=2\\n\\tprint(\\\"Yes\\\")\\n\\tfor i in range(100005):\\n\\t\\tif(b[i]!=0):\\n\\t\\t\\tfor j in  range(b[i]):\\n\\t\\t\\t\\tprint(65-i,end=\\\" \\\")\\nelse:\\n\\tprint(\\\"No\\\")\", \"ii=lambda:int(input())\\nkk=lambda:map(int, input().split())\\nll=lambda:list(kk())\\n\\nfrom math import log\\n\\nelems = [0]*126\\nn,k=kk()\\nc=0\\nfor i in range(63):\\n\\tif n&(2**i):\\n\\t\\telems[i]=1\\n\\t\\tc+=1\\nif c > k:\\n\\tprint(\\\"No\\\")\\n\\treturn\\nfor i in range(63, -63,-1):\\n\\tif elems[i]:\\n\\t\\tif elems[i] > k-c:\\n\\t\\t\\t#stop it, now reverse sweep\\n\\t\\t\\tbreak\\n\\t\\tc+=elems[i]\\n\\t\\telems[i-1] += elems[i]*2\\n\\t\\telems[i] = 0\\nprin = []\\nfor i in range(63, -63, -1):\\n\\tprin.extend([i]*elems[i])\\nwhile len(prin)<k:\\n\\tprin[-1]-=1\\n\\tprin.append(prin[-1])\\nprint(\\\"Yes\\\")\\nprint(\\\" \\\".join(map(str, prin)))\", \"n, k = map(int, input().split())\\n\\ns = list()\\nb = list()\\nbase = 0\\nwhile n > 0:\\n    s.append(n%2)\\n    b.append(base)\\n    n //= 2\\n    base += 1\\ns.reverse() # indicate existence\\nb.reverse() # indicate which power of 2\\n# print(s)\\n# print(b)\\n\\nt = sum(s)\\nif t > k:\\n    print('No')\\n    return\\n    \\npos = 0\\nwhile t < k:\\n    if pos+1 == len(s): # extend if necessary\\n        s.append(0)\\n        b.append(b[-1] - 1)\\n\\n    if t + s[pos] <= k:\\n        t += s[pos]\\n        s[pos+1] += 2 * s[pos]\\n        s[pos] = 0\\n        pos += 1        \\n    else:       \\n        for i in range(len(s)-1, -1, -1):\\n            if s[i] > 0:\\n                while t < k:\\n                    if i+1 == len(s):\\n                        s.append(0)\\n                        b.append(b[-1] - 1)                    \\n                    s[i] -= 1\\n                    s[i+1] += 2\\n                    t += 1\\n                    i += 1\\n                break\\n\\nres = list() # comply with answer form\\nfor i in range(len(s)):\\n    for j in range(s[i]):\\n        res.append(b[i])\\nprint('Yes')\\nprint(' '.join(map(str, res)))        \", \"import math\\nx, k = list(map(int, input().split()))\\nkori = k\\na = bin(x)\\n\\n# s = a[2:len(a)]\\nqtz = 0;\\ns = []\\nfor i in range(2, len(a)):\\n    if a[i] == \\\"1\\\":\\n        k-=1\\n        s.append(1)\\n    else:\\n        qtz+=1\\n        s.append(0)\\n\\n\\n\\nv = []\\nfor i in range(len(s)):\\n    if s[i] != 0:\\n        v.append((len(s)-1)-i)\\n    # else:\\n        # v.append(\\\"x\\\")\\n\\n# print(qtz, k)\\nif k < 0:\\n    print(\\\"No\\\")\\n    return\\nelse:\\n    tam = len(s)\\n    # print(tam)\\n    print(\\\"Yes\\\")\\n    # print(k, s)\\n    if k > 0:\\n        p = 0\\n        #diminui o y m\\u00e1ximo\\n        while(1):\\n            # print(p, s[p], len(s))\\n            if tam - 1 <= p:\\n                s.append(0)\\n            if s[p] > k:\\n                break\\n            else:\\n                k-= s[p]\\n                s[p+1] += s[p]*2\\n                s[p] = 0\\n                p+=1\\n        #se k ainda for maior que zero\\n        if k > 0:\\n            j = len(s)-1\\n            while k > 0:\\n                while s[j] == 0:\\n                    j-=1\\n                s[j] -= 1\\n                if j == len(s)-1:\\n                    s.append(2)\\n                    j+=1\\n                else:\\n                    s[j+1] += 2\\n                    j+=1\\n                k-=1\\n\\n\\n            # print(s)\\n        v = []\\n        for i in range(len(s)):\\n            for j in range(s[i]):\\n                v.append((tam-1) -i)\\n        print(*v)\\n    else:\\n        v = []\\n        for i in range(len(s)):\\n            for j in range(s[i]):\\n                v.append(len(s)-1 -i)\\n        print(*v)\\n\"]",
  "input_output": "{\"inputs\": [\"23 5\\n\", \"13 2\\n\", \"1 2\\n\", \"1 1\\n\", \"7 2\\n\", \"7 3\\n\", \"7 4\\n\", \"521325125150442808 10\\n\", \"1 4\\n\", \"9 4\\n\", \"3 4\\n\", \"144 4\\n\", \"59 4\\n\", \"78 4\\n\", \"192 4\\n\", \"107 4\\n\", \"552 5\\n\", \"680 5\\n\", \"808 5\\n\", \"1528 5\\n\", \"1656 5\\n\", \"26972 8\\n\", \"23100 8\\n\", \"19228 8\\n\", \"22652 8\\n\", \"26076 8\\n\", \"329438 10\\n\", \"12862 10\\n\", \"96286 10\\n\", \"12414 10\\n\", \"95838 10\\n\", \"1728568411 16\\n\", \"611684539 16\\n\", \"84735259 16\\n\", \"6967851387 16\\n\", \"2145934811 16\\n\", \"6795804571172 20\\n\", \"1038982654596 20\\n\", \"11277865770724 20\\n\", \"5525338821444 20\\n\", \"15764221937572 20\\n\", \"922239521698513045 30\\n\", \"923065764876596469 30\\n\", \"923892008054679893 30\\n\", \"924718251232763317 30\\n\", \"925544490115879445 30\\n\", \"926370733293962869 30\\n\", \"927196976472046293 30\\n\", \"928023215355162421 30\\n\", \"928849458533245845 30\\n\", \"855969764271400156 30\\n\", \"856796007449483580 30\\n\", \"857622246332599708 30\\n\", \"858448489510683132 30\\n\", \"859274728393799260 30\\n\", \"860100975866849980 30\\n\", \"860927214749966108 30\\n\", \"861753457928049532 30\\n\", \"862579701106132957 30\\n\", \"863405944284216381 30\\n\", \"374585535361966567 30\\n\", \"4 1\\n\", \"4 9\\n\", \"4 3\\n\", \"4 144\\n\", \"4 59\\n\", \"4 78\\n\", \"4 107\\n\", \"281474976710656 5\\n\", \"288230376151973890 5\\n\", \"36029346774812736 5\\n\", \"901283150305558530 5\\n\", \"288318372649779720 50\\n\", \"513703875844698663 50\\n\", \"287632104387196918 50\\n\", \"864690028406636543 58\\n\", \"576460752303423487 60\\n\", \"141012366262272 1\\n\", \"1100585377792 4\\n\", \"18598239186190594 9\\n\", \"18647719372456016 19\\n\", \"9297478914673158 29\\n\", \"668507368948226 39\\n\", \"1143595340402690 49\\n\", \"35527987183872 59\\n\", \"324634416758413825 9\\n\", \"577030480059438572 19\\n\", \"185505960265024385 29\\n\", \"57421517433081233 39\\n\", \"90131572647657641 49\\n\", \"732268459757413905 59\\n\", \"226111453445787190 9\\n\", \"478818723873062027 19\\n\", \"337790572680259391 29\\n\", \"168057637182978458 39\\n\", \"401486559567818547 49\\n\", \"828935109688089201 59\\n\", \"954687629161163764 9\\n\", \"287025268967992526 19\\n\", \"844118423640988373 29\\n\", \"128233154575908599 39\\n\", \"792058388714085231 49\\n\", \"827183623566145225 59\\n\", \"846113779983498737 9\\n\", \"780248358343081983 19\\n\", \"576460580458522095 29\\n\", \"540145805193625598 39\\n\", \"576388182371377103 49\\n\", \"567448991726268409 59\\n\", \"576460752303423487 9\\n\", \"576460752303423487 19\\n\", \"864691128455135231 29\\n\", \"864691128455135231 39\\n\", \"576460752303423487 49\\n\", \"864691128455135231 59\\n\", \"1 4\\n\", \"2 64\\n\", \"2 8\\n\", \"1 5\\n\", \"1 7\\n\", \"19 5\\n\", \"1 30\\n\"], \"outputs\": [\"Yes\\n3 3 2 1 0 \\n\", \"No\\n\", \"Yes\\n-1 -1 \\n\", \"Yes\\n0 \\n\", \"No\\n\", \"Yes\\n2 1 0 \\n\", \"Yes\\n1 1 1 0 \\n\", \"No\\n\", \"Yes\\n-2 -2 -2 -2 \\n\", \"Yes\\n2 2 -1 -1 \\n\", \"Yes\\n0 0 -1 -1 \\n\", \"Yes\\n6 6 3 3 \\n\", \"No\\n\", \"Yes\\n6 3 2 1 \\n\", \"Yes\\n6 6 5 5 \\n\", \"No\\n\", \"Yes\\n8 8 5 2 2 \\n\", \"Yes\\n8 8 7 5 3 \\n\", \"Yes\\n8 8 8 5 3 \\n\", \"No\\n\", \"No\\n\", \"Yes\\n14 13 11 8 6 4 3 2 \\n\", \"Yes\\n14 12 11 9 5 4 3 2 \\n\", \"Yes\\n13 13 11 9 8 4 3 2 \\n\", \"Yes\\n14 12 11 6 5 4 3 2 \\n\", \"No\\n\", \"Yes\\n18 16 10 9 7 6 4 3 2 1 \\n\", \"Yes\\n12 12 12 9 5 4 3 2 0 0 \\n\", \"Yes\\n15 15 14 13 12 11 4 3 2 1 \\n\", \"Yes\\n12 12 12 6 5 4 3 2 0 0 \\n\", \"No\\n\", \"No\\n\", \"Yes\\n28 28 26 22 21 20 18 16 15 12 7 5 4 3 1 0 \\n\", \"Yes\\n25 25 24 19 18 15 14 13 12 10 8 4 3 1 -1 -1 \\n\", \"No\\n\", \"No\\n\", \"Yes\\n41 41 41 37 35 34 33 30 26 24 23 18 14 13 12 10 9 5 1 1 \\n\", \"Yes\\n38 38 38 37 36 32 31 30 29 27 21 20 16 13 11 9 7 1 0 0 \\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"Yes\\n58 58 58 55 54 51 50 46 45 44 41 40 39 38 37 36 34 32 30 29 28 23 21 19 17 15 7 4 2 0 \\n\", \"No\\n\", \"No\\n\", \"Yes\\n58 58 58 55 54 52 50 48 46 41 38 36 35 32 31 29 25 19 18 15 12 11 10 8 7 5 4 2 -1 -1 \\n\", \"Yes\\n59 58 55 54 52 51 45 44 40 39 38 35 34 33 32 30 28 27 26 24 21 19 18 16 14 12 9 4 2 0 \\n\", \"Yes\\n57 57 57 57 57 57 55 54 52 51 49 48 45 40 38 34 33 28 27 22 19 18 17 10 9 6 5 4 2 0 \\n\", \"No\\n\", \"Yes\\n58 58 58 55 54 53 48 37 36 33 31 27 26 25 23 19 18 17 16 14 13 11 10 9 8 5 4 2 -1 -1 \\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"Yes\\n58 58 57 56 55 54 53 50 49 47 46 45 41 39 38 37 33 32 31 29 21 15 11 10 8 7 4 3 1 1 \\n\", \"No\\n\", \"Yes\\n59 57 56 55 54 53 51 50 47 46 40 39 38 36 28 26 25 22 21 16 15 14 13 12 10 9 6 4 3 2 \\n\", \"No\\n\", \"No\\n\", \"Yes\\n58 58 57 56 55 54 53 52 50 48 47 44 37 36 34 30 26 25 24 23 22 18 12 9 8 6 5 4 3 2 \\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"Yes\\n2 \\n\", \"Yes\\n-1 -1 -1 -1 -1 -1 -1 -2 -2 \\n\", \"Yes\\n1 0 0 \\n\", \"Yes\\n-5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20 -21 -21 \\n\", \"Yes\\n-3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20 -21 -22 -23 -24 -25 -26 -27 -28 -29 -30 -30 \\n\", \"Yes\\n-4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -18 \\n\", \"Yes\\n-4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -19 -20 -21 -22 -23 -24 -25 -26 -27 -28 -29 -30 -31 -32 -33 -34 -35 -36 -37 -38 -39 -40 -41 -42 -43 -44 -45 -46 -47 -47 \\n\", \"Yes\\n46 46 46 45 45 \\n\", \"Yes\\n57 57 18 0 0 \\n\", \"Yes\\n55 39 15 11 6 \\n\", \"No\\n\", \"Yes\\n53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 53 46 44 35 30 27 17 14 9 2 1 0 -1 -2 -3 -4 -5 -6 -6 \\n\", \"Yes\\n55 55 55 55 55 55 55 55 55 55 55 55 55 55 53 48 43 41 39 38 37 36 34 27 26 25 24 22 21 20 18 17 15 14 13 12 9 5 2 1 -1 -2 -3 -4 -5 -6 -7 -8 -9 -9 \\n\", \"Yes\\n57 56 55 54 53 52 51 50 48 47 46 44 43 42 41 40 39 38 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 13 12 10 9 8 7 6 5 4 2 1 \\n\", \"Yes\\n58 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 39 38 37 36 35 34 33 32 31 30 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 \\n\", \"Yes\\n57 57 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 \\n\", \"No\\n\", \"Yes\\n39 39 30 13 \\n\", \"Yes\\n54 49 44 41 40 21 18 8 1 \\n\", \"Yes\\n51 51 51 51 51 51 51 51 49 46 31 24 20 16 6 3 2 1 1 \\n\", \"Yes\\n49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 49 48 43 33 18 11 9 2 0 -1 -2 -3 -4 -4 \\n\", \"Yes\\n45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 32 22 16 15 9 0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -13 \\n\", \"Yes\\n45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 45 44 36 35 27 25 19 12 0 -1 -2 -3 -4 -5 -6 -7 -8 -8 \\n\", \"Yes\\n40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 38 36 24 19 18 17 14 7 6 5 4 3 2 1 0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -11 \\n\", \"No\\n\", \"Yes\\n59 49 42 41 37 35 33 28 26 23 18 12 10 8 7 6 5 3 2 \\n\", \"Yes\\n54 54 54 54 54 54 54 54 54 54 52 49 48 43 42 39 37 36 29 24 22 20 15 9 8 7 -1 -2 -2 \\n\", \"Yes\\n52 52 52 52 52 52 52 52 52 52 52 52 51 50 39 36 31 30 28 27 26 24 20 11 10 8 7 4 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -10 \\n\", \"Yes\\n52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 52 45 44 42 41 37 36 28 25 23 21 20 18 17 7 5 3 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -12 \\n\", \"Yes\\n54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 53 51 48 47 43 41 38 35 31 30 28 20 13 10 9 4 -1 -2 -2 \\n\", \"No\\n\", \"No\\n\", \"Yes\\n58 55 53 52 44 41 39 37 36 35 34 30 29 28 26 24 20 18 16 13 10 9 8 5 4 3 2 1 0 \\n\", \"Yes\\n54 54 54 54 54 54 54 54 54 52 50 48 43 42 41 40 39 34 33 32 31 30 28 26 25 20 18 16 13 12 11 8 7 4 3 0 -1 -2 -2 \\n\", \"Yes\\n54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 54 52 49 46 44 43 42 40 39 38 37 34 33 28 26 24 21 17 13 11 10 9 8 5 4 1 -1 -1 \\n\", \"Yes\\n55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 47 46 45 44 43 36 34 33 32 29 25 23 22 19 18 17 15 14 12 11 9 6 5 4 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -11 \\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"Yes\\n56 55 54 50 49 48 47 44 41 40 38 36 35 34 33 32 31 30 29 27 25 23 22 21 19 18 15 13 12 11 10 9 7 6 5 4 2 1 0 \\n\", \"Yes\\n56 56 56 56 56 56 56 56 56 56 55 54 53 52 51 50 48 47 46 45 44 42 39 38 37 35 30 29 28 26 23 21 19 17 16 15 14 12 11 9 8 6 5 3 2 1 -1 -2 -2 \\n\", \"Yes\\n55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 55 54 53 52 51 49 47 45 44 43 42 41 40 36 35 34 33 32 30 29 28 27 26 25 23 21 19 18 17 13 12 10 9 7 6 3 -1 -1 \\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"Yes\\n58 57 56 55 54 53 52 51 50 49 48 47 45 44 43 42 40 39 38 37 36 35 34 33 32 30 29 28 27 26 25 23 22 21 20 19 17 15 12 11 10 9 8 7 6 3 2 1 0 \\n\", \"Yes\\n56 56 56 56 56 56 56 55 54 52 51 50 49 48 47 46 45 44 43 41 40 39 38 36 35 32 31 30 29 28 27 25 24 23 22 21 20 19 18 17 16 14 13 11 10 9 8 7 6 5 4 3 -1 -2 -3 -4 -5 -6 -6 \\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"No\\n\", \"Yes\\n59 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 \\n\", \"Yes\\n-2 -2 -2 -2 \\n\", \"Yes\\n-5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 \\n\", \"Yes\\n-2 -2 -2 -2 -2 -2 -2 -2 \\n\", \"Yes\\n-2 -2 -2 -3 -3 \\n\", \"Yes\\n-2 -2 -2 -3 -4 -5 -5 \\n\", \"Yes\\n3 3 1 -1 -1 \\n\", \"Yes\\n-4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 -18 -18 \\n\"]}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/916/B",
  "starter_code": ""
}