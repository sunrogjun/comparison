{
  "task_id": "APPS/419",
  "problem_id": 419,
  "prompt": "In the city of Saint Petersburg, a day lasts for $2^{100}$ minutes. From the main station of Saint Petersburg, a train departs after $1$ minute, $4$ minutes, $16$ minutes, and so on; in other words, the train departs at time $4^k$ for each integer $k \\geq 0$. Team BowWow has arrived at the station at the time $s$ and it is trying to count how many trains have they missed; in other words, the number of trains that have departed strictly before time $s$. For example if $s = 20$, then they missed trains which have departed at $1$, $4$ and $16$. As you are the only one who knows the time, help them!\n\nNote that the number $s$ will be given you in a binary representation without leading zeroes.\n\n\n-----Input-----\n\nThe first line contains a single binary number $s$ ($0 \\leq s < 2^{100}$) without leading zeroes.\n\n\n-----Output-----\n\nOutput a single number\u00a0\u2014 the number of trains which have departed strictly before the time $s$.\n\n\n-----Examples-----\nInput\n100000000\n\nOutput\n4\n\nInput\n101\n\nOutput\n2\n\nInput\n10100\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example $100000000_2 = 256_{10}$, missed trains have departed at $1$, $4$, $16$ and $64$.\n\nIn the second example $101_2 = 5_{10}$, trains have departed at $1$ and $4$.\n\nThe third example is explained in the statements.",
  "solutions": "[\"s = int(input(), 2)\\n\\nt, ans = 1, 0\\n\\nwhile t < s:\\n\\tans += 1\\n\\tt *= 4\\n\\nprint(ans)\\n\", \"a = int(input(), base = 2)\\n\\nc = 0\\nwhile 4**c < a: c += 1\\nprint(c)\\n\", \"def mp():\\n    return map(int, input().split())\\n\\nn = int(input(), 2)\\nans = 0\\ni = 1\\nwhile i < n:\\n    i *= 4\\n    ans += 1\\n\\nprint(ans)\", \"from sys import stdin\\ns = stdin.readline().strip()\\nans = 0\\nt = '1'\\nwhile len(t) < len(s) or (len(t) == len(s) and t < s):\\n    ans += 1\\n    t += '00'\\nprint(ans)\\n\\n\", \"import sys \\nfrom collections import defaultdict\\ninput = lambda : sys.stdin.readline().rstrip()\\n\\nn = int(input(), 2)\\n\\nans = 0\\n\\ni = 0\\nwhile 4**i < n:\\n  ans += 1\\n  i += 1\\n\\nprint(ans)\", \"i, k = 0, int(input(), 2)\\nwhile 4 ** i < k:\\n\\ti += 1\\nprint(i)\", \"def main():\\n    import sys\\n    input = sys.stdin.readline\\n    \\n    s = input()\\n    cnt = s.count('1')\\n    l = len(s) - 1\\n    \\n    if l & 1:\\n        if cnt > 1:\\n            print(l + 1 >> 1)\\n        else:\\n            print(l >> 1)\\n    else:\\n        print(l >> 1)\\n    \\n    return 0\\n\\nmain()\", \"import itertools\\nimport math\\nfrom collections import defaultdict\\n\\ndef input_ints():\\n    return list(map(int, input().split()))\\n\\ndef solve():\\n    x = int(input(), 2)\\n    ans = 0\\n    p = 1\\n    while p < x:\\n        ans += 1\\n        p *= 4\\n    print(ans)\\n\\n\\ndef __starting_point():\\n    solve()\\n\\n__starting_point()\", \"# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\\n# TAIWAN NUMBER ONE!!!!!!!!!!!!!!!!!!!\\nfrom sys import stdin, stdout\\nimport math\\nimport copy\\n \\n#T = int(input())\\n#N = int(input())\\ns = input()\\n#print(N)\\n#N,r = [int(x) for x in stdin.readline().split()]\\n#arr = [int(x) for x in stdin.readline().split()]\\n \\nN = int(s, 2)\\n\\nres = 0\\nT = 1\\nwhile T<N:\\n    res += 1\\n    T *= 4\\n    \\nprint(res)\", \"s = int(input(), 2)\\n\\ncount = 0\\ni = 0\\nwhile True:\\n    if 4**i >= s:\\n        break\\n    count += 1\\n    i += 1\\nprint(count)\\n\", \"s = int(input(), base=2)\\n#print(s)\\nk = 0\\nans = 0\\nwhile 4 ** k < s:\\n    ans += 1\\n    k += 1\\nprint(ans)\", \"from sys import stdin\\n\\na = int(stdin.readline(), 2)\\nb = 1\\ncount = 0\\nwhile b < a:\\n    b *= 4\\n    count += 1\\nprint(count)\\n\\n\", \"s = input()\\nans = len(s) - 1\\nk = 0\\nfor i in s:\\n    k += int(i)\\nif k > 1:\\n    ans += 1\\nif ans % 2 != 0:\\n    ans += 1\\n\\nprint(ans // 2)\", \"num_s = input()\\nnum = 0\\n\\nfor digit in num_s:\\n    num *= 2\\n\\n    if digit == '1':\\n        num += 1\\n\\ncnt = 0\\ncur = 1\\n\\nwhile cur < num:\\n    cur *= 4\\n    cnt += 1\\n\\nprint(cnt)\\n\", \"k=input()\\nn=int(k, base = 2)\\n\\npw = 0\\ns = 0\\nr = 1\\nwhile r < n:\\n    s += 1\\n    r *= 4\\nprint(s)\", \"n = int(input(), 2)\\nans = 0\\nt = 1\\n\\nwhile t < n:\\n    ans += 1\\n    t *= 4\\n\\nprint(ans)\", \"x = int(input(), 2)\\nans = 0\\ncurr = 1\\nwhile curr < x:\\n\\tcurr *= 4\\n\\tans += 1\\nprint(ans)\", \"n = int(input(), 2)\\nt = 1\\nans = 0\\n\\nfor i in range(101):\\n  if t < n:\\n    ans += 1\\n  t *= 4\\n\\nprint(ans)\", \"s = int(input(), 2)\\nans = 0\\nk = 1\\nwhile k<s:\\n\\tans+=1\\n\\tk*=4\\n\\nprint(ans)\\n\", \"s = input()\\nans = (len(s) + 1) // 2\\nif len(s) % 2 == 1 and s[1:] == '0' * (len(s) - 1):\\n    ans -= 1\\nprint(ans)\\n\", \"s = input()\\nans = (len(s) - 1) // 2\\nadd = False\\nfor i in range(1, len(s)):\\n  if s[i] == '1':\\n    add = True\\nif add or len(s) % 2 == 0:\\n  ans += 1\\nprint(ans)\\n\", \"a = int(input(), 2)\\ns = 1\\nans = 0\\nwhile s < a:\\n    ans+= 1\\n    s *= 4\\nprint(ans)\", \"s = int(input())\\nans = 0\\nt = 1\\nwhile t<s:\\n    ans += 1\\n    t*=100\\nprint(ans)\", \"n = int(input(), 2)\\na = [1]\\nfor i in range(200):\\n  a.append(a[-1] * 4)\\nfor i in range(200):\\n  if a[i] >= n:\\n    print(i)\\n    break\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"100000000\\n\",\n    \"101\\n\",\n    \"10100\\n\",\n    \"1111010010000101100100001110011101111\\n\",\n    \"11110010110000101001001101010111110101101111001000100100101111011\\n\",\n    \"0\\n\",\n    \"10000\\n\",\n    \"1000010011100010111000001101000011001010011101011001101100000001011011000000101101101011101111011011\\n\",\n    \"1000\\n\",\n    \"1\\n\",\n    \"1110001001\\n\",\n    \"11010011011\\n\",\n    \"1010111110011010101111001\\n\",\n    \"1000000000000000000000000000000000000000000\\n\",\n    \"100000000000000000000000000000000000000000000000000000000\\n\",\n    \"1000000000000000000000000000000000000000000000000\\n\",\n    \"10000000000000000000000000000000000000000\\n\",\n    \"10000000000000000000000000000000000000000000000000000\\n\",\n    \"100000000000000000000000000000000000000000000\\n\",\n    \"101011000111000110001101101011100011001111001110010010000101100111100101001101111101111001010\\n\",\n    \"10001000011101100\\n\",\n    \"10001010110110010110011110001010001000001\\n\",\n    \"11010100100011101110010001110011111011110011101001011100001011100\\n\",\n    \"111100000000100111111011110000110100101011001011001101001100000010010111010010111010010001011\\n\",\n    \"1010111000101\\n\",\n    \"111100001001101011111000101000000100001101100100110011110011101011101100000000000110010011100101010\\n\",\n    \"10011011100001110011101001100010011111011010010101101000000101100110101010001100011111100110101101\\n\",\n    \"110\\n\",\n    \"1111010\\n\",\n    \"100000\\n\",\n    \"10010\\n\",\n    \"100\\n\",\n    \"11\\n\",\n    \"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\\n\",\n    \"1010\\n\",\n    \"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"100000000000000000000101111000111011111\\n\",\n    \"100000000000000000000000000000000000000000000000000000000000000000000000000000001\\n\",\n    \"11010\\n\",\n    \"1000000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n\",\n    \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n\",\n    \"1100000\\n\",\n    \"11000\\n\",\n    \"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\\n\",\n    \"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\\n\",\n    \"100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\n\",\n    \"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\\n\"\n  ],\n  \"outputs\": [\n    \"4\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"19\\n\",\n    \"33\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"50\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"13\\n\",\n    \"21\\n\",\n    \"28\\n\",\n    \"24\\n\",\n    \"20\\n\",\n    \"26\\n\",\n    \"22\\n\",\n    \"47\\n\",\n    \"9\\n\",\n    \"21\\n\",\n    \"33\\n\",\n    \"47\\n\",\n    \"7\\n\",\n    \"50\\n\",\n    \"49\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"50\\n\",\n    \"2\\n\",\n    \"49\\n\",\n    \"20\\n\",\n    \"41\\n\",\n    \"3\\n\",\n    \"35\\n\",\n    \"50\\n\",\n    \"49\\n\",\n    \"49\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"47\\n\",\n    \"47\\n\",\n    \"48\\n\",\n    \"48\\n\",\n    \"49\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1204/A",
  "starter_code": ""
}