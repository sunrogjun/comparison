{
  "task_id": "APPS/7",
  "problem_id": 7,
  "prompt": "Anton likes to listen to fairy tales, especially when Danik, Anton's best friend, tells them. Right now Danik tells Anton a fairy tale:\n\n\"Once upon a time, there lived an emperor. He was very rich and had much grain. One day he ordered to build a huge barn to put there all his grain. Best builders were building that barn for three days and three nights. But they overlooked and there remained a little hole in the barn, from which every day sparrows came through. Here flew a sparrow, took a grain and flew away...\"\n\nMore formally, the following takes place in the fairy tale. At the beginning of the first day the barn with the capacity of n grains was full. Then, every day (starting with the first day) the following happens:  m grains are brought to the barn. If m grains doesn't fit to the barn, the barn becomes full and the grains that doesn't fit are brought back (in this problem we can assume that the grains that doesn't fit to the barn are not taken into account).  Sparrows come and eat grain. In the i-th day i sparrows come, that is on the first day one sparrow come, on the second day two sparrows come and so on. Every sparrow eats one grain. If the barn is empty, a sparrow eats nothing. \n\nAnton is tired of listening how Danik describes every sparrow that eats grain from the barn. Anton doesn't know when the fairy tale ends, so he asked you to determine, by the end of which day the barn will become empty for the first time. Help Anton and write a program that will determine the number of that day!\n\n\n-----Input-----\n\nThe only line of the input contains two integers n and m (1 \u2264 n, m \u2264 10^18)\u00a0\u2014 the capacity of the barn and the number of grains that are brought every day.\n\n\n-----Output-----\n\nOutput one integer\u00a0\u2014 the number of the day when the barn will become empty for the first time. Days are numbered starting with one.\n\n\n-----Examples-----\nInput\n5 2\n\nOutput\n4\n\nInput\n8 1\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first sample the capacity of the barn is five grains and two grains are brought every day. The following happens:  At the beginning of the first day grain is brought to the barn. It's full, so nothing happens.  At the end of the first day one sparrow comes and eats one grain, so 5 - 1 = 4 grains remain.  At the beginning of the second day two grains are brought. The barn becomes full and one grain doesn't fit to it.  At the end of the second day two sparrows come. 5 - 2 = 3 grains remain.  At the beginning of the third day two grains are brought. The barn becomes full again.  At the end of the third day three sparrows come and eat grain. 5 - 3 = 2 grains remain.  At the beginning of the fourth day grain is brought again. 2 + 2 = 4 grains remain.  At the end of the fourth day four sparrows come and eat grain. 4 - 4 = 0 grains remain. The barn is empty. \n\nSo the answer is 4, because by the end of the fourth day the barn becomes empty.",
  "solutions": "[\"n, m = map(int, input().split())\\nif (m >= n): print(n)\\nelse:\\n    c = n - m\\n    l = 0\\n    r = 10 ** 18\\n    while r - l > 1:\\n        md = (r + l) // 2\\n        if (1 + md) * md // 2 < c:\\n            l = md\\n        else:\\n            r = md\\n    print(r + m)\", \"n, m = map(int, input().split())\\n\\ndef calc(n):\\n\\treturn (n + 1) * n // 2\\n\\nif n <= m:\\n\\tprint(n)\\nelse:\\n\\tans = m\\n\\tl = 0\\n\\tr = n - m\\n\\twhile l < r - 1:\\n\\t\\tmid = (l + r) // 2\\n\\t\\tif calc(mid) >= n - m:\\n\\t\\t\\tr = mid\\n\\t\\telse:\\n\\t\\t\\tl = mid\\n\\n\\tif calc(l) >= n - m:\\n\\t\\tr = l\\n\\tans += r\\n\\tprint(ans)\", \"n,m = list(map(int,input().split()))\\nif m >= n:\\n    print(n)\\nelse:\\n    ans = m\\n    pos = -1\\n    low = 0\\n    high = 10**12\\n    n -= m\\n    while low <= high:\\n        mid  = (low+high)//2\\n        # print(mid,(mid*(mid+1))//2)\\n        if (mid*(mid+1))//2 >= n:\\n            pos = mid\\n            high = mid-1\\n        else:\\n            low = mid+1\\n    print(ans+pos)\\n\", \"n, m = map(int, input().split())\\n\\nif n <= m:\\n    print(n)\\nelse:\\n    ok = 10 ** 100\\n    ng = 0\\n    while ok - ng > 1:\\n        mid = (ok + ng) // 2\\n        s = n - mid * (mid - 1) // 2 - (m + mid)\\n\\n        if s <= 0:\\n            ok = mid\\n        else:\\n            ng = mid\\n\\n    print(ok + m)\", \"import sys\\nn, m = list(map(int, input().split()))\\n\\n\\ndef check(i):\\n    se = ((m + i) * (i - m + 1)) // 2\\n    pr = m * (i -  m + 1)\\n    if (n >= (se - pr)):\\n        return True\\n    else:\\n        return False\\nif m >= n:\\n    print(n)\\n    return\\nm += 1\\nleft = m\\nright = int(5e18) + 10\\nn -= m\\nwhile (right - left > 1):\\n    mid = (left + right) // 2\\n    if (check(mid)):\\n        left = mid\\n    else:\\n        right = mid\\nprint(left)\\n\", \"import sys\\nn,m=input().split()\\nn=int(n);m=int(m)\\nans=m\\nif m>=n:\\n\\tprint(n)\\n\\treturn\\nhigh=10**20;low=1\\ndif=n-m\\n#print(\\\"dif\\\",dif)\\nwhile high-low>5:\\n\\tmid=high+low>>1\\n\\tif (1+mid)*mid>>1>=dif:\\n\\t\\thigh=mid\\n\\telse:\\n\\t\\tlow=mid\\nmid=max(0,mid-10)\\nwhile (1+mid)*mid>>1<dif:mid+=1\\n#print('mid',mid)\\nans+=mid\\nprint(ans)\", \"N, M = list(map(int, input().split()))\\n\\nif N <= M:\\n    print(N)\\nelse:\\n    low = M + 1\\n    high = 1000000000000000000\\n    while high - low > 0:\\n        mid = (low + high) // 2\\n        if N + (mid - (M + 1)) * M - ((mid - M) * (M + 1 + mid) // 2) <= 0:\\n            high = mid\\n        else:\\n            low = mid + 1\\n    print(low)\\n\", \"import sys\\n\\nn, m = list(map(int, input().split()))\\n\\nif n <= m:\\n    print(n)\\n    return\\n\\nelse:\\n    l, r = m + 1, n\\n    base = m * (m - 1) // 2\\n\\n    while l != r:\\n        mid = (l + r) // 2\\n        plus = n + base + (mid - m) * m\\n        minus = mid * (mid + 1) // 2\\n        if plus > minus:\\n            l = mid + 1\\n        else:\\n            r = mid\\n    print(l)\\n\", \"n, m = list(map(int, input().split()))\\nif m >= n:\\n    print(n)\\nelse:\\n    start = n - m + 1\\n    r = 10 ** 11\\n    l = -1\\n    while (r - l > 1):\\n        mid = (l + r) // 2\\n        summ = mid * (mid + 1) // 2\\n        if summ >= n - m:\\n            r = mid\\n        else: \\n            l = mid\\n    print(r + m)\\n\\n\", \"# -*- coding: utf-8 -*-\\n\\\"\\\"\\\"\\nCreated on Wed Mar 15 23:00:22 2017\\n\\n@author: Anan\\n\\\"\\\"\\\"\\n\\nn,m = map(int,input().split())\\n\\nif n<=m :\\n    print(n)\\nelse :\\n    \\n    ans = m\\n    L =0\\n    R = 123456789123456789123\\n    while R-L != 1 :\\n        mid = (L+R)//2\\n        if n-mid*(mid-1)//2 <= m+mid :\\n            R=mid\\n        else :\\n            L=mid\\n    print(ans + R)\", \"n,m=[int(i) for i in input().split()]\\nif m>=n:\\n    print(n)\\nelse:\\n    l,r=-1,10**18\\n    now=n-m\\n    while r-l>1:\\n        md=(l+r)//2\\n        if now+md*m-(m*2+md+1)*md//2<=0:\\n            r=md\\n        else:\\n            l=md\\n    print(r+m)\", \"n, m = map(int, input().split())\\nif n <= m:\\n    print(n)\\nelse:\\n    init = m\\n    n = n - m\\n    lo = 1\\n    hi = int(1e19)\\n    poss = 0\\n    while hi >= lo:\\n        mid = (hi + lo) // 2\\n        consumed = mid * (mid + 1) // 2\\n        if consumed >= n:\\n            poss = mid\\n            hi = mid - 1\\n        else:\\n            lo = mid + 1\\n    print (poss + init)\", \"n, s = list(map(int,input().split(' ')))\\nif n <= s:\\n    ans = n\\nelse:\\n    ans = s\\n    l = 0\\n    r = 10 ** 10\\n    n -= s\\n    while l + 1 < r:\\n        m = (l + r) // 2\\n        if m * (m+1) // 2 < n:\\n            l = m\\n        else:\\n            r = m\\n    ans += r\\nprint(ans)\\n\", \"n, m = map(int, input().split())\\nl = 0\\nr = 10 ** 18 + 1\\nd = n - m\\nwhile r - l > 1:\\n    mi = (r + l) // 2\\n    if d > mi *(mi + 1) // 2:\\n        l = mi\\n    else:\\n        r = mi\\nif n > m:\\n    print(r + m)\\nelse:\\n    print(n)\", \"n, m = map(int, input().split())\\nif m >= n:\\n    print(n)\\n    return\\n\\nres = m + 1\\nn -= m\\nleft, right = 0, int(1e19)\\n\\nwhile right - left > 1:\\n    middle = (left + right) // 2\\n    if middle * (middle + 1) // 2 < n:\\n        left = middle\\n    else:\\n        right = middle\\n\\nprint(res + left)\", \"def binary_search_first_true(predicate, from_inclusive, to_inclusive):\\n    lo = from_inclusive - 1\\n    hi = to_inclusive + 1\\n    while hi - lo > 1:\\n        mid = (lo + hi) // 2\\n        if not predicate(mid):\\n            lo = mid\\n        else:\\n            hi = mid\\n    return hi\\n\\ndef tri(n):\\n\\treturn n*(n+1)//2\\n\\ndef f(n, m, t):\\n\\treturn n-tri(t-m-1)-t\\n\\ndef solve(n, m):\\n\\tif m >= n:\\n\\t\\treturn n\\n\\tans = binary_search_first_true(lambda x: f(n, m, x) <= 0, m+1, n)\\n\\treturn ans\\n\\ndef main(sc):\\n\\tn, m = sc.next_ints(2)\\n\\tans = solve(n, m)\\n\\tprint(ans)\\n\\n\\nclass Scanner:\\n\\tdef __init__(self):\\n\\t\\tself.idx = 0\\n\\t\\tself.tokens = []\\n\\n\\tdef __next__(self):\\n\\t\\twhile self.idx == len(self.tokens) or not len(self.tokens[self.idx]):\\n\\t\\t\\tif self.idx == len(self.tokens):\\n\\t\\t\\t\\tself.idx = 0\\n\\t\\t\\t\\tself.tokens = input().split()\\n\\t\\t\\telse:\\n\\t\\t\\t\\tself.idx += 1\\n\\t\\tself.idx += 1\\n\\t\\treturn self.tokens[self.idx-1]\\n\\n\\tdef next_string(self):\\n\\t\\treturn next(self)\\n\\n\\tdef next_strings(self, n):\\n\\t\\treturn [self.next_string() for i in range(0, n)]\\n\\n\\tdef next_int(self):\\n\\t\\treturn int(next(self))\\n\\n\\tdef next_ints(self, n):\\n\\t\\treturn [self.next_int() for i in range(0, n)]\\n\\n\\nscanner = Scanner()\\nmain(scanner)\\n\", \"n, m = list(map(int, input().split()))\\nl = -1\\nr = int(1e18 + 10)\\nwhile r - l != 1:\\n    t = (r + l) // 2\\n    eaten = t\\n    if (t - 1 > m):\\n        eaten += (t - 1 - m) * (t - m) // 2\\n    if eaten >= n:\\n        r = t\\n    else:\\n        l = t\\nprint(r)\", \"def mySqrt(n) :\\n    l = 0\\n    r = n + 1\\n    while (l < r - 1) :\\n        m = (l + r) // 2\\n        if m * m > n :\\n            r = m\\n        else :\\n            l = m\\n    return l\\n\\n\\nn, m = [int(i) for i in input().split()]\\n\\nif m >= n :\\n    print(n)\\nelse :\\n    ans = m\\n    d = (-1 + mySqrt(1 + 8 * (n - m))) // 2\\n    while d * (d - 1) // 2 + d + m >= n :\\n        d -= 1\\n    while d * (d - 1) // 2 + d + m < n :\\n        d += 1\\n    print(m + d)\\n\", \"import sys\\nn, m = list(map(int, input().split()))\\nm = min(n - 1, m)\\nfday = -1\\nlday = n\\nwhile (fday + 1 < lday):\\n    mid = (fday + lday) // 2\\n    S = n - (mid * (mid + 1)) // 2 - m\\n    if (S <= 0):\\n        lday = mid\\n    else:\\n        fday = mid\\nprint(min(n, m + lday))\\n\", \"n, m = map(int, input().split())\\ntl = m\\ntr = n\\nwhile tr - tl > 1:\\n    mid = (tr + tl) // 2\\n    val = (mid - m) * (mid - m + 1) // 2\\n    bef = (mid - m) * (mid - m - 1) // 2\\n    if val >= n or n - bef <= mid:\\n        tr = mid\\n    else:\\n        tl = mid\\nprint (tr) \", \"n, m = [int(x) for x in input().split()]\\nif (m >= n):\\n    print(n)\\n    return\\nL = m\\nR = n\\nwhile (L + 1 < R):\\n    M = (L + R) // 2\\n    z = M - m\\n    if (z * (z - 1) // 2 + M >= n):\\n        R = M\\n    else:\\n        L = M\\nprint(R)\\n\", \"n, m = map(int, input().split())\\n\\nl = 0\\nr = 2 ** 64\\n\\nwhile r - l > 1:\\n\\tM = l + r >> 1\\n\\tdell = M * (M + 1) // 2 - m * (m + 1) // 2;\\n\\tplus = n + max(0, M - m - 1) * m\\n\\tif dell >= plus :\\n\\t\\tr = M\\n\\telse:\\n\\t\\tl = M\\nprint(min(r, n))\", \"\\\"\\\"\\\"Codeforces Round #404 (Div. 2)\\n\\nC. Anton and Fairy Tale\\n\\\"\\\"\\\"\\n\\n\\ndef main():\\n    n, m = list(map(int, input().split()))\\n\\n    if n <= m:\\n        print(n)\\n        return\\n\\n    def func(k):\\n        return n + (k - m - 1) * m + ((m * (m + 1)) // 2) - ((k * (k + 1)) // 2)\\n\\n    start, end = m + 1, n\\n    while start < end:\\n        middle = (start + end) // 2\\n        if func(middle) <= 0:\\n            end = middle\\n        else:\\n            start = middle + 1\\n\\n    print(end)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"\\nn, m = map(int, input().split())\\n\\nif n <= m:\\n    print(n)\\n    return\\n\\ntl = m\\ntr = n\\nwhile tr - tl > 1:\\n    tm = (tl + tr) // 2\\n    cnt = tm * (tm + 1) // 2 - m * (m + 1) // 2\\n    cur = n + (tm - m - 1) * m - cnt\\n    if cur <= 0:\\n        tr = tm\\n    else:\\n        tl = tm\\nprint(tr)\", \"\\ndef f(i, fd, m, n):\\n  return i * (i + 1) // 2 - fd * (fd - 1) // 2 >= (i - fd) * m + n\\n\\ndef solve(n, m):\\n  if m >= n:\\n    return n\\n  fd = m\\n  l = fd\\n  r = max(n, m) + 100\\n  while l < r:\\n    mid = (l + r) // 2\\n    #print(\\\"mid = \\\" + str(mid))\\n    #print(\\\"f = \\\" + str(f(mid,fd,m,n)))\\n    if f(mid, fd, m, n):\\n      r = mid\\n    else:\\n      l = mid + 1\\n     # print(\\\"now l = \\\" + str(l) + \\\" r = \\\" + str(r) + \\\" \\\" + str((l == r - 1)))\\n    \\n    if l == r - 1:\\n      #print(\\\"last l = \\\" + str(l) + \\\" fl = \\\" + str(f(l, fd,m,n)))\\n      if f(l, fd, m, n):\\n        r = l\\n      else:\\n        l = r\\n  return l\\ndef brute(n, m):\\n  i = 1\\n  cur = n\\n  while True:\\n    cur += m\\n    cur = min(cur, n)\\n    cur -= i\\n    if (cur <= 0):break\\n    i += 1\\n  return i\\nn, m = map(int, input().split());\\nprint(solve(n, m))\"]",
  "input_output": "{\n  \"inputs\": [\n    \"5 2\\n\",\n    \"8 1\\n\",\n    \"32 5\\n\",\n    \"1024 1024\\n\",\n    \"58044 52909\\n\",\n    \"996478063 658866858\\n\",\n    \"570441179141911871 511467058318039545\\n\",\n    \"1 1\\n\",\n    \"1000000000000000000 1000000000000000000\\n\",\n    \"1000000000000000000 999999999999997145\\n\",\n    \"1 1000000000000000000\\n\",\n    \"1000000000000000000 1\\n\",\n    \"999999998765257149 10\\n\",\n    \"999999998765257150 10\\n\",\n    \"999999998765257151 10\\n\",\n    \"999999998765257152 10\\n\",\n    \"999999998765257153 10\\n\",\n    \"762078938126917521 107528\\n\",\n    \"762078938126917522 107528\\n\",\n    \"762078938126917523 107528\\n\",\n    \"762078938126917524 107528\\n\",\n    \"762078938126917525 107528\\n\",\n    \"443233170968441395 1048576\\n\",\n    \"443233170968441396 1048576\\n\",\n    \"443233170968441397 1048576\\n\",\n    \"1833551251625340 1359260576251\\n\",\n    \"1835002539467264 2810548418174\\n\",\n    \"1840276176082280 8084185033189\\n\",\n    \"262133107905 256256256256\\n\",\n    \"262133108160 256256256256\\n\",\n    \"262133108161 256256256256\\n\",\n    \"262133108162 256256256256\\n\",\n    \"399823373917798976 326385530977846185\\n\",\n    \"836052329491347820 327211774155929609\\n\",\n    \"870979176282270170 16\\n\",\n    \"930580173005562081 4\\n\",\n    \"831613653237860272 154\\n\",\n    \"867842613106376421 178\\n\",\n    \"939156247712499033 1902\\n\",\n    \"975385203286047886 1326\\n\",\n    \"953065701826839766 4023\\n\",\n    \"989294657400388618 7447\\n\",\n    \"885695753008586140 42775\\n\",\n    \"921924708582134992 158903\\n\",\n    \"802352815201515314 183504\\n\",\n    \"861953807629839929 1299632\\n\",\n    \"925155772916259712 1929889\\n\",\n    \"961384732784775860 5046017\\n\",\n    \"910494856396204496 39891744\\n\",\n    \"946723811969753348 17975168\\n\",\n    \"992316381103677158 1849603453\\n\",\n    \"828545340972193305 1027686877\\n\",\n    \"946697532222325132 16179805162\\n\",\n    \"982926487795873985 19357888587\\n\",\n    \"892753091050063317 2037020896\\n\",\n    \"928982046623612170 45215104320\\n\",\n    \"845950022554437217 1553155668877\\n\",\n    \"882178982422953366 1792038785005\\n\",\n    \"847407611288100389 9111983407070\\n\",\n    \"883636566861649242 15350866523198\\n\",\n    \"988545172809612094 126043487780965\\n\",\n    \"824774128383160945 152286665864389\\n\",\n    \"889067279135046636 783632221444127\\n\",\n    \"925296230413628192 1609871104560255\\n\",\n    \"892888041747308306 15921193742955831\\n\",\n    \"929116997320857159 16747432626071959\\n\",\n    \"810365749050428005 176443295773423092\\n\",\n    \"846594708918944153 177269538951506516\\n\",\n    \"2 1\\n\",\n    \"2 2\\n\",\n    \"3 1\\n\",\n    \"3 2\\n\",\n    \"3 3\\n\",\n    \"4 1\\n\",\n    \"4 2\\n\",\n    \"256 20\\n\",\n    \"78520 8\\n\",\n    \"1367064836 777314907868410435\\n\",\n    \"658866858 996478063\\n\",\n    \"10 648271718824741275\\n\",\n    \"326385530977846185 399823373917798976\\n\",\n    \"327211774155929609 836052329491347820\\n\",\n    \"2570 566042149577952145\\n\",\n    \"512486308421983105 512486308421983105\\n\",\n    \"262144 262144\\n\",\n    \"314159265358979323 314159265358979323\\n\",\n    \"16 5\\n\",\n    \"29 16\\n\",\n    \"24 14\\n\",\n    \"28 18\\n\",\n    \"8 11\\n\",\n    \"500000000500004239 4242\\n\",\n    \"500000000500004240 4242\\n\",\n    \"500000000500004241 4242\\n\",\n    \"500000000500004242 4242\\n\",\n    \"500000000500004243 4242\\n\",\n    \"500000000500004244 4242\\n\",\n    \"500000000500004245 4242\\n\",\n    \"163162808800191208 163162808800191206\\n\",\n    \"328584130811799021 328584130811799020\\n\",\n    \"89633000579612779 89633000579612778\\n\",\n    \"924211674273037668 924211674273037666\\n\",\n    \"758790352261429854 758790352261429851\\n\",\n    \"39154349371830603 39154349371830597\\n\",\n    \"313727604417502165 313727604417502155\\n\",\n    \"1000000000000000000 999999999999999999\\n\",\n    \"1000000000000000000 999999999999999998\\n\",\n    \"1000000000000000000 999999999999999997\\n\",\n    \"1000000000000000000 999999999999999996\\n\",\n    \"1000000000000000000 999999999999999995\\n\",\n    \"1 5\\n\",\n    \"1 100\\n\",\n    \"1 3\\n\",\n    \"6 9\\n\",\n    \"1000000000000000000 2\\n\",\n    \"1 10\\n\",\n    \"5 15\\n\",\n    \"12 1\\n\",\n    \"1000000000000000000 100000000000000000\\n\",\n    \"100 200\\n\",\n    \"1 1000000000000000\\n\",\n    \"100000000000000000 1\\n\",\n    \"1000000000000000000 1000000000000000\\n\",\n    \"1 9\\n\",\n    \"1000000000000000000 4\\n\",\n    \"1000000000000 10000000000000\\n\",\n    \"1 100000\\n\",\n    \"3 7\\n\",\n    \"2 3\\n\",\n    \"1 8\\n\",\n    \"5 10\\n\",\n    \"10 11\\n\",\n    \"10 100\\n\",\n    \"5 16\\n\",\n    \"2 10\\n\",\n    \"10836 16097\\n\",\n    \"16808 75250\\n\",\n    \"900000000000169293 1\\n\",\n    \"1 10000000\\n\",\n    \"2 100\\n\",\n    \"10 20\\n\",\n    \"10 10000\\n\",\n    \"4 5\\n\",\n    \"1 2\\n\",\n    \"1000000000000000000 5\\n\",\n    \"2 5\\n\",\n    \"4 6\\n\",\n    \"999999998765257147 1\\n\",\n    \"3 10\\n\",\n    \"997270248313594436 707405570208615798\\n\",\n    \"1 100000000000\\n\",\n    \"6 1000000\\n\",\n    \"16808 282475250\\n\",\n    \"1000000007 100000000000007\\n\",\n    \"1 1000\\n\",\n    \"1000000000000000 10000000000000000\\n\",\n    \"1000000000000000000 100\\n\",\n    \"1000000000000000000 9\\n\",\n    \"900000000000169293 171\\n\",\n    \"1 999999999999\\n\",\n    \"10000 10000000000000\\n\",\n    \"1 9999999999999\\n\",\n    \"695968090125646936 429718492544794353\\n\",\n    \"2 5000\\n\",\n    \"8 100\\n\",\n    \"2 7\\n\",\n    \"999999999999999999 1\\n\",\n    \"5 8\\n\",\n    \"1000000000000000000 99999999999999999\\n\",\n    \"100000000000000000 100000000000000000\\n\",\n    \"5 6\\n\",\n    \"1000000000000000000 1000000000\\n\",\n    \"1 10000\\n\",\n    \"22 11\\n\",\n    \"10 10000000\\n\",\n    \"3 8\\n\",\n    \"10 123123\\n\",\n    \"3 5\\n\",\n    \"1000000000000000000 10\\n\",\n    \"10000000000000 45687987897897\\n\",\n    \"5 4\\n\",\n    \"5000 123456789\\n\",\n    \"7 100\\n\",\n    \"1000000000000000000 500000000000\\n\",\n    \"8 7\\n\",\n    \"1 10000000000\\n\",\n    \"1000000000000000000 15\\n\",\n    \"1 123456789\\n\",\n    \"2 1000\\n\",\n    \"5 11\\n\",\n    \"1 1000000000\\n\",\n    \"1000000000000000000 499999999999999999\\n\",\n    \"1 100000000\\n\",\n    \"619768314833382029 108339531052386197\\n\",\n    \"5 100\\n\",\n    \"2 10000\\n\",\n    \"1000000000000000000 500000000000000000\\n\",\n    \"143 3\\n\",\n    \"2 6\\n\",\n    \"100 1000000000\\n\",\n    \"2 100000000000000000\\n\",\n    \"100000000000000000 1000000000000000000\\n\",\n    \"999999999999999999 123456789\\n\",\n    \"1 99999\\n\",\n    \"1000000000000000000 9999999999\\n\",\n    \"5 100000000000000000\\n\",\n    \"6 999999\\n\",\n    \"100 10000000\\n\",\n    \"4 100\\n\",\n    \"1000000000 1000000000000000\\n\",\n    \"10 100000\\n\",\n    \"5 15555555\\n\",\n    \"5 155555\\n\",\n    \"200 9999999999\\n\",\n    \"3 200\\n\",\n    \"1000000000000000000 490000000000000000\\n\",\n    \"2 4\\n\",\n    \"5 15555\\n\",\n    \"5 7\\n\",\n    \"10040 200000\\n\",\n    \"1000000000000000000 60000000000000000\\n\",\n    \"10 1000000000000\\n\",\n    \"1 45\\n\"\n  ],\n  \"outputs\": [\n    \"4\\n\",\n    \"5\\n\",\n    \"12\\n\",\n    \"1024\\n\",\n    \"53010\\n\",\n    \"658892843\\n\",\n    \"511467058661475480\\n\",\n    \"1\\n\",\n    \"1000000000000000000\\n\",\n    \"999999999999997221\\n\",\n    \"1\\n\",\n    \"1414213563\\n\",\n    \"1414213571\\n\",\n    \"1414213571\\n\",\n    \"1414213571\\n\",\n    \"1414213572\\n\",\n    \"1414213572\\n\",\n    \"1234675418\\n\",\n    \"1234675418\\n\",\n    \"1234675418\\n\",\n    \"1234675419\\n\",\n    \"1234675419\\n\",\n    \"942571991\\n\",\n    \"942571991\\n\",\n    \"942571992\\n\",\n    \"1359321110406\\n\",\n    \"2810608952329\\n\",\n    \"8084245567345\\n\",\n    \"256256364670\\n\",\n    \"256256364670\\n\",\n    \"256256364670\\n\",\n    \"256256364671\\n\",\n    \"326385531361089823\\n\",\n    \"327211775164731428\\n\",\n    \"1319832715\\n\",\n    \"1364243511\\n\",\n    \"1289661856\\n\",\n    \"1317454248\\n\",\n    \"1370517314\\n\",\n    \"1396701153\\n\",\n    \"1380631201\\n\",\n    \"1406630820\\n\",\n    \"1330979102\\n\",\n    \"1358043072\\n\",\n    \"1266953266\\n\",\n    \"1314276256\\n\",\n    \"1362191462\\n\",\n    \"1391685648\\n\",\n    \"1389332262\\n\",\n    \"1394001194\\n\",\n    \"3258373398\\n\",\n    \"2314967219\\n\",\n    \"17555812078\\n\",\n    \"20759977363\\n\",\n    \"3373249237\\n\",\n    \"46578175853\\n\",\n    \"1554456398264\\n\",\n    \"1793367075026\\n\",\n    \"9113285250762\\n\",\n    \"15352195899906\\n\",\n    \"126044893781768\\n\",\n    \"152287950093217\\n\",\n    \"783633554323452\\n\",\n    \"1609872463741155\\n\",\n    \"15921195067317449\\n\",\n    \"16747433976901012\\n\",\n    \"176443296899409285\\n\",\n    \"177269540108507095\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"42\\n\",\n    \"404\\n\",\n    \"1367064836\\n\",\n    \"658866858\\n\",\n    \"10\\n\",\n    \"326385530977846185\\n\",\n    \"327211774155929609\\n\",\n    \"2570\\n\",\n    \"512486308421983105\\n\",\n    \"262144\\n\",\n    \"314159265358979323\\n\",\n    \"10\\n\",\n    \"21\\n\",\n    \"18\\n\",\n    \"22\\n\",\n    \"8\\n\",\n    \"1000004242\\n\",\n    \"1000004242\\n\",\n    \"1000004242\\n\",\n    \"1000004242\\n\",\n    \"1000004243\\n\",\n    \"1000004243\\n\",\n    \"1000004243\\n\",\n    \"163162808800191208\\n\",\n    \"328584130811799021\\n\",\n    \"89633000579612779\\n\",\n    \"924211674273037668\\n\",\n    \"758790352261429853\\n\",\n    \"39154349371830600\\n\",\n    \"313727604417502159\\n\",\n    \"1000000000000000000\\n\",\n    \"1000000000000000000\\n\",\n    \"999999999999999999\\n\",\n    \"999999999999999999\\n\",\n    \"999999999999999998\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"1414213564\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"100000001341640786\\n\",\n    \"100\\n\",\n    \"1\\n\",\n    \"447213596\\n\",\n    \"1000001413506279\\n\",\n    \"1\\n\",\n    \"1414213566\\n\",\n    \"1000000000000\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"10\\n\",\n    \"10\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"10836\\n\",\n    \"16808\\n\",\n    \"1341640788\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"10\\n\",\n    \"10\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"1414213567\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"1414213563\\n\",\n    \"3\\n\",\n    \"707405570970015402\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"16808\\n\",\n    \"1000000007\\n\",\n    \"1\\n\",\n    \"1000000000000000\\n\",\n    \"1414213662\\n\",\n    \"1414213571\\n\",\n    \"1341640957\\n\",\n    \"1\\n\",\n    \"10000\\n\",\n    \"1\\n\",\n    \"429718493274519777\\n\",\n    \"2\\n\",\n    \"8\\n\",\n    \"2\\n\",\n    \"1414213563\\n\",\n    \"5\\n\",\n    \"100000001341640785\\n\",\n    \"100000000000000000\\n\",\n    \"5\\n\",\n    \"2414213562\\n\",\n    \"1\\n\",\n    \"16\\n\",\n    \"10\\n\",\n    \"3\\n\",\n    \"10\\n\",\n    \"3\\n\",\n    \"1414213572\\n\",\n    \"10000000000000\\n\",\n    \"5\\n\",\n    \"5000\\n\",\n    \"7\\n\",\n    \"501414213209\\n\",\n    \"8\\n\",\n    \"1\\n\",\n    \"1414213577\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"500000000999999999\\n\",\n    \"1\\n\",\n    \"108339532063750408\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"500000001000000000\\n\",\n    \"20\\n\",\n    \"2\\n\",\n    \"100\\n\",\n    \"2\\n\",\n    \"100000000000000000\\n\",\n    \"1537670351\\n\",\n    \"1\\n\",\n    \"11414213554\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"100\\n\",\n    \"4\\n\",\n    \"1000000000\\n\",\n    \"10\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"200\\n\",\n    \"3\\n\",\n    \"490000001009950494\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"10040\\n\",\n    \"60000001371130920\\n\",\n    \"10\\n\",\n    \"1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/785/C",
  "starter_code": ""
}