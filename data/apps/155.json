{
  "task_id": "APPS/155",
  "problem_id": 155,
  "prompt": "You might have heard about the next game in Lara Croft series coming out this year. You also might have watched its trailer. Though you definitely missed the main idea about its plot, so let me lift the veil of secrecy.\n\nLara is going to explore yet another dangerous dungeon. Game designers decided to use good old 2D environment. The dungeon can be represented as a rectangle matrix of n rows and m columns. Cell (x, y) is the cell in the x-th row in the y-th column. Lara can move between the neighbouring by side cells in all four directions.\n\nMoreover, she has even chosen the path for herself to avoid all the traps. She enters the dungeon in cell (1, 1), that is top left corner of the matrix. Then she goes down all the way to cell (n, 1) \u2014 the bottom left corner. Then she starts moving in the snake fashion \u2014 all the way to the right, one cell up, then to the left to the cell in 2-nd column, one cell up. She moves until she runs out of non-visited cells. n and m given are such that she always end up in cell (1, 2).\n\nLara has already moved to a neighbouring cell k times. Can you determine her current position?\n\n\n-----Input-----\n\nThe only line contains three integers n, m and k (2 \u2264 n, m \u2264 10^9, n is always even, 0 \u2264 k < n\u00b7m). Note that k doesn't fit into 32-bit integer type!\n\n\n-----Output-----\n\nPrint the cell (the row and the column where the cell is situated) where Lara ends up after she moves k times.\n\n\n-----Examples-----\nInput\n4 3 0\n\nOutput\n1 1\n\nInput\n4 3 11\n\nOutput\n1 2\n\nInput\n4 3 7\n\nOutput\n3 2\n\n\n\n-----Note-----\n\nHere is her path on matrix 4 by 3: [Image]",
  "solutions": "[\"n, m, k = map(int, input().split())\\nans = 0, 0\\nif k < n:\\n    ans = k + 1, 1\\nelse:\\n    k -= n\\n    r = n - k // (m - 1)\\n    if r % 2:\\n        c = m - k % (m - 1)\\n    else:\\n        c = 2 + k % (m - 1)\\n    ans = r, c\\nprint(*ans)\", \"n, m, k = map(int, input().split())\\nif k < n:\\n    print(k + 1, 1)\\nelse:\\n    k -= n\\n    row = n - k // (m - 1)\\n    col = k % (m - 1)\\n    if row % 2 == 1:\\n        col = m - col\\n    else:\\n        col += 2\\n    print(row, col)\", \"def inpmap():\\n    return list(map(int, input().split()))\\nn, m, k = inpmap()\\nif k < n:\\n    print(k + 1, 1)\\nelse:\\n    k -= n\\n    a, b = divmod(k, (m - 1))\\n    print(n - a, m - b if a % 2 else b + 2)\\n\", \"n, m, k = [int(x) for x in input().split()]\\n\\nif k < n:\\n    print(k+1, 1)\\nelse:\\n    k -= n\\n    m -= 1\\n    i = k // m\\n    j = k % m\\n    \\n    print(n-i, 2+j if i % 2 == 0 else m+1 - j)\\n\", \"# python3\\n\\ndef readline(): return tuple(map(int, input().split()))\\n\\n\\ndef main():\\n    n, m, k = readline()\\n    if k < n:\\n        print(k + 1, 1)\\n    else:\\n        k -= n\\n        q, r = divmod(k, m - 1)\\n        print(n - q, m - r if q & 1 else 2 + r)\\n\\n\\nmain()\\n\", \"n, m, k = map(int, input().split())\\n\\nif k <= n - 1:\\n\\tprint(k + 1, 1)\\n\\treturn\\n\\nk -= n\\nm -= 1\\nl = k // m\\nc = k % m\\nif l % 2 == 1:\\n\\tc = m - 1 - c\\nl = n - l\\nprint(l, c + 2)\", \"n, m, k = list(map(int, input().split()))\\nif k < n:\\n    print(k+1, 1)\\nelse:\\n    k = k-(n-1)\\n    tmp = k//(2*(m-1))\\n    k = k%(2*(m-1))\\n    x, y = n-2*tmp+1, 2\\n    if k > 0:\\n        x = x-1\\n        k = k-1\\n        if k <= m-2:\\n            y = y+k\\n        else:\\n            k = k-(m-1)\\n            x = x-1\\n            y = m-k\\n    print(x, y)\\n\", \"n,m,k = list(map(int,input().split()))\\nif k < n:print(k+1,1)\\nelse:\\n    k-=n\\n    m-=1\\n    mo = k% (2*m)\\n    if mo >= m:\\n        mo = (2*m-1)-mo\\n    print(n-k//m,2+mo)\\n\", \"n, m, k = map(int, input().split())\\nif (k < n):\\n    print(k + 1, 1)\\nelse:\\n    k -= n\\n    k2 = k // (m - 1)\\n    k1 = k % (2 * m - 2)\\n    if (k1 < m - 1):\\n        print(n - k2, k1 + 2)\\n    else:\\n        print(n - k2, (2 * m - 3 - k1) + 2)\", \"n,m,k=list(map(int,input().split()))\\nif k < n:\\n    print(k+1,1)\\nelif (k-n)//(m-1)%2 == 0:\\n    print(n-(k-n)//(m-1), (k-n)%(m-1)+2)\\nelse:\\n    print(n-(k-n)//(m-1), m-(k-n)%(m-1))\\n\", \"n,m,k = list(map(int,input().split()))\\n\\nif k < n:\\n    print(1+k,1)\\nelse:\\n    k -= n\\n    \\n    a = k % (2*(m-1))\\n    b = k // (2*(m-1))\\n\\n    if a < m-1: # low\\n        print(n-2*b, 2+a)\\n    else:\\n        a -= (m-1)\\n        print(n-2*b-1,m-a)\\n\", \"n,m,k = list(map(int,input().split()))\\nif k < n:\\n    print(1+k,1)\\nelse:\\n    k -= n\\n    k2 = k // (m-1)\\n    k3 = k % (m-1)\\n    if k2 % 2 == 0:\\n        print(n-k2,k % (m-1)+2)\\n    else:\\n        print(n-k2,m - k % (m-1))\\n\", \"n,m,k=map(int,input().split())\\nif (k<n):\\n      print(k+1,\\\" \\\",1,sep=\\\"\\\")\\nelse:\\n      k-=n\\n      if (m>=2):\\n            x=k//(m-1)\\n            if x%2==0:\\n                  a=k%(m-1) +2\\n                  b=n-x\\n            else:\\n                  a=(m-k%(m-1))\\n                  b=n-x\\n            print(b,a)\\n      \\n\", \"import sys\\nn,m,k=list(map(int,input().split()))\\n\\nif(k<n):\\n    print(k+1,1)\\n    return\\nk-=n\\nx=n-(k)//(m-1)\\nif(x%2==0):\\n    y=k%(m-1)+2   \\nelse:\\n    y=m-k%(m-1)\\nprint(x,y)\\n    \\n\", \"H,W,K = list(map(int,input().split()))\\nif K < H:\\n    print(K+1,1)\\n    return\\nK -= H\\nW -= 1\\nd,m = divmod(K,(W*2))\\nif m < W:\\n    print(H-2*d, 2+m)\\nelse:\\n    m -= W\\n    print(H-1-2*d, W-m+1)\\n\", \"n, m, k = list(map(int, input().split(\\\" \\\")))\\n\\nif k < n:\\n    print(k + 1, 1)\\nelse:\\n    step = k - n\\n    #print(\\\"step:\\\", step)\\n    row = step // (m - 1) + 1\\n    col = step % (m - 1)\\n    reverse = (row % 2 + 1) % 2\\n    #print(\\\"row\\\", row, \\\"col\\\", col, \\\"left\\\", reverse)\\n    if reverse:\\n     #   print(\\\"rev\\\", col)\\n        col = (m - 1) - col - 1\\n    print(n - row + 1, 2 + col)\\n\", \"def main():\\n    n, m, k = [int(i) for i in input().split(' ')]\\n   \\n    if k < n:\\n        print(k + 1, 1)\\n    else:\\n        k -= n\\n        m -= 1\\n        h1 = k // (2 * m) * 2\\n        h2 = k % (2 * m)\\n        if h2 < m:\\n            print(n - h1, 2 + h2)\\n        else:\\n            print(n - h1 - 1, 1 + m - h2 % m)\\n\\nmain()\\n\", \"n, m, k = list(map(int, input().split()))\\nr, c = None, None\\nif k < n:\\n    r, c = k+1, 1\\nelse:\\n    k -= n\\n    a, b = k // (m-1), k % (m-1)\\n    r = n - a\\n    if a % 2 == 0:\\n        c = b + 2\\n    else:\\n        c = m - b\\nprint(r, c)\\n\", \"(n, m, k) = list(map(int, input().split()))\\n\\nif k <= n - 1:\\n    print(1 + k, 1)\\nelse:\\n    k -= n\\n    d = k // (m - 1)\\n    k %= (m - 1)\\n    if d % 2 == 0:\\n        print(n - d, k + 2)\\n    else:\\n        print(n - d, m - k)\\n\", \"n, m, k = list(map(int, input().split()))\\nif k < n:\\n    r = [k + 1, 1]\\nelse:\\n    m -= 1\\n    k -= n\\n    y, x = divmod(k, m)\\n    r = [n - y, 0]\\n    if y & 1:\\n        r[1] = m - x + 1\\n    else:\\n        r[1] = x + 2\\nprint(*r)\\n\", \"\\nn,m,k = list(map(int,input().split()))\\n\\n\\n\\ncurrent = n*m - 1\\nif k < n:\\n    print(k+1,1)\\nelse:\\n    remaining = k - n\\n    row_from_down = remaining // (m-1)\\n\\n    row = n - row_from_down\\n    # 11 10\\n    if row%2:\\n        col = remaining % (m-1)\\n        col = m - col\\n\\n    else:\\n        col = remaining % (m-1)\\n        col += 2\\n    print(row, col)\\n\\n\", \"n, m, k = map(int, input().split())\\nif k <= n - 1:\\n    print(1 + k, 1)\\nelif k <= n + m - 2:\\n    print(n, k - (n - 1) + 1)\\nelse:\\n    k -= n - 1\\n    k -= m - 1\\n    #print('k', k)\\n    step = 1 + m - 2 + 1 + m - 2\\n    dy = k // (step // 2)\\n    y = n - dy\\n    if k % (step // 2):\\n        y -= 1\\n    k %= step\\n    if k == 0: \\n        x = m\\n    else:\\n        k -= 1\\n        if k <= m - 2:\\n            x = m - k\\n        else:\\n            k -= 1 + m - 2\\n            #print('k', k)\\n            x = 1 + k + 1\\n    print(y, x)\", \"n, m, k = [int(i) for i in input().split(' ')]\\n\\nif k < n:\\n    print(k+1, 1)\\nelse:\\n    k = k - n\\n    level, remainder = divmod(k, m-1)\\n    x = n - level\\n    direction = level % 2\\n    if direction == 0:\\n        y = remainder + 2\\n    else:\\n        y = m - remainder\\n    print(x, y)\\n\", \"n,m,t3=map(int,input().split())\\nif (t3<n): \\n      print(1+t3,\\\" \\\",1,sep=\\\"\\\")\\nelse:\\n      t3-=n\\n      if (m>=2):\\n            x=t3//(m-1)\\n            if x%2==0:\\n                  a=t3%(m-1) +2\\n                  b=n-x\\n            else:\\n                  a=(m-t3%(m-1))\\n                  b=n-x\\n            print(b,a)\\n      \"]",
  "input_output": "{\n  \"inputs\": [\n    \"4 3 0\\n\",\n    \"4 3 11\\n\",\n    \"4 3 7\\n\",\n    \"1000000000 2 1999999999\\n\",\n    \"1000000000 1000000000 999999999999999999\\n\",\n    \"1000000000 1000000000 999999999\\n\",\n    \"1000000000 1000000000 2000000500\\n\",\n    \"2 2 2\\n\",\n    \"28 3 1\\n\",\n    \"2 3 3\\n\",\n    \"4 6 8\\n\",\n    \"6 6 18\\n\",\n    \"4 3 8\\n\",\n    \"4 3 4\\n\",\n    \"4 4 10\\n\",\n    \"4 5 4\\n\",\n    \"4 3 9\\n\",\n    \"4 3 6\\n\",\n    \"4 5 5\\n\",\n    \"6 4 8\\n\",\n    \"4 4 12\\n\",\n    \"10 6 15\\n\",\n    \"6666 969696 6667\\n\",\n    \"4 5 13\\n\",\n    \"84 68 4248\\n\",\n    \"6 6 9\\n\",\n    \"4 5 17\\n\",\n    \"2 3 4\\n\",\n    \"4 3 5\\n\",\n    \"2 3 2\\n\",\n    \"4 5 12\\n\",\n    \"6 6 16\\n\",\n    \"4 4 6\\n\",\n    \"10 3 18\\n\",\n    \"2 4 5\\n\",\n    \"6 9 43\\n\",\n    \"4 7 8\\n\",\n    \"500 100 800\\n\",\n    \"2 5 5\\n\",\n    \"4 6 15\\n\",\n    \"9213788 21936127 8761236\\n\",\n    \"2 5 6\\n\",\n    \"43534 432423 53443\\n\",\n    \"999999998 999999998 999999995000000005\\n\",\n    \"999999924 999999983 999999906999879972\\n\",\n    \"6 5 18\\n\",\n    \"4 4 5\\n\",\n    \"6 6 6\\n\",\n    \"99999998 8888888 77777777777\\n\",\n    \"6 5 6\\n\",\n    \"6 5 17\\n\",\n    \"6 4 12\\n\",\n    \"999995712 999993076 999988788028978212\\n\",\n    \"999994900 999993699 999988599028973300\\n\",\n    \"978642410 789244500 12348616164\\n\",\n    \"999993774 999998283 999992057010529542\\n\",\n    \"4 7 10\\n\",\n    \"6 4 9\\n\",\n    \"1000000000 789 788999999000\\n\",\n    \"978642410 789244500 1234861616400\\n\",\n    \"999999596 999999631 999999226999090676\\n\",\n    \"4 7 16\\n\",\n    \"2 2 3\\n\",\n    \"21726 5447 14771\\n\",\n    \"4 2 6\\n\",\n    \"621282132 311996010 98597740967720109\\n\",\n    \"803521870 958373820 689637244594465863\\n\",\n    \"887584278 701990442 578292377747447929\\n\",\n    \"656369902 872526042 566305269065863364\\n\",\n    \"839664176 535164910 441498526835463771\\n\",\n    \"636553724 546535019 115079316355948443\\n\",\n    \"2182 23967 52288026\\n\",\n    \"548492800 434105920 179638683192075937\\n\",\n    \"4 4 4\\n\",\n    \"6 8 15\\n\",\n    \"6 3 7\\n\",\n    \"949547590 305226065 138144146668766087\\n\",\n    \"1000000000 1000000000 3000000000\\n\",\n    \"999999998 1000000000 1000000998999999\\n\",\n    \"999381438 840037557 128928432510450944\\n\",\n    \"742860584 671970249 260211607929646490\\n\",\n    \"1000000000 1000000000 1999999998\\n\",\n    \"993142186 628701115 555947810764442157\\n\",\n    \"595261150 794915864 332353903994901365\\n\"\n  ],\n  \"outputs\": [\n    \"1 1\\n\",\n    \"1 2\\n\",\n    \"3 2\\n\",\n    \"1 2\\n\",\n    \"1 2\\n\",\n    \"1000000000 1\\n\",\n    \"999999999 999999499\\n\",\n    \"2 2\\n\",\n    \"2 1\\n\",\n    \"2 3\\n\",\n    \"4 6\\n\",\n    \"4 4\\n\",\n    \"2 2\\n\",\n    \"4 2\\n\",\n    \"2 2\\n\",\n    \"4 2\\n\",\n    \"2 3\\n\",\n    \"3 3\\n\",\n    \"4 3\\n\",\n    \"6 4\\n\",\n    \"2 4\\n\",\n    \"9 6\\n\",\n    \"6666 3\\n\",\n    \"2 3\\n\",\n    \"22 12\\n\",\n    \"6 5\\n\",\n    \"1 4\\n\",\n    \"1 3\\n\",\n    \"4 3\\n\",\n    \"2 2\\n\",\n    \"2 2\\n\",\n    \"4 2\\n\",\n    \"4 4\\n\",\n    \"6 2\\n\",\n    \"1 4\\n\",\n    \"2 7\\n\",\n    \"4 6\\n\",\n    \"497 97\\n\",\n    \"2 5\\n\",\n    \"2 3\\n\",\n    \"8761237 1\\n\",\n    \"1 5\\n\",\n    \"43534 9911\\n\",\n    \"2 999999997\\n\",\n    \"1 121321\\n\",\n    \"3 5\\n\",\n    \"4 3\\n\",\n    \"6 2\\n\",\n    \"99991260 6683175\\n\",\n    \"6 2\\n\",\n    \"4 5\\n\",\n    \"4 2\\n\",\n    \"1 711901\\n\",\n    \"1 3161801\\n\",\n    \"978642396 320550770\\n\",\n    \"1 160501\\n\",\n    \"3 7\\n\",\n    \"5 4\\n\",\n    \"2 578\\n\",\n    \"978640847 495422447\\n\",\n    \"1 1058401\\n\",\n    \"2 2\\n\",\n    \"1 2\\n\",\n    \"14772 1\\n\",\n    \"2 2\\n\",\n    \"305259691 311996002\\n\",\n    \"83930798 27\\n\",\n    \"63794746 41\\n\",\n    \"7328794 36\\n\",\n    \"14687578 15\\n\",\n    \"425992073 546535018\\n\",\n    \"1 7969\\n\",\n    \"134679777 434105920\\n\",\n    \"4 2\\n\",\n    \"5 6\\n\",\n    \"6 3\\n\",\n    \"496951426 3\\n\",\n    \"999999998 4\\n\",\n    \"998999998 3\\n\",\n    \"845902072 12\\n\",\n    \"355623786 4\\n\",\n    \"1000000000 1000000000\\n\",\n    \"108862204 25\\n\",\n    \"177161677 794915848\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/976/B",
  "starter_code": ""
}