{
  "task_id": "APPS/98",
  "problem_id": 98,
  "prompt": "Gerald bought two very rare paintings at the Sotheby's auction and he now wants to hang them on the wall. For that he bought a special board to attach it to the wall and place the paintings on the board. The board has shape of an a_1 \u00d7 b_1 rectangle, the paintings have shape of a a_2 \u00d7 b_2 and a_3 \u00d7 b_3 rectangles.\n\nSince the paintings are painted in the style of abstract art, it does not matter exactly how they will be rotated, but still, one side of both the board, and each of the paintings must be parallel to the floor. The paintings can touch each other and the edges of the board, but can not overlap or go beyond the edge of the board. Gerald asks whether it is possible to place the paintings on the board, or is the board he bought not large enough?\n\n\n-----Input-----\n\nThe first line contains two space-separated numbers a_1 and b_1 \u2014 the sides of the board. Next two lines contain numbers a_2, b_2, a_3 and b_3 \u2014 the sides of the paintings. All numbers a_{i}, b_{i} in the input are integers and fit into the range from 1 to 1000.\n\n\n-----Output-----\n\nIf the paintings can be placed on the wall, print \"YES\" (without the quotes), and if they cannot, print \"NO\" (without the quotes).\n\n\n-----Examples-----\nInput\n3 2\n1 3\n2 1\n\nOutput\nYES\n\nInput\n5 5\n3 3\n3 3\n\nOutput\nNO\n\nInput\n4 2\n2 3\n1 2\n\nOutput\nYES\n\n\n\n-----Note-----\n\nThat's how we can place the pictures in the first test:\n\n[Image]\n\nAnd that's how we can do it in the third one.\n\n[Image]",
  "solutions": "[\"a, b = [int(i) for i in input().split()]\\nc, d = [int(i) for i in input().split()]\\ne, f = [int(i) for i in input().split()]\\nif c+e <=a and max(d,f) <=b:\\n    print(\\\"YES\\\")\\nelif c+e <=b and max(d,f) <=a:\\n    print(\\\"YES\\\")\\nelif c+f <=a and max(d,e) <=b:\\n    print(\\\"YES\\\")\\nelif c+f <=b and max(d,e) <=a:\\n    print(\\\"YES\\\")\\nelif d+e <=a and max(c,f) <=b:\\n    print(\\\"YES\\\")\\nelif d+e <=b and max(c,f) <=a:\\n    print(\\\"YES\\\")\\nelif d+f <=a and max(c,e) <=b:\\n    print(\\\"YES\\\")\\nelif d+f <=b and max(c,e) <=a:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"def check(a1, b1, a2, b2, a3, b3):\\n    if a2 + a3 <= a1 and b2 <= b1 and b3 <= b1:\\n        return True\\n\\n    if b2 + b3 <= b1 and a2 <= a1 and a3 <= a1:\\n        return True\\n\\n    return False\\n\\n\\ndef __starting_point():\\n    a1, b1 = map(int, input().split())\\n    a2, b2 = map(int, input().split())\\n    a3, b3 = map(int, input().split())\\n\\n    if check(a1, b1, a2, b2, a3, b3) or check(a1, b1, b2, a2, a3, b3) or check(a1, b1, a2, b2, b3, a3) or check(a1, b1, b2, a2, b3, a3):\\n        print('YES')\\n    else:\\n        print('NO')\\n__starting_point()\", \"a1, b1 = list(map(int, input().split()))\\na2, b2 = list(map(int, input().split()))\\na3, b3 = list(map(int, input().split()))\\n\\nif a1 - a2 - a3 >= 0 and b2 <= b1 and b3 <= b1:\\n    print(\\\"YES\\\")\\nelif a1 - a2 - b3 >= 0 and b2 <= b1 and a3 <= b1:\\n    print(\\\"YES\\\")\\nelif a1 - b2 - a3 >= 0 and a2 <= b1 and b3 <= b1:\\n    print(\\\"YES\\\")\\nelif a1 - b2 - b3 >= 0 and a2 <= b1 and a3 <= b1:\\n    print(\\\"YES\\\")\\nelif b1 - a2 - a3 >= 0 and b2 <= a1 and b3 <= a1:\\n    print(\\\"YES\\\")\\nelif b1 - a2 - b3 >= 0 and b2 <= a1 and a3 <= a1:\\n    print(\\\"YES\\\")\\nelif b1 - b2 - a3 >= 0 and a2 <= a1 and b3 <= a1:\\n    print(\\\"YES\\\")\\nelif b1 - b2 - b3 >= 0 and a2 <= a1 and a3 <= a1:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"def ok( a , b , A , B ):\\n\\n    return ( a <= A and b <= B ) or ( a <= B and b <= A )\\n\\ndef __starting_point():\\n    \\n    A , B = [int(x) for x in input().split()]\\n    a1 , b1 = [int(x) for x in input().split()]\\n    a2 , b2 = [int(x) for x in input().split()]\\n\\n    if ok( a1 + a2 , max(b1,b2) , A , B ):\\n        print(\\\"YES\\\")\\n    elif ok( a1 + b2 , max(b1,a2) , A , B ):\\n        print(\\\"YES\\\")\\n    elif ok( b1 + a2 , max(a1,b2) , A , B ):\\n        print(\\\"YES\\\")\\n    elif ok( b1 + b2 , max(a1,a2) , A , B ):\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\n\\n__starting_point()\", \"#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n\\ndef test(size_x, size_y, x1, y1, x2, y2):\\n    if x1+x2 <= size_x and y1 <= size_y and y2 <= size_y:\\n        return 1\\n    return 0\\n\\nimport time\\n\\n(A, B) = (int(i) for i in input().split())\\n(a1, b1) = (int(i) for i in input().split())\\n(a2, b2) = (int(i) for i in input().split())\\n\\nstart = time.time()\\nans   = 0\\n\\nans += test(A, B, a1, b1, a2, b2)\\nans += test(A, B, a1, b1, b2, a2)\\nans += test(A, B, b1, a1, a2, b2)\\nans += test(A, B, b1, a1, b2, a2)\\n\\nans += test(B, A, a1, b1, a2, b2)\\nans += test(B, A, a1, b1, b2, a2)\\nans += test(B, A, b1, a1, a2, b2)\\nans += test(B, A, b1, a1, b2, a2)\\n\\nif ans > 0:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\\nfinish = time.time()\\n#print(finish - start)\\n\", \"r=lambda: map(int, input().split())\\n\\na1,b1=r()\\na2,b2=r()\\na3,b3=r()\\n\\nans = \\\"NO\\\"\\nfor (a1,b1) in [(a1,b1), (b1,a1)]:\\n    for (a2,b2) in [(a2,b2), (b2,a2)]:\\n        for (a3,b3) in [(a3,b3), (b3,a3)]:\\n            if a1 >= a2 + a3 and b1 >= max(b2, b3):\\n                ans = \\\"YES\\\"\\n\\nprint(ans)\", \"a = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\nc = list(map(int, input().split()))\\na.sort()\\nfor i in range(2):\\n    for j in range(2):\\n        if min(b[i] + c[j], max(b[1 - i], c[1 - j])) <= a[0] and max((b[i] + c[j],  max(b[1 - i], c[1 - j]))) <= a[1]:\\n            print(\\\"YES\\\")\\n            return\\n        #print(b[i] + c[j], max(b[1 - i], c[1 - j]))\\nprint(\\\"NO\\\")\\n            \\n\", \"a, b = (int(x) for x in input().split())\\na1, b1 = (int(x) for x in input().split())\\na2, b2 = (int(x) for x in input().split())\\n\\nif ((max(a1,a2) <= a and b1+b2 <= b) or (max(a1,a2) <= b and b1+b2 <= a) or \\n\\t(max(b1,b2) <= a and a1+a2 <= b) or (max(b1,b2) <= b and a1+a2 <= a) or \\n\\t(max(b1,a2) <= a and b2+a1 <= b) or (max(b1,a2) <= b and b2+a1 <= a) or \\n\\t(max(b2,a1) <= a and b1+a2 <= b) or (max(b2,a1) <= b and b1+a2 <= a)):\\n\\tprint(\\\"YES\\\")\\nelse:\\n\\tprint(\\\"NO\\\")\", \"def Check(a2, b2, a3, b3):\\n    if a1 >= a2 + a3 and b1 >= max(b2, b3) or \\\\\\n       a1 >= max(a2, a3) and b1 >= b2 + b3:\\n        return True\\n    else:\\n        return False\\n\\na1, b1 = list(map(int, input().split()))\\na2, b2 = list(map(int, input().split()))\\na3, b3 = list(map(int, input().split()))\\na1, b1 = min(a1, b1), max(a1, b1)\\na2, b2 = min(a2, b2), max(a2, b2)\\na3, b3 = min(a3, b3), max(a3, b3)\\n\\nr = Check(a2, b2, a3, b3) or \\\\\\n    Check(a2, b2, b3, a3) or \\\\\\n    Check(b2, a2, a3, b3) or \\\\\\n    Check(b2, a2, b3, a3)\\nif r:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"#\\u041a\\u041e\\u0414\\u0424\\u041e\\u0420\\u0421\\u042b, \\u0423\\u0420\\u0410\\na1, b1 = list(map(int, input().split()))\\na2, b2 = list(map(int, input().split()))\\na3, b3 = list(map(int, input().split()))\\nans = '' \\nif (a1 > b1):\\n    a1, b1 = b1, a1\\nif (a2 > b2):\\n    a2, b2 = b2, a2\\nif (a3 > b3):\\n    a3, b3 = b3, a3\\nans = 0\\nif (a2 + a3 <= a1) and (max(b2, b3) <= b1):\\n    ans += 1\\nif (a2 + b3 <= a1) and (max(b2, a3) <= b1):\\n    ans += 1\\nif (a3 + b2 <= a1) and (max(a2, b3) <= b1):\\n    ans += 1\\nif (b2 + b3 <= a1) and (max(a2, a3) <= b1):\\n    ans += 1\\nif (a2 + a3 <= b1) and (max(b2, b3) <= a1):\\n    ans += 1\\nif (a2 + b3 <= b1) and (max(b2, a3) <= a1):\\n    ans += 1\\nif (a3 + b2 <= b1) and (max(a2, b3) <= a1):\\n    ans += 1\\nif (b2 + b3 <= b1) and (max(a2, a3) <= a1):\\n    ans += 1    \\nif (ans == 0):\\n    print('NO')\\nelse:\\n    print('YES')\", \"# mukulchandel\\na1,b1=list(map(int,input().split()))\\na2,b2=list(map(int,input().split()))\\na3,b3=list(map(int,input().split()))\\nif a1>=(a2+a3) and b1>=max(b2,b3):\\n    print(\\\"YES\\\")\\nelif a1>=(a2+b3) and b1>=max(b2,a3):\\n    print(\\\"YES\\\")\\nelif a1>=(b2+a3) and b1>=max(a2,b3):\\n    print(\\\"YES\\\")\\nelif a1>=(b2+b3) and b1>=max(a2,a3):\\n    print(\\\"YES\\\")\\nelif b1>=(a2+a3) and a1>=max(b2,b3):\\n    print(\\\"YES\\\")\\nelif b1>=(a2+b3) and a1>=max(b2,a3):\\n    print(\\\"YES\\\")\\nelif b1>=(b2+a3) and a1>=max(a2,b3):\\n    print(\\\"YES\\\")\\nelif b1>=(b2+b3) and a1>=max(a2,a3):\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"#!/usr/bin/env python\\n# 560B_art.py - Codeforces.com 560B Art program\\n#\\n# Copyright (C) 2015 Sergey\\n\\n\\\"\\\"\\\"\\nGerald asks whether it is possible to place the paintings on the board,\\nor is the board he bought not large enough?\\nInput\\n\\nThe first line contains two space-separated numbers a1 and b1 the sides\\nof the board. Next two lines contain numbers a2 b2 a3 and b3 the sides\\nof the paintings. All numbers ai,?bi in the input are integers and fit into\\nthe range from 1 to 1000.\\n\\nOutput\\n\\nIf the paintings can be placed on the wall, print \\\"YES\\\" (without the quotes),\\nand if they cannot, print \\\"NO\\\" (without the quotes).\\n\\\"\\\"\\\"\\n\\n# Standard modules\\nimport unittest\\nimport sys\\n\\n# Additional modules\\n\\n\\n###############################################################################\\n# Art Class\\n###############################################################################\\n\\n\\nclass Art:\\n    \\\"\\\"\\\" Art representation \\\"\\\"\\\"\\n\\n    def __init__(self, args):\\n        \\\"\\\"\\\" Default constructor \\\"\\\"\\\"\\n\\n        self.numa, self.numb = args\\n\\n        self.r = self.rect(self.numa[0], self.numb[0])\\n        self.rmax = self.rect(self.numa[1], self.numb[1])\\n        self.rmin = self.rect(self.numa[2], self.numb[2])\\n        if self.rmax[0] < self.rmax[1]:\\n            self.rmax, self.rmin = self.rmin, self.rmax\\n\\n        self.remain = []\\n        if self.rmax[0] < self.r[0] and self.rmax[1] <= self.r[1]:\\n            self.remain.append((self.r[0] - self.rmax[0], self.r[1]))\\n        if self.rmax[1] < self.r[1] and self.rmax[0] <= self.r[0]:\\n            self.remain.append((self.r[0], self.r[1] - self.rmax[1]))\\n\\n        if self.rmax[1] < self.r[0] and self.rmax[0] <= self.r[1]:\\n            self.remain.append((self.r[0] - self.rmax[1], self.r[1]))\\n        if self.rmax[0] < self.r[1] and self.rmax[1] <= self.r[0]:\\n            self.remain.append((self.r[0], self.r[1] - self.rmax[0]))\\n\\n    def rect(self, a, b):\\n        if a > b:\\n            return (a, b)\\n        else:\\n            return (b, a)\\n\\n    def calculate(self):\\n        \\\"\\\"\\\" Main calcualtion function of the class \\\"\\\"\\\"\\n\\n        for rec in self.remain:\\n            if self.rmin[0] <= rec[0] and self.rmin[1] <= rec[1]:\\n                return \\\"YES\\\"\\n            if self.rmin[1] <= rec[0] and self.rmin[0] <= rec[1]:\\n                return \\\"YES\\\"\\n        return \\\"NO\\\"\\n\\n\\n###############################################################################\\n# Helping classes\\n###############################################################################\\n\\n\\n###############################################################################\\n# Art Class testing wrapper code\\n###############################################################################\\n\\n\\ndef get_inputs(test_inputs=None):\\n\\n    it = iter(test_inputs.split(\\\"\\\\n\\\")) if test_inputs else None\\n\\n    def uinput():\\n        \\\"\\\"\\\" Unit-testable input function wrapper \\\"\\\"\\\"\\n        if it:\\n            return next(it)\\n        else:\\n            return sys.stdin.readline()\\n\\n    # Getting string inputs. Place all uinput() calls here\\n    imax = 3\\n    numnums = list(map(int, \\\" \\\".join(uinput() for i in range(imax)).split()))\\n\\n    # Splitting numnums into n arrays\\n    numa = []\\n    numb = []\\n    for i in range(0, 2*imax, 2):\\n        numa.append(numnums[i])\\n        numb.append(numnums[i+1])\\n\\n    # Decoding inputs into a list\\n    return [numa, numb]\\n\\n\\ndef calculate(test_inputs=None):\\n    \\\"\\\"\\\" Base class calculate method wrapper \\\"\\\"\\\"\\n    return Art(get_inputs(test_inputs)).calculate()\\n\\n\\n###############################################################################\\n# Unit Tests\\n###############################################################################\\n\\n\\nclass unitTests(unittest.TestCase):\\n\\n    def test_Art_class__basic_functions(self):\\n        \\\"\\\"\\\" Art class basic functions testing \\\"\\\"\\\"\\n\\n        # Constructor test\\n        d = Art([[3, 1, 2], [2, 3, 1]])\\n        self.assertEqual(d.numa[0], 3)\\n\\n        self.assertEqual(d.r, (3, 2))\\n        self.assertEqual(d.rmax, (3, 1))\\n        self.assertEqual(d.rmin, (2, 1))\\n\\n        self.assertEqual(d.remain, [(3, 1)])\\n\\n    def test_sample_tests(self):\\n        \\\"\\\"\\\" Quiz sample tests. Add \\\\n to separate lines \\\"\\\"\\\"\\n\\n        # Sample test 1\\n        test = \\\"3 2\\\\n1 3\\\\n2 1\\\"\\n        self.assertEqual(calculate(test), \\\"YES\\\")\\n        self.assertEqual(list(get_inputs(test)[0]), [3, 1, 2])\\n        self.assertEqual(list(get_inputs(test)[1]), [2, 3, 1])\\n\\n        # Sample test 2\\n        test = \\\"5 5\\\\n3 3\\\\n3 3\\\"\\n        self.assertEqual(calculate(test), \\\"NO\\\")\\n\\n        # Sample test 3\\n        test = \\\"4 2\\\\n2 3\\\\n1 2\\\"\\n        self.assertEqual(calculate(test), \\\"YES\\\")\\n\\n        # My test 4\\n        test = \\\"5 5\\\\n1 5\\\\n1 5\\\"\\n        self.assertEqual(calculate(test), \\\"YES\\\")\\n\\n    def test_time_limit_test(self):\\n        \\\"\\\"\\\" Quiz time limit test \\\"\\\"\\\"\\n\\n        import random\\n\\n        # Time limit test\\n        test = \\\"1000 1000\\\"\\n        test += \\\"\\\\n900 900\\\"\\n        test += \\\"\\\\n50 50\\\"\\n\\n        import timeit\\n\\n        start = timeit.default_timer()\\n        args = get_inputs(test)\\n\\n        init = timeit.default_timer()\\n        d = Art(args)\\n\\n        calc = timeit.default_timer()\\n        d.calculate()\\n\\n        stop = timeit.default_timer()\\n        print((\\n            \\\"\\\\nTime Test: \\\" +\\n            \\\"{0:.3f}s (inp {1:.3f}s init {2:.3f}s calc {3:.3f}s)\\\".\\n            format(stop-start, init-start, calc-init, stop-calc)))\\n\\ndef __starting_point():\\n\\n    # Avoiding recursion limitaions\\n    sys.setrecursionlimit(100000)\\n\\n    if sys.argv[-1] == \\\"-ut\\\":\\n        unittest.main(argv=[\\\" \\\"])\\n\\n    # Print the result string\\n    sys.stdout.write(calculate())\\n\\n__starting_point()\", \"a1, b1 = map(int, input().split())\\na2, b2 = map(int, input().split())\\na3, b3 = map(int, input().split())\\n\\nif (max(a2, a3) <= a1 and b2 + b3 <= b1) or \\\\\\n   (max(a2, b3) <= a1 and b2 + a3 <= b1) or \\\\\\n   (max(b2, a3) <= a1 and a2 + b3 <= b1) or \\\\\\n   (max(b2, b3) <= a1 and a2 + a3 <= b1) or \\\\\\n   (a2 + a3 <= a1 and max(b2, b3) <= b1) or \\\\\\n   (a2 + b3 <= a1 and max(b2, a3) <= b1) or \\\\\\n   (b2 + a3 <= a1 and max(a2, b3) <= b1) or \\\\\\n   (b2 + b3 <= a1 and max(a2, a3) <= b1):\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\", \"r = lambda: input()\\nri = lambda: int(r())\\nrr = lambda: map(int, r().split())\\nrl = lambda: list(rr())\\n\\na1, b1 = rr()\\na2, b2 = rr()\\na3, b3 = rr()\\n\\ndef f(x, y):\\n    fa = x <= a1 and y <= b1\\n    fb = x <= b1 and y <= a1\\n    return fa or fb\\n\\nf1 = f(max(b2, b3), a2 + a3)\\nf2 = f(max(a2, a3), b2 + b3)\\nf3 = f(max(a2, b3), b2 + a3)\\nf4 = f(max(b2, a3), a2 + b3)\\n\\nans = f1 or f2 or f3 or f4\\nprint('YES' if ans else 'NO')\", \"x, y = map(int, input().split(\\\" \\\"))\\na2, b2 = map(int, input().split(\\\" \\\"))\\na3, b3 = map(int, input().split(\\\" \\\"))\\n\\nif (x>= a2+a3 and y >= b2 and y>= b3) or (x>= b2+b3 and y>= a2 and y>= a3) or (x >= a2+b3 and y >= a3 and y>= b2) or (x>=a3+b2 and y >= a2 and y >= b3) or (y>= a2+a3 and x >= b2 and x>= b3) or (y>= b2+b3 and x>= a2 and x>= a3) or (y >= a2+b3 and x >= a3 and x>= b2) or (y>=a3+b2 and x>= a2 and x >= b3):\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\", \"a1, b1 = list(map(int, input().split()))\\na2, b2 = list(map(int, input().split()))\\na3, b3 = list(map(int, input().split()))\\n\\nif a2+b3<=b1:\\n    if max(a3,b2)<=a1:\\n        print(\\\"YES\\\")\\n        return\\nif a2+b3<=a1:\\n    if max(a3,b2)<=b1:\\n        print(\\\"YES\\\")\\n        return\\n\\nif a2+a3<=b1:\\n    if max(b2,b3)<=a1:\\n        print(\\\"YES\\\")\\n        return\\nif a2+a3<=a1:\\n    if max(b2,b3)<=b1:\\n        print(\\\"YES\\\")\\n        return\\nif b2+a3<=a1:\\n    if max(a2,b3)<=b1:\\n        print(\\\"YES\\\")\\n        return\\nif b2+a3<=b1:\\n    if max(a2,b3)<=a1:\\n        print(\\\"YES\\\")\\n        return\\nif b2+b3<=a1:\\n    if max(a2,a3)<=b1:\\n        print(\\\"YES\\\")\\n        return\\nif b2+b3<=b1:\\n    if max(a2,a3)<=a1:\\n        print(\\\"YES\\\")\\n        return\\nprint(\\\"NO\\\")\\n\", \"a, b = map(int, input().split())\\na1, b1 = map(int, input().split())\\na2, b2 = map(int, input().split())\\n\\nflag = False\\n\\nx = a1 + a2\\nbigger = max([b1, b2])\\nif x <= a:\\n\\tif bigger <= b:\\n\\t\\tflag = True\\nif x <= b:\\n\\tif bigger <= a:\\n\\t\\tflag = True\\n\\nx = a1 + b2\\nbigger = max([b1, a1])\\nif x <= a:\\n\\tif bigger <= b:\\n\\t\\tflag = True\\nif x <= b:\\n\\tif bigger <= a:\\n\\t\\tflag = True\\n\\nx = b1 + b2\\nbigger = max([a1, a2])\\nif x <= a:\\n\\tif bigger <= b:\\n\\t\\tflag = True\\nif x <= b:\\n\\tif bigger <= a:\\n\\t\\tflag = True\\n\\nx = b1 + a2\\nbigger = max([a1, b2])\\nif x <= a:\\n\\tif bigger <= b:\\n\\t\\tflag = True\\nif x <= b:\\n\\tif bigger <= a:\\n\\t\\tflag = True\\n\\n\\nif flag:\\n\\tprint(\\\"YES\\\")\\nelse:\\n\\tprint(\\\"NO\\\")\", \"def main():\\n\\ta, b = list(map(int, input().split()))\\n\\tobj = [None, None]\\n\\tobj[0] = list(map(int, input().split()))\\n\\tobj[1] = list(map(int, input().split()))\\n\\n\\t#portrait\\n\\tdef vlezet(a, b, i, j, sx, sy):\\n\\t\\treturn (i + sx <= a) and (j + sy <= b)\\n\\n\\n\\tif vlezet(a, b, 0, 0, *obj[0]):\\n\\t\\tx = obj[0][0]\\n\\t\\ty = obj[0][1]\\n\\t\\tif vlezet(a, b, x, 0, *obj[1]) or vlezet(a, b, x, 0, obj[1][1], obj[1][0]):\\n\\t\\t\\tprint('YES')\\n\\t\\t\\treturn 0\\n\\t\\telif vlezet(a, b, 0, y, *obj[1]) or vlezet(a, b, 0, y, obj[1][1], obj[1][0]):\\n\\t\\t\\tprint('YES')\\n\\t\\t\\treturn 0\\n\\n\\n\\tobj[0][1], obj[0][0] = obj[0][0], obj[0][1]\\n\\tif vlezet(a, b, 0, 0, *obj[0]):\\n\\t\\tx = obj[0][0]\\n\\t\\ty = obj[0][1]\\n\\t\\tif vlezet(a, b, x, 0, *obj[1]) or vlezet(a, b, x, 0, obj[1][1], obj[1][0]):\\n\\t\\t\\tprint('YES')\\n\\t\\t\\treturn 0\\n\\t\\telif vlezet(a, b, 0, y, *obj[1]) or vlezet(a, b, 0, y, obj[1][1], obj[1][0]):\\n\\t\\t\\tprint('YES')\\n\\t\\t\\treturn 0\\n\\tprint('NO')\\n\\treturn 0\\n\\nmain()\\n\\n\", \"def fitVertical( A , B ):\\n\\tif( B[ 0 ] <= A[ 0 ] and B[ 1 ] <= A[ 1 ] ):\\n\\t\\treturn [ A[ 0 ] - B[ 0 ] , A[ 1 ] - B[ 1 ] ]\\n\\treturn [ -1 , -1 ]\\n\\ndef fitHorizontal( A , B ):\\n\\tif( B[ 1 ] <= A[ 0 ] and B[ 0 ] <= A[ 1 ] ):\\n\\t\\treturn [ A[ 0 ] - B[ 1 ] , A[ 1 ] - B[ 0 ] ]\\n\\treturn [ -1 , -1 ]\\n\\nA = input().split()\\nB = input().split()\\nC = input().split()\\n\\nA = [ int(x) for x in A ]\\nB = [ int(x) for x in B ]\\nC = [ int(x) for x in C ]\\n\\nD = fitVertical( A , B )\\n\\nif( D[ 0 ] != -1 ):\\n\\t\\n\\tif( fitVertical( [ D[ 0 ] , A[ 1 ] ] , C )[ 0 ] != -1 or fitHorizontal( [ D[ 0 ] , A[ 1 ] ] , C )[ 0 ] != -1 ):\\n\\t\\tprint( \\\"YES\\\" )\\n\\t\\treturn\\n\\n\\n\\tif( fitVertical( [ D[ 1 ] , A[ 0 ] ] , C )[ 0 ] != -1 or fitHorizontal( [ D[ 1 ] , A[ 0 ] ] , C )[ 0 ] != -1 ):\\n\\t\\tprint( \\\"YES\\\" )\\n\\t\\treturn\\n\\nD = fitHorizontal( A , B )\\n\\nif( D[ 0 ] != -1 ):\\n\\n\\tif( fitVertical( [ D[ 0 ] , A[ 1 ] ] , C )[ 0 ] != -1 or fitHorizontal( [ D[ 0 ] , A[ 1 ] ] , C )[ 0 ] != -1 ):\\n\\t\\tprint( \\\"YES\\\" )\\n\\t\\treturn\\n\\n\\tif( fitVertical( [ D[ 1 ] , A[ 0 ] ] , C )[ 0 ] != -1 or fitHorizontal( [ D[ 1 ] , A[ 0 ] ] , C )[ 0 ] != -1 ):\\n\\t\\tprint( \\\"YES\\\" )\\n\\t\\treturn\\n\\nprint( \\\"NO\\\" )\\n\\n\\n\\n\", \"def solve(cnt,f1,f2,f3,nowx,nowy,cur):\\n    if nowx<0 or nowy<0 or cur<0:\\n        return False\\n    if f1==1 and f2==1 and f3==1:\\n        return True\\n    else:\\n        if f1!=1:\\n            return solve(cnt+1,1,0,0,a,b,cur)or solve(cnt+1,1,0,0,b,a,cur)\\n        if f2!=1:\\n            return solve(cnt+1,1,1,0,nowx-a1,nowy,nowy-b1)or solve(cnt+1,1,1,0,nowx-b1,nowy,nowy-a1)\\n        if f3!=1:\\n            return solve(cnt+1,1,1,1,nowx-a2,nowy,nowy-b2)or solve(cnt+1,1,1,1,nowx-b2,nowy,nowy-a2)\\na,b=map(int,input().split())\\na1,b1=map(int,input().split())\\na2,b2=map(int,input().split())\\nif solve(0,0,0,0,0,0,0):\\n    print(\\\"YES\\\")    \\nelse:\\n    print(\\\"NO\\\")\", \"# zadacha B\\na, b = list(map(int, input().split()))\\nk1, k2 = list(map(int, input().split()))\\nk3, k4 = list(map(int, input().split()))\\n\\nif (k1 + k3 <= a and (k2 <= b and k4 <= b)) or (k1 + k3 <= b and (k2 <= a and k4 <= a)) or (\\n                    k1 + k4 <= a and (k2 <= b and k4 <= b)) or (k1 + k4 <= b and (k2 <= a and k4 <= a)) or (\\n                    k2 + k4 <= a and (k1 <= b and k3 <= b)) or (\\n                    k2 + k4 <= b and (k1 <= a and k3 <= a)) or (k1 + k4 <= a and (k2 <= b and k3 <= b)) or (\\n            k1 + k4 <= b and (k2 <= a and k3 <= a)) or (k2 + k3 <= a and (k1 <= b and k4 <= b)) or (\\n            k2 + k3 <= b and (k1 <= a and k4 <= a)):\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"a1,b1=map(int,input().split())\\na2,b2=map(int,input().split())\\na3,b3=map(int,input().split())\\nif a2+a3<=a1 and max(b2,b3)<=b1: print('YES')\\nelif b2+b3<=b1 and max(a2,a3)<=a1: print('YES')\\nelif a2+a3<=b1 and max(b2,b3)<=a1: print('YES')\\nelif b2+b3<=a1 and max(a2,a3)<=b1: print('YES')\\nelif a2+b3<=b1 and max(b2,a3)<=a1: print('YES')\\nelif a2+b3<=a1 and max(b2,a3)<=b1: print('YES')\\nelif b2+a3<=b1 and max(a2,b3)<=a1: print('YES')\\nelif b2+a3<=a1 and max(a2,b3)<=b1: print('YES')\\nelse: print('NO')\", \"n, m = [int(x) for x in input().split()]\\nn, m = sorted([n, m])\\nx1, y1 = [int(x) for x in input().split()]\\nx2, y2 = [int(x) for x in input().split()]\\nif (y1 + y2 <= m) and (max(x1, x2) <= n):\\n    print(\\\"YES\\\")\\nelif (max(y1, y2) <= m) and (x1 + x2 <= n):\\n    print(\\\"YES\\\")\\nelif (y1 + x2 <= m) and (max(x1, y2) <= n):\\n    print(\\\"YES\\\")\\nelif (max(y1, x2) <= m) and (x1 + y2 <= n):\\n    print(\\\"YES\\\")\\nelif (x1 + y2 <= m) and (max(y1, x2) <= n):\\n    print(\\\"YES\\\")\\nelif (max(x1, y2) <= m) and (y1 + x2 <= n):\\n    print(\\\"YES\\\")\\nelif (y1 + y2 <= n) and (max(x1, x2) <= m):\\n    print(\\\"YES\\\")\\nelif (max(y1, y2) <= n) and (x1 + x2 <= m):\\n    print(\\\"YES\\\")\\nelse:\\n    #print(x1+x2, y1+y2)\\n    #print(x1+y2, y1+x2)\\n    print(\\\"NO\\\")\", \"a1, b1 = map(int, input().split())\\na2, b2 = map(int, input().split())\\na3, b3 = map(int, input().split())\\n\\nif a1 < b1:\\n    a1, b1 = b1, a1\\n\\nif max([a2, b2, a3, b3]) > a1:\\n    print('NO')\\nelse:\\n    if (a2 + a3 <= a1) and (max(b2, b3) <= b1):\\n        print('YES')\\n    elif (a2 + b3 <= a1) and (max(b2, a3) <= b1):\\n        print('YES')\\n    elif (b2 + a3 <= a1) and (max(a2, b3) <= b1):\\n        print('YES')\\n    elif (b2 + b3 <= a1) and (max(a2, a3) <= b1):\\n        print('YES')\\n    elif (a2 + a3 <= b1) and (max(b2, b2) <= a1):\\n        print('YES')\\n    elif (a2 + b3 <= b1) and (max(b2, a3) <= a1):\\n        print('YES')\\n    elif (b2 + a3 <= b1) and (max(a2, b3) <= a1):\\n        print('YES')\\n    elif (b2 + b3 <= b1) and (max(a2, a3) <= a1):\\n        print('YES')\\n    else:\\n        print('NO')\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3 2\\n1 3\\n2 1\\n\",\n    \"5 5\\n3 3\\n3 3\\n\",\n    \"4 2\\n2 3\\n1 2\\n\",\n    \"3 3\\n1 1\\n1 1\\n\",\n    \"1000 1000\\n999 999\\n1 1000\\n\",\n    \"7 7\\n5 5\\n2 4\\n\",\n    \"3 3\\n2 2\\n2 2\\n\",\n    \"2 9\\n5 1\\n3 2\\n\",\n    \"9 9\\n3 8\\n5 2\\n\",\n    \"10 10\\n10 5\\n4 3\\n\",\n    \"10 6\\n10 1\\n5 7\\n\",\n    \"6 10\\n6 3\\n6 2\\n\",\n    \"7 10\\n7 5\\n1 7\\n\",\n    \"10 10\\n7 4\\n3 5\\n\",\n    \"4 10\\n1 1\\n9 3\\n\",\n    \"8 7\\n1 7\\n3 2\\n\",\n    \"5 10\\n5 2\\n3 5\\n\",\n    \"9 9\\n9 7\\n2 9\\n\",\n    \"8 10\\n3 8\\n7 4\\n\",\n    \"10 10\\n6 6\\n4 9\\n\",\n    \"8 9\\n7 6\\n2 3\\n\",\n    \"10 10\\n9 10\\n6 1\\n\",\n    \"90 100\\n52 76\\n6 47\\n\",\n    \"84 99\\n82 54\\n73 45\\n\",\n    \"100 62\\n93 3\\n100 35\\n\",\n    \"93 98\\n75 32\\n63 7\\n\",\n    \"86 100\\n2 29\\n71 69\\n\",\n    \"96 100\\n76 21\\n78 79\\n\",\n    \"99 100\\n95 68\\n85 32\\n\",\n    \"97 100\\n95 40\\n70 60\\n\",\n    \"100 100\\n6 45\\n97 54\\n\",\n    \"99 100\\n99 72\\n68 1\\n\",\n    \"88 100\\n54 82\\n86 45\\n\",\n    \"91 100\\n61 40\\n60 88\\n\",\n    \"100 100\\n36 32\\n98 68\\n\",\n    \"78 86\\n63 8\\n9 4\\n\",\n    \"72 93\\n38 5\\n67 64\\n\",\n    \"484 1000\\n465 2\\n9 535\\n\",\n    \"808 1000\\n583 676\\n527 416\\n\",\n    \"965 1000\\n606 895\\n533 394\\n\",\n    \"824 503\\n247 595\\n151 570\\n\",\n    \"970 999\\n457 305\\n542 597\\n\",\n    \"332 834\\n312 23\\n505 272\\n\",\n    \"886 724\\n830 439\\n102 594\\n\",\n    \"958 1000\\n326 461\\n836 674\\n\",\n    \"903 694\\n104 488\\n567 898\\n\",\n    \"800 1000\\n614 163\\n385 608\\n\",\n    \"926 1000\\n813 190\\n187 615\\n\",\n    \"541 1000\\n325 596\\n403 56\\n\",\n    \"881 961\\n139 471\\n323 731\\n\",\n    \"993 1000\\n201 307\\n692 758\\n\",\n    \"954 576\\n324 433\\n247 911\\n\",\n    \"7 3\\n7 8\\n1 5\\n\",\n    \"5 9\\n2 7\\n8 10\\n\",\n    \"10 4\\n4 3\\n5 10\\n\",\n    \"2 7\\n8 3\\n2 7\\n\",\n    \"1 4\\n7 2\\n3 2\\n\",\n    \"5 8\\n5 1\\n10 5\\n\",\n    \"3 5\\n3 6\\n10 7\\n\",\n    \"6 2\\n6 6\\n1 2\\n\",\n    \"10 3\\n6 6\\n4 7\\n\",\n    \"9 10\\n4 8\\n5 6\\n\",\n    \"3 8\\n3 2\\n8 7\\n\",\n    \"3 3\\n3 4\\n3 6\\n\",\n    \"6 10\\n1 8\\n3 2\\n\",\n    \"8 1\\n7 5\\n3 9\\n\",\n    \"9 7\\n5 2\\n4 1\\n\",\n    \"100 30\\n42 99\\n78 16\\n\",\n    \"64 76\\n5 13\\n54 57\\n\",\n    \"85 19\\n80 18\\n76 70\\n\",\n    \"57 74\\n99 70\\n86 29\\n\",\n    \"22 21\\n73 65\\n92 35\\n\",\n    \"90 75\\n38 2\\n100 61\\n\",\n    \"62 70\\n48 12\\n75 51\\n\",\n    \"23 17\\n34 71\\n98 34\\n\",\n    \"95 72\\n65 31\\n89 50\\n\",\n    \"68 19\\n39 35\\n95 65\\n\",\n    \"28 65\\n66 27\\n5 72\\n\",\n    \"100 16\\n41 76\\n24 15\\n\",\n    \"21 63\\n28 73\\n60 72\\n\",\n    \"85 18\\n37 84\\n35 62\\n\",\n    \"58 64\\n98 30\\n61 52\\n\",\n    \"32 891\\n573 351\\n648 892\\n\",\n    \"796 846\\n602 302\\n600 698\\n\",\n    \"665 289\\n608 360\\n275 640\\n\",\n    \"237 595\\n318 161\\n302 838\\n\",\n    \"162 742\\n465 429\\n571 29\\n\",\n    \"222 889\\n491 923\\n76 195\\n\",\n    \"794 140\\n166 622\\n378 905\\n\",\n    \"663 287\\n193 212\\n615 787\\n\",\n    \"427 433\\n621 441\\n868 558\\n\",\n    \"1000 388\\n332 49\\n735 699\\n\",\n    \"868 535\\n409 690\\n761 104\\n\",\n    \"632 786\\n710 208\\n436 290\\n\",\n    \"501 932\\n463 636\\n363 918\\n\",\n    \"73 79\\n626 483\\n924 517\\n\",\n    \"190 34\\n653 163\\n634 314\\n\",\n    \"2 4\\n1 3\\n1 4\\n\",\n    \"3 10\\n1 1\\n1 11\\n\",\n    \"5 4\\n3 3\\n2 6\\n\",\n    \"3 4\\n1 6\\n2 3\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/560/B",
  "starter_code": ""
}