{
  "task_id": "APPS/343",
  "problem_id": 343,
  "prompt": "Little Vova studies programming in an elite school. Vova and his classmates are supposed to write n progress tests, for each test they will get a mark from 1 to p. Vova is very smart and he can write every test for any mark, but he doesn't want to stand out from the crowd too much. If the sum of his marks for all tests exceeds value x, then his classmates notice how smart he is and start distracting him asking to let them copy his homework. And if the median of his marks will be lower than y points (the definition of a median is given in the notes), then his mom will decide that he gets too many bad marks and forbid him to play computer games.\n\nVova has already wrote k tests and got marks a_1, ..., a_{k}. He doesn't want to get into the first or the second situation described above and now he needs to determine which marks he needs to get for the remaining tests. Help him do that.\n\n\n-----Input-----\n\nThe first line contains 5 space-separated integers: n, k, p, x and y (1 \u2264 n \u2264 999, n is odd, 0 \u2264 k < n, 1 \u2264 p \u2264 1000, n \u2264 x \u2264 n\u00b7p, 1 \u2264 y \u2264 p). Here n is the number of tests that Vova is planned to write, k is the number of tests he has already written, p is the maximum possible mark for a test, x is the maximum total number of points so that the classmates don't yet disturb Vova, y is the minimum median point so that mom still lets him play computer games.\n\nThe second line contains k space-separated integers: a_1, ..., a_{k} (1 \u2264 a_{i} \u2264 p)\u00a0\u2014 the marks that Vova got for the tests he has already written.\n\n\n-----Output-----\n\nIf Vova cannot achieve the desired result, print \"-1\".\n\nOtherwise, print n - k space-separated integers\u00a0\u2014 the marks that Vova should get for the remaining tests. If there are multiple possible solutions, print any of them.\n\n\n-----Examples-----\nInput\n5 3 5 18 4\n3 5 4\n\nOutput\n4 1\n\nInput\n5 3 5 16 4\n5 5 5\n\nOutput\n-1\n\n\n\n-----Note-----\n\nThe median of sequence a_1,\u00a0...,\u00a0a_{n} where n is odd (in this problem n is always odd) is the element staying on (n + 1) / 2 position in the sorted list of a_{i}.\n\nIn the first sample the sum of marks equals 3 + 5 + 4 + 4 + 1 = 17, what doesn't exceed 18, that means that Vova won't be disturbed by his classmates. And the median point of the sequence {1, 3, 4, 4, 5} equals to 4, that isn't less than 4, so his mom lets him play computer games.\n\nPlease note that you do not have to maximize the sum of marks or the median mark. Any of the answers: \"4\u00a02\", \"2\u00a04\", \"5\u00a01\", \"1\u00a05\", \"4\u00a01\", \"1\u00a04\" for the first test is correct.\n\nIn the second sample Vova got three '5' marks, so even if he gets two '1' marks, the sum of marks will be 17, that is more than the required value of 16. So, the answer to this test is \"-1\".",
  "solutions": "[\"def read_data():\\n    n, k, p, x, y = map(int, input().split())\\n    As = list(map(int, input().split()))\\n    return n, k, p, x, y, As\\n\\ndef solve(n, k, p, x, y, As):\\n    '''median (As + Bs) >= y\\n    sum(As + Bs) <= x\\n    1 <= Bi <= p\\n    '''\\n    middle = n // 2\\n    As.sort(reverse=True)\\n    sumA = sum(As)\\n    minSum = sumA + 1 * (n - k)\\n    if minSum > x:\\n        return ['-1']\\n    num_a_over_y = len([1 for a in As if a >= y])\\n    if num_a_over_y > middle:\\n        return ['1'] * (n - k)\\n    min_num_y = middle + 1 - num_a_over_y\\n    if min_num_y > n - k:\\n        return ['-1']\\n    minSum2 = sumA + min_num_y * y + (n - k - min_num_y) * 1\\n    if minSum2 > x:\\n        return ['-1']\\n    return [str(y)] * min_num_y + ['1'] * (n - k - min_num_y)\\n\\ndef __starting_point():\\n    n, k, p, x, y, As = read_data()\\n    seq = solve(n, k, p, x, y, As)\\n    print(' '.join(seq))\\n__starting_point()\", \"n,k,p,x,y = map(int, input().split())\\nwritten = sorted([int(x) for x in input().split()])\\n\\n# very smart\\nif sum(written) + (n - k) > x:\\n    print(-1)\\n    return\\n\\nanswer = []\\nfor i in range(n-k):\\n    \\n    median_index = (len(written))//2\\n    if len(written)%2 == 0:\\n        try:\\n            test = written[median_index-1]\\n        except IndexError:\\n            test = 0\\n\\n        if  test < y:\\n            written.append(y)\\n            answer.append(y)\\n        else:\\n            written.append(1)\\n            answer.append(1)\\n    elif written[median_index] < y:\\n        written.append(y)\\n        answer.append(y)\\n    else:\\n        written.append(1)\\n        answer.append(1)\\n    written.sort()\\n    \\n\\nmedian_index = len(written)//2\\nif sum(written) > x or written[median_index] < y:\\n    print(-1)\\n    return\\n\\nprint(' '.join(str(x) for x in answer))\", \"from statistics import median\\n\\nN, K, P, X, Y = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\n\\nlt = 0\\n\\nfor i in range(K):\\n    if A[i] < Y:\\n        lt += 1\\n\\nans = [1] * min(N // 2 - lt, N - K)\\nwhile len(ans) < N - K:\\n    ans.append(Y)\\n\\nif sum(ans+A) <= X and median(ans+A) >= Y:\\n    print(' '.join(map(str, ans)))\\nelse:\\n    print('-1')\\n\\n\\n\", \"n, k, p, x, y=map(int, input().split())\\ns=list(map(int, input().split()))\\ns=sorted(s)\\nif p<y:\\n    print(-1)\\nelse: \\n    kol=0\\n    summ=0\\n    for i in s: #\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd \\ufffd\\ufffd\\ufffd\\ufffd\\ufffd \\ufffd \\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd \\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd \\ufffd\\ufffd\\ufffd y\\n        summ+=i\\n        if i>=y:\\n            kol+=1\\n    if k-kol>=n//2+1 or summ > x: #\\ufffd\\ufffd\\ufffd\\ufffd \\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd \\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd \\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd y\\n        print(-1)#, '!1')\\n    elif kol>=n//2+1: #\\ufffd\\ufffd\\ufffd\\ufffd \\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd \\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd \\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd y\\n        if summ+n-k <=x:\\n            print('1 '*(n-k))\\n        else:\\n            print(-1)#, '!2')\\n    else: #\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd \\ufffd \\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\ufffd \\ufffd\\ufffd\\ufffd\\ufffd\\ufffd\\n        #print('!!!', summ, y*(n//2+1-kol), n-k-n//2-1+kol, kol)\\n        if summ+y*(n//2+1-kol)+(n-k-n//2-1+kol)>x:\\n            print(-1)#, '!3')\\n        else:\\n            for i in range(n//2+1-kol):\\n                print(y, end=' ')\\n            for i in range(n-k-n//2-1+kol):\\n                print('1', end = ' ')\\n            \", \"from bisect import insort\\n\\ntot, wr, ma, mas, mis = map(int, input().split())\\ns = sorted(map(int, input().split()))\\nres = []\\nwhile wr < tot:\\n    if not s or (s[wr // 2] < mis or s[wr // 2 - 1] < mis):\\n        res.append(mis)\\n        insort(s, mis)\\n    else:\\n        res.append(1)\\n        insort(s, 1)\\n    wr += 1\\nif sum(s) <= mas and s[tot // 2] >= mis:\\n    print(' '.join(map(str, res)))\\nelse:\\n    print(-1)\", \"n, k, p, x, y = list(map(int, input().split()))\\na = list(map(int, input().split()))\\na.sort()\\n\\nmarks = []\\n\\nif (n > 1):\\n    while (len(a) < n) and (len(a) <= (n+1)//2-2 or (n+1)//2-2 < 0 or a[(n+1)//2-2] >= y):\\n        a = [1] + a\\n        marks.append(1)\\nelse:\\n    marks = [y]\\n    a = [y]\\n\\nmarks += [y] * (n - len(a))\\na += [y] * (n - len(a))\\na.sort()\\n\\nif (sum(a) > x or a[(n+1)//2-1] < y):\\n    print(-1)\\nelse:\\n    print(\\\" \\\".join(map(str, marks)))\\n\", \"\\ndef main():\\n    n, k, p, x, y = [int(x) for x in input().split()]\\n    a = [int(x) for x in input().split()]\\n\\n    median = int((n + 1) / 2)\\n    less = 0\\n    for i in range(len(a)):\\n        if a[i] < y:\\n            less += 1\\n\\n    #print(less, median)\\n    if less >= median:\\n        print(-1)\\n        return\\n        \\n    fillOne = min(median - less - 1, n - k)\\n    if sum(a) + fillOne*1 + (n - k - fillOne)*y > x:\\n        print(-1)\\n        return\\n\\n\\n    for i in range(fillOne):\\n        print(1, end=' ')\\n    for i in range(n - k - fillOne):\\n        print(y, end=' ')\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n\\n(n, k, p, x, y) = (int(i) for i in input().split())\\na = [ int(i) for i in input().split() ]\\n\\na_l = 0\\na_g = 0\\n\\nfor i in a:\\n    if i < y :\\n        a_l += 1\\n    else:\\n        a_g += 1\\n\\n\\nif a_l > (n-1)/2:\\n    print(-1)\\nelif a_g > (n-1)/2 :\\n    sum_a = sum(a) + n-k\\n    if (sum_a <= x):\\n        for i in range(n-k):\\n            print(1, end=' ')\\n        print()\\n    else :\\n        print(-1)\\nelse:\\n    sum_a = sum(a)+int((n+1)/2-a_g)*y+(n-1)/2-a_l\\n    if (sum_a <=x ):\\n        for i in range(int((n-1)/2)-a_l):\\n            print(1, end=' ')\\n        for i in range(int((n+1)/2)-a_g):\\n            print(y, end=' ')\\n        print()\\n    else:\\n        print(-1)\\n\\n\\n\\n\\n\\n\", \"def main():\\n    n, k, p, x, y = list(map(int, input().split()))\\n    L = list(map(int, input().split()))\\n    [L.append(y) for _ in range(n-k)]\\n    cnt = 0\\n    for i in range(n):\\n        if L[i] >= y:\\n            cnt += 1\\n    m = (n+1)/2\\n    for i in range(k, n):\\n        if cnt > m:\\n            L[i] = 1\\n            cnt -= 1\\n    if sum(L) > x or cnt < m:\\n        print(-1)\\n    else:\\n        print(\\\" \\\".join(map(str, L[k:])))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n,k,p,x,y=(int(x) for x in input().split())\\na = [int(x) for x in input().split()]\\n\\nif n == 1:\\n    if y > x:\\n        print(-1)\\n    else:\\n        print(y)\\n    return\\n\\na.sort()\\nmed_pos = n // 2\\ns = sum(a)\\nif (len(a) > med_pos) and (a[med_pos] < y):\\n    print(-1)\\n    return\\n\\nif s + (n-k) > x:\\n    print(-1)\\n    return\\n\\nind = -1\\nfor i in range(len(a)):\\n    if a[i] >= y:\\n        ind = i\\n        break\\n\\nif ind == -1:\\n    ind = len(a)\\n\\nleft = min(n - k, med_pos - ind)\\nright = max(0, n - k - left)\\n\\nif s + left + y * right > x:\\n    print(-1)\\n    return\\n\\nfor i in range(left):\\n    print(1, end = ' ')\\nfor i in range(right):\\n    print(y, end = ' ')\", \"n, k, p, x, y = (map(int, input().split()))\\nV = list(map(int, input().split()))\\n\\n\\n# n, k, p, x, y = 9, 7, 2, 14, 1\\n# V = list(map(int, \\\"2 2 2 1 1 2 2\\\".split()))\\n\\nsuma = sum(V)\\n\\nsmaller = 0\\nfor num in V:\\n\\tif num < y:\\n\\t\\tsmaller += 1\\n\\n\\nif smaller >= (n+1)/2:\\n\\tprint(\\\"-1\\\")\\nelse:\\n\\tno1 = (n+1)/2 - smaller - 1\\n\\tno1 = int(no1)\\n\\tnoy = n - k - no1\\n\\n\\t# print(\\\"SMALLER: {} NO1: {} NOY: {}\\\".format(smaller, no1, noy))\\n\\t\\n\\tif(no1 < 0):\\n\\t\\tnoy += no1\\n\\t\\tno1 = 0\\n\\telif(noy < 0):\\n\\t\\tno1 += noy\\n\\t\\tnoy = 0\\n\\n\\tif (suma + no1 + y*noy > x):\\n\\t\\tprint(\\\"-1\\\")\\n\\telse:\\n\\t\\tprint(\\\"1 \\\" * no1 + (\\\"{} \\\".format(y)) * noy)\", \"n, k, p, x, y = [int(token) for token in input().split()]\\nl = [int(token) for token in input().split()]\\n\\nk_lower = sum(1 for a in l if a < y)\\nk_upper = k - k_lower\\n\\nik_lower = int((n - 1) / 2) - k_lower\\nik_upper = int((n + 1) / 2) - k_upper\\n\\nif ik_lower < 0:\\n    print('-1')\\nelif ik_upper < 0:\\n    if ik_lower + ik_upper + sum(l) > x:\\n        print('-1')\\n    else:\\n        l = [1] * (ik_lower + ik_upper)\\n\\n        l_string = (str(a) for a in l)\\n        print(' '.join(l_string))\\nelse:\\n    if ik_lower + y * ik_upper + sum(l) > x:\\n        print('-1')\\n    else:\\n        il_lower = [1] * ik_lower\\n        il_upper = [y] * ik_upper\\n\\n        l = il_lower + il_upper\\n\\n        l_string = (str(a) for a in l)\\n        print(' '.join(l_string))\", \"s=input()\\nn,k,p,x,y=s.split()\\nn,k,p,x,y=int(n),int(k),int(p),int(x),int(y)\\ns=input()\\na=[]\\nfor i in s.split():\\n    a.append(int(i))\\nsum=0\\nl=0\\nr=0\\nfor i in a:\\n    sum=sum+i\\n    if i>=y: r+=1\\n    else: l+=1\\nflag=1\\nb=[]\\nif sum>=x or l>n//2 or y>p:\\n    flag=0\\nelse:\\n    left=x-sum\\n    for i in range(0,n-k):\\n        if r<n//2+1:\\n            b.append(y)\\n            r+=1\\n        else: b.append(1)\\n        left-=b[i]\\n    if left<0 or r<n//2+1:\\n        flag=0\\n\\nif flag==1:\\n    for i in range(0,n-k-1):\\n        print(b[i],end=' ')\\n    print(b[n-k-1])\\nelse :\\n    print(-1)\\n        \\n\", \"# n = list(map(int,unput().split()))\\ndef print_lst(lst):\\n    print(\\\" \\\".join(map(str,lst)))\\n\\nn,k,p,x,y = list(map(int,input().split()))\\npi = list(map(int,input().split())) \\n\\nspi = sum(pi)\\nres = []\\nc_lm = 0\\nc_hm = 0\\nfor el in pi:\\n    if el < y:\\n        c_lm += 1\\n    else:\\n        c_hm += 1\\nn_hm = n//2+1 - c_hm\\nn_lm = n//2 -  c_lm\\nfor i in range(n-k):\\n    \\n    if n_hm > 0:\\n        res += [y]\\n        pi += [y]\\n        n_hm -= 1\\n    elif n_lm > 0:\\n        res += [1]\\n        pi += [1]\\n        n_lm -= 1\\n\\npis = sorted(pi)\\nif sum(pis) > x:\\n    print(-1)\\nelif pis[len(pis)//2] < y:\\n    print(-1)\\nelse:\\n    print_lst(res)\\n\\n\", \"3.4\\n\\nv = input().split()\\nn, k, p, x, y = int(v[0]), int(v[1]), int(v[2]), int(v[3]), int(v[4])\\n\\nif p < y:\\n\\tprint('-1')\\n\\treturn\\n\\nb = list(map(int, input().split()))\\nb.sort()\\n\\ncur = sum(b)\\n\\nif cur+n-k > x:\\n\\tprint(-1)\\n\\treturn\\n\\nmedian = (n+1) // 2\\n\\nlower_bound = len(b)-1\\n\\nwhile lower_bound >= 0 and b[lower_bound] >= y:\\n\\tlower_bound -= 1\\nlower_bound += 2\\n\\nmax_count_of_ones = median - lower_bound\\nif max_count_of_ones < 0:\\n\\tprint(-1)\\n\\treturn\\n\\nif max_count_of_ones + y*(n-k-max_count_of_ones)+cur > x:\\n\\tprint(-1)\\n\\treturn\\n\\nfor i in range(min(n-k, max_count_of_ones)):\\n\\tprint('1', end=' ')\\nfor i in range(min(abs(n-k-max_count_of_ones), n-k-max_count_of_ones)):\\n\\tprint(y, end=' ')\\n\", \"v = input().split()\\nn, k, p, x, y = int(v[0]), int(v[1]), int(v[2]), int(v[3]), int(v[4])\\n\\nb = list(map(int, input().split()))\\nb.sort()\\n\\nlower_bound = len(b)-1\\n\\nwhile lower_bound >= 0 and b[lower_bound] >= y:\\n\\tlower_bound -= 1\\nlower_bound += 2\\n\\nmax_count_of_ones = (n+1) // 2 - lower_bound\\ntotal = min(n-k, max_count_of_ones) + sum(b)\\n\\nif n-k-max_count_of_ones > 0:\\n\\ttotal += y*(n-k-max_count_of_ones)\\n\\nif total > x or max_count_of_ones < 0 or p < y:\\n\\tprint(-1)\\n\\treturn\\n\\nfor i in range(min(n-k, max_count_of_ones)):\\n\\tprint('1', end=' ')\\nfor i in range(min(abs(n-k-max_count_of_ones), n-k-max_count_of_ones)):\\n\\tprint(y, end=' ')\\n\", \"n, k, p, x, y = list(map(int, input().split()))\\n\\nb = list(map(int, input().split()))\\n\\nlower_bound = 1\\nfor i in range(k):\\n\\tif b[i] < y: lower_bound += 1\\n\\nans = [1]*min((n+1) // 2 - lower_bound, n-k)\\n\\nwhile len(ans) < n-k:\\n\\tans.append(y)\\n\\nif sum(ans+b) <= x and (n+1) // 2 - lower_bound >= 0 and p >= y:\\n\\tprint(' '.join(map(str, ans)))\\nelse:\\n\\tprint('-1')\\n\", \"n, k, p, x, y = [int(k) for k in input().split()]\\nscores = [int(k) for k in input().split()] #k numbers here\\ns = sum(scores)\\nnumber_needed = (n-1)/2\\nB = x - s\\ndone = False\\n\\nwhile not done:\\n    num_above = 0\\n    num_below = 0\\n    for i in scores:\\n        if i >= y:\\n            num_above +=1\\n        else:\\n            num_below += 1\\n    num_needed_above = int(number_needed + 1 - num_above)\\n    num_needed_below = int(number_needed - num_below)\\n    if num_needed_below < 0:\\n        print(-1)\\n        break\\n    if num_needed_above  < 0 :\\n        num_needed_above = 0\\n        num_needed_below = n - k\\n    #print(num_needed_above, num_needed_below)\\n    rem_sum = y*num_needed_above + 1*num_needed_below\\n    if rem_sum <= B:\\n        for i in range(num_needed_below):\\n            print(1, end = \\\" \\\")\\n        for i in range(num_needed_above):\\n            print(y, end = \\\" \\\")\\n        #print(y, num_needed_above,num_needed_below, rem_sum)\\n        done = True\\n    else:\\n        y = y+1\\n        if y > p:\\n            print(-1)\\n            break\\n    #print(num_needed_above,num_needed_below, rem_sum)\", \"n,k,p,x,y = map(int, input().split())\\nA = list(map(int, input().split()))\\ncnt = n//2+1\\nfor i in A :\\n    if i >= y :\\n        cnt -= 1\\ncnt = max(cnt, 0)\\nif n-k < cnt :\\n    print(-1)\\nelse :\\n    B = [y]*cnt + [1]*(n-k-cnt)\\n    if sum(A) + sum(B) > x :\\n        print(-1)\\n    else :\\n        for i in B :\\n            print(i, end = ' ')\\n\\n\\n\"]",
  "input_output": "{\"inputs\": [\"5 3 5 18 4\\n3 5 4\\n\", \"5 3 5 16 4\\n5 5 5\\n\", \"5 3 5 17 4\\n5 5 5\\n\", \"5 3 5 12 1\\n5 5 1\\n\", \"5 3 5 13 1\\n5 5 1\\n\", \"7 4 5 26 5\\n5 2 4 5\\n\", \"7 4 5 27 5\\n5 2 4 5\\n\", \"1 0 1000 999 1000\\n\\n\", \"1 0 1000 1000 1000\\n\\n\", \"1 0 1000 1000 999\\n\\n\", \"5 3 5 25 4\\n3 3 3\\n\", \"7 4 5 25 5\\n5 5 4 5\\n\", \"7 4 5 26 5\\n5 5 4 5\\n\", \"7 4 5 26 5\\n5 5 4 5\\n\", \"5 3 5 17 4\\n3 3 4\\n\", \"5 3 5 18 4\\n3 3 4\\n\", \"5 3 5 5 1\\n1 1 2\\n\", \"5 3 5 6 1\\n1 1 2\\n\", \"3 0 2 3 1\\n\\n\", \"3 0 2 4 2\\n\\n\", \"3 0 2 5 2\\n\\n\", \"9 7 3 16 2\\n1 3 1 3 1 3 1\\n\", \"9 7 3 17 2\\n1 3 1 3 1 3 1\\n\", \"9 7 3 18 2\\n1 3 1 3 1 3 1\\n\", \"9 7 3 18 3\\n1 3 1 3 1 3 1\\n\", \"9 7 3 19 3\\n1 3 1 3 1 3 1\\n\", \"9 7 3 20 3\\n1 3 1 3 1 3 1\\n\", \"9 6 3 27 2\\n1 1 1 2 1 1\\n\", \"9 6 3 13 2\\n1 1 1 2 1 2\\n\", \"9 6 3 14 2\\n1 1 1 2 1 2\\n\", \"5 0 5 13 4\\n\\n\", \"5 0 5 14 4\\n\\n\", \"5 0 5 5 1\\n\\n\", \"5 0 5 7 2\\n\\n\", \"5 0 5 8 2\\n\\n\", \"9 7 2 18 2\\n1 1 1 2 2 1 1\\n\", \"9 7 2 13 1\\n2 2 2 1 1 2 2\\n\", \"9 7 2 14 1\\n2 2 2 1 1 2 2\\n\", \"993 0 3 993 2\\n\\n\", \"997 100 3 1102 2\\n1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 1 1 1 1 1 1 3\\n\", \"11 8 10 110 5\\n9 9 9 9 9 9 9 9\\n\", \"9 8 10 90 2\\n1 1 1 1 1 1 1 1\\n\", \"3 2 10 30 2\\n1 1\\n\", \"3 2 10 30 1\\n1 1\\n\", \"5 4 100 14 4\\n4 4 4 4\\n\", \"5 4 2 8 2\\n2 2 2 2\\n\", \"5 4 2 7 2\\n1 1 1 2\\n\", \"11 10 1000 101 5\\n10 10 10 10 10 10 10 10 10 10\\n\", \"7 5 100 100 5\\n7 1 1 1 1\\n\", \"5 4 5 25 2\\n1 1 1 1\\n\", \"9 8 10 89 5\\n8 8 8 8 8 8 8 8\\n\", \"5 3 5 18 4\\n1 1 1\\n\", \"11 10 1000 100 5\\n10 10 10 10 10 10 10 10 10 10\\n\", \"9 7 10 30 2\\n3 3 3 3 3 3 3\\n\", \"5 4 2 10 2\\n2 2 2 2\\n\", \"7 6 1000 31 5\\n5 5 5 5 5 5\\n\", \"9 8 100 100 2\\n1 1 1 1 1 1 1 1\\n\"], \"outputs\": [\"4 1\\n\", \"-1\\n\", \"1 1\\n\", \"-1\\n\", \"1 1\\n\", \"-1\\n\", \"5 5 1\\n\", \"-1\\n\", \"1000\\n\", \"999\\n\", \"-1\\n\", \"-1\\n\", \"5 1 1\\n\", \"5 1 1\\n\", \"-1\\n\", \"4 4\\n\", \"-1\\n\", \"1 1\\n\", \"1 1 1\\n\", \"-1\\n\", \"2 2 1\\n\", \"-1\\n\", \"2 2\\n\", \"2 2\\n\", \"-1\\n\", \"3 3\\n\", \"3 3\\n\", \"-1\\n\", \"-1\\n\", \"2 2 2\\n\", \"-1\\n\", \"4 4 4 1 1\\n\", \"1 1 1 1 1\\n\", \"-1\\n\", \"2 2 2 1 1\\n\", \"-1\\n\", \"-1\\n\", \"1 1\\n\", \"-1\\n\", \"-1\\n\", \"1 1 1\\n\", \"-1\\n\", \"-1\\n\", \"1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"1\\n\", \"-1\\n\", \"-1\\n\", \"1\\n\", \"-1\\n\", \"-1\\n\", \"1 1\\n\", \"1\\n\", \"1\\n\", \"-1\\n\"]}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/540/B",
  "starter_code": ""
}