{
  "task_id": "APPS/400",
  "problem_id": 400,
  "prompt": "Petya loves computer games. Finally a game that he's been waiting for so long came out!\n\nThe main character of this game has n different skills, each of which is characterized by an integer a_{i} from 0 to 100. The higher the number a_{i} is, the higher is the i-th skill of the character. The total rating of the character is calculated as the sum of the values \u200b\u200bof $\\lfloor \\frac{a_{i}}{10} \\rfloor$ for all i from 1 to n. The expression \u230a x\u230b denotes the result of rounding the number x down to the nearest integer.\n\nAt the beginning of the game Petya got k improvement units as a bonus that he can use to increase the skills of his character and his total rating. One improvement unit can increase any skill of Petya's character by exactly one. For example, if a_4 = 46, after using one imporvement unit to this skill, it becomes equal to 47. A hero's skill cannot rise higher more than 100. Thus, it is permissible that some of the units will remain unused.\n\nYour task is to determine the optimal way of using the improvement units so as to maximize the overall rating of the character. It is not necessary to use all the improvement units.\n\n\n-----Input-----\n\nThe first line of the input contains two positive integers n and k (1 \u2264 n \u2264 10^5, 0 \u2264 k \u2264 10^7) \u2014 the number of skills of the character and the number of units of improvements at Petya's disposal.\n\nThe second line of the input contains a sequence of n integers a_{i} (0 \u2264 a_{i} \u2264 100), where a_{i} characterizes the level of the i-th skill of the character.\n\n\n-----Output-----\n\nThe first line of the output should contain a single non-negative integer \u2014 the maximum total rating of the character that Petya can get using k or less improvement units.\n\n\n-----Examples-----\nInput\n2 4\n7 9\n\nOutput\n2\n\nInput\n3 8\n17 15 19\n\nOutput\n5\n\nInput\n2 2\n99 100\n\nOutput\n20\n\n\n\n-----Note-----\n\nIn the first test case the optimal strategy is as follows. Petya has to improve the first skill to 10 by spending 3 improvement units, and the second skill to 10, by spending one improvement unit. Thus, Petya spends all his improvement units and the total rating of the character becomes equal to  lfloor frac{100}{10} rfloor +  lfloor frac{100}{10} rfloor = 10 + 10 =  20.\n\nIn the second test the optimal strategy for Petya is to improve the first skill to 20 (by spending 3 improvement units) and to improve the third skill to 20 (in this case by spending 1 improvement units). Thus, Petya is left with 4 improvement units and he will be able to increase the second skill to 19 (which does not change the overall rating, so Petya does not necessarily have to do it). Therefore, the highest possible total rating in this example is $\\lfloor \\frac{20}{10} \\rfloor + \\lfloor \\frac{19}{10} \\rfloor + \\lfloor \\frac{20}{10} \\rfloor = 2 + 1 + 2 = 5$.\n\nIn the third test case the optimal strategy for Petya is to increase the first skill to 100 by spending 1 improvement unit. Thereafter, both skills of the character will be equal to 100, so Petya will not be able to spend the remaining improvement unit. So the answer is equal to $\\lfloor \\frac{100}{10} \\rfloor + \\lfloor \\frac{100}{10} \\rfloor = 10 + 10 = 20$.",
  "solutions": "[\"import sys\\n\\ndef solve():\\n    n,k, = rv()\\n    a, = rl(1)\\n    res = 0\\n    count = [0] * 10\\n    for i in range(n):\\n        if a[i] < 100:\\n            count[10 - (a[i] % 10) - 1] += 1\\n        res += a[i] // 10\\n    for i in range(10):\\n        while count[i] > 0 and k >= i + 1:\\n            res += 1\\n            count[i] -= 1\\n            k -= i + 1\\n    already = res * 10\\n    possible = n * 100\\n    diff = possible - already\\n    if diff > 0:\\n        actual = min(diff, k)\\n        res += actual // 10\\n    print(res)\\n\\n\\n\\n\\n\\n\\ndef prt(l): return print(' '.join(map(str, l)))\\ndef rs(): return map(str, input().split())\\ndef rv(): return map(int, input().split())\\ndef rl(n): return [list(map(int, input().split())) for _ in range(n)]  \\nif sys.hexversion == 50594544 : sys.stdin = open(\\\"test.txt\\\")\\nsolve()\", \"import sys\\n\\n\\n#sys.stdin = open('input.txt')\\n#sys.stdout = open('output.txt', 'w')\\n\\nn, k = [int(i) for i in input().split()]\\nskill = [[int(i) % 10, int(i)] for i in input().split()]\\n\\nskill.sort(reverse = True)\\nans = 0\\nfor i in range(n):\\n\\tans += skill[i][1] // 10\\n#print(skill)\\n#print(k)\\nfor i in range(n):\\n\\tif skill[i][1] == 100:\\n\\t\\tcontinue\\n\\ttoup = 10 - skill[i][0]\\n\\tif k >= toup:\\n\\t\\tk -= toup\\n\\t\\tans += 1\\n\\t\\tskill[i][1] += toup\\n\\n#print(skill)\\t\\t\\n\\nmaxadd = 0\\nfor i in range(n):\\n\\tmaxadd += (100 - skill[i][1]) // 10\\n#print(maxadd)\\nans += min(k // 10, maxadd)\\nprint(ans)\\n\", \"n, k = list(map(int, str.split(input())))\\na = sorted(map(int, str.split(input())), key=lambda x: x % 10, reverse=True)\\nrating = 0\\nfor i in range(n):\\n\\n    delta = 10 - (a[i] % 10)\\n    if k >= delta and a[i] < 100:\\n\\n        a[i] += delta\\n        k -= delta\\n\\n    rating += a[i] // 10\\n\\nfor i in range(n):\\n\\n    if k < 10:\\n\\n        break\\n\\n    while a[i] < 100 and k >= 10:\\n\\n        a[i] += 10\\n        k -= 10\\n        rating += 1\\n\\nprint(rating)\\n\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nif sum(a) + k >= n * 100:\\n    print(n * 10)\\n    return\\nadds = []\\nans = 0\\nfor i in range(n):\\n    ans += a[i] // 10\\n    if a[i] != 100:\\n        adds.append(10 - (a[i] % 10))\\nadds.sort()\\nfor i in range(len(adds)):\\n    if k <= 0:\\n        break\\n    else:\\n        k -= adds[i]\\n        ans += 1\\nans += k // 10\\nprint(ans)\\n\", \"n,k=list(map(int,input().split()))\\nki=[0]*11\\nsu=0\\nfor x in input().split():\\n    t=int(x)\\n    ki[10-t%10]+=1\\n    su+=t//10\\nfor i in range(1,10):\\n    t=min(k//i,ki[i])\\n    su+=t\\n    k-=t*i\\nt=k//10\\nsu+=min(t,n*10-su)\\nprint(su)\\n\", \"n, k = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\nA.sort(reverse=True, key=lambda x: x % 10)\\n\\nfor i, a in enumerate(A):\\n    if k <= 0 or a % 10 == 0:\\n        break\\n    new = min(k, 10 - a % 10, 100 - a)\\n    A[i] += new\\n    k -= new\\n\\nif k:\\n    for i, a in enumerate(A):\\n        if k <= 0:\\n            break\\n        new = min(100-a, k)\\n        A[i] += new\\n        k -= new\\n\\nans = sum(a//10 for a in A)\\nprint(ans)\\n\", \"n, k = [int(i) for i in input().split()]\\nskills = [int(i) for i in input().split()]\\ndef fornextlvl(x):\\n    return 10*(1+((x-1)//10))-x\\nleft = sorted([(fornextlvl(skills[i]), i) for i in range(n)])\\nleft.reverse()\\n\\nwhile k > 0 and len(left):\\n    w = left.pop()\\n    if w[0] > k: break\\n    k -= w[0]\\n    skills[w[1]] += w[0]\\n# Every skill must be a multiple of 10 by now \\n\\nfor i in range(n):\\n    t = min(k, (100-skills[i]))\\n    skills[i] += t\\n    k -= t\\n    if k == 0: break\\n\\nprint(sum([i//10 for i in skills]))\", \"n, k = list(map(int, input().split(' ')[:2]))\\na = list(map(int, input().split(' ')[:n]))\\nb = [0 for i in range(101)]\\n\\nrating = 0\\n\\nfor i in a:\\n    b[i]+=1\\n    rating += i // 10\\n\\nfor last_dig in range(9, 0, -1):\\n    for first_dig in range(10):\\n        v = first_dig * 10 + last_dig\\n        need_for_one = 10 - last_dig\\n        can_use = min(b[v], k // need_for_one)\\n        k -= can_use * need_for_one\\n        b[v] -= can_use\\n        b[(first_dig + 1) * 10] += can_use\\n        rating += can_use\\n\\nz = k // 10\\n\\nfor first_dig in range(10):\\n    v = first_dig * 10\\n    can_use = min(z, b[v])\\n    b[first_dig * 10] -= can_use\\n    b[(first_dig + 1)* 10] += can_use\\n    z -= can_use\\n    rating += can_use\\n\\nprint(rating)\\n\", \"#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n\\nimport time\\n\\n\\n(n, k) = (int(i) for i in input().split())\\nA      = [int(i) for i in input().split()]\\n\\nstart = time.time()\\nA     = sorted(A, key = lambda x: -divmod(x, 10)[1])\\nB     = [divmod(i, 10)[1] for i in A]\\n\\ni = 0\\n\\nwhile(k > 0 and i < len(A)):\\n    if B[i] == 0:\\n        break\\n\\n    if k+B[i]-10 > 0:\\n        A[i] += 10 - B[i]\\n        k    -= 10 - B[i]\\n    else:\\n        A[i] += k\\n        k = 0\\n    i += 1\\n\\nif k > 0:\\n    for i in range(len(A)):\\n        if k > 100 - A[i]:\\n            k    -= 100 - A[i]\\n            A[i]  = 100\\n        else:\\n            A[i] += k\\n            k = 0\\n            break\\n\\nans = sum([divmod(i, 10)[0] for i in A])\\nprint(ans)\\nfinish = time.time()\\n#print(finish - start)\\n\", \"__author__ = 'User'\\nn, k = list(map(int, input().split()))\\narr = list(map(int, input().split()))\\nmx = [0] * n\\nscore = 0\\nfor i in range(n):\\n    if arr[i] != 100:\\n        mx[i] = (10 - arr[i] % 10, i)\\n    else:\\n        mx[i] = (-1, i)\\n    score += arr[i] // 10\\nmx.sort()\\ni = 0\\n#print(mx, k)\\n#print(score)\\nwhile i < n and k >= mx[i][0]:\\n    if mx[i][0] != -1:\\n        k -= mx[i][0]\\n        arr[mx[i][1]] += mx[i][0]\\n        score += 1\\n    i += 1\\n#print(arr, k)\\n#print(score)\\nif i == n:\\n    i = 0\\n    k -= k % 10\\n    while k >= 10 and i < n:\\n        if arr[i] != 100:\\n            d = 100 - arr[i]\\n            if k >= d:\\n                k -= d\\n                #arr[i] += d\\n                #print(\\\"d\\\", d)\\n                score += d // 10\\n            else:\\n                #arr[i] += k\\n                score += k // 10\\n                k = 0\\n        i += 1\\nprint(score)\\n#print(arr)\\n\\n\\n\\n\\n\\n\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n\\narr = list()\\nfor i in range(n):\\n    arr.append(((10 - a[i] + (a[i] // 10 * 10)) % 10, a[i]))\\narr.sort()\\n\\nans = 0\\nfor i in range(n):\\n    if arr[i][1] >= 100 or k - arr[i][0] < 0:\\n        ans += arr[i][1] // 10\\n        continue\\n    k -= arr[i][0]\\n    ans += (arr[i][1] + arr[i][0]) // 10\\n\\nt = 10 * n - ans\\nans += min(k // 10, t)\\nprint(ans)\", \"n, k = [int(x) for x in input().split()]\\nl = [int(x) for x in input().split()]\\nassert len(l) == n\\nassert all(0 <= x <= 100 for x in l)\\nf = [10-l[i]%10 for i in range(n) if l[i]%10]\\nf.sort()\\ncur = sum(x // 10 for x in l)\\nfor x in f:\\n    if k >= x:\\n        cur += 1\\n        k -= x\\nprint(min(cur + k // 10, 10 * n))\\n#print(cur + k // 10)\\n\", \"from sys import stdin\\ninput = stdin.readline\\nn, k = list(map(int, input().split()))\\nl = list(map(int, input().split()))\\nskills = 0\\nremain = 0\\nfor i in range(n):\\n    skills += l[i] // 10\\n    a = round(l[i], -1)\\n    if a < l[i]:\\n        a += 10\\n    if a < 100:\\n        remain += (100-a)//10\\n    if l[i] >= 100:\\n        l[i] = 0\\n        continue\\n    b = a - l[i]\\n    l[i] = b\\nspent = 0\\nl.sort()\\n\\nfor i in range(len(l)):\\n    if spent + l[i] <= k and l[i] != 0:\\n        skills += 1\\n        spent += l[i]\\n\\n\\nskills += min(remain, (k - spent) // 10)\\nprint(skills)\\n\", \"n, k = list(map(int, input().split()))\\nsum = 0\\narr = list(map(int, input().split()))\\n\\nfor i in range (0, n):\\n    sum = sum + arr[i] // 10\\n    temp = arr[i] // 10\\n    arr[i] =  temp * 10 + 10 - arr[i]\\n    \\narr.sort()\\n\\nfor i in range (0, n):\\n    if k >= arr[i]:\\n        k = k - arr[i]\\n        sum = sum + 1\\n    else:\\n        break\\n\\nsum = sum + k // 10\\nif sum > 10*n:\\n    sum = 10 *n\\nprint(sum)\\n            \\n\", \"def main():\\n    mode=\\\"filee\\\"\\n    if mode==\\\"file\\\":f=open(\\\"test.txt\\\",\\\"r\\\")\\n    #f.readline()\\n    #input()\\n    get = lambda :[int(x) for x in (f.readline() if mode==\\\"file\\\" else input()).split()]\\n    [n,k]=get()\\n    a=get()\\n    b=[]\\n    s=0\\n    for i in a:\\n        if i==100:\\n            s+=10\\n            continue\\n        b.append([i%10,i])\\n    b.sort()\\n    b.reverse()\\n    if len(b)>0 and k>0:\\n        for i in b:\\n            if k>=10-i[0]:\\n                hold=min(10-i[0],k)\\n                k-=hold\\n                i[1]+=hold\\n                i[0]+=hold\\n            else:\\n                k=0\\n                break\\n    if k>0 and len(b)>0:\\n        k-=(k%10)\\n        for i in b:\\n            if i[1]==100:\\n                continue\\n            if k==0:\\n                break\\n            hold=min(100-i[1],k)\\n            k-=hold\\n            i[1]+=hold\\n    for i in b:\\n        s+=i[1]//10\\n    print(s)\\n    if mode==\\\"file\\\":f.close()\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n, k = [int(x) for x in input().split()]\\na = [int(x) for x in input().split()]\\na.sort(key=lambda x: (x % 10), reverse=True)\\ni = 0\\nwhile (i < n and k > 0 and a[i] % 10 > 0):\\n    t = max(0, k - 10 + a[i] % 10)\\n    a[i] = a[i] // 10 * 10 + min(10, a[i] % 10 + k)\\n    k = t\\n    i += 1\\ni = 0\\nwhile (i < n and k > 0):\\n    t = 100 - a[i]\\n    a[i] += min(k, t)\\n    k = max(0, k - t)\\n    i += 1\\nans = 0\\nfor i in a:\\n    ans += i // 10\\nprint(ans)\", \"n, k = [int(x) for x in input().split()]\\nl = [int(x) for x in input().split()]\\nassert len(l) == n\\nassert all(0 <= x <= 100 for x in l)\\nf = [10-l[i]%10 for i in range(n) if l[i]%10]\\nf.sort()\\ncur = sum(x // 10 for x in l)\\nfor x in f:\\n    if k >= x:\\n        cur += 1\\n        k -= x\\nprint(min(cur + k // 10, 10 * n))\\n#print(cur + k // 10)\\n\", \"n, m = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nans = 0\\nfor i in range(n):\\n    ans += a[i] // 10\\n    a[i] %= 10\\na.sort()\\na = a[::-1]\\ni = 0\\nwhile i != n and a[i] != 0 and m > 0:\\n    c = 10 - a[i]\\n    if m >= c:\\n        m -= c\\n        ans += 1\\n    else:\\n        m = 0\\n    i += 1\\nans += m // 10\\nif ans < 10 * n:\\n    print(ans)\\nelse:\\n    print(10 * n)\\n\", \"from copy import deepcopy\\nn, k = map(int, input().split())\\nl = list(map(int, input().split()))\\nk1 = deepcopy(l)\\nans = 0\\nv = 0\\nl = deepcopy(k1)\\nfor i in range(n):\\n    l[i] = [l[i], i]\\nfor i in range(n):\\n    if l[i][0] == 100:\\n        l[i][0] = -1\\n        k1[i] = -1\\n    else:\\n        l[i][0] %= 10\\ncur = 10**9\\nl.sort(reverse = True)\\nfor i in range(n):\\n    if l[i][0] >= 0:\\n        cur = 10 - (l[i][0] % 10)\\n        if k < cur:\\n            break\\n        else:\\n            k -= cur\\n            k1[l[i][1]] += cur\\ng = 0\\nfor i in range(n):\\n    if k1[i] >= 0:\\n        g += 10 - k1[i] // 10\\n\\nfor i in range(n):\\n    if k1[i] >= 0:\\n        ans += k1[i] // 10\\n    else:\\n        ans += 10\\n    \\nprint(ans + min(g, k // 10))\", \"n,k = list(map(int,input().split()))\\nx = list(map(int,input().split()))\\n\\ndef f(a):\\n\\treturn (a/10 + 1 - a/10.0)\\n\\nx = sorted(x)\\nx = sorted(x,key = lambda a: (int(a/10) + 1 - a/10.0))\\nimproved,i,flag = 0,0,0\\n\\nwhile k>0:\\n\\tif i==n or x[i]==100:\\n\\t\\tbreak\\n\\tif (int(x[i]/10) + 1 - x[i]/10.0)*10 > k:\\n\\t\\tx[i]+=k\\n\\t\\tk=0\\n\\t\\tbreak\\n\\tk -= (int(x[i]/10) + 1 - x[i]/10.0)*10\\n\\tx[i] += (int(x[i]/10) + 1 - x[i]/10.0)*10\\n\\ti+=1\\ni=0\\nwhile k>0:\\n\\tif i==n:\\n\\t\\tbreak\\n\\tif x[i]+k <= 100:\\n\\t\\tx[i]+=k\\n\\t\\tk=0\\n\\t\\tbreak\\n\\tk-=100-x[i]\\n\\tx[i]=100\\n\\ti+=1\\nfor i in range(0,n):\\n\\timproved+=int(x[i]/10)\\nprint(improved)\\n\", \"n,k= map(int,input().split(\\\" \\\"))\\nmas = list(map(int,input().split(\\\" \\\")))\\nsubmas= [10-i%10 if i<100 else 11 for i in mas]\\nsumm=0\\nfor i in mas:\\n    summ+=i//10\\nsubmas.sort()\\n\\nfor i in submas:\\n    if k>=i and i<=10:\\n        k-=i\\n        summ+=1\\n    else:\\n        break\\nif k>=10:\\n    for i in range(n):\\n        if mas[i]<100:\\n            mas[i]=mas[i]+10-mas[i]%10\\n        if k>=100-mas[i]:\\n            summ+=(100-mas[i])//10\\n            k-=(100-mas[i])\\n        else:\\n            summ+=k//10\\n            break\\nprint(summ)\", \"num_skills, improvement = list(map(int, input().split()))\\nskills = list(map(int, input().split()))\\nskills.sort(key = lambda skill: 10 - skill % 10)\\n\\nfor i, skill in enumerate(skills):\\n  if skill == 100:\\n    continue\\n  delta = min(improvement, 10 - skill % 10)\\n  skills[i] += delta\\n  improvement -= delta\\n  if improvement == 0:\\n    break\\n\\nfor i, skill in enumerate(skills):\\n  delta = min(improvement, 100 - skill)\\n  skills[i] += delta\\n  improvement -= delta\\n  if improvement == 0:\\n    break\\n\\nresult = 0\\nfor skill in skills:\\n  result += skill // 10\\nprint(result)\\n\", \"import math as m\\n\\ndef solve():\\n    n, k = (int(i) for i in input().split())\\n\\n    ai = [int(i) for i in input().split()]\\n\\n    cnt = 0\\n\\n    if(k > 100 * len(ai) - sum(ai)):\\n        k = 100 * len(ai) - sum(ai)\\n\\n    for i in range(len(ai)):\\n        cnt += m.floor(ai[i] / 10)\\n        ai[i] = ai[i] % 10\\n\\n    ai.sort(reverse=True)\\n\\n    for i in range(len(ai)):\\n        diff = 10- ai[i]\\n        if diff <= k:\\n            k -= diff\\n            cnt += 1\\n\\n    cnt += m.floor(k / 10)\\n\\n    return cnt\\n\\nprint(solve())\\n\\n\", \"n, k = (int(x) for x in input().split())\\na = [int(x) for x in input().split()]\\na.sort(key=lambda x: -(x % 10))\\nfor i in range(n):\\n\\tif a[i] % 10 == 0:\\n\\t\\tbreak\\n\\tadd = min(k, 10 - a[i] % 10)\\n\\ta[i] += add\\n\\tk -= add\\nfor i in range(n):\\n\\tadd = min(k, 100 - a[i])\\n\\ta[i] += add\\n\\tk -= add\\nprint(sum(x // 10 for x in a))\\n\", \"inp = input().split()\\nn = int(inp[0])\\nk = int(inp[1])\\na = input().split()\\nb = []\\nx = 0\\ntemp = []\\n\\nfor i in a:\\n    temp = []\\n    x = int(i)\\n    if x == 100:\\n        temp.append(0)\\n        temp.append(x)\\n    else:\\n        temp.append(10 - x % 10)\\n        temp.append(x)\\n    b.append(temp)\\n#print(b)\\nb.sort()\\n#print(b)\\nj = 0\\nss = 0\\nc = []\\nfor t in b:\\n    if t[0] == 0:\\n        pass\\n    elif (t[0] <= k) and (k != 0) :\\n        k -= t[0]\\n        t[1] += t[0]\\n        t[0] = 0\\n    c.append(t[1] // 10)\\nc.sort()\\nj = 0\\nk = k // 10\\n#print(c, k)\\nwhile j < n:\\n    #print(c[j], k)\\n    if ((10 - c[j]) <= k):\\n        k -= (10 - c[j])\\n        c[j] = 10\\n    else:\\n        c[j] += k\\n        k = 0\\n    ss += c[j]\\n    j += 1\\n#print(c)\\nprint(ss)\\n\\n\\n\\n\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 4\\n7 9\\n\",\n    \"3 8\\n17 15 19\\n\",\n    \"2 2\\n99 100\\n\",\n    \"100 10000\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"100 10000\\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\\n\",\n    \"1 16\\n78\\n\",\n    \"2 33\\n30 88\\n\",\n    \"3 9\\n93 62 7\\n\",\n    \"5 145\\n19 77 59 1 63\\n\",\n    \"7 168\\n2 71 56 58 42 61 39\\n\",\n    \"10 217\\n48 30 82 70 10 5 34 11 90 90\\n\",\n    \"15 204\\n19 81 24 22 59 46 48 8 1 66 100 20 46 56 61\\n\",\n    \"20 484\\n24 72 72 13 85 50 52 3 81 79 71 57 57 75 6 52 54 41 61 73\\n\",\n    \"30 825\\n33 25 61 69 92 38 2 62 73 78 83 32 25 5 5 82 64 93 38 25 52 9 40 52 38 90 25 85 99 20\\n\",\n    \"40 700\\n43 35 51 91 44 51 86 20 64 10 50 40 16 25 37 89 18 44 94 99 18 30 11 27 73 3 90 78 28 98 87 43 85 88 29 93 6 81 78 16\\n\",\n    \"50 1607\\n19 55 52 35 18 39 3 12 55 78 62 83 85 56 36 86 96 28 70 40 40 83 27 2 51 49 87 28 58 75 27 69 36 82 78 29 99 87 29 78 82 78 15 85 52 32 90 6 1 76\\n\",\n    \"60 2213\\n17 98 74 91 59 84 87 71 13 9 74 48 75 76 36 25 49 80 25 92 41 24 99 45 98 95 27 54 88 63 25 50 19 43 15 90 58 48 58 83 37 88 35 63 63 23 27 82 80 7 82 93 71 18 85 17 13 2 50 74\\n\",\n    \"70 1313\\n27 7 64 45 44 29 37 63 38 9 85 56 43 74 46 55 59 97 13 33 75 78 2 88 32 7 24 36 86 40 66 42 26 48 64 14 50 21 20 10 50 73 21 29 17 46 97 90 81 73 61 25 95 82 93 94 72 38 80 13 3 3 20 90 34 20 24 49 96 51\\n\",\n    \"40 108\\n20 100 99 50 8 78 44 67 91 75 93 53 96 81 96 86 81 0 58 9 51 63 70 73 80 79 28 82 4 15 60 74 19 17 54 81 11 67 71 66\\n\",\n    \"50 284\\n61 25 82 73 57 61 90 22 63 99 58 4 27 54 8 29 46 99 73 73 60 42 45 17 75 86 38 83 4 1 67 44 74 87 32 33 14 95 87 46 40 3 37 6 42 38 51 39 98 48\\n\",\n    \"60 1947\\n46 29 55 97 37 32 24 22 35 66 24 78 92 5 55 41 21 30 88 24 13 89 77 30 71 15 58 26 39 10 42 36 28 66 21 28 51 55 91 4 94 59 63 46 1 39 46 1 70 7 46 37 96 41 70 19 55 80 59 83\\n\",\n    \"70 2454\\n88 23 5 86 53 48 60 78 97 90 0 18 57 78 68 28 87 39 70 9 0 35 18 53 67 56 0 71 7 86 39 96 83 45 99 92 43 38 40 63 81 59 89 86 28 62 53 97 53 2 73 93 38 49 51 62 93 3 63 49 47 85 72 98 43 91 7 20 47 66\\n\",\n    \"80 1879\\n36 27 86 90 18 85 99 54 29 8 64 31 34 26 45 51 13 48 58 6 98 30 74 63 78 53 88 98 15 17 29 67 78 8 2 7 42 26 72 83 5 59 8 7 27 59 34 65 93 71 50 34 63 45 21 81 19 30 99 41 25 11 83 62 17 29 80 61 91 22 19 95 80 73 15 39 10 37 88 42\\n\",\n    \"90 1191\\n46 37 76 11 60 29 49 13 88 41 65 7 2 13 44 58 23 10 45 48 63 83 79 5 89 99 28 80 34 6 37 92 61 70 51 0 34 67 68 77 62 69 27 86 71 83 72 73 93 92 62 68 86 76 28 24 67 66 61 12 3 52 45 44 58 83 0 84 18 50 75 51 41 25 21 53 39 20 36 45 62 24 12 33 61 81 9 13 27 22\\n\",\n    \"100 1257\\n80 15 39 54 98 10 65 77 55 98 15 25 78 40 25 16 17 60 25 60 56 29 91 16 14 60 47 31 15 59 83 77 10 54 27 21 50 34 64 69 43 81 32 14 30 93 0 91 75 51 19 84 88 14 30 4 99 59 94 69 24 51 35 99 22 25 41 77 64 97 10 4 56 75 97 54 4 55 29 8 14 16 88 34 80 47 66 30 80 60 45 45 93 85 49 91 37 16 49 56\\n\",\n    \"100 3852\\n71 34 1 77 97 36 66 78 95 47 47 15 50 100 43 47 20 23 61 92 49 86 29 92 100 85 5 58 59 19 16 81 16 89 93 75 46 86 9 50 9 49 61 88 76 13 14 99 47 64 39 42 63 5 57 8 51 21 21 62 92 84 84 56 9 37 72 19 99 19 8 60 25 21 4 0 98 80 29 63 52 87 91 30 79 79 96 22 32 63 87 73 51 89 81 84 69 30 55 31\\n\",\n    \"100 2533\\n16 32 22 100 52 10 43 28 87 72 69 84 26 0 74 46 28 34 46 47 90 18 49 6 42 30 18 33 86 38 94 78 8 39 54 46 72 45 83 68 38 4 14 6 86 24 71 36 22 8 37 99 28 7 88 49 4 69 46 81 30 95 92 18 81 21 14 7 43 14 80 59 14 72 93 6 78 43 56 12 66 21 81 80 39 5 54 69 40 12 41 35 23 58 1 75 40 3 36 97\\n\",\n    \"100 2239\\n95 9 31 56 96 85 88 79 78 63 68 95 1 91 94 56 57 88 30 92 64 52 91 11 17 99 65 63 35 68 82 18 66 57 26 62 32 70 89 98 42 17 68 93 53 79 50 6 30 76 69 10 4 41 18 56 81 49 14 10 91 6 32 80 85 94 2 95 66 9 18 58 71 23 23 48 68 72 39 51 0 23 71 73 10 89 13 15 16 30 27 44 63 93 22 77 12 12 28 5\\n\",\n    \"100 1689\\n40 18 85 79 18 70 44 62 37 21 68 6 9 60 13 55 98 98 82 80 4 75 44 83 60 44 10 60 28 65 59 82 48 41 20 100 57 62 28 60 3 5 54 91 31 89 6 44 38 20 34 90 14 99 82 96 57 97 39 73 30 96 41 42 56 33 45 83 78 15 79 25 27 7 43 54 14 90 22 68 3 1 27 88 49 37 84 61 92 37 14 41 81 62 10 36 73 86 9 4\\n\",\n    \"1 44\\n56\\n\",\n    \"5 136\\n65 53 80 92 74\\n\",\n    \"20 964\\n70 82 81 14 73 35 40 21 73 70 71 35 32 43 26 51 51 62 45 61\\n\",\n    \"80 4124\\n14 37 6 11 63 59 43 72 88 0 53 43 42 95 65 61 9 69 9 95 49 64 27 34 53 31 34 26 30 48 85 97 35 60 74 45 35 86 11 34 45 72 95 95 95 13 58 2 0 38 37 13 61 47 85 77 96 10 34 3 54 55 91 23 57 13 33 16 2 17 80 61 36 57 79 81 90 33 82 48\\n\",\n    \"100 4899\\n66 100 11 81 19 55 96 14 66 10 49 75 1 58 64 80 47 95 45 79 36 89 31 30 61 96 93 86 50 61 64 32 82 13 57 75 5 46 96 49 3 98 34 6 91 7 50 62 46 31 100 4 2 16 20 47 86 41 73 17 43 71 84 47 18 100 55 23 10 37 4 19 84 61 27 61 42 29 95 41 93 5 72 58 24 10 80 45 78 68 19 18 30 28 95 91 15 90 87 47\\n\",\n    \"1 7035769\\n1\\n\",\n    \"5 5012340\\n10 63 89 25 29\\n\",\n    \"20 5527187\\n15 91 34 37 16 77 85 4 31 28 2 47 8 45 57 51 58 72 97 16\\n\",\n    \"80 8000114\\n27 46 16 80 85 11 20 22 80 24 85 22 17 86 96 60 16 12 94 39 23 86 12 49 28 78 80 23 92 78 62 38 27 43 35 62 60 89 85 63 39 27 70 13 73 91 82 73 98 83 70 93 5 37 15 85 39 58 92 34 93 44 31 86 28 86 43 3 25 12 18 61 25 7 67 87 37 29 65 98\\n\",\n    \"100 9455943\\n44 8 21 71 7 29 40 65 91 70 48 19 77 48 16 22 54 4 29 34 9 22 73 34 47 41 5 83 32 91 52 6 74 64 18 23 9 4 36 78 98 20 20 3 69 86 41 67 54 76 87 84 47 6 52 87 61 100 98 80 14 14 24 99 90 73 97 79 22 65 65 51 29 44 15 67 21 58 79 80 96 40 63 73 96 59 72 24 87 85 74 49 81 30 16 61 87 30 0 13\\n\",\n    \"1 6\\n27\\n\",\n    \"1 10\\n88\\n\",\n    \"1 3\\n93\\n\",\n    \"2 22\\n48 44\\n\",\n    \"1 48\\n52\\n\",\n    \"1 2135072\\n72\\n\",\n    \"3 5\\n2 3 1\\n\",\n    \"5 1\\n8 8 8 8 8\\n\",\n    \"3 150\\n1 1 1\\n\",\n    \"4 3\\n7 9 9 9\\n\",\n    \"1 10\\n100\\n\",\n    \"3 11\\n100 100 100\\n\",\n    \"2 11\\n99 100\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"5\\n\",\n    \"20\\n\",\n    \"1000\\n\",\n    \"1000\\n\",\n    \"9\\n\",\n    \"15\\n\",\n    \"16\\n\",\n    \"36\\n\",\n    \"49\\n\",\n    \"68\\n\",\n    \"86\\n\",\n    \"156\\n\",\n    \"232\\n\",\n    \"276\\n\",\n    \"424\\n\",\n    \"552\\n\",\n    \"468\\n\",\n    \"245\\n\",\n    \"282\\n\",\n    \"471\\n\",\n    \"632\\n\",\n    \"570\\n\",\n    \"554\\n\",\n    \"619\\n\",\n    \"922\\n\",\n    \"706\\n\",\n    \"737\\n\",\n    \"666\\n\",\n    \"10\\n\",\n    \"50\\n\",\n    \"200\\n\",\n    \"800\\n\",\n    \"1000\\n\",\n    \"10\\n\",\n    \"50\\n\",\n    \"200\\n\",\n    \"800\\n\",\n    \"1000\\n\",\n    \"3\\n\",\n    \"9\\n\",\n    \"9\\n\",\n    \"11\\n\",\n    \"10\\n\",\n    \"10\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"15\\n\",\n    \"3\\n\",\n    \"10\\n\",\n    \"30\\n\",\n    \"20\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/581/C",
  "starter_code": ""
}