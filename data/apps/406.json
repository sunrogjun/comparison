{
  "task_id": "APPS/406",
  "problem_id": 406,
  "prompt": "In the evening, after the contest Ilya was bored, and he really felt like maximizing. He remembered that he had a set of n sticks and an instrument. Each stick is characterized by its length l_{i}.\n\nIlya decided to make a rectangle from the sticks. And due to his whim, he decided to make rectangles in such a way that maximizes their total area. Each stick is used in making at most one rectangle, it is possible that some of sticks remain unused. Bending sticks is not allowed.\n\nSticks with lengths a_1, a_2, a_3 and a_4 can make a rectangle if the following properties are observed:  a_1 \u2264 a_2 \u2264 a_3 \u2264 a_4  a_1 = a_2  a_3 = a_4 \n\nA rectangle can be made of sticks with lengths of, for example, 3\u00a03\u00a03\u00a03 or 2\u00a02\u00a04\u00a04. A rectangle cannot be made of, for example, sticks 5\u00a05\u00a05\u00a07.\n\nIlya also has an instrument which can reduce the length of the sticks. The sticks are made of a special material, so the length of each stick can be reduced by at most one. For example, a stick with length 5 can either stay at this length or be transformed into a stick of length 4.\n\nYou have to answer the question \u2014 what maximum total area of the rectangles can Ilya get with a file if makes rectangles from the available sticks?\n\n\n-----Input-----\n\nThe first line of the input contains a positive integer n (1 \u2264 n \u2264 10^5)\u00a0\u2014\u00a0the number of the available sticks.\n\nThe second line of the input contains n positive integers l_{i} (2 \u2264 l_{i} \u2264 10^6)\u00a0\u2014\u00a0the lengths of the sticks.\n\n\n-----Output-----\n\nThe first line of the output must contain a single non-negative integer\u00a0\u2014\u00a0the maximum total area of the rectangles that Ilya can make from the available sticks.\n\n\n-----Examples-----\nInput\n4\n2 4 4 2\n\nOutput\n8\n\nInput\n4\n2 2 3 5\n\nOutput\n0\n\nInput\n4\n100003 100004 100005 100006\n\nOutput\n10000800015",
  "solutions": "[\"arr = [0] * (10 ** 6 + 1)\\nn = int(input())\\nfor i in input().split():\\n    arr[int(i)] += 1\\ni = 10 ** 6\\nj = i\\nk = i\\nc = 0\\nwhile j > 0:\\n    if arr[j] % 2 == 1 and (arr[j] > 1 or c == 0):\\n        arr[j - 1] += 1\\n        c = 1\\n    else:\\n        c = 0\\n    j -= 1\\nr = 0\\nwhile i > 0 and k > 0:\\n    if arr[i] < 2:\\n        if i == k:\\n            k -= 1\\n        i -= 1\\n    elif i == k and arr[i] < 4:\\n        k -= 1\\n    elif arr[k] < 2:\\n        k -= 1\\n    else:\\n        r += i * k\\n        arr[i] -= 2\\n        arr[k] -= 2\\nprint(r)\", \"n = int(input())\\nl = list(map(int, input().split()))\\nl.sort(key=lambda x: -x)\\ni = 0\\ncur = 0\\nans = 0\\nwhile i < len(l)-1:\\n    if l[i] == l[i+1] or l[i]-1 == l[i+1]:\\n        if cur == 0:\\n            cur = l[i+1]\\n        else:\\n            ans += cur*l[i+1]\\n            cur = 0\\n        i += 2\\n    else:\\n        i += 1\\nprint(ans)\\n\", \"def __starting_point():\\n    input()\\n    data = sorted(map(int, input().split()), key=lambda x: -x)\\n\\n    if len(data) < 4:\\n        print(0)\\n        return\\n\\n    total = 0\\n    i = 0\\n\\n    while i < len(data) - 3:\\n        if abs(data[i] - data[i + 1]) > 1:\\n            i += 1\\n            continue\\n\\n        success = False\\n        for j in range(i + 2, len(data) - 1):\\n            if abs(data[j] - data[j + 1]) > 1:\\n                continue\\n\\n            success = True\\n            total += min(data[i], data[i + 1]) * min(data[j], data[j + 1])\\n            i = j + 2\\n            break\\n\\n        if not success:\\n            i += 1\\n\\n    print(total)\\n\\n\\n__starting_point()\", \"n = int(input())\\ns = map(int, input().split())\\ns = list(reversed(sorted(s)))\\ni = 1\\nk =[]\\nwhile i < n:\\n    if s[i-1] - s[i] == 1:\\n        k.append(s[i])\\n        i += 1\\n    elif s[i-1] == s[i]:\\n        k.append(s[i])\\n        i += 1\\n    i +=1\\nans = 0\\nfor i in range(1, len(k), 2):\\n    ans += k[i]*k[i-1]\\nprint(ans)\", \"n = int(input())\\nl = [int(x) for x in input().split()]\\n\\nl.sort()\\n\\nl2 = [0] * n\\nprev = l[0]\\ncount = 1\\nk = 0\\n\\nfor i in range(1, n):\\n    if l[i] != prev:\\n        l2[k] = [prev, count]\\n        k += 1\\n        prev = l[i]\\n        count = 1\\n    else:\\n        count += 1\\n\\nl2[k] = [prev, count]\\nk += 1\\nfor i in range(k-1, 0, -1):\\n    if l2[i][1] % 2 == 1 and l2[i-1][0] == (l2[i][0] - 1):\\n        l2[i-1][1] += 1\\n    l2[i][1] //= 2\\nl2[0][1] //= 2\\ni = k-1\\nj = k-1\\nres = 0\\nwhile i >= 0 and j >= 0:\\n    if i == j:\\n        res += l2[i][0] * l2[i][0] * (l2[i][1] // 2)\\n        l2[i][1] %= 2\\n        if l2[i][1] == 0:\\n            i -= 1\\n            j -= 1\\n        else:\\n            i -= 1\\n\\n    else:\\n        if l2[i][1] == 0:\\n            i -= 1\\n            continue\\n        res += l2[i][0] * l2[j][0]\\n        l2[i][1] -= 1\\n        j = i\\n\\nprint(res)\\n\", \"n = int(input())\\nl = [int(i) for i in input().split()]\\nl.sort(reverse=True)\\na = []\\ni = 0\\nwhile i < len(l) - 1:\\n    #print(l[i], l[i + 1])\\n    if l[i] == l[i + 1]:\\n        a.append(l[i])\\n        i += 2\\n    else:\\n        if l[i] == l[i + 1] + 1:\\n            a.append((l[i] - 1))\\n            i += 2\\n        else:\\n            i += 1\\n\\n#print(a)\\nif len(a) % 2 != 0:\\n    a.append(0)\\n\\ns, i = 0, 0\\nwhile i < len(a):\\n    s += a[i] * a[i + 1]\\n    i += 2\\nprint(s)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\", \"n=int(input())\\nL=[int(x) for x in input().split()]\\nL.sort(reverse=True)\\ni=0\\nwhile i<n-1:\\n\\tif L[i]-1==L[i+1]:\\n\\t\\tL[i]-=1\\n\\t\\ti+=1\\n\\telif L[i]==L[i+1]:\\n\\t\\ti+=1\\n\\ti+=1\\nval=[]\\ni=0\\nwhile i<n-1:\\n\\tif L[i]==L[i+1]:\\n\\t\\tval.append(L[i])\\n\\t\\ti+=1\\n\\ti+=1\\narea=0\\nn=len(val)\\ni=0\\nwhile i<n-1:\\n\\tarea+=val[i]*val[i+1]\\n\\ti+=2\\nprint(area)\\n\", \"ans = 0\\nn = 0\\nn = int(input(\\\"\\\"))\\nl = input(\\\"\\\")\\nst = []\\nfor x in l.split(\\\" \\\"):\\n    st.append(int(x))\\nst.sort()\\ni = n-1\\nwhile i>=3:\\n    if st[i]>st[i-1]+1:\\n        i = i -1\\n        continue\\n    l = st[i-1]\\n    i = i -2\\n    while i>0 and st[i]>st[i-1]+1:\\n        i=i-1\\n    if i == 0:\\n        break\\n    b = st [i-1]\\n    ans = ans + l*b\\n    i = i - 2\\nprint(ans)\\n\", \"n = int(input())\\nl = []\\ninline = input().split()\\nfor i in range (n):\\n    l.append(int(inline[i]))\\nl.sort()\\nright_equal = 1\\nans = 0\\nif len(l) >= 4:\\n    for i in range(len(l) - 2, -1, -1):\\n        if l[i] != l[i + 1]:\\n            if right_equal % 2 != 0:\\n                if l[i + 1] - l[i] == 1:\\n                    l[i + 1] -= 1\\n                    right_equal = 2\\n                else:\\n                    l.pop(i + 1)\\n            else:\\n                right_equal = 1\\n        else:\\n            right_equal += 1\\nif len(l) >= 4:\\n    if l[0] != l[1]:\\n        l.pop(0)\\n    flag = 1\\n    for i in range(len(l) - 2, -1, -2):\\n        if flag == 1:\\n            c = l[i]\\n        else:\\n            ans += c * l[i]\\n            c = 0\\n        flag = 1 - flag\\nprint (ans)\", \"n = int(input())\\n\\nlst = []\\nlst.extend(list(map(int, input().split())))\\n\\ntarea = 0\\n\\nlst.sort()\\nlst = lst[::-1]\\nlst.append(0)\\n\\ni = 0\\nmark = 0\\nar = []\\nwhile i != n:\\n    if (lst[i] - lst[i+1])<=1:\\n        ar.append(lst[i+1])\\n        mark += 1\\n        i += 2\\n    else:\\n        i += 1\\n    if mark == 2:\\n        tarea = tarea + ar[0]*ar[1]\\n        ar = []\\n        mark = 0\\n\\nprint(tarea)\\n        \\n    \\n\", \"sux = 0\\ntwo = 0\\nx=int(input())\\ns=list(map(int, input().split(' ')))\\n\\nt = [0] * (1000001)\\nfor i in s:\\n    t[i] += 1\\nfor i in range(len(t)-1, 0, -1):\\n    if t[i]%2==1 and t[i-1]>0:\\n        t[i] -= 1\\n        t[i-1] += 1\\n    elif t[i]%2==1 and t[i]>0:\\n        t[i] -= 1\\nfor i in range(len(t)-1, 0, -1):\\n    if two != 0 and t[i] != 0:\\n        sux += i*two\\n        two = 0\\n        t[i] -= 2\\n    if t[i] % 4 == 0:\\n        sux += (t[i]//4)*i*i\\n    else:\\n        sux += (t[i]//4)*i*i\\n        if two != 0:\\n            sux += i*two\\n            two = 0\\n            \\n        else:\\n            two = i\\n            \\n    \\nprint(sux)\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nm = {}\\nm2 = set()\\nfor i in range(1, 10**6 + 1):\\n    m[i] = 0\\nfor i in range(n):\\n    m[l[i]] += 1\\n    m2.add(l[i])\\n    if l[i] >= 2:\\n        m2.add(l[i] - 1)\\nm1 = []\\n\\nfor i in range(10**6, 1, -1):\\n    if m[i] % 2 == 1 and m[i - 1] > 0:\\n        m[i] -= 1\\n        m[i - 1] += 1\\n    elif m[i] % 2 == 1:\\n        m[i] -= 1\\nfor i in m2:\\n    if m[i] != 0:\\n        m1.append(i)\\nm1.sort(reverse = True)\\n\\ncnt = 0\\nfor i in range(len(m1)):\\n    cnt += (m[m1[i]]//4)*(m1[i]**2)\\n    if m[m1[i]] % 4 == 2 and i != len(m1) - 1:\\n        m[m1[i + 1]] -= 2\\n        cnt += m1[i + 1]*m1[i]\\nprint(cnt)\\n        \\n        \\n    \\n        \\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nm = {}\\nm2 = set()\\nfor i in range(1, 10**6 + 1):\\n    m[i] = 0\\nfor i in range(n):\\n    m[l[i]] += 1\\n    m2.add(l[i])\\n    if l[i] >= 2:\\n        m2.add(l[i] - 1)\\nm1 = []\\n\\nfor i in range(10**6, 1, -1):\\n    if m[i] % 2 == 1 and m[i - 1] > 0:\\n        m[i] -= 1\\n        m[i - 1] += 1\\n    elif m[i] % 2 == 1:\\n        m[i] -= 1\\nfor i in m2:\\n    if m[i] != 0:\\n        m1.append(i)\\nm1.sort(reverse = True)\\n\\ncnt = 0\\nfor i in range(len(m1)):\\n    cnt += (m[m1[i]]//4)*(m1[i]**2)\\n    if m[m1[i]] % 4 == 2 and i != len(m1) - 1:\\n        m[m1[i + 1]] -= 2\\n        cnt += m1[i + 1]*m1[i]\\nprint(cnt)\\n        \\n        \\n    \\n        \\n\", \"#!/c/Python34/python\\n# coding: utf-8 ans\\n\\n\\ndef main():\\n    n = int(input())\\n    L = sorted(map(int, input().split()))\\n    L.reverse()\\n    K = []\\n    i = 1\\n    while(i < n):\\n        if L[i-1] == L[i]:\\n            K.append(L[i])\\n            i += 1\\n        elif L[i-1]-L[i] == 1:\\n            K.append(L[i])\\n            i += 1\\n        i += 1\\n    ans = 0\\n    for i in range(1, len(K), 2):\\n        ans += K[i-1] * K[i]\\n    print(ans)\\n    #print(K)\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"_ = int(input())\\nas_ = list(sorted(map(int, input().split())))\\n\\ndef get_pair():\\n    while len(as_) >= 2:\\n        s0 = as_.pop()\\n        s1 = as_.pop()\\n        if s0-1 == s1 or s0 == s1:\\n            return s1\\n        as_.append(s1)\\n    return None\\n\\nans = 0\\ntb = get_pair()\\nlr = get_pair()\\nwhile not (tb is None or lr is None):\\n    ans += tb * lr\\n    tb = get_pair()\\n    lr = get_pair()\\nprint(ans)\\n\", \"def main():\\n    n = int(input())\\n    l = [int(i) for i in input().split()]\\n    l.sort()\\n    l.reverse()\\n    candidate = []\\n    i = 1\\n    while (i < n):\\n        if (l[i - 1] - l[i] <= 1):\\n            candidate.append(min(l[i - 1], l[i]))\\n            i += 2\\n        else:\\n            i += 1\\n\\n    area = 0\\n    for i in range(1, len(candidate), 2):\\n        area += candidate[i] * candidate[i - 1]\\n    return area\\n\\n\\ndef __starting_point():\\n    print(main())\\n__starting_point()\", \"n = int(input())\\nls = list(map(int, input().split()))\\nls.sort(reverse=True)\\n\\narea = 0\\npairs = []\\ni = 0\\nwhile i < len(ls)-1:\\n    if (ls[i] - ls[i+1]) > 1:\\n        i += 1\\n    else:\\n        pairs.append(ls[i+1])\\n        i += 2\\n    if len(pairs) == 2:\\n        area += pairs.pop() * pairs.pop()\\nprint(area)\\n\", \"n = int(input())\\nmaxn = 10**6 + 2\\ncnt = [0] * maxn\\nfor x in map(int, input().split()):\\n    cnt[x] += 1\\nansv = []\\nfor i in range(maxn - 2, 1, -1):\\n    ansv += [i] * ((cnt[i] + (cnt[i+1] & 1)) >> 1)\\n    if cnt[i] > 0:\\n        cnt[i] += cnt[i+1] & 1\\nans = 0\\nfor i in range(1, len(ansv), 2):\\n    ans += ansv[i] * ansv[i-1]\\nprint(ans)\", \"s = input()\\nlst = [int(i) for i in input().split()]\\nlst.sort()\\nlst = lst[::-1]\\nn = 0\\nk = 0\\nwhile len(lst) >= 2:\\n    if lst[0] == lst[1] or lst[0] == lst[1]+1:\\n        if k != 0:\\n            n += k*lst[1]\\n            lst.pop(0)\\n            lst.pop(0)\\n            k = 0\\n        else:\\n            k = lst[1]\\n            lst.pop(0)\\n            lst.pop(0)\\n\\n    else:\\n        lst.pop(0)\\nprint(n)\\n\", \"n, v, ps, pp = int(input()), 0, 0, 0\\nfor l in sorted(map(int, input().split()), reverse=True):\\n    if ps == 0 or ps > l + 1:\\n        ps = l\\n    elif pp == 0:\\n        pp, ps = l, 0\\n    else:\\n        v, pp, ps = v + pp * l, 0, 0\\nprint(v)\", \"n = int(input())\\nsticks = list(map(int, input().split()))\\n\\nlength = [0] * 1000000\\nmiv = 1000000\\nmav = 0\\nansw = 0\\nfor i in range(len(sticks)):\\n\\tlength[sticks[i]-1] = length[sticks[i]-1] + 1\\n\\tif sticks[i]-1 > mav:\\n\\t\\tmav = sticks[i] - 1\\n\\tif sticks[i] -1 < miv:\\n\\t\\tmiv = sticks[i] -1\\n\\nlength = length[miv:mav+1]\\nfor i in range(len(length)-1, -1, -1):\\n\\tif length[i] % 2 == 1:\\n\\t\\tif i > 0 and length[i-1] > 0:\\n\\t\\t\\tlength[i] = length[i] - 1\\n\\t\\t\\tlength[i-1] = length[i-1] + 1\\n\\t\\telse:\\n\\t\\t\\tlength[i] = length[i] - 1\\n\\nsquare = []\\nfor i in range(len(length)-1, -1, -1):\\n\\n\\twhile length[i] > 0:\\n\\t\\tsquare.append(i + miv + 1)\\n\\t\\tlength[i] = length[i] - 2\\n\\t\\tif len(square) == 2:\\n\\t\\t\\tansw += square[0] * square[1]\\n\\t\\t\\tsquare = []\\nprint(answ)\", \"I = lambda : map(int,input().split())\\nn = int(input())\\np = list(I())\\ncnt = [0] * 1000001\\nfor i in p: cnt[i] += 1\\nfor i in range(1000000,1,-1):\\n    if cnt[i] % 2 == 1 and cnt[i - 1] > 0:\\n        cnt[i] -= 1\\n        cnt[i - 1] += 1\\n    elif cnt[i] % 2 == 1 and cnt[i - 1] == 0:\\n        cnt[i] -= 1\\np = 0\\nans = 0\\nfor i in range(1000000,1,-1):\\n    if cnt[i] != 0:\\n        if p != 0:\\n            cnt[i] -= 2\\n            ans += p * i\\n            p = 0\\n        ans += i * i * (cnt[i] // 4)\\n        if cnt[i] % 4 != 0:\\n            p = i\\nprint (ans)\", \"from collections import Counter\\n\\ninput()\\nlengths = [int(i) for i in input().split()]\\ncnt = Counter(lengths)\\nlengths.sort(reverse=True)\\ntotal_square = 0\\n\\nfor le in lengths:\\n    if cnt[le] % 2 != 0:\\n        if cnt[le-1] > 0:\\n            cnt[le-1] += 1\\n        cnt[le] -= 1\\n\\nfor le in lengths:\\n    if cnt[le] >= 4:\\n        cnt[le] -= 4\\n        total_square += le ** 2\\n    elif cnt[le] < 4 and cnt[le] > 0:\\n        min_le = le - 1\\n        while min_le > 0 and cnt[min_le] < 2:\\n            min_le -= 1\\n        cnt[le] -= 2\\n        cnt[min_le] -= 2\\n        total_square += le * min_le\\n\\nprint(total_square)\\n\", \"import sys\\ndef otb(l):\\n    i = 0\\n    while i < n - 1:\\n        if l[i] - 1 == l[i + 1]:\\n            l[i] -= 1\\n            i += 1\\n        elif l[i] == l[i + 1]:\\n            i += 1\\n        i += 1\\n    znach = []\\n    i = 0\\n    while i < n - 1:\\n        if l[i] == l[i + 1]:\\n            znach.append(l[i])\\n            i += 1\\n        i += 1\\n    return znach\\ndef ploshad(n,znach):\\n    summa = 0\\n    n = len(znach)\\n    for i in range(0, n - 1, 2):\\n        summa += znach[i] * znach[i + 1]\\n    sys.stdout.write(str(summa))\\n\\nn = int(sys.stdin.readline())\\nl = []\\nl = [int(j) for j in sys.stdin.readline().split()]\\nl.sort(reverse=True)\\nznach=otb(l)\\nploshad(n,znach)\\n\", \"n = int(input())\\na, b = 0, 0\\nans = 0\\nfor i in sorted(map(int,input().split()),reverse=True):\\n    if a == 0 or a > i + 1:\\n        a = i\\n    elif b == 0:\\n        a, b= 0, i\\n    else:\\n        ans += i * b\\n        a, b = 0, 0\\nprint(ans)\\n\\n\\n\\n        \\n\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4\\n2 4 4 2\\n\",\n    \"4\\n2 2 3 5\\n\",\n    \"4\\n100003 100004 100005 100006\\n\",\n    \"8\\n5 3 3 3 3 4 4 4\\n\",\n    \"10\\n123 124 123 124 2 2 2 2 9 9\\n\",\n    \"8\\n10 10 10 10 11 10 11 10\\n\",\n    \"1\\n1000000\\n\",\n    \"10\\n10519 10519 10520 10520 10520 10521 10521 10521 10522 10523\\n\",\n    \"100\\n4116 4116 4117 4117 4117 4117 4118 4119 4119 4119 4119 4120 4120 4120 4120 4121 4122 4123 4123 4123 4123 4124 4124 4124 4124 4125 4126 4126 4126 4126 4127 4127 4127 4127 4128 4128 4128 4128 4129 4129 4130 4130 4131 4132 4133 4133 4134 4134 4135 4135 4136 4137 4137 4137 4138 4139 4140 4140 4141 4141 4142 4143 4143 4143 4144 4144 4144 4144 4145 4145 4145 4146 4146 4146 4147 4147 4147 4147 4148 4148 4148 4149 4149 4149 4150 4151 4151 4151 4152 4152 4153 4153 4154 4154 4155 4155 4155 4155 4156 4156\\n\",\n    \"10\\n402840 873316 567766 493234 711262 291654 683001 496971 64909 190173\\n\",\n    \"45\\n1800 4967 1094 551 871 3505 846 960 4868 4304 2112 496 2293 2128 2430 2119 4497 2159 774 4520 3535 1013 452 1458 1895 1191 958 1133 416 2613 4172 3926 1665 4237 539 101 2448 1212 2631 4530 3026 412 1006 2515 1922\\n\",\n    \"69\\n2367 2018 3511 1047 1789 2332 1082 4678 2036 4108 2357 339 536 2272 3638 2588 754 3795 375 506 3243 1033 4531 1216 4266 2547 3540 4642 1256 2248 4705 14 629 876 2304 1673 4186 2356 3172 2664 3896 552 4293 1507 3307 2661 3143 4565 58 1298 4380 2738 917 2054 2676 4464 1314 3752 3378 1823 4219 3142 4258 1833 886 4286 4040 1070 2206\\n\",\n    \"93\\n13 2633 3005 1516 2681 3262 1318 1935 665 2450 2601 1644 214 929 4873 955 1983 3945 3488 2927 1516 1026 2150 974 150 2442 2610 1664 636 3369 266 2536 3132 2515 2582 1169 4462 4961 200 2848 4793 2795 4657 474 2640 2488 378 544 1805 1390 1548 2683 1474 4027 1724 2078 183 3717 1727 1780 552 2905 4260 1444 2906 3779 400 1491 1467 4480 3680 2539 4681 2875 4021 2711 106 853 3094 4531 4066 372 2129 2577 3996 2350 943 4478 3058 3333 4592 232 2780\\n\",\n    \"21\\n580 3221 3987 2012 35 629 1554 654 756 2254 4307 2948 3457 4612 4620 4320 1777 556 3088 348 1250\\n\",\n    \"45\\n4685 272 3481 3942 952 3020 329 4371 2923 2057 4526 2791 1674 3269 829 2713 3006 2166 1228 2795 983 1065 3875 4028 3429 3720 697 734 4393 1176 2820 1173 4598 2281 2549 4341 1504 172 4230 1193 3022 3742 1232 3433 1871\\n\",\n    \"69\\n3766 2348 4437 4438 3305 386 2026 1629 1552 400 4770 4069 4916 1926 2037 1079 2801 854 803 216 2152 4622 1494 3786 775 3615 4766 2781 235 836 1892 2234 3563 1843 4314 3836 320 2776 4796 1378 380 2421 3057 964 4717 1122 620 530 3455 1639 1618 3109 3120 564 2382 1995 1173 4510 286 1088 218 734 2779 3738 456 1668 4476 2780 3555\\n\",\n    \"4\\n2 2 2 4\\n\",\n    \"8\\n10 10 10 11 14 14 14 16\\n\",\n    \"2\\n2 3\\n\",\n    \"3\\n2 3 5\\n\",\n    \"8\\n2 1000000 2 1000000 2 1000000 2 1000000\\n\",\n    \"4\\n2 4 6 8\\n\",\n    \"4\\n2 3 6 8\\n\",\n    \"5\\n2 2 3 4 5\\n\",\n    \"5\\n1000000 999999 999999 999999 999999\\n\",\n    \"6\\n2 2 2 2 2 2\\n\",\n    \"4\\n2 4 5 5\\n\",\n    \"20\\n4 4 8 4 5 6 7 4 5 4 6 4 4 5 7 6 5 8 8 4\\n\",\n    \"10\\n8 4 6 6 8 5 7 7 6 8\\n\",\n    \"11\\n4 4 9 9 3 8 8 8 6 4 3\\n\",\n    \"8\\n2 3 3 4 4 5 5 5\\n\",\n    \"4\\n3 3 3 2\\n\",\n    \"5\\n3 3 10 100 100\\n\",\n    \"8\\n9 9 9 8 8 7 7 6\\n\",\n    \"4\\n5 6 6 7\\n\",\n    \"5\\n9 9 5 2 2\\n\",\n    \"6\\n3 4 100 200 1001 1002\\n\",\n    \"6\\n3 4 5 100 101 102\\n\",\n    \"5\\n2 2 4 6 6\\n\",\n    \"6\\n2 3 8 10 13 14\\n\",\n    \"7\\n2 2 2 2 2 2 2\\n\",\n    \"5\\n5 2 2 2 2\\n\",\n    \"6\\n3 4 100 200 1000 1001\\n\",\n    \"5\\n5 5 7 9 9\\n\",\n    \"5\\n8 8 7 4 4\\n\",\n    \"5\\n2 2 5 8 9\\n\",\n    \"5\\n4 4 4 2 2\\n\",\n    \"5\\n3 10 100 1000 10000\\n\",\n    \"6\\n10 10 7 4 2 2\\n\",\n    \"6\\n5 5 7 9 10 10\\n\",\n    \"7\\n10 10 7 5 3 2 2\\n\",\n    \"7\\n10 9 9 9 9 2 2\\n\"\n  ],\n  \"outputs\": [\n    \"8\\n\",\n    \"0\\n\",\n    \"10000800015\\n\",\n    \"25\\n\",\n    \"15270\\n\",\n    \"210\\n\",\n    \"0\\n\",\n    \"221372362\\n\",\n    \"427591742\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"7402552\\n\",\n    \"4403980\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"12334860\\n\",\n    \"0\\n\",\n    \"140\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1000000000004\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"8\\n\",\n    \"999998000001\\n\",\n    \"4\\n\",\n    \"0\\n\",\n    \"149\\n\",\n    \"92\\n\",\n    \"84\\n\",\n    \"26\\n\",\n    \"6\\n\",\n    \"300\\n\",\n    \"114\\n\",\n    \"30\\n\",\n    \"18\\n\",\n    \"3003\\n\",\n    \"404\\n\",\n    \"12\\n\",\n    \"26\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"3000\\n\",\n    \"45\\n\",\n    \"32\\n\",\n    \"16\\n\",\n    \"8\\n\",\n    \"0\\n\",\n    \"20\\n\",\n    \"50\\n\",\n    \"20\\n\",\n    \"81\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/525/C",
  "starter_code": ""
}