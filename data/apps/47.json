{
  "task_id": "APPS/47",
  "problem_id": 47,
  "prompt": "You are given an array $a$ consisting of $n$ integers. Beauty of array is the maximum sum of some consecutive subarray of this array (this subarray may be empty). For example, the beauty of the array [10, -5, 10, -4, 1] is 15, and the beauty of the array [-3, -5, -1] is 0.\n\nYou may choose at most one consecutive subarray of $a$ and multiply all values contained in this subarray by $x$. You want to maximize the beauty of array after applying at most one such operation.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $x$ ($1 \\le n \\le 3 \\cdot 10^5, -100 \\le x \\le 100$) \u2014 the length of array $a$ and the integer $x$ respectively.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($-10^9 \\le a_i \\le 10^9$) \u2014 the array $a$.\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum possible beauty of array $a$ after multiplying all values belonging to some consecutive subarray $x$.\n\n\n-----Examples-----\nInput\n5 -2\n-3 8 -2 1 -6\n\nOutput\n22\n\nInput\n12 -3\n1 3 3 7 1 3 3 7 1 3 3 7\n\nOutput\n42\n\nInput\n5 10\n-1 -2 -3 -4 -5\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first test case we need to multiply the subarray [-2, 1, -6], and the array becomes [-3, 8, 4, -2, 12] with beauty 22 ([-3, 8, 4, -2, 12]).\n\nIn the second test case we don't need to multiply any subarray at all.\n\nIn the third test case no matter which subarray we multiply, the beauty of array will be equal to 0.",
  "solutions": "[\"N, X = list(map(int, input().split()))\\nA = [int(a) for a in input().split()]\\n\\ndp = [[0]*4 for _ in range(N+1)]\\n\\nfor i in range(1, N+1):\\n    dp[i][0] = max(dp[i-1][0] + A[i-1], 0)\\n    dp[i][1] = max(dp[i-1][1] + A[i-1] * X, dp[i][0])\\n    dp[i][2] = max(dp[i-1][2] + A[i-1], dp[i][1])\\n    dp[i][3] = max(dp[i-1][3], dp[i][2])\\n\\nprint(dp[N][3])\\n\", \"n, x = list(map(int, input().split()))\\ncur1 = cur2 = cur = res = 0\\nfor a in map(int, input().split()):\\n    cur1 = max(cur1 + a, 0)\\n    cur2 = max(cur2 + a * x, cur1)\\n    cur = max(cur + a, cur2)\\n    res = max(res, cur)\\nprint(res)\\n\", \"n,x = map(int,input().split())\\nl = list(map(int,input().split()))\\nnot_used = [0 for k in range(n+1)]\\ncurrent = [0 for k in range(n+1)]\\nused =[0 for k in range(n+1)]\\nglobalMax = 0\\nfor k in range(n):\\n\\tnot_used[k+1]= max(not_used[k],0)+l[k]\\n\\tcurrent[k+1] = max(max(not_used[k],current[k]),0)+l[k]*x\\n\\tused[k+1] = max(max(current[k],used[k]),0)+l[k]\\n\\tglobalMax = max(max(globalMax,used[k+1]),max(current[k+1],not_used[k+1]))\\nprint(globalMax)\", \"n, x = map(int, input().split())\\ndp1 = [0]*n\\ndp2 = [0]*n\\ndp0 = [0]*n\\nans = 0\\nv = [int(i) for i in input().split()]\\ndp0[0] = max(0, v[0])\\ndp1[0] = v[0] * x\\ni = 0\\nans = max(ans, dp1[i], dp2[i], dp0[i])\\nfor i in range(1, n):\\n    dp0[i] = max(0, dp0[i - 1] + v[i])\\n    dp1[i] = max(dp1[i - 1] + v[i] * x, dp0[i-1] + v[i] * x)\\n    dp2[i] = max(dp1[i-1] + v[i], dp2[i - 1] + v[i])\\n    ans = max(ans, dp1[i], dp2[i], dp0[i])\\nprint(ans)\", \"n, x = map(int, input().split())\\ncur1=cur2=cur=res=0\\nfor a in map(int, input().split()):\\n    cur1 = max(cur1 + a, 0)\\n    cur2 = max(cur2 + a * x, cur1)\\n    cur = max(cur + a, cur2)\\n    res = max(res, cur)\\nprint(res)\", \"N, X = list(map(int, input().split()))\\na_list = list(map(int, input().split()))\\n\\ndp = [[0] * 5 for _ in range(303030)]\\n\\nfor i in range(N):\\n    a = a_list[i]\\n    dp[i + 1][0] = 0\\n    dp[i + 1][1] = max(dp[i][1] + a, dp[i + 1][0])\\n    dp[i + 1][2] = max(dp[i][2] + a * X, dp[i + 1][1])\\n    dp[i + 1][3] = max(dp[i][3] + a, dp[i + 1][2])\\n    dp[i + 1][4] = max(dp[i][4], dp[i + 1][3])\\nprint(dp[N][4])\\n\", \"def main():\\n    n, x = map(int, input().split())\\n    arr = list(map(int, input().split()))\\n    dp = [[0] * 5 for _ in range(n)]\\n    dp[0] = [arr[0], arr[0] * x, 0]\\n    ans = max(dp[0])\\n    for i in range(1, n):\\n        dp[i][0] = max(dp[i - 1][0] + arr[i], arr[i])\\n        dp[i][1] = max(dp[i - 1][0] + arr[i] * x, arr[i] * x, dp[i - 1][1] + arr[i] * x)\\n        dp[i][2] = max(dp[i - 1][2] + arr[i], dp[i - 1][1] + arr[i])\\n        ans = max(ans, max(dp[i]))\\n    print(ans)\\n    return 0\\n\\nmain()\", \"n, x = list(map(int, input().split()))\\narr = [int(x) for x in input().split()]\\ndp = [[0 for _ in range(n)] for _ in range(3)]\\ndp[0][0] = max(arr[0], 0)\\ndp[1][0] = max(arr[0] * x, 0)\\ndp[2][0] = max(arr[0], 0)\\nanswer = max(dp[0][0], dp[1][0], dp[2][0])\\nfor i in range(1, n):\\n    dp[0][i] = max(dp[0][i - 1] + arr[i], arr[i], 0)\\n    dp[1][i] = max(dp[0][i - 1] + arr[i] * x, dp[1][i - 1] + arr[i] * x, arr[i] * x, 0)\\n    dp[2][i] = max(dp[1][i - 1] + arr[i], dp[2][i - 1] + arr[i], arr[i], 0)\\n    answer = max(answer, dp[0][i], dp[1][i], dp[2][i])\\nprint(answer)\\n\", \"#  =========     /\\\\       /|    |====/|\\n#      |        /  \\\\       |    |   / |\\n#      |       /____\\\\      |    |  /  |\\n#      |      /      \\\\     |    | /   |\\n#  ========= /        \\\\  =====  |/====|  \\n#  code\\nfrom collections import Counter\\nfrom math import gcd\\n\\ndef __starting_point():\\n    n,x = map(int,input().split())\\n    a = list(map(int,input().split()))\\n    \\n    dp = [ [-1,-1,-1] for i in range(n)]\\n\\n    dp[0][0] = a[0]\\n    dp[0][1] = x*a[0]\\n    dp[0][2] = a[0]\\n    m = max(dp[0][0],dp[0][1],dp[0][2],0)\\n    for i in range(1,n):\\n        dp[i][0] = max(dp[i-1][0]+a[i],a[i])\\n        dp[i][1] = max(dp[i-1][1] + x*a[i],x*a[i],dp[i-1][0]+x*a[i])\\n        dp[i][2] = max(dp[i-1][1] + a[i],a[i],dp[i-1][2]+a[i])\\n        m = max(max(dp[i]),m)\\n    print(m)\\n__starting_point()\", \"n, x = list(map(int,input().split()))\\nl = list(map(int,input().split()))\\nb = [0] * n\\nf = [0] * n\\npref = [0] * n\\npref[0] = l[0]\\nfor i in range(1, n):\\n\\tpref[i] = pref[i - 1] + l[i]\\nb[0] = x * l[0]\\nmini = 0\\nfor i in range(1, n):\\n\\tmini = min(mini, pref[i - 1])\\n\\tb[i] = x * l[i] + max(b[i - 1], pref[i - 1] - mini)\\nf[n - 1] = l[n - 1] * x\\nmaksi = pref[n - 1]\\nfor i in range(1, n):\\n\\tj = n - i - 1\\n\\tmaksi = max(maksi, pref[j])\\n\\tf[j] = x * l[j] + max(f[j + 1], maksi - pref[j])\\nwyn = - 100000000000000000000000\\nfor i in range(n):\\n\\twyn = max(wyn, f[i] + b[i] - x * l[i])\\nmini = 0\\nwyn1 = -100000000000000000000000\\nfor i in range(n):\\n\\tmini = min(mini, pref[i])\\n\\twyn1 = max(wyn1, pref[i] - mini)\\nprint(max(wyn, wyn1))\", \"def main():\\n    n, x = list(map(int, input().split()))\\n    a = list(map(int, input().split()))\\n\\n    dp = [[0, 0, 0] for _ in range(n)]\\n    dp[0][0] = max(0, a[0])\\n    dp[0][1] = max(0, x * a[0])\\n    answer = max(dp[0])\\n\\n    for i in range(1, n):\\n        dp[i][0] = max(dp[i - 1][0] + a[i], a[i])\\n        dp[i][1] = max(dp[i - 1][1] + x * a[i], x * a[i],\\n                       dp[i - 1][0] + x * a[i])\\n        dp[i][2] = max(dp[i - 1][2] + a[i], dp[i - 1][1] + a[i])\\n        answer = max(answer, *dp[i])\\n\\n    print(answer)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n,x=list(map(int,input().split())) \\na=list(map(int,input().split())) \\ndp=[[0 for i in range(3)] for j in range(n+1)]\\na=[0]+a\\n#3 dps lagenge >:|)\\nres=0\\nfor i in range(1,n+1):\\n    dp[i][0]= max(0,dp[i-1][0]+a[i],a[i]) #current le ya na le\\n    dp[i][1]=max(0,dp[i-1][0]+a[i]*x,dp[i-1][1]+a[i]*x,a[i]*x) #check and see which gives the best ans\\n    dp[i][2]= max(0,a[i],dp[i-1][0]+a[i],dp[i-1][1]+a[i],dp[i-1][2]+a[i]) #main dp\\n    res=max(res,dp[i][0],dp[i][1],dp[i][2])\\n    #print(dp)\\nprint(res)\\n\\n\", \"n,x=map(int, input().split())\\nA=list(map(int,input().split()))\\nDP=[[0]*3 for _ in range(n+1)]\\nans=0\\nfor i in range(1,n+1):\\n    DP[i][0]=max(DP[i-1][0]+A[i-1],A[i-1])\\n    DP[i][1]=max(DP[i-1][0]+A[i-1]*x,DP[i-1][1]+A[i-1]*x,A[i-1]*x)\\n    DP[i][2]=max(DP[i-1][1]+A[i-1],DP[i-1][2]+A[i-1],A[i-1])\\n    ans=max(ans,max(DP[i]))\\nprint(ans)\", \"d1, d2, d3, d4 = 0, 0, 0, 0\\ne1, e2, e3, e4 = 0, 0, 0, 0\\nn, x = map(int, input().split())\\nA = list(map(int, input().split())) + [0]\\nfor a in A:\\n    e1 = max(a, d1 + a)\\n    e2 = max(x*a, d1 + x*a, d2 + x*a)\\n    e3 = max(e1, d2 + a, d3 + a)\\n    e4 = max(d1, d2, d3, d4, a)\\n    d1, d2, d3, d4 = e1, e2, e3, e4\\nprint(d4)\", \"def solve():\\n    N, X = map(int, input().split())\\n    A = [int(k) for k in input().split()]\\n    \\n    ans = 0\\n    cur_max1 = 0\\n    cur_max2 = 0\\n    cur_max3 = 0\\n    \\n    for a in A:\\n        #max sum subarray\\n        '''\\n        if A[i] > cur_max + A[i]:\\n            cur_max = A[i]\\n        else:\\n            cur_max += A[i]'''\\n        \\n        # normal max sum subarray\\n        cur_max1 = max(a, cur_max1 + a)\\n        # multiply by X\\n        cur_max2 = max(a*X, a*X + cur_max2, cur_max1)\\n        # max sum subarray with previous sum multiplied by X\\n        cur_max3 = max(a, cur_max3 + a, cur_max2)\\n            \\n        ans = max(ans, cur_max1, cur_max2, cur_max3, 0)\\n    \\n    print (ans)\\n    \\ndef __starting_point():  \\n    solve()\\n__starting_point()\", \"def printarr(dp):\\n    for i in dp:\\n        print(*i)\\n\\nn,m=list(map(int,input().split()))\\na=[0] + list(map(int,input().split()))\\ndp=[[0 ,0 ,0] for i in range(n+1)]\\nma=-1\\nfor i in range(1,n+1):\\n    dp[i][0]=max(dp[i-1][0] + a[i],0)\\n    dp[i][1]=max(dp[i-1][1] + a[i]*m, dp[i-1][0] + a[i]*m)\\n    dp[i][2]=max(dp[i-1][2] + a[i] ,a[i] + dp[i-1][1])\\n    ma=max(dp[i][0],dp[i][1],dp[i][2],ma)\\n# printarr(dp)    \\nprint(ma)    \\n\", \"def find(A, x):\\n    maxi, c1, c2, c3 = 0, 0, 0, 0\\n    for i in range(0, len(A)):\\n        c1 = max([c1 + A[i], 0])\\n        c2 = max([c1, c2 + A[i] * x])\\n        c3 = max([c2, c3 + A[i]])\\n        maxi = max([maxi, c1, c2, c3])\\n    return maxi\\n\\ninp = lambda cast=int: list(map(cast, input().split()))\\nn, x = inp()\\nA = [0] + inp()\\nprint(find(A, x))\", \"def find(A, x):\\n    maxi, c1, c2, c3 = 0, 0, 0, 0\\n    for i in range(0, len(A)):\\n        c11 = max([c1, 0]) + A[i]\\n        c22 = max([c1, c2, 0]) + A[i] * x\\n        c33 = max([c2, c3, 0]) + A[i]\\n        c1, c2, c3 = c11, c22, c33\\n        maxi = max([maxi, c1, c2, c3])\\n    return maxi\\n\\ninp = lambda cast=int: list(map(cast, input().split()))\\nn, x = inp()\\nA = [0] + inp()\\nprint(find(A, x))\", \"def solve():\\n    n, x = list(map(int, input().split()))\\n    a = [0] + list(map(int, input().split()))\\n    max_val = 0\\n    dp1 = [0] * (n + 1)\\n    for i in range(1, n + 1):\\n        dp1[i] = max(dp1[i-1] + a[i], a[i])\\n        max_val = max(max_val, dp1[i])\\n\\n    dp2 = [0] * (n + 1)\\n    for i in range(1, n + 1):\\n        dp2[i] = max(dp1[i-1] + a[i] * x, dp2[i-1] + a[i] * x, a[i] * x)\\n        max_val = max(max_val, dp2[i])\\n\\n    dp3 = [0] * (n + 1)\\n    for i in range(1, n + 1):\\n        dp3[i] = max(dp2[i-1] + a[i], dp3[i-1] + a[i], a[i])\\n        max_val = max(max_val, dp3[i])\\n\\n    print(max_val)\\n\\nsolve()\\n\", \"import sys\\ninput = sys.stdin.readline\\n\\nn,x=list(map(int,input().split()))\\nA=list(map(int,input().split()))\\n\\nSUM=[0]\\n\\nfor a in A:\\n    SUM.append(SUM[-1]+a)\\n\\nMAXLIST=[SUM[0]]\\nMINLIST=[SUM[0]]\\n\\nfor i in range(1,n+1):\\n    MAXLIST.append(max(MAXLIST[-1],SUM[i]))\\n    MINLIST.append(min(MINLIST[-1],SUM[i]))\\n\\nMAXLIST_INV=[SUM[-1]]\\nMINLIST_INV=[SUM[-1]]\\n\\nfor i in range(n-1,-1,-1):\\n    MAXLIST_INV.append(max(MAXLIST_INV[-1],SUM[i]))\\n    MINLIST_INV.append(min(MINLIST_INV[-1],SUM[i]))\\n\\nMAXLIST_INV=MAXLIST_INV[::-1]\\nMINLIST_INV=MINLIST_INV[::-1]\\n\\n\\nif x>0:\\n    \\n    ANS=0\\n   \\n    for i in range(n+1):\\n        base=SUM[i]\\n        MINUS=MINLIST[i]\\n\\n        ANS=max(ANS,(base-MINUS)*x)\\n\\n    print(ANS)\\n\\nelse:\\n\\n    ANS=0\\n    MAX=0\\n    MIN=0\\n    MINUS=0\\n    NOWMINUS=0\\n   \\n    for i in range(n+1):\\n        base=SUM[i]\\n        PLUS=MAXLIST_INV[i]#getvalues(i,n+2,0,0,seg_el)\\n\\n        ANS=max(ANS,NOWMINUS+PLUS-base+base*x)\\n\\n        MIN=min(MIN,SUM[i])\\n        \\n        if NOWMINUS<=SUM[i]-MIN+SUM[i]*(-x):\\n            NOWMINUS=SUM[i]-MIN+SUM[i]*(-x)\\n            MAX=SUM[i]\\n\\n\\n    print(ANS)  \\n\", \"import sys\\ninput = sys.stdin.readline\\n\\nn,x=list(map(int,input().split()))\\nA=list(map(int,input().split()))\\n\\nDP0=[0]*(n+1)\\nDP1=[0]*(n+1)\\nDP2=[0]*(n+1)\\n\\nfor i in range(n):\\n    DP0[i]=max(DP0[i-1]+A[i],A[i],0)\\n    DP1[i]=max(DP0[i-1]+A[i]*x,DP1[i-1]+A[i]*x,DP0[i])\\n    DP2[i]=max(DP2[i-1]+A[i],DP1[i-1]+A[i],DP1[i])\\n\\nprint(max(DP2))\\n\", \"\\nn,m = list(map(int,input().split()))\\na = list(map(int,input().split()))\\ndef factiry(arr,mul):\\n    curMax,mulMax,gloMax,cur = 0,0,0,0\\n    for i in range(n):\\n        curMax=max(arr[i]+curMax,0)\\n        mulMax = max(mulMax+(arr[i]*mul),curMax)\\n        cur = max(cur+arr[i],mulMax)\\n        gloMax = max(gloMax,cur)\\n    return (gloMax)\\ntotal = factiry(a,m)\\nprint(total)\\n\\n\\n\", \"n, x = [int(i) for i in input().split()]\\nA = [int(i) for i in input().split()]\\ndp = [[-10**18 for i in range(5)] for j in range(len(A))]\\n\\nfor i in range(n-1, -1, -1):\\n    if 1:\\n        nxt = [0, 0, 0, 0, 0]\\n        if i!=n-1:\\n            nxt = dp[i+1]\\n        coeff = [0, 1, x, 1, 0]\\n        for j in range(5):\\n            for xx in range(j, len(coeff)):\\n                dp[i][j] = max(dp[i][j], coeff[xx]*A[i] + nxt[xx])\\n        \\n        \\n\\nprint(max(dp[0]))\\n\", \"# AC\\nimport sys\\nfrom math import gcd\\n\\n\\nclass Main:\\n    def __init__(self):\\n        self.buff = None\\n        self.index = 0\\n\\n    def __next__(self):\\n        if self.buff is None or self.index == len(self.buff):\\n            self.buff = sys.stdin.readline().split()\\n            self.index = 0\\n        val = self.buff[self.index]\\n        self.index += 1\\n        return val\\n\\n    def next_int(self):\\n        return int(next(self))\\n\\n    def solve(self):\\n        n = self.next_int()\\n        k = self.next_int()\\n        x = [self.next_int() for _ in range(0, n)]\\n        ans = 0\\n        dp = (0, 0, 0)\\n        for xx in x:\\n            d0 = max(0, dp[0]) + xx\\n            d1 = max(0, dp[0], dp[1]) + xx * k\\n            d2 = max(0, dp[0], dp[1], dp[2]) + xx\\n            ans = max(ans, d0, d1, d2)\\n            dp = (d0, d1, d2)\\n        print(ans)\\n\\n\\ndef __starting_point():\\n    Main().solve()\\n\\n__starting_point()\"]",
  "input_output": "{\n  \"inputs\": [\n    \"5 -2\\n-3 8 -2 1 -6\\n\",\n    \"12 -3\\n1 3 3 7 1 3 3 7 1 3 3 7\\n\",\n    \"5 10\\n-1 -2 -3 -4 -5\\n\",\n    \"10 100\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n\",\n    \"3 0\\n1 -10 2\\n\",\n    \"5 0\\n5 -10 -10 -10 6\\n\",\n    \"5 0\\n-12 10 -9 10 -12\\n\",\n    \"5 0\\n-3 8 -2 1 -6\\n\",\n    \"5 -2\\n-5 5 -5 5 5\\n\",\n    \"5 0\\n10 -5 10 -4 7\\n\",\n    \"5 0\\n100 -2 -3 -4 5\\n\",\n    \"5 -1\\n-3 3 -5 0 -5\\n\",\n    \"8 -5\\n-1 1 -4 0 1 -5 2 0\\n\",\n    \"6 -1\\n-1 1 -1 1 -1 1\\n\",\n    \"7 0\\n5 -5 -5 -5 5 5 5\\n\",\n    \"5 0\\n1 -1 -2 3 -4\\n\",\n    \"5 0\\n1 -10 2 -10 3\\n\",\n    \"12 0\\n516886745 863558529 725534320 -476894082 -367873680 984444967 -179610789 -226927004 -433201102 -328480313 836969657 -860311698\\n\",\n    \"8 0\\n-2 -3 4 -1 -2 1 5 -3\\n\",\n    \"5 0\\n0 -2 1 -4 1\\n\",\n    \"6 0\\n100 100 100 -10000 100 -10000\\n\",\n    \"5 0\\n1 2 -3 4 5\\n\",\n    \"6 0\\n1 -5 2 -7 -7 3\\n\",\n    \"20 -45\\n258724997 -785871818 782985138 -634742565 -441581905 -805809066 280018540 -580223434 111100989 261073170 -228599873 -952789056 -546984180 63225670 928739598 -722252666 884612638 745266043 -890049463 -945276047\\n\",\n    \"4 -2\\n-1 1 -2 -3\\n\",\n    \"5 0\\n1 2 3 -999999 10\\n\",\n    \"4 -1\\n-1 1 -1 3\\n\",\n    \"1 10\\n-1\\n\",\n    \"5 -2\\n10 -3 10 -2 -2\\n\",\n    \"17 -35\\n138863522 -763922306 -747654041 62569781 913789268 51272833 508697810 773008119 -977056807 687653428 109017489 19592255 -861227612 -876222938 657271514 -395334151 -745198581\\n\",\n    \"4 0\\n-3 4 -1 9\\n\",\n    \"14 0\\n-13 -12 4 -12 21 -1 -17 21 3 4 21 -3 -5 -4\\n\",\n    \"5 -1\\n-2 -4 5 -3 -4\\n\",\n    \"5 -1\\n-5 -2 6 -3 -5\\n\",\n    \"10 -3\\n0 -8 7 -2 -10 -10 7 1 7 -8\\n\",\n    \"42 0\\n286046708 405034560 -729242288 -594215986 -417878652 197367358 -252467864 -633931002 396498018 -511564535 -989028451 133570042 -189524845 -823874429 -29495943 609283144 349227466 -228464789 -326269641 -837429605 310547279 27725681 -167613209 -86658444 900798243 607258117 280296177 -521198948 862072118 -758282415 -801169109 892055264 46442426 -23191339 -34045601 -537875046 538522323 -831256376 -700385529 758255934 -265266910 -962343358\\n\",\n    \"26 0\\n2 -6 0 6 -4 4 -2 -1 8 1 3 -10 7 -4 8 8 9 -8 -5 8 8 -8 4 3 -7 5\\n\",\n    \"4 0\\n-1000 5 -3 5\\n\",\n    \"40 -98\\n67397987 -343838159 -618322596 -546414490 293066140 -773772966 277974552 -434260219 -791222310 -340023233 -737934384 910703436 -308962211 735427170 -284205825 955071831 926268695 915895023 -442261754 -165237941 -739567764 -160138112 98200520 143131806 -205877346 -473890188 714869937 797682377 -395221452 551109182 -760816208 -244257455 895516323 -163654048 633273357 469354271 -419989073 -700814005 -939790951 694327902\\n\",\n    \"7 -2\\n-1000 999 -999 -1 -2 -3 10\\n\",\n    \"5 0\\n-8 3 -3 5 -4\\n\",\n    \"5 0\\n1 2 -3 -4 6\\n\",\n    \"3 0\\n5 -5 5\\n\",\n    \"1 0\\n1\\n\",\n    \"5 0\\n100 -1 -2 -3 5\\n\",\n    \"1 0\\n100\\n\",\n    \"21 -1\\n369656457 983010976 579153117 966986334 -112879188 -583181121 606082142 63045074 -363741696 589071324 -328685035 755235379 909933454 541317219 450989416 -709630451 651403110 796187891 467448699 943322585 -963217967\\n\",\n    \"1 1\\n1\\n\",\n    \"5 0\\n1 2 -3 -4 5\\n\",\n    \"8 -7\\n0 -8 2 -4 0 9 -9 -3\\n\",\n    \"3 0\\n9 -8 9\\n\",\n    \"4 -2\\n-4 3 -7 -1\\n\",\n    \"5 -1\\n1 -10 10 -10 7\\n\",\n    \"8 -2\\n-5 -3 -1 10 -2 -6 8 9\\n\",\n    \"12 0\\n1 3 -77 7 -77 3 3 7 1 3 3 7\\n\",\n    \"8 -1\\n4 -3 -20 -1 20 -20 -2 10\\n\",\n    \"4 -4\\n-6 5 -1 -9\\n\",\n    \"4 0\\n-100 10 -100 10\\n\",\n    \"5 0\\n1 -2 -3 4 -5\\n\",\n    \"4 -2\\n-7 7 -3 -7\\n\",\n    \"10 -56\\n40 -76 8 39 -23 38 -82 -41 -15 58\\n\",\n    \"6 -1\\n-5 1 2 -3 4 -5\\n\",\n    \"21 0\\n-256 355 198 397 -970 -868 -697 -998 572 -271 358 923 176 -27 988 -956 677 -267 786 -157 363\\n\",\n    \"4 0\\n6 7 -10 4\\n\",\n    \"8 -4\\n-10 -9 10 -10 -5 10 -5 6\\n\",\n    \"59 -43\\n0 -19 -25 96 -4 -34 59 23 60 33 51 -62 -97 -59 -89 -42 65 33 49 49 68 -74 23 20 15 -100 58 47 -89 93 -37 39 -19 66 -96 -43 -38 -57 58 -13 -19 79 -74 84 -77 44 -84 76 -61 23 -15 -13 -2 -86 -27 38 42 -90 -50\\n\",\n    \"9 -2\\n-9 7 -6 -3 -5 -6 7 -8 1\\n\",\n    \"5 0\\n-3 9 -5 1 10\\n\",\n    \"3 0\\n1 -41 1\\n\",\n    \"1 -5\\n-5\\n\",\n    \"9 0\\n-6 0 2 -1 -4 -8 -10 2 -8\\n\",\n    \"6 -6\\n77 -30 -5 -33 -67 -76\\n\",\n    \"8 1\\n-7 9 -3 0 5 8 -4 3\\n\",\n    \"3 0\\n5 -10 5\\n\",\n    \"6 0\\n-10 0 9 -4 -7 3\\n\",\n    \"3 -6\\n-9 -3 9\\n\",\n    \"5 -2\\n-4 -3 6 -7 2\\n\",\n    \"8 -1\\n-1 -2 -3 6 -1 -2 -3 100\\n\",\n    \"9 0\\n-10 8 -6 3 -4 9 -5 -8 -8\\n\",\n    \"5 -1\\n-3 3 -3 3 -3\\n\",\n    \"5 0\\n-12 11 -9 10 -12\\n\",\n    \"1 59\\n402422091\\n\",\n    \"9 -6\\n-9 8 -10 4 -10 -10 -9 -7 -8\\n\",\n    \"1 0\\n-5\\n\",\n    \"3 0\\n3 -1 2\\n\",\n    \"3 2\\n-8 8 -1\\n\",\n    \"6 0\\n-3 2 -3 7 3 9\\n\",\n    \"9 0\\n-8 10 5 -9 6 -5 -9 7 -7\\n\",\n    \"3 0\\n1 -1 1\\n\",\n    \"1 1\\n100\\n\",\n    \"5 0\\n5 1 -5 6 2\\n\",\n    \"1 -7\\n10\\n\",\n    \"4 -1\\n-6 6 0 -9\\n\",\n    \"4 0\\n3 -6 -3 2\\n\",\n    \"4 0\\n10 -7 2 4\\n\",\n    \"8 -7\\n-9 9 -2 -10 -9 -8 1 10\\n\",\n    \"1 10\\n10\\n\",\n    \"1 4\\n7\\n\",\n    \"7 0\\n0 -4 -2 4 -6 8 -3\\n\",\n    \"6 5\\n-100 -100 -100 -100 -100 1000\\n\",\n    \"5 -1\\n5 -10 8 -10 -9\\n\",\n    \"9 0\\n-10 3 4 -8 -8 -4 -1 5 4\\n\",\n    \"5 65\\n344 -333 -155 758 -845\\n\",\n    \"4 0\\n1 -2 -3 3\\n\",\n    \"4 0\\n-9 8 -6 8\\n\",\n    \"1 6\\n5\\n\",\n    \"6 0\\n1 -2 -3 3 -8 -2\\n\",\n    \"9 -2\\n192 805 -674 966 -220 50 647 39 -691\\n\",\n    \"6 -2\\n-9 1 6 -7 -4 -1\\n\",\n    \"5 -1\\n-5 4 -10 10 -1\\n\",\n    \"10 -2\\n-7 -4 10 -9 -5 -9 -2 -8 3 -9\\n\",\n    \"7 0\\n9 8 1 -3 7 9 8\\n\",\n    \"3 -1\\n1 -9 -6\\n\",\n    \"7 0\\n1 -2 -3 3 -8 -2 7\\n\",\n    \"9 0\\n-8 -6 -8 3 -9 -6 5 4 -3\\n\",\n    \"1 -1\\n-1\\n\",\n    \"10 0\\n-8 5 -4 -7 9 2 -8 -8 2 0\\n\",\n    \"7 -1\\n0 -9 15 -5 15 -9 0\\n\",\n    \"12 0\\n-78 -23 -16 4 -12 -8 22 79 -52 26 19 -3\\n\",\n    \"3 -2\\n-3 3 1\\n\",\n    \"8 0\\n-1 2 -1 1 -1 -2 2 0\\n\",\n    \"1 -1\\n1\\n\",\n    \"1 1\\n-1\\n\",\n    \"5 1\\n2 -2 0 1 0\\n\",\n    \"2 -2\\n-2 2\\n\",\n    \"1 2\\n5\\n\",\n    \"5 0\\n-12 10 -10 10 -12\\n\"\n  ],\n  \"outputs\": [\n    \"22\\n\",\n    \"42\\n\",\n    \"0\\n\",\n    \"1000000000000\\n\",\n    \"3\\n\",\n    \"11\\n\",\n    \"20\\n\",\n    \"9\\n\",\n    \"25\\n\",\n    \"23\\n\",\n    \"105\\n\",\n    \"13\\n\",\n    \"43\\n\",\n    \"3\\n\",\n    \"20\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"3090424561\\n\",\n    \"10\\n\",\n    \"2\\n\",\n    \"400\\n\",\n    \"12\\n\",\n    \"5\\n\",\n    \"161916758521\\n\",\n    \"11\\n\",\n    \"16\\n\",\n    \"5\\n\",\n    \"0\\n\",\n    \"26\\n\",\n    \"85662026916\\n\",\n    \"13\\n\",\n    \"70\\n\",\n    \"12\\n\",\n    \"14\\n\",\n    \"88\\n\",\n    \"3171737624\\n\",\n    \"49\\n\",\n    \"10\\n\",\n    \"397915082781\\n\",\n    \"3019\\n\",\n    \"8\\n\",\n    \"9\\n\",\n    \"10\\n\",\n    \"1\\n\",\n    \"105\\n\",\n    \"100\\n\",\n    \"8993986588\\n\",\n    \"1\\n\",\n    \"8\\n\",\n    \"93\\n\",\n    \"18\\n\",\n    \"19\\n\",\n    \"27\\n\",\n    \"43\\n\",\n    \"34\\n\",\n    \"52\\n\",\n    \"45\\n\",\n    \"20\\n\",\n    \"5\\n\",\n    \"27\\n\",\n    \"8610\\n\",\n    \"10\\n\",\n    \"4121\\n\",\n    \"17\\n\",\n    \"107\\n\",\n    \"19376\\n\",\n    \"54\\n\",\n    \"20\\n\",\n    \"2\\n\",\n    \"25\\n\",\n    \"4\\n\",\n    \"1343\\n\",\n    \"19\\n\",\n    \"10\\n\",\n    \"12\\n\",\n    \"81\\n\",\n    \"22\\n\",\n    \"112\\n\",\n    \"17\\n\",\n    \"9\\n\",\n    \"21\\n\",\n    \"23742903369\\n\",\n    \"308\\n\",\n    \"0\\n\",\n    \"5\\n\",\n    \"16\\n\",\n    \"21\\n\",\n    \"22\\n\",\n    \"2\\n\",\n    \"100\\n\",\n    \"14\\n\",\n    \"10\\n\",\n    \"15\\n\",\n    \"5\\n\",\n    \"16\\n\",\n    \"223\\n\",\n    \"100\\n\",\n    \"28\\n\",\n    \"12\\n\",\n    \"5000\\n\",\n    \"27\\n\",\n    \"16\\n\",\n    \"49270\\n\",\n    \"4\\n\",\n    \"16\\n\",\n    \"30\\n\",\n    \"4\\n\",\n    \"3827\\n\",\n    \"31\\n\",\n    \"24\\n\",\n    \"88\\n\",\n    \"42\\n\",\n    \"16\\n\",\n    \"10\\n\",\n    \"12\\n\",\n    \"1\\n\",\n    \"16\\n\",\n    \"35\\n\",\n    \"146\\n\",\n    \"10\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"6\\n\",\n    \"10\\n\",\n    \"20\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1155/D",
  "starter_code": ""
}