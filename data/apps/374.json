{
  "task_id": "APPS/374",
  "problem_id": 374,
  "prompt": "Bandits appeared in the city! One of them is trying to catch as many citizens as he can.\n\nThe city consists of $n$ squares connected by $n-1$ roads in such a way that it is possible to reach any square from any other square. The square number $1$ is the main square.\n\nAfter Sunday walk all the roads were changed to one-way roads in such a way that it is possible to reach any square from the main square.\n\nAt the moment when the bandit appeared on the main square there were $a_i$ citizens on the $i$-th square. Now the following process will begin. First, each citizen that is currently on a square with some outgoing one-way roads chooses one of such roads and moves along it to another square. Then the bandit chooses one of the one-way roads outgoing from the square he is located and moves along it. The process is repeated until the bandit is located on a square with no outgoing roads. The bandit catches all the citizens on that square.\n\nThe bandit wants to catch as many citizens as possible; the citizens want to minimize the number of caught people. The bandit and the citizens know positions of all citizens at any time, the citizens can cooperate. If both sides act optimally, how many citizens will be caught?\n\n\n-----Input-----\n\nThe first line contains a single integer $n$\u00a0\u2014 the number of squares in the city ($2 \\le n \\le 2\\cdot10^5$).\n\nThe second line contains $n-1$ integers $p_2, p_3 \\dots p_n$ meaning that there is a one-way road from the square $p_i$ to the square $i$ ($1 \\le p_i < i$). \n\nThe third line contains $n$ integers $a_1, a_2, \\dots, a_n$\u00a0\u2014 the number of citizens on each square initially ($0 \\le a_i \\le 10^9$).\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the number of citizens the bandit will catch if both sides act optimally.\n\n\n-----Examples-----\nInput\n3\n1 1\n3 1 2\n\nOutput\n3\n\nInput\n3\n1 1\n3 1 3\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first example the citizens on the square $1$ can split into two groups $2 + 1$, so that the second and on the third squares will have $3$ citizens each.\n\nIn the second example no matter how citizens act the bandit can catch at least $4$ citizens.",
  "solutions": "[\"from collections import deque\\n\\nn = int(input())\\np = list(map(int,input().split()))\\na = list(map(int,input().split()))\\nedge = [[] for i in range(n)]\\nfor i in range(n-1):\\n    edge[p[i]-1].append(i+1)\\n\\n\\ndp = [0 for i in range(n)]\\nsize = [not edge[v] for v in range(n)]\\n\\nres = []\\ndeq = deque([0])\\nwhile deq:\\n    v = deq.popleft()\\n    res.append(v)\\n    for nv in edge[v]:\\n        deq.append(nv)\\n\\nres = res[::-1]\\n\\nfor v in res:\\n    tmp = -1\\n    S = 0\\n    for nv in edge[v]:\\n        tmp = max(tmp,dp[nv])\\n        size[v] += size[nv]\\n        S += a[nv]\\n\\n    if not edge[v]:\\n        dp[v] = a[v]\\n        continue\\n\\n    rest = tmp*size[v] - S\\n    if a[v]<=rest:\\n        dp[v] = tmp\\n    else:\\n        q = (a[v]-rest)//size[v]\\n        r = (a[v]-rest)%size[v]\\n        if r:\\n            dp[v] = tmp + q + 1\\n        else:\\n            dp[v] = tmp + q\\n    a[v] += S\\n\\nprint(dp[0])\", \"import sys\\ninput = sys.stdin.readline\\n#lev contains height from root,lower neighbour, higher neighbours\\n#lev[0] contains 0 (because it is the root), higher neighbours (=neighbours)\\nn=int(input())\\np=list(map(int,input().split()))\\np.insert(0,0)\\nfor i in range(1,n):\\n    p[i]-=1\\na=list(map(int,input().split()))\\ndata=[0]*n\\nfor i in range(n):\\n    data[i]=[0,a[i],True]\\ni=n-1\\nbiggest=0\\nwhile i>0:\\n    prev=p[i]\\n    if data[i][2]:\\n        data[i][0]+=1\\n    data[prev][0]+=data[i][0]\\n    data[prev][1]+=data[i][1]\\n    data[prev][2]=False\\n    biggest=max(biggest,1+(data[i][1]-1)//data[i][0])\\n    i-=1\\nbiggest=max(biggest,1+(data[0][1]-1)//data[0][0])\\nprint(biggest)\", \"import sys\\ninput = sys.stdin.readline\\n\\nn=int(input())\\nP=[1]+list(map(int,input().split()))\\nA=list(map(int,input().split()))\\n\\nfor i in range(n):\\n    P[i]-=1\\n\\nY=[1]*n\\nfor i in range(n):\\n    Y[P[i]]=0\\n\\n#print(Y)\\n\\nfor i in range(n-1,0,-1):\\n    Y[P[i]]+=Y[i]\\n\\nS=[a for a in A]\\nfor i in range(n-1,0,-1):\\n    S[P[i]]+=S[i]\\n\\nOK=sum(A)\\nNG=-1\\n\\nwhile OK-NG>1:\\n    mid=(OK+NG)//2\\n\\n    for i in range(n):\\n        if Y[i]*mid<S[i]:\\n            NG=mid\\n            break\\n    else:\\n        OK=mid\\n\\nprint(OK)\\n\\n    \\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\ng = [0] * n\\nfor i in range(n - 1):\\n    if type(g[a[i] - 1]) == int:\\n        g[a[i] - 1] = []\\n    g[a[i] - 1].append(i + 1)\\na = [int(x) for x in input().split()]\\nb = [0] * n\\nnow = [0] * n\\nfor i in range(n - 1, -1, -1):\\n    if g[i] == 0:\\n        b[i] = 1\\n        now[i] = a[i]\\n        continue\\n    maxi = 0\\n    for x in g[i]:\\n\\n        b[i] += b[x]\\n        if a[x] < 0:\\n            a[i] += a[x]\\n            a[x] = 0\\n        maxi = max(maxi, now[x])\\n    for x in g[i]:\\n        a[i] -= (maxi - now[x]) * b[x]\\n        now[x] = maxi\\n    now[i] = maxi\\n    if a[i] < 0:\\n        continue\\n    now[i] += (a[i] + b[i] - 1) // (b[i])\\n    a[i] -= (a[i] + b[i] - 1) // b[i] * b[i]\\n\\nprint(now[0])\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3\\n1 1\\n3 1 2\\n\",\n    \"3\\n1 1\\n3 1 3\\n\",\n    \"3\\n1 1\\n2 0 0\\n\",\n    \"2\\n1\\n487981126 805590708\\n\",\n    \"5\\n1 1 1 4\\n28 0 0 0 0\\n\",\n    \"2\\n1\\n91 0\\n\",\n    \"10\\n1 1 1 1 1 1 1 1 1\\n64 0 0 0 0 0 0 0 0 0\\n\",\n    \"50\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n51 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n71 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"2\\n1\\n3 0\\n\",\n    \"10\\n1 1 1 1 1 1 1 1 1\\n69 0 0 0 0 0 0 0 0 0\\n\",\n    \"50\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n29 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"2\\n1\\n96 0\\n\",\n    \"10\\n1 1 2 4 4 3 6 1 5\\n44 0 0 0 0 0 0 0 0 0\\n\",\n    \"50\\n1 1 2 3 1 2 4 6 3 7 7 5 12 13 7 7 4 10 14 8 18 14 19 22 11 4 17 14 11 12 11 18 19 28 9 27 9 7 7 13 17 24 21 9 33 11 44 45 33\\n67 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"100\\n1 2 1 2 2 5 3 8 9 4 4 7 2 4 6 3 13 2 10 10 17 15 15 9 17 8 18 18 29 7 1 13 32 13 29 12 14 12 24 21 12 31 4 36 5 39 33 6 37 40 2 29 39 42 18 40 26 44 52 22 50 49 1 21 46 59 25 39 38 42 34 45 3 70 57 60 73 76 38 69 38 24 30 40 70 21 38 16 30 41 40 31 11 65 9 46 3 70 85\\n50 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"2\\n1\\n3 0\\n\",\n    \"10\\n1 2 3 4 5 6 7 8 9\\n92 0 0 0 0 0 0 0 0 0\\n\",\n    \"50\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\\n73 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"100\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\\n62 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"2\\n1\\n10 0\\n\",\n    \"10\\n1 2 3 4 5 6 7 8 9\\n3 0 0 0 0 0 0 0 0 0\\n\",\n    \"50\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\\n60 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"100\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\\n58 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"2\\n1\\n74 73\\n\",\n    \"10\\n1 1 1 1 1 1 1 1 1\\n77 10 36 51 50 82 8 56 7 26\\n\",\n    \"50\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n65 78 71 17 56 55 65 58 64 71 23 22 82 99 79 54 10 6 52 68 99 40 21 100 47 11 72 68 13 45 1 82 73 60 51 16 28 82 17 64 94 39 58 62 99 7 92 95 13 92\\n\",\n    \"100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n0 0 63 70 92 75 4 96 52 33 86 57 53 85 91 62 23 0 28 37 41 69 26 64 7 100 41 19 70 60 1 50 12 98 62 45 77 15 72 25 84 70 38 28 21 58 51 23 40 88 34 85 36 95 65 14 4 13 98 73 93 78 70 29 44 73 49 60 54 49 60 45 99 91 19 67 44 42 14 10 83 74 78 67 61 91 92 23 94 59 36 82 61 33 59 59 80 95 25 33\\n\",\n    \"2\\n1\\n59 12\\n\",\n    \"10\\n1 1 1 1 1 1 1 1 1\\n9 52 36 0 19 79 13 3 89 31\\n\",\n    \"50\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n43 93 92 69 61 67 69 2 81 41 4 68 10 19 96 14 48 47 85 5 78 58 57 72 75 92 12 33 63 14 7 50 80 88 24 97 38 18 70 45 73 74 40 6 36 71 66 68 1 64\\n\",\n    \"100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n79 29 58 69 56 0 57 27 97 99 80 98 54 7 93 65 29 34 88 74 23 0 23 60 93 24 27 66 42 40 29 89 7 98 49 18 29 49 64 59 56 43 33 88 33 72 81 0 54 70 91 33 61 27 55 37 43 27 90 87 88 90 38 51 66 84 78 47 8 98 1 18 36 23 99 30 61 76 15 30 85 15 41 53 41 67 22 34 42 99 100 31 18 20 26 98 11 38 39 82\\n\",\n    \"2\\n1\\n48 32\\n\",\n    \"10\\n1 2 3 1 3 4 2 4 6\\n68 5 44 83 46 92 32 51 2 89\\n\",\n    \"50\\n1 2 1 4 1 2 1 8 4 1 9 10 9 11 4 7 14 3 10 2 11 4 21 11 12 17 2 2 10 29 13 1 11 4 5 22 36 10 5 11 7 17 12 31 1 1 42 25 46\\n13 58 22 90 81 91 48 25 61 76 92 86 89 94 8 97 74 16 21 27 100 92 57 87 67 8 89 61 22 3 86 0 95 89 9 59 88 65 30 42 33 63 67 46 66 17 89 49 60 59\\n\",\n    \"2\\n1\\n76 37\\n\",\n    \"10\\n1 2 3 4 5 6 7 8 9\\n68 35 94 38 33 77 81 65 90 71\\n\",\n    \"50\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\\n82 30 98 3 92 42 28 41 90 67 83 5 2 77 38 39 96 22 18 37 88 42 91 34 39 2 89 72 100 18 11 79 77 82 10 48 61 39 80 13 61 76 87 17 58 83 21 19 46 65\\n\",\n    \"2\\n1\\n83 79\\n\",\n    \"10\\n1 2 3 4 5 6 7 8 9\\n13 35 33 86 0 73 15 3 74 100\\n\",\n    \"50\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49\\n67 8 36 45 5 65 80 3 0 96 13 98 96 46 87 9 31 16 36 0 84 4 65 64 96 70 10 72 85 53 28 67 57 50 38 4 97 38 63 22 4 62 81 50 83 52 82 84 63 71\\n\",\n    \"2\\n1\\n472137027 495493860\\n\",\n    \"10\\n1 1 1 1 1 1 1 1 1\\n841306067 40156990 957137872 873138809 930194285 483020948 155552934 851771372 401782261 183067980\\n\",\n    \"2\\n1\\n39002084 104074590\\n\",\n    \"10\\n1 1 1 1 1 1 1 1 1\\n204215424 439630330 408356675 696347865 314256806 345663675 226463233 883526778 85214111 989916765\\n\",\n    \"2\\n1\\n529696753 688701773\\n\",\n    \"10\\n1 2 1 2 1 2 6 7 7\\n137037598 441752911 759804266 209515812 234899988 38667789 389711866 680023681 753276683 251101203\\n\",\n    \"2\\n1\\n978585177 622940364\\n\",\n    \"10\\n1 2 3 4 5 6 7 8 9\\n285667137 980023651 876517010 722834015 294393310 199165086 321915358 105753310 222692362 161158342\\n\",\n    \"2\\n1\\n293175439 964211398\\n\",\n    \"10\\n1 2 3 4 5 6 7 8 9\\n572824925 20293494 105606574 673623641 152420817 620499198 326794512 710530240 321931146 608064601\\n\",\n    \"3\\n1 1\\n0 0 0\\n\",\n    \"15\\n1 1 2 2 3 3 4 4 5 5 6 6 7 7\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"1293571834\\n\",\n    \"10\\n\",\n    \"91\\n\",\n    \"8\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"8\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"96\\n\",\n    \"11\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"92\\n\",\n    \"73\\n\",\n    \"62\\n\",\n    \"10\\n\",\n    \"3\\n\",\n    \"60\\n\",\n    \"58\\n\",\n    \"147\\n\",\n    \"82\\n\",\n    \"100\\n\",\n    \"100\\n\",\n    \"71\\n\",\n    \"89\\n\",\n    \"97\\n\",\n    \"100\\n\",\n    \"80\\n\",\n    \"181\\n\",\n    \"187\\n\",\n    \"113\\n\",\n    \"652\\n\",\n    \"2598\\n\",\n    \"162\\n\",\n    \"432\\n\",\n    \"2536\\n\",\n    \"967630887\\n\",\n    \"957137872\\n\",\n    \"143076674\\n\",\n    \"989916765\\n\",\n    \"1218398526\\n\",\n    \"759804266\\n\",\n    \"1601525541\\n\",\n    \"4170119581\\n\",\n    \"1257386837\\n\",\n    \"4112589148\\n\",\n    \"0\\n\",\n    \"2\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1436/D",
  "starter_code": ""
}