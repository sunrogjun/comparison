{
  "task_id": "APPS/310",
  "problem_id": 310,
  "prompt": "You are given a set of $2n+1$ integer points on a Cartesian plane. Points are numbered from $0$ to $2n$ inclusive. Let $P_i$ be the $i$-th point. The $x$-coordinate of the point $P_i$ equals $i$. The $y$-coordinate of the point $P_i$ equals zero (initially). Thus, initially $P_i=(i,0)$.\n\nThe given points are vertices of a plot of a piecewise function. The $j$-th piece of the function is the segment $P_{j}P_{j + 1}$.\n\nIn one move you can increase the $y$-coordinate of any point with odd $x$-coordinate (i.e. such points are $P_1, P_3, \\dots, P_{2n-1}$) by $1$. Note that the corresponding segments also change.\n\nFor example, the following plot shows a function for $n=3$ (i.e. number of points is $2\\cdot3+1=7$) in which we increased the $y$-coordinate of the point $P_1$ three times and $y$-coordinate of the point $P_5$ one time: [Image] \n\nLet the area of the plot be the area below this plot and above the coordinate axis OX. For example, the area of the plot on the picture above is 4 (the light blue area on the picture above is the area of the plot drawn on it).\n\nLet the height of the plot be the maximum $y$-coordinate among all initial points in the plot (i.e. points $P_0, P_1, \\dots, P_{2n}$). The height of the plot on the picture above is 3.\n\nYour problem is to say which minimum possible height can have the plot consisting of $2n+1$ vertices and having an area equal to $k$. Note that it is unnecessary to minimize the number of moves.\n\nIt is easy to see that any answer which can be obtained by performing moves described above always exists and is an integer number not exceeding $10^{18}$.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n, k \\le 10^{18}$) \u2014 the number of vertices in a plot of a piecewise function and the area we need to obtain.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum possible height of a plot consisting of $2n+1$ vertices and with an area equals $k$. It is easy to see that any answer which can be obtained by performing moves described above always exists and is an integer number not exceeding $10^{18}$.\n\n\n-----Examples-----\nInput\n4 3\n\nOutput\n1\n\nInput\n4 12\n\nOutput\n3\n\nInput\n999999999999999999 999999999999999986\n\nOutput\n1\n\n\n\n-----Note-----\n\nOne of the possible answers to the first example: [Image] \n\nThe area of this plot is 3, the height of this plot is 1.\n\nThere is only one possible answer to the second example: $M M$ \n\nThe area of this plot is 12, the height of this plot is 3.",
  "solutions": "[\"N, K = list(map(int, input().split()))\\n\\nprint((K+N-1)//N)\\n\", \"n, k = list(map(int, input().split()))\\n\\nprint((k + n - 1) // n)\\n\", \"n, k = list(map(int, input().split()))\\nh = k // n\\nif h * n < k:\\n    h += 1\\nprint(h)\\n\", \"n, k = list(map(int, input().split()))\\n\\nprint((k + n - 1) // n)\\n\", \"a,b=map(int,input().split(' '))\\nprint((b+a-1)//a)\", \"\\n\\n\\n\\nn, k = list(map(int, input().split()))\\n\\na, b, c = 0, k, 0\\n\\nwhile a < b:\\n    c = (a + b) // 2\\n    if c * n < k:\\n        a = c + 1\\n    else:\\n        b = c\\n\\nprint(a)\\n\", \"n, k = map(int, input().split())\\nprint((k + n - 1) // n)\", \"n,k=map(int,input().split())\\nprint(-(-k//n))\", \"USE_STDIO = False\\n\\nif not USE_STDIO:\\n    try: import mypc\\n    except: pass\\n\\ndef main():\\n    n, k = list(map(int, input().split(' ')))\\n    ans = (k + n - 1) // n\\n    print(ans)\\n\\ndef __starting_point():\\n    main()\\n\\n\\n\\n\\n__starting_point()\", \"n, k = list(map(int, input().split()))\\np = (k - 1) // n + 1\\nprint(p)\\n\", \"n,k=map(int,input().split())\\n\\nans=k//n\\nif(k%n):\\n    ans+=1\\nprint(ans)\", \"n, k = list(map(int , input().split()))\\ns = k // n\\nif k % n != 0:\\n    s += 1\\nprint(s)\\n\", \"n, m = list(map(int, input().split()))\\nprint(m // n + (1 if m % n else 0))\\n\", \"n,k = list(map(int,input().split()))\\nprint(-(-k//n))\\n\", \"#      \\nimport collections, atexit, math, sys, bisect \\n\\nsys.setrecursionlimit(1000000)\\ndef getIntList():\\n    return list(map(int, input().split()))    \\n\\ntry :\\n    #raise ModuleNotFoundError\\n    import numpy\\n    def dprint(*args, **kwargs):\\n        print(*args, **kwargs, file=sys.stderr)\\n    dprint('debug mode')\\nexcept ModuleNotFoundError:\\n    def dprint(*args, **kwargs):\\n        pass\\n\\n\\n\\ninId = 0\\noutId = 0\\nif inId>0:\\n    dprint('use input', inId)\\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\nif outId>0:\\n    dprint('use output', outId)\\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\n    atexit.register(lambda :sys.stdout.close())     #idle \\u4e2d\\u4e0d\\u4f1a\\u6267\\u884c atexit\\n    \\nN, K = getIntList()\\n\\nr=  K//N\\nif K%N!=0: r+=1\\n\\nprint(r)\\n\\n\\n\\n\\n\\n\\n\", \"a, b = list(map(int, input().split()))\\nprint((b+a-1)//a)\\n\", \"n, k = list(map(int, input().split()))\\nprint(k // n + (k % n != 0))\\n\", \"[n, k]=[int(i) for i in input().split()]\\nprint((k+n-1)//n)\", \"a,b = (list(map(int,input().split())))\\nprint((b+a-1)//a)\\n\", \"n, k = map(int, input().split())\\nq = 2 * n + 1\\np = k // n\\nif k % n:\\n    print(p + 1)\\nelse:\\n    print(p)\", \"import sys\\nf=sys.stdin\\nout=sys.stdout\\n\\nn,k=map(int,f.readline().rstrip('\\\\r\\\\n').split())\\nif k%n==0:\\n\\tout.write(str(k//n)+'\\\\n')\\nelse:\\n\\tout.write(str((k//n)+1)+'\\\\n')\", \"(n, k) = map(int, input().split())\\n\\nprint((k + n - 1) // n)\", \"n, k = list(map(int, input().split()))\\nif k % n == 0:\\n    print(k // n)\\nelse:\\n    print(k // n + 1)\\n\", \"n, k = map(int, input().strip().split(' '))\\n\\nif k % n == 0:\\n    print(k // n)\\nelse:\\n    print(k // n + 1)\", \"s = input().split()\\nn, k = int(s[0]), int(s[1])\\nt = k//n\\nif n*t==k:\\n  print(t)\\nelse:\\n  print(t+1)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4 3\\n\",\n    \"4 12\\n\",\n    \"999999999999999999 999999999999999986\\n\",\n    \"1000000000000000000 1000000000000000000\\n\",\n    \"1000000000000000000 999999999999999999\\n\",\n    \"999999999999999999 1000000000000000000\\n\",\n    \"1 1000000000000000000\\n\",\n    \"1 1\\n\",\n    \"1000000001 1000000000000000000\\n\",\n    \"4 10\\n\",\n    \"5 13\\n\",\n    \"24 3\\n\",\n    \"4 2\\n\",\n    \"6 10\\n\",\n    \"999 1001\\n\",\n    \"10 25\\n\",\n    \"4 15\\n\",\n    \"3 5\\n\",\n    \"4 6\\n\",\n    \"10 2\\n\",\n    \"4 14\\n\",\n    \"5 8\\n\",\n    \"5 5\\n\",\n    \"6 1\\n\",\n    \"4 11\\n\",\n    \"2 999999999999999\\n\",\n    \"2639396 2768849\\n\",\n    \"1 1234567\\n\",\n    \"7 9\\n\",\n    \"11111111111111111 12\\n\",\n    \"1887415157 2048\\n\",\n    \"3 8\\n\",\n    \"10 45\\n\",\n    \"12839719 1294012934\\n\",\n    \"999999999999999986 999999999999999999\\n\",\n    \"7 1000000000000000000\\n\",\n    \"3 999999999999999999\\n\",\n    \"312312 421412412412\\n\",\n    \"3 14\\n\",\n    \"3 11\\n\",\n    \"499999999999999182 999999999999999713\\n\",\n    \"5 7\\n\",\n    \"7 156\\n\",\n    \"2 13\\n\",\n    \"10 1025\\n\",\n    \"2 34\\n\",\n    \"846930886 1804289383\\n\",\n    \"7 99999999999999999\\n\",\n    \"11 117\\n\",\n    \"10 10000000000000005\\n\",\n    \"10 100000000000005\\n\",\n    \"3 1000000000000000000\\n\",\n    \"2 999999999999999995\\n\",\n    \"1 99999999999999999\\n\",\n    \"2 1\\n\",\n    \"2 3\\n\",\n    \"2 999999999999999990\\n\",\n    \"8 999999999999999997\\n\",\n    \"2 5\\n\",\n    \"5 1\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1000000000000000000\\n\",\n    \"1\\n\",\n    \"1000000000\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"500000000000000\\n\",\n    \"2\\n\",\n    \"1234567\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"101\\n\",\n    \"2\\n\",\n    \"142857142857142858\\n\",\n    \"333333333333333333\\n\",\n    \"1349332\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"23\\n\",\n    \"7\\n\",\n    \"103\\n\",\n    \"17\\n\",\n    \"3\\n\",\n    \"14285714285714286\\n\",\n    \"11\\n\",\n    \"1000000000000001\\n\",\n    \"10000000000001\\n\",\n    \"333333333333333334\\n\",\n    \"499999999999999998\\n\",\n    \"99999999999999999\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"499999999999999995\\n\",\n    \"125000000000000000\\n\",\n    \"3\\n\",\n    \"1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1036/A",
  "starter_code": ""
}