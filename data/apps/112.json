{
  "task_id": "APPS/112",
  "problem_id": 112,
  "prompt": "Absent-minded Masha got set of n cubes for her birthday.\n\nAt each of 6 faces of each cube, there is exactly one digit from 0 to 9. Masha became interested what is the largest natural x such she can make using her new cubes all integers from 1 to x.\n\nTo make a number Masha can rotate her cubes and put them in a row. After that, she looks at upper faces of cubes from left to right and reads the number.\n\nThe number can't contain leading zeros. It's not required to use all cubes to build a number.\n\nPay attention: Masha can't make digit 6 from digit 9 and vice-versa using cube rotations.\n\n\n-----Input-----\n\nIn first line integer n is given (1 \u2264 n \u2264 3)\u00a0\u2014 the number of cubes, Masha got for her birthday.\n\nEach of next n lines contains 6 integers a_{i}_{j} (0 \u2264 a_{i}_{j} \u2264 9)\u00a0\u2014 number on j-th face of i-th cube.\n\n\n-----Output-----\n\nPrint single integer\u00a0\u2014 maximum number x such Masha can make any integers from 1 to x using her cubes or 0 if Masha can't make even 1.\n\n\n-----Examples-----\nInput\n3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n\nOutput\n87\nInput\n3\n0 1 3 5 6 8\n1 2 4 5 7 8\n2 3 4 6 7 9\n\nOutput\n98\n\n\n-----Note-----\n\nIn the first test case, Masha can build all numbers from 1 to 87, but she can't make 88 because there are no two cubes with digit 8.",
  "solutions": "[\"n = int(input())\\na = sorted([list(map(int, input().split())) for i in range(n)])\\n\\nimport itertools\\nfor x in range(1,10**n):\\n  good = False\\n  s = str(x)\\n  for p in itertools.permutations(a, len(s)):\\n    good |= all([int(s[i]) in v for i, v in enumerate(p)])\\n  if not good:\\n    print(x-1)\\n    return\\n    \\nprint((10**n)-1)\", \"def gen(cur, used, x):\\n    pos.add(cur)\\n    if x == n:\\n        return\\n    for j in range(n):\\n        if not used[j]:\\n            for i in a[j]:\\n                if i != 0 or x != 0:\\n                    used[j] = True\\n                    gen(cur * 10 + i, used, x + 1)\\n                    used[j] = False\\n\\n\\nn = int(input())\\na = []\\nfor i in range(n):\\n    a.append(list(map(int, input().split())))\\npos = set()\\ngen(0, [False] * n, 0)\\nx = 1\\nwhile x in pos:\\n    x += 1\\nprint(x - 1)\\n\", \"n = int(input())\\ncs = []\\nfor i in range(n):\\n    cs.append([int(x) for x in input().split()])\\n\\nans = 0\\n\\n\\ndef can_make(num, cs):\\n    if num == 0:\\n        return True\\n    elif len(cs) == 0:\\n        return False\\n    cm = False\\n    for i in range(len(cs)):\\n        if num%10 in cs[i]:\\n            if can_make(num//10, cs[0:i]+cs[i+1:]):\\n                return True\\n    return False\\n        \\n    \\n    \\nfor i in range(1,1000):\\n    if can_make(i, cs):\\n        ans = i\\n    else:\\n        break\\n\\nprint(ans)\\n\", \"def f(m):\\n    m = list(map(int, list(str(m))))\\n    #print(m)\\n    for k in range(dd[n]):\\n        #print(d[k])\\n        cur = 0\\n        for j in range(n):\\n            kub = d[k][j] - 1\\n            if cur == len(m):\\n                return True\\n            if m[cur] in a[kub]:\\n                cur += 1\\n        if cur == len(m):\\n            return True\\n    return False\\n                \\n\\nn = int(input())\\na = [[], [], []]\\nfor i in range(n):\\n    a[i] = list(map(int, input().split()))\\nd = [[1, 2, 3], [2, 1, 3], [1, 3, 2], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\\ndd = [0, 0, 2, 6]\\nif n == 1:\\n    for j in range(1, 10):\\n        if j not in a[0]:\\n            print(j - 1)\\n            return\\nans = 0\\nwhile f(ans + 1):\\n    ans += 1\\n#print(f(88))\\nprint(ans)\\n\", \"\\n# -*- coding: utf-8 -*-\\n\\nimport math\\nimport collections\\nimport bisect\\nimport heapq\\nimport time\\nimport random\\nimport itertools\\nimport sys\\n\\n\\\"\\\"\\\"\\ncreated by shhuan at 2017/11/4 00:13\\n\\n\\\"\\\"\\\"\\n\\nN = int(input())\\n\\nA = []\\nfor i in range(N):\\n    A.append([int(x) for x in input().split()])\\n\\n\\ndef dfs(A, index, p):\\n    if index >= len(A):\\n        v = 0\\n        for u in p:\\n            v *= 10\\n            v += u\\n        return {v}\\n\\n    ans = set()\\n    for v in A[index]:\\n        ans |= dfs(A, index+1, p+[v])\\n    ans |= dfs(A, index+1, p)\\n\\n    return ans\\n\\nallNums = set()\\nfor a in itertools.permutations(A, len(A)):\\n    allNums |= dfs(a, 0, [])\\n\\nans = 0\\nfor i in range(1, max(allNums)+1):\\n    if i not in allNums:\\n        break\\n    ans = i\\n\\nprint(ans)\\n\\n\\n\\n\\n\\n\", \"q=int(input())\\na=[False for i in range(0,1002)]\\ns=[]\\nfor i in range(0,q):\\n    s.append(list(map(int,input().split())))\\nfor i in s:\\n    for j in i:\\n        a[j]=True\\nif q==2:\\n    for i in s[0]:\\n        for j in s[1]:\\n            a[i*10+j],a[j*10+i]=True,True\\nif q==3:\\n    for i in s[0]:\\n        for j in s[1]:\\n            a[i*10+j],a[j*10+i]=True,True\\n    for i in s[0]:\\n        for j in s[2]:\\n            a[i*10+j],a[j*10+i]=True,True\\n    for i in s[1]:\\n        for j in s[2]:\\n            a[i*10+j],a[j*10+i]=True,True\\n    for i in s[0]:\\n        for j in s[1]:\\n            for k in s[2]:\\n                a[k*100+i*10+j],a[k*100+j*10+i]=True,True\\n                a[k*10+i*100+j],a[k+j*10+i*100]=True,True\\n                a[k+i*10+j*100],a[k*10+i+j*100]=True,True\\nz=0\\nwhile (a[z+1]):\\n    z+=1\\nprint(z)\\n\", \"n = int(input())\\ndata = [[0] * 6 for i in range(n)]\\nfor i in range(n):\\n    data[i] = list(map(int, input().split()))\\nmb = set()\\nfor i in range(n):\\n    for j in range(6):\\n        mb.add(data[i][j])\\nfor i in range(n):\\n    for j in range(n):\\n        for k in range(6):\\n            for k2 in range(6):\\n                if(i != j):\\n                    mb.add(data[i][k] * 10 + data[j][k2])\\n                    mb.add(data[i][k] + data[j][k2] * 10)\\nif (n == 3):\\n    for k1 in range(6):\\n        for k2 in range(6):\\n            for k3 in range(6):\\n                mb.add(data[0][k] * 100 + data[1][k2] * 10 + data[2][k3])\\n                mb.add(data[0][k] * 100 + data[1][k2] + data[2][k3] * 10)\\n                mb.add(data[0][k] * 10 + data[1][k2] * 100 + data[2][k3])\\n                mb.add(data[0][k] + data[1][k2] * 100 + data[2][k3] * 10)\\n                mb.add(data[0][k] * 10 + data[1][k2] + data[2][k3] * 100)\\n                mb.add(data[0][k] + data[1][k2] * 10 + data[2][k3] * 100)\\ni = 1\\nwhile i in mb:\\n    i += 1\\nprint(i - 1)\", \"n = int(input())\\na = []\\nalll = []\\nfor i in range(n):\\n    a += [list(map(str, input().split()))]\\na += [[]]\\na += [[]]\\nt = 1\\nwhile t != 1000:\\n    dt = str(t)\\n    if len(dt) == 1 and dt in a[0] + a[1] + a[2]:\\n        pass\\n    elif len(dt) == 1:\\n        break\\n    if len(dt) == 2:\\n        tt = False\\n        for i in range(3):\\n            j, k = 0, 0\\n            while j == i:\\n                j += 1\\n            while k == i or k == j:\\n                k += 1\\n            if dt[0] in a[i] and (dt[1] in a[j] or dt[1] in a[k]):\\n                tt = True\\n        if not tt:\\n            break\\n    if len(dt) == 3:\\n        tt = False\\n        for i in range(3):\\n            for j in range(i + 1, 3):\\n                k = 0\\n                while k == i or k == j:\\n                    k += 1\\n                if dt[0] in a[i] and dt[1] in a[j] and dt[2] in a[k]:\\n                    tt = True\\n        if not tt:\\n            break\\n\\n    t += 1\\nprint(t - 1)\\n\", \"import itertools\\n\\nkostki = []\\n\\nfor i in range(int(input())):\\n    kostki.append(input().split())\\n\\nl = ([ ''.join(i) for i in itertools.product(*kostki) ])\\n\\ns = [\\n    (1,2,3), (1,2),(1,3),(2,3),(1,),(2,),(3,)\\n]\\ns1 = []\\nfor p in s:\\n    s1 += itertools.permutations(p)\\n\\nres = set()\\nfor inp in l:\\n    for p in s1:\\n        num = ''\\n        for ind in p:\\n            if ind <= len(inp):\\n                num += inp[ind-1]\\n        if num:\\n            res.add(int(num))\\n\\n#print(res)\\nfor i in range(1, 1003):\\n    if i not in res:\\n        print(i-1)\\n        break\\n\", \"import itertools\\n\\nn=int(input())\\ncubes=[]\\nfor i in range(n):\\n    line=input().split()\\n    cubes.append(line)\\n\\nnums={}\\nfor i in range(1,1000):\\n    nums[i]=False\\n\\nif n==3:\\n    for a in cubes[0]:\\n        for b in cubes[1]:\\n            for c in cubes[2]:\\n                for i in range(n):\\n                    for comb in itertools.permutations([a,b,c],i+1):\\n                        pres=0\\n                        for num in comb:\\n                            pres*=10\\n                            pres+=int(num)\\n                        nums[pres]=True\\n\\n\\nif n==2:\\n    for a in cubes[0]:\\n        for b in cubes[1]:\\n            for i in range(n):\\n                for comb in itertools.permutations([a,b],i+1):\\n                    pres=0\\n                    for num in comb:\\n                        pres*=10\\n                        pres+=int(num)\\n                    nums[pres]=True\\n\\nif n==1:\\n    for a in cubes[0]:\\n        nums[int(a)]=True\\n\\nx=0\\nwhile(nums[x+1]):\\n    x+=1\\nprint(x)\\n\", \"from itertools import permutations\\n\\nn = int(input())\\n\\nl = [[int(x) for x in input().split()] for _ in range(n)]\\n\\ns = set()\\n\\ndef add(t, cur, lvl):\\n\\tfor i in range(6):\\n\\t\\tprint\\n\\t\\tcur2 = cur * 10 + l[t[lvl]][i]\\n\\t\\ts.add(cur2)\\n\\t\\tif lvl < n - 1:\\n\\t\\t\\tadd(t, cur2, lvl + 1)\\n\\nfor t in permutations(tuple(range(n))):\\n\\tadd(t, 0, 0)\\n\\na = 1\\nwhile True:\\n\\tif a in s:\\n\\t\\ta += 1\\n\\telse:\\n\\t\\tprint(a - 1)\\n\\t\\tbreak\", \"from itertools import permutations as perms\\nread = lambda: tuple(map(int, input().split()))\\nn = read()[0]\\ncbs = []\\nfor i in range(n):\\n    cbs += [read()]\\n    \\nfor i in range(1, 10000):\\n    ds = str(i)\\n    ch = False\\n    for p in perms(cbs):\\n        ii = []\\n        for k in range(len(ds)):\\n            for ci in range(n):\\n                if int(ds[k]) in p[ci] and not ci in ii:\\n                    ii += [ci]\\n                    break\\n        if len(ii) == len(ds):\\n            ch = True\\n            break\\n    if not ch:\\n        print(i - 1)\\n        break\\n    \\n\", \"from itertools import permutations\\n\\nn = int(input())\\na = []\\nfor i in range(n):\\n    a.append(list(input().split()))\\npa = list(permutations(a))\\n\\nfor x in range(1, 1000):\\n    ds = str(x)\\n    for a in pa:\\n        for d, c in zip(ds, a):\\n            if d not in c:\\n                break\\n        else:\\n            break\\n    else:\\n        break\\n\\nprint(x-1)\\n\", \"cubecount = input()\\ncubies = []\\nfor i in range(int(cubecount)):\\n    cubies.append(input().split(\\\" \\\"))\\n\\ncount = 0\\nwhile count < 1000:\\n    p = False\\n    candidate = str(count+1)\\n    if count+1 < 10:\\n        for cube in cubies:\\n            if candidate in cube:\\n                p = True\\n    elif count+1 < 100:\\n        for cube in cubies:\\n            if candidate[0] in cube:\\n                cubieb = cubies.copy()\\n                cubieb.remove(cube)\\n                for cubeb in cubieb:\\n                    if candidate[1] in cubeb:\\n                        p = True\\n    else:\\n        for cube in cubies:\\n            if candidate[0] in cube:\\n                cubieb = cubies.copy()\\n                cubieb.remove(cube)\\n                for cubeb in cubieb:\\n                    if candidate[1] in cubeb:\\n                        cubiec = cubieb.copy()\\n                        cubiec.remove(cubeb)\\n                        for cubec in cubiec:\\n                            if candidate[2] in cubec:\\n                                p = True          \\n    if p:\\n        count +=1\\n    else:\\n        break\\n\\nprint(count)\\n\", \"table=[str(i) for i in range(1, 1000)]\\nn=int(input())\\nnum=[]\\nres=[]\\nfor i in range(n):\\n\\ts=input()\\n\\ts=s.split()\\n\\tnum.append(s)\\n#print(num)\\nfor i in num[0]:\\n\\tres.append(i)\\nif n>1:\\n\\tfor i in num[0]:\\n\\t\\tfor j in num[1]:\\n\\t\\t\\tres.append(str(int(i+j)))\\n\\t\\t\\tres.append(str(int(j+i)))\\n\\tfor i in num[1]:\\n\\t\\tres.append(str(int(i)))\\nif n==3:\\n\\tfor i in num[0]:\\n\\t\\tfor j in num[1]:\\n\\t\\t\\tfor k in num[2]:\\n\\t\\t\\t\\tres.append(str(int(i+j+k)))\\n\\t\\t\\t\\tres.append(str(int(i+k+j)))\\n\\t\\t\\t\\tres.append(str(int(j+i+k)))\\n\\t\\t\\t\\tres.append(str(int(j+k+i)))\\n\\t\\t\\t\\tres.append(str(int(k+i+j)))\\n\\t\\t\\t\\tres.append(str(int(k+j+i)))\\n\\tfor i in num[2]:\\n\\t\\tres.append(str(int(i)))\\n\\tfor i in num[0]:\\n\\t\\tfor j in num[2]:\\n\\t\\t\\tres.append(str(int(i+j)))\\n\\t\\t\\tres.append(str(int(j+i)))\\n\\tfor i in num[1]:\\n\\t\\tfor j in num[2]:\\n\\t\\t\\tres.append(str(int(i+j)))\\n\\t\\t\\tres.append(str(int(j+i)))\\n#print(res)\\nfor i in range(1, 1001):\\n\\tif not (str(i) in res):\\n\\t\\tprint(i-1)\\n\\t\\tbreak\\n\", \"n = int(input().strip())\\nsets = [set([i for i in input().strip().split()]) for j in range(n)]\\n\\ndef get_all_perm(kek):\\n    if (len(kek) == 1):\\n        return [kek]\\n    ans = []\\n    for i in range(len(kek)):\\n        p = [i for i in kek]\\n        p.pop(i)\\n        for perm in get_all_perm(p):\\n            ans.append([kek[i]] + perm)\\n    return ans\\n\\nanswer = 0\\nwhile answer < 10**n:\\n    answer += 1\\n    g = list(str(answer))\\n    for perm in get_all_perm(sets):\\n        #print(perm)\\n        #print([perm[i] in sets[i] for i in range(len(perm))])\\n        if all([g[i] in perm[i] for i in range(len(g))]):\\n            break\\n    else:\\n        break\\n\\nprint(answer - 1)\", \"n = int(input())\\naij = [list(map(str,input().split())) for i in range(n)]\\nnumbers = [0]*1001\\nnumbers[0] = 1\\nfor i in range(n):\\n    for j in range(6):\\n        numbers[int(aij[i][j])] = 1\\nif n == 2:\\n    for i in range(6):\\n        for j in range(6):\\n            numbers[int(aij[0][i]+aij[1][j])] = 1\\n            numbers[int(aij[1][j]+aij[0][i])] = 1\\nif n == 3:\\n        for i in range(6):\\n            for j in range(6):\\n                numbers[int(aij[0][i]+aij[1][j])] = 1\\n                numbers[int(aij[1][j]+aij[0][i])] = 1\\n        for i in range(6):\\n            for j in range(6):\\n                numbers[int(aij[1][i]+aij[2][j])] = 1\\n                numbers[int(aij[2][j]+aij[1][i])] = 1\\n        for i in range(6):\\n            for j in range(6):\\n                numbers[int(aij[0][i]+aij[2][j])] = 1\\n                numbers[int(aij[2][j]+aij[0][i])] = 1\\n        for i in range(6):\\n            for j in range(6):\\n                for z in range(6):\\n                    numbers[int(aij[0][i]+aij[1][j]+aij[2][z])] = 1\\n                    numbers[int(aij[0][i]+aij[2][z]+aij[1][j])] = 1\\n                    numbers[int(aij[1][j]+aij[0][i]+aij[2][z])] = 1\\n                    numbers[int(aij[1][j]+aij[2][z]+aij[0][i])] = 1\\n                    numbers[int(aij[2][z]+aij[1][j]+aij[0][i])] = 1\\n                    numbers[int(aij[2][z]+aij[0][i]+aij[1][j])] = 1\\nans = -1\\nfor i in range(1001):\\n    if numbers[i] == 0:\\n        break\\n    ans += 1\\nprint(ans)\\n\", \"n = int(input())\\na = []\\na += [list(input())]\\nif (n > 1):\\n    a += [list(input())]\\nif (n > 2):\\n    a += [list(input())]\\ni = 1\\nwhile (i < 1000):\\n    s = list(str(i))\\n    if (n == 1):\\n        if (s[0] in a[0]):\\n            i += 1\\n            continue\\n    if (n == 2):\\n        if (len(s) == 1 and (s[0] in a[0] or s[0] in a[1])):\\n            i += 1\\n            continue\\n        if (len(s) == 2 and (\\n            (s[0] in a[0] and s[1] in a[1]) or\\n            (s[0] in a[1] and s[1] in a[0]))):\\n            i += 1\\n            continue\\n    if (n == 3):\\n        if (len(s) == 1 and (s[0] in a[0] or s[0] in a[1] or s[0] in a[2])):\\n            i += 1\\n            continue\\n        if (len(s) == 2 and (\\n            (s[0] in a[0] and s[1] in a[1]) or\\n            (s[0] in a[0] and s[1] in a[2]) or\\n            (s[0] in a[1] and s[1] in a[0]) or\\n            (s[0] in a[1] and s[1] in a[2]) or\\n            (s[0] in a[2] and s[1] in a[0]) or\\n            (s[0] in a[2] and s[1] in a[1]))):\\n            i += 1\\n            continue\\n        if (len(s) == 3 and (\\n            (s[0] in a[0] and s[1] in a[1] and s[2] in a[2]) or\\n            (s[0] in a[0] and s[1] in a[2] and s[2] in a[1]) or\\n            (s[0] in a[1] and s[1] in a[0] and s[2] in a[2]) or\\n            (s[0] in a[1] and s[1] in a[2] and s[2] in a[0]) or\\n            (s[0] in a[2] and s[1] in a[0] and s[2] in a[1]) or\\n            (s[0] in a[2] and s[1] in a[1] and s[2] in a[0])\\n            )):\\n            i += 1\\n            continue\\n    print(i-1)\\n    break\\n\", \"n = int(input())\\n\\ncubes = []\\nfor i in range(n):\\n\\tcubes.append(list(map(int, input().split())))\\n\\nnumbers = set()\\n\\nif n == 3:\\n\\tfor i in range(6):\\n\\t\\tnumbers.add(cubes[0][i])\\n\\t\\tnumbers.add(cubes[1][i])\\n\\t\\tnumbers.add(cubes[2][i])\\n\\t\\tfor j in range(6):\\n\\t\\t\\tnumbers.add(cubes[0][i] * 10 + cubes[1][j])\\n\\t\\t\\tnumbers.add(cubes[0][i] * 10 + cubes[2][j])\\n\\t\\t\\tnumbers.add(cubes[1][i] * 10 + cubes[0][j])\\n\\t\\t\\tnumbers.add(cubes[1][i] * 10 + cubes[2][j])\\n\\t\\t\\tnumbers.add(cubes[2][i] * 10 + cubes[0][j])\\n\\t\\t\\tnumbers.add(cubes[2][i] * 10 + cubes[1][j])\\n\\t\\t\\tfor k in range(6):\\n\\t\\t\\t\\tnumbers.add(cubes[0][i] * 100 + cubes[1][j] * 10 + cubes[2][k])\\n\\t\\t\\t\\tnumbers.add(cubes[0][i] * 100 + cubes[2][j] * 10 + cubes[1][k])\\n\\t\\t\\t\\tnumbers.add(cubes[1][i] * 100 + cubes[0][j] * 10 + cubes[2][k])\\n\\t\\t\\t\\tnumbers.add(cubes[1][i] * 100 + cubes[2][j] * 10 + cubes[0][k])\\n\\t\\t\\t\\tnumbers.add(cubes[2][i] * 100 + cubes[0][j] * 10 + cubes[1][k])\\n\\t\\t\\t\\tnumbers.add(cubes[2][i] * 100 + cubes[1][j] * 10 + cubes[0][k])\\nif n == 2:\\n\\tfor i in range(6):\\n\\t\\tnumbers.add(cubes[0][i])\\n\\t\\tnumbers.add(cubes[1][i])\\n\\t\\tfor j in range(6):\\n\\t\\t\\tnumbers.add(cubes[0][i] * 10 + cubes[1][j])\\n\\t\\t\\tnumbers.add(cubes[1][i] * 10 + cubes[0][j])\\nif n == 1:\\n\\tfor i in range(6):\\n\\t\\tnumbers.add(cubes[0][i])\\n\\nans = 0\\nfor i in range(1, 999):\\n\\tif i not in numbers:\\n\\t\\tbreak\\n\\tans = i\\n\\nprint(ans)\", \"n=int(input())\\ndef find(x,d=[]):\\n    if x==0 and d!=[]:\\n        return True\\n    l=x%10\\n    \\n    i=-1\\n    a=False\\n    for lis in s:\\n        i+=1\\n        if l in lis and i not in d:\\n            a=max(a,find(x//10,d+[i]))\\n    return a\\ns=[list(map(int,input().split())) for x in range(n)]\\ne=1\\nwhile find(e):\\n    e+=1\\nprint(int(e-1  if find(1) else 0))\", \"import sys\\nn = int(input())\\nmax = 0\\nif n == 1:\\n    a = [int(x) for x in input().split()]\\n    for i in range(1, 10):\\n        if i not in a:\\n            print(max)\\n            return\\n        max += 1\\nelif n == 2:\\n    a = [int(x) for x in input().split()]\\n    b = [int(x) for x in input().split()]\\n    for i in range(1, 10):\\n        if (i not in a) and (i not in b):\\n            print(max)\\n            return\\n        max += 1\\n    for i in range(10, 100):\\n        a1 = int(str(i)[0])\\n        a2 = int(str(i)[1])\\n        if ((a1 in a) and (a2 in b)) or ((a1 in b) and (a2 in a)):\\n            max += 1\\n        else:\\n            print(max)\\n            return\\nelif n == 3:\\n    a = [int(x) for x in input().split()]\\n    b = [int(x) for x in input().split()]\\n    c = [int(x) for x in input().split()]\\n    for i in range(1, 10):\\n        if (i not in a) and (i not in b) and (i not in c):\\n            print(max)\\n            return\\n        max += 1\\n    for i in range(10, 100):\\n        a1 = int(str(i)[0])\\n        a2 = int(str(i)[1])\\n        if ((a1 in a) and (a2 in b)) or ((a1 in b) and (a2 in a)) or ((a1 in a) and (a2 in c)) or ((a1 in c) and (a2 in a)) or (a1 in b) and (a2 in c) or (a1 in c) and (a2 in b):\\n            max += 1\\n        else:\\n            print(max)\\n            return\", \"c=[0 for i in range(1000)]\\nn=int(input())\\ncc=[]\\nfor i in range(n):\\n    a=list(map(int,input().strip().split(' ')))\\n    for j in a:\\n        c[j]=1\\n    cc.append(a)\\nif(n==1):\\n    for i in range(1,1000):\\n        if(c[i]==0):\\n            break\\n    print(i-1)\\nif(n==2):\\n    a=cc[0]\\n    b=cc[1]\\n    for i in a:\\n        for j in b:\\n            c[i*10+j]=1\\n            c[j*10+i]=1\\n    for i in range(1,1000):\\n        if(c[i]==0):\\n            break\\n    print(i-1)\\nif(n==3):\\n    a=cc[0]\\n    b=cc[1]\\n    d=cc[2]\\n    \\n    for i in a:\\n        for j in b:\\n            c[i*10+j]=1\\n            c[j*10+i]=1\\n    for i in a:\\n        for j in d:\\n            c[i*10+j]=1\\n            c[j*10+i]=1\\n    for i in d:\\n        for j in b:\\n            c[i*10+j]=1\\n            c[j*10+i]=1\\n    for i in a:\\n        for j in b:\\n            for k in d:\\n                c[i*100+j*10+k]=1\\n                c[i*100+k*10+j]=1\\n                c[j*100+i*10+k]=1\\n                c[j*100+i+k*10]=1\\n                c[k*100+i*10+j]=1\\n                c[k*100+j*10+i]=1\\n    \\n    for i in range(1,1000):\\n        if(c[i]==0):\\n            break\\n    print(i-1)\\n\\n\", \"def fun(n,l):\\n    if len(l)==1:\\n        return n in l[0]\\n    elif len(l)==2:\\n        if n<10:\\n            return (n in l[0]) or (n in l[1])\\n        elif n<100:\\n            u=n%10\\n            h=int((str(n))[0])\\n            return (u in l[0] and h in l[1]) or(u in l[1] and h in l[0])\\n        else:\\n            return False\\n    else:\\n        if n<10:\\n            return (n in l[0]) or (n in l[1]) or (n in l[2])\\n        elif n<100:\\n            u=n%10\\n            h=int((str(n))[0])\\n            return fun(n,[l[0],l[1]]) or fun(n,[l[0],l[2]]) or fun(n,[l[1],l[2]])\\nl=[]\\nn=int(input())\\nfor i in range(n):\\n    l.append([int(j) for j in input().split()])\\nfor i in range(1,100):\\n    if not(fun(i,l)):\\n        break\\nprint(i-1)\\n            \\n            \\n        \\n\", \"from itertools import product as comb\\nfrom itertools import permutations as perm\\nk = int(input())\\ncubes = [input().split(\\\" \\\") for i in range(k)]\\nnums = set()\\nfor n in range(1, k + 1):\\n    for p in perm(list(range(k)), n):\\n#        print(p)\\n        # p is (0, 2, 1) order of cubes\\n        for c in comb(list(range(6)), repeat=n):\\n #           if p == (1, 0):\\n#                print(\\\"--\\\" + str(c))\\n            nn = \\\"\\\"\\n            for i in range(n):\\n  #              if p == (1, 0):\\n   #                 print(\\\"----\\\" + str(p[i]) + \\\"-\\\" + str(c[i]) + \\\"-\\\" + cubes[p[i]][c[i]])\\n                nn += cubes[p[i]][c[i]]\\n            nums.add(int(nn))\\n#print(\\\"fuckwrvbwoe\\\")\\n#print(\\\"yes\\\" if 12 in nums else \\\"no\\\")\\n#print(nums)\\nans = 0\\nwhile ans + 1 in nums:\\n    ans += 1\\nprint(ans)\\n\", \"n = int(input())\\ncubes = []\\nfor i in range(n):\\n    cubes.append(list(map(int, input().split())))\\n\\ntaken = []\\nfor i in range(10000):\\n    taken.append(0)\\n\\nres = 0\\nfor cube in cubes:\\n    for face in cube:\\n            taken[face] += 1\\n\\nfor cube1 in cubes:\\n    for cube2 in cubes:\\n        if cube1 != cube2:\\n            for face1 in cube1:\\n                for face2 in cube2:\\n                    tmp = str(face1) + str(face2)\\n                    taken[int(tmp)] += 1\\n\\nfor cube1 in cubes:\\n    for cube2 in cubes:\\n        for cube3 in cubes:\\n            if cube1 != cube2 and cube1 != cube3 and cube2 != cube3:\\n                for face1 in cube1:\\n                    for face2 in cube2:\\n                        for face3 in cube3:\\n                            tmp = str(face1) + str(face2) + str(face3)\\n                            taken[int(tmp)] += 1\\n\\niterate = 0\\nfor i in taken:\\n    if i == 0 and iterate > 0:\\n        break\\n\\n    res = iterate\\n    iterate += 1\\nprint(res)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3\\n0 1 2 3 4 5\\n6 7 8 9 0 1\\n2 3 4 5 6 7\\n\",\n    \"3\\n0 1 3 5 6 8\\n1 2 4 5 7 8\\n2 3 4 6 7 9\\n\",\n    \"3\\n0 1 2 3 4 5\\n0 1 2 3 4 5\\n0 1 2 3 4 5\\n\",\n    \"3\\n1 2 3 7 8 9\\n9 8 7 1 2 3\\n7 9 2 3 1 8\\n\",\n    \"1\\n5 2 2 5 6 7\\n\",\n    \"1\\n7 6 5 8 9 0\\n\",\n    \"1\\n2 5 9 6 7 9\\n\",\n    \"1\\n6 3 1 9 4 9\\n\",\n    \"1\\n1 9 8 3 7 8\\n\",\n    \"2\\n1 7 2 0 4 3\\n5 2 3 6 1 0\\n\",\n    \"2\\n6 0 1 7 2 9\\n1 3 4 6 7 0\\n\",\n    \"2\\n8 6 4 1 2 0\\n7 8 5 3 2 1\\n\",\n    \"2\\n0 8 6 2 1 3\\n5 2 7 1 0 9\\n\",\n    \"2\\n0 9 5 7 6 2\\n8 6 2 7 1 4\\n\",\n    \"3\\n5 0 7 6 2 1\\n2 7 4 6 1 9\\n0 2 6 1 7 5\\n\",\n    \"3\\n0 6 2 9 5 4\\n3 8 0 1 6 9\\n6 9 0 1 5 2\\n\",\n    \"3\\n5 6 2 9 3 5\\n5 4 1 5 9 8\\n4 4 2 0 3 5\\n\",\n    \"3\\n0 1 9 1 0 8\\n9 9 3 5 6 2\\n9 3 9 9 7 3\\n\",\n    \"3\\n2 5 7 4 2 7\\n1 5 5 9 0 3\\n8 2 0 1 5 1\\n\",\n    \"1\\n4 6 9 8 2 7\\n\",\n    \"1\\n5 3 8 0 2 6\\n\",\n    \"1\\n7 9 5 0 4 6\\n\",\n    \"1\\n4 0 9 6 3 1\\n\",\n    \"1\\n7 9 2 5 0 4\\n\",\n    \"1\\n0 7 6 3 2 4\\n\",\n    \"1\\n9 8 1 6 5 7\\n\",\n    \"1\\n7 3 6 9 8 1\\n\",\n    \"1\\n3 9 1 7 4 5\\n\",\n    \"1\\n8 6 0 9 4 2\\n\",\n    \"1\\n8 2 7 4 1 0\\n\",\n    \"1\\n8 3 5 4 2 9\\n\",\n    \"1\\n0 8 7 1 3 2\\n\",\n    \"1\\n6 2 8 5 1 3\\n\",\n    \"1\\n6 0 7 5 4 8\\n\",\n    \"1\\n6 2 8 4 5 1\\n\",\n    \"1\\n4 3 8 9 2 3\\n\",\n    \"1\\n8 1 9 2 9 7\\n\",\n    \"1\\n3 7 7 6 4 2\\n\",\n    \"1\\n1 4 5 7 0 5\\n\",\n    \"2\\n6 6 4 7 9 0\\n2 1 2 8 6 4\\n\",\n    \"2\\n5 3 2 9 8 2\\n0 7 4 8 1 8\\n\",\n    \"2\\n5 7 4 2 1 9\\n2 2 7 1 1 8\\n\",\n    \"2\\n9 3 3 6 7 2\\n6 2 9 1 5 9\\n\",\n    \"2\\n2 0 5 7 0 8\\n4 5 1 5 4 9\\n\",\n    \"2\\n2 6 8 1 3 1\\n2 1 3 8 6 7\\n\",\n    \"2\\n4 3 8 6 0 1\\n4 7 1 8 9 0\\n\",\n    \"2\\n0 2 9 1 8 5\\n0 7 4 3 2 5\\n\",\n    \"2\\n1 7 6 9 2 5\\n1 6 7 0 9 2\\n\",\n    \"2\\n0 2 9 8 1 7\\n6 7 4 3 2 5\\n\",\n    \"2\\n3 6 8 9 5 0\\n6 7 0 8 2 3\\n\",\n    \"2\\n5 1 2 3 0 8\\n3 6 7 4 9 2\\n\",\n    \"2\\n7 8 6 1 4 5\\n8 6 4 3 2 5\\n\",\n    \"2\\n2 3 5 1 9 6\\n1 6 8 7 3 9\\n\",\n    \"2\\n1 7 8 6 0 9\\n3 2 1 7 4 9\\n\",\n    \"2\\n2 4 0 3 7 6\\n3 2 8 7 1 5\\n\",\n    \"2\\n6 5 2 7 1 3\\n3 7 8 1 0 9\\n\",\n    \"2\\n5 8 4 7 1 2\\n0 8 6 2 4 9\\n\",\n    \"2\\n8 0 6 5 1 4\\n7 1 0 8 3 4\\n\",\n    \"2\\n2 3 9 1 6 7\\n2 5 4 3 0 6\\n\",\n    \"3\\n9 4 3 0 2 6\\n7 0 5 3 3 9\\n1 0 7 4 6 7\\n\",\n    \"3\\n3 8 5 1 5 5\\n1 5 7 2 6 9\\n4 3 4 8 8 9\\n\",\n    \"3\\n7 7 2 5 3 2\\n3 0 0 6 4 4\\n1 2 1 1 9 1\\n\",\n    \"3\\n8 1 6 8 6 8\\n7 0 2 5 8 4\\n5 2 0 3 1 9\\n\",\n    \"3\\n2 7 4 0 7 1\\n5 5 4 9 1 4\\n2 1 7 5 1 7\\n\",\n    \"3\\n4 4 5 0 6 6\\n7 1 6 9 5 4\\n5 0 4 0 3 9\\n\",\n    \"3\\n9 4 3 3 9 3\\n1 0 3 4 5 3\\n2 9 6 2 4 1\\n\",\n    \"3\\n3 8 3 5 5 5\\n3 0 1 6 6 3\\n0 4 3 7 2 4\\n\",\n    \"3\\n4 1 0 8 0 2\\n1 5 3 5 0 7\\n7 7 2 7 2 2\\n\",\n    \"3\\n8 1 8 2 7 1\\n9 1 9 9 4 7\\n0 0 9 0 4 0\\n\",\n    \"3\\n4 6 0 3 9 2\\n8 6 9 0 7 2\\n6 9 3 2 5 7\\n\",\n    \"3\\n5 1 2 9 6 4\\n9 0 6 4 2 8\\n4 6 2 8 3 7\\n\",\n    \"3\\n9 3 1 8 4 6\\n6 9 1 2 0 7\\n8 9 1 5 0 3\\n\",\n    \"3\\n7 1 3 0 2 4\\n2 4 3 0 9 5\\n1 9 8 0 6 5\\n\",\n    \"3\\n9 4 6 2 7 0\\n3 7 1 9 6 4\\n6 1 0 8 7 2\\n\",\n    \"3\\n2 7 3 6 4 5\\n0 2 1 9 4 8\\n8 6 9 5 4 0\\n\",\n    \"3\\n2 6 3 7 1 0\\n9 1 2 4 7 6\\n1 4 8 7 6 2\\n\",\n    \"3\\n5 4 8 1 6 7\\n0 9 3 5 8 6\\n2 4 7 8 1 3\\n\",\n    \"3\\n7 2 1 3 6 9\\n0 3 8 4 7 6\\n1 4 5 8 7 0\\n\",\n    \"3\\n8 6 0 5 4 9\\n1 8 5 3 9 7\\n7 4 5 1 6 8\\n\",\n    \"1\\n0 1 2 3 4 5\\n\",\n    \"3\\n0 1 1 2 2 3\\n4 5 6 7 8 9\\n3 4 5 6 7 8\\n\",\n    \"2\\n0 1 2 3 4 5\\n6 7 8 9 1 2\\n\",\n    \"3\\n0 1 2 3 4 5\\n6 7 8 9 1 2\\n3 4 5 6 7 8\\n\",\n    \"3\\n0 1 1 2 2 3\\n4 5 6 7 8 9\\n3 4 5 6 7 1\\n\",\n    \"2\\n0 1 2 3 4 5\\n6 7 8 9 6 6\\n\",\n    \"2\\n0 1 2 3 4 5\\n4 5 6 7 8 9\\n\",\n    \"2\\n1 8 9 1 1 0\\n2 3 4 5 6 7\\n\",\n    \"2\\n0 1 2 3 4 5\\n9 8 7 6 5 4\\n\",\n    \"3\\n2 3 4 5 6 7\\n3 4 5 6 7 8\\n9 1 2 3 4 5\\n\",\n    \"3\\n1 1 2 3 4 5\\n6 7 8 9 0 2\\n3 4 5 6 7 8\\n\",\n    \"3\\n1 1 1 0 2 3\\n4 5 6 7 8 9\\n0 0 0 0 0 0\\n\",\n    \"3\\n0 1 2 2 4 5\\n6 7 8 9 0 1\\n3 3 4 5 6 7\\n\",\n    \"3\\n2 0 1 3 4 5\\n6 7 8 9 1 1\\n3 4 5 6 6 7\\n\",\n    \"3\\n1 1 1 1 1 1\\n0 2 3 4 5 6\\n7 8 9 2 3 4\\n\",\n    \"2\\n0 1 2 3 4 5\\n6 6 6 7 8 9\\n\",\n    \"3\\n3 4 5 6 8 9\\n1 1 1 1 1 1\\n1 2 4 5 7 0\\n\"\n  ],\n  \"outputs\": [\n    \"87\",\n    \"98\",\n    \"5\",\n    \"3\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"1\",\n    \"1\",\n    \"7\",\n    \"4\",\n    \"8\",\n    \"3\",\n    \"2\",\n    \"2\",\n    \"6\",\n    \"6\",\n    \"3\",\n    \"5\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"1\",\n    \"0\",\n    \"0\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"0\",\n    \"2\",\n    \"0\",\n    \"3\",\n    \"3\",\n    \"0\",\n    \"2\",\n    \"0\",\n    \"2\",\n    \"0\",\n    \"1\",\n    \"2\",\n    \"5\",\n    \"2\",\n    \"3\",\n    \"2\",\n    \"3\",\n    \"1\",\n    \"5\",\n    \"2\",\n    \"9\",\n    \"0\",\n    \"9\",\n    \"8\",\n    \"3\",\n    \"4\",\n    \"8\",\n    \"3\",\n    \"2\",\n    \"1\",\n    \"7\",\n    \"7\",\n    \"9\",\n    \"7\",\n    \"32\",\n    \"2\",\n    \"1\",\n    \"6\",\n    \"8\",\n    \"5\",\n    \"2\",\n    \"0\",\n    \"10\",\n    \"21\",\n    \"65\",\n    \"4\",\n    \"10\",\n    \"4\",\n    \"21\",\n    \"21\",\n    \"1\",\n    \"5\",\n    \"9\",\n    \"29\",\n    \"98\",\n    \"19\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"10\",\n    \"10\",\n    \"21\",\n    \"19\",\n    \"10\",\n    \"9\",\n    \"19\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/887/B",
  "starter_code": ""
}