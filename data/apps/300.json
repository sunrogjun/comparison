{
  "task_id": "APPS/300",
  "problem_id": 300,
  "prompt": "Translator's note: in Russia's most widespread grading system, there are four grades: 5, 4, 3, 2, the higher the better, roughly corresponding to A, B, C and F respectively in American grading system.\n\nThe term is coming to an end and students start thinking about their grades. Today, a professor told his students that the grades for his course would be given out automatically \u00a0\u2014 he would calculate the simple average (arithmetic mean) of all grades given out for lab works this term and round to the nearest integer. The rounding would be done in favour of the student\u00a0\u2014 $4.5$ would be rounded up to $5$ (as in example 3), but $4.4$ would be rounded down to $4$.\n\nThis does not bode well for Vasya who didn't think those lab works would influence anything, so he may receive a grade worse than $5$ (maybe even the dreaded $2$). However, the professor allowed him to redo some of his works of Vasya's choosing to increase his average grade. Vasya wants to redo as as few lab works as possible in order to get $5$ for the course. Of course, Vasya will get $5$ for the lab works he chooses to redo.\n\nHelp Vasya\u00a0\u2014 calculate the minimum amount of lab works Vasya has to redo.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$\u00a0\u2014 the number of Vasya's grades ($1 \\leq n \\leq 100$).\n\nThe second line contains $n$ integers from $2$ to $5$\u00a0\u2014 Vasya's grades for his lab works.\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimum amount of lab works that Vasya has to redo. It can be shown that Vasya can always redo enough lab works to get a $5$.\n\n\n-----Examples-----\nInput\n3\n4 4 4\n\nOutput\n2\n\nInput\n4\n5 4 5 5\n\nOutput\n0\n\nInput\n4\n5 3 3 5\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first sample, it is enough to redo two lab works to make two $4$s into $5$s.\n\nIn the second sample, Vasya's average is already $4.75$ so he doesn't have to redo anything to get a $5$.\n\nIn the second sample Vasya has to redo one lab work to get rid of one of the $3$s, that will make the average exactly $4.5$ so the final grade would be $5$.",
  "solutions": "[\"def read_input():\\n\\treturn map(int, input().split())\\n\\nn = int(input())\\na = sorted(read_input())\\n\\ns = sum(a)\\ni = 0\\n\\nwhile 2 * s < 9 * n:\\n\\tdelta = 5 - a[i]\\n\\ts += delta\\n\\ti += 1\\n\\nprint(i)\", \"n = int(input())\\na = list(map(int, input().split()))\\n#    0 1 2 3 4 5\\nc = [0,0,0,0,0,0]\\nfor _ in a:\\n  c[_] += 1\\ns = sum(a)\\nans = 0\\nwhile 2 * s < 9 * n:\\n  if c[2] > 0:\\n    s += 3\\n    c[2] -= 1\\n    c[5] += 1\\n    ans += 1\\n  elif c[3] > 0:\\n    s += 2\\n    c[3] -= 1\\n    c[5] += 1\\n    ans += 1\\n  elif c[4] > 0:\\n    s += 1\\n    c[4] -= 1\\n    c[5] += 1\\n    ans += 1\\nprint(ans)\\n\", \"n = int(input())\\nai= list(map(int, input().split()))\\nai.sort()\\nsumm = sum(ai)\\nif summ  / n >= 4.5:\\n    print(0)\\nelse:\\n    for i in range(n):\\n        summ += 5 - ai[i]\\n        if summ  / n >= 4.5:\\n            print(i+1)\\n            break\\n\", \"n=int(input())\\narr=list(map(int,input().strip().split(' ')))\\narr.sort()\\ns = sum(arr)\\nif(s>=4.5*n):\\n  print(0)\\nelse:\\n  cnt = 0\\n  for i in range(n):\\n    cnt+=1\\n    s = s-arr[i]+5\\n    if(s>=4.5*n):\\n      break\\n  print(cnt)\", \"from sys import stdin, stdout\\n\\nn = int(stdin.readline())\\nvalues = sorted(list(map(int, stdin.readline().split())))\\n\\nl, r = -1, n\\nwhile r - l > 1:\\n    m = (l + r) >> 1\\n    \\n    if (sum(values[m:]) + 5 * m) * 10 >= 45 * n:\\n        r = m\\n    else:\\n        l = m\\n\\nstdout.write(str(r))\", \"def main():\\n    n = int(input())\\n    def ceil(x):\\n        if x % 1 == 0:\\n            return int(x)\\n        return int(x + 1)\\n    a = ceil(n * 4.5)\\n    scores = sorted(list(map(int, input().split())))\\n    s = sum(scores)\\n    c = 0\\n    while s < a:\\n        s += 5 - scores[c]\\n        c += 1\\n    print(c)\\n    return 0\\nmain()\\n\", \"n = int(input())\\n\\ngrades = [int(x) * 2 for x in input().split()]\\n\\nres = sum(grades)\\ntarget = 9 * len(grades)\\n\\ngrades.sort()\\n\\nfor i, grade in enumerate(grades):\\n    if res >= target:\\n        print(i)\\n        break\\n    else:\\n        res += 10 - grade\\nelse:\\n    print(len(grades))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\nc = 0\\ns = sum(a)\\nif s/n >= 4.5:\\n\\tprint (c)\\nelse:\\n\\ta.sort()\\n\\tfor i in range(len(a)):\\n\\t\\tc+=1\\n\\t\\ts+=(5-a[i])\\n\\t\\ta[i] = 5\\n\\t\\tif (s/n>=4.5):\\n\\t\\t\\tbreak\\n\\tprint (c)\\n\", \"n = int(input())\\na = sorted(list(map(int, input().split())))\\n\\n\\nfor i in range(n + 1):\\n    cur_sum = 5 * i + sum(a[i:])\\n\\n    if cur_sum * 10 >= n * 45:\\n        print(i)\\n        break\\n\\n\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\ntotal = sum(a)\\nneed = 4.5 * n\\ni = 0\\nwhile total < need:\\n\\ttotal += (5 - a[i])\\n\\ti += 1\\nprint(i)\", \"n = int(input())\\nr = 4.5*n\\nt = sorted([int(i) for i in input().split()])\\n\\nc = 0\\ns = sum(t)\\nwhile(s < r):\\n    s += 5 - t[c]\\n    c += 1\\n\\nprint(c)\", \"n = int(input())\\na = list(map(int,input().split()))\\na.sort()\\nc = 0\\nwhile sum(a)/len(a) < 4.5:\\n    a[a.index(min(a))] = 5\\n    c+=1\\nprint(c)\\n\", \"n = int(input().strip())\\na = sorted(list(map(int, input().strip().split())))\\nr = 0\\n\\nwhile True:\\n    mean = sum(a) / n\\n    if round(mean) >= 5 or mean == 4.5:\\n        break\\n\\n    r += 1\\n    a[0] = 5\\n    a.sort()\\n\\nprint(r)\\n\", \"n = int(input())\\n\\ns = list(map(int, input().strip().split()))\\n\\ns = sorted(s)\\n\\nmean = sum(s) / len(s)\\n\\nl = 0\\nwhile mean < 4.5:\\n    s[l] = 5\\n    l += 1\\n    mean = sum(s) / len(s)\\n\\nprint(l)\\n\", \"n = int(input())\\ngrades = list(map(int, input().split()))\\ngrades.sort()\\ncur = sum(grades) / len(grades)\\ni = 0\\nwhile cur < 4.5:\\n\\tgrades[i] = 5\\n\\tcur = sum(grades) / len(grades)\\n\\ti += 1\\nprint(i)\\n\", \"def go():\\n    n = int(input())\\n    a = sorted([int(i) for i in input().split(' ')])\\n    s = sum(a)\\n    if s / n >= 4.5:\\n        return 0\\n    c = 0\\n    for i in range(n):\\n        s -= a[i]\\n        a[i] = 5\\n        s += 5\\n        c += 1\\n        if s / n >= 4.5:\\n            return c\\nprint(go())\\n\", \"n = int(input())\\nlabs = [ int(a) for a in input().split() ]\\n\\nlabs.sort()\\n\\nredo = 0\\nwhile sum(labs)/len(labs) < 4.5:\\n    labs[redo] = 5\\n    redo += 1\\n\\nprint(redo)\\n\", \"\\n\\nn = int(input())\\n\\ntab = sorted([int(x) for x in input().split()])\\n\\n\\ns = sum(tab)\\n\\nresult = 0\\n\\nfor i in range(n):\\n    if 2 * s >= 9 * n:\\n        break\\n    result += 1\\n    s -= tab[i]\\n    s += 5\\n\\nprint(result)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\ns = sum(a)\\nans = 0\\nwhile 2 * s / n < 9:\\n    m = min(a)\\n    a.remove(m)\\n    a.append(5)\\n    s += 5 - m\\n    ans += 1\\n\\nprint(ans)\\n\", \"#JMD\\n#Nagendra Jha-4096\\n \\n#a=list(map(int,sys.stdin.readline().split(' ')))\\n#n,k,s= map(int, sys.stdin.readline().split(' '))\\n \\nimport sys\\nimport math\\n\\n#import fractions\\n#import numpy\\n \\n###File Operations###\\nfileoperation=0\\nif(fileoperation):\\n    orig_stdout = sys.stdout\\n    orig_stdin = sys.stdin\\n    inputfile = open('W:/Competitive Programming/input.txt', 'r')\\n    outputfile = open('W:/Competitive Programming/output.txt', 'w')\\n    sys.stdin = inputfile\\n    sys.stdout = outputfile\\n\\n###Defines...###\\nmod=1000000007\\n \\n###FUF's...###\\ndef nospace(l):\\n    ans=''.join(str(i) for i in l)\\n    return ans\\n \\n \\n \\n##### Main ####\\nn=int(input())\\na=list(map(int,sys.stdin.readline().split(' ')))\\nreach=math.ceil(4.5*n)\\ns=sum(a)\\na.sort()\\nans=reach-s\\ncount=0\\nfor aa in a:\\n    if(ans<=0):\\n        break\\n    ans-=(5-aa)\\n    count+=1\\nprint(count)\\n#####File Operations#####\\nif(fileoperation):\\n    sys.stdout = orig_stdout\\n    sys.stdin = orig_stdin\\n    inputfile.close()\\n    outputfile.close()\", \"n = int(input())\\ng = list(map(int,input().split()))\\n\\nans = 0\\ngr = sum(g)/n\\n\\nwhile gr < 4.5:\\n    ma = min(g)\\n    i = g.index(ma)\\n    g[i] = 5\\n    gr = sum(g)/n\\n    ans += 1\\n    \\n\\nprint (ans)\\n    \\n\", \"n=int(input())\\na=list(map(int,input().split(' ')))\\ns=sum(a)\\nif s>=n*4.5:\\n    print(0)\\nelse:\\n    x=n*4.5-s\\n    i=0\\n    a.sort()\\n    while x>0:\\n        x-=5-a[i]\\n        i+=1\\n    print(i)\\n        \\n\", \"N = int(input())\\n*A, = list(map(int, input().split()))\\nsu = sum(A)\\nif su*2 >= 9*N:\\n    print(0)\\n    return\\n\\nA.sort()\\nfor i in range(N):\\n    su += 5 - A[i]\\n    if su*2 >= 9*N:\\n        print(i+1)\\n        return\\nreturn\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\n\\nsum=0\\na = sorted(a)\\nfor c in a: sum+=c\\navg = sum/n\\ncount = 0\\nfor c in a:\\n    if avg >= 4.5:\\n        break\\n    sum += 5-c\\n    avg = sum / n\\n    count += 1\\nprint(count)\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nless = 0\\nres = 0\\nfor change in range(2, 6):\\n\\tcnt = 0\\n\\tcur_sum = 0\\n\\tfor i in range(n):\\n\\t\\tcur_sum += a[i]\\n\\tfor i in range(n):\\n\\t\\tif a[i] == change:\\n\\t\\t\\tcnt += 1\\n\\tleast_want = int(4.5 * n + 0.9)\\n\\tif least_want <= cur_sum:\\n\\t\\tprint(res)\\n\\t\\tbreak\\n\\tneed = int((least_want - cur_sum + (5 - change) - 1) / (5 - change))\\n\\tif need <= cnt:\\n\\t\\tprint(need + res)\\n\\t\\tbreak\\n\\tfor i in range(n):\\n\\t\\tif a[i] == change:\\n\\t\\t\\ta[i] = 5\\n\\tres += cnt\\n\\n\\n\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3\\n4 4 4\\n\",\n    \"4\\n5 4 5 5\\n\",\n    \"4\\n5 3 3 5\\n\",\n    \"1\\n5\\n\",\n    \"4\\n3 2 5 4\\n\",\n    \"5\\n5 4 3 2 5\\n\",\n    \"8\\n5 4 2 5 5 2 5 5\\n\",\n    \"5\\n5 5 2 5 5\\n\",\n    \"6\\n5 5 5 5 5 2\\n\",\n    \"6\\n2 2 2 2 2 2\\n\",\n    \"100\\n3 2 4 3 3 3 4 2 3 5 5 2 5 2 3 2 4 4 4 5 5 4 2 5 4 3 2 5 3 4 3 4 2 4 5 4 2 4 3 4 5 2 5 3 3 4 2 2 4 4 4 5 4 3 3 3 2 5 2 2 2 3 5 4 3 2 4 5 5 5 2 2 4 2 3 3 3 5 3 2 2 4 5 5 4 5 5 4 2 3 2 2 2 2 5 3 5 2 3 4\\n\",\n    \"1\\n2\\n\",\n    \"1\\n3\\n\",\n    \"1\\n4\\n\",\n    \"4\\n3 2 5 5\\n\",\n    \"6\\n4 3 3 3 3 4\\n\",\n    \"8\\n3 3 5 3 3 3 5 5\\n\",\n    \"10\\n2 4 5 5 5 5 2 3 3 2\\n\",\n    \"20\\n5 2 5 2 2 2 2 2 5 2 2 5 2 5 5 2 2 5 2 2\\n\",\n    \"25\\n4 4 4 4 3 4 3 3 3 3 3 4 4 3 4 4 4 4 4 3 3 3 4 3 4\\n\",\n    \"30\\n4 2 4 2 4 2 2 4 4 4 4 2 4 4 4 2 2 2 2 4 2 4 4 4 2 4 2 4 2 2\\n\",\n    \"52\\n5 3 4 4 4 3 5 3 4 5 3 4 4 3 5 5 4 3 3 3 4 5 4 4 5 3 5 3 5 4 5 5 4 3 4 5 3 4 3 3 4 4 4 3 5 3 4 5 3 5 4 5\\n\",\n    \"77\\n5 3 2 3 2 3 2 3 5 2 2 3 3 3 3 5 3 3 2 2 2 5 5 5 5 3 2 2 5 2 3 2 2 5 2 5 3 3 2 2 5 5 2 3 3 2 3 3 3 2 5 5 2 2 3 3 5 5 2 2 5 5 3 3 5 5 2 2 5 2 2 5 5 5 2 5 2\\n\",\n    \"55\\n3 4 2 3 3 2 4 4 3 3 4 2 4 4 3 3 2 3 2 2 3 3 2 3 2 3 2 4 4 3 2 3 2 3 3 2 2 4 2 4 4 3 4 3 2 4 3 2 4 2 2 3 2 3 4\\n\",\n    \"66\\n5 4 5 5 4 4 4 4 4 2 5 5 2 4 2 2 2 5 4 4 4 4 5 2 2 5 5 2 2 4 4 2 4 2 2 5 2 5 4 5 4 5 4 4 2 5 2 4 4 4 2 2 5 5 5 5 4 4 4 4 4 2 4 5 5 5\\n\",\n    \"99\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n\",\n    \"100\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\\n\",\n    \"99\\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\\n\",\n    \"100\\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\\n\",\n    \"99\\n2 2 3 3 3 3 3 2 2 3 2 3 2 3 2 2 3 2 3 2 3 3 3 3 2 2 2 2 3 2 3 3 3 3 3 2 3 3 3 3 2 3 2 3 3 3 2 3 2 3 3 3 3 2 2 3 2 3 2 3 2 3 2 2 2 3 3 2 3 2 2 2 2 2 2 2 2 3 3 3 3 2 3 2 3 3 2 3 2 3 2 3 3 2 2 2 3 2 3\\n\",\n    \"100\\n3 2 3 3 2 2 3 2 2 3 3 2 3 2 2 2 2 2 3 2 2 2 3 2 3 3 2 2 3 2 2 2 2 3 2 3 3 2 2 3 2 2 3 2 3 2 2 3 2 3 2 2 3 2 2 3 3 3 3 3 2 2 3 2 3 3 2 2 3 2 2 2 3 2 2 3 3 2 2 3 3 3 3 2 3 2 2 2 3 3 2 2 3 2 2 2 2 3 2 2\\n\",\n    \"99\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n\",\n    \"100\\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n\",\n    \"99\\n2 2 2 2 4 2 2 2 2 4 4 4 4 2 4 4 2 2 4 4 2 2 2 4 4 2 4 4 2 4 4 2 2 2 4 4 2 2 2 2 4 4 4 2 2 2 4 4 2 4 2 4 2 2 4 2 4 4 4 4 4 2 2 4 4 4 2 2 2 2 4 2 4 2 2 2 2 2 2 4 4 2 4 2 2 4 2 2 2 2 2 4 2 4 2 2 4 4 4\\n\",\n    \"100\\n4 2 4 4 2 4 2 2 4 4 4 4 4 4 4 4 4 2 4 4 2 2 4 4 2 2 4 4 2 2 2 4 4 2 4 4 2 4 2 2 4 4 2 4 2 4 4 4 2 2 2 2 2 2 2 4 2 2 2 4 4 4 2 2 2 2 4 2 2 2 2 2 2 2 4 4 4 4 4 4 4 4 4 2 2 2 2 2 2 2 2 4 4 4 4 2 4 2 2 4\\n\",\n    \"99\\n4 3 4 4 4 4 4 3 4 3 3 4 3 3 4 4 3 3 3 4 3 4 3 3 4 3 3 3 3 4 3 4 4 3 4 4 3 3 4 4 4 3 3 3 4 4 3 3 4 3 4 3 4 3 4 3 3 3 3 4 3 4 4 4 4 4 4 3 4 4 3 3 3 3 3 3 3 3 4 3 3 3 4 4 4 4 4 4 3 3 3 3 4 4 4 3 3 4 3\\n\",\n    \"100\\n3 3 4 4 4 4 4 3 4 4 3 3 3 3 4 4 4 4 4 4 3 3 3 4 3 4 3 4 3 3 4 3 3 3 3 3 3 3 3 4 3 4 3 3 4 3 3 3 4 4 3 4 4 3 3 4 4 4 4 4 4 3 4 4 3 4 3 3 3 4 4 3 3 4 4 3 4 4 4 3 3 4 3 3 4 3 4 3 4 3 3 4 4 4 3 3 4 3 3 4\\n\",\n    \"99\\n3 3 4 4 4 2 4 4 3 2 3 4 4 4 2 2 2 3 2 4 4 2 4 3 2 2 2 4 2 3 4 3 4 2 3 3 4 2 3 3 2 3 4 4 3 2 4 3 4 3 3 3 3 3 4 4 3 3 4 4 2 4 3 4 3 2 3 3 3 4 4 2 4 4 2 3 4 2 3 3 3 4 2 2 3 2 4 3 2 3 3 2 3 4 2 3 3 2 3\\n\",\n    \"100\\n2 2 4 2 2 3 2 3 4 4 3 3 4 4 4 2 3 2 2 3 4 2 3 2 4 3 4 2 3 3 3 2 4 3 3 2 2 3 2 4 4 2 4 3 4 4 3 3 3 2 4 2 2 2 2 2 2 3 2 3 2 3 4 4 4 2 2 3 4 4 3 4 3 3 2 3 3 3 4 3 2 3 3 2 4 2 3 3 4 4 3 3 4 3 4 3 3 4 3 3\\n\",\n    \"99\\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n\",\n    \"100\\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5\\n\",\n    \"99\\n2 2 2 2 2 5 2 2 5 2 5 2 5 2 2 2 2 2 5 2 2 2 5 2 2 5 2 2 2 5 5 2 5 2 2 5 2 5 2 2 5 5 2 2 2 2 5 5 2 2 2 5 2 2 5 2 2 2 2 2 5 5 5 5 2 2 5 2 5 2 2 2 2 2 5 2 2 5 5 2 2 2 2 2 5 5 2 2 5 5 2 2 2 2 5 5 5 2 5\\n\",\n    \"100\\n5 5 2 2 2 2 2 2 5 5 2 5 2 2 2 2 5 2 5 2 5 5 2 5 5 2 2 2 2 2 2 5 2 2 2 5 2 2 5 2 2 5 5 5 2 5 5 5 5 5 5 2 2 5 2 2 5 5 5 5 5 2 5 2 5 2 2 2 5 2 5 2 5 5 2 5 5 2 2 5 2 5 5 2 5 2 2 5 2 2 2 5 2 2 2 2 5 5 2 5\\n\",\n    \"99\\n5 3 3 3 5 3 3 3 3 3 3 3 3 5 3 3 3 3 3 3 3 3 5 3 3 3 5 5 3 5 5 3 3 5 5 5 3 5 3 3 3 3 5 3 3 5 5 3 5 5 5 3 5 3 5 3 5 5 5 5 3 3 3 5 3 5 3 3 3 5 5 5 5 5 3 5 5 3 3 5 5 3 5 5 3 5 5 3 3 5 5 5 3 3 3 5 3 3 3\\n\",\n    \"100\\n3 3 3 5 3 3 3 3 3 3 5 5 5 5 3 3 3 3 5 3 3 3 3 3 5 3 5 3 3 5 5 5 5 5 5 3 3 5 3 3 5 3 5 5 5 3 5 3 3 3 3 3 3 3 3 3 3 3 5 5 3 5 3 5 5 3 5 3 3 5 3 5 5 5 5 3 5 3 3 3 5 5 5 3 3 3 5 3 5 5 5 3 3 3 5 3 5 5 3 5\\n\",\n    \"99\\n5 3 5 5 3 3 3 2 2 5 2 5 3 2 5 2 5 2 3 5 3 2 3 2 5 5 2 2 3 3 5 5 3 5 5 2 3 3 5 2 2 5 3 2 5 2 3 5 5 2 5 2 2 5 3 3 5 3 3 5 3 2 3 5 3 2 3 2 3 2 2 2 2 5 2 2 3 2 5 5 5 3 3 2 5 3 5 5 5 2 3 2 5 5 2 5 2 5 3\\n\",\n    \"100\\n3 5 3 3 5 5 3 3 2 5 5 3 3 3 2 2 3 2 5 3 2 2 3 3 3 3 2 5 3 2 3 3 5 2 2 2 3 2 3 5 5 3 2 5 2 2 5 5 3 5 5 5 2 2 5 5 3 3 2 2 2 5 3 3 2 2 3 5 3 2 3 5 5 3 2 3 5 5 3 3 2 3 5 2 5 5 5 5 5 5 3 5 3 2 3 3 2 5 2 2\\n\",\n    \"99\\n4 4 4 5 4 4 5 5 4 4 5 5 5 4 5 4 5 5 5 4 4 5 5 5 5 4 5 5 5 4 4 5 5 4 5 4 4 4 5 5 5 5 4 4 5 4 4 5 4 4 4 4 5 5 5 4 5 4 5 5 5 5 5 4 5 4 5 4 4 4 4 5 5 5 4 5 5 4 4 5 5 5 4 5 4 4 5 5 4 5 5 5 5 4 5 5 4 4 4\\n\",\n    \"100\\n4 4 5 5 5 5 5 5 4 4 5 5 4 4 5 5 4 5 4 4 4 4 4 4 4 4 5 5 5 5 5 4 4 4 4 4 5 4 4 5 4 4 4 5 5 5 4 5 5 5 5 5 5 4 4 4 4 4 4 5 5 4 5 4 4 5 4 4 4 4 5 5 4 5 5 4 4 4 5 5 5 5 4 5 5 5 4 4 5 5 5 4 5 4 5 4 4 5 5 4\\n\",\n    \"99\\n2 2 2 5 2 2 2 2 2 4 4 5 5 2 2 4 2 5 2 2 2 5 2 2 5 5 5 4 5 5 4 4 2 2 5 2 2 2 2 5 5 2 2 4 4 4 2 2 2 5 2 4 4 2 4 2 4 2 5 4 2 2 5 2 4 4 4 2 5 2 2 5 4 2 2 5 5 5 2 4 5 4 5 5 4 4 4 5 4 5 4 5 4 2 5 2 2 2 4\\n\",\n    \"100\\n4 4 5 2 2 5 4 5 2 2 2 4 2 5 4 4 2 2 4 5 2 4 2 5 5 4 2 4 4 2 2 5 4 2 5 4 5 2 5 2 4 2 5 4 5 2 2 2 5 2 5 2 5 2 2 4 4 5 5 5 5 5 5 5 4 2 2 2 4 2 2 4 5 5 4 5 4 2 2 2 2 4 2 2 5 5 4 2 2 5 4 5 5 5 4 5 5 5 2 2\\n\",\n    \"99\\n5 3 4 4 5 4 4 4 3 5 4 3 3 4 3 5 5 5 5 4 3 3 5 3 4 5 3 5 4 4 3 5 5 4 4 4 4 3 5 3 3 5 5 5 5 5 4 3 4 4 3 5 5 3 3 4 4 4 5 4 4 5 4 4 4 4 5 5 4 3 3 4 3 5 3 3 3 3 4 4 4 4 3 4 5 4 4 5 5 5 3 4 5 3 4 5 4 3 3\\n\",\n    \"100\\n5 4 4 4 5 5 5 4 5 4 4 3 3 4 4 4 5 4 5 5 3 5 5 4 5 5 5 4 4 5 3 5 3 5 3 3 5 4 4 5 5 4 5 5 3 4 5 4 4 3 4 4 3 3 5 4 5 4 5 3 4 5 3 4 5 4 3 5 4 5 4 4 4 3 4 5 3 4 3 5 3 4 4 4 3 4 4 5 3 3 4 4 5 5 4 3 4 4 3 5\\n\",\n    \"99\\n2 2 5 2 5 3 4 2 3 5 4 3 4 2 5 3 2 2 4 2 4 4 5 4 4 5 2 5 5 3 2 3 2 2 3 4 5 3 5 2 5 4 4 5 4 2 2 3 2 3 3 3 4 4 3 2 2 4 4 2 5 3 5 3 5 4 4 4 5 4 5 2 2 5 4 4 4 3 3 2 5 2 5 2 3 2 5 2 2 5 5 3 4 5 3 4 4 4 4\\n\",\n    \"2\\n5 2\\n\",\n    \"5\\n2 2 2 2 2\\n\",\n    \"100\\n2 3 2 2 2 3 2 3 3 3 3 3 2 3 3 2 2 3 3 2 3 2 3 2 3 4 4 4 3 3 3 3 3 4 4 3 3 4 3 2 3 4 3 3 3 3 2 3 4 3 4 3 3 2 4 4 2 4 4 3 3 3 3 4 3 2 3 4 3 4 4 4 4 4 3 2 2 3 4 2 4 4 4 2 2 4 2 2 3 2 2 4 4 3 4 2 3 3 2 2\\n\",\n    \"100\\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\\n\",\n    \"100\\n5 4 3 5 3 5 4 2 3 3 4 5 4 5 5 4 2 4 2 2 5 2 5 3 4 4 4 5 5 5 3 4 4 4 3 5 3 2 5 4 3 3 3 5 2 3 4 2 5 4 3 4 5 2 2 3 4 4 2 3 3 3 2 5 2 3 4 3 3 3 2 5 4 3 4 5 4 2 5 4 5 2 2 4 2 2 5 5 4 5 2 2 2 2 5 2 4 4 4 5\\n\",\n    \"2\\n2 2\\n\",\n    \"20\\n4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"5\\n\",\n    \"40\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"10\\n\",\n    \"13\\n\",\n    \"15\\n\",\n    \"14\\n\",\n    \"33\\n\",\n    \"34\\n\",\n    \"16\\n\",\n    \"83\\n\",\n    \"84\\n\",\n    \"75\\n\",\n    \"75\\n\",\n    \"75\\n\",\n    \"75\\n\",\n    \"50\\n\",\n    \"50\\n\",\n    \"54\\n\",\n    \"50\\n\",\n    \"51\\n\",\n    \"51\\n\",\n    \"58\\n\",\n    \"61\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"48\\n\",\n    \"38\\n\",\n    \"32\\n\",\n    \"32\\n\",\n    \"39\\n\",\n    \"42\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"37\\n\",\n    \"31\\n\",\n    \"24\\n\",\n    \"19\\n\",\n    \"37\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"61\\n\",\n    \"1\\n\",\n    \"35\\n\",\n    \"2\\n\",\n    \"1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/991/B",
  "starter_code": ""
}