{
  "task_id": "APPS/422",
  "problem_id": 422,
  "prompt": "Vova has taken his summer practice this year and now he should write a report on how it went.\n\nVova has already drawn all the tables and wrote down all the formulas. Moreover, he has already decided that the report will consist of exactly $n$ pages and the $i$-th page will include $x_i$ tables and $y_i$ formulas. The pages are numbered from $1$ to $n$.\n\nVova fills the pages one after another, he can't go filling page $i + 1$ before finishing page $i$ and he can't skip pages. \n\nHowever, if he draws strictly more than $k$ tables in a row or writes strictly more than $k$ formulas in a row then he will get bored. Vova wants to rearrange tables and formulas in each page in such a way that he doesn't get bored in the process. Vova can't move some table or some formula to another page.\n\nNote that the count doesn't reset on the start of the new page. For example, if the page ends with $3$ tables and the next page starts with $5$ tables, then it's counted as $8$ tables in a row.\n\nHelp Vova to determine if he can rearrange tables and formulas on each page in such a way that there is no more than $k$ tables in a row and no more than $k$ formulas in a row.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\le n \\le 3 \\cdot 10^5$, $1 \\le k \\le 10^6$).\n\nThe second line contains $n$ integers $x_1, x_2, \\dots, x_n$ ($1 \\le x_i \\le 10^6$) \u2014 the number of tables on the $i$-th page.\n\nThe third line contains $n$ integers $y_1, y_2, \\dots, y_n$ ($1 \\le y_i \\le 10^6$) \u2014 the number of formulas on the $i$-th page.\n\n\n-----Output-----\n\nPrint \"YES\" if Vova can rearrange tables and formulas on each page in such a way that there is no more than $k$ tables in a row and no more than $k$ formulas in a row.\n\nOtherwise print \"NO\".\n\n\n-----Examples-----\nInput\n2 2\n5 5\n2 2\n\nOutput\nYES\n\nInput\n2 2\n5 6\n2 2\n\nOutput\nNO\n\nInput\n4 1\n4 1 10 1\n3 2 10 1\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first example the only option to rearrange everything is the following (let table be 'T' and formula be 'F'):   page $1$: \"TTFTTFT\"  page $2$: \"TFTTFTT\" \n\nThat way all blocks of tables have length $2$.\n\nIn the second example there is no way to fit everything in such a way that there are no more than $2$ tables in a row and $2$ formulas in a row.",
  "solutions": "[\"def max(a, b):\\n\\tif a > b:\\n\\t\\treturn a\\n\\telse:\\n\\t\\treturn b\\nn, k = map(int, input().split())\\nx = [int(t) for t in input().split()]\\ny = [int(t) for t in input().split()]\\nf, s = 0, 0\\nfor i in range(n):\\n    f = max(0, x[i] + f - k * y[i])\\n    s = max(0, y[i] + s - k * x[i])\\n    if f > k or s > k:\\n        print('NO')\\n        return\\nprint('YES')\", \"def max(a, b):\\n\\tif a > b:\\n\\t\\treturn a\\n\\treturn b\\nn, k = map(int, input().split())\\no = [int(t) for t in (input()+' '+input()).split()]\\nf, s = 0, 0\\nfor i in range(n):\\n    f = max(0, o[i] + f - k * o[i+n])\\n    s = max(0, o[i+n] + s - k * o[i])\\n    if f > k or s > k:\\n        print('NO')\\n        return\\nprint('YES')\", \"n, k = map(int, input().split())\\no = [int(t) for t in (input()+' '+input()).split()]\\nf, s = 0, 0\\nfor i in range(n):\\n    f = max(0, o[i] + f - k * o[i+n])\\n    s = max(0, o[i+n] + s - k * o[i])\\n    if f > k or s > k:\\n        print('NO')\\n        return\\nprint('YES')\", \"def get(px, py, x, y):\\n\\tans = 10**18\\n\\tnonlocal k\\n\\tif px <= k:\\n\\t\\tcnt = (px + x + k - 1) // k - 1\\n\\t\\tif y == cnt:\\n\\t\\t\\tans = min(ans, px + x - cnt * k)\\n\\t\\telif y > cnt and y <= x * k:\\n\\t\\t\\tans = min(ans, 1)\\n\\tif py <= k:\\n\\t\\tcnt = (x + k - 1) // k - 1\\n\\t\\tif y == cnt:\\n\\t\\t\\tans = min(ans, x - cnt * k)\\n\\t\\telif y > cnt and y <= (x - 1) * k + (k - py):\\n\\t\\t\\tans = min(ans, 1)\\n\\treturn ans\\n\\nn, k = map(int, input().split())\\nx = list(map(int, input().split()))\\ny = list(map(int, input().split()))\\ndp = [[10**18] * (n + 1), [10**18] * (n + 1)]\\ndp[0][0], dp[1][0] = 0, 0\\nfor i in range(n):\\n\\tdp[0][i + 1] = get(dp[0][i], dp[1][i], x[i], y[i])\\n\\tdp[1][i + 1] = get(dp[1][i], dp[0][i], y[i], x[i])\\nprint('YES' if min(dp[0][-1], dp[1][-1]) <= k else 'NO')\", \"def get(px, py, x, y):\\n\\tans = 10**18\\n\\tnonlocal k\\n\\tif px <= k:\\n\\t\\tcnt = (px + x + k - 1) // k - 1\\n\\t\\tif y == cnt:\\n\\t\\t\\tans = min(ans, px + x - cnt * k)\\n\\t\\telif y > cnt and y <= x * k:\\n\\t\\t\\tans = min(ans, 1)\\n\\tif py <= k:\\n\\t\\tcnt = (x + k - 1) // k - 1\\n\\t\\tif y == cnt:\\n\\t\\t\\tans = min(ans, x - cnt * k)\\n\\t\\telif y > cnt and y <= (x - 1) * k + (k - py):\\n\\t\\t\\tans = min(ans, 1)\\n\\treturn ans\\n\\nn, k = map(int, input().split())\\nx = list(map(int, input().split()))\\ny = list(map(int, input().split()))\\ndp = [[10**18] * (n + 1), [10**18] * (n + 1)]\\ndp[0][0], dp[1][0] = 0, 0\\nfor i in range(n):\\n\\tdp[0][i + 1] = get(dp[0][i], dp[1][i], x[i], y[i])\\n\\tdp[1][i + 1] = get(dp[1][i], dp[0][i], y[i], x[i])\\nprint('YES' if min(dp[0][-1], dp[1][-1]) <= k else 'NO')\", \"n, k = map(int, input().split())\\no = [int(t) for t in (input()+' '+input()).split()]\\nf, s = 0, 0\\nfor i in range(n):\\n    f = max(0, o[i] + f - k * o[i+n])\\n    s = max(0, o[i+n] + s - k * o[i])\\n    if f > k or s > k:\\n        print('NO')\\n        return\\nprint('YES')\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 2\\n5 5\\n2 2\\n\",\n    \"2 2\\n5 6\\n2 2\\n\",\n    \"4 1\\n4 1 10 1\\n3 2 10 1\\n\",\n    \"53 3\\n2 3 1 2 2 6 1 5 6 1 5 3 1 1 6 4 3 2 4 1 1 4 4 3 5 6 1 2 2 1 2 2 2 5 4 2 1 4 2 5 3 1 3 6 6 4 4 5 2 1 2 2 1\\n5 2 6 3 5 5 1 1 2 4 6 1 4 2 4 1 4 4 5 3 6 4 6 5 6 3 4 4 3 1 1 5 5 1 1 2 4 4 3 1 2 2 3 2 3 2 2 4 5 1 5 2 6\\n\",\n    \"59 4\\n8 1 7 5 4 2 7 5 7 4 4 2 3 7 6 5 1 4 6 6 2 4 6 7 6 7 5 8 8 8 6 3 7 7 2 8 5 5 8 1 2 3 3 6 8 2 3 1 8 3 1 2 3 7 7 3 2 7 5\\n1 4 8 6 3 8 2 2 5 7 4 8 8 8 7 8 3 5 4 5 2 6 3 7 3 5 7 8 1 3 7 7 4 8 6 7 6 6 3 7 7 6 8 2 1 8 6 8 4 6 6 2 1 8 1 1 1 1 8\\n\",\n    \"81 2\\n1 2 3 1 3 3 3 3 2 2 2 1 2 1 2 1 2 1 3 3 2 2 1 3 1 3 2 2 3 2 3 1 3 1 1 2 3 1 1 2 1 2 1 2 3 3 1 3 2 2 1 1 3 3 1 1 3 2 1 3 1 3 1 2 1 2 3 3 2 1 3 3 2 1 2 1 3 2 2 3 3\\n2 3 1 3 1 1 2 3 2 2 3 3 3 2 2 3 3 1 1 3 1 2 2 1 3 2 3 3 3 3 3 1 1 3 1 2 2 1 1 3 2 3 1 1 2 2 1 1 2 1 3 1 3 2 3 3 1 2 2 2 1 3 2 3 3 1 2 3 1 3 1 1 1 3 3 2 3 3 2 3 2\\n\",\n    \"17 3\\n8 2 4 5 4 5 3 6 6 6 4 1 5 5 8 6 3\\n8 4 1 5 1 3 5 6 7 1 5 5 2 6 4 5 4\\n\",\n    \"33 4\\n8 6 6 8 2 5 5 5 2 7 2 6 1 6 7 4 7 4 3 8 6 8 8 4 6 4 8 1 2 1 3 6 8\\n7 2 5 2 2 5 2 3 6 8 3 2 2 5 2 7 2 4 7 3 4 6 5 6 3 6 3 3 7 2 3 2 1\\n\",\n    \"69 2\\n2 3 2 3 2 2 2 3 1 2 1 2 3 3 1 2 1 1 1 2 1 2 1 2 2 2 3 2 2 1 2 1 2 2 1 2 2 2 2 3 1 1 2 1 1 1 2 1 3 1 3 1 3 2 2 2 1 1 3 3 1 2 1 3 3 3 1 2 2\\n2 1 3 3 2 1 1 3 3 3 1 1 2 3 3 3 3 1 1 3 3 3 3 3 3 2 2 3 2 3 2 1 3 3 3 3 3 2 2 3 3 3 3 2 2 3 1 3 3 2 2 3 3 3 1 2 2 2 3 2 1 3 2 2 1 2 1 1 2\\n\",\n    \"65 3\\n2 1 4 2 4 1 3 2 3 4 3 4 4 3 1 4 4 3 3 1 4 2 1 1 4 3 4 4 3 1 2 4 4 4 3 2 1 4 1 3 4 1 4 3 4 1 1 3 3 2 2 1 2 2 3 2 1 4 2 3 3 3 3 4 3\\n1 3 1 3 3 2 1 4 3 4 3 3 1 3 4 2 3 3 1 1 1 3 3 1 1 2 3 3 4 2 2 1 1 3 1 3 4 1 1 2 4 4 3 3 2 2 4 4 4 4 1 1 3 2 3 3 3 2 4 4 1 1 3 4 3\\n\",\n    \"94 3\\n4 2 1 6 1 1 1 5 1 3 3 3 6 1 6 6 3 5 3 1 4 1 3 6 4 5 3 4 6 5 5 2 1 5 4 5 6 5 2 2 6 5 4 6 1 3 5 1 2 5 5 2 1 3 4 5 6 4 3 1 4 4 1 5 4 4 2 2 2 4 4 3 6 2 6 1 5 6 1 3 5 5 1 3 5 3 5 2 6 1 3 6 1 5\\n5 6 3 5 4 1 4 6 3 1 4 4 3 3 6 2 1 1 4 6 4 2 4 1 3 1 5 3 6 2 5 6 1 6 6 2 2 2 2 5 2 6 1 4 1 5 1 3 6 6 5 3 2 6 6 2 5 6 3 4 4 4 2 3 1 2 4 5 2 6 3 3 3 3 1 1 1 3 6 3 3 6 5 2 4 1 2 2 1 6 3 5 1 5\\n\",\n    \"1 1\\n1\\n1\\n\",\n    \"1 1000000\\n1\\n2\\n\",\n    \"1 1\\n2\\n1\\n\",\n    \"1 1\\n1\\n2\\n\",\n    \"1 1\\n3\\n1\\n\",\n    \"1 1\\n1\\n3\\n\",\n    \"2 2\\n1 5\\n1 1\\n\",\n    \"2 1\\n1 1\\n2 2\\n\",\n    \"3 2\\n4 1 1\\n1 4 3\\n\",\n    \"69 6969\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"2 3\\n3 7\\n2 1\\n\",\n    \"4 2\\n6 6 2 2\\n2 2 6 6\\n\",\n    \"3 2\\n6 9 1\\n3 3 4\\n\",\n    \"9 5\\n7 2 9 1 1 9 1 2 7\\n10 1 9 10 9 2 9 6 4\\n\",\n    \"10 2\\n4 6 7 4 4 3 10 3 6 9\\n6 2 7 7 6 4 10 3 2 4\\n\",\n    \"10 3\\n7 9 1 3 6 4 4 6 10 4\\n3 2 6 10 9 4 7 5 8 6\\n\",\n    \"5 3\\n3 1 5 1 1\\n1 1 4 5 5\\n\",\n    \"4 4\\n3 2 1 10\\n9 10 7 5\\n\",\n    \"5 2\\n8 3 8 7 3\\n3 6 3 7 3\\n\",\n    \"5 2\\n4 6 3 5 10\\n7 8 8 2 4\\n\",\n    \"4 4\\n5 1 2 1\\n1 9 1 3\\n\",\n    \"3 2\\n4 1 4\\n9 3 9\\n\",\n    \"2 1\\n6 9\\n7 10\\n\",\n    \"2 1\\n6 4\\n5 3\\n\",\n    \"5 4\\n3 6 7 8 9\\n9 6 3 1 3\\n\",\n    \"4 1\\n8 2 10 6\\n8 3 10 7\\n\",\n    \"3 5\\n1 1 1\\n10 1 10\\n\",\n    \"5 3\\n1 1 2 2 3\\n6 1 7 7 10\\n\",\n    \"5 4\\n1 8 10 10 3\\n7 4 2 2 6\\n\",\n    \"5 4\\n9 7 2 1 3\\n9 8 9 7 4\\n\",\n    \"4 1\\n9 8 6 4\\n8 8 6 3\\n\",\n    \"44 14\\n28 27 28 14 29 6 5 20 10 16 19 12 14 28 1 16 8 1 15 4 22 1 8 26 28 30 1 28 2 6 17 21 21 8 29 3 30 10 9 17 13 10 29 28\\n6 21 13 6 9 8 5 23 24 7 7 19 13 4 25 3 24 15 19 14 26 8 16 3 15 3 1 1 29 9 30 28 3 5 18 14 14 5 4 27 19 18 13 15\\n\",\n    \"5 2\\n6 9 5 8 10\\n5 8 7 6 3\\n\",\n    \"29 15\\n11 8 3 9 30 27 29 13 18 14 30 22 27 22 19 1 14 24 28 21 9 18 3 15 3 12 19 12 24\\n18 11 23 11 2 1 1 1 1 1 28 7 14 27 21 14 21 27 1 6 17 3 4 9 8 18 4 23 15\\n\",\n    \"2 1\\n24 21\\n24 20\\n\",\n    \"3 3\\n6 1 6\\n1 1 1\\n\",\n    \"49 7\\n16 17 2 3 4 4 30 26 24 4 16 4 15 24 28 8 5 17 8 13 11 1 29 3 28 11 8 17 25 7 8 5 9 23 20 4 2 25 21 3 23 27 21 30 3 10 5 25 19\\n11 14 21 21 5 1 18 16 28 3 10 28 19 16 13 11 10 15 26 2 11 1 26 1 8 17 11 25 16 18 9 29 14 11 4 7 3 8 15 12 5 25 15 7 18 9 2 23 18\\n\",\n    \"5 3\\n1 6 1 3 6\\n6 1 1 1 1\\n\",\n    \"4 1\\n1 1 1 1\\n2 1 1 2\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1076/F",
  "starter_code": ""
}