{
  "task_id": "APPS/16",
  "problem_id": 16,
  "prompt": "A string is called bracket sequence if it does not contain any characters other than \"(\" and \")\". A bracket sequence is called regular if it it is possible to obtain correct arithmetic expression by inserting characters \"+\" and \"1\" into this sequence. For example, \"\", \"(())\" and \"()()\" are regular bracket sequences; \"))\" and \")((\" are bracket sequences (but not regular ones), and \"(a)\" and \"(1)+(1)\" are not bracket sequences at all.\n\nYou have a number of strings; each string is a bracket sequence of length $2$. So, overall you have $cnt_1$ strings \"((\", $cnt_2$ strings \"()\", $cnt_3$ strings \")(\" and $cnt_4$ strings \"))\". You want to write all these strings in some order, one after another; after that, you will get a long bracket sequence of length $2(cnt_1 + cnt_2 + cnt_3 + cnt_4)$. You wonder: is it possible to choose some order of the strings you have such that you will get a regular bracket sequence? Note that you may not remove any characters or strings, and you may not add anything either.\n\n\n-----Input-----\n\nThe input consists of four lines, $i$-th of them contains one integer $cnt_i$ ($0 \\le cnt_i \\le 10^9$).\n\n\n-----Output-----\n\nPrint one integer: $1$ if it is possible to form a regular bracket sequence by choosing the correct order of the given strings, $0$ otherwise.\n\n\n-----Examples-----\nInput\n3\n1\n4\n3\n\nOutput\n1\n\nInput\n0\n0\n0\n0\n\nOutput\n1\n\nInput\n1\n2\n3\n4\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example it is possible to construct a string \"(())()(()((()()()())))\", which is a regular bracket sequence.\n\nIn the second example it is possible to construct a string \"\", which is a regular bracket sequence.",
  "solutions": "[\"cnt1 = int(input())\\ncnt2 = int(input())\\ncnt3 = int(input())\\ncnt4 = int(input())\\nif cnt1 != cnt4:\\n\\tprint(0)\\n\\treturn\\n\\nif (cnt3 != 0 and cnt1 == 0):\\n\\tprint(0)\\n\\treturn\\n\\nprint(1)\", \"cnt = [int(input()) for _ in range(4)]\\n\\nif cnt[0] != cnt[3]:\\n\\tprint(0)\\nelif cnt[2] > 0 and cnt[0] == 0:\\n\\tprint(0)\\nelse:\\n\\tprint(1)\\n\", \"a = int(input())\\ninput()\\nc = int(input())\\nb = int(input())\\nif c :\\n  print(int(a == b and a > 0))\\nelse:\\n  print(int(a == b))\\n\", \"a = int(input())\\nb = int(input())\\nc = int(input())\\nd = int(input())\\n\\nf = True\\nk = 2 * a\\nif c:\\n    if k < 1:\\n        print(0)\\n    else:\\n        if k == 2 * d:\\n            print(1)\\n        else:\\n            print(0)\\nelse:\\n    if k == 2 * d:\\n        print(1)\\n    else:\\n        print(0)\\n\", \"c1 = int(input())\\nc2 = int(input())\\nc3 = int(input())\\nc4 = int(input())\\nif c1 != c4:\\n    print(0)\\nelif c1 == 0 and c3 > 0:\\n    print(0)\\nelse:\\n    print(1)\\n\", \"c1 = int(input())\\nc2 = int(input())\\nc3 = int(input())\\nc4 = int(input())\\n\\nres = 1\\nif c1 != c4:\\n    res = 0\\nelif c3 > 0 and c1 == 0:\\n    res = 0\\n\\nprint(res)\", \"a = int(input())\\nb = int(input())\\nc = int(input())\\nd = int(input())\\nif a == d and (a > 0 and c > 0 or c == 0):\\n    print(1)\\nelse:\\n    print(0)\\n\", \"mi = lambda: [int(i) for i in input().split()]\\nc1, c2, c3, c4 = int(input()), int(input()), int(input()), int(input())\\n\\nif c1 != c4:\\n    print(0)\\n    return\\n\\nif c3 != 0 and c1 == 0:\\n    print(0)\\n    return\\n\\nprint(1)\\n\", \"def main():\\n    a, b, c, d = (int(input()) for i in range(4))\\n    if (a == d == 0):\\n        if (c == 0):\\n            print(1)\\n        else:\\n            print(0)\\n    elif (a == d):\\n        print(1)\\n    else:\\n        print(0)\\n \\n \\nmain()\\n\", \"cnt1=int(input())\\ncnt2=int(input())\\ncnt3=int(input())\\ncnt4=int(input())\\n\\nif cnt1 == cnt4 and cnt1 > 0:\\n    print(1)\\n    return\\nif cnt1 == cnt4 and cnt3 == 0:\\n    print(1)\\n    return\\nprint(0)\", \"c1 = int(input())\\nc2 = int(input())\\nc3 = int(input())\\nc4 = int(input())\\nif c1 != c4:\\n    print(0)\\n    return\\nif c3 != 0 and c1 == 0:\\n    print(0)\\nelse:\\n    print(1)\\n\", \"a = int(input())\\nb = int(input())\\nc = int(input())\\nd = int(input())\\nfl, cnt = 0, 0\\nif a == d and (a != 0 or c == 0):\\n    print(1)\\nelse:\\n    print(0)\\n\", \"a = int(input())\\nb = int(input())\\nc = int(input())\\nd = int(input())\\nif a==d and (a>0 or c==0):\\n    print(1)\\nelse:\\n    print(0)\", \"c1 = int(input())\\nc2 = int(input())\\nc3 = int(input())\\nc4 = int(input())\\nif c1 == c4:\\n    if c3 > 0 and c1 == 0:\\n        print(0)\\n    else:\\n        print(1)\\nelse:\\n    print(0)\\n\", \"#      \\nimport collections, atexit, math, sys, bisect \\n\\nsys.setrecursionlimit(1000000)\\n\\nisdebug = False\\ntry :\\n    #raise ModuleNotFoundError\\n    import pylint\\n    import numpy\\n    def dprint(*args, **kwargs):\\n        #print(*args, **kwargs, file=sys.stderr)\\n        # in python 3.4 **kwargs is invalid???\\n        print(*args,  file=sys.stderr)\\n    dprint('debug mode')\\n    isdebug = True\\nexcept Exception:\\n    def dprint(*args, **kwargs):\\n        pass\\n\\n\\ndef red_inout():\\n    inId = 0\\n    outId = 0\\n    if not isdebug:\\n        inId = 0\\n        outId = 0\\n    if inId>0:\\n        dprint('use input', inId)\\n        try:\\n            f = open('input'+ str(inId) + '.txt', 'r')\\n            sys.stdin = f #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\n        except Exception:\\n            dprint('invalid input file')\\n    if outId>0:\\n        dprint('use output', outId)\\n        try:\\n            f = open('stdout'+ str(outId) + '.txt', 'w')\\n            sys.stdout = f #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\n        except Exception:\\n            dprint('invalid output file')\\n            \\n        atexit.register(lambda :sys.stdout.close())     #idle \\u4e2d\\u4e0d\\u4f1a\\u6267\\u884c atexit\\n\\nif isdebug and len(sys.argv) == 1:\\n    red_inout()\\n\\ndef getIntList():\\n    return list(map(int, input().split()))            \\n\\ndef solve(): \\n    pass\\n    \\nT_ = 1    \\n#T_, = getIntList()\\n\\nfor iii_ in range(T_):\\n    #solve()\\n    a,  = getIntList()\\n    b,  = getIntList()\\n    c,  = getIntList()\\n    d,  = getIntList()\\n    if a!=d:\\n        print(0)\\n        continue\\n    if c>0 and a==0:\\n        print(0)\\n        continue\\n    print(1)\\n    \\n\\n\\n\\n\\n\\n\\n\", \"c1 = int(input())\\nc2 = int(input())\\nc3 = int(input())\\nc4 = int(input())\\nif c1 != c4 or (c3 != 0 and c1 == 0):\\n    print(0)\\nelse:\\n    print(1)\\n\", \"def A():\\n    cnt1 = int(input())\\n    cnt2 = int(input())\\n    cnt3 = int(input())\\n    cnt4 = int(input())\\n\\n    if(cnt4!=cnt1):\\n        print(0)\\n        return\\n    if(cnt3>0 and cnt1==cnt4==0):\\n        print(0)\\n        return\\n    print(1)\\nA()\\n\", \"from collections import defaultdict as dd\\nimport math\\ndef nn():\\n\\treturn int(input())\\n\\ndef li():\\n\\treturn list(input())\\n\\ndef mi():\\n\\treturn list(map(int, input().split()))\\n\\ndef lm():\\n\\treturn list(map(int, input().split()))\\n\\n\\nc1=nn()\\nc2=nn()\\nc3=nn()\\nc4=nn()\\n\\nif not c1==c4:\\n\\tprint(0)\\nelif c1==0 and not c3==0:\\n\\tprint(0)\\nelse:\\n\\tprint(1)\\n\", \"a = int(input())\\nb = int(input())\\nc = int(input())\\nd = int(input())\\n\\nif a==0 and d==0:\\n    if c==0:\\n        print(1)\\n    else:\\n        print(0)\\nelse:\\n    if a==d:\\n        print(1)\\n    else:\\n        print(0)\", \"a = int(input())\\nint(input())\\nc = int(input())\\nd = int(input())\\nprint(1 - int(a != d or (a == 0 and not (a == c == d))))\\n\", \"c1 = int(input())\\nc2 = int(input())\\nc3 = int(input())\\nc4 = int(input())\\nif c1 != c4:\\n    print(0)\\nelif c1 == 0 and c3 > 0:\\n    print(0)\\nelse:\\n    print(1)\\n\", \"a = int(input())\\nb = int(input())\\nc = int(input())\\nd = int(input())\\nprint(1 if a == d and (c == 0 or (a > 0 and d > 0)) else 0)\\n\", \"import sys\\nfrom math import *\\n\\ndef minp():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef mint():\\n\\treturn int(minp())\\n\\ndef mints():\\n\\treturn list(map(int, minp().split()))\\n\\na = [0]*4\\nfor i in range(4):\\n\\ta[i] = mint()\\nif a[0]-a[3] != 0 or a[0] == 0 and a[2] > 0:\\n\\tprint(0)\\nelse:\\n\\tprint(1)\\n\", \"a=int(input())\\nb=int(input())\\nc=int(input())\\nd=int(input())\\nif(c==0):\\n\\tif(a!=d):\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(1)\\nelse:\\n\\tif(a==0 or d==0):\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tif(a!=d):\\n\\t\\t\\tprint(0)\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\", \"def solve(c1, c2, c3, c4):\\n    if c1 != c4:\\n        return 0\\n    if c3 != 0 and c1 == 0:\\n        return 0\\n    return 1\\n\\n\\ndef main() -> None:\\n    c1 = int(input())\\n    c2 = int(input())\\n    c3 = int(input())\\n    c4 = int(input())\\n    print(solve(c1, c2, c3, c4))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3\\n1\\n4\\n3\\n\",\n    \"0\\n0\\n0\\n0\\n\",\n    \"1\\n2\\n3\\n4\\n\",\n    \"1000000000\\n1000000000\\n1000000000\\n1000000000\\n\",\n    \"1000000000\\n1000000000\\n1000000000\\n999999999\\n\",\n    \"1000000000\\n999999999\\n1000000000\\n1000000000\\n\",\n    \"0\\n1000000000\\n0\\n0\\n\",\n    \"0\\n0\\n1\\n0\\n\",\n    \"4\\n3\\n2\\n1\\n\",\n    \"1\\n2\\n2\\n1\\n\",\n    \"2\\n0\\n2\\n0\\n\",\n    \"1\\n0\\n1\\n1\\n\",\n    \"20123\\n1\\n1\\n1\\n\",\n    \"0\\n40\\n2\\n0\\n\",\n    \"925\\n22\\n24\\n111\\n\",\n    \"1\\n20\\n20\\n1\\n\",\n    \"0\\n1\\n1\\n0\\n\",\n    \"1\\n1\\n0\\n1\\n\",\n    \"20123\\n2\\n3\\n4\\n\",\n    \"0\\n0\\n0\\n1\\n\",\n    \"1\\n0\\n6\\n1\\n\",\n    \"0\\n0\\n10\\n0\\n\",\n    \"1\\n0\\n3\\n1\\n\",\n    \"2\\n2\\n6\\n2\\n\",\n    \"4\\n5\\n10\\n4\\n\",\n    \"0\\n0\\n3\\n0\\n\",\n    \"0\\n0\\n3\\n3\\n\",\n    \"1\\n0\\n5\\n1\\n\",\n    \"2\\n0\\n10\\n2\\n\",\n    \"1\\n10\\n10\\n1\\n\",\n    \"4\\n5\\n100\\n4\\n\",\n    \"1\\n2\\n3\\n1\\n\",\n    \"2\\n100\\n100\\n2\\n\",\n    \"1\\n1\\n4\\n1\\n\",\n    \"1\\n2\\n100\\n1\\n\",\n    \"1\\n0\\n100\\n1\\n\",\n    \"1\\n0\\n10\\n1\\n\",\n    \"1\\n2\\n11\\n1\\n\",\n    \"1\\n0\\n0\\n1\\n\",\n    \"0\\n2\\n2\\n0\\n\",\n    \"1\\n0\\n4\\n1\\n\",\n    \"1\\n1\\n7\\n1\\n\",\n    \"0\\n10\\n1\\n0\\n\",\n    \"5\\n5\\n1000\\n5\\n\",\n    \"2\\n0\\n5\\n2\\n\",\n    \"1\\n1\\n10\\n1\\n\",\n    \"0\\n0\\n4\\n0\\n\",\n    \"0\\n3\\n1\\n0\\n\",\n    \"0\\n2\\n1\\n0\\n\",\n    \"0\\n3\\n9\\n0\\n\",\n    \"0\\n0\\n2\\n0\\n\",\n    \"0\\n100\\n1\\n0\\n\",\n    \"0\\n7\\n2\\n0\\n\",\n    \"0\\n1\\n0\\n1\\n\",\n    \"1\\n5\\n0\\n1\\n\",\n    \"2\\n6\\n6\\n2\\n\",\n    \"1\\n1\\n100\\n1\\n\",\n    \"3\\n0\\n7\\n3\\n\",\n    \"1\\n500\\n500\\n1\\n\",\n    \"1\\n2\\n0\\n1\\n\",\n    \"1\\n0\\n10000000\\n1\\n\",\n    \"1\\n1\\n100000\\n1\\n\",\n    \"1\\n3\\n5\\n1\\n\",\n    \"0\\n1\\n3\\n0\\n\",\n    \"3\\n1\\n100\\n3\\n\",\n    \"2\\n0\\n1\\n2\\n\",\n    \"0\\n2\\n0\\n1\\n\",\n    \"1\\n0\\n1000000\\n1\\n\",\n    \"0\\n1\\n1\\n1\\n\",\n    \"1\\n0\\n500\\n1\\n\",\n    \"4\\n0\\n20\\n4\\n\",\n    \"0\\n4\\n1\\n0\\n\",\n    \"4\\n5\\n100000000\\n4\\n\",\n    \"5\\n5\\n3\\n5\\n\",\n    \"0\\n1\\n10\\n0\\n\",\n    \"5\\n1\\n20\\n5\\n\",\n    \"2\\n0\\n100\\n2\\n\",\n    \"1\\n100\\n100\\n1\\n\",\n    \"1\\n2\\n5\\n1\\n\",\n    \"0\\n1\\n0\\n0\\n\",\n    \"1\\n5\\n10\\n1\\n\",\n    \"5\\n5\\n2\\n5\\n\",\n    \"1\\n3\\n10\\n1\\n\",\n    \"2\\n2\\n9\\n2\\n\",\n    \"1\\n1000000000\\n1000000000\\n1\\n\",\n    \"0\\n0\\n0\\n5\\n\",\n    \"1\\n1\\n3\\n1\\n\",\n    \"5\\n5\\n1000000\\n5\\n\",\n    \"2\\n2\\n10\\n2\\n\",\n    \"1\\n900\\n900\\n1\\n\",\n    \"5\\n0\\n0\\n5\\n\",\n    \"3\\n2\\n7\\n3\\n\",\n    \"2\\n1\\n5\\n2\\n\",\n    \"1\\n2\\n6\\n1\\n\",\n    \"0\\n1\\n2\\n0\\n\",\n    \"0\\n3\\n4\\n0\\n\",\n    \"5\\n5\\n10000\\n5\\n\",\n    \"1\\n1\\n2\\n1\\n\",\n    \"4\\n1\\n10\\n4\\n\",\n    \"1\\n2\\n10\\n1\\n\",\n    \"4\\n0\\n0\\n4\\n\",\n    \"5\\n5\\n100000\\n5\\n\",\n    \"4\\n3\\n0\\n3\\n\",\n    \"2\\n0\\n200\\n2\\n\",\n    \"1\\n0\\n0\\n2\\n\",\n    \"10\\n21\\n21\\n10\\n\",\n    \"0\\n5\\n1\\n0\\n\",\n    \"1\\n10\\n100\\n1\\n\",\n    \"3\\n0\\n0\\n1\\n\",\n    \"4\\n2\\n133\\n4\\n\",\n    \"5\\n1\\n50\\n5\\n\",\n    \"0\\n1\\n0\\n10\\n\",\n    \"2\\n0\\n7\\n2\\n\",\n    \"2\\n0\\n0\\n3\\n\",\n    \"4\\n0\\n10\\n4\\n\",\n    \"3\\n1\\n8\\n3\\n\",\n    \"0\\n3\\n3\\n0\\n\",\n    \"7\\n1\\n0\\n7\\n\",\n    \"0\\n2\\n3\\n0\\n\",\n    \"2\\n0\\n0\\n1\\n\",\n    \"1\\n1\\n50\\n1\\n\",\n    \"2\\n10\\n10\\n2\\n\",\n    \"5\\n0\\n228\\n5\\n\",\n    \"4\\n3\\n9\\n4\\n\",\n    \"1\\n0\\n8\\n1\\n\",\n    \"666\\n666\\n666\\n666\\n\",\n    \"5\\n5\\n12\\n5\\n\",\n    \"1\\n47\\n47\\n1\\n\",\n    \"0\\n1\\n100\\n0\\n\",\n    \"1\\n0\\n1999\\n1\\n\",\n    \"0\\n5\\n5\\n0\\n\",\n    \"1\\n0\\n2019\\n1\\n\",\n    \"0\\n3\\n5\\n0\\n\",\n    \"0\\n5\\n2\\n0\\n\",\n    \"1\\n1\\n5\\n1\\n\",\n    \"1\\n1\\n200\\n1\\n\",\n    \"100\\n100\\n1000\\n100\\n\",\n    \"0\\n10\\n2\\n0\\n\",\n    \"0\\n4\\n10\\n0\\n\",\n    \"1\\n0\\n0\\n0\\n\",\n    \"2\\n2\\n3\\n4\\n\",\n    \"2\\n0\\n0\\n2\\n\",\n    \"1\\n1\\n101\\n1\\n\",\n    \"1\\n0\\n50\\n1\\n\",\n    \"1\\n0\\n1000\\n1\\n\",\n    \"3\\n2\\n12\\n3\\n\",\n    \"12\\n4\\n0\\n13\\n\",\n    \"0\\n6\\n1\\n0\\n\",\n    \"2\\n1\\n45\\n2\\n\",\n    \"2\\n5\\n8\\n2\\n\",\n    \"0\\n2\\n0\\n3\\n\",\n    \"2\\n0\\n0\\n4\\n\",\n    \"2\\n1\\n69\\n2\\n\",\n    \"1\\n5\\n0\\n2\\n\",\n    \"1\\n0\\n2\\n1\\n\",\n    \"11\\n1\\n111\\n11\\n\",\n    \"0\\n4\\n3\\n0\\n\",\n    \"0\\n1\\n5\\n0\\n\",\n    \"1\\n3\\n3\\n1\\n\",\n    \"100007\\n1\\n1\\n1\\n\",\n    \"34\\n95\\n0\\n16\\n\",\n    \"5\\n0\\n0\\n0\\n\",\n    \"1\\n2\\n3\\n5\\n\",\n    \"3\\n1\\n0\\n4\\n\",\n    \"16\\n93\\n0\\n2\\n\",\n    \"0\\n0\\n0\\n3\\n\",\n    \"20\\n24\\n45\\n20\\n\",\n    \"23\\n0\\n49\\n23\\n\",\n    \"99\\n49\\n0\\n0\\n\",\n    \"100000\\n100000\\n100000\\n100000\\n\",\n    \"200000\\n200000\\n200000\\n200000\\n\",\n    \"0\\n5\\n0\\n2\\n\",\n    \"1\\n123\\n123\\n1\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1132/A",
  "starter_code": ""
}