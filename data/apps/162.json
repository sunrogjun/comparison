{
  "task_id": "APPS/162",
  "problem_id": 162,
  "prompt": "Luba thinks about watering her garden. The garden can be represented as a segment of length k. Luba has got n buckets, the i-th bucket allows her to water some continuous subsegment of garden of length exactly a_{i} each hour. Luba can't water any parts of the garden that were already watered, also she can't water the ground outside the garden.\n\nLuba has to choose one of the buckets in order to water the garden as fast as possible (as mentioned above, each hour she will water some continuous subsegment of length a_{i} if she chooses the i-th bucket). Help her to determine the minimum number of hours she has to spend watering the garden. It is guaranteed that Luba can always choose a bucket so it is possible water the garden.\n\nSee the examples for better understanding.\n\n\n-----Input-----\n\nThe first line of input contains two integer numbers n and k (1 \u2264 n, k \u2264 100) \u2014 the number of buckets and the length of the garden, respectively.\n\nThe second line of input contains n integer numbers a_{i} (1 \u2264 a_{i} \u2264 100) \u2014 the length of the segment that can be watered by the i-th bucket in one hour.\n\nIt is guaranteed that there is at least one bucket such that it is possible to water the garden in integer number of hours using only this bucket.\n\n\n-----Output-----\n\nPrint one integer number \u2014 the minimum number of hours required to water the garden.\n\n\n-----Examples-----\nInput\n3 6\n2 3 5\n\nOutput\n2\n\nInput\n6 7\n1 2 3 4 5 6\n\nOutput\n7\n\n\n\n-----Note-----\n\nIn the first test the best option is to choose the bucket that allows to water the segment of length 3. We can't choose the bucket that allows to water the segment of length 5 because then we can't water the whole garden.\n\nIn the second test we can choose only the bucket that allows us to water the segment of length 1.",
  "solutions": "[\"n, k = map(int, input().split())\\na = list(map(int, input().split()))\\n\\nmaxd = -1\\nfor x in a:\\n    if k % x == 0:\\n        maxd = max(maxd, x)\\nprint(k // maxd)\", \"import itertools as it, math, functools as ft\\nn, k = map(int, input().split())\\na = list(map(int, input().split()))\\nres = 100000\\nfor i in a:\\n\\tif k % i == 0:\\n\\t\\tres = min(res, k // i)\\nprint(res)\", \"n, k =list(map(int, input().split()))\\na = list(map(int, input().split()))\\nm = 0\\nfor i in a:\\n    if k % i == 0:\\n        m = max(m, i)\\nprint(k//m)\\n\", \"R=lambda:list(map(int,input().split()))\\nn,k=R()\\na=k\\nfor i in R():\\n  if k%i==0:\\n    a=min(a,k//i)\\nprint(a)\\n\", \"n, k = map(int, input().split())\\nmaxi = 0\\na = list(map(int, input().split()))\\nfor i in a:\\n    if k % i == 0:\\n        maxi = max(maxi, i)\\nprint(k // maxi)\", \"n,k = list(map(int, input().strip().split()))\\n\\na = list(map(int, input().strip().split()))\\n\\nmaks = 0\\n\\nfor e in a:\\n    if k % e == 0:\\n        maks = max(maks,e)\\n\\nprint(k//maks)\\n\", \"def main():\\n\\tn, k = map(int, input().split())\\n\\tarr = list(map(int, input().split()))\\n\\tarr = [i for i in arr if k % i == 0]\\n\\tprint(k // max(arr))\\n\\nmain()\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nfor i in sorted(a)[::-1]:\\n    if (k % i == 0):\\n        print(k // i)\\n        break\\n\", \"n, k = [int(z) for z in input().split()]\\na = [int(z) for z in input().split()]\\na.sort()\\nfor i in range(len(a) - 1, -1, -1):\\n    if k % a[i] == 0:\\n        print(k // a[i])\\n        return\", \"n, k = list(map(int, input().split()))\\npossible = []\\nfor x in map(int, input().split()):\\n\\tif k % x == 0:\\n\\t\\tpossible.append(x)\\n\\nprint(min([k // x for x in possible]))\", \"n, k = [int(i) for i in input().split()]\\na = [int(i) for i in input().split()]\\na.sort()\\nfor i in range(n - 1, -1, -1):\\n    if k % a[i] == 0:\\n        print(k // a[i])\\n        break\", \"from sys import stdin as cin\\nfrom sys import stdout as cout\\n\\ndef main():\\n    n, k = list(map(int, cin.readline().split()))\\n    a = list(map(int, cin.readline().split()))\\n    o = 864236415217\\n    for i in a:\\n        if k % i == 0:\\n            o = min(o, k // i)\\n    print(o)\\n\\nmain()\\n\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n\\nans = 0\\nfor i in a:\\n    if k % i == 0:\\n        ans = max(ans, i)\\n\\nprint(k // ans)\\n\", \"n,k = [int(x) for x in input().split()]\\nA = [int(x) for x in input().split()]\\n\\nh = 100000000000\\nfor a in A:\\n    if k%a==0:\\n        h = min(h,k//a)\\nprint(h)\\n\", \"\\nn, k = list(map(int, input().split()))\\n\\ntab = [int(x) for x in input().split()]\\n\\nbest = 1\\n\\nfor i in tab:\\n    if k % i == 0:\\n        best = max([i, best])\\n\\nprint(k // best)\\n\", \"n, k = [int(v) for v in input().split()]\\naa = [int(v) for v in input().split()]\\n\\nprint(min(k // a for a in aa if k % a == 0))\\n\", \"n, k = list(map(int, input().split()))\\n\\nans = 10**18\\n\\nfor a in map(int, input().split()):\\n    if k % a == 0:\\n        ans = min(ans, k // a)\\n\\nprint(ans)\\n\", \"n, k = map(int, input().split())\\na = list(map(int, input().split()))\\na.sort()\\nfor i in range(n-1,-1,-1):\\n\\tif k % a[i] == 0:\\n\\t\\tprint(k // a[i])\\n\\t\\tbreak\", \"n, k = map(int, input().split())\\na = list(map(int, input().split()))\\nb = []\\nfor i in range(n):\\n    if k % a[i] == 0:\\n        b.append(a[i])\\n\\nprint(k // max(b))\", \"(n, k) = list(map(int, input().split()))\\n\\nlst = []\\nfor x in input().split():\\n    lst.append(int(x))\\n\\ni = 0\\nfor x in lst:\\n    if k % x == 0:\\n        i = max(i, x)\\n\\nprint(k // i)\\n\", \"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nans = 100\\nfor i in a:\\n    if k%i == 0:\\n        ans = min(k//i, ans)\\nprint(ans)\\n\", \"n, k = list(map(int, input().split()))\\na = [int(i) for i in input().split()]\\nminim = 10**18\\nfor i in a:\\n    if k%i == 0:\\n        minim = min(minim, (k//i))\\nprint(minim)\\n\", \"n,k = list(map(int,input().split()))\\na = list(map(int,input().split()))\\nans = 0\\nfor item in a:\\n    if (k%item == 0):\\n        ans = max(ans,item)\\nprint(k//ans)\\n\", \"n,k=list(map(int,input().split()))\\nl=list(map(int,input().split()))\\nm=1\\nfor i in l:\\n      if k%i==0:\\n            m=max(m,i)\\nprint(k//m)\\n      \\n            \\n      \\n\", \"len_garden = int(input().split()[1])\\nbuckets = [int(a) for a in input().split()]\\n\\nbuckets = sorted(buckets, reverse=True)\\n\\nfor i in buckets:\\n    if len_garden%i == 0:\\n        print(int(len_garden/i))\\n        break\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3 6\\n2 3 5\\n\",\n    \"6 7\\n1 2 3 4 5 6\\n\",\n    \"5 97\\n1 10 50 97 2\\n\",\n    \"5 97\\n1 10 50 100 2\\n\",\n    \"100 100\\n2 46 24 18 86 90 31 38 84 49 58 28 15 80 14 24 87 56 62 87 41 87 55 71 87 32 41 56 91 32 24 75 43 42 35 30 72 53 31 26 54 61 87 85 36 75 44 31 7 38 77 57 61 54 70 77 45 96 39 57 11 8 91 42 52 15 42 30 92 41 27 26 34 27 3 80 32 86 26 97 63 91 30 75 14 7 19 23 45 11 8 43 44 73 11 56 3 55 63 16\\n\",\n    \"100 91\\n13 13 62 96 74 47 81 46 78 21 20 42 4 73 25 30 76 74 58 28 25 52 42 48 74 40 82 9 25 29 17 22 46 64 57 95 81 39 47 86 40 95 97 35 31 98 45 98 47 78 52 63 58 14 89 97 17 95 28 22 20 36 68 38 95 16 2 26 54 47 42 31 31 81 21 21 65 40 82 53 60 71 75 33 96 98 6 22 95 12 5 48 18 27 58 62 5 96 36 75\\n\",\n    \"8 8\\n8 7 6 5 4 3 2 1\\n\",\n    \"3 8\\n4 3 2\\n\",\n    \"3 8\\n2 4 2\\n\",\n    \"3 6\\n1 3 2\\n\",\n    \"3 6\\n3 2 5\\n\",\n    \"3 8\\n4 2 1\\n\",\n    \"5 6\\n2 3 5 1 2\\n\",\n    \"2 6\\n5 3\\n\",\n    \"4 12\\n6 4 3 1\\n\",\n    \"3 18\\n1 9 6\\n\",\n    \"3 9\\n3 2 1\\n\",\n    \"3 6\\n5 3 2\\n\",\n    \"2 10\\n5 2\\n\",\n    \"2 18\\n6 3\\n\",\n    \"4 12\\n1 2 12 3\\n\",\n    \"3 7\\n3 2 1\\n\",\n    \"3 6\\n3 2 1\\n\",\n    \"5 10\\n5 4 3 2 1\\n\",\n    \"5 16\\n8 4 2 1 7\\n\",\n    \"6 7\\n6 5 4 3 7 1\\n\",\n    \"2 6\\n3 2\\n\",\n    \"2 4\\n4 1\\n\",\n    \"6 8\\n2 4 1 3 5 7\\n\",\n    \"6 8\\n6 5 4 3 2 1\\n\",\n    \"6 15\\n5 2 3 6 4 3\\n\",\n    \"4 8\\n2 4 8 1\\n\",\n    \"2 5\\n5 1\\n\",\n    \"4 18\\n3 1 1 2\\n\",\n    \"2 1\\n2 1\\n\",\n    \"3 10\\n2 10 5\\n\",\n    \"5 12\\n12 4 4 4 3\\n\",\n    \"3 6\\n6 3 2\\n\",\n    \"2 2\\n2 1\\n\",\n    \"3 18\\n1 9 3\\n\",\n    \"3 8\\n7 2 4\\n\",\n    \"2 100\\n99 1\\n\",\n    \"4 12\\n1 3 4 2\\n\",\n    \"3 6\\n2 3 1\\n\",\n    \"4 6\\n3 2 5 12\\n\",\n    \"4 97\\n97 1 50 10\\n\",\n    \"3 12\\n1 12 2\\n\",\n    \"4 12\\n1 4 3 2\\n\",\n    \"1 1\\n1\\n\",\n    \"3 19\\n7 1 1\\n\",\n    \"5 12\\n12 4 3 4 4\\n\",\n    \"3 8\\n8 4 2\\n\",\n    \"3 3\\n3 2 1\\n\",\n    \"5 6\\n3 2 4 2 2\\n\",\n    \"2 16\\n8 4\\n\",\n    \"3 6\\n10 2 3\\n\",\n    \"5 3\\n2 4 5 3 6\\n\",\n    \"11 99\\n1 2 3 6 5 4 7 8 99 33 66\\n\",\n    \"3 12\\n3 12 2\\n\",\n    \"5 25\\n24 5 15 25 23\\n\",\n    \"2 4\\n8 1\\n\",\n    \"4 100\\n2 50 4 1\\n\",\n    \"3 28\\n7 14 1\\n\",\n    \"4 8\\n2 8 4 1\\n\",\n    \"4 6\\n6 1 2 3\\n\",\n    \"2 12\\n4 3\\n\",\n    \"4 12\\n1 2 4 3\\n\",\n    \"5 12\\n2 3 12 6 4\\n\",\n    \"4 4\\n1 2 2 4\\n\",\n    \"3 6\\n2 3 2\\n\",\n    \"4 21\\n21 20 21 2\\n\",\n    \"3 8\\n3 4 2\\n\",\n    \"1 25\\n25\\n\",\n    \"99 12\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\\n\",\n    \"98 12\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98\\n\",\n    \"79 12\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79\\n\",\n    \"4 32\\n1 1 1 1\\n\",\n    \"1 100\\n1\\n\",\n    \"2 100\\n7 1\\n\",\n    \"7 24\\n1 3 6 4 5 2 7\\n\",\n    \"6 87\\n1 2 8 4 5 7\\n\",\n    \"1 88\\n1\\n\",\n    \"1 89\\n1\\n\"\n  ],\n  \"outputs\": [\n    \"2\\n\",\n    \"7\\n\",\n    \"1\\n\",\n    \"97\\n\",\n    \"50\\n\",\n    \"7\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"7\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"100\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"19\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"32\\n\",\n    \"100\\n\",\n    \"100\\n\",\n    \"4\\n\",\n    \"87\\n\",\n    \"88\\n\",\n    \"89\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/915/A",
  "starter_code": ""
}