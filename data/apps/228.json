{
  "task_id": "APPS/228",
  "problem_id": 228,
  "prompt": "Alice and Bob are playing a game with $n$ piles of stones. It is guaranteed that $n$ is an even number. The $i$-th pile has $a_i$ stones.\n\nAlice and Bob will play a game alternating turns with Alice going first.\n\nOn a player's turn, they must choose exactly $\\frac{n}{2}$ nonempty piles and independently remove a positive number of stones from each of the chosen piles. They can remove a different number of stones from the piles in a single turn. The first player unable to make a move loses (when there are less than $\\frac{n}{2}$ nonempty piles).\n\nGiven the starting configuration, determine who will win the game.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($2 \\leq n \\leq 50$)\u00a0\u2014 the number of piles. It is guaranteed that $n$ is an even number.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\leq a_i \\leq 50$)\u00a0\u2014 the number of stones in the piles.\n\n\n-----Output-----\n\nPrint a single string \"Alice\" if Alice wins; otherwise, print \"Bob\" (without double quotes).\n\n\n-----Examples-----\nInput\n2\n8 8\n\nOutput\nBob\n\nInput\n4\n3 1 4 1\n\nOutput\nAlice\n\n\n\n-----Note-----\n\nIn the first example, each player can only remove stones from one pile ($\\frac{2}{2}=1$). Alice loses, since Bob can copy whatever Alice does on the other pile, so Alice will run out of moves first.\n\nIn the second example, Alice can remove $2$ stones from the first pile and $3$ stones from the third pile on her first move to guarantee a win.",
  "solutions": "[\"n=int(input())\\ns=list(map(int,input().split()))\\nprint(\\\"Bob\\\"if s.count(min(s))>n/2 else\\\"Alice\\\")\\n\", \"def judge(i):\\n    return \\\"Bob\\\" if cnt[i]>n//2 else \\\"Alice\\\"\\nn=int(input())\\na=list(map(int,input().split()))\\ncnt=[0 for i in range(51)]\\nfor i in a:\\n    cnt[i]+=1\\nprint(judge(min(a)))\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nprint(\\\"Alice\\\" if sum([1 if i==min(a) else 0 for i in a ]) <= n/2 else \\\"Bob\\\")\", \"n=int(input())\\nd=[0]*51\\nfor i in input().split(\\\" \\\"):\\n    d[int(i)]+=1\\nfor i in range(50):\\n    if (d[i]>n/2):\\n        print(\\\"Bob\\\")\\n        break\\n    else:\\n        if (d[i]>0):\\n            print(\\\"Alice\\\")\\n            break\", \"n = int(input())\\na = list(map(int,input().split()))\\nprint( 'Alice' if a.count(min(a)) <= n//2 else 'Bob' )\\n##\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nimin = a[0]\\ncnt = 0\\nfor x in a:\\n\\tif x < imin:\\n\\t\\timin = x\\n\\t\\tcnt = 0\\n\\tif x == imin:\\n\\t\\tcnt += 1\\nif cnt <= n // 2:\\n\\tprint(\\\"Alice\\\")\\nelse:\\n\\tprint(\\\"Bob\\\")\\n\", \"n = int(input())\\npilhas = list(map(int, input().split()))\\n\\ncount = [0] * 51\\n\\nfor pilha in pilhas:\\n    count[pilha] += 1\\n\\nfor i in range(51):\\n    if count[i] != 0 and count[i] * 2 <= n:\\n        print(\\\"Alice\\\")\\n        break\\n    elif count[i] != 0 and count[i] * 2 > n:\\n        print(\\\"Bob\\\")\\n        break\", \"n = int(input())\\n\\njog = [int(i) for i in input().split()]\\nmi = min(jog)\\n\\nqtd = 0\\nfor i in range(len(jog)):\\n    if(jog[i] == mi):\\n        qtd+=1\\nif(qtd <= n//2 and qtd!=0):\\n    print(\\\"Alice\\\")\\nelse:\\n    print(\\\"Bob\\\")\\n\", \"n = int(input())\\na = [int(_) for _ in input().split()]\\n\\ncnt = [0 for i in range(max(a) + 1)]\\nfor i in a:\\n    cnt[i] += 1\\n\\nprint(\\\"Bob\\\" if cnt[min(a)] > (n >> 1) else \\\"Alice\\\")\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nimin = a[0]\\ncnt = 0\\nfor x in a:\\n\\tif x < imin:\\n\\t\\timin = x\\n\\t\\tcnt = 0\\n\\tif x == imin:\\n\\t\\tcnt += 1\\nif cnt <= n // 2:\\n\\tprint(\\\"Alice\\\")\\nelse:\\n\\tprint(\\\"Bob\\\")\\n\", \"n=int(input())\\npiles = list(map(int,input().split()))\\nif(piles.count(min(piles))>n/2):\\n    print(\\\"Bob\\\")\\nelse:\\n    print(\\\"Alice\\\")\\n\", \"n = int(input())\\n\\narr = [int(x) for x in input().split()]\\n\\narr.sort()\\n\\nx = 1\\n\\nwhile True:\\n    if arr.count(x) > n//2:\\n        print('Bob')\\n        break\\n    elif x in arr:\\n        print('Alice')\\n        break\\n    else:\\n        x += 1\\n\\n    \\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nmn, cnt = min(a), 0\\nfor i in a: \\n    if i == mn: cnt += 1\\nprint(\\\"Alice\\\" if cnt <= int(n / 2) else \\\"Bob\\\")\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2\\n8 8\\n\",\n    \"4\\n3 1 4 1\\n\",\n    \"4\\n42 49 42 42\\n\",\n    \"8\\n11 21 31 41 41 31 21 11\\n\",\n    \"10\\n21 4 7 21 18 38 12 17 21 13\\n\",\n    \"12\\n33 26 11 11 32 25 18 24 27 47 28 7\\n\",\n    \"14\\n4 10 7 13 27 28 13 34 16 18 39 26 29 22\\n\",\n    \"16\\n47 27 33 49 2 47 48 9 37 39 5 24 38 38 4 32\\n\",\n    \"18\\n38 48 13 15 18 16 44 46 17 30 16 33 43 12 9 48 31 37\\n\",\n    \"20\\n28 10 4 31 4 49 50 1 40 43 31 49 34 16 34 38 50 40 10 10\\n\",\n    \"22\\n37 35 37 35 39 42 35 35 49 50 42 35 40 36 35 35 35 43 35 35 35 35\\n\",\n    \"24\\n31 6 41 46 36 37 6 50 50 6 6 6 6 6 6 6 39 45 40 6 35 6 6 6\\n\",\n    \"26\\n8 47 49 44 33 43 33 8 29 41 8 8 8 8 8 8 41 47 8 8 8 8 43 8 32 8\\n\",\n    \"28\\n48 14 22 14 14 14 14 14 47 39 14 36 14 14 49 41 36 45 14 34 14 14 14 14 14 45 25 41\\n\",\n    \"30\\n7 47 7 40 35 37 7 42 40 7 7 7 7 7 35 7 47 7 34 7 7 33 7 7 41 7 46 33 44 7\\n\",\n    \"50\\n44 25 36 44 25 7 28 33 35 16 31 17 50 48 6 42 47 36 9 11 31 27 28 20 34 47 24 44 38 50 46 9 38 28 9 10 28 42 37 43 29 42 38 43 41 25 12 29 26 36\\n\",\n    \"50\\n42 4 18 29 37 36 41 41 34 32 1 50 15 25 46 22 9 38 48 49 5 50 2 14 15 10 27 34 46 50 30 6 19 39 45 36 39 50 8 13 13 24 27 5 25 19 42 46 11 30\\n\",\n    \"50\\n40 9 43 18 39 35 35 46 48 49 26 34 28 50 14 34 17 3 13 8 8 48 17 43 42 21 43 30 45 12 43 13 25 30 39 5 19 3 19 6 12 30 19 46 48 24 14 33 6 19\\n\",\n    \"50\\n11 6 26 45 49 26 50 31 21 21 10 19 39 50 16 8 39 35 29 14 17 9 34 13 44 28 20 23 32 37 16 4 21 40 10 42 2 2 38 30 9 24 42 30 30 15 18 38 47 12\\n\",\n    \"50\\n20 12 45 12 15 49 45 7 27 20 32 47 50 16 37 4 9 33 5 27 6 18 42 35 21 9 27 14 50 24 23 5 46 12 29 45 17 38 20 12 32 27 43 49 17 4 45 2 50 4\\n\",\n    \"40\\n48 29 48 31 39 16 17 11 20 11 33 29 18 42 39 26 43 43 22 28 1 5 33 49 7 18 6 3 33 41 41 40 25 25 37 47 12 42 23 27\\n\",\n    \"40\\n32 32 34 38 1 50 18 26 16 14 13 26 10 15 20 28 19 49 17 14 8 6 45 32 15 37 14 15 21 21 42 33 12 14 34 44 38 25 24 15\\n\",\n    \"40\\n36 34 16 47 49 45 46 16 46 2 30 23 2 20 4 8 28 38 20 3 50 40 21 48 45 25 41 14 37 17 5 3 33 33 49 47 48 32 47 2\\n\",\n    \"40\\n46 2 26 49 34 10 12 47 36 44 15 36 48 23 30 4 36 26 23 32 31 13 34 15 10 41 17 32 33 25 12 36 9 31 25 9 46 28 6 30\\n\",\n    \"40\\n17 8 23 16 25 37 11 16 16 29 25 38 31 45 14 46 40 24 49 44 21 12 29 18 33 35 7 47 41 48 24 39 8 37 29 13 12 21 44 19\\n\",\n    \"42\\n13 33 2 18 5 25 29 15 38 11 49 14 38 16 34 3 5 35 1 39 45 4 32 15 30 23 48 22 9 34 42 34 8 36 39 5 27 22 8 38 26 31\\n\",\n    \"42\\n7 6 9 5 18 8 16 46 10 48 43 20 14 20 16 24 2 12 26 5 9 48 4 47 39 31 2 30 36 47 10 43 16 19 50 48 18 43 35 38 9 45\\n\",\n    \"42\\n49 46 12 3 38 7 32 7 25 40 20 25 2 43 17 28 28 50 35 35 22 42 15 13 44 14 27 30 26 7 29 31 40 39 18 42 11 3 32 48 34 11\\n\",\n    \"42\\n3 50 33 31 8 19 3 36 41 50 2 22 9 40 39 22 30 34 43 25 42 39 40 8 18 1 25 13 50 11 48 10 11 4 3 47 2 35 25 39 31 36\\n\",\n    \"42\\n20 38 27 15 6 17 21 42 31 38 43 20 31 12 29 3 11 45 44 22 10 2 14 20 39 33 47 6 11 43 41 1 14 27 24 41 9 4 7 26 8 21\\n\",\n    \"44\\n50 32 33 26 39 26 26 46 26 28 26 38 26 26 26 32 26 46 26 35 28 26 41 37 26 41 26 26 45 26 44 50 42 26 39 26 46 26 26 28 26 26 26 26\\n\",\n    \"44\\n45 18 18 39 35 30 34 18 28 18 47 18 18 18 18 18 40 18 18 49 31 35 18 18 35 36 18 18 28 18 18 42 32 18 18 31 37 27 18 18 18 37 18 37\\n\",\n    \"44\\n28 28 36 40 28 28 35 28 28 33 33 28 28 28 28 47 28 43 28 28 35 38 49 40 28 28 34 39 45 32 28 28 28 50 39 28 32 28 50 32 28 33 28 28\\n\",\n    \"44\\n27 40 39 38 27 49 27 33 45 34 27 39 49 27 27 27 27 27 27 39 49 27 27 27 27 27 38 39 43 44 45 44 33 27 27 27 27 27 42 27 47 27 42 27\\n\",\n    \"44\\n37 43 3 3 36 45 3 3 30 3 30 29 3 3 3 3 36 34 31 38 3 38 3 48 3 3 3 3 46 49 30 50 3 42 3 3 3 37 3 3 41 3 49 3\\n\",\n    \"46\\n35 37 27 27 27 33 27 34 32 34 32 38 27 50 27 27 29 27 35 45 27 27 27 32 30 27 27 27 47 27 27 27 27 38 33 27 43 49 29 27 31 27 27 27 38 27\\n\",\n    \"46\\n15 15 36 15 30 15 15 45 20 29 41 37 15 15 15 15 22 22 38 15 15 15 15 47 15 39 15 15 15 15 42 15 15 34 24 30 21 39 15 22 15 24 15 35 15 21\\n\",\n    \"46\\n39 18 30 18 43 18 18 18 18 18 18 36 18 39 32 46 32 18 18 18 18 18 18 38 43 44 48 18 34 35 18 46 30 18 18 45 43 18 18 18 44 30 18 18 44 33\\n\",\n    \"46\\n14 14 14 14 14 14 30 45 42 30 42 14 14 34 14 14 42 28 14 14 37 14 25 49 34 14 46 14 14 40 49 44 40 47 14 14 14 26 14 14 14 46 14 31 30 14\\n\",\n    \"46\\n14 14 48 14 14 22 14 14 14 14 40 14 14 33 14 32 49 40 14 34 14 14 14 14 46 42 14 43 14 41 22 50 14 32 14 49 14 31 47 50 47 14 14 14 44 22\\n\",\n    \"48\\n9 36 47 31 48 33 39 9 23 3 18 44 33 49 26 10 45 12 28 30 5 22 41 27 19 44 44 27 9 46 24 22 11 28 41 48 45 1 10 42 19 34 40 8 36 48 43 50\\n\",\n    \"48\\n12 19 22 48 21 19 18 49 10 50 31 40 19 19 44 33 6 12 31 11 5 47 26 48 2 17 6 37 17 25 20 42 30 35 37 41 32 45 47 38 44 41 20 31 47 39 3 45\\n\",\n    \"48\\n33 47 6 10 28 22 41 45 27 19 45 18 29 10 35 18 39 29 8 10 9 1 9 23 10 11 3 14 12 15 35 29 29 18 12 49 27 18 18 45 29 32 15 21 34 1 43 9\\n\",\n    \"48\\n13 25 45 45 23 29 11 30 40 10 49 32 44 50 35 7 48 37 17 43 45 50 48 31 41 6 3 32 33 22 41 4 1 30 16 9 48 46 17 29 45 12 49 42 21 1 13 10\\n\",\n    \"48\\n47 3 12 9 37 19 8 9 10 11 48 28 6 8 12 48 44 1 15 8 48 10 33 11 42 24 45 27 8 30 48 40 3 15 34 17 2 32 30 50 9 11 7 33 41 33 27 17\\n\",\n    \"50\\n44 4 19 9 41 48 31 39 30 16 27 38 37 45 12 36 37 25 35 19 43 22 36 26 26 49 23 4 33 2 31 26 36 38 41 30 42 18 45 24 23 14 32 37 44 13 4 39 46 7\\n\",\n    \"50\\n4 36 10 48 17 28 14 7 47 38 13 3 1 48 28 21 12 49 1 35 16 9 15 42 36 34 10 28 27 23 47 36 33 44 44 26 3 43 31 32 26 36 41 44 10 8 29 1 36 9\\n\",\n    \"50\\n13 10 50 35 23 34 47 25 39 11 50 41 20 48 10 10 1 2 41 16 14 50 49 42 48 39 16 9 31 30 22 2 25 40 6 8 34 4 2 46 14 6 6 38 45 30 27 36 49 18\\n\",\n    \"50\\n42 31 49 11 28 38 49 32 15 22 10 18 43 39 46 32 10 19 13 32 19 40 34 28 28 39 19 3 1 47 10 18 19 31 21 7 39 37 34 45 19 21 35 46 10 24 45 33 20 40\\n\",\n    \"50\\n28 30 40 25 47 47 3 22 28 10 37 15 11 18 31 36 35 18 34 3 21 16 24 29 12 29 42 23 25 8 7 10 43 24 40 29 3 6 14 28 2 32 29 18 47 4 6 45 42 40\\n\",\n    \"4\\n1 4 4 4\\n\",\n    \"4\\n1 2 2 2\\n\",\n    \"2\\n1 1\\n\",\n    \"4\\n3 4 4 4\\n\",\n    \"4\\n2 2 2 1\\n\",\n    \"4\\n1 3 3 3\\n\",\n    \"6\\n4 4 4 4 4 1\\n\",\n    \"4\\n1 50 50 50\\n\",\n    \"6\\n1 2 2 2 2 3\\n\",\n    \"4\\n1 2 2 3\\n\",\n    \"4\\n2 1 1 1\\n\",\n    \"6\\n1 1 2 2 3 3\\n\",\n    \"4\\n1 1 1 4\\n\",\n    \"6\\n1 2 2 2 2 2\\n\",\n    \"6\\n1 2 2 2 2 4\\n\",\n    \"4\\n2 3 3 3\\n\",\n    \"6\\n1 1 2 2 2 2\\n\",\n    \"8\\n1 1 1 1 1 1 6 6\\n\",\n    \"8\\n1 1 2 2 2 2 2 2\\n\",\n    \"8\\n1 1 1 1 1 2 2 2\\n\"\n  ],\n  \"outputs\": [\n    \"Bob\\n\",\n    \"Alice\\n\",\n    \"Bob\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Bob\\n\",\n    \"Bob\\n\",\n    \"Bob\\n\",\n    \"Bob\\n\",\n    \"Bob\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Bob\\n\",\n    \"Bob\\n\",\n    \"Bob\\n\",\n    \"Bob\\n\",\n    \"Bob\\n\",\n    \"Bob\\n\",\n    \"Bob\\n\",\n    \"Bob\\n\",\n    \"Bob\\n\",\n    \"Bob\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Bob\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Bob\\n\",\n    \"Alice\\n\",\n    \"Bob\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Alice\\n\",\n    \"Bob\\n\",\n    \"Alice\\n\",\n    \"Bob\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1147/C",
  "starter_code": ""
}