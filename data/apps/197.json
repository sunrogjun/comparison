{
  "task_id": "APPS/197",
  "problem_id": 197,
  "prompt": "An online contest will soon be held on ForceCoders, a large competitive programming platform. The authors have prepared $n$ problems; and since the platform is very popular, $998244351$ coder from all over the world is going to solve them.\n\nFor each problem, the authors estimated the number of people who would solve it: for the $i$-th problem, the number of accepted solutions will be between $l_i$ and $r_i$, inclusive.\n\nThe creator of ForceCoders uses different criteria to determine if the contest is good or bad. One of these criteria is the number of inversions in the problem order. An inversion is a pair of problems $(x, y)$ such that $x$ is located earlier in the contest ($x < y$), but the number of accepted solutions for $y$ is strictly greater.\n\nObviously, both the creator of ForceCoders and the authors of the contest want the contest to be good. Now they want to calculate the probability that there will be no inversions in the problem order, assuming that for each problem $i$, any integral number of accepted solutions for it (between $l_i$ and $r_i$) is equally probable, and all these numbers are independent.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($2 \\le n \\le 50$) \u2014 the number of problems in the contest.\n\nThen $n$ lines follow, the $i$-th line contains two integers $l_i$ and $r_i$ ($0 \\le l_i \\le r_i \\le 998244351$) \u2014 the minimum and maximum number of accepted solutions for the $i$-th problem, respectively.\n\n\n-----Output-----\n\nThe probability that there will be no inversions in the contest can be expressed as an irreducible fraction $\\frac{x}{y}$, where $y$ is coprime with $998244353$. Print one integer \u2014 the value of $xy^{-1}$, taken modulo $998244353$, where $y^{-1}$ is an integer such that $yy^{-1} \\equiv 1$ $(mod$ $998244353)$.\n\n\n-----Examples-----\nInput\n3\n1 2\n1 2\n1 2\n\nOutput\n499122177\n\nInput\n2\n42 1337\n13 420\n\nOutput\n578894053\n\nInput\n2\n1 1\n0 0\n\nOutput\n1\n\nInput\n2\n1 1\n1 1\n\nOutput\n1\n\n\n\n-----Note-----\n\nThe real answer in the first test is $\\frac{1}{2}$.",
  "solutions": "[\"from bisect import bisect_left\\n\\nM = 998244353\\n\\ndef pw(x, y):\\n    if y == 0:\\n        return 1\\n    res = pw(x, y//2)\\n    res = res * res % M\\n    if y % 2 == 1:\\n        res = res * x % M\\n    return res\\n\\ndef cal(x, y):\\n    y += x - 1\\n    res = 1\\n    for i in range(1, x + 1):\\n        res = res * (y - i + 1)\\n        res = res * pw(i, M - 2) % M\\n    return res % M\\n\\nn = int(input())\\na = []\\nb = []\\nres = 1\\nfor i in range(n):\\n    a.append(list(map(int, input().split())))\\n    res = res * (a[-1][1] + 1 - a[-1][0]) % M\\n    b.append(a[-1][0])\\n    b.append(a[-1][1] + 1)\\n    b = set(b)\\n    b = sorted(list(b))\\n\\ng = [b[i + 1] - b[i] for i in range(len(b) - 1)]\\n\\nfor i in range(n):\\n    a[i][0] = bisect_left(b, a[i][0])\\n    a[i][1] = bisect_left(b, a[i][1] + 1)\\n\\na = a[::-1]\\n\\nf = [[0 for _ in range(len(b))] for __ in range(n)]\\n\\nfor i in range(a[0][0], len(b)):\\n    if i == 0:\\n        f[0][i] = g[i]\\n    else:\\n        if i < a[0][1]:\\n            f[0][i] = (f[0][i - 1] + g[i]) % M\\n        else:\\n            f[0][i] = f[0][i - 1]\\n        \\nfor i in range(1, n):\\n    for j in range(a[i][0], len(b)):\\n        if j > 0:\\n            f[i][j] = f[i][j - 1]\\n        if j < a[i][1]:\\n            for k in range(i, -1, -1):\\n                if a[k][1] <= j or j < a[k][0]:\\n                    break\\n                if k == 0 or j != 0:\\n                    tmp = cal(i - k + 1, g[j])\\n                    if k > 0:\\n                        f[i][j] += f[k - 1][j - 1] * tmp % M\\n                    else:\\n                        f[i][j] += tmp\\n                    f[i][j] %= M\\n                    \\n#print(f)\\n#print(f[n - 1][len(b) - 1], res)\\nprint(f[n - 1][len(b) - 1] * pw(res, M - 2) % M)\\n\", \"from bisect import bisect_left\\n\\nM = 998244353\\n\\ndef pw(x, y):\\n    if y == 0:\\n        return 1\\n    res = pw(x, y//2)\\n    res = res * res % M\\n    if y % 2 == 1:\\n        res = res * x % M\\n    return res\\n\\ndef cal(x, y):\\n    y += x - 1\\n    res = 1\\n    for i in range(1, x + 1):\\n        res = res * (y - i + 1)\\n        res = res * pw(i, M - 2) % M\\n    return res % M\\n\\nn = int(input())\\na = []\\nb = []\\nres = 1\\nfor i in range(n):\\n    a.append(list(map(int, input().split())))\\n    res = res * (a[-1][1] + 1 - a[-1][0]) % M\\n    b.append(a[-1][0])\\n    b.append(a[-1][1] + 1)\\n    b = set(b)\\n    b = sorted(list(b))\\n\\ng = [b[i + 1] - b[i] for i in range(len(b) - 1)]\\n\\nfor i in range(n):\\n    a[i][0] = bisect_left(b, a[i][0])\\n    a[i][1] = bisect_left(b, a[i][1] + 1)\\n\\na = a[::-1]\\n\\nf = [[0 for _ in range(len(b))] for __ in range(n)]\\n\\nfor i in range(a[0][0], len(b)):\\n    if i == 0:\\n        f[0][i] = g[i]\\n    else:\\n        if i < a[0][1]:\\n            f[0][i] = (f[0][i - 1] + g[i]) % M\\n        else:\\n            f[0][i] = f[0][i - 1]\\n        \\nfor i in range(1, n):\\n    for j in range(a[i][0], len(b)):\\n        if j > 0:\\n            f[i][j] = f[i][j - 1]\\n        if j < a[i][1]:\\n            for k in range(i, -1, -1):\\n                if a[k][1] <= j or j < a[k][0]:\\n                    break\\n                if k == 0 or j != 0:\\n                    tmp = cal(i - k + 1, g[j])\\n                    if k > 0:\\n                        f[i][j] += f[k - 1][j - 1] * tmp % M\\n                    else:\\n                        f[i][j] += tmp\\n                    f[i][j] %= M\\n                    \\n#print(f)\\n#print(f[n - 1][len(b) - 1], res)\\nprint(f[n - 1][len(b) - 1] * pw(res, M - 2) % M)\\n\", \"import sys\\nfrom itertools import chain\\nreadline = sys.stdin.readline\\n\\nMOD = 998244353\\ndef compress(L):\\n    L2 = list(set(L))\\n    L2.sort()\\n    C = {v : k for k, v in enumerate(L2)}\\n    return L2, C\\n\\n\\nN = int(readline())\\nLR = [tuple(map(int, readline().split())) for _ in range(N)]\\nLR = [(a-1, b) for a, b in LR]\\nLR2 = LR[:]\\nml = LR[-1][0]\\nres = 0\\nfor i in range(N-2, -1, -1):\\n    l, r = LR[i]\\n    if r <= ml:\\n        break\\n    l = max(ml, l)\\n    ml = l\\n    LR[i] = (l, r)\\nelse:\\n    Z = list(chain(*LR))\\n    Z2, Dc = compress(Z)\\n    \\n    NN = len(Z2)\\n    seglen = [0] + [n - p for p, n in zip(Z2, Z2[1:])]\\n    \\n    hc = [[0]*(N+3) for _ in range(NN)]\\n    for j in range(NN):\\n        hc[j][0] = 1\\n        for k in range(1, N+3):\\n            hc[j][k] = hc[j][k-1]*pow(k, MOD-2, MOD)*(seglen[j]-1+k)%MOD\\n\\n    mask = [[[True]*NN]]\\n\\n    dp = [[[0]*(N+1) for _ in range(NN+1)] for _ in range(N+1)]\\n    Dp = [[1]*(NN+1)] + [[0]*(NN+1) for _ in range(N)]\\n    for i in range(1, N+1):\\n        mask2 = [False]*NN\\n        l, r = LR[i-1]\\n        dl, dr = Dc[l], Dc[r]\\n        for j in range(dr, dl, -1):\\n            mask2[j] = True\\n        mm = [[m1&m2 for m1, m2 in zip(mask[-1][idx], mask2)] for idx in range(i)] + [mask2]\\n        mask.append(mm)\\n        for j in range(NN):\\n            for k in range(1, i+1):\\n                if mask[i][i-k+1][j]:\\n                    dp[i][j][k] = Dp[i-k][j+1]*hc[j][k]%MOD\\n        \\n        for j in range(NN-1, -1, -1):\\n            res = Dp[i][j+1]\\n            if dl < j <= dr:\\n                for k in range(1, i+1):        \\n                    res = (res + dp[i][j][k])%MOD\\n            Dp[i][j] = res\\n    \\n    res = Dp[N][0]\\n    for l, r in LR2:\\n        res = res*(pow(r-l, MOD-2, MOD))%MOD\\nprint(res)\\n\\n\", \"from bisect import bisect_left\\n \\nM = 998244353\\n \\ndef pw(x, y):\\n    if y == 0:\\n        return 1\\n    res = pw(x, y//2)\\n    res = res * res % M\\n    if y % 2 == 1:\\n        res = res * x % M\\n    return res\\n \\ndef cal(x, y):\\n    y += x - 1\\n    res = 1\\n    for i in range(1, x + 1):\\n        res = res * (y - i + 1)\\n        res = res * pw(i, M - 2) % M\\n    return res % M\\n \\nn = int(input())\\na = []\\nb = []\\nres = 1\\nfor i in range(n):\\n    a.append(list(map(int, input().split())))\\n    res = res * (a[-1][1] + 1 - a[-1][0]) % M\\n    b.append(a[-1][0])\\n    b.append(a[-1][1] + 1)\\n    b = set(b)\\n    b = sorted(list(b))\\n \\ng = [b[i + 1] - b[i] for i in range(len(b) - 1)]\\n \\nfor i in range(n):\\n    a[i][0] = bisect_left(b, a[i][0])\\n    a[i][1] = bisect_left(b, a[i][1] + 1)\\n \\na = a[::-1]\\n \\nf = [[0 for _ in range(len(b))] for __ in range(n)]\\n \\nfor i in range(a[0][0], len(b)):\\n    if i == 0:\\n        f[0][i] = g[i]\\n    else:\\n        if i < a[0][1]:\\n            f[0][i] = (f[0][i - 1] + g[i]) % M\\n        else:\\n            f[0][i] = f[0][i - 1]\\n        \\nfor i in range(1, n):\\n    for j in range(a[i][0], len(b)):\\n        if j > 0:\\n            f[i][j] = f[i][j - 1]\\n        if j < a[i][1]:\\n            for k in range(i, -1, -1):\\n                if a[k][1] <= j or j < a[k][0]:\\n                    break\\n                if k == 0 or j != 0:\\n                    tmp = cal(i - k + 1, g[j])\\n                    if k > 0:\\n                        f[i][j] += f[k - 1][j - 1] * tmp % M\\n                    else:\\n                        f[i][j] += tmp\\n                    f[i][j] %= M\\n                    \\n#print(f)\\n#print(f[n - 1][len(b) - 1], res)\\nprint(f[n - 1][len(b) - 1] * pw(res, M - 2) % M)\", \"import sys\\ninput = sys.stdin.readline\\n\\nmod=998244353\\nn=int(input())\\nLR=[list(map(int,input().split())) for i in range(n)]\\nRMIN=1<<31\\n\\nALL=1\\nfor l,r in LR:\\n    ALL=ALL*pow(r-l+1,mod-2,mod)%mod\\n\\nfor i in range(n):\\n    if LR[i][1]>RMIN:\\n        LR[i][1]=RMIN\\n    RMIN=min(RMIN,LR[i][1])\\n\\nLMAX=-1\\nfor i in range(n-1,-1,-1):\\n    if LR[i][0]<LMAX:\\n        LR[i][0]=LMAX\\n    LMAX=max(LMAX,LR[i][0])\\n\\ncompression=[]\\nfor l,r in LR:\\n    compression.append(l)\\n    compression.append(r+1)\\n\\ncompression=sorted(set(compression))\\nco_dict={a:ind for ind,a in enumerate(compression)}\\n\\nLEN=len(compression)-1\\n\\nif LEN==0:\\n    print(0)\\n    return\\n\\nDP=[[0]*LEN for i in range(n)]\\n\\nfor i in range(co_dict[LR[0][0]],co_dict[LR[0][1]+1]):\\n    x=compression[i+1]-compression[i]\\n    now=x\\n    #print(i,x)\\n    for j in range(n):\\n        if LR[j][0]<=compression[i] and LR[j][1]+1>=compression[i+1]:\\n            DP[j][i]=now\\n        else:\\n            break\\n        now=now*(x+j+1)*pow(j+2,mod-2,mod)%mod\\n\\n#print(DP)\\n\\nfor i in range(1,n):\\n    SUM=DP[i-1][LEN-1]\\n    #print(DP)\\n    for j in range(LEN-2,-1,-1):\\n        if LR[i][0]<=compression[j] and LR[i][1]+1>=compression[j+1]:\\n            x=SUM*(compression[j+1]-compression[j])%mod\\n            now=x\\n            t=compression[j+1]-compression[j]\\n            #print(x,t)\\n\\n            for k in range(i,n):\\n                \\n                if LR[k][0]<=compression[j] and LR[k][1]+1>=compression[j+1]:\\n                    DP[k][j]=(DP[k][j]+now)%mod\\n                else:\\n                    break\\n                now=now*(t+k-i+1)*pow(k-i+2,mod-2,mod)%mod\\n                \\n        \\n        SUM+=DP[i-1][j]\\n\\nprint(sum(DP[-1])*ALL%mod)\\n\\n        \\n        \\n    \\n\", \"import sys\\ninput = sys.stdin.readline\\n\\nmod=998244353\\nn=int(input())\\nLR=[list(map(int,input().split())) for i in range(n)]\\nRMIN=1<<31\\n\\nALL=1\\nfor l,r in LR:\\n    ALL=ALL*pow(r-l+1,mod-2,mod)%mod\\n\\nfor i in range(n):\\n    if LR[i][1]>RMIN:\\n        LR[i][1]=RMIN\\n    RMIN=min(RMIN,LR[i][1])\\n\\nLMAX=-1\\nfor i in range(n-1,-1,-1):\\n    if LR[i][0]<LMAX:\\n        LR[i][0]=LMAX\\n    LMAX=max(LMAX,LR[i][0])\\n\\ncompression=[]\\nfor l,r in LR:\\n    compression.append(l)\\n    compression.append(r+1)\\n\\ncompression=sorted(set(compression))\\nco_dict={a:ind for ind,a in enumerate(compression)}\\n\\nLEN=len(compression)-1\\n\\nif LEN==0:\\n    print(0)\\n    return\\n\\nDP=[[0]*LEN for i in range(n)]\\n\\nfor i in range(co_dict[LR[0][0]],co_dict[LR[0][1]+1]):\\n    x=compression[i+1]-compression[i]\\n    now=x\\n    #print(i,x)\\n    for j in range(n):\\n        if LR[j][0]<=compression[i] and LR[j][1]+1>=compression[i+1]:\\n            DP[j][i]=now\\n        else:\\n            break\\n        now=now*(x+j+1)*pow(j+2,mod-2,mod)%mod\\n\\n#print(DP)\\n\\nfor i in range(1,n):\\n    SUM=DP[i-1][LEN-1]\\n    #print(DP)\\n    for j in range(LEN-2,-1,-1):\\n        if LR[i][0]<=compression[j] and LR[i][1]+1>=compression[j+1]:\\n            x=SUM*(compression[j+1]-compression[j])%mod\\n            now=x\\n            t=compression[j+1]-compression[j]\\n            #print(x,t)\\n\\n            for k in range(i,n):\\n                \\n                if LR[k][0]<=compression[j] and LR[k][1]+1>=compression[j+1]:\\n                    DP[k][j]=(DP[k][j]+now)%mod\\n                else:\\n                    break\\n                now=now*(t+k-i+1)*pow(k-i+2,mod-2,mod)%mod\\n                \\n        \\n        SUM+=DP[i-1][j]\\n\\nprint(sum(DP[-1])*ALL%mod)\\n\\n        \\n        \\n    \\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3\\n1 2\\n1 2\\n1 2\\n\",\n    \"2\\n42 1337\\n13 420\\n\",\n    \"2\\n1 1\\n0 0\\n\",\n    \"2\\n1 1\\n1 1\\n\",\n    \"2\\n1 1\\n0 1\\n\",\n    \"2\\n0 1\\n0 1\\n\",\n    \"2\\n0 0\\n0 1\\n\",\n    \"2\\n0 0\\n0 1\\n\",\n    \"2\\n0 0\\n0 1\\n\",\n    \"2\\n0 1\\n1 1\\n\",\n    \"2\\n10 34\\n17 26\\n\",\n    \"2\\n12 19\\n39 69\\n\",\n    \"2\\n25 29\\n29 78\\n\",\n    \"2\\n3 38\\n52 99\\n\",\n    \"2\\n14 49\\n41 52\\n\",\n    \"2\\n21 93\\n15 70\\n\",\n    \"2\\n1378 72243\\n23169 96615\\n\",\n    \"2\\n6509 18946\\n66363 93596\\n\",\n    \"2\\n40776 60862\\n20449 79682\\n\",\n    \"2\\n50696 78430\\n1009 98884\\n\",\n    \"2\\n84964 95998\\n22337 77318\\n\",\n    \"2\\n38680 95906\\n66084 96498\\n\",\n    \"2\\n86080945 900334037\\n283817560 816700236\\n\",\n    \"2\\n105001489 202733825\\n260379286 951276926\\n\",\n    \"2\\n727901809 780202030\\n645657763 702302687\\n\",\n    \"2\\n359425882 746822353\\n38048713 724795689\\n\",\n    \"2\\n240639622 765742897\\n470464627 730673903\\n\",\n    \"2\\n754872424 926908966\\n219572916 995287694\\n\",\n    \"10\\n0 1\\n0 1\\n0 0\\n0 0\\n0 0\\n0 1\\n1 1\\n1 1\\n0 1\\n0 1\\n\",\n    \"10\\n0 1\\n0 0\\n1 1\\n0 1\\n0 1\\n0 0\\n0 1\\n0 0\\n0 1\\n0 0\\n\",\n    \"10\\n1 1\\n0 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 1\\n\",\n    \"10\\n1 1\\n1 1\\n0 0\\n0 0\\n1 1\\n0 1\\n1 1\\n0 0\\n1 1\\n0 0\\n\",\n    \"10\\n1 1\\n1 1\\n0 1\\n0 1\\n0 1\\n1 1\\n0 0\\n1 1\\n0 1\\n0 1\\n\",\n    \"10\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n\",\n    \"10\\n41 52\\n82 97\\n37 76\\n42 82\\n91 97\\n6 94\\n29 96\\n3 76\\n60 91\\n16 60\\n\",\n    \"10\\n30 83\\n2 19\\n50 93\\n27 36\\n82 88\\n39 95\\n4 97\\n23 75\\n37 53\\n15 69\\n\",\n    \"10\\n48 76\\n12 20\\n24 36\\n54 72\\n30 79\\n5 74\\n55 80\\n54 85\\n60 91\\n20 59\\n\",\n    \"10\\n54 58\\n42 65\\n77 92\\n27 37\\n2 21\\n38 85\\n88 89\\n74 84\\n0 56\\n4 47\\n\",\n    \"10\\n67 67\\n32 75\\n2 51\\n4 88\\n62 80\\n37 97\\n46 64\\n4 83\\n53 54\\n2 56\\n\",\n    \"10\\n0 85\\n0 14\\n0 65\\n0 76\\n0 56\\n0 23\\n0 34\\n0 24\\n0 68\\n0 13\\n\",\n    \"10\\n2139 77689\\n7692 31588\\n39321 54942\\n48988 55097\\n46970 54864\\n61632 70126\\n4240 37374\\n69600 79133\\n69308 91118\\n12408 56672\\n\",\n    \"10\\n11955 30601\\n10022 29020\\n67511 97636\\n6159 48409\\n24834 39598\\n66437 72414\\n7968 12307\\n20918 83151\\n50739 85006\\n6049 71253\\n\",\n    \"10\\n21875 48170\\n26001 64110\\n71355 99916\\n41721 52438\\n2697 24332\\n49294 58850\\n27652 76457\\n51810 61461\\n25049 34708\\n5750 31079\\n\",\n    \"10\\n56142 90085\\n7302 12087\\n77850 86092\\n35033 58303\\n4908 9066\\n20938 45605\\n20597 78238\\n69249 75012\\n5506 59089\\n15697 64595\\n\",\n    \"10\\n7652 90409\\n33415 61390\\n20543 89936\\n28345 80234\\n7118 93802\\n7374 17569\\n17929 89085\\n140 88563\\n43057 45550\\n40728 74746\\n\",\n    \"10\\n25823 99883\\n48624 99584\\n52672 99474\\n10956 99906\\n56493 99804\\n38589 99933\\n63666 99555\\n65591 99572\\n8450 99921\\n42834 99917\\n\",\n    \"10\\n435368449 906834606\\n329478288 810620704\\n337438370 425488467\\n261210437 952223320\\n489526021 754503172\\n826073281 936684995\\n270748702 993400655\\n175130673 281932203\\n585827654 710872711\\n22140424 777277629\\n\",\n    \"10\\n14592301 925755150\\n49981402 203011654\\n452726617 976821979\\n467112999 945037753\\n260612539 372077071\\n530976641 871876506\\n154188384 306542825\\n926936004 982826136\\n52360908 432533746\\n516279982 585592522\\n\",\n    \"10\\n550411118 894050393\\n174216555 793894691\\n203140702 315971348\\n258826743 630620717\\n31699058 291640859\\n235880001 412803442\\n315939459 759048353\\n685475718 957321047\\n179360604 240314450\\n834096287 847054732\\n\",\n    \"10\\n171284358 569331662\\n816387693 866841745\\n230378852 628199244\\n14213793 469970886\\n104775464 907459110\\n649984841 964193536\\n627325981 944477922\\n86135411 710882026\\n705092056 899265991\\n110272590 153668239\\n\",\n    \"10\\n588252206 748752562\\n259232694 260066743\\n269338501 559606889\\n1786645 286850453\\n550198833 572116446\\n308352289 971086784\\n242458040 551093539\\n741267069 787029344\\n591055711 646092849\\n673724688 890914944\\n\",\n    \"10\\n281810232 762606772\\n269783510 738093461\\n205086180 673338873\\n83658884 990305706\\n174551518 969757411\\n12272556 981294098\\n271749430 909945032\\n62307770 939073496\\n178435963 842807921\\n177044261 712460424\\n\",\n    \"50\\n0 1\\n0 0\\n0 1\\n0 1\\n0 1\\n0 0\\n0 1\\n0 0\\n0 1\\n0 0\\n0 1\\n0 1\\n0 1\\n0 1\\n0 0\\n1 1\\n0 0\\n1 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 1\\n0 1\\n0 0\\n1 1\\n0 1\\n1 1\\n1 1\\n0 1\\n0 1\\n0 0\\n0 0\\n0 1\\n0 1\\n0 1\\n1 1\\n1 1\\n0 0\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 1\\n1 1\\n0 0\\n0 1\\n\",\n    \"50\\n0 1\\n1 1\\n0 0\\n1 1\\n1 1\\n0 1\\n1 1\\n1 1\\n1 1\\n0 1\\n0 0\\n0 1\\n0 0\\n0 1\\n0 0\\n1 1\\n1 1\\n0 0\\n0 1\\n1 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n1 1\\n0 0\\n0 1\\n0 0\\n0 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 0\\n0 1\\n0 1\\n0 1\\n0 1\\n0 0\\n1 1\\n0 1\\n0 0\\n0 1\\n0 1\\n0 0\\n0 1\\n0 1\\n1 1\\n0 1\\n\",\n    \"50\\n0 0\\n1 1\\n0 1\\n0 1\\n0 1\\n1 1\\n0 0\\n0 0\\n0 1\\n0 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 1\\n0 0\\n0 1\\n0 1\\n1 1\\n0 0\\n0 1\\n0 0\\n0 0\\n1 1\\n0 1\\n0 1\\n0 1\\n0 1\\n1 1\\n1 1\\n0 0\\n0 0\\n0 1\\n0 1\\n0 1\\n0 0\\n0 1\\n0 1\\n0 0\\n0 1\\n1 1\\n0 0\\n0 1\\n1 1\\n0 1\\n0 0\\n0 1\\n1 1\\n1 1\\n0 1\\n\",\n    \"50\\n0 0\\n1 1\\n1 1\\n1 1\\n0 1\\n1 1\\n0 0\\n1 1\\n0 1\\n0 0\\n0 1\\n0 1\\n0 1\\n0 1\\n1 1\\n0 0\\n1 1\\n0 1\\n0 1\\n0 0\\n0 0\\n1 1\\n0 0\\n1 1\\n0 0\\n0 0\\n1 1\\n0 1\\n0 0\\n0 1\\n1 1\\n0 1\\n0 0\\n1 1\\n0 0\\n1 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 0\\n1 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 1\\n1 1\\n\",\n    \"50\\n0 0\\n0 0\\n0 0\\n1 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 0\\n0 1\\n0 0\\n0 1\\n1 1\\n0 1\\n1 1\\n0 0\\n0 0\\n0 0\\n1 1\\n1 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 1\\n0 0\\n0 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 0\\n1 1\\n0 0\\n0 1\\n0 1\\n0 0\\n0 0\\n0 1\\n1 1\\n0 0\\n0 1\\n0 1\\n0 0\\n0 0\\n0 1\\n0 0\\n1 1\\n1 1\\n1 1\\n\",\n    \"50\\n0 1\\n1 1\\n1 1\\n1 1\\n1 1\\n0 1\\n1 1\\n0 1\\n1 1\\n0 1\\n0 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 1\\n1 1\\n1 1\\n1 1\\n1 1\\n0 1\\n1 1\\n0 1\\n1 1\\n1 1\\n1 1\\n0 1\\n0 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n0 1\\n1 1\\n1 1\\n0 1\\n1 1\\n0 1\\n0 1\\n1 1\\n0 1\\n0 1\\n0 1\\n1 1\\n1 1\\n1 1\\n0 1\\n1 1\\n1 1\\n\",\n    \"50\\n0 53\\n0 52\\n12 27\\n38 89\\n29 70\\n19 56\\n9 15\\n22 24\\n86 93\\n69 97\\n42 89\\n27 36\\n28 56\\n48 56\\n37 79\\n42 47\\n38 52\\n5 47\\n5 22\\n25 31\\n53 74\\n29 48\\n18 42\\n10 94\\n10 36\\n29 64\\n48 55\\n0 6\\n10 13\\n14 90\\n60 84\\n9 42\\n20 44\\n77 78\\n36 65\\n4 99\\n75 79\\n23 79\\n61 87\\n28 63\\n29 81\\n39 76\\n35 91\\n5 84\\n14 30\\n20 21\\n68 93\\n61 81\\n75 77\\n34 79\\n\",\n    \"50\\n47 52\\n62 91\\n23 80\\n39 94\\n88 94\\n31 45\\n73 86\\n23 75\\n7 100\\n53 85\\n62 65\\n40 81\\n2 71\\n20 95\\n34 39\\n4 24\\n9 21\\n67 85\\n48 65\\n83 99\\n19 25\\n48 69\\n86 97\\n34 99\\n7 80\\n27 43\\n38 65\\n14 31\\n4 86\\n39 52\\n73 99\\n28 50\\n3 48\\n64 88\\n64 88\\n31 98\\n31 62\\n10 52\\n7 15\\n45 46\\n48 75\\n21 100\\n6 96\\n8 30\\n34 36\\n51 76\\n7 95\\n2 96\\n36 50\\n26 55\\n\",\n    \"50\\n25 28\\n12 15\\n53 79\\n22 38\\n47 52\\n42 44\\n61 74\\n34 73\\n28 50\\n4 40\\n14 99\\n33 44\\n46 81\\n40 61\\n32 54\\n12 45\\n72 91\\n0 60\\n52 57\\n11 72\\n42 87\\n35 44\\n64 96\\n57 69\\n48 83\\n22 82\\n8 40\\n54 95\\n52 73\\n7 72\\n26 84\\n23 58\\n20 44\\n52 97\\n70 100\\n2 97\\n13 88\\n8 58\\n44 87\\n40 84\\n78 94\\n22 47\\n22 67\\n35 76\\n42 87\\n48 63\\n40 59\\n23 54\\n7 92\\n7 20\\n\",\n    \"50\\n37 38\\n2 24\\n34 95\\n40 84\\n38 43\\n21 77\\n42 69\\n66 93\\n3 69\\n56 85\\n55 65\\n16 75\\n15 89\\n58 86\\n48 62\\n23 54\\n16 56\\n32 71\\n16 45\\n44 74\\n58 99\\n30 54\\n39 41\\n39 81\\n92 93\\n12 80\\n6 63\\n25 61\\n16 100\\n1 100\\n5 66\\n52 99\\n2 16\\n40 50\\n11 65\\n74 97\\n44 65\\n29 31\\n40 44\\n23 33\\n12 96\\n12 29\\n16 38\\n90 95\\n4 18\\n11 50\\n9 99\\n12 44\\n32 79\\n30 32\\n\",\n    \"50\\n16 47\\n24 34\\n12 78\\n72 91\\n68 98\\n22 76\\n44 66\\n12 65\\n65 81\\n40 72\\n87 97\\n20 28\\n64 94\\n9 55\\n92 98\\n68 84\\n6 8\\n19 26\\n37 41\\n50 60\\n10 19\\n52 84\\n19 61\\n3 44\\n67 72\\n11 23\\n31 83\\n78 91\\n80 93\\n35 64\\n16 70\\n6 47\\n6 89\\n60 84\\n34 60\\n1 52\\n22 27\\n16 38\\n69 91\\n39 72\\n26 63\\n3 44\\n64 66\\n65 68\\n21 95\\n19 37\\n5 11\\n32 48\\n5 39\\n13 28\\n\",\n    \"50\\n4 66\\n6 49\\n8 32\\n0 73\\n0 46\\n10 58\\n0 58\\n9 46\\n0 33\\n1 24\\n5 76\\n6 19\\n7 92\\n0 56\\n5 27\\n7 31\\n3 56\\n11 66\\n3 51\\n6 53\\n4 29\\n9 27\\n10 94\\n7 66\\n5 32\\n9 51\\n6 97\\n3 33\\n8 44\\n10 73\\n4 96\\n8 52\\n10 100\\n3 81\\n9 94\\n2 76\\n11 83\\n10 72\\n6 56\\n3 81\\n0 96\\n8 32\\n9 88\\n6 26\\n0 99\\n6 53\\n10 24\\n11 56\\n10 72\\n9 51\\n\",\n    \"10\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n0 1\\n\",\n    \"10\\n3 10\\n3 10\\n3 10\\n3 10\\n3 10\\n3 10\\n3 10\\n3 10\\n3 10\\n3 10\\n\",\n    \"10\\n34 50\\n34 50\\n34 50\\n34 50\\n34 50\\n34 50\\n34 50\\n34 50\\n34 50\\n34 50\\n\",\n    \"10\\n45 98\\n45 98\\n45 98\\n45 98\\n45 98\\n45 98\\n45 98\\n45 98\\n45 98\\n45 98\\n\",\n    \"10\\n98 193\\n98 193\\n98 193\\n98 193\\n98 193\\n98 193\\n98 193\\n98 193\\n98 193\\n98 193\\n\",\n    \"10\\n58977 99307\\n58977 99307\\n58977 99307\\n58977 99307\\n58977 99307\\n58977 99307\\n58977 99307\\n58977 99307\\n58977 99307\\n58977 99307\\n\",\n    \"10\\n295314256 608527638\\n295314256 608527638\\n295314256 608527638\\n295314256 608527638\\n295314256 608527638\\n295314256 608527638\\n295314256 608527638\\n295314256 608527638\\n295314256 608527638\\n295314256 608527638\\n\",\n    \"50\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n\",\n    \"50\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n5 10\\n\",\n    \"50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n25 50\\n\",\n    \"50\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n48 100\\n\",\n    \"50\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n89 199\\n\"\n  ],\n  \"outputs\": [\n    \"499122177\\n\",\n    \"578894053\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"249561089\\n\",\n    \"499122177\\n\",\n    \"499122177\\n\",\n    \"499122177\\n\",\n    \"499122177\\n\",\n    \"818560370\\n\",\n    \"0\\n\",\n    \"930363737\\n\",\n    \"0\\n\",\n    \"228764331\\n\",\n    \"982860451\\n\",\n    \"872616547\\n\",\n    \"0\\n\",\n    \"447250007\\n\",\n    \"161808275\\n\",\n    \"1\\n\",\n    \"116346445\\n\",\n    \"990443786\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"25745160\\n\",\n    \"515321057\\n\",\n    \"555664178\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"974848001\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"987521025\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"159813282\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"367159257\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"221646382\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"998243877\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"280107165\\n\",\n    \"987521025\\n\",\n    \"561494368\\n\",\n    \"801164847\\n\",\n    \"207527825\\n\",\n    \"232974654\\n\",\n    \"449467043\\n\",\n    \"565526803\\n\",\n    \"1\\n\",\n    \"210464987\\n\",\n    \"791565582\\n\",\n    \"970752233\\n\",\n    \"164998844\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1295/F",
  "starter_code": ""
}