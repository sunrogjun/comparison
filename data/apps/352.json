{
  "task_id": "APPS/352",
  "problem_id": 352,
  "prompt": "Soon a school Olympiad in Informatics will be held in Berland, n schoolchildren will participate there.\n\nAt a meeting of the jury of the Olympiad it was decided that each of the n participants, depending on the results, will get a diploma of the first, second or third degree. Thus, each student will receive exactly one diploma.\n\nThey also decided that there must be given at least min_1 and at most max_1 diplomas of the first degree, at least min_2 and at most max_2 diplomas of the second degree, and at least min_3 and at most max_3 diplomas of the third degree.\n\nAfter some discussion it was decided to choose from all the options of distributing diplomas satisfying these limitations the one that maximizes the number of participants who receive diplomas of the first degree. Of all these options they select the one which maximizes the number of the participants who receive diplomas of the second degree. If there are multiple of these options, they select the option that maximizes the number of diplomas of the third degree.\n\nChoosing the best option of distributing certificates was entrusted to Ilya, one of the best programmers of Berland. However, he found more important things to do, so it is your task now to choose the best option of distributing of diplomas, based on the described limitations.\n\nIt is guaranteed that the described limitations are such that there is a way to choose such an option of distributing diplomas that all n participants of the Olympiad will receive a diploma of some degree.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (3 \u2264 n \u2264 3\u00b710^6)\u00a0\u2014\u00a0the number of schoolchildren who will participate in the Olympiad.\n\nThe next line of the input contains two integers min_1 and max_1 (1 \u2264 min_1 \u2264 max_1 \u2264 10^6)\u00a0\u2014\u00a0the minimum and maximum limits on the number of diplomas of the first degree that can be distributed.\n\nThe third line of the input contains two integers min_2 and max_2 (1 \u2264 min_2 \u2264 max_2 \u2264 10^6)\u00a0\u2014\u00a0the minimum and maximum limits on the number of diplomas of the second degree that can be distributed. \n\nThe next line of the input contains two integers min_3 and max_3 (1 \u2264 min_3 \u2264 max_3 \u2264 10^6)\u00a0\u2014\u00a0the minimum and maximum limits on the number of diplomas of the third degree that can be distributed. \n\nIt is guaranteed that min_1 + min_2 + min_3 \u2264 n \u2264 max_1 + max_2 + max_3.\n\n\n-----Output-----\n\nIn the first line of the output print three numbers, showing how many diplomas of the first, second and third degree will be given to students in the optimal variant of distributing diplomas.\n\nThe optimal variant of distributing diplomas is the one that maximizes the number of students who receive diplomas of the first degree. Of all the suitable options, the best one is the one which maximizes the number of participants who receive diplomas of the second degree. If there are several of these options, the best one is the one that maximizes the number of diplomas of the third degree.\n\n\n-----Examples-----\nInput\n6\n1 5\n2 6\n3 7\n\nOutput\n1 2 3 \n\nInput\n10\n1 2\n1 3\n1 5\n\nOutput\n2 3 5 \n\nInput\n6\n1 3\n2 2\n2 2\n\nOutput\n2 2 2",
  "solutions": "[\"n = int(input())\\nmin1, max1 = map(int, input().split())\\nmin2, max2 = map(int, input().split())\\nmin3, max3 = map(int, input().split())\\n\\nd1 = min(n - min2 - min3, max1)\\nd2 = min(n - d1 - min3, max2)\\nd3 = n - d1 - d2\\n\\nprint(d1,d2,d3)\", \"__author__ = '\\u0414\\u0430\\u043d\\u0438\\u043b\\u0430'\\n\\nn = int(input())\\nmin1, max1 = list(map(int, input().split()))\\nmin2, max2 = list(map(int, input().split()))\\nmin3, max3 = list(map(int, input().split()))\\n\\nans1 = min(max1, n - min2 - min3)\\n\\nn -= ans1\\n\\nans2 = min(max2, n - min3)\\n\\nans3 = n - ans2\\nprint(ans1, ans2, ans3)\\n\", \"n = int(input())\\na1, a2 = list(map(int, input().split()))\\nb1, b2 = list(map(int, input().split()))\\nc1, c2 = list(map(int, input().split()))\\n\\na = a1\\nb = b1\\nc = c1\\ns = a + b + c\\n\\nif a2 - a1 < n - s:\\n    a = a2\\n    s += a2 - a1\\n    if b2 - b1 < n - s:\\n        b = b2\\n        s += b2 - b1\\n        if c2 - c1 < n - s:\\n            c = c2\\n        else:\\n            c += n - s\\n    else:\\n        b += n - s\\nelse:\\n    a += n - s\\n\\nprint(a, b, c)\\n\", \"n=int(input())\\nmin1,max1=map(int,input().split(\\\" \\\"))\\nmin2,max2=map(int,input().split(\\\" \\\"))\\nmin3,max3=map(int,input().split(\\\" \\\"))\\nx1=min(n-min3-min2,max1)\\nn-=x1\\nx2=min(n-min3,max2)\\nx3=n-x2\\nprint(x1,x2,x3)\", \"n = int(input())\\nmin1, max1 = list(map(int, input().split(' ')))\\nmin2, max2 = list(map(int, input().split(' ')))\\nmin3, max3 = list(map(int, input().split(' ')))\\n\\nn1 = min(n - (min2 + min3), max1)\\nn2 = min(n - (n1 + min3), max2)\\nn3 = min(n - (n1 + n2), max3)\\n\\nprint('{} {} {}'.format(n1, n2, n3))\\n\", \"n = int(input())\\nmin1, max1 = map(int, input().split())\\nmin2, max2 = map(int, input().split())\\nmin3, max3 = map(int, input().split())\\nans1 = min(n - min2 - min3, max1)\\nans2 = min(n - ans1 - min3, max2)\\nans3 = min(n - ans1 - ans2, max3)\\nprint(ans1, ans2, ans3)\", \"# A\\n\\nn = int(input())\\nmin1, max1 = list(map(int, input().split()))\\nmin2, max2 = list(map(int, input().split()))\\nmin3, max3 = list(map(int, input().split()))\\n\\nx = n - min1 - min2 - min3\\n\\nans1 = min(max1, x+min1)\\nx = x - (ans1 - min1)\\n\\nans2 = min(max2, x+min2)\\nx = x - (ans2 - min2)\\n\\nans3 = min3 + x\\nprint(ans1, ans2, ans3)\\n\", \"n=int(input())\\na1,b1=[int(x) for x in input().split()]\\na2,b2=[int(x) for x in input().split()]\\na3,b3=[int(x) for x in input().split()]\\nans=[a1,a2,a3]\\nn-=a1+a2+a3\\nif n>=b1-a1:\\n    ans[0]=b1\\n    n-=b1-a1\\n    if n>=b2-a2:\\n        ans[1]=b2\\n        n-=b2-a2\\n        ans[2]=min(a3+n,b3)\\n    else:\\n        ans[1]+=n\\nelse:\\n    ans[0]+=n\\nprint(' '.join([str(x) for x in ans]))\\n    \\n\", \"n=int(input())\\nmin1,max1 = (int(x) for x in input().split())\\nmin2,max2 = (int(x) for x in input().split())\\nmin3,max3 = (int(x) for x in input().split())\\na1=max1\\na2=max2\\na3=n-a1-a2\\nif a3<min3 :\\n    a2-=min3-a3\\n    a3=min3\\nif a2<min2:\\n    a1-=min2-a2\\n    a2=min2\\nprint(a1,a2,a3)\\n\", \"import math\\nimport sys\\n\\nn=int(input())\\n\\ninp=list(map(int,input().split()))\\n\\nm1=inp[0]\\nM1=inp[1]\\n\\ninp=list(map(int,input().split()))\\n\\nm2=inp[0]\\nM2=inp[1]\\n\\ninp=list(map(int,input().split()))\\n\\nm3=inp[0]\\nM3=inp[1]\\n    \\nans=[]\\n\\nrest=n-m2-m3\\n\\nans=[rest,m2,m3]\\n\\nrest=n-M1-m3\\n\\nif rest>=m2 and rest<=M2:\\n    ans=[M1,rest,m3]\\n\\nrest=n-M1-M2\\n\\nif rest>=m3 and rest<=M3:\\n    ans=[M1,M2,rest]\\n\\nprint(str(ans[0]) + \\\" \\\" + str(ans[1]) + \\\" \\\" + str(ans[2]))\\n\\n\", \"n = int(input())\\nmin1, max1 = [int(c) for c in input().split()]\\nmin2, max2 = [int(c) for c in input().split()]\\nmin3, max3 = [int(c) for c in input().split()]\\n\\na, b, c = 0, 0, 0\\nif n - min3 <= max1 + max2:\\n    c = min3\\nelse:\\n    c = n - max1 - max2\\n\\nif n - c - min2 <= max1:\\n    b = min2\\n    a = n - c - b\\nelse:\\n    a = max1\\n    b = n - c - a\\n\\nprint(str(a) + ' '+ str(b) + ' ' + str(c))\\n\", \"#!/usr/bin/env python3\\n\\nN = int(input())\\nmin1, max1 = tuple(map(int, input().split(' ')))\\nmin2, max2 = tuple(map(int, input().split(' ')))\\nmin3, max3 = tuple(map(int, input().split(' ')))\\n\\nans1, ans2, ans3 = min1, min2, min3\\n\\ndef left():\\n\\treturn N - (ans1 + ans2 + ans3)\\n\\nans1 += min(left(), max1 - ans1)\\nans2 += min(left(), max2 - ans2)\\nans3 += min(left(), max3 - ans3)\\n\\nprint(ans1, ans2, ans3)\", \"def main():\\n    n = int(input())\\n    (min1, max1), (min2, max2), (min3, max3) = list(tuple(map(int, input().split())) for _ in range(3))\\n    max1 = min(max1, n - min2 - min3)\\n    max2 = min(max2, n - max1 - min3)\\n    print(max1, max2, n - max1 - max2)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"import math,string,itertools,fractions,heapq,collections,re,array,bisect,copy\\nfrom itertools import chain, dropwhile, permutations, combinations\\nfrom collections import defaultdict, deque\\n\\n# Guide:\\n#   1. construct complex data types while reading (e.g. graph adj list)\\n#   2. avoid any non-necessary time/memory usage\\n#   3. avoid templates and write more from scratch\\n#   4. switch to \\\"flat\\\" implementations\\n\\ndef VI(): return list(map(int,input().split()))\\ndef I(): return int(input())\\ndef LIST(n,m=None): return [0]*n if m is None else [[0]*m for i in range(n)]\\ndef ELIST(n): return [[] for i in range(n)]\\ndef MI(n=None,m=None): # input matrix of integers\\n    if n is None: n,m = VI()\\n    arr = LIST(n)\\n    for i in range(n): arr[i] = VI()\\n    return arr\\ndef MS(n=None,m=None): # input matrix of strings\\n    if n is None: n,m = VI()\\n    arr = LIST(n)\\n    for i in range(n): arr[i] = input()\\n    return arr\\ndef MIT(n=None,m=None): # input transposed matrix/array of integers\\n    if n is None: n,m = VI()\\n    a = MI(n,m)\\n    arr = LIST(m,n)\\n    for i,l in enumerate(a):\\n        for j,x in enumerate(l):\\n            arr[j][i] = x\\n    return arr\\n\\n\\ndef run(n,x,l,r):\\n    s = 0\\n    curr = 1\\n    for i in range(n):\\n        skip = (l[i]-curr) // x\\n        s += r[i]-curr-skip*x+1\\n        curr = r[i]+1\\n    print(s)\\n\\n\\ndef main(info=0):\\n    n = I()\\n    an, ax = VI()\\n    bn, bx = VI()\\n    cn, cx = VI()\\n\\n    m = [an, bn, cn]\\n\\n    if sum(m) < n and ax>an:\\n        m[0] += min(ax-an, n-sum(m))\\n    if sum(m) < n and bx>bn:\\n        m[1] += min(bx-bn, n-sum(m))\\n    if sum(m) < n and cx>cn:\\n        m[2] += min(cx-cn, n-sum(m))\\n\\n    print(m[0], m[1], m[2])\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def main():\\n    n = int(input())\\n    min1, max1 = [int(i) for i in input().split()]\\n    min2, max2 = [int(i) for i in input().split()]\\n    min3, max3 = [int(i) for i in input().split()]\\n    \\n    for x in range(min(n - 1, max1), min1 - 1, -1):\\n        if min3 <= n - x - max2 <= max3:\\n            print(x, max2, n - x - max2)\\n            return\\n        if min2 <= n - x - min3 <= max2:\\n            print(x, n - x - min3, min3)\\n            return \\n    \\n    \\nmain()\\n\", \"n=int(input())\\nmin1,max1=map(int,input().split())\\nmin2,max2=map(int,input().split())\\nmin3,max3=map(int,input().split())\\nif max1+max2+max3==n:\\n\\tprint(str(max1),str(max2),str(max3))\\n\\tquit()\\nif max1+max2+min3<=n:\\n\\tprint(str(max1),str(max2),str(n-max1-max2))\\n\\tquit()\\nif max1+min2+min3<=n:\\n\\tprint(str(max1),str(n-max1-min3),str(min3))\\n\\tquit()\\nprint(str(n-min2-min3),str(min2),str(min3))\", \"n = int(input())\\nm_1, mx_1 = list(map(int, input().split()))\\nm_2, mx_2 = list(map(int, input().split()))\\nm_3, mx_3 = list(map(int, input().split()))\\nans = [m_1, m_2, m_3]\\ns = sum(ans)\\nif s == n:\\n    print(*ans)\\nelse:\\n    ans[0] += min(n - s, mx_1 - m_1)\\n    if ans[0] == mx_1:\\n        s += mx_1 - m_1\\n        ans[1] += min(n - s, mx_2 - m_2)\\n        if ans[1] == mx_2:\\n            s += mx_2 - m_2\\n            ans[2] += min(n - s, mx_3 - m_3)\\n    print(*ans)\\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\nb = [int(i) for i in input().split()]\\nc = [int(i) for i in input().split()]\\nn1 = a[0]\\nn2 = b[0]\\nn3 = c[0]\\nn -=(a[0] + b[0]+ c[0])\\nn1+=(min(a[1]- a[0], n) )\\nn -=(min(a[1]- a[0], n))\\nn2+=(min(b[1]- b[0], n))\\nn-=(min(b[1]- b[0], n))\\nn3+=n\\nprint(n1, n2, n3)\\n\", \"n = int(input())\\ndef r():\\n    return [int(i) for i in input().split()]\\n\\ndeg = r(), r(), r()\\n\\nl = [i[0] for i in deg]\\ndef remains():\\n    return n - sum(l)\\n\\ndef better(i):\\n    nonlocal l\\n    rem = remains()\\n    l[i] = min(l[i]+rem, deg[i][1])\\n\\nfor i in range(len(l)):\\n    better(i)\\n\\nprint(\\\" \\\".join(str(i) for i in l))\\n\", \"\\n\\nn = int(input())\\n\\nmin_1, max_1 = list(map(int, input().split()))\\nmin_2, max_2 = list(map(int, input().split()))\\nmin_3, max_3 = list(map(int, input().split()))\\n\\na_1 = min(max_1, n - min_2 - min_3)\\n\\na_2 = min(max_2, n - a_1 - min_3)\\n\\na_3 = n - a_1 - a_2\\n\\nprint(str(a_1) + \\\" \\\" + str(a_2) + \\\" \\\" + str(a_3))\\n\\n\\n\", \"n, mind, v = int(input()), [0] * 3, [0] * 3\\nfor i in range(3):\\n    mind[i], v[i] = map(int, input().split())\\nt = sum(v)\\nfor i in range(2, -1, -1):\\n    c = max(0, min(t - n, v[i] - mind[i]))\\n    v[i] -= c\\n    t -= c\\nprint(v[0], v[1], v[2])\", \"n = int(input())\\nmin1, max1 = map(int, input().split())\\nmin2, max2 = map(int, input().split())\\nmin3, max3 = map(int, input().split())\\n\\nd1 = min(n - min2 - min3, max1)\\nn -= d1\\nd2 = min(n - min3, max2)\\nd3 = n - d2\\nprint('{} {} {}'.format(d1, d2, d3))\", \"n = int(input())\\nmin1, max1 = map(int, input().split())\\nmin2, max2 = map(int, input().split())\\nmin3, max3 = map(int, input().split())\\n\\na1 = min1\\na2 = min2\\na3 = min3\\nn = n - a1 - a2 - a3\\n\\nmax1 -= min1\\nmax2 -= min2\\nmax3 -= min3\\n\\nif n > max1:\\n    a1 += max1\\n    n -= max1\\nelse:\\n    a1 += n\\n    n = 0\\nif n > max2:\\n    a2 += max2\\n    n -= max2\\nelse:\\n    a2 += n\\n    n = 0\\nif n > max3:\\n    a3 += max3\\n    n -= max3\\nelse:\\n    a3 += n\\n    n = 0\\nprint(a1, a2, a3)\", \"__author__ = 'Andrey'\\n\\n\\ndef solve(n):\\n    nonlocal min_1\\n    nonlocal min_2\\n    nonlocal min_3\\n    nonlocal max_1\\n    nonlocal max_2\\n    nonlocal max_3\\n    c_1, c_2, c_3 = 0, 0, 0\\n    c_2 += min_2\\n    c_3 += min_3\\n    n -= min_2 + min_3\\n    firsts = min(n, max_1)\\n    c_1 += firsts\\n    n -= firsts\\n    if n == 0:\\n        return c_1, c_2, c_3\\n    else:\\n        seconds = min(max_2 - min_2, n)\\n        n -= seconds\\n        c_2 += seconds\\n        if n == 0:\\n            return c_1, c_2, c_3\\n        else:\\n            thirds = min(max_3 - min_3, n)\\n            n -= thirds\\n            c_3 += thirds\\n            if n == 0:\\n                return c_1, c_2, c_3\\n\\n\\n\\nn = int(input())\\nmin_1, max_1 = map(int, input().split())\\nmin_2, max_2 = map(int, input().split())\\nmin_3, max_3 = map(int, input().split())\\nprint(*solve(n))\", \"n=int(input())\\nmin1,max1=map(int,input().split())\\nmin2,max2=map(int,input().split())\\nmin3,max3=map(int,input().split())\\nans1=min1\\nans2=min2\\nans3=min3\\nn-=min1+min2+min3\\nmax1=max1-min1\\nmax2=max2-min2\\nmax3=max3-min3\\nwhile n>0:\\n    if max1>0:\\n        if max1>=n:\\n            ans1+=n\\n            max1-=n\\n            n=0\\n        else:\\n            n=n-max1\\n            ans1+=max1\\n            max1=0\\n    elif max2>0:\\n         if max2>=n:\\n            ans2+=n\\n            max2-=n\\n            n=0\\n         else:\\n            n=n-max2\\n            ans2+=max2\\n            max2=0\\n    elif max3>0:\\n         if max3>=n:\\n            ans3+=n\\n            max3-=n\\n            n=0\\n         else:\\n            n=n-max3\\n            ans3+=max3\\n            max3=0\\nprint(ans1,ans2,ans3)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"6\\n1 5\\n2 6\\n3 7\\n\",\n    \"10\\n1 2\\n1 3\\n1 5\\n\",\n    \"6\\n1 3\\n2 2\\n2 2\\n\",\n    \"55\\n1 1000000\\n40 50\\n10 200\\n\",\n    \"3\\n1 1\\n1 1\\n1 1\\n\",\n    \"3\\n1 1000000\\n1 1000000\\n1 1000000\\n\",\n    \"1000\\n100 400\\n300 500\\n400 1200\\n\",\n    \"3000000\\n1 1000000\\n1 1000000\\n1 1000000\\n\",\n    \"11\\n3 5\\n3 5\\n3 5\\n\",\n    \"12\\n3 5\\n3 5\\n3 5\\n\",\n    \"13\\n3 5\\n3 5\\n3 5\\n\",\n    \"3000000\\n1000000 1000000\\n1000000 1000000\\n1000000 1000000\\n\",\n    \"50\\n1 100\\n1 100\\n1 100\\n\",\n    \"1279\\n123 670\\n237 614\\n846 923\\n\",\n    \"1589\\n213 861\\n5 96\\n506 634\\n\",\n    \"2115\\n987 987\\n112 483\\n437 959\\n\",\n    \"641\\n251 960\\n34 370\\n149 149\\n\",\n    \"1655\\n539 539\\n10 425\\n605 895\\n\",\n    \"1477\\n210 336\\n410 837\\n448 878\\n\",\n    \"1707\\n149 914\\n190 422\\n898 899\\n\",\n    \"1529\\n515 515\\n563 869\\n169 451\\n\",\n    \"1543\\n361 994\\n305 407\\n102 197\\n\",\n    \"1107\\n471 849\\n360 741\\n71 473\\n\",\n    \"1629279\\n267360 999930\\n183077 674527\\n202618 786988\\n\",\n    \"1233589\\n2850 555444\\n500608 921442\\n208610 607343\\n\",\n    \"679115\\n112687 183628\\n101770 982823\\n81226 781340\\n\",\n    \"1124641\\n117999 854291\\n770798 868290\\n76651 831405\\n\",\n    \"761655\\n88152 620061\\n60403 688549\\n79370 125321\\n\",\n    \"2174477\\n276494 476134\\n555283 954809\\n319941 935631\\n\",\n    \"1652707\\n201202 990776\\n34796 883866\\n162979 983308\\n\",\n    \"2065529\\n43217 891429\\n434379 952871\\n650231 855105\\n\",\n    \"1702543\\n405042 832833\\n50931 747750\\n381818 796831\\n\",\n    \"501107\\n19061 859924\\n126478 724552\\n224611 489718\\n\",\n    \"1629279\\n850831 967352\\n78593 463906\\n452094 885430\\n\",\n    \"1233589\\n2850 157021\\n535109 748096\\n392212 475634\\n\",\n    \"679115\\n125987 786267\\n70261 688983\\n178133 976789\\n\",\n    \"1124641\\n119407 734250\\n213706 860770\\n102149 102149\\n\",\n    \"761655\\n325539 325539\\n280794 792505\\n18540 106895\\n\",\n    \"2174477\\n352351 791072\\n365110 969163\\n887448 955610\\n\",\n    \"1652707\\n266774 638522\\n65688 235422\\n924898 992826\\n\",\n    \"2065529\\n608515 608515\\n751563 864337\\n614898 705451\\n\",\n    \"1702543\\n5784 996578\\n47395 300407\\n151614 710197\\n\",\n    \"501107\\n8073 390048\\n190494 647328\\n274071 376923\\n\",\n    \"200\\n50 50\\n100 100\\n50 50\\n\",\n    \"14\\n1 100\\n1 100\\n8 9\\n\",\n    \"300\\n200 400\\n50 100\\n40 80\\n\",\n    \"10\\n3 6\\n3 6\\n3 6\\n\",\n    \"14\\n3 6\\n3 6\\n3 6\\n\",\n    \"17\\n3 6\\n3 6\\n3 6\\n\",\n    \"1000000\\n300000 600000\\n300000 600000\\n300000 600000\\n\",\n    \"1400000\\n300000 600000\\n300000 600000\\n300000 600000\\n\",\n    \"1700000\\n300000 600000\\n300000 600000\\n300000 600000\\n\",\n    \"561\\n400 400\\n80 80\\n81 81\\n\",\n    \"2000\\n100 1000\\n1 1\\n1 2000\\n\",\n    \"1000002\\n1 1000000\\n1 1000000\\n999999 1000000\\n\",\n    \"1000002\\n1 1000000\\n1 1000000\\n1000000 1000000\\n\"\n  ],\n  \"outputs\": [\n    \"1 2 3 \\n\",\n    \"2 3 5 \\n\",\n    \"2 2 2 \\n\",\n    \"5 40 10 \\n\",\n    \"1 1 1 \\n\",\n    \"1 1 1 \\n\",\n    \"300 300 400 \\n\",\n    \"1000000 1000000 1000000 \\n\",\n    \"5 3 3 \\n\",\n    \"5 4 3 \\n\",\n    \"5 5 3 \\n\",\n    \"1000000 1000000 1000000 \\n\",\n    \"48 1 1 \\n\",\n    \"196 237 846 \\n\",\n    \"861 96 632 \\n\",\n    \"987 483 645 \\n\",\n    \"458 34 149 \\n\",\n    \"539 425 691 \\n\",\n    \"336 693 448 \\n\",\n    \"619 190 898 \\n\",\n    \"515 845 169 \\n\",\n    \"994 407 142 \\n\",\n    \"676 360 71 \\n\",\n    \"999930 426731 202618 \\n\",\n    \"524371 500608 208610 \\n\",\n    \"183628 414261 81226 \\n\",\n    \"277192 770798 76651 \\n\",\n    \"620061 62224 79370 \\n\",\n    \"476134 954809 743534 \\n\",\n    \"990776 498952 162979 \\n\",\n    \"891429 523869 650231 \\n\",\n    \"832833 487892 381818 \\n\",\n    \"150018 126478 224611 \\n\",\n    \"967352 209833 452094 \\n\",\n    \"157021 684356 392212 \\n\",\n    \"430721 70261 178133 \\n\",\n    \"734250 288242 102149 \\n\",\n    \"325539 417576 18540 \\n\",\n    \"791072 495957 887448 \\n\",\n    \"638522 89287 924898 \\n\",\n    \"608515 842116 614898 \\n\",\n    \"996578 300407 405558 \\n\",\n    \"36542 190494 274071 \\n\",\n    \"50 100 50 \\n\",\n    \"5 1 8 \\n\",\n    \"210 50 40 \\n\",\n    \"4 3 3 \\n\",\n    \"6 5 3 \\n\",\n    \"6 6 5 \\n\",\n    \"400000 300000 300000 \\n\",\n    \"600000 500000 300000 \\n\",\n    \"600000 600000 500000 \\n\",\n    \"400 80 81 \\n\",\n    \"1000 1 999 \\n\",\n    \"2 1 999999 \\n\",\n    \"1 1 1000000 \\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/557/A",
  "starter_code": ""
}