{
  "task_id": "APPS/259",
  "problem_id": 259,
  "prompt": "It is raining heavily. But this is the first day for Serval, who just became 3 years old, to go to the kindergarten. Unfortunately, he lives far from kindergarten, and his father is too busy to drive him there. The only choice for this poor little boy is to wait for a bus on this rainy day. Under such circumstances, the poor boy will use the first bus he sees no matter where it goes. If several buses come at the same time, he will choose one randomly.\n\nServal will go to the bus station at time $t$, and there are $n$ bus routes which stop at this station. For the $i$-th bus route, the first bus arrives at time $s_i$ minutes, and each bus of this route comes $d_i$ minutes later than the previous one.\n\nAs Serval's best friend, you wonder which bus route will he get on. If several buses arrive at the same time, you can print any of them.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers $n$ and $t$ ($1\\leq n\\leq 100$, $1\\leq t\\leq 10^5$)\u00a0\u2014 the number of bus routes and the time Serval goes to the station. \n\nEach of the next $n$ lines contains two space-separated integers $s_i$ and $d_i$ ($1\\leq s_i,d_i\\leq 10^5$)\u00a0\u2014 the time when the first bus of this route arrives and the interval between two buses of this route.\n\n\n-----Output-----\n\nPrint one number\u00a0\u2014 what bus route Serval will use. If there are several possible answers, you can print any of them.\n\n\n-----Examples-----\nInput\n2 2\n6 4\n9 5\n\nOutput\n1\n\nInput\n5 5\n3 3\n2 5\n5 6\n4 9\n6 1\n\nOutput\n3\n\nInput\n3 7\n2 2\n2 3\n2 4\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example, the first bus of the first route arrives at time $6$, and the first bus of the second route arrives at time $9$, so the first route is the answer.\n\nIn the second example, a bus of the third route arrives at time $5$, so it is the answer.\n\nIn the third example, buses of the first route come at times $2$, $4$, $6$, $8$, and so fourth, buses of the second route come at times $2$, $5$, $8$, and so fourth and buses of the third route come at times $2$, $6$, $10$, and so on, so $1$ and $2$ are both acceptable answers while $3$ is not.",
  "solutions": "[\"# AC\\nimport sys\\n\\n\\nclass Main:\\n    def __init__(self):\\n        self.buff = None\\n        self.index = 0\\n\\n    def __next__(self):\\n        if self.buff is None or self.index == len(self.buff):\\n            self.buff = sys.stdin.readline().split()\\n            self.index = 0\\n        val = self.buff[self.index]\\n        self.index += 1\\n        return val\\n\\n    def next_int(self):\\n        return int(next(self))\\n\\n    def cal(self, s):\\n        if len(s) == 1:\\n            return s[0]\\n        if s[0] == 0:\\n            return self.cal(s[1:])\\n        v = 1\\n        for c in s:\\n            v *= c\\n        return v\\n\\n    def solve(self):\\n        n = self.next_int()\\n        t = self.next_int()\\n        ii = 0\\n        tt = 10000000\\n        for i in range(0, n):\\n            fr = self.next_int()\\n            d = self.next_int()\\n            if fr < t:\\n                fr += (t - fr + d - 1) // d * d\\n            if fr < tt:\\n                tt = fr\\n                ii = i\\n        print(ii + 1)\\n\\n\\ndef __starting_point():\\n    Main().solve()\\n\\n__starting_point()\", \"n, t = list(map(int, input().split()))\\nnearest_t = 200000\\nans = 0\\nfor i in range(n):\\n    s, d = list(map(int, input().split()))\\n    if s >= t and s < nearest_t:\\n        nearest_t = s\\n        ans = i + 1\\n    elif s < t:\\n        k = (t - s) // d\\n        if (t - s) % d:\\n            k += 1\\n        cur_t = s + d * k\\n        if cur_t < nearest_t:\\n            nearest_t = cur_t\\n            ans = i + 1\\nprint(ans)\\n\", \"import sys\\nfrom math import ceil\\n\\ninput = sys.stdin.readline\\n\\nn, t = map(int, input().split())\\n\\nchoose = []\\n\\nfor i in range(1, n+1):\\n    a, b = map(int, input().split())\\n    if a < t:\\n        a += ceil((t-a)/b) * b\\n    \\n    choose.append((a-t, i))\\nchoose.sort()\\n\\nprint(choose[0][1])\", \"def main():\\n    n, t = map(int, input().split())\\n    mi = 1000000\\n    ans = 0\\n    for i in range(n):\\n        s, d = map(int, input().split())\\n        L = -1\\n        R = 1000000\\n        while R - L != 1:\\n            M = L + R >> 1\\n            if s + d * M < t:\\n                L = M\\n            else:\\n                R = M\\n        if mi > s + d * R:\\n            mi = s + d * R\\n            ans = i + 1\\n    print(ans)\\n    return 0\\nmain()\", \"\\nn,t=[int(k) for k in input().split(\\\" \\\")]\\nmw=100000000000000\\nnbest=-1\\n\\nfor i in range(n):\\n    s,d=[int(k) for k in input().split(\\\" \\\")]\\n    if t<s:\\n        w=s-t\\n    else:\\n        w=(d-(t-s))%d\\n    #print(s,d,w,mw,nbest)\\n    if w<mw:\\n        mw=w\\n        nbest=i+1\\nprint(nbest)\\n\", \"from sys import stdin, stdout\\nn,t=map(int,input().split())\\ntime=1000000\\nbusroute=0\\nimport math\\nfor i in range(n):\\n         x,y=map(int,input().split())\\n         if(t<=x):\\n                  curr=x\\n         else:\\n                  curr=math.ceil((t-x)/y)*y +x\\n         if(curr<time):\\n                  time=curr\\n                  busroute=i+1\\nprint(busroute)\", \"N, T = list(map(int, input().split()))\\n\\nans = 0\\ncurM = None\\nfor n in range(N):\\n    s, d = list(map(int, input().split()))\\n    if T <= s or (T - s) % d == 0:\\n        s = s\\n    else:\\n        incre = ((T - s) // d + 1) * d\\n        s += incre\\n    if curM == None:\\n        curM = s\\n        \\n    else:\\n        if curM > s:\\n            ans = n\\n            curM = s\\nprint(ans + 1) \\n        \\n\", \"N, T = list(map(int, input().split()))\\nmi = 10**100\\nfor i in range(N):\\n    s, d = list(map(int, input().split()))\\n    if s >= T:\\n        a = s - T\\n    else:\\n        a = (s - T) % d\\n    if a < mi:\\n        mi = a\\n        ans = i + 1\\nprint(ans)\\n\", \"from math import sqrt, ceil, floor\\nfrom sys import stdin, stdout\\nfrom heapq import heapify, heappush, heappop\\nimport string\\nimport bisect  \\n\\n\\nn, t = list(map(int, stdin.readline().split()))\\nans = 1\\nans_t = 9999999\\nfor i in range(n):\\n    s, d = list(map(int, stdin.readline().split()))\\n    if s < t:\\n        s = s + ceil((t - s) / d) * d\\n    if ans_t > s:\\n        ans = i + 1\\n        ans_t = s\\nprint(ans)\\n\", \"n, t = list(map(int, input().split()))\\nans = 10**6\\nansi = 0\\nfor i in range(n):\\n    s, d = list(map(int, input().split()))\\n    s = max(0, t - s + d - 1) // d * d + s\\n    # print(s)\\n    if ans > s:\\n        ans = s\\n        ansi = i\\nprint(ansi+1)\\n\", \"n, t = map(int, input().split())\\nres = [float('inf'), 0]\\nfor i in range(1, n + 1):\\n    s, d = map(int, input().split())\\n    x = max((t - s + d - 1) // d, 0)\\n    v = s + d * x\\n    # print(i, x, v)\\n    if res[0] > v:\\n        res = [v, i]\\nprint(res[1])\", \"n,t=[int(i) for i in input().split()]\\nsd =[[int(i) for i in input().split()] for j in range(n)]\\n\\nres = -1\\nbest = 10**10\\n\\nfor i in range(n):\\n    s,d=sd[i]\\n    if t<=s:\\n        if s<best:\\n            best=s\\n            res=i\\n    else:\\n        left = t-s\\n        times = left//d\\n        if left%d!=0:\\n            times+=1\\n        s+=d*times\\n        if s<best:\\n            best=s\\n            res=i\\nprint(res+1)\\n\", \"N, T = map(int, input().split())\\nans = 10**10\\nAns = None\\nfor i in range(1, N+1):\\n    a, b = map(int, input().split())\\n    if a >= T:\\n        if a < ans:\\n            Ans = i\\n            ans = a\\n    else:\\n        k = -((-(T-a))//b)\\n        if a + k*b < ans:\\n            Ans = i\\n            ans = a + k*b\\nprint(Ans)\", \"n, t = map(int, input().strip().split())\\nmn = 10000000\\nnum = 0\\nfor i in range(n):\\n    s,d = map(int, input().strip().split())\\n    temp = 0\\n    if s >= t:\\n        temp= s - t\\n    else:\\n        g = t - s\\n        md = g % d\\n        if md != 0:\\n            temp = d - md\\n        else:\\n            temp = 0\\n    if temp < mn:\\n        mn = temp\\n        num = i+1\\nprint(num)\", \"kk=lambda:map(int,input().split())\\n# k2=lambda:map(lambda x:int(x)-1, input().split())\\nll=lambda:list(kk())\\nn,t = kk()\\nmv,j = 10000000000,-1\\nfor i in range(n):\\n\\ts,d = kk()\\n\\twhile s < t: s+=d\\n\\tif s < mv: mv,j = s,i\\nprint(j+1)\", \"N, T = list(map(int, input().split()))\\nbt = -1\\nbr = -1\\nfor n in range(N):\\n    s, d = list(map(int, input().split()))\\n    if s >= T:\\n        a = s\\n    else:\\n        a = (T-s+d-1) // d\\n        a = s+d*a\\n    if bt == -1 or a < bt:\\n        bt = a\\n        br = n+1\\nprint(br)\\n\", \"# -*- coding: utf-8 -*-\\n# @Time    : 2019/4/13 22:05\\n# @Author  : LunaFire\\n# @Email   : gilgemesh2012@gmail.com\\n# @File    : A. Serval and Bus.py\\n\\nimport math\\n\\n\\ndef main():\\n    n, t = list(map(int, input().split()))\\n    ret, best_time = 0, float('inf')\\n    for i in range(n):\\n        s, d = list(map(int, input().split()))\\n        if s < t:\\n            k = int(math.ceil((t - s) / d))\\n            s += k * d\\n        if s < best_time:\\n            ret = i + 1\\n            best_time = s\\n    print(ret)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n,t=map(int,input().split())\\nl=[]\\nfor i in range(n):\\n    s,d=map(int,input().split())\\n    if s<t:\\n        if (t-s)%d==0:q=(t-s)//d\\n        else:q=(t-s)//d+1\\n        l.append([s+q*d,i+1])\\n    else:l.append([s,i+1])\\nl.sort(key=lambda x:x[0])\\nprint(l[0][1])\", \"import math\\n\\ndef main():\\n    n,t = list(map(int,input().split()))\\n    buses = []\\n    min_ans = float('inf')\\n    index = -1\\n    for i in range(n):\\n        s,d = list(map(int,input().split()))\\n        if s >= t:\\n            k = 0\\n        else:\\n            k = math.ceil((t-s)/d)\\n        wait = s+(k*d)\\n        ans = wait-t\\n        if ans < min_ans:\\n            min_ans = ans\\n            index = i+1\\n\\n    print(index)\\n\\n\\nmain()\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 2\\n6 4\\n9 5\\n\",\n    \"5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\\n\",\n    \"3 7\\n2 2\\n2 3\\n2 4\\n\",\n    \"1 1\\n100000 1\\n\",\n    \"1 100000\\n99999 100000\\n\",\n    \"23 48933\\n37408 25138\\n92539 90065\\n54031 8785\\n16124 78360\\n21816 61694\\n7915 59672\\n63840 38545\\n43257 33121\\n24419 1879\\n54154 60377\\n85518 11599\\n19863 72635\\n79717 38348\\n56364 70707\\n19039 5526\\n65706 23396\\n54597 86600\\n4614 82562\\n85239 8755\\n55688 35736\\n25894 50938\\n60749 76228\\n34299 48149\\n\",\n    \"4 26378\\n25074 97197\\n56308 49525\\n92863 16363\\n20209 26816\\n\",\n    \"3 85653\\n65234 91014\\n77378 96540\\n74559 98351\\n\",\n    \"6 14690\\n19559 99872\\n17230 93196\\n13907 95098\\n19149 90749\\n12309 92818\\n11087 93759\\n\",\n    \"37 99816\\n19935 98486\\n13473 97526\\n12932 94864\\n12400 98868\\n13485 96232\\n10902 93340\\n10315 93206\\n14926 98755\\n13524 99060\\n10391 94409\\n14740 94040\\n16968 94901\\n18543 98563\\n16376 96008\\n16802 95903\\n19742 97400\\n10380 97416\\n13674 91688\\n16347 99505\\n17541 91909\\n19573 93640\\n11353 96027\\n10659 99302\\n19752 94125\\n16000 99135\\n12357 99897\\n14255 98774\\n19128 97281\\n15921 99054\\n16403 95692\\n11945 91443\\n15635 95388\\n15628 94580\\n17994 99094\\n17193 93128\\n15775 91876\\n19496 92015\\n\",\n    \"21 95703\\n12848 92619\\n17923 92006\\n13650 99688\\n10518 93442\\n16275 99752\\n11924 98334\\n13605 99756\\n15713 93878\\n11822 98771\\n16759 97491\\n16458 95696\\n13383 99913\\n19776 91284\\n18727 99694\\n18855 95877\\n10599 96362\\n16216 95559\\n13064 98966\\n19205 95522\\n10963 97589\\n18854 99207\\n\",\n    \"30 99189\\n14400 91411\\n19296 99443\\n16233 99602\\n17062 97826\\n16466 91899\\n18575 98230\\n19961 94078\\n10789 96444\\n10164 98164\\n13180 90699\\n13833 91208\\n13637 92329\\n12482 98403\\n18610 97676\\n13887 94748\\n18025 91381\\n13184 93794\\n19975 92729\\n12025 91936\\n14172 98272\\n11755 97941\\n13500 98140\\n12349 91266\\n10373 90073\\n19787 96482\\n18700 94140\\n13744 91321\\n18354 92643\\n10005 98831\\n16556 98996\\n\",\n    \"21 49369\\n97436 3\\n92827 14\\n98289 5\\n99404 4\\n90643 8\\n99701 10\\n93498 17\\n97669 1\\n98915 11\\n98091 19\\n95398 15\\n99581 1\\n96054 19\\n91808 9\\n92253 19\\n94866 13\\n90008 8\\n90895 18\\n91001 12\\n93741 14\\n93738 3\\n\",\n    \"10 97\\n92046 16\\n97376 17\\n97672 4\\n99176 17\\n96777 20\\n93319 13\\n95660 20\\n92136 8\\n99082 16\\n95403 17\\n\",\n    \"10 99038\\n97786 42218\\n38828 27896\\n58049 50075\\n14935 46788\\n89852 38289\\n38464 36741\\n9413 12603\\n67961 40855\\n2565 61406\\n72007 48904\\n\",\n    \"4 96959\\n25074 97197\\n56308 49525\\n92863 16363\\n20209 26816\\n\",\n    \"2 5\\n4 3\\n3 3\\n\",\n    \"2 7\\n4 3\\n3 3\\n\",\n    \"2 7\\n4 4\\n3 3\\n\",\n    \"2 6\\n4 3\\n3 3\\n\",\n    \"5 100000\\n99999 100000\\n99998 100000\\n99997 100000\\n99996 100000\\n99995 100000\\n\",\n    \"1 100000\\n9999 100000\\n\",\n    \"2 100000\\n99999 11\\n99999 10\\n\",\n    \"2 100000\\n99999 10001\\n99999 10000\\n\",\n    \"2 20\\n2 9\\n19 2\\n\",\n    \"2 6\\n4 10\\n4 8\\n\",\n    \"2 9\\n11 1\\n5 2\\n\",\n    \"2 2\\n3 4\\n1 1\\n\",\n    \"2 4\\n2 3\\n1 1\\n\",\n    \"2 6\\n2 2\\n5 2\\n\",\n    \"2 3\\n2 5\\n1 4\\n\",\n    \"2 8\\n2 4\\n2 2\\n\",\n    \"2 5\\n6 1\\n3 2\\n\",\n    \"1 4\\n2 2\\n\",\n    \"2 8\\n2 4\\n2 3\\n\",\n    \"2 11\\n1 2\\n12 5\\n\",\n    \"2 6\\n5 5\\n9 1\\n\",\n    \"2 8\\n4 6\\n7 1\\n\",\n    \"2 9999\\n99999 99999\\n30000 30000\\n\",\n    \"2 100\\n101 1\\n50 10\\n\",\n    \"2 5\\n4 100\\n15 10\\n\",\n    \"1 100000\\n99999 99999\\n\",\n    \"2 5\\n1 2\\n6 1\\n\",\n    \"2 4\\n2 2\\n5 1\\n\",\n    \"2 11\\n5 5\\n13 5\\n\",\n    \"2 101\\n102 69\\n1 5\\n\",\n    \"2 11\\n6 4\\n9 3\\n\",\n    \"2 5\\n3 10\\n2 10\\n\",\n    \"3 7\\n3 10000\\n2 20000\\n50000 3\\n\",\n    \"2 5\\n8 10\\n1 8\\n\",\n    \"2 9\\n10 1\\n4 5\\n\",\n    \"2 100000\\n99999 99999\\n99997 6\\n\",\n    \"2 5\\n4 6\\n6 1\\n\",\n    \"2 3\\n1 2\\n4 4\\n\",\n    \"3 3\\n4 1\\n2 2\\n1 2\\n\",\n    \"2 10\\n7 4\\n12 1\\n\",\n    \"2 11\\n1 10\\n2 10\\n\",\n    \"2 5\\n7 2\\n5 2\\n\",\n    \"2 3\\n1 2\\n4 5\\n\",\n    \"2 5\\n8 10\\n3 6\\n\",\n    \"2 9\\n7 5\\n8 5\\n\",\n    \"2 8\\n11 1\\n1 6\\n\",\n    \"1 100000\\n9999 9999\\n\",\n    \"2 10\\n1 4\\n2 4\\n\",\n    \"2 100000\\n99999 10\\n999 100000\\n\",\n    \"2 2\\n8 1\\n7 2\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"9\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"31\\n\",\n    \"4\\n\",\n    \"24\\n\",\n    \"17\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1153/A",
  "starter_code": ""
}