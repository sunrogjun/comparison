{
  "task_id": "APPS/447",
  "problem_id": 447,
  "prompt": "Consider the decimal presentation of an integer. Let's call a number d-magic if digit d appears in decimal presentation of the number on even positions and nowhere else.\n\nFor example, the numbers 1727374, 17, 1 are 7-magic but 77, 7, 123, 34, 71 are not 7-magic. On the other hand the number 7 is 0-magic, 123 is 2-magic, 34 is 4-magic and 71 is 1-magic.\n\nFind the number of d-magic numbers in the segment [a, b] that are multiple of m. Because the answer can be very huge you should only find its value modulo 10^9 + 7 (so you should find the remainder after dividing by 10^9 + 7).\n\n\n-----Input-----\n\nThe first line contains two integers m, d (1 \u2264 m \u2264 2000, 0 \u2264 d \u2264 9) \u2014 the parameters from the problem statement.\n\nThe second line contains positive integer a in decimal presentation (without leading zeroes).\n\nThe third line contains positive integer b in decimal presentation (without leading zeroes).\n\nIt is guaranteed that a \u2264 b, the number of digits in a and b are the same and don't exceed 2000.\n\n\n-----Output-----\n\nPrint the only integer a \u2014 the remainder after dividing by 10^9 + 7 of the number of d-magic numbers in segment [a, b] that are multiple of m.\n\n\n-----Examples-----\nInput\n2 6\n10\n99\n\nOutput\n8\n\nInput\n2 0\n1\n9\n\nOutput\n4\n\nInput\n19 7\n1000\n9999\n\nOutput\n6\n\n\n\n-----Note-----\n\nThe numbers from the answer of the first example are 16, 26, 36, 46, 56, 76, 86 and 96.\n\nThe numbers from the answer of the second example are 2, 4, 6 and 8.\n\nThe numbers from the answer of the third example are 1767, 2717, 5757, 6707, 8797 and 9747.",
  "solutions": "[\"#!/usr/bin/env python3\\n\\n\\n\\ndef addmod(left, right, modulo=1000000007):\\n    res = left + right\\n    if res >= modulo:\\n        res -= modulo\\n    return res\\n\\ndef counter(a, m, d):\\n    res = [0, ] * (2*m)\\n    res[0] = 1\\n    shift = 1\\n    for pos in range(len(a), 0, -1):\\n        ptype = pos & 1\\n        cur = int(a[pos-1])\\n        tres = [0, ] * (2*m)\\n        for i in range(10):\\n            if ptype==1 and i == d:\\n                continue\\n            if ptype==0 and i != d:\\n                continue\\n            k = (i * shift) % m\\n            for j in range(m):\\n                k2 = k*2\\n                j2 = j*2\\n                if i < cur:\\n                    tres[k2+0] = addmod(tres[k2+0], addmod(res[j2+0], res[j2+1]))\\n                elif i == cur:\\n                    tres[k2+0] = addmod(tres[k2+0], res[j2+0])\\n                    tres[k2+1] = addmod(tres[k2+1], res[j2+1])\\n                else:\\n                    tres[k2+1] = addmod(tres[k2+1], addmod(res[j2+0], res[j2+1]))\\n                k = k+1 if k+1<m else 0\\n        res = tres\\n        shift = (shift * 10) % m\\n    return res[0]\\n\\n\\ndef solver(ifs):\\n    m, d = list(map(int, ifs.readline().split()))\\n    a = ifs.readline().strip()\\n    b = ifs.readline().strip()\\n    res = counter(b, m, d)\\n    if a != '0':\\n        a = str(int(a) - 1)\\n        if len(a) < len(b):\\n            a = '0' + a\\n        modulo = 1000000007\\n        res = addmod(res, modulo - counter(a, m, d))\\n    print(res)\\n\\ndef main():\\n    import sys\\n    if sys.version_info.major == 3:\\n        from io import StringIO as StreamIO\\n    else:\\n         from io import BytesIO as StreamIO\\n    \\n    with StreamIO(sys.stdin.read()) as ifs, StreamIO() as ofs:\\n        _stdout = sys.stdout\\n        sys.stdout = ofs\\n        solver(ifs)\\n        sys.stdout = _stdout\\n        sys.stdout.write(ofs.getvalue())\\n    return 0\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"import sys\\n\\nm, d = list(map(int, input().split()))\\nmod = 10**9 + 7\\n\\n\\ndef solve(a: list):\\n    dp = [0]*m\\n    border = a[0] % m if a[0] != d else -1\\n    m10 = 10 % m\\n\\n    for i in range(a[0]):\\n        if i != d:\\n            dp[i % m] += 1\\n\\n    for i, digit in enumerate(a[1:], start=1):\\n        next_dp = [0]*m\\n\\n        if i & 1:\\n            t = d % m\\n            for j in range(m):\\n                next_dp[t] += dp[j]\\n                t = t + m10 if t + m10 < m else t + m10 - m\\n\\n            if border != -1:\\n                if d < digit:\\n                    next_dp[(border * 10 + d) % m] += 1\\n                    border = -1\\n                elif d == digit:\\n                    border = (border * 10 + d) % m\\n                else:\\n                    border = -1\\n        else:\\n            for j in range(m):\\n                if dp[j] == 0:\\n                    continue\\n                if dp[j] >= mod:\\n                    dp[j] -= mod\\n\\n                t = (j * 10 - 1) % m\\n                for k in range(10):\\n                    t += 1\\n                    if t == m:\\n                        t = 0\\n                    if k == d:\\n                        continue\\n                    next_dp[t] += dp[j]\\n                    if next_dp[t] >= mod:\\n                        next_dp[t] -= mod\\n\\n            if border != -1:\\n                for k in range(digit):\\n                    if k == d:\\n                        continue\\n                    next_dp[(border * 10 + k) % m] += 1\\n                if digit != d:\\n                    border = (border * 10 + digit) % m\\n                else:\\n                    border = -1\\n\\n        dp = next_dp\\n\\n    return dp[0] + (1 if border == 0 else 0)\\n\\n\\na = list(map(int, input()))\\nb = list(map(int, input()))\\na[-1] -= 1\\n\\nfor i in range(len(a)-1, 0, -1):\\n    if a[i] < 0:\\n        a[i] = 9\\n        a[i-1] -= 1\\n    else:\\n        break\\n\\nans = solve(b) - solve(a)\\nprint(ans % mod)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2 6\\n10\\n99\\n\",\n    \"2 0\\n1\\n9\\n\",\n    \"19 7\\n1000\\n9999\\n\",\n    \"9 4\\n33\\n52\\n\",\n    \"10 8\\n18\\n59\\n\",\n    \"43 3\\n587\\n850\\n\",\n    \"65 3\\n3436\\n3632\\n\",\n    \"850 8\\n55735\\n94089\\n\",\n    \"590 6\\n428671\\n715453\\n\",\n    \"1053 8\\n1539368\\n3362621\\n\",\n    \"477 9\\n3062053\\n6465858\\n\",\n    \"1901 9\\n1941695\\n3314270\\n\",\n    \"29 0\\n1649127\\n6241670\\n\",\n    \"566 3\\n6372451659957700362854162843720623142601337360014410221724168092176479911659703538545016668832338549\\n7969973326176891147525183958122002014921396842270051000646823226374743898663307171214245111949604186\\n\",\n    \"1286 5\\n1886373541983002858974907276497223649072414883083336663541044958378875954171855070620868427474284001\\n4050983123791059817478363830631049287126338893626273758612677264947268375965600848751800494833017145\\n\",\n    \"2 5\\n1762712\\n8121765\\n\",\n    \"2 2\\n12\\n12\\n\",\n    \"2 0\\n10\\n10\\n\",\n    \"2 6\\n46\\n46\\n\",\n    \"2 0\\n10\\n20\\n\",\n    \"2 9\\n10000000000\\n99999999999\\n\",\n    \"10 2\\n12300\\n99900\\n\",\n    \"5 5\\n5\\n5\\n\",\n    \"1 2\\n113548484131315415454546546467913135484841313154154\\n895458414564646646487131313118761454584145646466464\\n\",\n    \"2 2\\n12\\n14\\n\",\n    \"2 2\\n2934\\n4323\\n\",\n    \"2 4\\n1\\n9\\n\",\n    \"1 0\\n10\\n20\\n\",\n    \"7 7\\n7\\n7\\n\",\n    \"2 1\\n143\\n413\\n\",\n    \"1 4\\n1\\n9\\n\",\n    \"2 6\\n36\\n36\\n\",\n    \"4 4\\n24344\\n48880\\n\",\n    \"2 0\\n1000\\n9999\\n\",\n    \"3 9\\n39\\n39\\n\",\n    \"3 9\\n10\\n99\\n\",\n    \"1 0\\n10000\\n99999\\n\",\n    \"3 2\\n681563\\n828242\\n\",\n    \"1 5\\n454\\n667\\n\",\n    \"2 0\\n2\\n9\\n\",\n    \"2 6\\n7\\n9\\n\",\n    \"10 7\\n1\\n1\\n\",\n    \"6 0\\n1\\n6\\n\",\n    \"6 2\\n22\\n95\\n\",\n    \"28 1\\n102\\n898\\n\",\n    \"1 0\\n1\\n9\\n\",\n    \"1 1\\n1\\n9\\n\",\n    \"3 9\\n10\\n69\\n\",\n    \"1 0\\n1\\n1\\n\"\n  ],\n  \"outputs\": [\n    \"8\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"6\\n\",\n    \"0\\n\",\n    \"126\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"2025\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"262440\\n\",\n    \"70\\n\",\n    \"0\\n\",\n    \"970729981\\n\",\n    \"1\\n\",\n    \"18\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"0\\n\",\n    \"12\\n\",\n    \"8\\n\",\n    \"1\\n\",\n    \"29\\n\",\n    \"81\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"729\\n\",\n    \"48\\n\",\n    \"14\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"9\\n\",\n    \"8\\n\",\n    \"2\\n\",\n    \"1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/628/D",
  "starter_code": ""
}