{
  "task_id": "APPS/131",
  "problem_id": 131,
  "prompt": "There is a beautiful garden of stones in Innopolis.\n\nIts most beautiful place is the $n$ piles with stones numbered from $1$ to $n$.\n\nEJOI participants have visited this place twice. \n\nWhen they first visited it, the number of stones in piles was $x_1, x_2, \\ldots, x_n$, correspondingly. One of the participants wrote down this sequence in a notebook. \n\nThey visited it again the following day, and the number of stones in piles was equal to $y_1, y_2, \\ldots, y_n$. One of the participants also wrote it down in a notebook.\n\nIt is well known that every member of the EJOI jury during the night either sits in the room $108$ or comes to the place with stones. Each jury member who comes there either takes one stone for himself or moves one stone from one pile to another. We can assume that there is an unlimited number of jury members. No one except the jury goes to the place with stones at night.\n\nParticipants want to know whether their notes can be correct or they are sure to have made a mistake.\n\n\n-----Input-----\n\nThe first line of the input file contains a single integer $n$, the number of piles with stones in the garden ($1 \\leq n \\leq 50$).\n\nThe second line contains $n$ integers separated by spaces $x_1, x_2, \\ldots, x_n$, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the first time ($0 \\leq x_i \\leq 1000$).\n\nThe third line contains $n$ integers separated by spaces $y_1, y_2, \\ldots, y_n$, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the second time ($0 \\leq y_i \\leq 1000$).\n\n\n-----Output-----\n\nIf the records can be consistent output \"Yes\", otherwise output \"No\" (quotes for clarity).\n\n\n-----Examples-----\nInput\n5\n1 2 3 4 5\n2 1 4 3 5\n\nOutput\nYes\n\nInput\n5\n1 1 1 1 1\n1 0 1 0 1\n\nOutput\nYes\n\nInput\n3\n2 3 9\n1 7 9\n\nOutput\nNo\n\n\n\n-----Note-----\n\nIn the first example, the following could have happened during the night: one of the jury members moved one stone from the second pile to the first pile, and the other jury member moved one stone from the fourth pile to the third pile.\n\nIn the second example, the jury took stones from the second and fourth piles.\n\nIt can be proved that it is impossible for the jury members to move and took stones to convert the first array into the second array.",
  "solutions": "[\"n = int(input())\\na = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\n\\nc = sum(a)\\nd = sum(b)\\n\\nif c >= d:\\n    print('Yes')\\nelse:\\n    print('No')\", \"import sys, math, random\\nfrom fractions import gcd\\nfrom itertools import permutations\\n\\ndebug = 0\\nif debug:\\n    f = open(\\\"input.txt\\\", \\\"r\\\")\\n    input = f.readline\\nelse:\\n    input = sys.stdin.readline\\n\\ndef mp():\\n    return list(map(int, input().split()))\\n\\ndef _main():\\n    n = int(input())\\n    a = mp()\\n    b = mp()\\n    if sum(a) < sum(b):\\n        print(\\\"No\\\")\\n    else:\\n        print(\\\"Yes\\\")\\n\\n_main()\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\na = sum(a)\\nb = sum(b)\\n\\nif a < b:\\n    print(\\\"No\\\")\\nelse:\\n    print(\\\"Yes\\\")\", \"n = int(input())\\na = list(map(int,input().split()))\\nb = list(map(int,input().split()))\\nif sum(b) > sum(a):\\n    print(\\\"No\\\")\\nelse:\\n    print(\\\"Yes\\\")\", \"n = int(input())\\na = [int(v) for v in input().split()]\\nb = [int(v) for v in input().split()]\\n\\nprint([\\\"No\\\", \\\"Yes\\\"][sum(a) >= sum(b)])\\n\", \"n = int(input())\\n\\ndata_1 = list(map(int,input().split()))\\n\\n\\ndata_2 = list(map(int,input().split()))\\n\\nif sum(data_1) >= sum(data_2):\\n    print(\\\"Yes\\\")\\n\\nelse:\\n    print(\\\"No\\\")\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\n\\nif sum(a) >= sum(b):\\n    print(\\\"Yes\\\")\\nelse:\\n    print(\\\"No\\\")\\n\", \"n = int(input())\\nsx = sum(map(int, input().split()))\\nsy = sum(map(int, input().split()))\\nif sx >= sy:\\n    print('Yes')\\nelse:\\n    print('No')\", \"n=int(input())\\na=sum(list(map(int,input().split())))\\nb=sum(list(map(int,input().split())))\\nif(b<=a):\\n    print(\\\"Yes\\\")\\nelse:\\n    print(\\\"No\\\")\", \"def main():\\n    input()\\n    a = [int(x) for x in input().split()]\\n    b = [int(x) for x in input().split()]\\n\\n    if sum(a) >= sum(b):\\n        print('Yes')\\n    else:\\n        print('No')\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"\\nn=int(input())\\nx=list(map(int,input().split()))\\ny=list(map(int,input().split()))\\n\\nif sum(x)>=sum(y):\\n    print('Yes')\\nelse:\\n    print('No')\\n\\n\\n\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\ns1 = sum(a)\\ns2 = sum(b)\\nif s2>s1:\\n    print(\\\"No\\\")\\nelse:\\n    print('Yes')\", \"import sys\\nimport math\\nimport random\\n\\nn = int(input())\\n\\na = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\nsuma = 0\\nsumb = 0\\nfor elem in a:\\n    suma += elem\\nfor elem in b:\\n    sumb += elem\\n\\nif sumb <= suma:\\n    print('Yes')\\nelse:\\n    print('No')\\n\", \"n = int(input())\\na = sum([int(i) for i in input().split()])\\nb = sum([int(i) for i in input().split()])\\nif (a >= b):\\n    print('Yes')\\nelse:\\n    print('No')\", \"n = int(input())\\na = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\nif sum(b) <= sum(a):\\n    print('Yes')\\nelse:\\n    print('No')\", \"n=int(input())\\nl=list(map(int,input().strip().split()))\\nl1=list(map(int,input().strip().split()))\\nr=sum(l)\\nr1=sum(l1)\\nif (r1>r):\\n    print (\\\"No\\\")\\nelse:\\n    print (\\\"Yes\\\")\", \"n = int(input())\\narr1 = list(map(int, input().split()))\\narr2 = list(map(int, input().split()))\\nif sum(arr1) >= sum(arr2):\\n    print('Yes')\\nelse:\\n    print('No')\", \"n = int(input())\\nx = [int(s) for s in input().split()]\\ny = [int(s) for s in input().split()]\\ns1 = 0\\ns2 = 0\\nfor i in range(n):\\n    s1 += x[i]\\n    s2 += y[i]\\nif s2 > s1:\\n    print(\\\"No\\\")\\nelse:\\n    print(\\\"Yes\\\")\", \"n = int(input())\\na = [int(x) for x in input().split()]\\nb = [int(x) for x in input().split()]\\nsuma = 0\\nsumb = 0\\nfor x in a:\\n    suma += x\\nfor x in b:\\n    sumb += x\\nprint(\\\"Yes\\\" if suma >= sumb else \\\"No\\\")\"]",
  "input_output": "{\n  \"inputs\": [\n    \"5\\n1 2 3 4 5\\n2 1 4 3 5\\n\",\n    \"5\\n1 1 1 1 1\\n1 0 1 0 1\\n\",\n    \"3\\n2 3 9\\n1 7 9\\n\",\n    \"40\\n361 372 139 808 561 460 421 961 727 719 130 235 320 470 432 759 317 886 624 666 917 133 736 710 462 424 541 118 228 216 612 339 800 557 291 128 801 9 0 318\\n364 689 60 773 340 571 627 932 581 856 131 153 406 475 217 716 433 519 417 552 919 53 923 605 319 359 516 121 207 180 373 343 905 641 477 416 927 207 160 245\\n\",\n    \"45\\n246 523 714 431 266 139 591 246 845 818 805 198 70 620 166 478 87 849 415 228 957 59 190 332 632 14 451 857 221 638 837 222 970 643 19 172 39 185 903 342 750 265 241 968 876\\n460 389 541 164 324 52 246 107 826 864 693 132 10 697 429 434 99 950 164 85 972 157 327 337 592 241 350 962 130 673 967 373 657 923 456 347 394 76 743 407 724 117 268 741 918\\n\",\n    \"50\\n620 222 703 953 303 333 371 125 554 88 60 189 873 644 817 100 760 64 887 605 611 845 762 916 21 26 254 553 602 66 796 531 329 888 274 584 215 135 69 403 680 734 440 406 53 958 135 230 918 206\\n464 128 878 999 197 358 447 191 530 218 63 443 630 587 836 232 659 117 787 254 667 646 498 845 252 179 452 390 455 16 686 522 236 945 498 635 445 225 7 38 553 946 563 457 102 942 130 310 941 312\\n\",\n    \"40\\n361 372 139 808 561 460 421 961 727 719 130 235 320 470 432 759 317 886 624 666 917 133 736 710 462 424 541 118 228 216 612 339 800 557 291 128 801 9 0 318\\n29 469 909 315 333 412 777 490 492 431 908 412 187 829 453 595 896 817 755 914 34 890 583 691 544 969 733 132 802 170 67 68 370 146 856 184 275 785 928 798\\n\",\n    \"45\\n246 523 714 431 266 139 591 246 845 818 805 198 70 620 166 478 87 849 415 228 957 59 190 332 632 14 451 857 221 638 837 222 970 643 19 172 39 185 903 342 750 265 241 968 876\\n918 332 978 856 517 621 81 62 150 482 834 649 860 259 394 937 647 0 400 783 574 713 355 221 543 389 937 824 53 361 824 454 217 180 840 407 160 417 373 737 49 476 320 59 886\\n\",\n    \"50\\n620 222 703 953 303 333 371 125 554 88 60 189 873 644 817 100 760 64 887 605 611 845 762 916 21 26 254 553 602 66 796 531 329 888 274 584 215 135 69 403 680 734 440 406 53 958 135 230 918 206\\n494 447 642 337 839 128 971 105 915 739 803 8 848 253 554 186 338 656 238 106 89 13 622 777 663 669 360 451 461 639 403 255 570 648 996 618 55 409 733 230 533 226 774 559 161 184 933 308 554 161\\n\",\n    \"50\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n\",\n    \"1\\n633\\n609\\n\",\n    \"2\\n353 313\\n327 470\\n\",\n    \"3\\n835 638 673\\n624 232 266\\n\",\n    \"4\\n936 342 19 398\\n247 874 451 768\\n\",\n    \"5\\n417 666 978 553 271\\n488 431 625 503 978\\n\",\n    \"10\\n436 442 197 740 550 361 317 473 843 982\\n356 826 789 479 641 974 106 221 57 858\\n\",\n    \"15\\n702 593 763 982 263 48 487 759 961 80 642 169 778 621 764\\n932 885 184 230 411 644 296 351 112 940 73 707 296 472 86\\n\",\n    \"20\\n82 292 379 893 300 854 895 638 58 971 278 168 580 272 653 315 176 773 709 789\\n298 710 311 695 328 459 510 994 472 515 634 568 368 913 182 223 361 132 92 620\\n\",\n    \"25\\n349 443 953 126 394 160 63 924 795 450 572 513 338 33 768 34 955 737 874 731 329 16 377 318 125\\n56 39 740 846 938 851 459 538 617 664 268 981 315 2 23 76 974 417 786 816 207 227 870 385 958\\n\",\n    \"30\\n722 523 950 656 431 347 463 795 893 348 208 893 140 65 419 36 627 333 972 346 230 422 337 893 896 442 835 56 846 986\\n429 148 890 854 546 680 776 265 551 465 387 823 996 845 374 867 411 742 447 267 711 989 501 694 456 451 192 529 215 709\\n\",\n    \"35\\n607 674 142 278 135 34 13 80 629 448 875 856 518 446 161 376 406 288 764 289 643 347 164 515 73 39 126 413 848 788 653 651 67 320 655\\n717 5 441 833 869 107 620 329 877 536 753 593 610 811 360 42 46 996 635 96 301 565 190 99 570 168 528 355 830 392 356 106 211 405 607\\n\",\n    \"1\\n633\\n633\\n\",\n    \"2\\n353 313\\n344 322\\n\",\n    \"3\\n835 638 673\\n516 880 750\\n\",\n    \"4\\n936 342 19 398\\n807 250 199 439\\n\",\n    \"5\\n417 666 978 553 271\\n72 946 832 454 581\\n\",\n    \"10\\n436 442 197 740 550 361 317 473 843 982\\n788 683 32 402 305 396 823 206 739 967\\n\",\n    \"15\\n702 593 763 982 263 48 487 759 961 80 642 169 778 621 764\\n346 342 969 741 762 123 89 823 955 599 575 312 547 784 645\\n\",\n    \"20\\n82 292 379 893 300 854 895 638 58 971 278 168 580 272 653 315 176 773 709 789\\n370 433 505 670 178 892 948 864 252 906 45 275 891 185 432 12 43 270 951 953\\n\",\n    \"25\\n349 443 953 126 394 160 63 924 795 450 572 513 338 33 768 34 955 737 874 731 329 16 377 318 125\\n75 296 997 211 919 7 357 928 891 829 119 509 184 29 769 262 973 936 100 588 115 536 398 163 186\\n\",\n    \"30\\n722 523 950 656 431 347 463 795 893 348 208 893 140 65 419 36 627 333 972 346 230 422 337 893 896 442 835 56 846 986\\n914 569 671 995 728 188 135 588 943 433 368 615 218 38 810 484 468 128 785 149 398 587 174 881 875 477 737 181 752 821\\n\",\n    \"35\\n607 674 142 278 135 34 13 80 629 448 875 856 518 446 161 376 406 288 764 289 643 347 164 515 73 39 126 413 848 788 653 651 67 320 655\\n452 596 228 56 48 35 155 250 793 729 630 495 803 209 156 423 427 270 925 479 635 639 50 489 27 198 324 241 564 898 178 713 131 337 738\\n\",\n    \"1\\n1000\\n1000\\n\",\n    \"2\\n1000 1000\\n1000 1000\\n\",\n    \"3\\n1000 1000 1000\\n1000 1000 1000\\n\",\n    \"4\\n1000 1000 1000 1000\\n1000 1000 1000 1000\\n\",\n    \"5\\n1000 1000 1000 1000 1000\\n1000 1000 1000 1000 1000\\n\",\n    \"10\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n\",\n    \"15\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n\",\n    \"20\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n\",\n    \"25\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n\",\n    \"30\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n\",\n    \"35\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n\",\n    \"40\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n\",\n    \"45\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n\",\n    \"8\\n5 5 0 0 0 0 0 0\\n1 0 0 0 0 0 0 0\\n\",\n    \"1\\n50\\n1\\n\",\n    \"5\\n9 9 9 9 9\\n10 9 9 9 1\\n\",\n    \"6\\n3 4 2 5 6 3\\n2 3 2 5 6 3\\n\",\n    \"4\\n1 1 1 1\\n0 0 0 0\\n\",\n    \"3\\n3 3 3\\n1 0 0\\n\",\n    \"3\\n2 1 5\\n1 2 4\\n\",\n    \"3\\n2 4 5\\n1 2 3\\n\",\n    \"3\\n3 4 5\\n1 1 1\\n\",\n    \"2\\n5 3\\n2 4\\n\",\n    \"3\\n5 5 5\\n1 1 1\\n\",\n    \"1\\n11\\n9\\n\",\n    \"5\\n1 2 3 4 6\\n1 2 3 4 5\\n\",\n    \"50\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\",\n    \"3\\n3 4 4\\n3 5 4\\n\",\n    \"1\\n100\\n1\\n\",\n    \"1\\n300\\n1\\n\",\n    \"5\\n5 5 5 5 5\\n1 1 1 1 1\\n\",\n    \"3\\n1000 1000 1000\\n0 0 0\\n\",\n    \"1\\n3\\n2\\n\",\n    \"2\\n5 5\\n1 1\\n\",\n    \"2\\n10 1\\n1 9\\n\",\n    \"5\\n3 3 3 3 3\\n2 2 2 2 2\\n\",\n    \"1\\n10\\n5\\n\",\n    \"5\\n2 3 4 5 6\\n0 0 0 0 4\\n\",\n    \"2\\n3 3\\n2 2\\n\",\n    \"1\\n100\\n0\\n\",\n    \"5\\n2 3 4 5 1\\n1 1 3 4 5\\n\",\n    \"3\\n10 10 1\\n0 0 2\\n\",\n    \"5\\n2 3 4 5 6\\n0 0 0 0 19\\n\",\n    \"1\\n1000\\n0\\n\",\n    \"1\\n1\\n5\\n\",\n    \"4\\n1 1 1 1\\n0 0 0 3\\n\",\n    \"5\\n2 3 4 5 1\\n1 1 1 1 1\\n\",\n    \"1\\n6\\n1\\n\",\n    \"5\\n4 5 3 6 7\\n1 1 4 4 5\\n\",\n    \"2\\n500 500\\n1 1\\n\",\n    \"1\\n10\\n1\\n\",\n    \"1\\n1\\n1\\n\",\n    \"3\\n2 4 2\\n4 3 0\\n\",\n    \"1\\n0\\n0\\n\",\n    \"1\\n7\\n3\\n\",\n    \"3\\n4 5 6\\n3 2 1\\n\",\n    \"5\\n1 2 3 4 5\\n0 0 0 0 0\\n\",\n    \"1\\n2\\n1\\n\",\n    \"3\\n3 3 3\\n1 1 1\\n\"\n  ],\n  \"outputs\": [\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"No\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\",\n    \"Yes\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1013/A",
  "starter_code": ""
}