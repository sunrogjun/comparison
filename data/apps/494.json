{
  "task_id": "APPS/494",
  "problem_id": 494,
  "prompt": "n children are standing in a circle and playing a game. Children's numbers in clockwise order form a permutation a_1, a_2, ..., a_{n} of length n. It is an integer sequence such that each integer from 1 to n appears exactly once in it.\n\nThe game consists of m steps. On each step the current leader with index i counts out a_{i} people in clockwise order, starting from the next person. The last one to be pointed at by the leader becomes the new leader.\n\nYou are given numbers l_1, l_2, ..., l_{m} \u2014 indices of leaders in the beginning of each step. Child with number l_1 is the first leader in the game. \n\nWrite a program which will restore a possible permutation a_1, a_2, ..., a_{n}. If there are multiple solutions then print any of them. If there is no solution then print -1.\n\n\n-----Input-----\n\nThe first line contains two integer numbers n, m (1 \u2264 n, m \u2264 100).\n\nThe second line contains m integer numbers l_1, l_2, ..., l_{m} (1 \u2264 l_{i} \u2264 n) \u2014 indices of leaders in the beginning of each step.\n\n\n-----Output-----\n\nPrint such permutation of n numbers a_1, a_2, ..., a_{n} that leaders in the game will be exactly l_1, l_2, ..., l_{m} if all the rules are followed. If there are multiple solutions print any of them. \n\nIf there is no permutation which satisfies all described conditions print -1.\n\n\n-----Examples-----\nInput\n4 5\n2 3 1 4 4\n\nOutput\n3 1 2 4 \n\nInput\n3 3\n3 1 2\n\nOutput\n-1\n\n\n\n-----Note-----\n\nLet's follow leadership in the first example:   Child 2 starts.  Leadership goes from 2 to 2 + a_2 = 3.  Leadership goes from 3 to 3 + a_3 = 5. As it's greater than 4, it's going in a circle to 1.  Leadership goes from 1 to 1 + a_1 = 4.  Leadership goes from 4 to 4 + a_4 = 8. Thus in circle it still remains at 4.",
  "solutions": "[\"\\nimport sys\\n#sys.stdin=open(\\\"data.txt\\\")\\ninput=sys.stdin.readline\\n\\nn,m=map(int,input().split())\\n\\nl=list(map(int,input().split()))\\nfor i in range(len(l)):\\n    l[i]-=1\\n\\nuse=[0]*n\\na=[0]*n\\nbad=0\\n\\nfor i in range(len(l)-1):\\n    # transfer l[i] to l[i+1]\\n    if a[l[i]] and a[l[i]]%n!=(l[i+1]-l[i])%n:\\n        bad=1\\n        break\\n    use[(l[i+1]-l[i])%n]=1\\n    a[l[i]]=(l[i+1]-l[i])%n\\n    if a[l[i]]==0: a[l[i]]=n\\n\\nif not bad:\\n    # fill in gaps\\n    for i in range(n):\\n        if a[i]==0:\\n            for j in range(1,n+1):\\n                if not use[j%n]:\\n                    a[i]=j\\n                    use[j%n]=1\\n                    break\\n    if sum(use)==n:\\n        print(\\\" \\\".join(map(str,a)))\\n    else:\\n        print(\\\"-1\\\")\\nelse:\\n    print(\\\"-1\\\")\", \"def calc(a,b,n):\\n\\tif(b<=a):\\n\\t\\treturn n-a+b\\n\\telse:\\n\\t\\treturn b-a\\n\\ninp=input().split()\\nn=int(inp[0])\\nm=int(inp[1])\\nseq=[]\\ninp=input().split()\\nfor val in inp:\\n\\tseq.append(int(val))\\nindices={}\\nflag=0\\nfor i in range(len(seq)-1):\\n\\thop=calc(seq[i],seq[i+1],n)\\n\\tif((seq[i] in indices) and indices[seq[i]]!=hop):\\n\\t\\tprint(\\\"-1\\\")\\n\\t\\tflag=1\\n\\t\\tbreak\\n\\tindices[seq[i]]=hop\\nl=[]\\nfor i in range(n+1):\\n\\tl.append(1)\\nflag2=0\\nif(flag==0):\\n\\tfor i in range(1,n+1):\\n\\t\\ttry:\\n\\t\\t\\tval=indices[i]\\n\\t\\texcept:\\n\\t\\t\\tcontinue\\n\\t\\tif(l[val]==1):\\n\\t\\t\\tl[val]=0\\n\\t\\telse:\\n\\t\\t\\tprint(\\\"-1\\\")\\n\\t\\t\\tflag2=1\\n\\t\\t\\tbreak\\n\\tif(flag2==0):\\n\\t\\tfor i in range(1,n+1):\\n\\t\\t\\ttry:\\n\\t\\t\\t\\tprint(indices[i],end=\\\" \\\")\\n\\t\\t\\texcept:\\n\\t\\t\\t\\tj=1\\n\\t\\t\\t\\twhile(l[j]==0):\\n\\t\\t\\t\\t\\tj+=1\\n\\t\\t\\t\\tprint(j,end=\\\" \\\")\\n\\t\\t\\t\\tl[j]=0\\n\\t\\tprint()\", \"n,m=map(int,input().split())\\nl=[]\\nl=list(map(int,input().split()))\\na=[-1]*(n+1)\\ns=set()\\nsorry = False\\nfor i in range(1,n+1):\\n    s.add(i)\\nfor i in range(m-1):\\n    temp = (l[i+1] + n - l[i])%n\\n    if(temp == 0):\\n        temp = n\\n    #print(temp)\\n    if(a[l[i]] == -1 and temp in s):\\n        a[l[i]] = temp\\n        s.remove(temp)\\n\\n    elif(a[l[i]] == temp):\\n        continue\\n    else:\\n        sorry=True\\n        break\\n\\nif(sorry):\\n    print(-1)\\nelse:\\n    ss = list(s)\\n    x=0\\n    for i in range(1,len(a)):\\n        if(a[i] == -1):\\n            a[i] = ss[x]\\n            x+=1\\n        print(a[i],\\\"\\\",end='')\\n\", \"def f(a,b,c):\\n\\tif (a-b+c)%c==0:\\n\\t\\treturn c\\n\\telse:\\n\\t\\treturn (a-b+c)%c\\nn,m=list(map(int,input().split()))\\nl=list(map(int,input().split()))\\na=[0 for i in range(n)]\\nfor i in range(m-1):\\n\\tif a[l[i]-1]==0 or a[l[i]-1]==f(l[i+1],l[i],n):\\n\\t\\ta[l[i]-1]=f(l[i+1],l[i],n)\\n\\telse:\\n\\t\\tprint(-1)\\n\\t\\treturn\\np=[i+1 for i in range(n)]\\ns=list(set(p)-set([i for i in a if i!=0]))\\nif len(s)!=a.count(0):\\n\\tprint(-1)\\n\\treturn\\nelse:\\n\\tfor i in range(n):\\n\\t\\tif a[i]==0:\\n\\t\\t\\ta[i]=s[-1]\\n\\t\\t\\ts.pop()\\nfor i in a:\\n\\tprint(i,end=' ')\", \"def main():\\n    n, m = map(int, input().split())\\n    l = list(map(int, input().split()))\\n    a = [0 for i in range(n)]\\n    for i in range(m - 1):\\n        d = l[i + 1] - l[i]\\n        if d <= 0:\\n            d += n\\n        if a[l[i] - 1] == 0:\\n            a[l[i] - 1] = d\\n        elif a[l[i] - 1] != d:\\n            return -1\\n    cnt = [0 for i in range(n + 1)]\\n    for i in a:\\n        cnt[i] += 1\\n    unused = set()\\n    for i in range(1, n + 1):\\n        if cnt[i] == 0:\\n            unused.add(i)\\n        elif cnt[i] > 1:\\n            return -1\\n    for i in range(n):\\n        if a[i] == 0:\\n            a[i] = unused.pop()\\n    return ' '.join(map(str, a))\\n\\nprint(main())\", \"n, m = list(map(int, input().split()))\\nl = list(map(int, input().split()))\\na = [0 for _ in range(n)]\\nf = [False for _ in range(n+1)]\\nans = True\\nfor i in range(m-1):\\n    for j in range(1, n+1):\\n        if (l[i] + j - 1)%n + 1 == l[i+1]:\\n            if a[l[i]-1] != 0 and a[l[i]-1] != j:\\n                ans = False\\n            else:\\n                if a[l[i]-1] == j:\\n                    break\\n                if f[j]:\\n                    ans = False\\n                f[j] = True\\n                a[l[i]-1] = j\\n            break\\nj = 1\\nfor i in range(n):\\n    if not a[i]:\\n        while j <= n and f[j]:\\n            j += 1\\n        a[i] = j\\n        f[j] = True\\nif ans:\\n    print(*a)\\nelse:\\n    print(-1)\\n\\n\\n\", \"n, m = [int(i) for i in input().split()]\\nl = [int(i) - 1 for i in input().split()]\\nans = [-1] * n\\nfor i in range(m - 1):\\n    t = (l[i + 1] - l[i]) % n\\n    if t == 0:\\n        t = n\\n    if ans[l[i]] != -1 and ans[l[i]] != t:\\n        print(-1)\\n        break\\n    ans[l[i]] = t\\nelse:\\n    s = set()\\n    for i in ans:\\n        if i != -1:\\n            s.add(i)\\n    c = 1\\n    for i in range(n):\\n        if ans[i] == -1:\\n            while c in s:\\n                c += 1\\n            ans[i] = c\\n            s.add(c)\\n\\n    if len(set(ans)) == n:\\n        print(' '.join([str(i) for i in ans]))\\n    else:\\n        print(-1)\", \"n, m = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nans = [0] * (n + 1)\\nfor i in range(m - 1):\\n\\tpot = (a[i + 1] - a[i] + n) % n\\n\\tif pot == 0: pot = n\\n\\tif ans[a[i]] == 0 or ans[a[i]] == pot: ans[a[i]] = pot\\n\\telse:\\n\\t\\tprint(-1)\\n\\t\\treturn\\nused = [False] * (n + 1)\\nfor i in ans:\\n\\tused[i] = True\\nfor i in range(1, n + 1):\\n\\tif ans[i] == 0:\\n\\t\\tfor j in range(1, n + 1):\\n\\t\\t\\tif not used[j]:\\n\\t\\t\\t\\tused[j] = True\\n\\t\\t\\t\\tans[i] = j\\n\\t\\t\\t\\tbreak\\nprint(' '.join(map(str, ans[1:])) if all(used[1:]) else -1)\\n\", \"n, m = map(int,input().split())\\nlm = list(map(int,input().split()))\\n\\nimpossible = False\\nan = [-1]*(n+1)\\nf = [False]*(n+1)\\nfor k in range(m-1):\\n    if an[lm[k]] < 0:\\n        for i in range(1,n+1):\\n            if f[i]:\\n                continue\\n            x = lm[k]+i\\n            if x > n:\\n                x -= n\\n            if lm[k+1] != x:\\n                continue\\n            an[lm[k]] = i\\n            f[i] = True\\n            break\\n        if an[lm[k]] < 0:\\n            impossible = True\\n            break\\n    else:\\n        x = lm[k]+an[lm[k]]\\n        if x > n:\\n            x -= n\\n        if lm[k+1] != x:\\n            impossible = True\\n            break\\n\\nif impossible:\\n    print(-1)\\nelse:\\n    for i in range(1,n+1):\\n        if an[i] > 0:\\n            continue\\n        for j in range(1,n+1):\\n            if f[j]:\\n                continue\\n            an[i] = j\\n            f[j] = True\\n            break\\n    print(*an[1:])\", \"n, m = list(map(int, input().split()))\\nl = [int(k) for k in input().split()]\\na = [0]*n\\nfor i in range(m-1):\\n    curLeader = l[i] - 1\\n    nextLeader = l[i+1] - 1\\n    jump = abs((nextLeader - curLeader) % n)\\n    if jump==0: jump = n\\n    a[curLeader] = jump\\n\\ndef reqNum(leader, jump):\\n    ans = (leader+jump)%n\\n    if(ans==0): ans = n\\n    return ans\\ndef simulate():\\n    for i in range(m-1):\\n        leader = l[i]\\n        jump = a[leader-1]\\n        if(not reqNum(leader, jump)==l[i+1]): return False\\n    return True\\n\\nif simulate():\\n    s = set(range(1,n+1)).difference(set(a))\\n    for i in range(n):\\n        if a[i]==0:\\n            a[i] = s.pop()\\n    t = sorted(a)\\n    if(t==list(range(1,n+1))): print(*a)\\n    else: print(-1)\\nelse: print(-1)\\n\", \"input_ar = list(map(int,input().rstrip().split(\\\" \\\")))\\nleaders = list(map(int,input().rstrip().split(\\\" \\\")))\\nnot_there_set = {i+1 for i in range(input_ar[0])}\\na_n_done = [False for i in range(input_ar[0])]\\na_n = [0 for i in range(input_ar[0])]\\npossible = True\\nfor i in range(len(leaders) - 1):\\n    diff = leaders[i + 1] - leaders[i]\\n    if diff <= 0:\\n        diff += input_ar[0]\\n    if a_n[leaders[i] - 1] is 0:\\n        if diff in a_n:\\n            possible = False\\n            break\\n        not_there_set.remove(diff)\\n        a_n[leaders[i] - 1] = diff\\n    elif a_n[leaders[i] - 1] is not diff:\\n        possible = False\\n        break\\n\\nif not possible:\\n    # print(a_n)\\n    print(-1)\\nelse:\\n    # print('a_n is : {}'.format(a_n))\\n    for i in range(len(a_n)):\\n        if a_n[i] is 0:\\n            if len(not_there_set) <= 0:\\n                possible = False\\n                break\\n            a_n[i] = not_there_set.pop()\\n    if not possible:\\n        print(-1)\\n    else:\\n        for a in a_n:\\n            print('{} '.format(a), end='')\\n        print()\", \"n, m = list(map(int, input().split()))\\nl = list(map(int, input().split()))\\nused = [False for _ in range(n + 1)]\\nans = [0 for _ in range(n)]\\nf = True\\nfor i in range(m - 1):\\n    d = ((l[i + 1] - l[i] + n - 1) % n) + 1\\n    if ans[l[i] - 1] == 0 and not used[d]:\\n        ans[l[i] - 1] = d\\n        used[d] = True\\n    elif ans[l[i] - 1] != d:\\n        f = False\\n        break\\n\\ns = 0\\nj = 1\\nfor i in range(n):\\n    while j < n and used[j]:\\n        j += 1\\n    if ans[i] == 0:\\n        ans[i] = j\\n        used[j] = True\\n    s += ans[i]\\n\\nif s != n * (n + 1) // 2:\\n    f = False\\n\\nidx = l[0] - 1\\nfor i in range(m):\\n    if idx + 1 != l[i]:\\n        f = False\\n        break\\n    idx += ans[idx]\\n    idx %= n\\n\\nif f:\\n    print(' '.join(list(map(str, ans))))\\nelse:\\n    print(-1)\\n\", \"n, m = [int(i) for i in input().split()]\\nl = [int(i) for i in input().split()]\\na = [0] * n\\n\\nused = [0] * (n + 1)\\ncnt = 0\\n\\nfor i in range(len(l)-1):\\n    z = l[i+1] - l[i] \\n    if z <= 0:\\n        z += n   \\n    if used[z] and a[l[i]-1] != z:\\n        print(-1)\\n        return\\n    a[l[i]-1] = z\\n    used[z] = 1\\n        \\nj = 1\\nfor i in range(len(a)):\\n    if a[i] == 0:\\n        while used[j]:\\n            j+=1\\n            if j > n:\\n                print(-1)\\n                return\\n        a[i] = j\\n        used[j] = 1\\n        \\nif all(a) and all(used[1:]):\\n    print(*a)\\nelse:\\n    print(-1)\\n        \\n\\n\\n\", \"def R():\\n    return list(map(int, input().split()))\\n\\nn, m = R()\\nl = list(R())\\n\\na = [None] * n\\nb = [False] * n\\n\\nc = set(range(1, n + 1))\\nfor i in range(m - 1):\\n    j = l[i] - 1\\n    d = l[i + 1] - l[i]\\n    if d <= 0:\\n        d += n\\n    if a[j] != d:\\n        if a[j] is not None or b[d - 1]:\\n            print(-1)\\n            return\\n        a[j] = d\\n        b[d - 1] = True\\n        c.remove(d)\\nfor i in range(n):\\n    if a[i] is None:\\n        a[i] = c.pop()\\n        \\nprint(*a)\\n\", \"def R():\\n    return list(map(int, input().split()))\\n\\nn, m = R()\\nl = list(R())\\n\\na = [None] * n\\nb = [False] * n\\n\\nc = set(range(1, n + 1))\\nfor i in range(m - 1):\\n    j = l[i] - 1\\n    d = l[i + 1] - l[i]\\n    if d <= 0:\\n        d += n\\n    if a[j] != d:\\n        if a[j] is not None or b[d - 1]:\\n            print(-1)\\n            break\\n        a[j] = d\\n        b[d - 1] = True\\n        c.remove(d)\\nelse:\\n    for i in range(n):\\n        if a[i] is None:\\n            a[i] = c.pop()            \\n    print(*a)\\n\", \"def R():\\n    return list(map(int, input().split()))\\n\\nn, m = R()\\nl = list(R())\\n\\na = [None] * n\\nb = [False] * n\\n\\nfor i in range(m - 1):\\n    j = l[i] - 1\\n    d = l[i + 1] - l[i]\\n    if d <= 0:\\n        d += n\\n    if a[j] != d:\\n        if a[j] is not None or b[d - 1]:\\n            print(-1)\\n            break\\n        a[j] = d\\n        b[d - 1] = True\\nelse:\\n    j = 0\\n    for i in range(n):\\n        if a[i] is None:\\n            while b[j]:\\n                j += 1\\n            a[i] = j + 1\\n            j += 1\\n    print(*a)\\n\", \"def R():\\n    return list(map(int, input().split()))\\n\\nn, m = R()\\nl = list(R())\\n\\na = [None] * n\\nb = [False] * n\\n\\nfor i in range(m - 1):\\n    j = l[i] - 1\\n    d = l[i + 1] - l[i]\\n    if d <= 0:\\n        d += n\\n    if a[j] != d:\\n        if a[j] is not None or b[d - 1]:\\n            print(-1)\\n            break\\n        a[j] = d\\n        b[d - 1] = True\\nelse:\\n    j = 0\\n    for i in range(n):\\n        if a[i] is None:\\n            while b[j]:\\n                j += 1\\n            j += 1\\n            a[i] = j\\n    print(*a)\\n\", \"R=lambda:list(map(int, input().split()))\\nn,m=R()\\nl=list(R())\\na=[None]*n\\nc =set(range(1, n + 1))\\nfor i in range(m-1):\\n    j=l[i]-1\\n    d=l[i+1]-l[i]\\n    if d<=0:\\n        d+=n\\n    if a[j]!=d:\\n        if a[j] is not None or d not in c:\\n            print(-1)\\n            return\\n        a[j]=d\\n        c.remove(d)\\nfor i in range(n):\\n    if a[i] is None:\\n        a[i]=c.pop()\\nprint(*a)\\n\", \"I = lambda: list(map(int, input().split()))\\nn, m = I()\\nl = list(I())\\n\\nres = [0] * (n + 1)\\nfor i in range(m-1):\\n    new = (l[i+1] - l[i]) if l[i+1] - l[i] > 0 else (l[i+1] - l[i] + n)\\n    if res[l[i]] and res[l[i]] != new:\\n        print(-1)\\n        return\\n    else:\\n        res[l[i]] = new\\n\\nwo0 = list(filter((0).__ne__, res))\\nif len(wo0) == len(set(wo0)):\\n    rest = set(range(1, n+1)) - set(wo0)\\n    res.pop(0)\\n    for x in rest:\\n        res[res.index(0)] = x\\n    print(*res)\\nelse:\\n    print(-1)\\n\\n\", \"\\nn, m = list(map(int, input().split()))\\nl = list(map(int, input().split()))\\n\\na = [-1] * n\\n\\nfor i in range(m - 1):\\n    p = l[i + 1] - l[i]\\n    if p <= 0: p += n\\n    if a[l[i] - 1] != -1 and a[l[i] - 1] != p:\\n        print(-1)\\n        return\\n    a[l[i] - 1] = p\\n\\ns = set(range(1, n + 1)) - set(i for i in a if i != -1)\\nfor i in range(len(a)):\\n    if a[i] == -1:\\n        a[i] = s.pop()\\n\\nif -1 in a or len(set(a)) != n:\\n    print(-1)\\nelse:\\n    print(*a)\\n\", \"R=lambda:list(map(int,input().split()))\\nn,m=R()\\nl=list(R())\\na=[None]*n\\nc =set(range(1, n + 1))\\nfor i in range(m-1):\\n    j=l[i]-1\\n    d=l[i+1]-l[i]\\n    if d<=0:\\n        d+=n\\n    if a[j]!=d:\\n        if a[j] or d not in c:\\n            print(-1)\\n            return\\n        a[j]=d\\n        c.remove(d)\\nfor i in range(n):\\n    if a[i] is None:\\n        a[i]=c.pop()\\nprint(*a)\\n\", \"R=lambda:list(map(int,input().split()))\\nn,m=R()\\nl=list(R())\\na=[None]*n\\nc=set(range(1, n + 1))\\nfor i in range(m-1):\\n    j=l[i]-1\\n    d=l[i+1]-l[i]\\n    if d<=0:\\n        d+=n\\n    if a[j]!=d:\\n        if a[j] or d not in c:\\n            print(-1)\\n            return\\n        a[j]=d\\n        c.remove(d)\\nfor i in range(n):\\n    if not a[i]:\\n        a[i]=c.pop()\\nprint(*a)\\n\", \"def main():\\n    n, m = [int(item) for item in input().split()]\\n    l = [int(item) for item in input().split()]\\n    l = [0] + l\\n    a = [0] * (n + 1)\\n    \\n    for i in range(1, m):\\n        curr = (l[i + 1] - l[i] - 1) % n + 1\\n        if a[l[i]] != 0 and curr != a[l[i]]:return -1\\n        a[l[i]] = curr\\n    #print(a)\\n    cnt = [0] * (n + 1)\\n        \\n    for i in range(1, n + 1):\\n        cnt[a[i]] += 1\\n        if a[i] != 0 and cnt[a[i]] > 1:\\n            return -1\\n\\n    if cnt[0] != 0:\\n        d = []\\n        for k in range(1, n + 1):\\n            if cnt[k] == 0:\\n                d.append(k)\\n        for i in range(1, n + 1):\\n            if a[i] == 0:\\n                a[i] = d[0]\\n                d.pop(0)\\n\\n    return \\\" \\\".join(str(x) for x in a[1:])\\n    \\nprint(main())\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4 5\\n2 3 1 4 4\\n\",\n    \"3 3\\n3 1 2\\n\",\n    \"1 100\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"6 8\\n2 5 4 2 5 4 2 5\\n\",\n    \"100 1\\n6\\n\",\n    \"10 5\\n7 7 9 9 3\\n\",\n    \"10 20\\n10 1 5 7 1 2 5 3 6 3 9 4 3 4 9 6 8 4 9 6\\n\",\n    \"20 15\\n11 19 1 8 17 12 3 1 8 17 12 3 1 8 17\\n\",\n    \"100 100\\n96 73 23 74 35 44 75 13 62 50 76 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63 29 45 24 63\\n\",\n    \"100 100\\n82 51 81 14 37 17 78 92 64 15 8 86 89 8 87 77 66 10 15 12 100 25 92 47 21 78 20 63 13 49 41 36 41 79 16 87 87 69 3 76 80 60 100 49 70 59 72 8 38 71 45 97 71 14 76 54 81 4 59 46 39 29 92 3 49 22 53 99 59 52 74 31 92 43 42 23 44 9 82 47 7 40 12 9 3 55 37 85 46 22 84 52 98 41 21 77 63 17 62 91\\n\",\n    \"20 20\\n1 20 2 19 3 18 4 17 5 16 6 15 7 14 8 13 9 12 10 11\\n\",\n    \"20 5\\n1 20 2 19 3\\n\",\n    \"19 19\\n1 19 2 18 3 17 4 16 5 15 6 14 7 13 8 12 9 11 10\\n\",\n    \"100 100\\n1 99 2 98 3 97 4 96 5 95 6 94 7 93 8 92 9 91 10 90 11 89 12 88 13 87 14 86 15 85 16 84 17 83 18 82 19 81 20 80 21 79 22 78 23 77 24 76 25 75 26 74 27 73 28 72 29 71 30 70 31 69 32 68 33 67 34 66 35 65 36 64 37 63 38 62 39 61 40 60 41 59 42 58 43 57 44 56 45 55 46 54 47 53 48 52 49 51 50 50\\n\",\n    \"51 18\\n8 32 24 19 1 29 49 24 39 33 5 37 37 26 17 28 2 19\\n\",\n    \"5 5\\n1 2 5 2 4\\n\",\n    \"6 6\\n1 2 1 1 3 6\\n\",\n    \"4 4\\n4 3 4 2\\n\",\n    \"3 3\\n2 2 3\\n\",\n    \"4 6\\n1 1 2 4 4 4\\n\",\n    \"9 4\\n8 2 8 3\\n\",\n    \"4 6\\n2 3 1 4 4 1\\n\",\n    \"2 3\\n1 1 2\\n\",\n    \"5 7\\n4 3 4 3 3 4 5\\n\",\n    \"2 9\\n1 1 1 1 2 1 1 1 1\\n\",\n    \"4 4\\n2 4 4 4\\n\",\n    \"3 3\\n1 1 3\\n\",\n    \"2 5\\n1 2 2 1 1\\n\",\n    \"4 4\\n1 4 1 3\\n\",\n    \"3 4\\n1 3 1 1\\n\",\n    \"4 4\\n1 4 1 1\\n\",\n    \"66 67\\n19 9 60 40 19 48 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5 58 5\\n\",\n    \"3 3\\n3 3 2\\n\",\n    \"27 28\\n8 18 27 24 20 8 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23 23\\n\",\n    \"4 3\\n1 1 2\\n\",\n    \"4 4\\n2 4 2 3\\n\",\n    \"2 3\\n2 2 1\\n\",\n    \"2 2\\n2 2\\n\",\n    \"3 4\\n2 3 3 1\\n\",\n    \"5 6\\n1 4 4 2 1 4\\n\",\n    \"4 3\\n2 3 4\\n\",\n    \"2 3\\n1 2 1\\n\",\n    \"10 4\\n5 6 5 7\\n\",\n    \"3 3\\n1 1 2\\n\",\n    \"4 5\\n1 4 1 3 2\\n\",\n    \"6 5\\n1 2 4 1 3\\n\"\n  ],\n  \"outputs\": [\n    \"3 1 2 4 \\n\",\n    \"-1\\n\",\n    \"1 \\n\",\n    \"1 3 2 4 5 6 \\n\",\n    \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"7 1 18 3 4 5 6 9 10 12 8 11 13 14 16 17 15 19 2 20 \\n\",\n    \"1 2 3 4 5 6 7 8 10 11 12 13 49 14 15 17 18 19 20 21 22 23 51 39 24 25 27 28 16 29 30 32 33 34 9 35 36 37 40 41 42 43 44 31 79 45 46 47 48 26 52 53 54 55 56 57 58 59 60 62 63 88 66 64 65 67 68 69 70 71 72 73 50 61 38 87 74 75 76 78 80 81 82 83 84 85 86 89 90 91 92 93 94 95 96 77 97 98 99 100 \\n\",\n    \"-1\\n\",\n    \"19 17 15 13 11 9 7 5 3 1 20 18 16 14 12 10 8 6 4 2 \\n\",\n    \"19 17 1 3 5 6 7 8 9 10 11 12 13 14 15 16 18 20 4 2 \\n\",\n    \"-1\\n\",\n    \"98 96 94 92 90 88 86 84 82 80 78 76 74 72 70 68 66 64 62 60 58 56 54 52 50 48 46 44 42 40 38 36 34 32 30 28 26 24 22 20 18 16 14 12 10 8 6 4 2 100 99 97 95 93 91 89 87 85 83 81 79 77 75 73 71 69 67 65 63 61 59 57 55 53 51 49 47 45 43 41 39 37 35 33 31 29 27 25 23 21 19 17 15 13 11 9 7 5 3 1 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1 2 3 4 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1 2 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/818/B",
  "starter_code": ""
}