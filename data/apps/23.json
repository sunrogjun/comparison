{
  "task_id": "APPS/23",
  "problem_id": 23,
  "prompt": "You are given two positive integer numbers a and b. Permute (change order) of the digits of a to construct maximal number not exceeding b. No number in input and/or output can start with the digit 0.\n\nIt is allowed to leave a as it is.\n\n\n-----Input-----\n\nThe first line contains integer a (1 \u2264 a \u2264 10^18). The second line contains integer b (1 \u2264 b \u2264 10^18). Numbers don't have leading zeroes. It is guaranteed that answer exists.\n\n\n-----Output-----\n\nPrint the maximum possible number that is a permutation of digits of a and is not greater than b. The answer can't have any leading zeroes. It is guaranteed that the answer exists.\n\nThe number in the output should have exactly the same length as number a. It should be a permutation of digits of a.\n\n\n-----Examples-----\nInput\n123\n222\n\nOutput\n213\n\nInput\n3921\n10000\n\nOutput\n9321\n\nInput\n4940\n5000\n\nOutput\n4940",
  "solutions": "[\"a = list(input())\\nb = int(input())\\na.sort()\\na = a[::-1]\\nprefix = \\\"\\\"\\nwhile(len(a) > 0):\\n\\tfor i in range(len(a)):\\n\\t\\tnum = prefix + a[i] + \\\"\\\".join(sorted(a[:i] + a[i + 1:]))\\n\\t\\tif (int(num) <= b):\\n\\t\\t\\tprefix += a[i]\\n\\t\\t\\ta = a[:i] + a[i+1:]\\n\\t\\t\\tbreak\\nprint(prefix)\\n\", \"fact_ = [1] * 50\\n\\n\\ndef fact(n):\\n    return fact_[n]\\n\\n\\ndef get_perm(n, k):\\n    if k > fact(n):\\n        exit(123)\\n\\n    if n == 1:\\n        return [1]\\n\\n    k -= 1\\n    res = []\\n    not_used = [i for i in range(1, n + 1)]\\n    size = fact(n - 1)\\n    for i in range(n):\\n        cnt = k // size\\n        res.append(not_used[cnt])\\n        not_used.pop(cnt)\\n        k %= size\\n        if i != n - 1:\\n            size //= (n - 1 - i)\\n    return res[::]\\n\\n\\ndef num_by_perm(x):\\n    nonlocal n, a\\n    v = get_perm(n, x)\\n    res = []\\n    for i in range(n):\\n        res.append(a[v[i] - 1])\\n    return int(''.join(res))\\n\\n\\ndef check(x):\\n    nonlocal n, a, b\\n    v = num_by_perm(x)\\n    if v > b:\\n        return False\\n    else:\\n        return True\\n\\n\\nfor i in range(1, 20):\\n    fact_[i] = fact_[i - 1] * i\\n\\n\\na = list(input())\\nb = int(input())\\nn = len(a)\\n\\na.sort()\\n\\nl = 1\\nr = fact(n) + 1\\nwhile r - l > 1:\\n    m = l + (r - l) // 2\\n    if check(m):\\n        l = m\\n    else:\\n        r = m\\n\\nprint(num_by_perm(l))\\n\", \"from bisect import *\\n\\na = sorted(input())\\nb = input()\\n\\nif len(a) < len(b):\\n    print(''.join(reversed(a)))\\n    return\\n\\nres = ''\\nlower = False\\nfor i in range(len(b)):\\n    # print('i = ', i)\\n    # print('a = ', a)\\n    for j in range(len(a) - 1, -1, -1):\\n        bb = b[i + 1 :]\\n        aa = a[:j] + a[j + 1:]\\n        if a[j] < b[i] or a[j] == b[i] and ''.join(aa) <= bb:\\n            res += a[j]\\n            a = aa\\n            break\\n    if res[-1] < b[i]:\\n        break\\n\\nprint(res + ''.join(reversed(a)))\", \"b = [int(i) for i in list(input())]\\na = [int(i) for i in list(input())]\\nif len(b) < len(a):\\n    print(''.join([str(i) for i in sorted(b, key=lambda x: -x)]))\\n    return\\nfrom collections import Counter\\nbs = Counter(b)\\nmp = 0\\nwhile mp < len(a) and bs[a[mp]] > 0:\\n    bs[a[mp]] -= 1\\n    mp += 1\\nif mp == len(a):\\n    print(''.join(str(i) for i in a))\\n    return\\n\\nms = 0\\nfor s in range(1, mp+1):\\n    bs = Counter(b)\\n    for i in range(s):\\n        bs[a[i]] -= 1\\n    nl = a[s] - 1\\n    while nl >= 0 and bs[nl] == 0:\\n        nl -= 1\\n    if nl == -1:\\n        continue\\n    else:\\n        ms = s\\nans = []\\nbs = Counter(b)\\nfor i in range(ms):\\n    bs[a[i]] -= 1\\n    ans.append(a[i])\\nnl = a[ms] - 1\\nwhile nl >= 0 and bs[nl] == 0:\\n    nl -= 1\\nans.append(nl)\\nbs[nl] -= 1\\nd1 = [[i for _ in range(bs[i])] for i in bs]\\nr = []\\nfor l in d1:\\n    r += l\\nr = sorted(r, key=lambda x: -x)\\nans += r\\nprint(''.join([str(i) for i in ans]))\", \"a = input()\\nb = input()\\nif (len(a) < len(b)):\\n    q = list(a)\\n    q.sort(reverse = True)\\n    print(''.join(q))\\nelse:\\n    ans = \\\"\\\"\\n    flag = 0\\n    while (flag == 0 and len(b) != 0):\\n        cur = 0\\n        while (cur < len(a) and a[cur] != b[0]):\\n            cur += 1\\n        if (cur < len(a)):\\n            ans = ans + a[cur]\\n            a = a[:cur] + a[cur+1:]\\n            b = b[1:]\\n        else:\\n            flag = 1\\n    if (len(b) == 0):\\n        print(ans)\\n    else:\\n        ma = -1\\n        p = -1\\n        for i in range(len(a)):\\n            if (int(a[i]) > ma and int(a[i]) < int(b[0])):\\n                ma = int(a[i])\\n                p = i\\n        if (ma != -1):\\n            l = a[p]\\n            a = a[:p] + a[p+1:]\\n            q = list(a)\\n            q.sort(reverse = True)\\n            print(ans + l + ''.join(q))\\n        else:\\n            flag = 0\\n            while (flag == 0):\\n                ma = -1\\n                p = -1\\n                for i in range(len(a)):\\n                    if (int(a[i]) > ma and int(a[i]) < int(ans[-1])):\\n                        ma = int(a[i])\\n                        p = i\\n                if (ma != -1):\\n                    a = a + ans[-1]\\n                    ans = ans[:-1] + a[p]\\n                    a = a[:p]+a[p+1:]\\n                    q = list(a)\\n                    q.sort(reverse = True)\\n                    print(ans + ''.join(q))\\n                    flag = 1\\n                else:\\n                    a = a + ans[-1]\\n                    ans = ans[:-1]\\n\\n\", \"def check(ans, num, a, b, u):\\n    prob = ans\\n    a = []\\n    for i in range(len(num)):\\n        a.append(num[i])\\n    prob += num[u]\\n    a.pop(u)\\n    a.sort()\\n    for i in range(len(a)):\\n        prob += a[i]\\n    if int(prob) <= int(b):\\n        return True\\n    return False\\n\\n\\na = input()\\nb = input()\\nnum = []\\nans = ''\\nif len(a) == len(b):\\n    for i in range(len(a)):\\n        num.append(a[i])\\n    num.sort()\\n    num.reverse()\\n    step = 0\\n    while num:\\n        for i in range(len(num)):\\n            if check(ans, num, a, b, i):\\n                ans += num[i]\\n                num.pop(i)\\n                break\\n    if num:\\n        ans += num[-1]\\n    print(ans)\\nelse:\\n    num = []\\n    for i in range(len(a)):\\n        num.append(a[i])\\n    num.sort()\\n    num.reverse()\\n    ans = ''\\n    for i in range(len(num)):\\n        ans += num[i]\\n    print(ans)\", \"from collections import Counter\\n\\na, b = input(), input()\\nif len(a) < len(b):\\n    print(''.join(sorted(a)[::-1]))\\nelse:\\n    a = Counter(a)\\n    t = []\\n    for q in b:\\n        t.append(q)\\n        a[q] -= 1\\n        if a[q] < 0: break\\n    else:\\n        print(''.join(t))\\n        return\\n    s = ''\\n    while not s:\\n        d = t.pop()\\n        a[d] += 1\\n        for q, k in a.items():\\n            if k > 0 and s < q < d: s = q\\n    a[s] -= 1\\n    t.append(s)\\n    for q in '9876543210':\\n        t += [q] * a[q]\\n    print(''.join(t))\", \"a = list(map(int,input()))\\nb = list(map(int,input()))\\n\\n\\nif len(b) > len(a):\\n  a.sort(reverse=True)\\n  print(''.join(map(str,a)))\\nelse:\\n\\n\\n  counts = [0]*10\\n  for d in a:\\n    counts[d] += 1\\n\\n  def rec(counts,i):\\n    if i >= len(b):\\n      return []\\n\\n    d = b[i]\\n    if counts[d] > 0:\\n      counts[d] -= 1\\n      r = rec(counts,i+1)\\n      if r is None:\\n        counts[d] += 1\\n      else:\\n        res = [d] + r\\n        return res\\n\\n    for d in reversed(list(range(d))):\\n      if counts[d] > 0:\\n        counts[d] -= 1\\n        res = [d]\\n        for e in reversed(list(range(10))):\\n          for _ in range(counts[e]):\\n            res.append(e)\\n        return res\\n\\n    return None\\n\\n  print(''.join(map(str,rec(counts,0))))\\n\", \"from collections import Counter\\n\\na = input()\\nb = input()\\n\\ndef is_subcounter(cnt1, cnt2):\\n    for key in cnt1:\\n        if key not in cnt2 or cnt1[key] > cnt2[key]:\\n            return False\\n    return True\\n\\ndef subtract_counters(cnt1, cnt2):\\n    result = Counter(cnt1)\\n    for key, val in list(cnt2.items()):\\n        assert val <= result[key]\\n        result[key] -= val\\n    return result\\n\\ndef go():\\n    ca = Counter(a)\\n    best = None\\n    for pos in range(len(a) - 1, -1, -1):\\n        cb_before = Counter(b[:pos])\\n        if not is_subcounter(cb_before, ca):\\n            continue\\n        cnt_left = subtract_counters(ca, cb_before)\\n        for key, val in list(cnt_left.items()):\\n            if val == 0:\\n                continue\\n            if key >= b[pos]:\\n                continue\\n            tail = sorted(''.join(key1 * (val1 if key1 != key else val1 - 1)\\n                for key1, val1 in list(cnt_left.items())), reverse=True)\\n            curr = b[:pos] + key + ''.join(tail)\\n            assert curr < b\\n            if best is None or curr > best:\\n                best = curr\\n    assert best is not None\\n    return best\\n\\ndef solve(a, b):\\n    assert(len(a) <= len(b))\\n    if len(a) < len(b):\\n        return ''.join(sorted(a, reverse=True))\\n    elif Counter(a) == Counter(b):\\n        return b\\n    else:\\n        return go()\\n\\nprint(solve(a, b))\\n\", \"\\n\\na = input()\\nb = input()\\n\\nif sorted(list(a)) == sorted(list(b)):\\n    print(b)\\nelif len(a) < len(b):\\n    print(''.join(sorted(a)[::-1]))\\nelse:\\n    digits = {}\\n    for x in a:\\n        y = int(x)\\n        if y in digits:\\n            digits[y] += 1\\n        else:\\n            digits[y] = 1\\n\\n    best = 0\\n\\n    for i in range(len(b)):\\n        digits_cpy = dict(digits)\\n        all_present = True\\n        for j in range(i):\\n            b_j = int(b[j])\\n            if b_j in digits_cpy and digits_cpy[b_j] != 0:\\n                digits_cpy[b_j] -= 1\\n            else:\\n                all_present = False\\n\\n        if not all_present:\\n            continue\\n\\n        found = False\\n        change = 0\\n        for z in range(int(b[i]) - 1, -1, -1):\\n            if z in digits_cpy and digits_cpy[z] != 0:\\n                found = True\\n                change = z\\n                digits_cpy[z] -= 1\\n                break\\n\\n        if not found:\\n            continue\\n\\n        digits_left = []\\n        for key, val in list(digits_cpy.items()):\\n            digits_left += [key] * val\\n\\n        result = list(b[:i]) + [change] + sorted(digits_left)[::-1]\\n\\n        best = max([best, int(''.join(map(str, result)))])\\n\\n    print(best)\\n\", \"a = input()\\nb = input()\\ndigits = list(a)\\nbuilder=''\\nif len(b)<len(a):\\n\\tb = b.rjust(len(a), '0')\\nfor digit in b:\\n\\tif len(b)>len(a):\\n\\t\\tbreak\\n\\tif digit in digits:\\n\\t\\tdigits.remove(digit)\\n\\t\\tif int(builder+digit+''.join(sorted(digits, key=int)))<=int(b):\\n\\t\\t\\tbuilder += digit\\n\\t\\t\\tcontinue\\n\\t\\telse:\\n\\t\\t\\tdigits.append(digit)\\n\\tadded = max([d for d in digits if d<digit])\\n\\tbuilder += added\\n\\tdigits.remove(added)\\n\\tbreak\\nbuilder += ''.join(sorted(digits, reverse=True, key=int))\\nprint(builder)\", \"def f(n):\\n    if n <= 1:\\n        return 1\\n    else:\\n        return n * f(n - 1)\\n\\n\\ndef g(ls, i, s):\\n    if len(ls) == 1:\\n        return 10 * s + ls[0]\\n    else:\\n        k = f(len(ls) - 1)\\n        return g(ls[:i // k] + ls[i // k + 1:], i % k, 10 * s + ls[i // k])\\n\\n\\na = int(input())\\nb = int(input())\\nls = list(sorted(map(int, str(a))))\\nl = 0\\nr = f(len(ls)) - 1\\nif g(ls, r, 0) <= b:\\n    ans = g(ls, r, 0)\\nelse:\\n    while 1 < r - l:\\n        c = (l + r) // 2\\n        if b < g(ls, c, 0):\\n            r = c\\n        else:\\n            l = c\\n    ans = g(ls, l, 0)\\nprint(ans)\\n\", \"from copy import copy\\n\\n\\ndef check(a, b):\\n    a = int(''.join(sorted(a)))\\n    b = int(b[1:])\\n\\n    return a <= b\\n\\n\\ndef get(a, b):\\n    nonlocal ans\\n    nonlocal ret\\n\\n    if a == b:\\n        ans += list(a)\\n\\n        ret = True\\n\\n        return ans\\n\\n    a = list(a)\\n\\n    if a == list():\\n        ret = True\\n\\n        return ans\\n\\n    temp = [el for el in a if int(el) <= int(b[0])]\\n    m = max(temp)\\n\\n    c = copy(a)\\n    c.remove(m)\\n\\n    if m == b[0]:\\n        if check(c, b):\\n            ans.append(m)\\n\\n            get(''.join(c), b[1:])\\n\\n            if ret:\\n                return ans\\n\\n        else:\\n            while m in temp:\\n                temp.remove(m)\\n\\n            m = max(temp)\\n\\n            d = copy(a)\\n            d.remove(m)\\n\\n            ans.append(m)\\n\\n            ans += sorted(d, reverse=True)\\n\\n            ret = True\\n\\n            return ans\\n\\n    else:\\n        ans.append(m)\\n\\n        ans += sorted(c, reverse=True)\\n\\n        ret = True\\n\\n        return ans\\n\\n\\na = input()\\nb = input()\\n\\nans = list()\\nret = False\\n\\nif len(a) < len(b):\\n    print(''.join(sorted(a, reverse=True)))\\n\\nelse:  # len(a) == len(b)\\n    if a == b:\\n        print(a)\\n    else:\\n        print(int(''.join(get(a, b))))\\n\", \"def check(m):\\n\\tnonlocal c, ans\\n\\tans = [0] * len(a)\\n\\thave = c[:]\\n\\tfor i in range(m):\\n\\t\\tif have[b[i]] > 0:\\n\\t\\t\\thave[b[i]] -= 1\\n\\t\\t\\tans[i] = b[i]\\n\\t\\telse:\\n\\t\\t\\treturn 0\\n\\tfor i in range(b[m] - 1, -1, -1):\\n\\t\\tif have[i]:\\n\\t\\t\\tans[m] = i\\n\\t\\t\\thave[i] -= 1\\n\\t\\t\\tbreak\\n\\telse:\\n\\t\\treturn 0\\n\\tj = m + 1\\n\\tfor i in range(10,-1,-1):\\n\\t\\tfor t in range(have[i]):\\n\\t\\t\\tans[j] = i\\n\\t\\t\\tj += 1\\n\\treturn (j == len(a))\\n\\n\\na = list(map(int, list(input())))\\nb = list(map(int, list(input())))\\nans = [0] * len(a)\\n\\nif len(a) < len(b):\\n\\ta.sort(reverse = 1)\\n\\tfor i in a:\\n\\t\\tprint(i, end = '')\\n\\tprint()\\nelse:\\n\\ta.sort(reverse = 1)\\n\\tif a == sorted(b, reverse = 1):\\n\\t\\tfor i in b:\\n\\t\\t\\tprint(i, end = '')\\n\\t\\tprint()\\n\\telse:\\n\\t\\tc = [0] * 15\\n\\t\\tfor i in a:\\n\\t\\t\\tc[i] += 1\\n\\n\\t\\tfor i in range(len(a) - 1, -1 , -1):\\n\\t\\t\\tif check(i):\\n\\t\\t\\t\\tfor i in ans:\\n\\t\\t\\t\\t\\tprint(i, end = '')\\n\\t\\t\\t\\tprint()\\n\\t\\t\\t\\tbreak\\n\\t\\telse:\\n\\t\\t\\tfor i in b:\\n\\t\\t\\t\\tprint(i, end = '')\\n\\t\\t\\tprint()\", \"from functools import reduce\\nfrom fractions import gcd\\nimport copy\\nfrom pip._vendor.distlib.compat import raw_input\\nimport math\\nfrom decimal import *\\ngetcontext().prec = 6\\n\\na = raw_input()\\nb= raw_input()\\nx = [None]*len(a)\\ny = [None]*len(b)\\nfor i in range(len(a)):\\n    x[i] = int(a[i])\\nfor i in range(len(b)):\\n    y[i] = int(b[i])\\n\\ndef zjisti(x,y):\\n    x.sort(reverse=True)\\n    c = copy.deepcopy(x)\\n    vysl1=[]\\n    if len(x)< len(y):\\n        v=''\\n        for i in range(len(x)):\\n            v+=(str(x[i]))\\n        return(v)\\n    if y[0] in x:\\n        x.remove(y[0])\\n        vysl1.append(y[0])\\n        jup = 0\\n        for i in range(len(y)-1):\\n            if y[i+1] < x[len(x)-i-1]:\\n                jup = -1\\n                break\\n            elif y[i+1] > x[len(x)-i-1]:\\n                break\\n        \\n        if jup ==0:\\n            o = y[0]\\n            y.remove(y[0])\\n            if len(x)>0:\\n                return(str(o)+zjisti(x,y))   \\n            else:\\n                return(str(o))\\n    q = y[0]\\n    for j in range(len(c)):\\n        if c[j]<q:\\n            s = c[j]\\n            break\\n    v = str(s)\\n    c.remove(s)\\n    for i in range(len(c)):\\n        v+=(str(c[i]))\\n    return(v)\\n\\nprint(zjisti(x,y))\", \"import bisect\\n\\ndef get_int(l, xa, j):\\n    return int(''.join(l + [xa[j]] + sorted(xa[:j] + xa[j+1:])))\\n\\ndef f(a, b):\\n    if len(a) < len(b):\\n        return int(''.join(reversed(sorted(a))))\\n    xa = list(sorted(a))\\n    xb = list(b)\\n    ib = int(b)\\n    m = int(''.join(xa))\\n\\n    l = []\\n    for i in range(len(xb)):\\n        mj, r = 0, 0\\n        for j in range(len(xa)):\\n            if get_int(l, xa, j) <= ib:\\n                r = get_int(l, xa, j)\\n                mj = j\\n        l.append(xa[mj])\\n        xa = xa[:mj] + xa[mj+1:]\\n\\n    return int(''.join(l))\\n\\ndef test_f():\\n    assert f('123', '222') == 213\\n    assert f('129', '1000') == 921\\n    assert f('125', '222') == 215\\n    assert f('4940', '5000') == 4940\\n    assert f('321', '500') == 321\\n\\n\\na = input()\\nb = input()\\nprint(f(a, b))\\n\", \"#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n\\n\\ndef main():\\n    a = list(input())\\n    b = list(input())\\n    n = len(a)\\n    if (n < len(b)):\\n        a.sort()\\n        a.reverse()\\n        print(''.join(a))\\n        return\\n    b_ = [int(_) for _ in b]\\n    a.sort()\\n    a.reverse()\\n    a_ = [int(_) for _ in a]\\n    c = [0 for _ in range(n)]\\n    r = []\\n    index = 0\\n    flag = 0\\n    while index < n:\\n        now = b_[index]\\n        if now < 0:\\n            b_[index] = 0\\n            index -= 1\\n            b_[index] -= 1\\n            r = []\\n            c = [0 for _ in range(n)]\\n            index = 0\\n            continue\\n        ma = -1\\n        for i in range(n):\\n            if c[i]:\\n                continue\\n            if a_[i] <= now:\\n                c[i] = 1\\n                ma = a_[i]\\n                break\\n        if ma is -1:\\n            b_[index] = 9\\n            index -= 1\\n            b_[index] -= 1\\n            r = []\\n            c = [0 for _ in range(n)]\\n            index = 0\\n            continue\\n        r.append(ma)\\n        if ma < int(b[index]):\\n            flag = 1\\n            break\\n        index += 1\\n    if flag is 1:\\n        for each in r:\\n            print(each, end='')\\n            a_.remove(each)\\n        for each in a_:\\n            print(each, end='')\\n        print()\\n        return\\n    for each in r:\\n        print(each, end='')\\n    print()\\n\\n\\nmain()\\n\\n\", \"a=input().strip()\\nb=input().strip()\\nif len(b)>len(a):\\n  print(''.join(sorted(a))[::-1])\\nelse:\\n  f=[0]*11\\n  for ele in a:\\n    f[int(ele)]+=1\\n  ans=''\\n  i=0\\n  n=len(b)\\n  while i<n:\\n    num=int(b[i])\\n    if f[num] : \\n      ans+=str(num)\\n      f[num]-=1\\n    else:\\n        break\\n    i+=1\\n  \\n    \\n  flag=0\\n  while True and len(ans)!=len(a):\\n      num=int(b[i])\\n      num-=1\\n      while num>=0:\\n        if f[num]:\\n          ans+=str(num)\\n          f[num]-=1\\n          for j in range(9,-1,-1):\\n            ans+=(str(j)*f[j])\\n          break\\n        num-=1 \\n      if len(ans)==len(a):\\n        break\\n      f[int(ans[-1])]+=1 \\n      ans=ans[:-1]\\n      i-=1 \\n  print(ans.strip())        \\n    \\n\", \"def x(a,b):\\n    a.sort()\\n    #print('dsahhf    ',a,b)\\n    l = len(a)\\n    if len(a) < len(b):\\n        return(''.join(sorted(a,reverse = True)))\\n    elif l>len(b):\\n        #print(a,a[:-1])\\n        return '0' + x(a[1:],b)\\n    else:\\n        f = True\\n        if l ==0:return ''\\n        for i in range(l):\\n            if a[i]>b[i]:\\n                f = False\\n            elif a[i] < b[i]:break\\n        if not f:\\n            return -1\\n        a = list(a)\\n        a.sort(reverse = True)\\n        o = ''\\n        if b[0] in a:\\n            f = a.index(b[0])\\n            t = x(a[:f]+a[f+1:],b[1:])\\n            #print(t,a[:f]+a[f+1:],b[1:])\\n            f2 = -1\\n            if t == -1:\\n                m = '9'\\n                f2 = 0\\n                for i in range(l-1,-1,-1):\\n                    if a[i] >= b[0]:\\n                        break\\n                    m = a[i]\\n                    f2 = i\\n                #print(a,f2,m)\\n                #print(a[:f2],a[f2+1:])\\n                return m+''.join(a[:f2])+''.join(a[f2+1:])\\n            else:\\n                return b[0]+t\\n        else:\\n            m = '9'\\n            f2 = 0\\n            for i in range(l-1,-1,-1):\\n                if a[i] > b[0]:\\n                    break\\n                m = a[i]\\n                f2 = i\\n            #print(a,f2,m)\\n            #print(a[:f2],a[f2+1:])\\n            return m+''.join(a[:f2])+''.join(a[f2+1:])\\na = input()\\nb = input()\\nprint(int(x(list(sorted(a)),b)))\\n\", \"a = input()\\nb = input()\\nif len(b) > len(a):\\n    tmp = list(a)\\n    tmp.sort(reverse = True)\\n    for i in tmp:\\n        print(i, end=\\\"\\\")\\n    return\\nsa = [0] * 10\\nfor i in a:\\n    sa[int(i)] += 1\\ndef tolow():\\n    tmp = \\\"\\\"\\n    for i in range(0, 10):\\n        tmp += str(i) * sa[i]\\n    return tmp\\ndef tobig():\\n    tmp = \\\"\\\"\\n    for i in range(9, -1, -1):\\n        tmp += str(i) * sa[i]\\n    return tmp\\nnakop = \\\"\\\"\\nfor i in range(len(b)):\\n    tmp = int(b[i])\\n    if (sa[tmp] > 0):\\n        sa[tmp] -= 1\\n        cur = int(nakop + b[i] + tolow())\\n        if cur <= int(b):\\n            nakop += str(b[i])\\n            continue\\n        else:\\n            sa[tmp] += 1\\n            for j in range(tmp - 1, -1, -1):\\n                if sa[j]:\\n                    sa[j] -= 1\\n                    print(nakop + str(j) + tobig())\\n                    return            \\n    else:\\n        for j in range(tmp - 1, -1, -1):\\n            if sa[j]:\\n                sa[j] -= 1\\n                print(nakop + str(j) + tobig())\\n                return\\n\\n        \\nprint(nakop)\\n                    \\n\\n\\n    \\n    \\n\", \"def split(integer):\\n\\tret = []\\n\\twhile integer != 0:\\n\\t\\tret.append(integer % 10) # last one\\n\\t\\tinteger //= 10\\n\\treturn ret[::-1]\\n\\ndef combine(lst):\\n\\ttotal = 0\\n\\tn = len(lst)\\n\\tfor i in range(n):\\n\\t\\ttotal += 10 ** (n-i-1) * lst[i]\\n\\treturn int(total)\\n\\n\\n# al = sorted(list(split(a)))[::-1]\\n# bl = list(split(b))\\n\\n\\n\\n# Answer can't have leading zeros.\\n# Then len(a) == len(b)\\n# 499200 vs 982400 = b\\n# 942=a, 911=b\\n# 9442=a, 9411=b\\n\\ndef solve3(a, b):\\n\\tal = sorted(list(split(a)))[::-1]\\n\\tbl = list(split(b))\\n\\tif len(bl) > len(al):\\n\\t\\tprint(combine(al))\\n\\t\\treturn\\n\\n\\n\\tif a == b:\\n\\t\\tprint(a)\\n\\t\\treturn\\n\\n\\tptr = 0\\n\\tn = len(al)\\n\\twhile ptr < n:\\n\\t\\t# print(al, bl, ptr)\\n\\t\\tval = bl[ptr]\\n\\t\\tselection = al[ptr] # Sorted from high to low\\n\\t\\tif selection > val: # illegal:\\n\\t\\t\\tk = al.pop(ptr) # pop this idx\\n\\t\\t\\tal.append(k)\\n\\t\\tif selection == val:\\n\\t\\t\\tif ptr == n-1:\\n\\t\\t\\t\\tprint(combine(al)) # Done to the last one.\\n\\t\\t\\t\\tbreak\\n\\t\\t\\telse:\\n\\t\\t\\t\\tif combine(sorted(al[ptr+1:])) > combine(bl[ptr+1:]):\\n\\t\\t\\t\\t\\t# illegal, min of a_rest is larger than b_rest\\n\\t\\t\\t\\t\\tk = al.pop(ptr)\\n\\t\\t\\t\\t\\tal.append(k)\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tptr += 1\\n\\t\\t\\t\\t\\tal = al[:ptr] + sorted(al[ptr:])[::-1]\\n\\t\\t\\t\\t\\t# print(\\\"repermute\\\", al, bl)\\n\\t\\t\\t\\t\\t# print(selection)\\n\\t\\tif selection < val: # all ptr to the back is legal\\n\\t\\t\\t# print(\\\"enter\\\")\\n\\t\\t\\t# print(al, bl,ptr)\\n\\n\\t\\t\\tprint(combine(al[:ptr+1] + list(sorted(al[ptr+1:])[::-1])))\\n\\t\\t\\tbreak\\n\\na = int(input())\\nb = int(input())\\n# solve3(31434123, 13241234)\\nsolve3(a,b)\\n# solve3(123, 301)\\n# solve3(4940,5000)\\n# solve3(942, 911)\\n# solve3(9442, 9411)\\n# solve3(3921,10000)\\n# solve3(9991020, 100001)\\n\", \"def main():\\n   num = input()\\n   maxi = int(input())\\n   nl = len(num)\\n   maxNum = 0\\n   nums = list(num)\\n   \\n   for x in range(len(nums)):\\n      nums[x] = int(nums[x])\\n   nums.sort()\\n   nums = nums[::-1]\\n   \\n   if int(str(maxi)[0]) in nums and len(str(maxi))==len(nums):\\n      nums.remove(int(str(maxi)[0]))\\n      maxNum = recur(int(str(maxi)[0]), nums, maxi)\\n      nums.append(int(str(maxi)[0]))\\n      nums.sort(reverse = True)\\n   elif len(str(maxi))>len(nums):\\n      for x in nums:\\n         maxNum = maxNum*10 + x         \\n   if maxNum==0 or maxNum>maxi:\\n      maxNum = 0\\n      maxD = (int(str(maxi)[0]))\\n      a = 0\\n      for x in nums:\\n         if x < maxD:\\n            a = max(x, a)\\n      maxNum =a\\n      nums.remove(a)   \\n      for x in nums:\\n         maxNum = maxNum * 10 + x\\n      nums.append(a)\\n      nums.sort(reverse = True)\\n   print(maxNum)\\n\\n   \\n\\ndef recur(curr, poss, maxi):\\n   maxNum=0\\n   #print(curr, poss, maxi)\\n   if len(poss)==0:\\n      return curr  \\n   if int(str(maxi)[len(str(curr))]) in poss:\\n      poss.remove(int(str(maxi)[len(str(curr))]))\\n      maxNum = recur(curr*10+int(str(maxi)[len(str(curr))]), poss.copy(), maxi)\\n      poss.append(int(str(maxi)[len(str(curr))]))\\n      poss.sort(reverse = True)\\n      \\n   if maxNum > maxi or maxNum==0:\\n      maxD = (int(str(maxi)[len(str(curr))]))      \\n      a = 0\\n      for x in poss:\\n         if x < maxD:\\n            a = max(x, a)\\n      if a not in poss:\\n         return maxi+5\\n      #print(maxD, poss, a, maxi, curr)\\n      curr = curr*10 + a\\n      poss.remove(a)   \\n      for x in poss:\\n         curr = curr * 10 + x\\n      poss.append(maxD)\\n      poss.sort(reverse = True)\\n      return curr\\n   else:\\n      return maxNum\\n\\nmain()\\n\", \"from collections import Counter\\n\\ndef max_num(a,b):\\n    if len(b) > len(a):\\n        val=''.join(sorted(a, reverse=True))\\n        return int(val)\\n    else:\\n        # int_a=int(''.join(sorted(a)))\\n        # int_b=int(''.join(b))\\n        # for i in range(int_b,int_a-1,-1):\\n        #     # print(str(i),str(int_a))\\n        #     if Counter(str(i)) == Counter(str(''.join(a))):\\n        #         return i\\n        res=''\\n        for i in b:\\n            if i in a:\\n                a.remove(i)\\n                if ''.join(b[len(res)+1:]) >= ''.join(sorted(a)):\\n                    res+=i\\n                else:\\n                    a.append(i)\\n                    break\\n            else:\\n                break\\n        # print(res)\\n        # return res\\n        new_b=b[len(res):]\\n        if new_b==[]:\\n            return res\\n\\n        for i in new_b:\\n            for j in range(int(i)-1,-1,-1):\\n                if str(j) in a:\\n                    a.remove(str(j))\\n                    return res+str(j)+''.join(sorted(a, reverse=True))\\n\\na=list(input())\\nb=list(input())\\nprint(max_num(a,b))\\n\", \"a = input()\\nb = input()\\na_cifr = [0] * 10\\nfor i in a:\\n    a_cifr[int(i)] += 1\\nif len(b) > len(a):\\n    cur = list(a)\\n    cur.sort(reverse = True)\\n    for i in cur:\\n        print(i, end=\\\"\\\")\\n    return\\n    \\ndef vniz():\\n    cur = \\\"\\\"\\n    for i in range(0, 10):\\n        cur += str(i) * a_cifr[i]\\n    return cur\\nabba = 123\\ndef boba():\\n    abbaa = 12\\n    abbaa += abba\\ndef vverh():\\n    cur = \\\"\\\"\\n    for i in range(9, -1, -1):\\n        cur += str(i) * a_cifr[i]\\n    return cur\\nfull = \\\"\\\"\\nfor i in range(len(b)):\\n    cur = int(b[i]) + 2\\n    cur -= 2\\n    if (a_cifr[cur] > 0):\\n        a_cifr[cur] -= 1\\n        cur1 = int(full + b[i] + vniz())\\n        if cur1 <= int(b):\\n            full += str(b[i])\\n            continue\\n        else:\\n            a_cifr[cur] += 1\\n            for j in range(cur - 1, -1, -1):\\n                if a_cifr[j]:\\n                    a_cifr[j] -= 1\\n                    print(full + str(j) + vverh())\\n                    return            \\n    else:\\n        for j in range(cur - 1, -1, -1):\\n            if a_cifr[j]:\\n                a_cifr[j] -= 1\\n                print(full + str(j) + vverh())\\n                return\\nprint(full)\", \"from collections import defaultdict\\n\\na = input()\\nb = input()\\n\\n\\ndef form(a_digits):\\n    answer = []\\n    for i in sorted(a_digits, reverse=True):\\n        answer.append(i * a_digits[i])\\n    return \\\"\\\".join(answer)\\n\\n\\ndef main():\\n    if len(b) > len(a):\\n        return \\\"\\\".join(sorted(list(a), reverse=True))\\n    else:\\n        a_digits = defaultdict(int)\\n        for x in a:\\n            a_digits[x] += 1\\n        r = 0\\n        for x in b:\\n            if a_digits[x] > 0:\\n                a_digits[x] -= 1\\n                r += 1\\n            else:\\n                for i in range(r, -1, -1):\\n                    for j in range(int(b[i]) - 1, -1, -1):\\n                        if a_digits[str(j)] > 0:\\n                            a_digits[str(j)] -= 1\\n                            return b[: i] + str(j) + form(a_digits)\\n                    a_digits[b[i - 1]] += 1\\n        return b\\n\\nprint(main())\"]",
  "input_output": "{\n  \"inputs\": [\n    \"123\\n222\\n\",\n    \"3921\\n10000\\n\",\n    \"4940\\n5000\\n\",\n    \"23923472834\\n23589234723\\n\",\n    \"102391019\\n491010301\\n\",\n    \"123456789123456789\\n276193619183618162\\n\",\n    \"1000000000000000000\\n1000000000000000000\\n\",\n    \"1\\n1000000000000000000\\n\",\n    \"999999999999999999\\n1000000000000000000\\n\",\n    \"2475345634895\\n3455834583479\\n\",\n    \"15778899\\n98715689\\n\",\n    \"4555\\n5454\\n\",\n    \"122112\\n221112\\n\",\n    \"199999999999991\\n191000000000000\\n\",\n    \"13\\n31\\n\",\n    \"212\\n211\\n\",\n    \"222234\\n322223\\n\",\n    \"123456789\\n987654311\\n\",\n    \"20123\\n21022\\n\",\n    \"10101\\n11000\\n\",\n    \"592\\n924\\n\",\n    \"5654456\\n5634565\\n\",\n    \"655432\\n421631\\n\",\n    \"200\\n200\\n\",\n    \"123456789987654321\\n121111111111111111\\n\",\n    \"12345\\n21344\\n\",\n    \"120\\n200\\n\",\n    \"123\\n212\\n\",\n    \"2184645\\n5213118\\n\",\n    \"9912346\\n9912345\\n\",\n    \"5003\\n5000\\n\",\n    \"12345\\n31234\\n\",\n    \"5001\\n5000\\n\",\n    \"53436\\n53425\\n\",\n    \"9329\\n3268\\n\",\n    \"1234567890\\n9000000001\\n\",\n    \"321\\n212\\n\",\n    \"109823464\\n901234467\\n\",\n    \"6543\\n6542\\n\",\n    \"555441\\n555100\\n\",\n    \"472389479\\n327489423\\n\",\n    \"45645643756464352\\n53465475637456247\\n\",\n    \"254\\n599\\n\",\n    \"5232222345652321\\n5000000000000000\\n\",\n    \"201\\n200\\n\",\n    \"14362799391220361\\n45160821596433661\\n\",\n    \"3453\\n5304\\n\",\n    \"989\\n998\\n\",\n    \"5200000000234\\n5200000000311\\n\",\n    \"5555132\\n1325442\\n\",\n    \"123\\n211\\n\",\n    \"65689\\n66123\\n\",\n    \"123451234567890\\n123456789012345\\n\",\n    \"22115\\n22015\\n\",\n    \"123\\n311\\n\",\n    \"12222\\n21111\\n\",\n    \"765\\n567\\n\",\n    \"9087645\\n9087640\\n\",\n    \"1111111122222333\\n2220000000000000\\n\",\n    \"7901\\n7108\\n\",\n    \"215489\\n215488\\n\",\n    \"102\\n200\\n\",\n    \"19260817\\n20011213\\n\",\n    \"12345\\n53200\\n\",\n    \"1040003001\\n1040003000\\n\",\n    \"295\\n924\\n\",\n    \"20000000000000001\\n20000000000000000\\n\",\n    \"99988877\\n99887766\\n\",\n    \"12\\n12\\n\",\n    \"199999999999999999\\n900000000000000000\\n\",\n    \"1234\\n4310\\n\",\n    \"100011\\n100100\\n\",\n    \"328899\\n328811\\n\",\n    \"646722972346\\n397619201220\\n\",\n    \"1203\\n1200\\n\",\n    \"1\\n2\\n\",\n    \"1112\\n2110\\n\",\n    \"4545\\n5540\\n\",\n    \"3053\\n5004\\n\",\n    \"3503\\n5004\\n\",\n    \"351731653766064847\\n501550303749042658\\n\",\n    \"10123456789013451\\n26666666666666666\\n\",\n    \"1110111\\n1100000\\n\",\n    \"30478\\n32265\\n\",\n    \"456546546549874615\\n441554543131214545\\n\",\n    \"214\\n213\\n\",\n    \"415335582799619283\\n133117803602859310\\n\",\n    \"787\\n887\\n\",\n    \"3333222288889999\\n3333222288881111\\n\",\n    \"495779862481416791\\n836241745208800994\\n\",\n    \"139\\n193\\n\",\n    \"9568\\n6500\\n\",\n    \"3208899\\n3228811\\n\",\n    \"27778\\n28710\\n\",\n    \"62345\\n46415\\n\",\n    \"405739873179209\\n596793907108871\\n\",\n    \"365\\n690\\n\",\n    \"8388731334391\\n4710766672578\\n\",\n    \"1230\\n1200\\n\",\n    \"1025\\n5000\\n\",\n    \"4207799\\n4027711\\n\",\n    \"4444222277779999\\n4444222277771111\\n\",\n    \"7430\\n3047\\n\",\n    \"649675735\\n540577056\\n\",\n    \"26\\n82\\n\",\n    \"241285\\n207420\\n\",\n    \"3\\n3\\n\",\n    \"12\\n21\\n\",\n    \"481287\\n826607\\n\",\n    \"40572351\\n59676984\\n\",\n    \"268135787269\\n561193454469\\n\",\n    \"4\\n9\\n\",\n    \"5\\n6\\n\",\n    \"60579839\\n33370073\\n\",\n    \"49939\\n39200\\n\",\n    \"2224\\n4220\\n\",\n    \"427799\\n427711\\n\",\n    \"49\\n90\\n\",\n    \"93875\\n82210\\n\",\n    \"78831\\n7319682\\n\",\n    \"937177\\n7143444\\n\",\n    \"499380628\\n391990337\\n\",\n    \"2090909\\n2900000\\n\",\n    \"112233445566778890\\n987654321987654320\\n\",\n    \"48257086\\n80903384\\n\",\n    \"112233445566778890\\n900654321987654320\\n\",\n    \"112233445566778890\\n123456789123456788\\n\",\n    \"5207799\\n5027711\\n\",\n    \"200000000000000001\\n200000000000000000\\n\",\n    \"597402457\\n797455420\\n\",\n    \"90\\n94\\n\",\n    \"86888\\n88683\\n\",\n    \"419155888\\n588151913\\n\",\n    \"408919130\\n191830070\\n\",\n    \"524975\\n554924\\n\",\n    \"53029\\n30524\\n\",\n    \"5549\\n5542\\n\",\n    \"6\\n9\\n\",\n    \"87\\n810\\n\",\n    \"920491855\\n281495062\\n\",\n    \"6691\\n6910\\n\",\n    \"533\\n335\\n\",\n    \"999999999999999998\\n999999999999999997\\n\",\n    \"21111111111111111\\n21111111111111110\\n\",\n    \"2\\n12\\n\",\n    \"76544\\n45744\\n\",\n    \"2000000000000001\\n2000000000000000\\n\",\n    \"740867\\n467701\\n\",\n    \"2\\n6\\n\",\n    \"103\\n130\\n\",\n    \"2423712\\n8466235\\n\",\n    \"84\\n48\\n\",\n    \"1210\\n12113\\n\",\n    \"2430\\n20786\\n\",\n    \"100\\n999\\n\",\n    \"19325\\n21903\\n\",\n    \"1969\\n23251\\n\"\n  ],\n  \"outputs\": [\n    \"213\\n\",\n    \"9321\\n\",\n    \"4940\\n\",\n    \"23498743322\\n\",\n    \"399211100\\n\",\n    \"276193618987554432\\n\",\n    \"1000000000000000000\\n\",\n    \"1\\n\",\n    \"999999999999999999\\n\",\n    \"3455834579642\\n\",\n    \"98598771\\n\",\n    \"4555\\n\",\n    \"221112\\n\",\n    \"119999999999999\\n\",\n    \"31\\n\",\n    \"122\\n\",\n    \"243222\\n\",\n    \"987654231\\n\",\n    \"20321\\n\",\n    \"10110\\n\",\n    \"592\\n\",\n    \"5566544\\n\",\n    \"365542\\n\",\n    \"200\\n\",\n    \"119988776655443322\\n\",\n    \"15432\\n\",\n    \"120\\n\",\n    \"132\\n\",\n    \"5186442\\n\",\n    \"9694321\\n\",\n    \"3500\\n\",\n    \"25431\\n\",\n    \"1500\\n\",\n    \"53364\\n\",\n    \"2993\\n\",\n    \"8976543210\\n\",\n    \"132\\n\",\n    \"896443210\\n\",\n    \"6534\\n\",\n    \"554541\\n\",\n    \"327487994\\n\",\n    \"53465475636654442\\n\",\n    \"542\\n\",\n    \"4655533322222221\\n\",\n    \"120\\n\",\n    \"43999766332221110\\n\",\n    \"4533\\n\",\n    \"998\\n\",\n    \"5200000000243\\n\",\n    \"1255553\\n\",\n    \"132\\n\",\n    \"65986\\n\",\n    \"123456789012345\\n\",\n    \"21521\\n\",\n    \"231\\n\",\n    \"12222\\n\",\n    \"567\\n\",\n    \"9087564\\n\",\n    \"2213332221111111\\n\",\n    \"7091\\n\",\n    \"214985\\n\",\n    \"120\\n\",\n    \"19876210\\n\",\n    \"53142\\n\",\n    \"1040001300\\n\",\n    \"592\\n\",\n    \"12000000000000000\\n\",\n    \"99879887\\n\",\n    \"12\\n\",\n    \"199999999999999999\\n\",\n    \"4231\\n\",\n    \"100011\\n\",\n    \"299883\\n\",\n    \"397476664222\\n\",\n    \"1032\\n\",\n    \"1\\n\",\n    \"1211\\n\",\n    \"5454\\n\",\n    \"3530\\n\",\n    \"3530\\n\",\n    \"501548777666643331\\n\",\n    \"26598754433111100\\n\",\n    \"1011111\\n\",\n    \"30874\\n\",\n    \"441554498766665554\\n\",\n    \"142\\n\",\n    \"132999887655543321\\n\",\n    \"877\\n\",\n    \"3332999988883222\\n\",\n    \"829998777665444111\\n\",\n    \"193\\n\",\n    \"5986\\n\",\n    \"3209988\\n\",\n    \"27877\\n\",\n    \"46352\\n\",\n    \"594998777332100\\n\",\n    \"653\\n\",\n    \"4398887333311\\n\",\n    \"1032\\n\",\n    \"2510\\n\",\n    \"2997740\\n\",\n    \"4442999977774222\\n\",\n    \"3047\\n\",\n    \"539776654\\n\",\n    \"62\\n\",\n    \"185422\\n\",\n    \"3\\n\",\n    \"21\\n\",\n    \"824871\\n\",\n    \"57543210\\n\",\n    \"539887766221\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"30998765\\n\",\n    \"34999\\n\",\n    \"2422\\n\",\n    \"299774\\n\",\n    \"49\\n\",\n    \"79853\\n\",\n    \"88731\\n\",\n    \"977731\\n\",\n    \"390988642\\n\",\n    \"2099900\\n\",\n    \"987654321876543210\\n\",\n    \"80876542\\n\",\n    \"898776655443322110\\n\",\n    \"123456789123456780\\n\",\n    \"2997750\\n\",\n    \"120000000000000000\\n\",\n    \"797455420\\n\",\n    \"90\\n\",\n    \"86888\\n\",\n    \"588151894\\n\",\n    \"191830049\\n\",\n    \"554792\\n\",\n    \"30295\\n\",\n    \"5495\\n\",\n    \"6\\n\",\n    \"87\\n\",\n    \"281495059\\n\",\n    \"6691\\n\",\n    \"335\\n\",\n    \"999999999999999989\\n\",\n    \"12111111111111111\\n\",\n    \"2\\n\",\n    \"45674\\n\",\n    \"1200000000000000\\n\",\n    \"467087\\n\",\n    \"2\\n\",\n    \"130\\n\",\n    \"7432221\\n\",\n    \"48\\n\",\n    \"2110\\n\",\n    \"4320\\n\",\n    \"100\\n\",\n    \"21593\\n\",\n    \"9961\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/915/C",
  "starter_code": ""
}