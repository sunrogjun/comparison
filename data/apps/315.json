{
  "task_id": "APPS/315",
  "problem_id": 315,
  "prompt": "Recently a dog was bought for Polycarp. The dog's name is Cormen. Now Polycarp has a lot of troubles. For example, Cormen likes going for a walk. \n\nEmpirically Polycarp learned that the dog needs at least k walks for any two consecutive days in order to feel good. For example, if k = 5 and yesterday Polycarp went for a walk with Cormen 2 times, today he has to go for a walk at least 3 times. \n\nPolycarp analysed all his affairs over the next n days and made a sequence of n integers a_1, a_2, ..., a_{n}, where a_{i} is the number of times Polycarp will walk with the dog on the i-th day while doing all his affairs (for example, he has to go to a shop, throw out the trash, etc.).\n\nHelp Polycarp determine the minimum number of walks he needs to do additionaly in the next n days so that Cormen will feel good during all the n days. You can assume that on the day before the first day and on the day after the n-th day Polycarp will go for a walk with Cormen exactly k times. \n\nWrite a program that will find the minumum number of additional walks and the appropriate schedule\u00a0\u2014 the sequence of integers b_1, b_2, ..., b_{n} (b_{i} \u2265 a_{i}), where b_{i} means the total number of walks with the dog on the i-th day.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n, k \u2264 500)\u00a0\u2014 the number of days and the minimum number of walks with Cormen for any two consecutive days. \n\nThe second line contains integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 500)\u00a0\u2014 the number of walks with Cormen on the i-th day which Polycarp has already planned. \n\n\n-----Output-----\n\nIn the first line print the smallest number of additional walks that Polycarp should do during the next n days so that Cormen will feel good during all days. \n\nIn the second line print n integers b_1, b_2, ..., b_{n}, where b_{i}\u00a0\u2014 the total number of walks on the i-th day according to the found solutions (a_{i} \u2264 b_{i} for all i from 1 to n). If there are multiple solutions, print any of them. \n\n\n-----Examples-----\nInput\n3 5\n2 0 1\n\nOutput\n4\n2 3 2\n\nInput\n3 1\n0 0 0\n\nOutput\n1\n0 1 0\n\nInput\n4 6\n2 4 3 5\n\nOutput\n0\n2 4 3 5",
  "solutions": "[\"n, k = list(map(int, input().split()))\\na = list(map(int, input().split()))\\n\\nans = 0\\nfor i in range(1, n):\\n    diff = k - (a[i] + a[i - 1])\\n    if diff > 0:\\n        a[i] += diff\\n        ans += diff\\n\\nprint(ans)\\nprint(' '.join(map(str, a)))\\n\\n\", \"def solve():\\n\\tn, k = map(int, input().split())\\n\\ta = list(map(int, input().split()))\\n\\tres = 0\\n\\tfor i in range(1, len(a)):\\n\\t\\ts = a[i] + a[i - 1]\\n\\t\\tmoar = 0\\n\\t\\tif s < k:\\n\\t\\t\\tmoar = k - s\\n\\t\\ta[i] += moar\\n\\t\\tres += moar\\n\\tprint(res)\\n\\tprint(\\\" \\\".join(map(str, a)))\\n\\nsolve()\", \"n,k = map(int, input().split())\\nA = list(map(int, input().split()))\\nr = 0\\n\\nfor i in range(1,n):\\n    if A[i]+A[i-1] < k:\\n        r += k - A[i-1] - A[i]\\n        A[i] += k - A[i-1] - A[i]\\n\\nprint(r)\\nfor i in range(n):\\n    print(A[i],end=\\\" \\\")\\n\", \"import sys, math, random\\nn, k = list(map(int, input().split()))\\nz = list(map(int, input().split()))\\nans = 0\\nfor i in range(n - 1):\\n    if z[i] + z[i + 1] < k:\\n        ans += k - z[i + 1] - z[i]\\n        z[i + 1] += k - z[i + 1] - z[i]\\nprint(ans)\\nprint(*z)\\n    \\n\", \"n, k = map(int, input().split())\\nA = list(map(int, input().split()))\\nans = 0\\nfor i in range(n - 1):\\n\\tif A[i] + A[i + 1] < k:\\n\\t\\tans += k - (A[i] + A[i + 1])\\n\\t\\tA[i + 1] += k - (A[i] + A[i + 1])\\nprint(ans)\\nfor i in range(n):\\n\\tprint(A[i], end=' ')\\n\", \"n, k = list(map(int, input().split()))\\nA = list(map(int, input().split()))\\nB = [0] * n\\nB[0] = A[0]\\nfor i in range(1, n):\\n\\tB[i] = max(A[i], k - B[i - 1])\\nprint(sum(B) - sum(A))\\nprint(\\\" \\\".join(list(map(str, B))))\\n\", \"n, k = map(int, input().split())\\nm = list(map(int, input().split()))\\ns = [m[i] + m[i + 1] for i in range(n - 1)] + [0]\\n\\nans = 0\\nfor i in range(n - 1):\\n    while s[i] < k:\\n        s[i] += 1\\n        s[i + 1] += 1\\n        m[i + 1] += 1\\n        ans += 1\\nprint(ans)\\nprint(*m)\", \"s = input().split(' ')\\nn = int(s[0])\\nk = int(s[1])\\n\\nd = [int(x) for x in input().split(' ')]\\nover = 0\\n\\nfor i in range(n - 1):\\n    need = k - d[i + 1]\\n    if need <= 0:\\n        continue\\n\\n    need -= d[i]\\n    if need > 0:\\n        d[i + 1] += need\\n        over += need\\n\\nprint(over)\\nprint(' '.join([str(x) for x in d]))\\n\", \"n, k = map(int, input().split())\\na = list(map(int, input().split()))\\nans = 0\\nfor i in range(1, n):\\n    if a[i] - (k - a[i - 1]) < 0:\\n        ans += a[i] - (k - a[i - 1])\\n        a[i] = k - a[i - 1]\\nprint(abs(ans))\\nprint(*a)\", \"n, k = map(int, input().split())\\nl = list(map(int, input().split()))\\ncnt = 0\\nfor i in range(n - 1):\\n    if l[i] + l[i + 1] < k:\\n        cnt += k - l[i] - l[i + 1]\\n        l[i + 1] += k - l[i] - l[i + 1]\\nprint(cnt)\\nprint(' '.join(map(str, l)))\", \"n, k = list(map(int, input().split()))\\nline = list(map(int, input().split()))\\ns = 0\\nfor i in range(len(line) - 1):\\n    if line[i] + line[i + 1] < k:\\n        m =  k - line[i] - line[i + 1]\\n        line[i + 1] += k - line[i] - line[i + 1]\\n        s += m\\nprint(s)\\nprint(\\\" \\\".join(map(str, line)))\\n\", \"n,k=list(map(int,input().split()))\\na=list(map(int,input().split()))\\ns=0\\nb=a[0]\\nfor i in range(1,n):\\n\\tif b+a[i]<k:\\n\\t\\ts+=k-b-a[i]\\n\\t\\ta[i]=k-b\\n\\tb=a[i]\\nprint(s)\\nprint(*a)\\n\", \"N,K = ( int(x) for x in input().split() )\\nwalklist = [int(x) for x in input().split()]\\ncost = 0\\nfor i in range(1,N):\\n\\tif walklist[i] + walklist[i-1] < K:\\n\\t\\tcost += K - (walklist[i] + walklist[i-1])\\n\\t\\twalklist[i] = K - walklist[i-1] \\n\\nprint(cost)\\nprint(\\\" \\\".join([str(x) for x in walklist]))\\n\", \"d=input().split()\\nn=int(d[0])\\nk=int(d[1])\\nd=input().split()\\nd=[int(x) for x in d]\\nS=0\\nfor i in range(n-1):\\n    if (d[i]+d[i+1])<k:\\n        S+=k-(d[i]+d[i+1])\\n        d[i+1]+=k-(d[i]+d[i+1])\\n        \\nprint(S)\\nfor i in d:\\n    print(i,end=\\\" \\\")\\n\", \"n,k = map(int, input().split())\\nnum = list(map(int, input().split()))\\n\\nans = 0\\n\\nfor i in range(1,n):\\n    if num[i]+num[i-1]<k:\\n        ans += k-(num[i]+num[i-1])\\n        num[i] = k-num[i-1]\\n\\nprint(ans)\\nprint(' '.join([str(x) for x in num]))\", \"n, k = map(int, input().split())\\na = list(map(int, input().split()))\\ncnt = 0\\nfor i in range(1, n):\\n\\tif a[i] + a[i - 1] < k:\\n\\t\\tcnt += k - a[i] - a[i - 1]\\n\\t\\ta[i] += k - a[i] - a[i - 1]\\nprint(cnt)\\nprint(' '.join(map(str, a)))\", \"n, k = list(map(int,input().split()))\\n\\ndays = input().split()\\n\\nchanges = 0\\n\\nfor day in range(n-1):\\n    day1 = int(days[day])\\n    day2 = int(days[day+1])\\n    day2p = k-(day1+day2)\\n    if day2p > 0:\\n        changes+= day2p\\n        days[day+1] = str(day2+day2p)\\n\\nprint(changes)\\n\\nprint(\\\" \\\".join(days))\\n\", \"n, k = list(map(int, input().split()))\\n\\na = list(map(int, input().split()))\\n\\nresult = 0\\n\\nfor i in range(1, n):\\n    if a[i] + a[i-1] < k:\\n        result += k - a[i] - a[i-1]\\n        a[i] = (k - a[i-1])\\nprint(result)\\nprint(\\\" \\\".join(map(str, a)))\\n\", \"n,k=map(int,input().split())\\na=list(map(int,input().split()))\\nc=0\\nfor i in range(n-1):\\n    if a[i]+a[i+1]<k:\\n        c+=k-a[i]-a[i+1]\\n        a[i+1]+=k-a[i]-a[i+1]\\nprint(c)\\nfor i in range(n):\\n    print(a[i],end=' ')\\n        \", \"from sys import stdin\\n\\nn, k = list(map(int, stdin.readline().split()))\\n\\na = list(map(int, stdin.readline().split()))\\n\\n\\ndef solve(walks: list) -> (int, list):\\n    new_walks = [0]\\n    for i in range(1, n):\\n        s = walks[i] + walks[i-1] + new_walks[i-1]\\n        new_walks.append(max(0, k - s))\\n    return sum(new_walks), new_walks\\n\\n\\ndef print_result(number, walks):\\n    print(number)\\n    print(' '.join(str(a[i] + walks[i]) for i in range(n)))\\n\\nn1, result1 = solve(a)\\nn2, result2 = solve(list(reversed(a)))\\n\\nif n1 <= n2:\\n    print_result(n1, result1)\\nelse:\\n    print_result(n2, result2)\\n\", \"n, k = (int(i) for i in input().split())\\nl = [int(i) for i in input().split()]\\nc = 0\\nfor i in range(1, n):\\n    if l[i-1] + l[i] < k:\\n        a = k - (l[i-1] + l[i])\\n        c += a\\n        l[i] += a\\nprint(c)\\nprint(' '.join(str(i) for i in l))\\n\", \"n,k = map(int,input().split())\\nA = list(map(int, input().split()))\\nans = 0\\nfor j in range(1, n):\\n    if A[j] + A[j-1] < k:\\n        ans += k - A[j] - A[j-1]\\n        A[j] += k - A[j] - A[j-1]\\n        \\nprint(ans)\\nprint(' '.join(map(str, A)))\", \"from collections import defaultdict\\nimport sys, os, math\\n\\ndef __starting_point():\\n    #n, m = list(map(int, input().split()))\\n    n, k = map(int, input().split())\\n    arr = list(map(int, input().split()))\\n    ans = 0\\n    for i in range(1, n):\\n        if arr[i] < k - arr[i - 1]:\\n            ans += k - arr[i - 1] - arr[i]\\n            arr[i] = k - arr[i - 1]\\n    print(ans)\\n    print(' '.join(str(i) for i in arr))\\n__starting_point()\", \"def __starting_point():\\n    #n = 4\\n    #k = 6\\n    #a = [2, 4, 3, 5]\\n    inp = input().split(' ')\\n    n = int(inp[0])\\n    k = int(inp[1])\\n\\n    a = [int(ch) for ch in input().split(' ')]\\n\\n    addition = 0\\n    for i in range(1, len(a)):\\n        sum = a[i - 1] + a[i]\\n        new_sum = k - sum\\n        if new_sum < 0:\\n            new_sum = 0\\n        addition += new_sum\\n        a[i] = a[i] + new_sum\\n\\n    print(addition)\\n\\n    res = ''\\n    for c in a:\\n        res = res + str(c) + ' '\\n    print(res)\\n__starting_point()\", \"def do():\\n    n,k = list(map(int,input().split()))\\n    a = list(map(int,input().split()))\\n    i = 0\\n    totalNeed = 0\\n    while(1):\\n        if (i+1 >= n): break\\n        curSum = a[i] + a[i+1] # check if i+1 > n\\n        need = k - curSum\\n        totalNeed += max(0, need)\\n        if (need > 0):\\n            a[i+1] += need\\n        i += 1\\n    print(totalNeed)\\n    return a\\nrs = do()\\ntobeprinted = \\\"\\\"\\nfor r in rs:\\n    tobeprinted += (str(r) + \\\" \\\")\\nprint(tobeprinted[:-1])\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3 5\\n2 0 1\\n\",\n    \"3 1\\n0 0 0\\n\",\n    \"4 6\\n2 4 3 5\\n\",\n    \"5 1\\n0 0 0 0 1\\n\",\n    \"10 500\\n164 44 238 205 373 249 87 30 239 90\\n\",\n    \"1 1\\n1\\n\",\n    \"5 1\\n0 0 0 0 0\\n\",\n    \"5 1\\n0 0 0 0 1\\n\",\n    \"5 2\\n0 0 0 1 0\\n\",\n    \"5 5\\n1 4 0 0 0\\n\",\n    \"5 10\\n1 2 1 0 1\\n\",\n    \"5 10\\n0 1 0 1 0\\n\",\n    \"10 5\\n0 2 3 0 0 1 0 2 3 1\\n\",\n    \"10 1\\n0 0 0 0 0 0 0 0 1 0\\n\",\n    \"10 436\\n13 16 45 9 10 17 5 26 10 12\\n\",\n    \"10 438\\n71 160 43 326 128 35 41 247 30 49\\n\",\n    \"10 431\\n121 24 93 59 243 147 1 254 75 168\\n\",\n    \"10 10\\n0 0 0 0 0 0 0 0 0 0\\n\",\n    \"10 10\\n0 0 1 0 0 0 1 0 0 0\\n\",\n    \"10 10\\n0 0 0 1 0 0 1 0 0 0\\n\",\n    \"10 10\\n1 1 0 2 0 1 1 1 2 0\\n\",\n    \"10 10\\n1 2 2 0 0 2 0 1 0 0\\n\",\n    \"10 10\\n1 0 1 0 0 5 2 0 0 1\\n\",\n    \"10 10\\n2 3 5 0 2 0 15 6 5 0\\n\",\n    \"10 10\\n16 15 4 10 14 2 18 11 24 5\\n\",\n    \"100 100\\n48 19 63 8 18 22 5 5 12 7 9 37 17 22 58 14 53 25 24 16 22 36 4 2 9 63 52 43 22 72 0 9 12 26 50 1 21 9 40 9 5 6 2 24 1 88 50 7 9 1 3 16 0 17 3 32 47 9 32 87 20 3 45 41 16 43 41 31 28 30 2 31 72 16 74 59 20 34 25 18 48 10 34 20 22 16 3 32 8 34 8 4 45 65 48 42 1 45 11 15\\n\",\n    \"100 200\\n28 52 65 37 1 64 13 57 44 12 37 0 9 68 17 5 28 4 2 12 8 47 7 33 1 27 50 59 9 0 4 27 31 31 49 1 35 43 36 12 5 0 49 40 19 12 39 3 41 25 19 15 57 24 3 9 4 31 42 55 11 13 1 8 0 25 34 52 47 59 74 43 36 47 2 3 1 13 56 48 42 24 4 32 12 3 33 12 14 14 84 32 1 3 8 49 9 18 43 43\\n\",\n    \"100 10\\n1 2 7 0 2 0 0 0 2 5 3 2 2 1 0 7 1 6 1 1 5 1 2 3 5 0 0 0 0 0 1 0 1 0 2 1 3 0 1 1 0 0 3 1 6 3 2 2 1 3 1 0 9 1 3 2 3 0 5 1 0 5 5 5 2 1 3 0 1 3 5 2 4 4 1 2 3 0 2 1 3 6 4 3 1 0 9 1 0 3 3 6 7 2 5 2 2 6 0 2\\n\",\n    \"100 500\\n207 27 83 171 129 204 11 55 58 115 43 280 208 169 23 79 36 59 132 28 13 136 246 134 29 135 176 21 155 175 127 288 68 68 41 156 194 31 44 131 30 31 89 46 180 184 12 29 2 58 70 157 329 294 126 55 79 19 125 15 39 30 2 137 36 151 5 246 176 1 158 31 4 99 192 200 124 66 10 195 180 165 8 79 257 68 5 175 43 141 0 106 38 32 0 56 33 221 144 226\\n\",\n    \"100 500\\n64 140 15 221 24 106 73 30 275 97 296 55 5 30 47 199 130 44 72 170 7 204 359 40 128 117 45 192 344 112 0 11 196 78 73 53 222 93 88 151 99 283 60 71 4 87 226 46 66 74 23 89 77 60 397 181 0 101 358 54 124 155 19 218 9 140 161 130 308 85 103 85 300 128 19 108 225 136 100 54 30 24 129 245 128 88 160 120 51 154 19 129 114 32 256 30 102 207 115 49\\n\",\n    \"1 500\\n500\\n\",\n    \"2 1\\n0 0\\n\",\n    \"1 10\\n1\\n\",\n    \"1 4\\n2\\n\",\n    \"1 10\\n2\\n\",\n    \"1 10\\n0\\n\",\n    \"1 5\\n1\\n\",\n    \"1 2\\n1\\n\",\n    \"1 5\\n2\\n\",\n    \"1 3\\n0\\n\",\n    \"1 3\\n1\\n\",\n    \"1 5\\n0\\n\",\n    \"1 7\\n0\\n\",\n    \"1 7\\n1\\n\",\n    \"1 3\\n2\\n\",\n    \"1 5\\n3\\n\",\n    \"1 4\\n3\\n\",\n    \"1 6\\n1\\n\",\n    \"1 6\\n2\\n\",\n    \"1 500\\n0\\n\",\n    \"3 7\\n2 3 1\\n\",\n    \"1 10\\n5\\n\",\n    \"5 10\\n1 2 3 4 5\\n\",\n    \"2 6\\n1 2\\n\",\n    \"1 10\\n3\\n\",\n    \"1 6\\n3\\n\",\n    \"1 100\\n1\\n\",\n    \"1 7\\n2\\n\",\n    \"2 10\\n1 2\\n\",\n    \"1 9\\n1\\n\"\n  ],\n  \"outputs\": [\n    \"4\\n2 3 2\\n\",\n    \"1\\n0 1 0\\n\",\n    \"0\\n2 4 3 5\\n\",\n    \"2\\n0 1 0 1 1\\n\",\n    \"903\\n164 336 238 262 373 249 251 249 251 249\\n\",\n    \"0\\n1\\n\",\n    \"2\\n0 1 0 1 0\\n\",\n    \"2\\n0 1 0 1 1\\n\",\n    \"3\\n0 2 0 2 0\\n\",\n    \"6\\n1 4 1 4 1\\n\",\n    \"16\\n1 9 1 9 1\\n\",\n    \"18\\n0 10 0 10 0\\n\",\n    \"13\\n0 5 3 2 3 2 3 2 3 2\\n\",\n    \"4\\n0 1 0 1 0 1 0 1 1 0\\n\",\n    \"2017\\n13 423 45 391 45 391 45 391 45 391\\n\",\n    \"1060\\n71 367 71 367 128 310 128 310 128 310\\n\",\n    \"1036\\n121 310 121 310 243 188 243 254 177 254\\n\",\n    \"50\\n0 10 0 10 0 10 0 10 0 10\\n\",\n    \"48\\n0 10 1 9 1 9 1 9 1 9\\n\",\n    \"48\\n0 10 0 10 0 10 1 9 1 9\\n\",\n    \"41\\n1 9 1 9 1 9 1 9 2 8\\n\",\n    \"42\\n1 9 2 8 2 8 2 8 2 8\\n\",\n    \"40\\n1 9 1 9 1 9 2 8 2 8\\n\",\n    \"23\\n2 8 5 5 5 5 15 6 5 5\\n\",\n    \"0\\n16 15 4 10 14 2 18 11 24 5\\n\",\n    \"2588\\n48 52 63 37 63 37 63 37 63 37 63 37 63 37 63 37 63 37 63 37 63 37 63 37 63 63 52 48 52 72 28 72 28 72 50 50 50 50 50 50 50 50 50 50 50 88 50 50 50 50 50 50 50 50 50 50 50 50 50 87 20 80 45 55 45 55 45 55 45 55 45 55 72 28 74 59 41 59 41 59 48 52 48 52 48 52 48 52 48 52 48 52 48 65 48 52 48 52 48 52\\n\",\n    \"7390\\n28 172 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 65 135 74 126 74 126 74 126 74 126 74 126 74 126 74 126 74 126 74 126 74 126 84 116 84 116 84 116 84 116 84 116\\n\",\n    \"288\\n1 9 7 3 7 3 7 3 7 5 5 5 5 5 5 7 3 7 3 7 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 4 6 4 6 4 6 4 9 1 9 2 8 2 8 2 8 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 4 6 4 6 9 1 9 3 7 6 7 3 7 3 7 6 4 6\\n\",\n    \"14863\\n207 293 207 293 207 293 207 293 207 293 207 293 208 292 208 292 208 292 208 292 208 292 246 254 246 254 246 254 246 254 246 288 212 288 212 288 212 288 212 288 212 288 212 288 212 288 212 288 212 288 212 288 329 294 206 294 206 294 206 294 206 294 206 294 206 294 206 294 206 294 206 294 206 294 206 294 206 294 206 294 206 294 206 294 257 243 257 243 257 243 257 243 257 243 257 243 257 243 257 243\\n\",\n    \"13634\\n64 436 64 436 64 436 73 427 275 225 296 204 296 204 296 204 296 204 296 204 296 204 359 141 359 141 359 192 344 156 344 156 344 156 344 156 344 156 344 156 344 283 217 283 217 283 226 274 226 274 226 274 226 274 397 181 319 181 358 142 358 155 345 218 282 218 282 218 308 192 308 192 308 192 308 192 308 192 308 192 308 192 308 245 255 245 255 245 255 245 255 245 255 245 256 244 256 244 256 244\\n\",\n    \"0\\n500\\n\",\n    \"1\\n0 1\\n\",\n    \"0\\n1\\n\",\n    \"0\\n2\\n\",\n    \"0\\n2\\n\",\n    \"0\\n0\\n\",\n    \"0\\n1\\n\",\n    \"0\\n1\\n\",\n    \"0\\n2\\n\",\n    \"0\\n0\\n\",\n    \"0\\n1\\n\",\n    \"0\\n0\\n\",\n    \"0\\n0\\n\",\n    \"0\\n1\\n\",\n    \"0\\n2\\n\",\n    \"0\\n3\\n\",\n    \"0\\n3\\n\",\n    \"0\\n1\\n\",\n    \"0\\n2\\n\",\n    \"0\\n0\\n\",\n    \"3\\n2 5 2\\n\",\n    \"0\\n5\\n\",\n    \"10\\n1 9 3 7 5\\n\",\n    \"3\\n1 5\\n\",\n    \"0\\n3\\n\",\n    \"0\\n3\\n\",\n    \"0\\n1\\n\",\n    \"0\\n2\\n\",\n    \"7\\n1 9\\n\",\n    \"0\\n1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/732/B",
  "starter_code": ""
}