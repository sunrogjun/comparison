{
  "task_id": "APPS/421",
  "problem_id": 421,
  "prompt": "A restaurant received n orders for the rental. Each rental order reserve the restaurant for a continuous period of time, the i-th order is characterized by two time values \u2014 the start time l_{i} and the finish time r_{i} (l_{i} \u2264 r_{i}).\n\nRestaurant management can accept and reject orders. What is the maximal number of orders the restaurant can accept?\n\nNo two accepted orders can intersect, i.e. they can't share even a moment of time. If one order ends in the moment other starts, they can't be accepted both.\n\n\n-----Input-----\n\nThe first line contains integer number n (1 \u2264 n \u2264 5\u00b710^5) \u2014 number of orders. The following n lines contain integer values l_{i} and r_{i} each (1 \u2264 l_{i} \u2264 r_{i} \u2264 10^9).\n\n\n-----Output-----\n\nPrint the maximal number of orders that can be accepted.\n\n\n-----Examples-----\nInput\n2\n7 11\n4 7\n\nOutput\n1\n\nInput\n5\n1 2\n2 3\n3 4\n4 5\n5 6\n\nOutput\n3\n\nInput\n6\n4 8\n1 5\n4 7\n2 5\n1 3\n6 8\n\nOutput\n2",
  "solutions": "[\"def key_tri(argument):\\n    return argument[1]\\n\\nn = int(input())\\nL = [list(map(int, input().split())) for _ in range(n)]\\nL.sort(key=key_tri)\\nr = 1\\nt = L[0][1]\\nfor k in range(1,n):\\n    if L[k][0]>t:\\n        r+=1\\n        t = L[k][1]\\nprint(r)\\n\", \"def snd(lst):\\n    return lst[1]\\nn = int(input())\\nl = []\\nfor i in range(0, n):\\n    l.append([int(i) for i in input().split()])\\nl.sort(key=snd)\\ne = 0\\nans = 0\\nfor p in l:\\n    if (p[0] > e):\\n        ans+=1\\n        e = p[1]\\nprint(ans)\\n\", \"r = lambda: list(map(int, input().split()))\\n\\nn, = r()\\na = sorted(tuple(r()) for _ in range(n))[::-1]\\n\\nret, left = 0, 10**9 + 1\\nfor l, r in a:\\n\\tif r < left:\\n\\t\\tret += 1\\n\\t\\tleft = l\\n\\nprint(ret)\\n\", \"n = int(input())\\n\\na = [tuple(map(int, input().split())) for _ in range(n)]\\n#print(a)\\na.sort(key = lambda x : x[1])\\nmax_r = -10**10\\nans = 0\\nfor l, r in a:\\n     if l > max_r:\\n         ans += 1\\n         max_r = r\\nprint(ans)\\n    \\n\", \"n = int(input())\\nrg = []\\nfor i in range(n):\\n    a, b = map(int, input().split())\\n    rg.append((a, b))\\nrg.sort()\\nlast = rg[0][1]\\nans = 1\\nfor i in rg[1:]:\\n    if i[0] > last:\\n        last = i[1]\\n        ans += 1\\n    elif i[1] < last:\\n        last = i[1]\\nprint(ans)\", \"\\n\\n\\ndef __starting_point():\\n    n = int(input())\\n    orders = []\\n    for _ in range(n):\\n        a,b = list(map(int,input().split()))\\n        orders.append((b,a))\\n\\n    sorders = sorted(orders)\\n    cnt = 0\\n    now = 1\\n    for i in range(0,len(sorders)):\\n        #print(now)\\n        if sorders[i][1]>now or i==0:\\n            cnt += 1\\n            now = sorders[i][0]\\n    print(cnt)\\n\\n__starting_point()\", \"r = lambda: map(int, input().split())\\n\\nn, = r()\\na = sorted(tuple(r()) for _ in range(n))[::-1]\\n\\nret, left = 0, 10**9 + 1\\nfor l, r in a:\\n\\tif r < left:\\n\\t\\tret += 1\\n\\t\\tleft = l\\n\\nprint(ret)\", \"ints = lambda:list(map(int,input().split()))\\nrd = lambda:input()\\nn=ints()[0]\\nA = []\\nfor i in range(n):\\n    l,r = ints()\\n    A.append((r,r-l))\\nA.sort()\\ncnt,ct = 0,0\\nfor p in A:\\n    if ct + p[1] > p[0]:\\n        continue\\n    else:\\n        ct = p[0] + 1\\n        cnt+=1\\nprint (cnt)\\n\", \"n = int(input())\\nA = [0] * n\\n\\nfor i in range(n):\\n    A[i] = tuple(map(int, input().split()))\\n\\nA.sort(key = lambda x: x[1])\\nnow, res = 0, 0\\n\\nfor i in range(n):\\n    if A[i][0] > now:\\n        now = A[i][1]\\n        res += 1\\n      \\nprint(res)\", \"\\\"\\\"\\\"\\nCodeforces Testing Round #12\\n\\nProblem 597B. Restaurant\\n\\n@author yamaton\\n@date 2015-11-11\\n\\\"\\\"\\\"\\n\\nimport math\\nimport operator\\nimport random\\nimport sys\\nimport functools\\nimport collections\\n\\n\\ndef solve(pairs):\\n    pairs.sort(key=operator.itemgetter(1))\\n    progress = -1\\n    cnt = 0\\n    for (s, f) in pairs:\\n        if progress < s:\\n            progress = f\\n            cnt += 1\\n    return cnt\\n\\n\\ndef solve0(pairs):\\n    pairs.sort()\\n    d = collections.defaultdict(int)\\n    maxval = 0\\n    for (s, f) in pairs:\\n        d[f] = 1 + max((d[k] for k in d.keys() if k < s), default=0)\\n        maxval = max(maxval, d[f])\\n    return maxval\\n\\n\\ndef p(*args, **kwargs):\\n    return print(file=sys.stderr, *args, **kwargs)\\n\\n\\ndef main():\\n    n = int(input())\\n    pairs = [tuple(int(i) for i in input().strip().split()) for _ in range(n)]\\n    result = solve(pairs)\\n    print(result)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n = int(input())\\n\\norder = [[int(__) for __ in input().split()] for _ in range(n)]\\norder.sort(key=lambda x: x[1])\\n\\nans = 0\\nright = -1\\nfor i in order:\\n\\tif right < i[0]:\\n\\t\\tans += 1\\n\\t\\tright = i[1]\\nprint(ans)\", \"r = lambda: map(int, input().split())\\n\\nn, = r()\\na = sorted(tuple(r()) for _ in range(n))[::-1]\\n\\nret, left = 0, 10**9 + 1\\nfor l, r in a:\\n    if r < left:\\n        ret += 1\\n        left = l\\n\\nprint(ret)\", \"r = lambda: map(int, input().split())\\n\\nn, = r()\\na = sorted(tuple(r()) for _ in range(n))[::-1]\\n\\nret, left = 0, 10**9 + 1\\nfor l, r in a:\\n    if r < left:\\n        ret += 1\\n        left = l\\n\\nprint(ret)\", \"a=int(input())\\nb=[]\\ntotal=0\\nfor i in range(a):\\n    x,y=list(map(int,input().split()))\\n    b.append([x,y])\\nb.sort(key=lambda x: x[1])\\nending=0\\nfor i in b:\\n    if i[0]>ending:\\n        total+=1\\n        ending=i[1]\\nprint(total)\\n\", \"n=int(input())\\nl=[]\\nfor i in range(n):\\n    a,b = list(map(int,input().split()))\\n    l.append([a,b])\\nl.sort(key=lambda x: x[1])\\nc=t=0\\nfor i in range(len(l)):\\n    if t<int(l[i][0]):\\n        t=int(l[i][1])\\n        c+=1\\nprint(c)\\n\\n\", \"n = int(input())\\n\\ndata = []\\n\\nfor num in range(n):\\n    t = input()\\n    (l, r) = t.split(\\\" \\\")\\n    l = int(l)\\n    r = int(r)\\n    data.append((l, r))\\n\\ndata = sorted(data, key = lambda s : s[1])\\n\\nnum = 1\\n\\nci = data[0]\\n\\nfor item in data:\\n    (il, ir) = item\\n    (cl, cr) = ci\\n    if (il > cr):\\n        ci = item\\n        num += 1\\n\\nprint(num)\\n\", \"def main():\\n    tt = list(tuple(map(int, input().split())) for _ in range(int(input())))\\n    tt.sort(key=lambda e: e.__getitem__(1))\\n    res = t = 0\\n    for l, r in tt:\\n        if t < l:\\n            t = r\\n            res += 1\\n    print(res)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def main():\\n    res = t = 0\\n    for r, l in sorted((tuple(map(int, reversed(input().split()))) for _ in range(int(input())))):\\n        if t < l:\\n            t = r\\n            res += 1\\n    print(res)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def main():\\n    res = t = 0\\n    for l, r in sorted((tuple(map(int, input().split())) for _ in range(int(input()))), key=lambda e: e[1]):\\n        if t < l:\\n            t = r\\n            res += 1\\n    print(res)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"cin = lambda:map(int,input().split())\\nn, = cin()\\na=[]\\ncount=1\\nfor i in range(0,n):\\n       a.append(tuple(list(cin())[::-1]))\\na.sort()   \\nref = a[0][0]\\nfor i in range(1,len(a)):\\n    if a[i][1]>ref:\\n        count+=1\\n        ref=a[i][0] \\nprint(count)\", \"r = lambda: map(int, input().split())\\n\\nn, = r()\\na = sorted(tuple(r()) for _ in range(n))[::-1]\\n\\nret, left = 0, 10**9 + 1\\nfor l, r in a:\\n\\tif r < left:\\n\\t\\tret += 1\\n\\t\\tleft = l\\n\\nprint(ret)\", \"n=int(input())\\na=[]\\nfor _ in range(n):\\n    x,y=map(int,input().split())\\n    a.append((x,y))\\na=sorted(a,key=lambda y: (y[0],y[1]-y[0]))\\nprev=(0,0)\\norders=0\\nfor order in a:\\n    s,e=order\\n    if s>prev[1]:\\n        prev=order\\n        orders+=1\\n    elif e<prev[1]:\\n        prev=order\\nprint(orders)\", \"def f(x):\\n    return x[1]\\n\\nn = int(input())\\nL = []\\nfor i in range(n):\\n    order = [int(s) for s in input().split()]\\n    L.append(order)\\nL = sorted(L,key=f)\\nlast = [L[0][1]]\\nitem = 1\\nwhile item < n:\\n    while item < n-1 and (L[item][1] <= last[-1] or L[item][0] <= last[-1]):\\n        item += 1\\n    if L[item][1] > last[-1] and L[item][0] > last[-1]:\\n        last.append(L[item][1])\\n    item += 1\\nprint(len(last))\", \"n=int(input())\\na=[]\\nfor i in range(n):\\n\\tx,y=list(map(int,input().split()))\\n\\ta.append((y,x))\\na.sort()\\ncnt=0;cur=-10\\ni=0\\nwhile i<n:\\n\\tif cur<a[i][1]:\\n\\t\\tcur=a[i][0]\\n\\t\\tcnt+=1\\n\\ti+=1\\nprint(cnt)\\n\", \"n=int(input())\\na=[]\\nfor i in range(n):\\n\\ta.append(tuple(map(int,input().split())))\\na.sort(key=lambda x:x[1])\\ncnt=0;cur=-10\\ni=0\\nwhile i<n:\\n\\tif cur<a[i][0]:\\n\\t\\tcur=a[i][1]\\n\\t\\tcnt+=1\\n\\ti+=1\\nprint(cnt)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2\\n7 11\\n4 7\\n\",\n    \"5\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n\",\n    \"6\\n4 8\\n1 5\\n4 7\\n2 5\\n1 3\\n6 8\\n\",\n    \"1\\n1 1\\n\",\n    \"2\\n4 6\\n4 8\\n\",\n    \"3\\n22 22\\n14 21\\n9 25\\n\",\n    \"4\\n20 59\\n30 62\\n29 45\\n29 32\\n\",\n    \"5\\n40 124\\n40 117\\n67 106\\n36 121\\n38 102\\n\",\n    \"6\\n124 155\\n50 93\\n45 120\\n54 171\\n46 190\\n76 179\\n\",\n    \"7\\n94 113\\n54 248\\n64 325\\n280 306\\n62 328\\n49 341\\n90 324\\n\",\n    \"8\\n116 416\\n104 472\\n84 476\\n100 486\\n199 329\\n169 444\\n171 487\\n134 441\\n\",\n    \"9\\n90 667\\n366 539\\n155 462\\n266 458\\n323 574\\n101 298\\n90 135\\n641 661\\n122 472\\n\",\n    \"10\\n195 443\\n229 602\\n200 948\\n229 876\\n228 904\\n296 656\\n189 818\\n611 626\\n215 714\\n403 937\\n\",\n    \"1\\n28 74\\n\",\n    \"2\\n28 92\\n2 59\\n\",\n    \"3\\n5 92\\n1 100\\n39 91\\n\",\n    \"4\\n4 92\\n29 43\\n13 73\\n10 79\\n\",\n    \"5\\n64 86\\n61 61\\n46 54\\n83 94\\n19 46\\n\",\n    \"6\\n80 84\\n21 24\\n44 80\\n14 53\\n5 10\\n61 74\\n\",\n    \"7\\n32 92\\n32 86\\n13 25\\n45 75\\n16 65\\n1 99\\n17 98\\n\",\n    \"8\\n3 59\\n22 94\\n26 97\\n18 85\\n7 84\\n1 100\\n4 100\\n26 93\\n\",\n    \"9\\n11 90\\n8 95\\n62 95\\n43 96\\n16 84\\n3 70\\n23 93\\n4 96\\n11 86\\n\",\n    \"10\\n30 45\\n5 8\\n51 83\\n37 52\\n49 75\\n28 92\\n94 99\\n4 13\\n61 83\\n36 96\\n\",\n    \"11\\n38 92\\n16 85\\n32 43\\n65 84\\n63 100\\n21 45\\n13 92\\n29 58\\n56 94\\n18 83\\n50 81\\n\",\n    \"12\\n66 78\\n41 97\\n55 69\\n55 61\\n36 64\\n14 97\\n96 99\\n28 58\\n44 93\\n2 100\\n42 88\\n1 2\\n\",\n    \"13\\n50 85\\n38 65\\n5 51\\n50 96\\n4 92\\n23 94\\n2 99\\n2 84\\n1 98\\n2 100\\n12 100\\n21 97\\n7 84\\n\",\n    \"14\\n17 92\\n7 96\\n49 96\\n10 99\\n7 98\\n12 85\\n10 52\\n2 99\\n23 75\\n4 98\\n7 100\\n2 69\\n6 99\\n20 87\\n\",\n    \"15\\n1 58\\n15 21\\n53 55\\n59 90\\n68 71\\n29 51\\n52 81\\n32 52\\n38 44\\n57 59\\n47 60\\n27 32\\n49 86\\n26 94\\n44 45\\n\",\n    \"16\\n4 80\\n16 46\\n15 16\\n60 63\\n8 54\\n18 49\\n67 99\\n72 80\\n1 8\\n19 64\\n1 54\\n46 94\\n2 89\\n67 78\\n21 47\\n5 29\\n\",\n    \"17\\n34 42\\n31 84\\n8 96\\n63 88\\n11 99\\n80 99\\n1 96\\n11 12\\n27 28\\n4 30\\n1 79\\n16 86\\n15 86\\n13 80\\n3 98\\n37 89\\n59 88\\n\",\n    \"18\\n11 94\\n12 85\\n25 90\\n7 61\\n63 88\\n6 87\\n49 88\\n16 76\\n12 78\\n61 84\\n3 84\\n20 91\\n1 84\\n17 100\\n43 80\\n8 86\\n9 98\\n35 97\\n\",\n    \"19\\n24 63\\n23 86\\n5 89\\n10 83\\n31 92\\n8 96\\n21 63\\n1 83\\n2 100\\n5 96\\n18 98\\n9 77\\n11 91\\n44 95\\n1 98\\n22 60\\n5 98\\n22 91\\n1 96\\n\",\n    \"20\\n22 77\\n13 50\\n55 64\\n16 52\\n67 96\\n49 51\\n59 95\\n2 25\\n69 91\\n2 24\\n4 46\\n50 74\\n45 63\\n39 55\\n31 33\\n9 33\\n6 72\\n14 67\\n56 98\\n69 94\\n\",\n    \"1\\n1 1000000000\\n\",\n    \"4\\n1 1000000000\\n1 1000000000\\n1 1000000000\\n1 1000000000\\n\",\n    \"2\\n1000000000 1000000000\\n1 1\\n\",\n    \"4\\n1 10000\\n2 3\\n4 5\\n6 7\\n\",\n    \"3\\n1 10\\n2 4\\n6 8\\n\",\n    \"2\\n1 4\\n2 3\\n\",\n    \"3\\n1 100\\n2 3\\n4 5\\n\",\n    \"4\\n1 10\\n2 3\\n4 5\\n6 7\\n\",\n    \"3\\n1 5\\n2 3\\n4 4\\n\",\n    \"3\\n1 1000\\n1 5\\n6 1000\\n\",\n    \"3\\n1 10000\\n3 5\\n7 8\\n\",\n    \"4\\n1 5\\n6 15\\n8 10\\n11 17\\n\",\n    \"4\\n1 3\\n6 800\\n7 9\\n10 11\\n\",\n    \"5\\n1 10\\n2 3\\n4 5\\n6 7\\n8 9\\n\",\n    \"3\\n1 5\\n1 3\\n4 6\\n\",\n    \"3\\n1 10\\n2 3\\n4 5\\n\",\n    \"2\\n1 3\\n2 4\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/597/B",
  "starter_code": ""
}