{
  "task_id": "APPS/65",
  "problem_id": 65,
  "prompt": "You are given an array of n integer numbers a_0, a_1, ..., a_{n} - 1. Find the distance between two closest (nearest) minimums in it. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Input-----\n\nThe first line contains positive integer n (2 \u2264 n \u2264 10^5) \u2014 size of the given array. The second line contains n integers a_0, a_1, ..., a_{n} - 1 (1 \u2264 a_{i} \u2264 10^9) \u2014 elements of the array. It is guaranteed that in the array a minimum occurs at least two times.\n\n\n-----Output-----\n\nPrint the only number \u2014 distance between two nearest minimums in the array.\n\n\n-----Examples-----\nInput\n2\n3 3\n\nOutput\n1\n\nInput\n3\n5 6 5\n\nOutput\n2\n\nInput\n9\n2 1 3 5 4 1 2 3 1\n\nOutput\n3",
  "solutions": "[\"n = int(input())\\nA = [int(x) for x in input().split()]\\nmn = min(A)\\n\\nI = [i for i in range(len(A)) if A[i] == mn]\\nmindiff = min(I[i]-I[i-1] for i in range(1,len(I)))\\nprint(mindiff)\\n\", \"n = int(input())\\nz = list(map(int, input().split()))\\nfor i in range(n):\\n    z[i] = [z[i], i]\\nz.sort()\\nans = 1e9\\nfor i in range(1, n):\\n    if z[i][0] == z[0][0]:\\n        ans = min(ans, z[i][1] - z[i - 1][1])\\nprint(ans)\\n\", \"n = int(input())\\nL = list(map(int, input().split()))\\n\\nx = min(L)\\n\\nprv = -1\\nans = 10**100\\nfor i in range(n):\\n\\tif (L[i] == x):\\n\\t\\tif (prv != -1):\\n\\t\\t\\tans = min(ans, i - prv);\\n\\t\\tprv = i\\nprint(ans)\", \"n = int(input())\\n\\na = list(map(int, input().strip().split()))\\n\\nx = min(a)\\n\\nbest = 10**6\\nlast = None\\ni = 0\\nwhile i < len(a):\\n    if a[i] == x:\\n        if last is None:\\n            last = i\\n        else:\\n            razlika = i - last\\n            best = min(razlika, best)\\n            last = i\\n    i += 1\\nprint(best)\\n\", \"n=int(input())\\nA=[int(i) for i in input().split(\\\" \\\")]\\nx=min(A)\\nans=n\\nfor i in range(n):\\n    if A[i]==x:\\n        j=1\\n        while i+j<n and A[i+j]!=x:\\n            j+=1\\n        if i+j<n and A[i+j]==x:\\n            ans=min(ans, j)\\nprint(ans)\\n\", \"n=int(input())\\nl=list(map(int,input().split()))\\nx=min(l)\\nls=[]\\nfor i in range(n):\\n    if l[i]==x:\\n        ls.append(i)\\nans=n+1\\nfor i in range(len(ls)-1):\\n    ans=min(ans,ls[i+1]-ls[i])\\nprint(ans)\", \"n=int(input())\\na=[int(i) for i in input().split()]\\np=[]\\nz=min(a)\\nfor i in range(n):\\n    if a[i]==z:\\n        p.append(i)\\nx=[]\\nfor i in range(len(p)-1):\\n    x.append(p[i+1]-p[i])\\nprint(min(x))\\n\", \"from sys import stdin, stdout\\n\\nINF = float('inf')\\nn = int(stdin.readline())\\nvalues = list(map(int, stdin.readline().split()))\\n\\nans = INF\\nprevious = -INF\\nmn = min(values)\\n\\nfor i in range(n):\\n    if values[i] == mn:\\n        ans = min(ans, i - previous)\\n        previous = i\\n\\nstdout.write(str(ans))\", \"n = int(input())\\ns = list(map(int, input().split()))\\nq = set()\\np = []\\nm = min(s)\\nz = 0\\nfor i in range(len(s)):\\n\\tif s[i] == m:\\n\\t\\tp.append(i)\\nz = [p[i + 1] - p[i] for i in range(len(p) - 1)]\\nprint(min(z))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\nmn = min(a)\\npm = None\\nans = n+1\\nfor i in range(n):\\n    if a[i] == mn:\\n        if pm is not None:\\n            ans = min(ans, i - pm)\\n        pm = i\\nprint(ans)\", \"n=int(input())\\narr=list(map(int,input().strip().split(' ')))\\np=min(arr)\\nflag=0\\nans=100000000\\nfor i in range(n):\\n\\tif(arr[i]==p and flag==0):\\n\\t\\tstart=i\\n\\t\\tflag=1\\n\\telif(arr[i]==p and flag==1):\\n\\t\\tans=min(ans,i-start)\\n\\t\\tstart=i\\nprint(ans)\\n\\n\", \"n=int(input())\\nar=list(map(int,input().split()))\\nmn=min(ar)\\nprev=-float('inf')\\nans=float('inf')\\nfor i in range(n):\\n    if ar[i] == mn:\\n        ans=min(ans,i-prev)\\n        prev=i\\nprint(ans)\\n\", \"n=int(input())\\nnum=list(map(int,input().split()))\\nmn=min(num)\\ni=0\\nwhile num[i]!=mn:\\t\\n\\ti+=1\\ncur=i\\nans=n\\nfor i in range(cur+1,n):\\n\\tif(num[i]==mn):\\n\\t\\tans=min(ans,i-cur)\\n\\t\\tcur=i\\nprint (ans)\", \"n=int(input())\\na=list(map(int,input().split()))\\nmini=min(a)\\ns1=a.index(mini)\\ns2=0\\nfor i in range(s1+1,n):\\n    if(a[i]==mini):\\n        s2=i\\n        break\\nans=s2-s1\\nfor i in range(s2+1,n):\\n    if(a[i]==mini):\\n        ans=min(ans,i-s2)\\n        s1=s2\\n        s2=i\\nprint(ans)\", \"\\nn = input()\\narr = list(map(int, input().strip().split()))\\n\\nmini = None\\nmin_dist = None\\npositions = []\\nlast = -1\\nfor i, a in enumerate(arr):\\n    if mini is None or a < mini:\\n        mini = a\\n        last = i\\n        min_dist = None\\n    elif mini == a:\\n        d = i - last\\n        if min_dist is None or d < min_dist:\\n            min_dist = d\\n        last = i\\nprint(min_dist)\\n\", \"a = int(input())\\nl = [int(i)for i in input().split()]\\nx = min(l)\\nid = 0\\nfor i in l:\\n\\tif i == x:break\\n\\tid += 1\\nd = 1000000\\nfor j in range(id+1,len(l)):\\n\\tif l[j] == x:\\n\\t\\td = min(d,j - id)\\n\\t\\tid = j\\nprint(d)\\t\\t\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\nm = min(a)\\n\\nans = 1000000000\\nprev = -1\\n\\nfor i in range(n):\\n    if a[i] == m:\\n        if prev != -1:\\n            ans = min(ans, i - prev)\\n        prev = i\\n\\n\\nprint(ans)\\n\", \"k = int(input())\\nx = list(map(int,input().split()))\\nm = min(x)\\nz = []\\nfor i in range(k):\\n\\tif x[i] == m:\\n\\t\\tz += [i]\\nj = []\\nfor i in range(1, len(z)):\\n\\tj += [z[i] - z[i-1]]\\nprint(min(j))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\nx = min(a)\\nlength = n\\nind = -1\\nfor i in range(n):\\n\\tif a[i] == x and ind == -1:\\n\\t\\tind = i\\n\\telif a[i] == x and ind >= 0:\\n\\t\\tif i - ind < length:\\n\\t\\t\\tlength = i - ind\\n\\t\\tind = i\\nprint(length)\\t\\t\\t\\n\", \"n = int(input())\\na = [int(x) for x in input().strip().split(' ')]\\nm = min(a)\\n\\ni = [x for x in range(n) if a[x] == m]\\n\\nd = [i[x + 1] - i[x] for x in range(len(i) - 1)]\\nprint(min(d))\\n\", \"n = int(input())\\na = [int(v) for v in input().split()]\\n\\nbestd = len(a)\\nmi = 0\\nm = a[0]\\nfor i in range(1, len(a)):\\n    if a[i] < m:\\n        m = a[i]\\n        mi = i\\n        bestd = len(a)\\n    elif a[i] == m:\\n        currd = i - mi\\n        if currd < bestd:\\n            bestd = currd\\n        mi = i\\n\\nprint(bestd)\\n\", \"import sys\\ntaille = int(sys.stdin.readline())\\ntableau = list(map(int, sys.stdin.readline().split()))\\nmini = min(tableau)\\npre = -1\\nminDist = 10**7\\nfor loop in range(taille):\\n\\tif tableau[loop] == mini:\\n\\t\\tif pre == -1:\\n\\t\\t\\tpre = loop\\n\\t\\telse:\\n\\t\\t\\tminDist = min(loop-pre, minDist)\\n\\t\\t\\tpre = loop\\nprint(minDist)\\t\\t\", \"n = int(input())\\na = list(map(int, input().split()))\\nmn = min(a)\\nincs = []\\nfor i in range(len(a)):\\n\\tif a[i] == mn:\\n\\t\\tincs.append(i)\\nprint(min([incs[i] - incs[i - 1] for i in range(1, len(incs))]))\", \"def lInt(d = None): return list(map(int, input().split(d)))\\n\\nn, *_ = lInt()\\na = list(lInt())\\nmini = min(a)\\np = []\\nans = 10000000\\n\\nfor i, v in enumerate(a):\\n  if v == mini:\\n    p.append(i)\\nfor i, j in enumerate(p):\\n  if i > 0 and p[i]-p[i-1] < ans:\\n    ans = p[i]-p[i-1]\\n\\nprint(ans)\\n\\n\", \"n=int(input())\\na=list(map(int, input().split()))\\nmin_a = min(a)\\nans = 1000000000000000000\\nprev_idx = -1000000000000000\\nfor i in range(n):\\n\\tif a[i] == min_a:\\n\\t\\tans = min(ans, i-prev_idx)\\n\\t\\tprev_idx = i\\nprint(ans)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2\\n3 3\\n\",\n    \"3\\n5 6 5\\n\",\n    \"9\\n2 1 3 5 4 1 2 3 1\\n\",\n    \"6\\n4 6 7 8 6 4\\n\",\n    \"2\\n1000000000 1000000000\\n\",\n    \"42\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"2\\n10000000 10000000\\n\",\n    \"5\\n100000000 100000001 100000000 100000001 100000000\\n\",\n    \"9\\n4 3 4 3 4 1 3 3 1\\n\",\n    \"3\\n10000000 1000000000 10000000\\n\",\n    \"12\\n5 6 6 5 6 1 9 9 9 9 9 1\\n\",\n    \"5\\n5 5 1 2 1\\n\",\n    \"5\\n2 2 1 3 1\\n\",\n    \"3\\n1000000000 1000000000 1000000000\\n\",\n    \"3\\n100000005 1000000000 100000005\\n\",\n    \"5\\n1 2 2 2 1\\n\",\n    \"3\\n10000 1000000 10000\\n\",\n    \"3\\n999999999 999999998 999999998\\n\",\n    \"6\\n2 1 1 2 3 4\\n\",\n    \"4\\n1000000000 900000000 900000000 1000000000\\n\",\n    \"5\\n7 7 2 7 2\\n\",\n    \"6\\n10 10 1 20 20 1\\n\",\n    \"2\\n999999999 999999999\\n\",\n    \"10\\n100000 100000 1 2 3 4 5 6 7 1\\n\",\n    \"10\\n3 3 1 2 2 1 10 10 10 10\\n\",\n    \"5\\n900000000 900000001 900000000 900000001 900000001\\n\",\n    \"5\\n3 3 2 5 2\\n\",\n    \"2\\n100000000 100000000\\n\",\n    \"10\\n10 15 10 2 54 54 54 54 2 10\\n\",\n    \"2\\n999999 999999\\n\",\n    \"6\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n\",\n    \"5\\n1000000000 100000000 1000000000 1000000000 100000000\\n\",\n    \"4\\n10 9 10 9\\n\",\n    \"5\\n1 3 2 3 1\\n\",\n    \"5\\n2 2 1 4 1\\n\",\n    \"6\\n1 2 2 2 2 1\\n\",\n    \"7\\n3 7 6 7 6 7 3\\n\",\n    \"8\\n1 2 2 2 2 1 2 2\\n\",\n    \"10\\n2 2 2 3 3 1 3 3 3 1\\n\",\n    \"2\\n88888888 88888888\\n\",\n    \"3\\n100000000 100000000 100000000\\n\",\n    \"10\\n1 3 2 4 5 5 4 3 2 1\\n\",\n    \"5\\n2 2 1 2 1\\n\",\n    \"6\\n900000005 900000000 900000001 900000000 900000001 900000001\\n\",\n    \"5\\n41 41 1 41 1\\n\",\n    \"6\\n5 5 1 3 3 1\\n\",\n    \"8\\n1 2 2 2 1 2 2 2\\n\",\n    \"7\\n6 6 6 6 1 8 1\\n\",\n    \"3\\n999999999 1000000000 999999999\\n\",\n    \"5\\n5 5 4 10 4\\n\",\n    \"11\\n2 2 3 4 1 5 3 4 2 5 1\\n\",\n    \"5\\n3 5 4 5 3\\n\",\n    \"6\\n6 6 6 6 1 1\\n\",\n    \"7\\n11 1 3 2 3 1 11\\n\",\n    \"5\\n3 3 1 2 1\\n\",\n    \"5\\n4 4 2 5 2\\n\",\n    \"4\\n10000099 10000567 10000099 10000234\\n\",\n    \"4\\n100000009 100000011 100000012 100000009\\n\",\n    \"2\\n1000000 1000000\\n\",\n    \"2\\n10000010 10000010\\n\",\n    \"10\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n\",\n    \"8\\n2 6 2 8 1 9 8 1\\n\",\n    \"5\\n7 7 1 8 1\\n\",\n    \"7\\n1 3 2 3 2 3 1\\n\",\n    \"7\\n2 3 2 1 3 4 1\\n\",\n    \"5\\n1000000000 999999999 1000000000 1000000000 999999999\\n\",\n    \"4\\n1000000000 1000000000 1000000000 1000000000\\n\",\n    \"5\\n5 5 3 5 3\\n\",\n    \"6\\n2 3 3 3 3 2\\n\",\n    \"4\\n1 1 2 2\\n\",\n    \"5\\n1 1 2 2 2\\n\",\n    \"6\\n2 1 1 2 2 2\\n\",\n    \"5\\n1000000000 1000000000 100000000 1000000000 100000000\\n\",\n    \"7\\n2 2 1 1 2 2 2\\n\",\n    \"8\\n2 2 2 1 1 2 2 2\\n\",\n    \"10\\n2 2 2 2 2 1 1 2 2 2\\n\",\n    \"11\\n2 2 2 2 2 2 1 1 2 2 2\\n\",\n    \"12\\n2 2 2 2 2 2 2 1 1 2 2 2\\n\",\n    \"13\\n2 2 2 2 2 2 2 2 1 1 2 2 2\\n\",\n    \"14\\n2 2 2 2 2 2 2 2 2 1 1 2 2 2\\n\",\n    \"15\\n2 2 2 2 2 2 2 2 2 2 1 1 2 2 2\\n\",\n    \"16\\n2 2 2 2 2 2 2 2 2 2 2 1 1 2 2 2\\n\",\n    \"17\\n2 2 2 2 2 2 2 2 2 2 2 2 1 1 2 2 2\\n\",\n    \"18\\n2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 2 2 2\\n\",\n    \"19\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 2 2 2\\n\",\n    \"20\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 2 2 2\\n\",\n    \"4\\n1000000000 100000000 100000000 1000000000\\n\",\n    \"21\\n2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 2 2 2\\n\",\n    \"4\\n1 2 3 1\\n\",\n    \"8\\n5 5 5 5 3 5 5 3\\n\",\n    \"7\\n2 3 2 1 4 4 1\\n\",\n    \"6\\n3 3 1 2 4 1\\n\",\n    \"3\\n2 1 1\\n\",\n    \"5\\n3 3 2 8 2\\n\",\n    \"5\\n1 2 1 2 2\\n\",\n    \"4\\n1 2 1 2\\n\",\n    \"5\\n3 1 1 3 2\\n\",\n    \"4\\n1 1 2 1\\n\",\n    \"4\\n2 2 1 1\\n\",\n    \"5\\n1 2 2 1 2\\n\",\n    \"7\\n2 1 2 1 1 2 1\\n\",\n    \"9\\n200000 500000 500000 500000 200000 500000 500000 500000 500000\\n\",\n    \"3\\n1 1 2\\n\",\n    \"85\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 1\\n\",\n    \"5\\n1000000000 1000000000 999999999 1000000000 999999999\\n\",\n    \"5\\n2 1 2 2 1\\n\",\n    \"3\\n1 1 1\\n\",\n    \"4\\n1 2 1 1\\n\",\n    \"6\\n1 3 4 2 4 1\\n\",\n    \"9\\n2 2 5 1 6 8 7 9 1\\n\",\n    \"10\\n1000000000 1000000000 1000000000 999999999 1000000000 1000000000 1000000000 1000000000 1000000000 999999999\\n\",\n    \"7\\n3 3 1 2 4 1 2\\n\",\n    \"7\\n3 3 1 2 3 4 1\\n\",\n    \"8\\n10 5 10 1 10 10 10 1\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"6\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"7\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"9\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"6\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"6\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"84\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"4\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/911/A",
  "starter_code": ""
}