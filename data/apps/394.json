{
  "task_id": "APPS/394",
  "problem_id": 394,
  "prompt": "Bajtek, known for his unusual gifts, recently got an integer array $x_0, x_1, \\ldots, x_{k-1}$.\n\nUnfortunately, after a huge array-party with his extraordinary friends, he realized that he'd lost it. After hours spent on searching for a new toy, Bajtek found on the arrays producer's website another array $a$ of length $n + 1$. As a formal description of $a$ says, $a_0 = 0$ and for all other $i$\u00a0($1 \\le i \\le n$) $a_i = x_{(i-1)\\bmod k} + a_{i-1}$, where $p \\bmod q$ denotes the remainder of division $p$ by $q$.\n\nFor example, if the $x = [1, 2, 3]$ and $n = 5$, then:  $a_0 = 0$,  $a_1 = x_{0\\bmod 3}+a_0=x_0+0=1$,  $a_2 = x_{1\\bmod 3}+a_1=x_1+1=3$,  $a_3 = x_{2\\bmod 3}+a_2=x_2+3=6$,  $a_4 = x_{3\\bmod 3}+a_3=x_0+6=7$,  $a_5 = x_{4\\bmod 3}+a_4=x_1+7=9$. \n\nSo, if the $x = [1, 2, 3]$ and $n = 5$, then $a = [0, 1, 3, 6, 7, 9]$.\n\nNow the boy hopes that he will be able to restore $x$ from $a$! Knowing that $1 \\le k \\le n$, help him and find all possible values of $k$\u00a0\u2014 possible lengths of the lost array.\n\n\n-----Input-----\n\nThe first line contains exactly one integer $n$ ($1 \\le n \\le 1000$)\u00a0\u2014 the length of the array $a$, excluding the element $a_0$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^6$).\n\nNote that $a_0$ is always $0$ and is not given in the input.\n\n\n-----Output-----\n\nThe first line of the output should contain one integer $l$ denoting the number of correct lengths of the lost array.\n\nThe second line of the output should contain $l$ integers\u00a0\u2014 possible lengths of the lost array in increasing order.\n\n\n-----Examples-----\nInput\n5\n1 2 3 4 5\n\nOutput\n5\n1 2 3 4 5 \nInput\n5\n1 3 5 6 8\n\nOutput\n2\n3 5 \nInput\n3\n1 5 3\n\nOutput\n1\n3 \n\n\n-----Note-----\n\nIn the first example, any $k$ is suitable, since $a$ is an arithmetic progression.\n\nPossible arrays $x$:  $[1]$ $[1, 1]$ $[1, 1, 1]$ $[1, 1, 1, 1]$  $[1, 1, 1, 1, 1]$\n\nIn the second example, Bajtek's array can have three or five elements.\n\nPossible arrays $x$:  $[1, 2, 2]$ $[1, 2, 2, 1, 2]$\n\nFor example, $k = 4$ is bad, since it leads to $6 + x_0 = 8$ and $0 + x_0 = 1$, which is an obvious contradiction.\n\nIn the third example, only $k = n$ is good.\n\nArray $[1, 4, -2]$ satisfies the requirements.\n\nNote that $x_i$ may be negative.",
  "solutions": "[\"n = int(input())\\na = list(map(int, input().split()))\\nans = []\\n\\nfor k in range(1, n + 1):\\n    x = [0] * k\\n\\n    x[0] = a[0]\\n    for i in range(1, k):\\n        x[i] = a[i] - a[i - 1]\\n\\n    ok = True\\n    for i in range(k, n):\\n        if x[i % k] != a[i] - a[i - 1]:\\n            ok = False\\n            break\\n    if ok:\\n        ans.append(k)\\n\\nprint(len(ans))\\nprint(*ans)\\n\", \"n = int(input())\\na = input().split()\\nb = [0]*n\\nb[0] = int(a[0])\\nfor i in range(1,n):\\n    b[i] = int(a[i])-int(a[i-1])\\nworks = 0\\nout = \\\"\\\"\\nfor j in range(1,n+1):\\n    bo = True\\n    for k in range(n):\\n        if b[k] != b[k%j]:\\n            bo = False\\n            break\\n    if bo:\\n        works += 1\\n        out += str(j) + \\\" \\\"\\nprint(works)\\nprint(out[:-1])\\n\", \"n = int(input())\\n\\na = list(map(int, input().split()))\\n\\ndiffs = [a[0]]\\n\\nfor i in range(1,n):\\n    diffs.append(a[i] - a[i-1])\\n\\noutput = []\\nfor l in range(1,n+1):\\n    flag = True\\n\\n    for i in range(l, n):\\n        if diffs[i] != diffs[i-l]:\\n            flag = False\\n            break\\n\\n    if flag:\\n        output.append(l)\\n\\nprint(len(output))\\n\\nfor i in output:\\n    print(i, end=\\\" \\\")\\n\", \"def ii():\\n    return int(input())\\ndef mi():\\n    return list(map(int, input().split()))\\ndef li():\\n    return list(mi())\\n\\nn = ii()\\na = [0] + li()\\nd = [a[i] - a[i - 1] for i in range(1, n + 1)]\\n\\nans = []\\nfor i in range(1, n + 1):\\n    ok = all(d[j] == d[j % i] for j in range(n))\\n    if ok: ans.append(i)\\nprint(len(ans))\\nprint(*ans)\\n\", \"n = int(input())\\nxs = [int(x) for x in input().split()]\\n\\narr_k = [xs[0]]\\n\\nfor i in range(1, len(xs)):\\n\\tarr_k.append(xs[i] - xs[i - 1])\\n\\nsoln = []\\n# print(arr_k)\\nfor k in range(1, len(arr_k) + 1):\\n\\tmul = len(arr_k) // k + 1\\n\\t# print(k,arr_k[:k], mul)\\n\\ttmp = (arr_k[:k] * mul)[:len(arr_k)]\\n\\t# print(k, tmp)\\n\\tif tmp == arr_k:\\n\\t\\tsoln.append(k)\\nprint(len(soln))\\nprint(\\\" \\\".join(map(str, soln)))\", \"n = int(input())\\na = [int(k) for k in input().split()]\\nansw = []\\nfor k in range(1, n + 1):\\n    prev = 0\\n    arr = [0 for i in range(k)]\\n    good = True\\n    for i in range(n):\\n        if i < k:\\n            arr[i] = a[i] - prev\\n        else:\\n            if arr[i % k] != a[i] - prev:\\n                good = False\\n                break\\n        prev = a[i]\\n    if good:\\n        answ.append(k)\\nprint(len(answ))\\nprint(*answ)\\n\", \"n = int(input())\\narr = [0] + [int(i) for i in input().split(\\\" \\\")]\\ndiff = [arr[i] - arr[i-1] for i in range(1, len(arr))]\\nposs = []\\nfor xlen in range(1, len(diff)+1):\\n    rep = diff[0:xlen]\\n    for startpos in range(xlen, len(diff), xlen):\\n        currarr = diff[startpos:min(startpos+xlen, len(diff))]\\n        for obj in range(len(currarr)):\\n            if rep[obj] != currarr[obj]:\\n                break\\n        else:\\n            continue\\n        break\\n    else:\\n        poss.append(xlen)\\nprint(len(poss))\\nprint(' '.join([str(i) for i in poss]))\\n\", \"def main():\\n    n = int(input())\\n    a = [0] + list([int(x) for x in input().split(\\\" \\\")])\\n    d = [a[i+1] - a[i] for i in range(len(a)-1)]\\n    ans = 1\\n    alist = []\\n    for i in range(1, n):\\n        flag = True\\n        for j in range(n):\\n            if j >= i and d[j] != d[j-i]:\\n                flag = False\\n                break\\n        if flag:\\n            alist.append(i)\\n            ans += 1\\n    alist.append(n)\\n    print(ans)\\n    print(\\\" \\\".join([str(x) for x in alist]))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"# -*- coding: utf-8 -*-\\n\\nimport math\\nimport collections\\nimport bisect\\nimport heapq\\nimport time\\nimport random\\nimport itertools\\nimport sys\\n\\n\\\"\\\"\\\"\\ncreated by shhuan at 2018/10/20 22:37\\n\\n\\\"\\\"\\\"\\n\\n\\\"\\\"\\\"\\n# Definition for a Node.\\n\\\"\\\"\\\"\\n\\n\\n\\nN = int(input())\\nA = [0] + [int(x) for x in input().split()]\\n\\ndef check(k):\\n    X = [0] * k\\n    vis = [False] * k\\n    for i in range(1, N+1):\\n        ai = A[i]\\n        x = ai - A[i-1]\\n\\n        ix = (i-1) % k\\n        if not vis[ix]:\\n            vis[ix] = True\\n            X[ix] = x\\n        else:\\n            if X[ix] != x:\\n                return False\\n    return True\\n\\n\\n\\nans = []\\nfor i in range(1, N+1):\\n    if check(i):\\n        ans.append(i)\\n\\nprint(len(ans))\\nprint(' '.join(map(str, ans)))\", \"#      \\nimport collections, atexit, math, sys, bisect \\n\\nsys.setrecursionlimit(1000000)\\ndef getIntList():\\n    return list(map(int, input().split()))    \\n\\ntry :\\n    #raise ModuleNotFoundError\\n    import numpy\\n    def dprint(*args, **kwargs):\\n        #print(*args, **kwargs, file=sys.stderr)\\n        # in python 3.4 **kwargs is invalid???\\n        print(*args,  file=sys.stderr)\\n    dprint('debug mode')\\nexcept Exception:\\n    def dprint(*args, **kwargs):\\n        pass\\n\\n\\n\\ninId = 0\\noutId = 0\\nif inId>0:\\n    dprint('use input', inId)\\n    sys.stdin = open('input'+ str(inId) + '.txt', 'r') #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\nif outId>0:\\n    dprint('use output', outId)\\n    sys.stdout = open('stdout'+ str(outId) + '.txt', 'w') #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\n    atexit.register(lambda :sys.stdout.close())     #idle \\u4e2d\\u4e0d\\u4f1a\\u6267\\u884c atexit\\n    \\nN, = getIntList()\\n#print(N)\\nza = [0,] + getIntList()\\nzb = []\\nfor i in range(N):\\n    zb.append(za[i+1] - za[i])\\n\\ndprint(zb)\\n\\nres = [N]\\nfor i in range(1,N):\\n    ok = True\\n    for j in range(i,N):\\n        if zb[j] != zb[j%i]:\\n            ok = False\\n            break\\n    if ok:\\n        res.append(i)\\n\\nres.sort()\\nprint(len(res))\\nfor x in res:\\n    print(x,end = ' ')\\n\", \"n = int(input())\\na = [0] + [int(i) for i in input().split()]\\nd = [a[i] - a[i-1] for i in range(1, n+1)]\\nans = []\\nfor i in range(1, n+1):\\n    if (d[:i] * (n//i + 20))[:n] == d:\\n        ans.append(i)\\nprint(len(ans))\\nprint(' '.join([str(i) for i in ans]))\\n\", \"n=int(input())\\narr=list(map(int,input().split()))\\narr=[0]+arr\\nansarr=[]\\nfor i in range(1,n+1):\\n    valarr=[]\\n    for j in range(1,i+1):\\n        val=arr[j]-arr[j-1]\\n        valarr.append(val)\\n        flag=0\\n    #print(valarr)\\n    for j in range(i+1,n+1):\\n        if(arr[j]!=valarr[(j-1)%i]+arr[j-1]):\\n            flag=1\\n            break\\n\\n    if(flag==0):\\n        ansarr.append(i)\\nprint(len(ansarr))\\nprint(*ansarr)\\n\\n\\n\", \"n = int( input() )\\na = list( map( int, input().split() ) )\\n\\nfor i in range( n - 1, 0, -1 ):\\n    a[ i ] -= a[ i - 1 ]\\n\\nlens = []\\nfor l in range( 1, n + 1 ):\\n    f = True\\n    for i in range( n ):\\n        if a[ i ] != a[ i % l ]:\\n            f = False\\n    if f:\\n        lens.append( l )\\n\\nprint( len( lens ) )\\nfor i in lens:\\n    print( i, end= \\\" \\\")\\n\", \"n = int(input())\\nA = input().split()\\nA = [0] + [int(ai) for ai in A]\\n\\nvalid_k = []\\n\\nfor k in range(1, n + 1):\\n    X = []\\n    isvalid = True\\n    for i in range(1, n + 1):\\n        if i <= k:\\n            X.append(A[i] - A[i - 1])\\n        else:\\n            #print(A[i] - A[i - 1])\\n            #print(X[(i - 1) % k])\\n            if X[(i - 1) % k] != A[i] - A[i - 1]:\\n                isvalid = False\\n                break\\n    #print(X)\\n    #print(isvalid)\\n    if isvalid:\\n        valid_k.append(k)\\n\\nprint(len(valid_k))\\nprint(\\\" \\\".join([str(k) for k in valid_k]))\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.insert(0,0)\\nl = []\\nfor i in range(n):\\n\\tl.append(a[i + 1] - a[i])\\nr = []\\nfor i in range(1,n+1):\\n\\tm = l[:i]\\n\\tj = 0\\n\\tk = i\\n\\tf = True\\n\\twhile k<n:\\n\\t\\tif m[j] == l[k]:\\n\\t\\t\\tj = (j+1)%i\\n\\t\\t\\tk += 1\\n\\t\\telse:\\n\\t\\t\\tf = False\\n\\t\\t\\tbreak\\n\\tif f == True:\\n\\t\\tr.append(i)\\nprint(len(r))\\nprint(' '.join(map(str,r)))\", \"import sys\\nimport math\\n\\ndef period(x):\\n    n = len(x)\\n    res = []\\n    for i in range(1, len(x)):\\n        if all(i==j for i,j in zip(x, x[i:])):\\n            res.append(i)\\n    return res + [n]\\n\\ndef main():\\n    [n] = map(int, next(sys.stdin).split())\\n    a = list(map(int, next(sys.stdin).split()))\\n    \\n    a = [0] + a\\n    x = [j - i for i,j in zip(a, a[1:])]\\n    \\n    periods = period(x)\\n    \\n    print(len(periods))\\n    print(' '.join(map(str,periods)))\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"\\nimport sys\\n#sys.stdin=open(\\\"data.txt\\\")\\ninput=sys.stdin.readline\\nmii=lambda:list(map(int,input().split()))\\n\\nn=int(input())\\na=[0]+list(mii())\\n\\ndiff=[a[i+1]-a[i] for i in range(n)]\\n\\nans=[]\\nfor i in range(1,n+1):\\n    good=1\\n    for j in range(n-i):\\n        if diff[j]!=diff[j+i]:\\n            good=0\\n    if good:\\n        ans.append(i)\\n\\nprint(len(ans))\\nprint(\\\" \\\".join(map(str,ans)))\\n\", \"\\n\\ndef is_cycle(seq, k):\\n    ii = 0\\n    for i in range(len(seq)):\\n        if ii == k: ii = 0\\n        if seq[i] != seq[ii]: return False\\n        ii += 1\\n    return True\\n\\n\\nn = int(input())\\n\\nA = [0] + [int(x) for x in input().split()]\\n\\nAA = []\\nfor i in range(1, len(A)):\\n    AA.append(A[i] - A[i-1])\\n\\n# print(\\\"A: \\\", A)\\n# print(\\\"AA: \\\", AA)\\ncyqs = []\\nfor cyq in range(1, len(A)):\\n    if is_cycle(AA, cyq):\\n        cyqs.append(cyq)\\nprint(len(cyqs))\\nprint(*cyqs)\\n    \\n            \\n        \\n\", \"gcd = lambda a, b: gcd(b, a % b) if b else a\\n\\n\\ndef main():\\n    n = int(input())\\n    arr = list(map(int, input().split()))\\n    brr = []\\n    for i in range(len(arr) - 1, 0, -1):\\n        arr[i] -= arr[i - 1]\\n    for i in range(1, len(arr) + 1):\\n        f = 1\\n        for j in range(0, i):\\n            for k in range(j + i, len(arr), i):\\n                if arr[j] != arr[k]:\\n                    f = 0\\n                    break\\n        if f:\\n            brr.append(i)\\n    print(len(brr))\\n    print(*brr)\\n\\n\\n\\n\\n\\nmain()\", \"n = int(input())\\na = [0]+[int(i) for i in input().split()]\\n\\n\\nb = [0] * n \\nans = []\\n\\nfor i in range(1,len(a)):\\n\\tb[i-1]=a[i]-a[i-1]\\n\\n\\nfor i in range(1,n):\\n\\tif b[:i]==b[-i:]:\\n\\t\\tans.append(n-i)\\n\\nprint(len(ans)+1)\\nprint(*sorted(ans),n)\", \"n=int(input())\\na=[0]\\na+=list(map(int,input().split()))\\nx=[]\\nfor i in range(1,n+1):\\n    x.append(a[i]-a[i-1])\\nans=[]\\nb=a[1:]\\nfor i in range(1,n+1):\\n    r=n%i\\n    c=x[:i]\\n    f=0\\n    if x[:r]!=x[n-r:]:\\n        continue\\n    for j in range(i,n-r,i):\\n        if x[j:j+i]!=c:\\n            f=1\\n    if f==0:\\n        ans.append(i)\\nprint(len(ans))\\nprint(*ans)\\n\", \"n=int(input())\\na=[0]+list(map(int,input().split()))\\ndist=[]\\nfor i in range(1,n+1):\\n\\tdist.append(a[i]-a[i-1])\\nk_s=[]\\nfor k in range(1,n+1):\\n\\tcan=True\\n\\tfor i in range(n):\\n\\t\\tif dist[i]==dist[i%k]:\\n\\t\\t\\tpass\\n\\t\\telse:\\n\\t\\t\\tcan=False\\n\\t\\t\\tbreak\\n\\tif can:\\n\\t\\tk_s.append(k)\\nprint(len(k_s))\\nfor t in k_s:\\n\\tprint(t,end=\\\" \\\")\", \"def tr(s,k):\\n    a=0\\n    s1=[]\\n    for i in range(1,len(s)):\\n        s1.append(s[i]-s[i-1])\\n    t=True\\n    for j in range(1,len(s)):\\n        if s[j]!=s[j-1]+s1[(j-1)%k]:\\n            t=False\\n            break\\n    return t\\nfrom sys import stdin\\nn=int(stdin.readline().strip())\\n#n,m=map(int,stdin.readline().strip().split())\\ns=[0]+list(map(int,stdin.readline().strip().split()))\\nans=[]\\nfor i in range(1,n+1):\\n    if tr(s,i):\\n        ans.append(i)\\nprint(len(ans))\\nprint(*ans)\\n\", \"#!/usr/bin/env python3\\n# encoding: utf-8\\n\\n\\n\\n#----------\\n# Constants\\n#----------\\n\\n\\n\\n#----------\\n# Functions\\n#----------\\n\\ndef check(d, length):\\n    n = len(d)\\n    t = d[:length]\\n    for i, item in enumerate(d):\\n        if t[i % length] != item:\\n            return False\\n    return True\\n\\n# The function that solves the task\\ndef calc(a):\\n    k = []\\n    d = []\\n    last = 0\\n    for item in a:\\n        d.append(item - last)\\n        last = item\\n    for i in range(len(a)):\\n        if check(d, i+1):\\n            k.append(i+1)\\n\\n    return k\\n\\n\\n# Reads a string from stdin, splits it by space chars, converts each\\n# substring to int, adds it to a list and returns the list as a result.\\ndef get_ints():\\n    return [ int(n) for n in input().split() ]\\n\\n\\n# Reads a string from stdin, splits it by space chars, converts each substring\\n# to floating point number, adds it to a list and returns the list as a result.\\ndef get_floats():\\n    return [ float(n) for n in input().split() ]\\n\\n\\ndef seq2str(seq):\\n    return ' '.join(str(item) for item in seq)\\n\\n\\n\\n#----------\\n# Execution start point\\n#----------\\n\\ndef __starting_point():\\n    a = get_ints()\\n    assert len(a) == 1\\n    n = a[0]\\n    a = get_ints()\\n    assert len(a) == n\\n\\n    k = calc(a)\\n    print(len(k))\\n    print(seq2str(k))\\n    \\n\\n__starting_point()\"]",
  "input_output": "{\n  \"inputs\": [\n    \"5\\n1 2 3 4 5\\n\",\n    \"5\\n1 3 5 6 8\\n\",\n    \"3\\n1 5 3\\n\",\n    \"1\\n5\\n\",\n    \"10\\n500000 500000 500000 500000 500000 500000 500000 1000000 1000000 1000000\\n\",\n    \"50\\n12 52 88 116 124 127 150 180 208 235 268 298 332 367 391 439 464 482 502 515 535 540 563 564 577 621 638 657 691 725 766 778 818 854 882 890 893 916 946 974 1001 1034 1064 1098 1133 1157 1205 1230 1248 1268\\n\",\n    \"2\\n500000 1000000\\n\",\n    \"2\\n2 3\\n\",\n    \"5\\n1 1 1 2 2\\n\",\n    \"10\\n1 2 2 2 2 2 1 2 2 1\\n\",\n    \"10\\n2 2 4 4 3 1 1 2 3 2\\n\",\n    \"5\\n5 7 12 14 19\\n\",\n    \"6\\n5 9 11 16 20 22\\n\",\n    \"9\\n5 6 14 19 20 28 33 34 42\\n\",\n    \"13\\n11 21 24 30 41 51 54 60 71 81 84 90 101\\n\",\n    \"25\\n19 36 61 67 71 90 107 132 138 142 161 178 203 209 213 232 249 274 280 284 303 320 345 351 355\\n\",\n    \"31\\n31 61 91 122 152 182 213 243 273 304 334 364 395 425 455 486 516 546 577 607 637 668 698 728 759 789 819 850 880 910 941\\n\",\n    \"31\\n26 46 63 73 75 94 101 103 119 121 140 158 161 164 171 197 217 234 244 246 265 272 274 290 292 311 329 332 335 342 368\\n\",\n    \"50\\n20 40 60 80 100 120 140 160 180 200 220 240 260 280 300 320 340 360 380 400 420 440 460 480 500 520 540 560 580 600 620 640 660 680 700 720 740 760 780 800 820 840 860 880 900 920 940 960 980 1000\\n\",\n    \"50\\n26 35 84 121 132 161 187 213 222 271 308 319 348 374 400 409 458 495 506 535 561 587 596 645 682 693 722 748 774 783 832 869 880 909 935 961 970 1019 1056 1067 1096 1122 1148 1157 1206 1243 1254 1283 1309 1335\\n\",\n    \"100\\n57 81 176 211 251 311 346 404 469 506 563 587 682 717 757 817 852 910 975 1012 1069 1093 1188 1223 1263 1323 1358 1416 1481 1518 1575 1599 1694 1729 1769 1829 1864 1922 1987 2024 2081 2105 2200 2235 2275 2335 2370 2428 2493 2530 2587 2611 2706 2741 2781 2841 2876 2934 2999 3036 3093 3117 3212 3247 3287 3347 3382 3440 3505 3542 3599 3623 3718 3753 3793 3853 3888 3946 4011 4048 4105 4129 4224 4259 4299 4359 4394 4452 4517 4554 4611 4635 4730 4765 4805 4865 4900 4958 5023 5060\\n\",\n    \"100\\n48 55 64 122 179 274 347 446 536 600 676 764 797 888 940 1004 1033 1080 1092 1146 1166 1222 1307 1393 1424 1437 1509 1541 1570 1641 1672 1739 1778 1802 1838 1866 1945 2006 2007 2040 2064 2132 2166 2172 2272 2370 2392 2411 2501 2523 2600 2648 2655 2664 2722 2779 2874 2947 3046 3136 3200 3276 3364 3397 3488 3540 3604 3633 3680 3692 3746 3766 3822 3907 3993 4024 4037 4109 4141 4170 4241 4272 4339 4378 4402 4438 4466 4545 4606 4607 4640 4664 4732 4766 4772 4872 4970 4992 5011 5101\\n\",\n    \"5\\n1 2 5 6 7\\n\",\n    \"5\\n1 2 4 5 6\\n\",\n    \"4\\n2 1 3 3\\n\",\n    \"6\\n1 3 4 5 7 8\\n\",\n    \"6\\n1 1 2 2 3 4\\n\",\n    \"8\\n1 3 6 10 11 13 16 17\\n\",\n    \"10\\n1 2 3 4 5 6 7 8 9 20\\n\",\n    \"4\\n3 2 5 7\\n\",\n    \"4\\n1 2 3 5\\n\",\n    \"6\\n4 3 7 6 10 10\\n\",\n    \"6\\n2 1 3 2 4 100\\n\",\n    \"12\\n1 3 5 6 8 10 11 13 15 16 18 21\\n\",\n    \"10\\n1 2 3 4 5 10 11 12 13 14\\n\",\n    \"7\\n1 3 4 7 8 10 11\\n\",\n    \"4\\n2 2 4 5\\n\",\n    \"9\\n1 2 3 4 5 6 7 9 10\\n\",\n    \"4\\n2 2 4 6\\n\",\n    \"4\\n2 1 3 5\\n\",\n    \"4\\n1 1 2 3\\n\",\n    \"4\\n3 1 4 1\\n\",\n    \"6\\n3 2 1 4 5 6\\n\",\n    \"21\\n1 3 4 5 7 8 10 11 12 14 15 16 18 19 21 22 23 25 26 28 29\\n\",\n    \"4\\n5 4 9 11\\n\",\n    \"7\\n1 2 3 4 5 6 9\\n\",\n    \"4\\n10 9 19 20\\n\",\n    \"6\\n10 9 8 18 19 20\\n\",\n    \"4\\n2 1 3 1\\n\",\n    \"8\\n1 2 3 4 5 6 7 9\\n\",\n    \"10\\n1 3 6 6 11 12 14 17 18 22\\n\",\n    \"6\\n5 4 3 2 7 8\\n\",\n    \"4\\n2 1 3 6\\n\"\n  ],\n  \"outputs\": [\n    \"5\\n1 2 3 4 5 \",\n    \"2\\n3 5 \",\n    \"1\\n3 \",\n    \"1\\n1 \",\n    \"2\\n7 10 \",\n    \"2\\n31 50 \",\n    \"2\\n1 2 \",\n    \"1\\n2 \",\n    \"2\\n3 5 \",\n    \"1\\n10 \",\n    \"1\\n10 \",\n    \"3\\n2 4 5 \",\n    \"2\\n3 6 \",\n    \"3\\n3 6 9 \",\n    \"4\\n4 8 12 13 \",\n    \"5\\n5 10 15 20 25 \",\n    \"11\\n3 6 9 12 15 18 21 24 27 30 31 \",\n    \"3\\n15 30 31 \",\n    \"50\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 \",\n    \"8\\n7 14 21 28 35 42 49 50 \",\n    \"10\\n10 20 30 40 50 60 70 80 90 100 \",\n    \"2\\n51 100 \",\n    \"3\\n3 4 5 \",\n    \"3\\n3 4 5 \",\n    \"1\\n4 \",\n    \"3\\n3 5 6 \",\n    \"2\\n5 6 \",\n    \"2\\n7 8 \",\n    \"1\\n10 \",\n    \"1\\n4 \",\n    \"1\\n4 \",\n    \"1\\n6 \",\n    \"1\\n6 \",\n    \"1\\n12 \",\n    \"5\\n6 7 8 9 10 \",\n    \"3\\n4 6 7 \",\n    \"1\\n4 \",\n    \"2\\n8 9 \",\n    \"2\\n3 4 \",\n    \"2\\n3 4 \",\n    \"2\\n3 4 \",\n    \"1\\n4 \",\n    \"1\\n6 \",\n    \"4\\n13 18 20 21 \",\n    \"1\\n4 \",\n    \"1\\n7 \",\n    \"1\\n4 \",\n    \"1\\n6 \",\n    \"1\\n4 \",\n    \"1\\n8 \",\n    \"1\\n10 \",\n    \"1\\n6 \",\n    \"1\\n4 \"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/1043/B",
  "starter_code": ""
}