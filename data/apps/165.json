{
  "task_id": "APPS/165",
  "problem_id": 165,
  "prompt": "Vasiliy spent his vacation in a sanatorium, came back and found that he completely forgot details of his vacation! \n\nEvery day there was a breakfast, a dinner and a supper in a dining room of the sanatorium (of course, in this order). The only thing that Vasiliy has now is a card from the dining room contaning notes how many times he had a breakfast, a dinner and a supper (thus, the card contains three integers). Vasiliy could sometimes have missed some meal, for example, he could have had a breakfast and a supper, but a dinner, or, probably, at some days he haven't been at the dining room at all.\n\nVasiliy doesn't remember what was the time of the day when he arrived to sanatorium (before breakfast, before dinner, before supper or after supper), and the time when he left it (before breakfast, before dinner, before supper or after supper). So he considers any of these options. After Vasiliy arrived to the sanatorium, he was there all the time until he left. Please note, that it's possible that Vasiliy left the sanatorium on the same day he arrived.\n\nAccording to the notes in the card, help Vasiliy determine the minimum number of meals in the dining room that he could have missed. We shouldn't count as missed meals on the arrival day before Vasiliy's arrival and meals on the departure day after he left.\n\n\n-----Input-----\n\nThe only line contains three integers b, d and s (0 \u2264 b, d, s \u2264 10^18,  b + d + s \u2265 1)\u00a0\u2014 the number of breakfasts, dinners and suppers which Vasiliy had during his vacation in the sanatorium. \n\n\n-----Output-----\n\nPrint single integer\u00a0\u2014 the minimum possible number of meals which Vasiliy could have missed during his vacation. \n\n\n-----Examples-----\nInput\n3 2 1\n\nOutput\n1\n\n\nInput\n1 0 0\n\nOutput\n0\n\n\nInput\n1 1 1\n\nOutput\n0\n\n\nInput\n1000000000000000000 0 1000000000000000000\n\nOutput\n999999999999999999\n\n\n\n\n\n-----Note-----\n\nIn the first sample, Vasiliy could have missed one supper, for example, in case he have arrived before breakfast, have been in the sanatorium for two days (including the day of arrival) and then have left after breakfast on the third day. \n\nIn the second sample, Vasiliy could have arrived before breakfast, have had it, and immediately have left the sanatorium, not missing any meal.\n\nIn the third sample, Vasiliy could have been in the sanatorium for one day, not missing any meal.",
  "solutions": "[\"a = list(map(int, input().split()))\\nm = max(a)\\n\\nans = 0\\nfor i in range(3):\\n    if a[i] < m - 1:\\n        ans += (m - 1) - a[i]\\n        a[i] = m - 1\\n\\nprint(ans)\\n\", \"def c(ans, b ,d, s):\\n\\treturn(min(ans, 3 * max(b, d, s) - b - d - s))\\nb, d, s = list(map(int, input().split()))\\nans = 10**19\\nm = min(b, d, s)\\nb = b - m\\nd = d - m\\ns = s - m\\nif b > 0:\\n\\tb -= 1\\n\\tans = c(ans, b, d, s)\\n\\tb += 1\\nif d > 0:\\n\\td -= 1\\n\\tans = c(ans, b, d, s)\\n\\td += 1\\nif s > 0:\\n\\ts -= 1\\n\\tans = c(ans, b, d, s)\\n\\ts += 1\\nif b * d > 0:\\n\\tb -= 1\\n\\td -= 1\\n\\tans = c(ans, b, d, s)\\n\\tb += 1\\n\\td += 1\\nif b * s > 0:\\n\\tb -= 1\\n\\ts -= 1\\n\\tans = c(ans, b, d, s)\\n\\tb += 1\\n\\ts += 1\\nif s * d > 0:\\n\\ts -= 1\\n\\td -= 1\\n\\tans = c(ans, b, d, s)\\n\\ts += 1\\n\\td += 1\\nif b + d + s == 0:\\n\\tans = 0\\nprint(ans)\\n\", \"b, d, s = list(map(int, input().split()))\\nhar = [max(s - 1, d - 1, b), max(d, b - 1, s - 1), max(d - 1, s, b - 1)]\\nprint(har[0] - b + har[1] - d + har[2] - s)\\n\\n\", \"b,d,s = list(map(int, input().split()))\\n\\nr = 0\\nif b == s and d == s:\\n    print(0)\\nelif b >= s and b >= d:\\n    print(max(0,abs(b-d)-1)+max(abs(b-s)-1,0))\\nelif s >= b and s >= d:\\n    print(max(0,abs(s-b)-1)+max(abs(s-d)-1,0))\\nelif d >= s and d >= b:\\n    print(max(0,abs(d-s)-1)+max(abs(d-b)-1,0))\\n    \\n\", \"x = input().split()\\na = int(x[0])\\nb = int(x[1])\\nc = int(x[2])\\n\\nmexx = max(max(a,b), c)\\nmexx -= 1\\nans = 0\\nans += max(0, mexx-a)\\nans += max(0, mexx-b);\\nans += max(0, mexx-c);\\nprint(ans)\", \"B,L,S = ( int(x) for x in input().split() )\\nK = max(B,L,S)\\ncost = 0\\nfor meal in [B,L,S]:\\n\\tif meal != K:\\n\\t\\tcost += K-1 - meal\\n\\nprint(cost) \", \"def get(x, y, z):\\n    return max(x, y, z) * 3 - x - y - z\\n\\n\\na, b, c = list(map(int, input().split()))\\nans = min(get(a, b, c),\\n          get(a - 1, b, c),\\n          get(a - 1, b - 1, c),\\n          get(a, b - 1, c),\\n          get(a, b - 1, c - 1),\\n          get(a, b, c - 1),\\n          get(a - 1, b, c - 1),\\n          )\\nprint(ans)\\n\", \"a = list(map(int, input().split()))\\na.sort()\\na[2] -= 1\\nans = (a[2] - a[1] > 0) * (a[2] - a[1]) + (a[2] - a[0] > 0) * (a[2] - a[0])\\nprint(ans)\", \"mas = list(map(int, input().split()))\\nmas.sort()\\nans = 0\\nif mas[2] != mas[1]:\\n    ans += mas[2] - mas[1] - 1\\n    mas[1] = mas[2] - 1\\nif mas[0] != mas[1]:\\n    if mas[1] == mas[2]:\\n        ans += mas[1] - mas[0] - 1\\n    else:\\n        ans += mas[1] - mas[0]\\n    mas[0] = mas[1]\\nprint(ans)\", \"b, d, s = map(int, input().split())\\n# b, d, s = 3, 2, 1\\n\\ndef mins(a, b, c):\\n\\tif min([a, b, c]) == a:\\n\\t\\treturn a, min(b, c)\\n\\tif min([a, b, c]) == b:\\n\\t\\treturn b, min(a, c)\\n\\tif min([a, b, c]) == c:\\n\\t\\treturn c, min(a, b)\\n\\nma = max([b, d, s])\\nmi1, mi2 = mins(b, d, s)\\n\\na1 = max(0, ma - 1 - mi1)\\na2 = max(0, ma - 1 - mi2)\\nprint(a1 + a2)\", \"def fun(b,d,s):\\n    if b == d == s:\\n        return 0\\n    \\n    if b > d and b > s:\\n        return (b-1-d)+(b-1-s)\\n    if d > b and d > s:\\n        return (d-1-b)+(d-1-s)\\n    if s > b and s > d:\\n        return (s-1-b)+(s-1-d)\\n    if b == d and b > s:\\n        return (b-1-s)\\n    if b == s and b > d:\\n        return (b-1-d)\\n    if d == s and d > b:\\n        return (d-1-b)\\n    return 0\\n    \\nb,d,s = map(int, input().split())\\nans = fun(b,d,s)\\nprint(ans)\", \"b, d, s = map(int, input().split())\\nif b >= d and b >= s:\\n    ans = max(0, b - d - 1) + max(0, b - s - 1)\\nelif d >= s and d >= b:\\n    ans = max(0, d - s - 1) + max(0, d - b - 1)\\nelse:\\n    ans = max(0, s - d - 1) + max(0, s - b - 1)\\nprint(ans)\", \"a, b, c = map(int, input().split())\\nans = 0\\nx, y, z = max(a, b, c), (a + b + c) - (max(a, b, c) + min(a, b, c)), min(a, b, c)\\nif x > y:\\n    ans += x - y - 1\\nif x > z:\\n    ans += x - z - 1\\nprint(ans)\", \"3.5\\nmas=[int(x) for x in input().split()]\\nmas.sort()\\n\\np=0\\nk=mas[2]-1\\n\\nif mas[1]<k:\\n    p+=k-mas[1]\\nif mas[0]<k:\\n    p+=k-mas[0]\\n    \\nprint(p)\", \"l = list(map(int, input().split()))\\n\\nl = sorted(l, reverse=True)\\n\\nmin_result = 10000000000000000000000000000\\n\\ndelts = [(1,0,0), (1,1,0), (0,0,1), (0,1,1), (0,0,0)]\\n\\nfor delt in delts:\\n    a = []\\n    for i in range(3):\\n        a.append(l[i] + delt[i])\\n    a = sorted(a, reverse=True)\\n    min_result = min(min_result, a[0] - a[1] + a[0] - a[2])\\n\\nprint(min_result)\\n\", \"def __starting_point():\\n    arr = [int(ch) for ch in input().split(' ')]\\n\\n    a = arr[0]\\n    b = arr[1]\\n    c = arr[2]\\n\\n    if a == b and  a == c:\\n        print('0')\\n        return\\n\\n    maximum = max(a, b, c)\\n    res = True\\n    for i in arr:\\n        if i != maximum or i != (maximum - 1):\\n            res = False\\n    if res:\\n        print('0')\\n        return\\n\\n    adding = 0\\n    for i in arr:\\n        if i == maximum:\\n            continue\\n        else:\\n            adding += maximum - i - 1\\n\\n    print(adding)\\n__starting_point()\", \"b, d, s = list(map(int,input().split()))\\n\\nif b > d and b > s:\\n    print((b-1)-d+(b-1)-s)\\nelif d > b and d > s:\\n    print((d-1)-b+(d-1)-s)\\nelif s > b and s > d:\\n    print((s-1)-b+(s-1)-d)\\nelif b == d and b > s:\\n    print(max(0, (b-1)-s))\\nelif d == s and d > b:\\n    print(max(0, (d-1)-b))\\nelif b == s and b > d:\\n    print(max(0, (b-1)-d))\\nelse:\\n    print(0)\\n\", \"def do():\\n    b,d,s = list(map(int,input().split()))\\n    if (b == d == s):\\n        return 0\\n    elif (b == d and b > s):\\n        return b - s - 1\\n    elif (b == d and b < s):\\n        return 2*(s - b - 1)\\n    elif (b == s and b > d):\\n        return b - d - 1\\n    elif (b == s and b < d):\\n        return 2*(d - b - 1)\\n    elif (d == s and d > b):\\n        return d - b - 1\\n    elif (d == s and d < b):\\n        return 2*(b - d - 1)\\n    else: # b d s are all different\\n        if (b > d and b > s): # b = max\\n            if (d > s):\\n                return 2*(b - 1 - d) + d - s\\n            else:\\n                return 2*(b - 1 - s) + s - d\\n        elif (d > b and d > s): # d = max\\n            if (b > s):\\n                return 2*(d - 1 - b) + b - s\\n            else:\\n                return 2*(d - 1 - s) + s - b\\n        else: # s = max\\n            if (b > d):\\n                return 2*(s - 1 - b) + b - d\\n            else:\\n                return 2*(s - 1 - d) + d - b\\n\\nrs = do()\\nprint(rs)\\n\", \"import sys\\n\\nfin = sys.stdin\\nfout = sys.stdout\\n\\nb, s, d = list(map(int, fin.readline().split()))\\n\\nwars = []\\n\\n\\ndef nextDelta(dB, dS, dD):\\n    tempB = b + dB\\n    tempS = s + dS\\n    tempD = d + dD\\n    m = max(tempB, tempS, tempD)\\n    rz = 0\\n    rz += abs(m - tempB)\\n    rz += abs(m - tempS)\\n    rz += abs(m - tempD)\\n    wars.append(abs(rz))\\n\\n\\nnextDelta(1, 0, 1)\\nnextDelta(1, 1, 1)\\nnextDelta(2, 1, 1)\\nnextDelta(2, 2, 1)\\nnextDelta(1, 2, 1)\\nnextDelta(1, 1, 1)\\nnextDelta(2, 2, 2)\\nnextDelta(1, 2, 2)\\nnextDelta(1, 1, 2)\\nnextDelta(0, 0, 0)\\nfout.write(str(min(wars)))\\n\", \"from collections import defaultdict\\nimport sys, os, math\\n\\ndef __starting_point():\\n    #n, m = list(map(int, input().split()))\\n    b, d, s = map(int, input().split())\\n    ans = 0\\n    if b > d and b > s:\\n        ans = (b - 1) * 3 + 1 - d - b - s\\n    elif d > b and d > s:\\n        ans = (d - 2) * 3 + 4 - d - b - s\\n    elif s > d and s > b:\\n        ans = (s - 1) * 3 + 1 - d - b - s\\n    elif s == d == b:\\n        ans = 0\\n    elif d == b:\\n        ans = (b - 1) * 3 + 2 - d - b - s\\n    elif b == s:\\n        ans = (b - 1) * 3 + 2 - d - b - s\\n    else:\\n        ans = (d - 1) * 3 + 2 - d - b - s\\n    print(ans)\\n__starting_point()\", \"b,d,s=list(map(int,input().split()))\\na1,a2,a3,a4=0,0,0,0\\n\\n\\nif max(b,s,d)==b:\\n    if d<b-1 and s!=max(b,s,d):\\n        a1+=b-1-d\\n    if d<b-1 and s==max(b,s,d):\\n        a1+=b-d\\n    if s<b-1:\\n        a1+=b-1-s\\nelif max(b,s,d)==d:\\n    a1+=d-b\\n    if s<d-1:\\n        a1+=d-1-s\\nelif max(b,s,d)==s:\\n    a1+=s-d\\n    a1+=s-b\\n    \\nb1,d1,s1=d,s,b\\nif max(b1,s1,d1)==b1:\\n    if d1<b1-1 and s1!=max(b1,s1,d1):\\n        a2+=b1-1-d1\\n    if d1<b1-1 and s1==max(b1,s1,d1):\\n        a2+=b1-d1\\n    if s1<b1-1:\\n        a2+=b1-1-s1\\nelif max(b1,s1,d1)==d1:\\n    a2+=d1-b1\\n    if s1<d1-1:\\n        a2+=d1-1-s1\\nelif max(b1,s1,d1)==s1:\\n    a2+=s1-d1\\n    a2+=s1-b1\\n    \\nb,d,s=s,b,d\\nif max(b,s,d)==b:\\n    if d<b-1 and s!=max(b,s,d):\\n        a3+=b-1-d\\n    if d<b-1 and s==max(b,s,d):\\n        a3+=b-d\\n    if s<b-1:\\n        a3+=b-1-s\\nelif max(b,s,d)==d:\\n    a3+=d-b\\n    if s<d-1:\\n        a3+=d-1-s\\nelif max(b,s,d)==s:\\n    a3+=s-d\\n    a3+=s-b\\nprint(min(a1,a2,a3))\\n\", \"def f(a, b, c):\\n    m = min(a, b, c)\\n    a, b, c = a - m, b - m, c - m\\n    if a == b and a == c: return 0\\n    if a == b:\\n        if abs(a - c) == 1: return 0\\n        elif c > a: return (c - a - 1) * 2\\n        else: return a - c - 1\\n    if a == c:\\n        if abs(a - b) == 1: return 0\\n        elif b > a: return (b - a - 1) * 2\\n        else: return a - b - 1\\n    if b == c:\\n        if abs(a - b) == 1: return 0\\n        elif a > b: return (a - b - 1) * 2\\n        else: return b - a - 1\\n\\n    m = min(a, b, c)\\n    n = min(max(a, b), max(b, c), max(a, c))\\n    if a == m: a = n\\n    elif b == m: b = n\\n    else: c = n\\n    return n + f(a, b, c)\\n\\nprint(f(*[int(i) for i in input().split()]))\\n\", \"b, l, d = map(int, input().split())\\n\\nm = max(b, l, d)\\nx = m-1\\nmissing = 0\\nif x-b > 0:\\n    missing += x-b\\nif x-l > 0:\\n    missing += x-l\\nif x-d > 0:\\n    missing += x-d\\n\\nprint(missing)\", \"a, b, c = list(map(int, input().split()))\\nx = max(a, b, c)\\na = x - a\\nb = x - b\\nc = x - c\\nif (a > 0 and b > 0) or (a > 0 and c > 0) or (b > 0 and c > 0):\\n    print(a + b + c - 2)\\nelif a > 0 or b > 0 or c > 0:\\n    print(a + b + c - 1)\\nelse:\\n    print(a + b + c)\", \"tr = list(map(int, input().split()))\\nk = 0\\n\\ntr.sort()\\n\\nfor i in range(2):\\n\\tif (tr[2] - 1) > tr[i]:\\n\\t\\t k += ((tr[2] - 1) - tr[i])\\n\\nprint(k)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3 2 1\\n\",\n    \"1 0 0\\n\",\n    \"1 1 1\\n\",\n    \"1000000000000000000 0 1000000000000000000\\n\",\n    \"1000 0 0\\n\",\n    \"0 1 0\\n\",\n    \"0 0 1\\n\",\n    \"1 1 0\\n\",\n    \"0 1 1\\n\",\n    \"1000000000000000000 999999999999999999 999999999999999999\\n\",\n    \"1000000000000000000 1000000000000000000 999999999999999999\\n\",\n    \"1000000000000000000 1000000000000000000 1000000000000000000\\n\",\n    \"999999999999999999 999999999999999999 999999999999999999\\n\",\n    \"999999999999999999 1000000000000000000 999999999999999999\\n\",\n    \"999999999999999999 1000000000000000000 1000000000000000000\\n\",\n    \"999999999999999999 999999999999999998 999999999999999999\\n\",\n    \"999999999999999999 999999999999999999 1000000000000000000\\n\",\n    \"10 10 10\\n\",\n    \"9 11 11\\n\",\n    \"10 8 9\\n\",\n    \"12 8 8\\n\",\n    \"13 18 14\\n\",\n    \"94 87 14\\n\",\n    \"35 91 108\\n\",\n    \"1671 24 419\\n\",\n    \"7759 10296 4966\\n\",\n    \"8912 10561 8205\\n\",\n    \"1000000100 1000000083 1000000047\\n\",\n    \"999996782 1000007108 1000009860\\n\",\n    \"999342691 1000075839 1000144842\\n\",\n    \"951468821 1005782339 1063348170\\n\",\n    \"498556507 1820523034 1566999959\\n\",\n    \"99999999999999938 99999999999999971 99999999999999944\\n\",\n    \"99999999999995757 100000000000000116 99999999999999158\\n\",\n    \"100000000481729714 100000000353636209 99999999472937283\\n\",\n    \"100000330161030627 99999005090484867 99999729994406004\\n\",\n    \"100040306518636197 100049788380618015 99377557930019414\\n\",\n    \"117864695669097197 53280311324979856 171825292362519668\\n\",\n    \"64058874468711639 248004345115813505 265277488186534632\\n\",\n    \"0 323940200031019351 1000000000000000000\\n\",\n    \"0 1000000000000000000 0\\n\",\n    \"4 3 5\\n\",\n    \"0 0 1000000000000000000\\n\",\n    \"1000000000000000000 0 0\\n\",\n    \"0 1000000000000000000 1000000000000000000\\n\",\n    \"1000000000000000000 1000000000000000000 0\\n\",\n    \"6436340231848 215 5328562123\\n\",\n    \"1 4352626266226 1\\n\",\n    \"647397084215 513125 15999899\\n\",\n    \"429 42 132\\n\",\n    \"1 3 1\\n\",\n    \"0 6 0\\n\",\n    \"100 100 99\\n\",\n    \"3 3 2\\n\",\n    \"10 10 9\\n\",\n    \"3 3 1\\n\",\n    \"100 99 100\\n\",\n    \"5 5 4\\n\",\n    \"50 70 80\\n\",\n    \"4 4 4\\n\",\n    \"4 4 3\\n\",\n    \"1 0 1\\n\",\n    \"0 0 2\\n\",\n    \"1 1 10\\n\",\n    \"5 2 3\\n\",\n    \"5 5 1\\n\",\n    \"10 200000 10\\n\",\n    \"3 0 0\\n\",\n    \"100 100 100\\n\",\n    \"3 5 5\\n\",\n    \"3 4 3\\n\",\n    \"1000000000000000000 1 0\\n\",\n    \"2 0 0\\n\",\n    \"5 6 4\\n\",\n    \"0 2 2\\n\",\n    \"1000000000000000000 100000000000000000 0\\n\",\n    \"2 2 1\\n\",\n    \"1000000000000000000 1 1\\n\",\n    \"1 2 2\\n\",\n    \"1 1 5\\n\",\n    \"10 0 5\\n\",\n    \"10 10 0\\n\",\n    \"0 1000 0\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"999999999999999999\\n\",\n    \"1998\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"6\\n\",\n    \"7\\n\",\n    \"85\\n\",\n    \"88\\n\",\n    \"2897\\n\",\n    \"7865\\n\",\n    \"4003\\n\",\n    \"68\\n\",\n    \"15828\\n\",\n    \"871152\\n\",\n    \"169445178\\n\",\n    \"1575489600\\n\",\n    \"58\\n\",\n    \"5315\\n\",\n    \"1136885934\\n\",\n    \"1925237170381\\n\",\n    \"681712312580417\\n\",\n    \"172505577730962281\\n\",\n    \"218491756788544118\\n\",\n    \"1676059799968980647\\n\",\n    \"1999999999999999998\\n\",\n    \"1\\n\",\n    \"1999999999999999998\\n\",\n    \"1999999999999999998\\n\",\n    \"999999999999999999\\n\",\n    \"999999999999999999\\n\",\n    \"12867351901356\\n\",\n    \"8705252532448\\n\",\n    \"1294777655404\\n\",\n    \"682\\n\",\n    \"2\\n\",\n    \"10\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"38\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"2\\n\",\n    \"16\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"399978\\n\",\n    \"4\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1999999999999999997\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1899999999999999998\\n\",\n    \"0\\n\",\n    \"1999999999999999996\\n\",\n    \"0\\n\",\n    \"6\\n\",\n    \"13\\n\",\n    \"9\\n\",\n    \"1998\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/732/C",
  "starter_code": ""
}