{
  "task_id": "APPS/119",
  "problem_id": 119,
  "prompt": "You are given a sequence a_1, a_2, ..., a_{n} of one-dimensional segments numbered 1 through n. Your task is to find two distinct indices i and j such that segment a_{i} lies within segment a_{j}.\n\nSegment [l_1, r_1] lies within segment [l_2, r_2] iff l_1 \u2265 l_2 and r_1 \u2264 r_2.\n\nPrint indices i and j. If there are multiple answers, print any of them. If no answer exists, print -1 -1.\n\n\n-----Input-----\n\nThe first line contains one integer n (1 \u2264 n \u2264 3\u00b710^5) \u2014 the number of segments.\n\nEach of the next n lines contains two integers l_{i} and r_{i} (1 \u2264 l_{i} \u2264 r_{i} \u2264 10^9) \u2014 the i-th segment.\n\n\n-----Output-----\n\nPrint two distinct indices i and j such that segment a_{i} lies within segment a_{j}. If there are multiple answers, print any of them. If no answer exists, print -1 -1.\n\n\n-----Examples-----\nInput\n5\n1 10\n2 9\n3 9\n2 3\n2 9\n\nOutput\n2 1\n\nInput\n3\n1 5\n2 6\n6 20\n\nOutput\n-1 -1\n\n\n\n-----Note-----\n\nIn the first example the following pairs are considered correct:  (2, 1), (3, 1), (4, 1), (5, 1) \u2014 not even touching borders;  (3, 2), (4, 2), (3, 5), (4, 5) \u2014 touch one border;  (5, 2), (2, 5) \u2014 match exactly.",
  "solutions": "[\"n = int(input())\\na = []\\nfor i in range(1, n + 1):\\n    l, r = list(map(int, input().split()))\\n    a.append([l, -r, i])\\na.sort()\\nhh = a[0][1]\\nwahh = max(-1, a[0][2])\\nfor i in range(1, n):\\n    if a[i][1] >= hh:\\n        print(a[i][2], wahh)\\n        return\\n    else:\\n        hh = a[i][1]\\n        wahh = a[i][2]\\nprint(-1, -1)\\n\", \"n = int(input())\\nL = []\\nfor i in range(n):\\n    L.append(list(map(int, input().split()))+[i+1])\\n#print(L)\\nL.sort(key=lambda X:(X[0],-X[1],X[2]))\\n#print(L)\\nX = 0\\nfor i in range(1,n):\\n    if L[i][1]<=L[i-1][1]:\\n        print(L[i][2],L[i-1][2])\\n        X = 1\\n        break\\nif X == 0:\\n    print(-1,-1)\", \"#!/usr/bin/env python3\\n\\nn = int(input().strip())\\nais = [tuple(map(int, input().strip().split())) for _ in range(n)]\\n\\ndef solve(ais):\\n\\tbis = [(l, r, i + 1) for i, (l, r) in enumerate(ais)]\\n\\tbis.sort(key=lambda t: (t[0], -t[1]))\\n\\trr = bis[0][1] - 1\\n\\tir = bis[0][2]\\n\\tfor l, r, i in bis:\\n\\t\\tif r <= rr:\\n\\t\\t\\treturn (i, ir)\\n\\t\\telse:\\n\\t\\t\\trr = r\\n\\t\\t\\tir = i\\n\\treturn (-1, -1)\\n\\t\\t\\n\\ni, j = solve(ais)\\nprint(i, j)\\n\", \"n = int(input())\\n\\nsegments = []\\n\\nfor i, _ in enumerate(range(n)):\\n    a, b = map(int, input().split())\\n    segments.append(((a, b), i + 1))\\n\\nsegments.sort(key=lambda x: (x[0][0], -x[0][1]))\\n\\nlast_r = 0\\nlast_index = 0\\n\\nfor segment, index in segments:\\n    if last_r >= segment[1]:\\n        print(index, last_index)\\n        break\\n\\n    last_r = segment[1]\\n    last_index = index\\nelse:\\n    print(-1, -1)\", \"def res(d,N):\\n    for i in range(1,N):\\n        if d[i][1] <= d[i-1][1]:\\n            return str(d[i][2]+1) + ' ' + str(d[i-1][2]+1)\\n    return '-1 -1'    \\n\\nN = int(input())\\nd = []\\nfor i in range(N):\\n    a,b = list(map(int,input().split()))\\n    d.append((a,b,i))\\nd = sorted(d, key = lambda x:(x[0],-x[1]))\\nprint(res(d,N))\\n\", \"import sys\\n\\ndef inn(a,b):\\n\\treturn (a[0] <= b[0] and b[1] <= a[1])\\n\\nn = int(input())\\n\\nseg = []\\n\\na,b = map(int,input().split())\\nseg.append((a,b,1))\\n\\nfor i in range(2,n+1):\\n\\ta,b = map(int,input().split())\\n\\tseg.append((a,b,i))\\n\\t\\nseg.sort(key=lambda x : (x[0],-x[1]))\\n\\nmain = seg.pop(0)\\n\\t\\nfor i in seg:\\n\\tif inn(main,i):\\n\\t\\tprint(i[2],main[2])\\n\\t\\treturn\\n\\tif main[1] < i[1]:\\n\\t\\tmain = i\\n\\nprint(-1,-1)\", \"def solution():\\n    \\n    n = int(input())\\n    segments = []\\n    for i,_ in enumerate(range(n)):\\n        x,y = input().split(\\\" \\\")\\n        segments.append((int(x), int(y), i+1))\\n\\n    segments = sorted(segments, key=lambda x: (x[0], -x[1]))\\n\\n    for i,seg in enumerate(segments):\\n        j = i+1\\n        if j >= n:\\n            print(\\\"-1 -1\\\")\\n            return\\n\\n        while segments[j][1] <= seg[1]:\\n            print(\\\"{} {}\\\".format(segments[j][2], seg[2]))\\n            return\\n\\n    print(\\\"-1 -1\\\")\\n    return\\n\\nsolution()\\n\", \"n=int(input())\\na=[]\\nfor i in range(n):\\n    a.append(list(map(int,input().split()))+[i])\\na.sort(key=lambda f:(f[0],-f[1]))\\nfor i in range(n-1):\\n    if a[i][1]>=a[i+1][1]:\\n        print(a[i+1][2]+1,a[i][2]+1)\\n        break\\nelse:\\n    print(-1,-1)\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\", \"\\nn = int(input())\\npairs = [list(map(int, input().split()))+[i] for i in range(n)]\\npairs.sort(key=lambda x:(x[0], -x[1]))\\nfor i in range(1, n):\\n    if pairs[i][1] <= pairs[i-1][1]:\\n        print(pairs[i][2]+1, pairs[i-1][2]+1)\\n        break\\nelse:\\n    print(-1, -1)\", \"import sys\\nn = int(sys.stdin.readline())\\n\\nintervals = list([(int(x[0]), int(x[1])) for x in list(map(str.split, sys.stdin.readlines()))])\\nintervals = list(enumerate(intervals))\\n\\nintervals.sort(key=lambda x : 1000000009 * x[1][0] - x[1][1])\\n\\nr = 0\\nans1 = -1\\nans2 = -1\\nfor interval in intervals:\\n    if interval[1][1] <= r:\\n        ans1 = interval[0]\\n        break\\n    else:\\n        ans2 = interval[0]\\n        r = interval[1][1]\\n\\nif ans1 == -1:\\n    print('-1 -1')\\nelse:\\n    print(ans1 +1, ans2 +1)\\n\", \"def main():\\n    n = int(input())\\n    seg = []\\n    for i in range(n):\\n        l, r = map(int, input().split())\\n        seg.append((l, r, i+1))\\n\\n    seg = sorted(seg, key=lambda x: (x[0], -x[1]))\\n\\n    lar = 0\\n    sma = -1\\n    for i in range(1, len(seg)):\\n        if seg[i][1] <= seg[lar][1]:\\n            sma = i\\n            break\\n        else:\\n            lar = i\\n    if sma != -1:\\n        print(seg[sma][2], seg[lar][2])\\n    else:\\n        print(-1, -1)\\n\\n\\n\\ndef __starting_point():\\n    main()\\n__starting_point()\", \"#!/usr/bin/env python3\\nfrom sys import stdin, stdout\\n\\ndef rint():\\n    return list(map(int, stdin.readline().split()))\\n\\nn = int(input())\\n\\na = [list(rint()) + [i+1] for i in range(n)]\\n\\na.sort(key=lambda aa: [aa[0], -aa[1], aa[2]])\\n\\nstart = [-1, -1, -1]\\n\\nfor aa in a:\\n    if start[1] >= aa[1]:\\n        ans = [aa[2], start[2]]\\n        print(*ans)\\n        return\\n    else:\\n        start = aa\\n\\nprint(-1, -1)\\n\\n\\n\", \"n=int(input())\\na=sorted((l,-r,i)for i,(l,r)in\\nenumerate((map(int,input().split())for _ in[0]*n),1))\\nprint(*next(((y[2],x[2])for x,y in zip(a,a[1:])if x[1]<=y[1]),(-1,-1)))\", \"n=int(input())\\na=sorted((l,-r,i)for l,r,i in(map(int,input().split()+[i+1])for i in range(n)))\\nprint(*next(((y[2],x[2])for x,y in zip(a,a[1:])if x[1]<=y[1]),(-1,-1)))\", \"from operator import itemgetter\\ndef cmpnr(a, b):\\n    if a[0] < b[0]:\\n        return True\\n    if a[0] > b[0]:\\n        return False\\n    return a[1] > b[1]\\n\\nn = int(input())\\nseg = []\\nfor i in range(n):\\n    a, b = list(map(int, input().split()))\\n    seg.append((a, b, i + 1))\\n\\nseg = sorted(seg, key=lambda t: (t[0], -t[1]))\\n\\nmaxr = 0\\nmaxri = 0\\nfor a, b, i in seg:\\n    if b <= maxr:\\n        print(i, maxri)\\n        return\\n\\n    if b > maxri:\\n        maxr = b\\n        maxri = i\\n\\nprint(-1, -1)\\n\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9\\n\",\n    \"3\\n1 5\\n2 6\\n6 20\\n\",\n    \"1\\n1 1000000000\\n\",\n    \"2\\n1 1000000000\\n1 1000000000\\n\",\n    \"2\\n1 1000000000\\n500000000 500000000\\n\",\n    \"2\\n1 10\\n2 10\\n\",\n    \"2\\n10 20\\n10 11\\n\",\n    \"3\\n1 10\\n10 20\\n9 11\\n\",\n    \"3\\n1 1\\n2 3\\n2 2\\n\",\n    \"4\\n1 10\\n2 11\\n3 10000000\\n3 100000000\\n\",\n    \"2\\n3 7\\n3 9\\n\",\n    \"3\\n1 2\\n2 3\\n1 2\\n\",\n    \"3\\n5 6\\n4 7\\n3 8\\n\",\n    \"3\\n2 9\\n1 7\\n2 8\\n\",\n    \"2\\n1 4\\n1 5\\n\",\n    \"3\\n1 2\\n1 3\\n4 4\\n\",\n    \"3\\n1 2\\n1 3\\n67 1234567\\n\",\n    \"2\\n1 1\\n1 1\\n\",\n    \"3\\n1 5\\n4 7\\n3 9\\n\",\n    \"2\\n1 1\\n1 10\\n\",\n    \"2\\n1 2\\n1 3\\n\",\n    \"2\\n1 10\\n1 11\\n\",\n    \"2\\n1 1\\n1 2\\n\",\n    \"2\\n2 3\\n2 4\\n\",\n    \"2\\n1 3\\n3 3\\n\",\n    \"3\\n1 10\\n11 13\\n12 12\\n\",\n    \"2\\n2 10\\n1 10\\n\",\n    \"3\\n1 3\\n4 5\\n4 4\\n\",\n    \"5\\n1 1\\n2 6\\n3 5\\n10 15\\n20 25\\n\",\n    \"3\\n1 1000\\n1001 1007\\n1002 1007\\n\",\n    \"3\\n1 3\\n2 5\\n3 4\\n\",\n    \"3\\n1 10\\n2 11\\n3 11\\n\",\n    \"2\\n2000000 999999999\\n1000000 1000000000\\n\",\n    \"3\\n2 10\\n11 12\\n4 5\\n\",\n    \"2\\n1 10\\n1 19\\n\",\n    \"4\\n1 3\\n100 102\\n108 110\\n1 3\\n\",\n    \"3\\n1 3\\n5 9\\n5 6\\n\",\n    \"3\\n1 3\\n3 4\\n3 5\\n\",\n    \"3\\n1 2\\n1 3\\n1 4\\n\",\n    \"4\\n2 3\\n1 4\\n100 200\\n1000 2000\\n\",\n    \"3\\n1 1\\n2 100\\n3 99\\n\",\n    \"3\\n1 2\\n1 3\\n12 1234\\n\",\n    \"3\\n1 4\\n2 6\\n3 5\\n\",\n    \"3\\n1 10\\n2 12\\n1 9\\n\",\n    \"2\\n1 3\\n1 5\\n\",\n    \"3\\n1 2\\n2 5\\n2 3\\n\",\n    \"4\\n1 3\\n1 4\\n5 10\\n11 13\\n\",\n    \"4\\n7 15\\n6 9\\n9 10\\n10 11\\n\",\n    \"4\\n2 3\\n100 200\\n1000 2000\\n1 4\\n\",\n    \"3\\n10 20\\n5 9\\n11 19\\n\",\n    \"10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 6\\n6 7\\n7 8\\n8 9\\n9 10\\n\",\n    \"2\\n1 4\\n1 7\\n\",\n    \"3\\n1 11\\n2 12\\n2 13\\n\",\n    \"2\\n1 4\\n1 8\\n\",\n    \"2\\n2 5\\n1 5\\n\",\n    \"2\\n2 9\\n1 10\\n\",\n    \"3\\n2 4\\n2 4\\n1 3\\n\",\n    \"6\\n10 11\\n12 13\\n15 16\\n15 17\\n18 19\\n59 60\\n\",\n    \"2\\n1 3\\n1 7\\n\",\n    \"5\\n4 6\\n7 60\\n80 90\\n4 5\\n8 80\\n\",\n    \"2\\n1 3\\n1 4\\n\",\n    \"3\\n2 9\\n1 7\\n2 9\\n\",\n    \"2\\n1 4\\n1 6\\n\",\n    \"3\\n4 4\\n2 3\\n4 5\\n\",\n    \"2\\n1 5\\n1 7\\n\",\n    \"2\\n1 2\\n1 4\\n\",\n    \"4\\n1 1\\n2 2\\n5 10\\n2 4\\n\",\n    \"3\\n11 12\\n11 15\\n43 45\\n\",\n    \"3\\n2 3\\n2 4\\n2 5\\n\",\n    \"2\\n2 3\\n2 5\\n\",\n    \"3\\n1 3\\n1 4\\n1 5\\n\",\n    \"3\\n1 1\\n1 2\\n1 3\\n\",\n    \"2\\n2 3\\n1 3\\n\",\n    \"11\\n22226 28285\\n9095 23314\\n19162 25530\\n255 13298\\n4904 25801\\n17914 23501\\n8441 28117\\n11880 29994\\n11123 19874\\n21505 27971\\n7658 14109\\n\",\n    \"8\\n4 11\\n5 12\\n6 13\\n7 14\\n8 15\\n9 16\\n10 17\\n1 11\\n\",\n    \"4\\n1 10\\n12 15\\n1 3\\n17 18\\n\",\n    \"3\\n1 5\\n1 10\\n1 20\\n\",\n    \"3\\n1 1000\\n1001 1003\\n1 1\\n\",\n    \"3\\n1 10\\n2 11\\n2 11\\n\",\n    \"2\\n1 1\\n1 3\\n\",\n    \"2\\n1 5\\n1 6\\n\",\n    \"3\\n1 5\\n3 6\\n1 4\\n\",\n    \"4\\n2 8\\n1 3\\n2 9\\n1 2\\n\",\n    \"3\\n3 6\\n1 3\\n3 9\\n\",\n    \"6\\n2 40\\n5 50\\n10 60\\n3 45\\n1 40\\n100 111\\n\",\n    \"4\\n1 2\\n4 4\\n3 3\\n2 3\\n\",\n    \"4\\n1 1\\n4 5\\n7 9\\n1 1\\n\",\n    \"6\\n30 35\\n18 29\\n28 32\\n4 9\\n1002 129212\\n8 281\\n\",\n    \"2\\n10 13\\n10 14\\n\",\n    \"5\\n2 4\\n3 6\\n4 5\\n222 333\\n111 444\\n\",\n    \"3\\n1 2\\n4 5\\n1 1\\n\",\n    \"2\\n2 100\\n1 100\\n\",\n    \"3\\n1 10\\n9 20\\n3 5\\n\",\n    \"2\\n1 9\\n1 10\\n\",\n    \"3\\n1 2\\n1 4\\n1 6\\n\"\n  ],\n  \"outputs\": [\n    \"2 1\\n\",\n    \"-1 -1\\n\",\n    \"-1 -1\\n\",\n    \"2 1\\n\",\n    \"2 1\\n\",\n    \"2 1\\n\",\n    \"2 1\\n\",\n    \"-1 -1\\n\",\n    \"3 2\\n\",\n    \"3 4\\n\",\n    \"1 2\\n\",\n    \"3 1\\n\",\n    \"2 3\\n\",\n    \"3 1\\n\",\n    \"1 2\\n\",\n    \"1 2\\n\",\n    \"1 2\\n\",\n    \"2 1\\n\",\n    \"2 3\\n\",\n    \"1 2\\n\",\n    \"1 2\\n\",\n    \"1 2\\n\",\n    \"1 2\\n\",\n    \"1 2\\n\",\n    \"2 1\\n\",\n    \"3 2\\n\",\n    \"1 2\\n\",\n    \"3 2\\n\",\n    \"3 2\\n\",\n    \"3 2\\n\",\n    \"3 2\\n\",\n    \"3 2\\n\",\n    \"1 2\\n\",\n    \"3 1\\n\",\n    \"1 2\\n\",\n    \"4 1\\n\",\n    \"3 2\\n\",\n    \"2 3\\n\",\n    \"2 3\\n\",\n    \"1 2\\n\",\n    \"3 2\\n\",\n    \"1 2\\n\",\n    \"3 2\\n\",\n    \"3 1\\n\",\n    \"1 2\\n\",\n    \"3 2\\n\",\n    \"1 2\\n\",\n    \"3 1\\n\",\n    \"1 4\\n\",\n    \"3 1\\n\",\n    \"6 7\\n\",\n    \"1 2\\n\",\n    \"2 3\\n\",\n    \"1 2\\n\",\n    \"1 2\\n\",\n    \"1 2\\n\",\n    \"2 1\\n\",\n    \"3 4\\n\",\n    \"1 2\\n\",\n    \"4 1\\n\",\n    \"1 2\\n\",\n    \"3 1\\n\",\n    \"1 2\\n\",\n    \"1 3\\n\",\n    \"1 2\\n\",\n    \"1 2\\n\",\n    \"2 4\\n\",\n    \"1 2\\n\",\n    \"2 3\\n\",\n    \"1 2\\n\",\n    \"2 3\\n\",\n    \"2 3\\n\",\n    \"1 2\\n\",\n    \"11 5\\n\",\n    \"1 8\\n\",\n    \"3 1\\n\",\n    \"2 3\\n\",\n    \"3 1\\n\",\n    \"3 2\\n\",\n    \"1 2\\n\",\n    \"1 2\\n\",\n    \"3 1\\n\",\n    \"4 2\\n\",\n    \"1 3\\n\",\n    \"1 5\\n\",\n    \"3 4\\n\",\n    \"4 1\\n\",\n    \"2 6\\n\",\n    \"1 2\\n\",\n    \"3 2\\n\",\n    \"3 1\\n\",\n    \"1 2\\n\",\n    \"3 1\\n\",\n    \"1 2\\n\",\n    \"2 3\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/976/C",
  "starter_code": ""
}