{
  "task_id": "APPS/31",
  "problem_id": 31,
  "prompt": "ZS the Coder has recently found an interesting concept called the Birthday Paradox. It states that given a random set of 23 people, there is around 50% chance that some two of them share the same birthday. ZS the Coder finds this very interesting, and decides to test this with the inhabitants of Udayland.\n\nIn Udayland, there are 2^{n} days in a year. ZS the Coder wants to interview k people from Udayland, each of them has birthday in one of 2^{n} days (each day with equal probability). He is interested in the probability of at least two of them have the birthday at the same day. \n\nZS the Coder knows that the answer can be written as an irreducible fraction $\\frac{A}{B}$. He wants to find the values of A and B (he does not like to deal with floating point numbers). Can you help him?\n\n\n-----Input-----\n\nThe first and only line of the input contains two integers n and k (1 \u2264 n \u2264 10^18, 2 \u2264 k \u2264 10^18), meaning that there are 2^{n} days in a year and that ZS the Coder wants to interview exactly k people.\n\n\n-----Output-----\n\nIf the probability of at least two k people having the same birthday in 2^{n} days long year equals $\\frac{A}{B}$ (A \u2265 0, B \u2265 1, $\\operatorname{gcd}(A, B) = 1$), print the A and B in a single line.\n\nSince these numbers may be too large, print them modulo 10^6 + 3. Note that A and B must be coprime before their remainders modulo 10^6 + 3 are taken.\n\n\n-----Examples-----\nInput\n3 2\n\nOutput\n1 8\nInput\n1 3\n\nOutput\n1 1\nInput\n4 3\n\nOutput\n23 128\n\n\n-----Note-----\n\nIn the first sample case, there are 2^3 = 8 days in Udayland. The probability that 2 people have the same birthday among 2 people is clearly $\\frac{1}{8}$, so A = 1, B = 8.\n\nIn the second sample case, there are only 2^1 = 2 days in Udayland, but there are 3 people, so it is guaranteed that two of them have the same birthday. Thus, the probability is 1 and A = B = 1.",
  "solutions": "[\"m = 10** 6 + 3\\n\\nn, k = list(map(int, input().split()))\\np = 1\\nfor i in range(n):\\n    p *= 2\\n    if p > k:\\n        break\\nif p < k:\\n    print('1 1')\\n    return\\n\\ngcd = tmp = k - 1\\nwhile tmp:\\n    gcd -= tmp % 2\\n    tmp //= 2\\nb = pow(2, (k - 1) * n - gcd, m)\\na = 1\\nmem = [-1]*100\\nfor i in range(1, k):\\n    cnt = 0\\n    while i % 2 == 0:\\n        i //= 2\\n        cnt += 1\\n    if mem[cnt] == -1:\\n        mem[cnt] = pow(2, n - cnt, m)\\n    a = a * (mem[cnt] - i + m) % m\\n    if a == 0:\\n        break\\nprint((b - a + m) % m, b)\\n\", \"import sys\\nmod = 10 ** 6 + 3\\n\\nn, k = list(map(int, input().split()))\\n\\nif n < 100:\\n    if 2 ** n < k:\\n        print(1, 1)\\n        return\\n\\ndef factor(n, p):\\n    if n < p: return 0\\n    return n // p + factor(n // p, p)\\n\\ndef inv(n):\\n    return pow(n, mod - 2, mod)\\n\\n# 2^nk - P(2^n,k) / 2^nk\\n\\ntwo = inv(pow(2, n + factor(k - 1, 2), mod))\\n\\nv = 1\\n\\nif k >= mod:\\n    v = 0\\nelse:\\n    N = pow(2, n, mod)\\n    for i in range(k):\\n        v = v * (N - i) % mod\\n\\nA = (pow(2, n * k, mod) - v) * two % mod\\nB = pow(2, n * k, mod) * two % mod\\n\\nprint(A, B)\\n\", \"#!/usr/bin/env python3\\nimport os\\nMOD = 1000003\\ninv2 = pow(2, MOD - 2, MOD)\\n\\ndef logm(n, m):\\n    # log = 3.3\\n    # return (3, False)\\n    ans = 0\\n    whole = True\\n    while n >= m:\\n        whole = whole and (n % m == 0)\\n        ans += 1\\n        n //= m\\n    if n == 1:\\n        return (ans, whole)\\n    return (ans, False)\\n\\n\\n\\ndef fact_exp(n, k):\\n    ans = 0\\n    while n != 0:\\n        n //= k\\n        ans += n\\n    return ans\\n\\n\\ndef main():\\n    n, k = list(map(int, input().split()))\\n    e2 = n + fact_exp(k - 1, 2)\\n    div = pow(2, n * k - e2, MOD)\\n\\n    (e, w) = logm(k, 2)\\n    if e > n or (e == n and not w):\\n        print(1, 1)\\n        return\\n\\n    num = 1\\n    Nr = pow(2, n, MOD)\\n    # N * (N-1) * ... * (N - k + 1)\\n    # (-0) * (-1) * \\n    for t in range(1, k):\\n        i = (Nr - t) % MOD\\n        if i == 0:\\n            num = 0\\n            break\\n\\n        p = 0\\n        while t % 2 == 0:\\n            p += 1\\n            t //= 2\\n\\n        num = num * i * pow(inv2, p, MOD) % MOD\\n\\n    print((div - num) % MOD, div)\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n, k = map(int, input().split())\\n\\nMOD = 1000003\\n\\nK = k - 1\\n\\nmax_deg = 0\\n\\nwhile K > 0:\\n    max_deg += K // 2\\n    K //= 2\\n\\nden_deg = n * (k-1) - max_deg\\n\\nkk = 1\\nfor i in range(n):\\n    kk *= 2\\n    if kk >= k: break\\nelse:\\n    print(1, 1)\\n    return\\n\\nnumerator = 1\\ntwo_p_n = pow(2, n, MOD)\\nfor i in range(1, min(k, MOD + 1)):\\n    numerator *= (two_p_n - i + MOD) % MOD\\n    if numerator == 0: break\\n    numerator %= MOD\\n\\nrev = (MOD + 1) // 2\\nnumerator *= pow(rev, max_deg, MOD)\\nnumerator %= MOD\\n\\ndenumerator = pow(2, den_deg, MOD)\\nnumerator = (denumerator + MOD - numerator) % MOD\\n\\nprint(numerator, denumerator)\", \"import math\\n\\ndef euclid_algorithm(a, b):\\n    t1, t2 = abs(a), abs(b)\\n    #saving equalities:\\n    #t1 == x1 * a + y1 * b,\\n    #t2 == x2 * a + y2 * b. \\n    x1, y1, x2, y2 = int(math.copysign(1, a)), 0, 0, int(math.copysign(1, b))\\n    if t1 < t2:\\n        t1, t2 = t2, t1\\n        x1, y1, x2, y2 = x2, y2, x1, y1\\n\\n    while t2 > 0:\\n        k = int(t1 // t2)\\n        t1, t2 = t2, t1 % t2\\n        #t1 - k * t2 == (x1 - k * x2) * a + (y1 - k * y2) * b\\n        x1, y1, x2, y2 = x2, y2, x1 - k * x2, y1 - k * y2\\n\\n    return t1, x1, y1\\n\\ndef opposite_element(x, p):\\n    gcd, k, l = euclid_algorithm(x, p)\\n    if gcd != 1:\\n        return -1\\n    return k % p\\n\\ndef solve(n, k):\\n    if n < 70 and k > (1<<n):\\n        return (1, 1)\\n    s, l = 0, k-1\\n    while l > 0:\\n        l >>= 1\\n        s += l\\n\\n    p = 10 ** 6 + 3\\n    x = pow(2, n, p)\\n    t = pow(opposite_element(2, p), s, p)\\n    q = (pow(2, n*(k-1), p) * t) % p\\n    r = 1\\n    if k > p:\\n        r = 0\\n    else:\\n        for i in range(1, k):\\n            r *= (x-i)\\n            r %= p\\n        \\n    return ((q - r*t)%p, q)\\n    \\n    \\nn, k = list(map(int, input().split()))\\nx, y = solve(n, k)\\nprint(x, y)\\n\", \"m = 10** 6 + 3\\n\\nn, k = map(int, input().split())\\np = 1\\nfor i in range(n):\\n    p *= 2\\n    if p > k:\\n        break\\nif p < k:\\n    print('1 1')\\n    return\\n\\ngcd = tmp = k - 1\\nwhile tmp:\\n    gcd -= tmp % 2\\n    tmp //= 2\\nb = pow(2, (k - 1) * n - gcd, m)\\na = 1\\nmem = [-1]*100\\nfor i in range(1, k):\\n    cnt = 0\\n    while i % 2 == 0:\\n        i //= 2\\n        cnt += 1\\n    if mem[cnt] == -1:\\n        mem[cnt] = pow(2, n - cnt, m)\\n    a = a * (mem[cnt] - i + m) % m\\n    if a == 0:\\n        break\\nprint((b - a + m) % m, b)\", \"m = 10** 6 + 3\\nn, k = map(int, input().split())\\np = 1\\nfor i in range(n):\\n    p *= 2\\n    if p > k:\\n        break\\nif p < k:\\n    print('1 1')\\n    return\\ngcd = tmp = k - 1\\nwhile tmp:\\n    gcd -= tmp % 2\\n    tmp //= 2\\nb = pow(2, (k - 1) * n - gcd, m)\\na = 1\\nmem = [-1]*100\\nfor i in range(1, k):\\n    cnt = 0\\n    while i % 2 == 0:\\n        i //= 2\\n        cnt += 1\\n    if mem[cnt] == -1:\\n        mem[cnt] = pow(2, n - cnt, m)\\n    a = a * (mem[cnt] - i + m) % m\\n    if a == 0:\\n        break\\nprint ((b - a + m) % m, b)\", \"import math\\nn, k = [int(x) for x in input().split()]\\nif n<70 and k>2**n:\\n    print(1,1)\\n    return\\nmod = int(1e6)+3\\n\\ndef fastpow(a,b):\\n    t, ans = a, 1\\n    while b:\\n        if(b&1):\\n            ans = ans*t%mod\\n        t = t*t %mod\\n        b>>=1\\n    return ans\\n\\nt=k-1\\ncnt=0\\nwhile t:\\n    cnt += t>>1\\n    t>>=1\\n\\nx=0\\nt=fastpow(2,n)\\nif k<mod:\\n    x=1\\n    for i in range(1,k):\\n        x = x*(t-i)%mod\\ny=fastpow(2,n*(k-1))\\n\\ninv = fastpow(2,mod-2)\\ninv = fastpow(inv,cnt)\\n\\nx=(x*inv%mod+mod)%mod\\ny=(y*inv%mod+mod)%mod\\n\\nx=(y-x+mod)%mod\\n\\nprint(x,y)\", \"n, k = map(int, input().split())\\n\\nmod = 1000003\\n\\nif n < 70 and 2**n < k:\\n\\tprint('1 1\\\\n')\\n\\treturn\\n\\ndef modpow(a, e):\\n\\tret = 1\\n\\twhile e > 0:\\n\\t\\tif e%2 == 1:\\n\\t\\t\\tret = (ret*a)%mod\\n\\t\\ta = (a*a)%mod\\n\\t\\te = e//2\\n\\treturn ret\\n\\ndef pw(a, e):\\n\\tret = 1\\n\\twhile e > 0:\\n\\t\\tif e%2 == 1:\\n\\t\\t\\tret *= a\\n\\t\\ta *= a\\n\\t\\te = e//2\\n\\treturn ret\\n\\npar = n\\nfor i in range(1, 100):\\n\\tpar += ((k-1)//pw(2, i))\\n\\nmul = 1\\ncur = modpow(2, n)\\nfor i in range(k):\\n\\tmul = (cur*mul)%mod\\n\\tcur -= 1\\n\\tif mul == 0:\\n\\t\\tbreak\\nif mul != 0:\\n\\tmul = (mul*modpow(modpow(2, par), mod-2))%mod\\n\\nup = (modpow(2, n*k-par)-mul)%mod\\nif up < 0:\\n\\tup += mod\\n\\nprint(up, end=' ')\\nprint(modpow(2, n*k-par))\", \"n, k = list(map(int, input().split()))\\nif n <= 100 and k > (2 ** n):\\n    print(1, 1)\\n    return\\nMOD = 1000 * 1000 + 3\\nINV2 = (MOD + 1) // 2\\ndef add(x, y):\\n    return (x + y) % MOD\\ndef sub(x, y):\\n    rez = x - y\\n    rez %= MOD\\n    rez += MOD\\n    rez %= MOD\\n    return rez\\ndef mult(x, y):\\n    return (x * y) % MOD\\ndef binpow(x, y):\\n    if x == 1 or y == 0:\\n        return 1\\n    if x == 0:\\n        return 0\\n    rez = binpow(x, y//2)\\n    rez = mult(rez, rez)\\n    if y % 2 == 1:\\n        rez = mult(rez, x)\\n    return rez\\n\\nA = n * k\\nB = n\\ntemp = k - 1\\nwhile temp >= 2:\\n    B += temp // 2\\n    temp //= 2\\nG = min(A, B)\\n# print('G=', G)\\nm = binpow(2, n)\\n# print('m=', m)\\nP = 1\\nfor i in range(k):\\n    P = mult(P, sub(m, i))\\n    if P == 0:\\n        break\\nP = mult(P, binpow(INV2, G))\\nQ = binpow(m, k)\\nQ = mult(Q, binpow(INV2, G))\\nP = sub(Q, P)\\nprint(P, Q)\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3 2\\n\",\n    \"1 3\\n\",\n    \"4 3\\n\",\n    \"1000000000000000000 1000000000000000000\\n\",\n    \"59 576460752303423489\\n\",\n    \"1234567891234 100005\\n\",\n    \"2 4\\n\",\n    \"59 576460752303423488\\n\",\n    \"2016 2016\\n\",\n    \"2016 2017\\n\",\n    \"468804735183774830 244864585447548924\\n\",\n    \"172714899512474455 414514930706102803\\n\",\n    \"876625063841174080 360793239109880865\\n\",\n    \"70181875975239647 504898544415017211\\n\",\n    \"364505998666117889 208660487087853057\\n\",\n    \"648371335753080490 787441\\n\",\n    \"841928147887146057 620004\\n\",\n    \"545838312215845682 715670\\n\",\n    \"473120513399321115 489435\\n\",\n    \"17922687587622540 3728\\n\",\n    \"211479504016655403 861717213151744108\\n\",\n    \"718716873663426516 872259572564867078\\n\",\n    \"422627037992126141 41909917823420958\\n\",\n    \"616183854421159004 962643186273781485\\n\",\n    \"160986032904427725 153429\\n\",\n    \"88268234087903158 290389\\n\",\n    \"58453009367192916 164246\\n\",\n    \"565690379013964030 914981\\n\",\n    \"269600543342663655 10645\\n\",\n    \"37774758680708184 156713778825283978\\n\",\n    \"231331570814773750 77447051570611803\\n\",\n    \"935241735143473375 247097392534198386\\n\",\n    \"639151895177205704 416747737792752265\\n\",\n    \"412663884364501543 401745061547424998\\n\",\n    \"180838095407578776 715935\\n\",\n    \"884748259736278401 407112\\n\",\n    \"78305076165311264 280970\\n\",\n    \"782215240494010889 417929\\n\",\n    \"486125404822710514 109107\\n\",\n    \"57626821183859235 372443612949184377\\n\",\n    \"27811605053083586 516548918254320722\\n\",\n    \"955093801941591723 462827230953066080\\n\",\n    \"659003966270291348 426245\\n\",\n    \"852560778404356914 258808\\n\",\n    \"397362961182592931 814397\\n\",\n    \"904600330829364045 969618\\n\",\n    \"98157142963429612 169605644318211774\\n\",\n    \"802067302997161941 115883952721989836\\n\",\n    \"505977467325861565 285534302275511011\\n\",\n    \"274151686958873391 747281437213482980\\n\",\n    \"467708499092938957 59762\\n\",\n    \"751573831884934263 851791\\n\",\n    \"455483991918666592 947456\\n\",\n    \"649040812642666750 821314\\n\",\n    \"417215023685743983 376900\\n\",\n    \"121125188014443608 400338158982406735\\n\",\n    \"314682004443476471 544443468582510377\\n\",\n    \"821919374090247584 554985827995633347\\n\",\n    \"525829538418947209 501264136399411409\\n\",\n    \"426597183791521709 928925\\n\",\n    \"620154000220554572 802783\\n\",\n    \"324064160254286900 898448\\n\",\n    \"831301534196025310 690475\\n\",\n    \"24858346330090877 523038\\n\",\n    \"569660524813359598 814752357830129986\\n\",\n    \"496942725996835031 761030666233908048\\n\",\n    \"467127505571092085 905135971539044394\\n\",\n    \"394409702459600222 851414284237789752\\n\",\n    \"703820075205013062 862025309890418636\\n\",\n    \"471994290543057591 972026\\n\",\n    \"665551106972090453 845883\\n\",\n    \"369461267005822782 537061\\n\",\n    \"73371431334522407 674020\\n\",\n    \"266928247763555270 547878\\n\",\n    \"615057631564895479 807178821338760482\\n\",\n    \"318967795893595104 976829166597314361\\n\",\n    \"512524612322627967 897562435047674890\\n\",\n    \"216434772356360296 67212780306228770\\n\",\n    \"13491088710006829 715337619732144903\\n\",\n    \"688519152023104450 70486\\n\",\n    \"685403173770208801 962607\\n\",\n    \"389313338098908426 99564\\n\",\n    \"93223502427608051 790744\\n\",\n    \"286780314561673617 664601\\n\",\n    \"831582488749975043 182016637013124494\\n\",\n    \"758864689933450475 128294949711869852\\n\",\n    \"532376674825779019 113292273466542585\\n\",\n    \"236286839154478644 282942618725096464\\n\",\n    \"940197003483178269 77403\\n\",\n    \"708371214526255502 632992\\n\",\n    \"901928035250255660 465555\\n\",\n    \"605838195283987989 198026\\n\",\n    \"15266076338626979 913942576088954168\\n\",\n    \"83260344505016157 935999340494020219\\n\",\n    \"851434559843060686 397746475431992189\\n\",\n    \"555344724171760311 567396824985513364\\n\",\n    \"748901536305825878 347728\\n\",\n    \"452811696339558207 443394\\n\",\n    \"960049070281296616 235421\\n\",\n    \"728223285619341145 791009\\n\",\n    \"698408060898630904 50803201495883240\\n\",\n    \"625690262082106337 220453546754437119\\n\",\n    \"329600422115838666 166731855158215181\\n\",\n    \"523157242839838824 310837164758318823\\n\",\n    \"871286622346211738 836848346410668404\\n\",\n    \"575196786674911363 36374\\n\",\n    \"768753603103944226 868940\\n\",\n    \"472663767432643850 601411\\n\",\n    \"176573931761343475 697077\\n\",\n    \"301399940652446487 937011639371661304\\n\",\n    \"494956757081479349 760223\\n\",\n    \"198866921410178974 492694\\n\",\n    \"902777085738878599 348432\\n\",\n    \"96333897872944166 462217\\n\",\n    \"864508113210988695 17803\\n\",\n    \"371745482857759808 590068361140585059\\n\",\n    \"341930258137049567 734173670740688701\\n\",\n    \"269212459320525000 680451979144466763\\n\",\n    \"973122623649224625 850102328697987938\\n\",\n    \"517924802132493346 67413\\n\",\n    \"711481618561526208 858685\\n\",\n    \"218718983913330026 55198\\n\",\n    \"922629148242029651 787671\\n\",\n    \"116185964671062513 620234\\n\",\n    \"884360180009107043 795255840146329784\\n\",\n    \"588270344337806667 964906185404883662\\n\",\n    \"781827160766839530 885639453855244191\\n\",\n    \"91237529217285074 672878442653097259\\n\",\n    \"859411744555329603 932262\\n\",\n    \"563321908884029228 664734\\n\",\n    \"756878725313062090 497297\\n\",\n    \"460788885346794419 634257\\n\",\n    \"164699049675494044 325434\\n\",\n    \"500001 1000002\\n\",\n    \"1000003 1000002\\n\",\n    \"1000002 1000003\\n\",\n    \"1000002 1000003\\n\",\n    \"1000002 1000002\\n\",\n    \"500001 1000003\\n\"\n  ],\n  \"outputs\": [\n    \"1 8\",\n    \"1 1\",\n    \"23 128\",\n    \"906300 906300\",\n    \"1 1\",\n    \"173817 722464\",\n    \"29 32\",\n    \"840218 840218\",\n    \"1564 227035\",\n    \"360153 815112\",\n    \"365451 365451\",\n    \"626500 626500\",\n    \"34117 34117\",\n    \"79176 79176\",\n    \"83777 83777\",\n    \"228932 228932\",\n    \"151333 51640\",\n    \"156176 156176\",\n    \"57896 535051\",\n    \"478998 792943\",\n    \"196797 196797\",\n    \"401470 401470\",\n    \"268735 268735\",\n    \"149006 149006\",\n    \"100374 100374\",\n    \"566668 88331\",\n    \"317900 341568\",\n    \"547343 547343\",\n    \"913809 282202\",\n    \"73122 73122\",\n    \"578654 578654\",\n    \"181888 181888\",\n    \"135045 135045\",\n    \"228503 228503\",\n    \"378695 378695\",\n    \"25714 811489\",\n    \"293282 624669\",\n    \"665887 270857\",\n    \"832669 164722\",\n    \"802451 802451\",\n    \"894732 894732\",\n    \"999170 999170\",\n    \"795318 278062\",\n    \"775128 775128\",\n    \"155345 155345\",\n    \"245893 245893\",\n    \"409023 409023\",\n    \"928705 928705\",\n    \"782797 782797\",\n    \"977029 977029\",\n    \"283212 204310\",\n    \"905743 905743\",\n    \"570626 570626\",\n    \"57323 57323\",\n    \"122689 122689\",\n    \"199488 199488\",\n    \"279665 279665\",\n    \"854880 854880\",\n    \"715564 715564\",\n    \"835709 835709\",\n    \"163153 163153\",\n    \"18338 18338\",\n    \"964028 964028\",\n    \"5846 5846\",\n    \"780635 780635\",\n    \"746587 746587\",\n    \"608084 608084\",\n    \"419420 419420\",\n    \"982260 982260\",\n    \"215668 215668\",\n    \"623684 623684\",\n    \"97003 97003\",\n    \"899111 372106\",\n    \"817352 54712\",\n    \"52078 52078\",\n    \"750015 750015\",\n    \"614855 614855\",\n    \"995572 995572\",\n    \"719453 719453\",\n    \"476402 371144\",\n    \"135409 135409\",\n    \"205907 386429\",\n    \"983387 983387\",\n    \"654850 654850\",\n    \"159828 159828\",\n    \"37325 37325\",\n    \"36122 36122\",\n    \"187677 187677\",\n    \"119089 181418\",\n    \"615316 615316\",\n    \"586380 781987\",\n    \"929969 156402\",\n    \"506165 506165\",\n    \"138293 138293\",\n    \"314138 314138\",\n    \"666610 666610\",\n    \"80599 80599\",\n    \"474530 348263\",\n    \"274784 325200\",\n    \"764528 274644\",\n    \"750308 750308\",\n    \"741435 741435\",\n    \"242921 242921\",\n    \"726051 726051\",\n    \"530710 530710\",\n    \"88076 806040\",\n    \"118118 118118\",\n    \"203104 203104\",\n    \"389281 749563\",\n    \"165989 165989\",\n    \"586955 423513\",\n    \"847137 847137\",\n    \"396798 564327\",\n    \"367832 367832\",\n    \"107443 838933\",\n    \"748215 748215\",\n    \"21530 21530\",\n    \"868951 868951\",\n    \"781676 781676\",\n    \"954073 995488\",\n    \"929035 929035\",\n    \"99469 89622\",\n    \"164442 164442\",\n    \"798435 622171\",\n    \"541758 541758\",\n    \"544853 544853\",\n    \"627074 627074\",\n    \"988072 988072\",\n    \"859175 859175\",\n    \"883734 883734\",\n    \"641345 641345\",\n    \"660266 660266\",\n    \"170498 994561\",\n    \"998979 999491\",\n    \"256 256\",\n    \"256 256\",\n    \"256 256\",\n    \"512 512\",\n    \"256 256\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/711/E",
  "starter_code": ""
}