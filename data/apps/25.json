{
  "task_id": "APPS/25",
  "problem_id": 25,
  "prompt": "You are given matrix with n rows and n columns filled with zeroes. You should put k ones in it in such a way that the resulting matrix is symmetrical with respect to the main diagonal (the diagonal that goes from the top left to the bottom right corner) and is lexicographically maximal.\n\nOne matrix is lexicographically greater than the other if the first different number in the first different row from the top in the first matrix is greater than the corresponding number in the second one.\n\nIf there exists no such matrix then output -1.\n\n\n-----Input-----\n\nThe first line consists of two numbers n and k (1 \u2264 n \u2264 100, 0 \u2264 k \u2264 10^6).\n\n\n-----Output-----\n\nIf the answer exists then output resulting matrix. Otherwise output -1.\n\n\n-----Examples-----\nInput\n2 1\n\nOutput\n1 0 \n0 0 \n\nInput\n3 2\n\nOutput\n1 0 0 \n0 1 0 \n0 0 0 \n\nInput\n2 5\n\nOutput\n-1",
  "solutions": "[\"#!/usr/bin/env python3\\n\\ndef main():\\n    import sys\\n\\n    readln = sys.stdin.readline\\n    try:\\n        while True:\\n            n, k = list(map(int, input().split()))\\n            a = [['0'] * n for i in range(n)]\\n            i = j = 0\\n            while k > 0:\\n                if i == j:\\n                    a[i][j] = '1'\\n                    k -= 1\\n                    j += 1\\n                elif k >= 2:\\n                    a[i][j] = a[j][i] = '1'\\n                    k -= 2\\n                    j += 1\\n                elif i != n - 1:\\n                    a[i + 1][i + 1] = '1'\\n                    k = 0\\n                else:\\n                    assert a[i][i] == '1'\\n                    a[i][i] = '0'\\n                    a[i][j] = a[j][i] = '1'\\n                    k = 0\\n\\n                if j == n:\\n                    i += 1\\n                    if i == n and k > 0:\\n                        print(-1)\\n                        break\\n                    j = i\\n            else:\\n                for row in a:\\n                    print(' '.join(row))\\n\\n    except EOFError:\\n        pass\\n\\nmain()\\n\", \"n, k = [int(x) for x in input().split()]\\n\\nif k > n*n:\\n    print('-1')\\nelse:\\n\\n\\n    res = [[0 for _ in range(n)] for _ in range(n)]\\n\\n    for i in range(n):\\n        for j in range(n):\\n            if i > j:\\n                res[i][j] = res[j][i]\\n            elif i == j:\\n                if k > 0:\\n                    res[i][j] = 1\\n                    k -= 1\\n            else:\\n                if k > 1:\\n                    res[i][j] = 1\\n                    k -= 2\\n    for i in range(n):\\n        print(' '.join(str(res[i][j]) for j in range(n)))\\n\", \"def main():\\n    n, k = map(int, input().split())\\n\\n    if k > n**2:\\n        print(-1)\\n        return\\n\\n    A = [[0] * n for _ in range(n)]\\n\\n    i = 0\\n    j = 0\\n    while k > 1:\\n        A[i][j] = 1\\n        k -= 1\\n        j += 1\\n        while k > 1 and j < n:\\n            A[i][j] = 1\\n            A[j][i] = 1\\n            j += 1\\n            k -= 2\\n        i += 1\\n        j = i\\n    if k == 1:\\n        A[i][j] = 1\\n\\n    for i in range(n):\\n        for j in range(n):\\n            print(A[i][j], end=' ')\\n        print()\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"import sys\\n\\ndef solve():\\n    n, k = map(int, input().split())\\n\\n    if k > n**2:\\n        print(-1)\\n    else:\\n        mat = [[0]*n for i in range(n)]\\n\\n        for i in range(n):\\n            for j in range(i, n):\\n                if k <= 0:\\n                    break\\n                if i == j:\\n                    mat[i][i] = 1\\n                    k -= 1\\n                else:\\n                    if k > 1:\\n                        mat[i][j] = mat[j][i] = 1\\n                        k -= 2\\n\\n        for mat_r in mat:\\n            print(*mat_r)\\n\\ndef __starting_point():\\n    solve()\\n__starting_point()\", \"n, k = list(map(int, input().split()))\\n\\nif n * n < k:\\n    print(-1)\\nelse:\\n    arr = [[0 for _ in range(n)] for _ in range(n)]\\n    cnt = 0\\n    for i in range(n):\\n        if cnt < k:\\n            arr[i][i] = 1\\n            cnt += 1\\n        for j in range(i + 1, n):\\n            if cnt <= k - 2:\\n                arr[i][j] = 1\\n                arr[j][i] = 1\\n                cnt += 2\\n    for r in arr:\\n        print(' '.join(map(str, r)))\\n\\n\", \"\\ndef main(n, k):\\n    total = n*n\\n    if total < k:\\n        print(-1)\\n        return\\n\\n    m = [[0]*n for _ in range(n)]\\n    fill(m, n, k)\\n    print_m(m)\\n\\ndef fill(m, n ,k):\\n    for i in range(n):\\n        for j in range(i, n):\\n            if k == 0:\\n                return\\n\\n            if i == j:\\n                m[i][j] = 1\\n                k -= 1\\n            elif k == 1:\\n                m[i+1][i+1] = 1\\n                k = 0\\n                return\\n            else:\\n                m[i][j] = 1\\n                m[j][i] = 1\\n                k -= 2\\n\\ndef print_m(m):\\n    for row in m:\\n        print(' '.join(map(str, row)))\\n\\n\\nn, k = [int(x) for x in input().split()]\\nmain(n, k)\\n\", \"\\nn, k = list(map(int, input().split() ))\\n\\nif k> n*n:\\n    print(-1)\\nelse:\\n    b = [[0]*n for i in range(n)]\\n    c = 0\\n    i = 0\\n    j = 0\\n    t = -1\\n    while c < k:\\n        if i == j:\\n            b[i][j] = 1\\n            c += 1\\n            j += 1\\n            t = 0\\n            \\n        elif j == n:\\n            i += 1\\n            j = i\\n            t = 1\\n            \\n        else:\\n            \\n            b[i][j] = 1\\n            b[j][i] = 1\\n            j += 1\\n            c+=2\\n            t = 2\\n            \\n    if c == k:\\n        p = \\\"\\\"\\n        for q in range(n):\\n            for w in range(n):\\n                p += str(b[q][w]) + \\\" \\\"\\n            print(p)\\n            p = \\\"\\\"\\n                \\n    else:\\n        if t == 0:\\n            j -= 1\\n        if t == 1:\\n            i -=1\\n            j = n-1\\n        if t == 2:\\n            j -=1\\n        b[i][j] = 0\\n        b[j][i] = 0\\n        b[i+1][i+1] = 1\\n        p = \\\"\\\"\\n        for q in range(n):\\n            for w in range(n):\\n                p += str(b[q][w]) + \\\" \\\"\\n            print(p)\\n            p = \\\"\\\"\\n    \\n\", \"def maxim():\\n    n,k=list(map(int,input().strip().split()))\\n    if k<0:\\n        print(-1)\\n        return\\n\\n    if k>(n**2):\\n        print(-1)\\n        return\\n    \\n    a=[[0 for _ in range(n)] for _ in range(n)]\\n    \\n    for i in range(n):\\n        if k>=1:\\n            a[i][i]=1\\n            k-=1\\n        for j in range(i+1,n):\\n            if k>=2:\\n                a[i][j]=1\\n                a[j][i]=1\\n                k-=2\\n            elif k>=1:\\n                break\\n    if k>0:\\n        print(-1)\\n        return\\n\\n    for i in range(n):\\n        b=[str(i) for i in a[i]]\\n        b=' '.join(b)\\n        print(b)\\n\\nmaxim()\\n\", \"def show():\\n    for i in range(n):\\n        print(' '.join([str(s) for s in a[i]]))\\n\\nn,k=[int(s) for s in input().split()]\\na=[[0 for i in range(n)] for j in range(n)]\\nif k>n**2:\\n    print(-1)\\nelif k==0:\\n    show()\\nelse:\\n    for i in range(n):\\n        if k>0:\\n            a[i][i]=1\\n            k-=1\\n            t=i\\n            while k>=2 and t<n-1:\\n                t+=1\\n                a[i][t]=1\\n                a[t][i]=1\\n                k-=2\\n        else:\\n            break\\n    show()\", \"n, k = list(map(int, input().split()))\\na = [[0 for j in range(n)]for i in range(n)]\\nif n * n < k:\\n    print(-1)\\n    return\\nfor i in range(n):\\n    cur = 2 * (n - i) - 1\\n    if cur <= k:\\n        k -= cur\\n        for j in range(i, n):\\n            a[i][j] = 1\\n            a[j][i] = 1\\n    else:\\n        if k == 0:\\n            break\\n        if k == 1:\\n            a[i][i] = 1\\n            break\\n        for j in range(i, i + (k + 1) // 2):\\n            a[i][j] = 1\\n            a[j][i] = 1\\n        if not k % 2:\\n            a[i + 1][i + 1] = 1\\n        break\\n        \\nfor i in a:\\n    print(*i)\\n    \\n\", \"#!/usr/bin/env python3\\nfrom sys import stdin,stdout\\n\\ndef ri():\\n    return list(map(int, stdin.readline().split()))\\n#lines = stdin.readlines()\\n\\nn, k = ri()\\n\\nif k > n*n:\\n    print(-1)\\n    return\\n\\nm = [[0 for _ in range(n)] for __ in range(n)]\\n\\nfor i in range(n):\\n    if k == 1:\\n        m[i][i] = 1\\n        k-=1\\n        break\\n    if k == 0:\\n        break\\n    m[i][i] = 1\\n    k -= 1\\n    for j in range(i+1, n):\\n        if k == 1:\\n            m[i+1][i+1] = 1\\n            k -= 1\\n            break\\n        if k == 0:\\n            break\\n        m[i][j] = 1\\n        m[j][i] = 1\\n        k -= 2\\n\\nfor i in range(n):\\n    print(*m[i])\\n\", \"n, k = map(int, input().split())\\n\\nmat = [[0]*n for i in range(n)]\\nfor i in range(n):\\n    for j in range(n):\\n        if i == j and k > 0:\\n            mat[i][j] = 1\\n            k -= 1\\n        elif i < j and k > 1:\\n            mat[i][j] = mat[j][i] = 1\\n            k -= 2\\nif k > 0:\\n    print(-1)\\n    return\\n\\nprint(\\\"\\\\n\\\".join(\\\" \\\".join(map(str, e)) for e in mat))\", \"\\ns = input()\\nn = int(s.split(' ')[0])\\nk = int(s.split(' ')[1])\\n\\narr = []\\nfor i in range(n):\\n    arr.append([0]*n)\\nif k > n*n:\\n    print(-1)\\nelse:\\n    l = 0\\n    for i in range(n):\\n        for j in range(n):\\n            if arr[i][j] == 0:\\n                if l < k:\\n                    if i == j:\\n                        arr[i][j] = 1\\n                        l += 1\\n                    elif l < k - 1:\\n                        arr[i][j] = 1\\n                        arr[j][i] = 1\\n                        l += 2\\n\\n    for i in range(n):\\n        for j in range(n):\\n           print(arr[i][j], end=' ')\\n        print()\\n\", \"import sys\\n\\ndef solve():\\n    n, k = map(int, input().split())\\n\\n    mat = [[0]*n for i in range(n)]\\n\\n    for i in range(n):\\n        for j in range(i, n):\\n            if k == 0:\\n                break\\n            if i == j:\\n                mat[i][j] = 1\\n                k -= 1\\n            elif k > 1:\\n                mat[i][j] = mat[j][i] = 1\\n                k -= 2\\n\\n    if k != 0:\\n        print(-1)\\n        return\\n\\n    for mat_r in mat:\\n        print(*mat_r)\\n\\ndef __starting_point():\\n    solve()\\n__starting_point()\", \"import sys\\nimport math\\nn,k = map(int, input().split())\\nans = [[0 for i in range(n)] for i in range(n)]\\nrow = 0;\\ncol = 0;\\nscol = 0;\\nwhile(row < n):\\n    col = scol\\n    while(col < n):\\n        if(col == row and k > 0):\\n            ans[row][col] = 1\\n            k  -= 1\\n        elif k > 0:\\n            if k >= 2:\\n                ans[row][col] = 1\\n                ans[col][row] = 1\\n                k -= 2\\n        col += 1\\n     \\n    row += 1\\n    scol += 1\\nif k == 0:\\n    for i in range(n):\\n        for j in range(n):\\n            print(ans[i][j], end = \\\" \\\")\\n        print()\\nelse:\\n    print(-1)\\n\", \"'''input\\n4 5\\n'''\\nn, k = list(map(int, input().split()))\\nm = [[\\\"0\\\"]*n for _ in range(n)] \\nfor x in range(n):\\n\\tfor y in range(x, n):\\n\\t\\tif x == y and k >= 1:\\n\\t\\t\\tm[x][y] = \\\"1\\\"\\n\\t\\t\\tk -= 1\\n\\t\\telif k >= 2:\\n\\t\\t\\tm[x][y] = \\\"1\\\"\\n\\t\\t\\tm[y][x] = \\\"1\\\"\\n\\t\\t\\tk -= 2\\nif k > 0:\\n\\tprint(-1)\\nelse:\\n\\tprint(\\\"\\\\n\\\".join([\\\" \\\".join(i) for i in m]))\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\", \"n,k = list(map(int,input().split()))\\nks = k\\nl = []\\nfor i in range(n):\\n    p = []\\n    for j in range(n):\\n        p.append(0)\\n    l.append(p)\\nif(k>n**2):\\n    print(-1)\\nelse:\\n    for i in range(n):\\n        for j in range(n):\\n            if k==0:\\n                break\\n            if(i==j):\\n                k -=1\\n                l[i][j] = 1\\n            else:\\n                if k>1 and l[j][i]==0:\\n                    k-=2\\n                    l[i][j] = 1\\n                    l[j][i] = 1\\n    ones = 0\\n    for row in l:\\n        ones += row.count(1)\\n    if ones!=ks:\\n        print(-1)\\n    else:\\n        for i in l:\\n            s = \\\"\\\"\\n            for j in i:\\n                s += \\\" \\\"+str(j)\\n            print(s[1:])\\n\\n\", \"def main():\\n    n, k = list(map(int, input().split()))\\n    l = [['0'] * n for _ in range(n)]\\n    for y, row in enumerate(l):\\n        if not k:\\n            break\\n        k -= 1\\n        row[y] = '1'\\n        for x in range(y + 1, n):\\n            if k < 2:\\n                break\\n            k -= 2\\n            l[x][y] = row[x] = '1'\\n    if k:\\n        print(-1)\\n    else:\\n        for row in l:\\n            print(' '.join(row))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"import math,string,itertools,collections,re,fractions,array,copy\\nimport bisect\\nimport heapq\\nfrom itertools import chain, dropwhile, permutations, combinations\\nfrom collections import deque, defaultdict, OrderedDict, namedtuple, Counter, ChainMap\\n\\n\\n# Guide:\\n#   1. construct complex data types while reading (e.g. graph adj list)\\n#   2. avoid any non-necessary time/memory usage\\n#   3. avoid templates and write more from scratch\\n#   4. switch to \\\"flat\\\" implementations\\n\\ndef VI(): return list(map(int,input().split()))\\ndef I(): return int(input())\\ndef LIST(n,m=None): return [0]*n if m is None else [[0]*m for i in range(n)]\\ndef ELIST(n): return [[] for i in range(n)]\\ndef MI(n=None,m=None): # input matrix of integers\\n    if n is None: n,m = VI()\\n    arr = LIST(n)\\n    for i in range(n): arr[i] = VI()\\n    return arr\\ndef MS(n=None,m=None): # input matrix of strings\\n    if n is None: n,m = VI()\\n    arr = LIST(n)\\n    for i in range(n): arr[i] = input()\\n    return arr\\ndef MIT(n=None,m=None): # input transposed matrix/array of integers\\n    if n is None: n,m = VI()\\n    a = MI(n,m)\\n    arr = LIST(m,n)\\n    for i,l in enumerate(a):\\n        for j,x in enumerate(l):\\n            arr[j][i] = x\\n    return arr\\n\\ndef main(info=0):\\n    n,k = VI()\\n    if k>n*n:\\n        print(\\\"-1\\\")\\n    else:\\n        m = [[\\\"0\\\" for _ in range(n)] for _ in range(n)]\\n        i,j = 0,0\\n        for i in range(n):\\n            for j in range(i, n):\\n                if k==0: break\\n                if i==j:\\n                    m[i][j] = \\\"1\\\"\\n                    k -= 1\\n                else:\\n                    if k==1: continue\\n                    m[i][j] = \\\"1\\\"\\n                    m[j][i] = \\\"1\\\"\\n                    k -= 2\\n            if k==0: break\\n        for l in m:\\n            print(\\\" \\\".join(l))\\n\\n\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"def is_available(i, j):\\n    return i < n and j < n and matrix[i][j] == 0\\n\\nn, k = list(map(int, input().split()))\\n\\nif k > n*n:\\n    print(-1)\\nelse:\\n    matrix = []\\n    for i in range(n):\\n        matrix.append([0] * n)\\n    if(k%2 == 1):\\n        matrix[0][0] = 1\\n        k -= 1\\n\\n    for i in range(n):\\n        for j in range(n):\\n            if k == 0:\\n                i = n\\n                break\\n            if matrix[i][j] == 1:\\n                continue\\n            if i == j:\\n                matrix[i+1][j+1] = matrix[i][j] = 1\\n            else:\\n                matrix[i][j] = matrix[j][i] = 1\\n            k -= 2\\n\\n    if k >0:    print(-1)\\n    else:       print('\\\\n'.join([' '.join(map(str, row)) for row in matrix]))\\n\", \"def is_available(i, j):\\n    return i < n and j < n and matrix[i][j] == 0\\n\\nn, k = list(map(int, input().split()))\\n\\nif k > n*n:\\n    print(-1)\\nelse:\\n    matrix = []\\n    for i in range(n):\\n        matrix.append([0] * n)\\n    if(k%2 == 1):\\n        matrix[0][0] = 1\\n        k -= 1\\n\\n    for i in range(n):\\n        for j in range(n):\\n            if k == 0:\\n                i = n\\n                break\\n            if matrix[i][j] == 1:\\n                continue\\n            if i == j:\\n                matrix[i+1][j+1] = matrix[i][j] = 1\\n            else:\\n                matrix[i][j] = matrix[j][i] = 1\\n            k -= 2\\n\\n    print('\\\\n'.join([' '.join(map(str, row)) for row in matrix]))\\n\", \"N, K = map( int, input().split() )\\nif K > N * N:\\n  exit( print( -1 ) )\\nG = [ [ 0 for i in range( N ) ] for j in range( N ) ]\\nfor i in range( N ):\\n  if K == 0: break\\n  G[ i ][ i ] = 1\\n  K -= 1\\n  for j in range( i + 1, N ):\\n    if K <= 1: break\\n    G[ i ][ j ], G[ j ][ i ] = 1, 1\\n    K -= 2\\nfor i in range( N ):\\n  print( ' '.join( str( v ) for v in G[ i ] ) )\\n\", \"# -*- coding: utf-8 -*-\\nn,k = list(map(int, input().split(' ')))\\nif k>n**2:\\n    print(-1)\\nelif k==n**2:\\n    a = [['1']*n for i in range(n)]\\n    for i in range(n):\\n        a[i] = ' '.join(a[i])\\n        print(a[i])\\nelse:\\n    a = [['0']*n for i in range(n)]\\n    c = 0\\n    i = 0\\n    b = True\\n    while b and i<n:\\n        for j in range(n):\\n            if i==j:\\n                if c+1>k:\\n                    continue\\n                a[i][j] = '1'\\n                c += 1\\n            else:\\n                if a[j][i]!='1':\\n                    if c + 2 >k:\\n                        continue\\n                    a[i][j] = '1'\\n                    a[j][i] = '1'\\n                    c += 2\\n            if c==k:\\n                b = False\\n                break\\n        i += 1\\n    for i in range(n):\\n        a[i] = ' '.join(a[i])\\n        print(a[i])\\n\", \"str_params = input()\\nparams = [int(s) for s in str_params.split(' ')]\\nn = params[0]\\nk = params[1]\\npart = 0;\\nif (k > n**2):\\n\\tprint(('%d\\\\n'%(-1)));\\nelse:\\n\\tmatr = [[0 for x in range(n)] for y in range(n)]\\n\\ti = 1\\n\\twhile part < k:\\n\\t\\tmatr[i-1][i-1] = 1\\n\\t\\tpart = part+1\\n\\t\\tj = i\\n\\t\\twhile (k-part>1) & (j<n):\\n\\t\\t\\t#print (i-1, j)\\n\\t\\t\\tmatr[i-1][j] = 1\\n\\t\\t\\tmatr[j][i-1] = 1\\n\\t\\t\\tj = j+1\\n\\t\\t\\tpart = part+2\\n\\t\\ti = i+1;\\n\\tfor row in matr:\\n\\t\\tprint(' '.join(map(str,row)))\\n\\tprint ()\\n\", \"import math\\nimport re\\n\\n\\n\\nn, k  = list(map(int, input().split()))\\n\\n\\nif k > n*n:\\n    print(-1)\\n    return\\n\\na = [[0] * n for i in range(n)]\\n\\nfor i in range(n):\\n    if k == 0:\\n        break\\n    a[i][i] = 1\\n    k -= 1\\n    if k == 0:\\n        break\\n    elif k == 1:\\n        a[i+1][i+1] = 1\\n        break\\n    else:\\n        for j in range(i+1, min(n, i + 1 + k//2)):\\n                       a[i][j] = 1\\n                       a[j][i] = 1\\n                       k -= 2\\n\\n\\nfor i in range(n):\\n    print(' '.join(map(str, a[i])))\\n\\n\\n# n = int(input())\\n# a = list(map(int, input().split()))\\n# #print(' '.join(map(str, a)))\\n#\\n#\\n#\\n# b = set()\\n#\\n# for el in a:\\n#     if el-1 in b:\\n#         b.discard(el-1)\\n#         b.add(el)\\n#     else:\\n#         b.add(el)\\n#\\n# print(len(b))\\n\"]",
  "input_output": "{\"inputs\": [\"2 1\\n\", \"3 2\\n\", \"2 5\\n\", \"1 0\\n\", \"1 1\\n\", \"20 401\\n\", \"100 10001\\n\", \"2 3\\n\", \"4 5\\n\", \"5 6\\n\", \"5 24\\n\", \"2 0\\n\", \"3 5\\n\", \"3 3\\n\", \"5 10\\n\", \"3 4\\n\", \"4 3\\n\", \"1 1000000\\n\", \"3 6\\n\", \"1 2\\n\", \"1 0\\n\", \"1 1\\n\", \"1 2\\n\", \"1 3\\n\", \"1 4\\n\", \"1 5\\n\", \"1 6\\n\", \"1 7\\n\", \"1 8\\n\", \"1 9\\n\", \"1 10\\n\", \"1 11\\n\", \"1 12\\n\", \"1 13\\n\", \"1 14\\n\", \"1 15\\n\", \"1 16\\n\", \"1 17\\n\", \"1 18\\n\", \"1 19\\n\", \"1 20\\n\", \"1 21\\n\", \"1 22\\n\", \"1 23\\n\", \"1 24\\n\", \"1 25\\n\", \"1 26\\n\", \"2 0\\n\", \"2 1\\n\", \"2 2\\n\", \"2 3\\n\", \"2 4\\n\", \"2 5\\n\", \"2 6\\n\", \"2 7\\n\", \"2 8\\n\", \"2 9\\n\", \"2 10\\n\", \"2 11\\n\", \"2 12\\n\", \"2 13\\n\", \"2 14\\n\", \"2 15\\n\", \"2 16\\n\", \"2 17\\n\", \"2 18\\n\", \"2 19\\n\", \"2 20\\n\", \"2 21\\n\", \"2 22\\n\", \"2 23\\n\", \"2 24\\n\", \"2 25\\n\", \"2 26\\n\", \"3 0\\n\", \"3 1\\n\", \"3 2\\n\", \"3 3\\n\", \"3 4\\n\", \"3 5\\n\", \"3 6\\n\", \"3 7\\n\", \"3 8\\n\", \"3 9\\n\", \"3 10\\n\", \"3 11\\n\", \"3 12\\n\", \"3 13\\n\", \"3 14\\n\", \"3 15\\n\", \"3 16\\n\", \"3 17\\n\", \"3 18\\n\", \"3 19\\n\", \"3 20\\n\", \"3 21\\n\", \"3 22\\n\", \"3 23\\n\", \"3 24\\n\", \"3 25\\n\", \"3 26\\n\", \"4 0\\n\", \"4 1\\n\", \"4 2\\n\", \"4 3\\n\", \"4 4\\n\", \"4 5\\n\", \"4 6\\n\", \"4 7\\n\", \"4 8\\n\", \"4 9\\n\", \"4 10\\n\", \"4 11\\n\", \"4 12\\n\", \"4 13\\n\", \"4 14\\n\", \"4 15\\n\", \"4 16\\n\", \"4 17\\n\", \"4 18\\n\", \"4 19\\n\", \"4 20\\n\", \"4 21\\n\", \"4 22\\n\", \"4 23\\n\", \"4 24\\n\", \"4 25\\n\", \"4 26\\n\", \"5 0\\n\", \"5 1\\n\", \"5 2\\n\", \"5 3\\n\", \"5 4\\n\", \"5 5\\n\", \"5 6\\n\", \"5 7\\n\", \"5 8\\n\", \"5 9\\n\", \"5 10\\n\", \"5 11\\n\", \"5 12\\n\", \"5 13\\n\", \"5 14\\n\", \"5 15\\n\", \"5 16\\n\", \"5 17\\n\", \"5 18\\n\", \"5 19\\n\", \"5 20\\n\", \"5 21\\n\", \"5 22\\n\", \"5 23\\n\", \"5 24\\n\", \"5 25\\n\", \"5 26\\n\", \"100 10001\\n\"], \"outputs\": [\"1 0 \\n0 0 \\n\", \"1 0 0 \\n0 1 0 \\n0 0 0 \\n\", \"-1\\n\", \"0 \\n\", \"1 \\n\", \"-1\\n\", \"-1\\n\", \"1 1 \\n1 0 \\n\", \"1 1 1 0 \\n1 0 0 0 \\n1 0 0 0 \\n0 0 0 0 \\n\", \"1 1 1 0 0 \\n1 1 0 0 0 \\n1 0 0 0 0 \\n0 0 0 0 0 \\n0 0 0 0 0 \\n\", \"1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 1 0 \\n\", \"0 0 \\n0 0 \\n\", \"1 1 1 \\n1 0 0 \\n1 0 0 \\n\", \"1 1 0 \\n1 0 0 \\n0 0 0 \\n\", \"1 1 1 1 1 \\n1 1 0 0 0 \\n1 0 0 0 0 \\n1 0 0 0 0 \\n1 0 0 0 0 \\n\", \"1 1 0 \\n1 1 0 \\n0 0 0 \\n\", \"1 1 0 0 \\n1 0 0 0 \\n0 0 0 0 \\n0 0 0 0 \\n\", \"-1\\n\", \"1 1 1 \\n1 1 0 \\n1 0 0 \\n\", \"-1\\n\", \"0 \\n\", \"1 \\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"0 0 \\n0 0 \\n\", \"1 0 \\n0 0 \\n\", \"1 0 \\n0 1 \\n\", \"1 1 \\n1 0 \\n\", \"1 1 \\n1 1 \\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"0 0 0 \\n0 0 0 \\n0 0 0 \\n\", \"1 0 0 \\n0 0 0 \\n0 0 0 \\n\", \"1 0 0 \\n0 1 0 \\n0 0 0 \\n\", \"1 1 0 \\n1 0 0 \\n0 0 0 \\n\", \"1 1 0 \\n1 1 0 \\n0 0 0 \\n\", \"1 1 1 \\n1 0 0 \\n1 0 0 \\n\", \"1 1 1 \\n1 1 0 \\n1 0 0 \\n\", \"1 1 1 \\n1 1 0 \\n1 0 1 \\n\", \"1 1 1 \\n1 1 1 \\n1 1 0 \\n\", \"1 1 1 \\n1 1 1 \\n1 1 1 \\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"0 0 0 0 \\n0 0 0 0 \\n0 0 0 0 \\n0 0 0 0 \\n\", \"1 0 0 0 \\n0 0 0 0 \\n0 0 0 0 \\n0 0 0 0 \\n\", \"1 0 0 0 \\n0 1 0 0 \\n0 0 0 0 \\n0 0 0 0 \\n\", \"1 1 0 0 \\n1 0 0 0 \\n0 0 0 0 \\n0 0 0 0 \\n\", \"1 1 0 0 \\n1 1 0 0 \\n0 0 0 0 \\n0 0 0 0 \\n\", \"1 1 1 0 \\n1 0 0 0 \\n1 0 0 0 \\n0 0 0 0 \\n\", \"1 1 1 0 \\n1 1 0 0 \\n1 0 0 0 \\n0 0 0 0 \\n\", \"1 1 1 1 \\n1 0 0 0 \\n1 0 0 0 \\n1 0 0 0 \\n\", \"1 1 1 1 \\n1 1 0 0 \\n1 0 0 0 \\n1 0 0 0 \\n\", \"1 1 1 1 \\n1 1 0 0 \\n1 0 1 0 \\n1 0 0 0 \\n\", \"1 1 1 1 \\n1 1 1 0 \\n1 1 0 0 \\n1 0 0 0 \\n\", \"1 1 1 1 \\n1 1 1 0 \\n1 1 1 0 \\n1 0 0 0 \\n\", \"1 1 1 1 \\n1 1 1 1 \\n1 1 0 0 \\n1 1 0 0 \\n\", \"1 1 1 1 \\n1 1 1 1 \\n1 1 1 0 \\n1 1 0 0 \\n\", \"1 1 1 1 \\n1 1 1 1 \\n1 1 1 0 \\n1 1 0 1 \\n\", \"1 1 1 1 \\n1 1 1 1 \\n1 1 1 1 \\n1 1 1 0 \\n\", \"1 1 1 1 \\n1 1 1 1 \\n1 1 1 1 \\n1 1 1 1 \\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"0 0 0 0 0 \\n0 0 0 0 0 \\n0 0 0 0 0 \\n0 0 0 0 0 \\n0 0 0 0 0 \\n\", \"1 0 0 0 0 \\n0 0 0 0 0 \\n0 0 0 0 0 \\n0 0 0 0 0 \\n0 0 0 0 0 \\n\", \"1 0 0 0 0 \\n0 1 0 0 0 \\n0 0 0 0 0 \\n0 0 0 0 0 \\n0 0 0 0 0 \\n\", \"1 1 0 0 0 \\n1 0 0 0 0 \\n0 0 0 0 0 \\n0 0 0 0 0 \\n0 0 0 0 0 \\n\", \"1 1 0 0 0 \\n1 1 0 0 0 \\n0 0 0 0 0 \\n0 0 0 0 0 \\n0 0 0 0 0 \\n\", \"1 1 1 0 0 \\n1 0 0 0 0 \\n1 0 0 0 0 \\n0 0 0 0 0 \\n0 0 0 0 0 \\n\", \"1 1 1 0 0 \\n1 1 0 0 0 \\n1 0 0 0 0 \\n0 0 0 0 0 \\n0 0 0 0 0 \\n\", \"1 1 1 1 0 \\n1 0 0 0 0 \\n1 0 0 0 0 \\n1 0 0 0 0 \\n0 0 0 0 0 \\n\", \"1 1 1 1 0 \\n1 1 0 0 0 \\n1 0 0 0 0 \\n1 0 0 0 0 \\n0 0 0 0 0 \\n\", \"1 1 1 1 1 \\n1 0 0 0 0 \\n1 0 0 0 0 \\n1 0 0 0 0 \\n1 0 0 0 0 \\n\", \"1 1 1 1 1 \\n1 1 0 0 0 \\n1 0 0 0 0 \\n1 0 0 0 0 \\n1 0 0 0 0 \\n\", \"1 1 1 1 1 \\n1 1 0 0 0 \\n1 0 1 0 0 \\n1 0 0 0 0 \\n1 0 0 0 0 \\n\", \"1 1 1 1 1 \\n1 1 1 0 0 \\n1 1 0 0 0 \\n1 0 0 0 0 \\n1 0 0 0 0 \\n\", \"1 1 1 1 1 \\n1 1 1 0 0 \\n1 1 1 0 0 \\n1 0 0 0 0 \\n1 0 0 0 0 \\n\", \"1 1 1 1 1 \\n1 1 1 1 0 \\n1 1 0 0 0 \\n1 1 0 0 0 \\n1 0 0 0 0 \\n\", \"1 1 1 1 1 \\n1 1 1 1 0 \\n1 1 1 0 0 \\n1 1 0 0 0 \\n1 0 0 0 0 \\n\", \"1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 0 0 0 \\n1 1 0 0 0 \\n1 1 0 0 0 \\n\", \"1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 0 0 \\n1 1 0 0 0 \\n1 1 0 0 0 \\n\", \"1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 0 0 \\n1 1 0 1 0 \\n1 1 0 0 0 \\n\", \"1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 1 0 \\n1 1 1 0 0 \\n1 1 0 0 0 \\n\", \"1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 1 0 \\n1 1 1 1 0 \\n1 1 0 0 0 \\n\", \"1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 0 0 \\n1 1 1 0 0 \\n\", \"1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 1 0 \\n1 1 1 0 0 \\n\", \"1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 1 0 \\n1 1 1 0 1 \\n\", \"1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 1 0 \\n\", \"1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 1 1 \\n1 1 1 1 1 \\n\", \"-1\\n\", \"-1\\n\"]}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/803/A",
  "starter_code": ""
}