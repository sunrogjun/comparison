{
  "task_id": "APPS/66",
  "problem_id": 66,
  "prompt": "Vector Willman and Array Bolt are the two most famous athletes of Byteforces. They are going to compete in a race with a distance of L meters today.\n\n [Image] \n\nWillman and Bolt have exactly the same speed, so when they compete the result is always a tie. That is a problem for the organizers because they want a winner. \n\nWhile watching previous races the organizers have noticed that Willman can perform only steps of length equal to w meters, and Bolt can perform only steps of length equal to b meters. Organizers decided to slightly change the rules of the race. Now, at the end of the racetrack there will be an abyss, and the winner will be declared the athlete, who manages to run farther from the starting point of the the racetrack (which is not the subject to change by any of the athletes). \n\nNote that none of the athletes can run infinitely far, as they both will at some moment of time face the point, such that only one step further will cause them to fall in the abyss. In other words, the athlete will not fall into the abyss if the total length of all his steps will be less or equal to the chosen distance L.\n\nSince the organizers are very fair, the are going to set the length of the racetrack as an integer chosen randomly and uniformly in range from 1 to t (both are included). What is the probability that Willman and Bolt tie again today?\n\n\n-----Input-----\n\nThe first line of the input contains three integers t, w and b (1 \u2264 t, w, b \u2264 5\u00b710^18) \u2014 the maximum possible length of the racetrack, the length of Willman's steps and the length of Bolt's steps respectively.\n\n\n-----Output-----\n\nPrint the answer to the problem as an irreducible fraction [Image]. Follow the format of the samples output.\n\nThe fraction [Image] (p and q are integers, and both p \u2265 0 and q > 0 holds) is called irreducible, if there is no such integer d > 1, that both p and q are divisible by d.\n\n\n-----Examples-----\nInput\n10 3 2\n\nOutput\n3/10\n\nInput\n7 1 2\n\nOutput\n3/7\n\n\n\n-----Note-----\n\nIn the first sample Willman and Bolt will tie in case 1, 6 or 7 are chosen as the length of the racetrack.",
  "solutions": "[\"from fractions import gcd\\n\\nt,w,b = map(int,input().split())\\nper = w*b//gcd(w,b)\\ncan = (t//per+1)*min(w,b)-1\\nif t%per<min(w,b):\\n    can-=min(w,b)\\n    can+=t%per+1\\ng = gcd(can,t)\\ncan//=g\\nt//=g\\nprint(str(can)+\\\"/\\\"+str(t))\", \"\\nfrom fractions import gcd\\na, b, c = list(map(int, input().split(' ')))\\nl = b * c // gcd(b, c)\\nb, c = min(b, c), max(b, c)\\n\\n## 0...b-1 ##\\nmults = a // l\\nrem = a - l * mults + 1\\n\\nnum = mults * (b)\\nrem = min(b, rem)\\nx = num + rem - 1\\n\\ng = gcd(x, a)\\nprint(str(x//g) + '/' + str(a//g))\\n\", \"def gcd(a,b):\\n    if b == 0:\\n        return a\\n    return gcd(b,a%b)\\ndef lcm(a,b):\\n    return (a*b)//gcd(a,b)\\nt,w,b = map(int,input().split())\\nlc = lcm(w,b)\\nmn = 0\\nif w > b:\\n    mn = b\\nelse:\\n    mn = w\\nans = mn*(t//lc+1)-1\\nval = (t//lc)*lc + mn - 1\\nif t - val < 0:\\n    ans += t-val\\ng = gcd(ans,t)\\nans //= g\\nt //= g\\nprint(ans,end=\\\"\\\")\\nprint(\\\"/\\\",end=\\\"\\\")\\nprint(t)\", \"from fractions import gcd\\n\\nt, w, b = map(int, input().split())\\nmn = min(w, b)\\nnk = w // gcd(w, b) * b\\nfirst = (t  + 1) // nk * mn - 1\\ne = first + min(mn, (t + 1) % nk)\\nnd = gcd(e, t)\\nprint(e // nd, \\\"/\\\", t // nd, sep = \\\"\\\")\\n\", \"from fractions import gcd\\n\\nt, w, b = map(int, input().split())\\nnok = w * b // gcd(w, b)\\nans = (t // nok) * min(w, b) + min(w - 1, b - 1, t % nok)\\nans, t = ans // gcd(ans, t), t // gcd(ans, t)\\nprint (ans, t, sep = \\\"/\\\")\\n\", \"def gcd(a, b):\\n    while (b > 0):\\n        a, b = b, a % b\\n    return a\\n\\ninp = [int(i) for i in input().split(' ')]\\nt = inp[0]\\nw = inp[1]\\nb = inp[2]\\nnok = w * b // gcd(w, b)\\nans = t // nok * min(w, b) - 1\\ntmp = t % nok\\nans += min(tmp + 1, min(w, b))\\ng = gcd(ans, t)\\nprint(ans // g, t // g, sep='/')\\n\", \"import math\\nimport sys\\n\\ndef Cmmdc(a, b):\\n\\tr = 0\\n\\twhile b > 0:\\n\\t\\tr = a % b\\n\\t\\ta = b\\n\\t\\tb = r\\n\\treturn a\\n\\nlst = list(map(int, input().split()))\\n\\nt = auxT = lst[0]\\nn = lst[1]\\nm = lst[2]\\n\\nif n > m:\\n\\taux = n\\n\\tn = m\\n\\tm = aux\\n\\ncmmdc = Cmmdc(n, m)\\ncmmmc = n * m // cmmdc\\n\\nfav = (t // cmmmc) * n\\nt = t % cmmmc\\nfav += min(n - 1, t)\\n\\nt = auxT\\nc = Cmmdc(fav, t)\\nfav //= c\\nt //= c\\n\\nprint(str(fav) + \\\"/\\\" + str(t) + \\\"\\\\n\\\")\\n\", \"import sys\\nfrom math import *\\nsys.setrecursionlimit(100000000)\\n\\ndef pgcd(a,b):\\n    while b!=0:\\n        a,b=b,a%b\\n    return a\\n\\ndef ppcm(a,b):\\n    if (a==0) or (b==0):\\n        return 0\\n    else:\\n        return (a*b)//pgcd(a,b)\\n\\nt,w,b=map(int,input().split())\\na=ppcm(w,b)\\nx=min(w,b)\\ny=t//a\\nv=x*y+min(x,t%a+1)-1\\n\\nw=pgcd(v,t)\\nif v==0:print(\\\"0/1\\\")\\nelse:\\n\\tprint(v//w,end=\\\"\\\")\\n\\tprint(\\\"/\\\",end=\\\"\\\")\\n\\tprint(t//w)\", \"t, w, b = list(map(int, input().split()))\\n\\n\\ndef NOK(a, b):\\n    m = a*b\\n    while a != 0 and b != 0:\\n        if a > b:\\n            a %= b\\n        else:\\n            b %= a\\n    return m // (a+b)\\n\\ndef NOD(a, b):\\n    while a != 0 and b != 0:\\n        if a > b:\\n            a %= b\\n        else:\\n            b %= a\\n    return (a+b)\\n\\n\\nif w == 1 or b == 1:\\n    res = t // max (w, b)\\nelse:\\n    k = NOK(w, b)\\n    ost = max(0, min(w, b) - 1 - t % k)\\n    res = (t // k + 1) * min(w,b) - 1 - ost\\n\\nm = NOD(t, res)\\n\\nprint(str(res // m) + '/' + str(t // m))\\n\", \"def gcd(a,b):\\n    if b == 0: return a\\n    return gcd(b, a%b)\\n\\ndef lcm(a,b):\\n    return a//gcd(a,b)*b\\n\\nt,w,b = map(int,input().split())\\np = min(w,b)\\nlc = lcm(w,b)\\nkol = t//lc\\nret = kol*p\\nzv = t%lc\\nret += min(zv, p-1)\\ng = gcd(ret, t)\\nret//=g\\nt//=g\\nprint(ret,'/',t,sep=\\\"\\\")\\n\", \"l, n, m = map(int, input().split())\\nfrom fractions import gcd\\nlcm = lambda x, y: x // gcd(x,y) * y\\nu = lcm(n,m)\\nv = min(n,m)\\na = (l//u) * v + min(v, l%u+1) - 1    \\nprint(a//gcd(a,l),'/',l//gcd(a,l),sep='')\\n\\n\", \"#!/usr/bin/env python3\\nimport math\\nt, a, b = list(map(int,input().split()))\\nl= a * b // math.gcd(a,b)\\np = (t // l) * min(a,b) + min(t % l, min(a,b) - 1)\\nq = t\\nr = math.gcd(p, q)\\nprint('{}/{}'.format(p//r, q//r))\\n\", \"#!/usr/bin/env python3\\n\\ndef gcd(a, b):\\n    return a if b == 0 else gcd(b, a % b)\\n\\ndef main():\\n    L, a, b = list(map(int, input().split()))\\n    c = a // gcd(a, b) * b\\n    m = min(a, b)\\n    if c <= m:\\n        print('1/1')\\n    else:\\n        p = L // c * m\\n        p += min(L % c, m - 1)\\n        g = gcd(p, L)\\n        print('%d/%d' % (p // g, L // g))\\n\\nmain()\", \"def gcd (a, b) :\\n\\twhile (b) :\\n\\t\\ta %= b\\n\\t\\ta, b = b, a\\n\\treturn a;\\n\\n\\nt, w, b = map(int, input().split())\\ng = w * b // gcd(w, b)\\nres = 0\\nminh = min(w, b)\\nres += (t // g + 1) * minh - 1\\ncorrect = (t // g) * g + minh - 1\\nif (correct > t) :\\n\\tres -= correct - t\\ny = gcd(res, t)\\nprint(res // y, \\\"/\\\", t // y, sep = \\\"\\\")\", \"from fractions import gcd\\n\\nt, a, b = map(int, input().split())\\n\\nif a > b:\\n    a, b = b, a\\n\\nlcm = a * b // gcd(a, b)\\ncnt = t // lcm\\nlst = lcm * cnt\\n\\nans = cnt * a + a - 1 \\n\\nif lst + a > t + 1:\\n    ans -= lst + a - t - 1\\n\\nnum = ans\\nden = t\\n\\ng = gcd(num, den)\\nnum //= g\\nden //= g\\n\\nprint(num, den, sep='/')\\n\\n\", \"from fractions import gcd\\n\\ndef lcm(a, b):\\n    return (a * b) // gcd(a, b)\\n\\n\\ndef __starting_point():\\n    t, w, b = list(map(int, input().split()))\\n\\n    l = lcm(w, b)\\n    m = min(w, b)\\n\\n    count = t // l\\n    result = count * m\\n    result += (m - 1) # 1 to m-1\\n\\n    diff = max(count*l + m - t - 1, 0)\\n    result -= diff\\n\\n    g = gcd(result, t)\\n\\n    print('{}/{}'.format(result//g, t//g))\\n\\n\\n\\n__starting_point()\", \"t, w, b = map(int, input().split())\\n\\ndef gcd(a, b):\\n    if b == 0: return a\\n    return gcd(b, a % b)\\n\\ndef lcm(a, b):\\n    return a // gcd(a, b) * b\\n\\nadd = min(w, b) - 1\\nl = lcm(w, b)\\n\\ncnt = t // l\\n\\nans = add + cnt + cnt * add\\nans -= max(0, l * cnt + add - t)\\n\\ng = gcd(ans, t)\\nif g != 0:\\n    ans //= g\\n    t //= g\\n\\nprint(ans, end='')\\nprint('/', end='')\\nprint(t)\\n\", \"3\\n\\ndef gcd(a, b):\\n\\tif b == 0:\\n\\t\\treturn a\\n\\treturn gcd(b, a%b)\\n\\nx = input()\\nx = [int(_) for _ in x.split()]\\n# print(x)\\n\\nt = x[0]\\nw = x[1]\\nb = x[2]\\n\\nx = gcd(w, b)\\nk = min(w,b)\\n\\nlcm = (w*b)//x\\n\\nalpha = t//lcm\\n\\nans = alpha*(k)\\n\\nl = alpha*lcm + k- 1\\n\\nif l <= t :\\n\\tans += k\\nelse:\\n\\tans += t - (alpha*lcm) + 1\\n\\nans -= 1\\n\\ngg = gcd(ans, t)\\nans = ans//gg\\nt = t//gg\\n\\nprint(str(ans)+\\\"/\\\"+str(t))\", \"# your code goes here\\n\\n[t, w, b] = [int(x) for x in input().split()]\\n\\ndef gcd(a, b):\\n    if (b==0):\\n        return a\\n    else:\\n        return gcd(b, a%b)\\n\\nd = w*b // gcd(w, b)\\nm = min(w, b)\\n\\ndint = t // d\\n\\ncount = m * dint\\n\\ncount += m - 1\\n    \\nd = dint * d + m - 1\\n\\nif (d > t):\\n    count -= (d - t)\\n\\ngcdtcnt = gcd(t, count)\\nt = t // gcdtcnt\\ncount = count // gcdtcnt\\n\\nprint(count, '/', t, sep='')\", \"#! /usr/bin/python\\n\\nfrom fractions import gcd\\n\\nt, w, b = list(map(int, input().split()))\\n\\nif w == b:\\n    print('1/1')\\nelse:\\n    wb = w * b // gcd(w, b)\\n    m = min(w, b)\\n    n = t // wb * m - 1 + min(t % wb + 1, m)\\n    g = gcd(n, t)\\n    print(\\\"%d/%d\\\" % (n // g, t // g))\\n\", \"t, a, b = list(map(int, input().split()))\\n\\ndef gcd(a, b):\\n    if (b == 0):\\n        return a\\n    return gcd(b, a % b)\\n\\ndef lcm(a, b):\\n    return a // gcd(a, b) * b\\n\\nl = lcm(a, b)\\nlast = t // l * l\\nans = t // l * min(a, b)\\nans += min(a, b, t - last + 1)\\nans -= 1\\ng = gcd(ans, t)\\nans //= g\\nt //= g\\nans = str(ans) + '/' + str(t)\\nprint(ans)\\n\\n\", \"def gcd(a, b):\\n    return a if b == 0 else gcd(b, a % b)\\n\\n\\nt, w, b = [int(i) for i in input().split()]\\nmi = min(w, b)\\nlcm = w * b // gcd(w, b)\\n\\np = t // lcm * mi + min(mi - 1, t % lcm)\\nq = t\\nprint(\\\"{0}/{1}\\\".format(p // gcd(p, q), q // gcd(p, q)))\", \"t, w, b = list(map(int, input().split()))\\n\\ndef gcd(x, y):\\n    while (x != 0 and y != 0):\\n        if (x < y):\\n            x, y = y, x\\n        x %= y\\n    return x + y;\\n\\nans = (t // (w * b // gcd(w, b)) - 1) * min(w, b)\\nans += min(t - (t // (w * b // gcd(w, b))) * (w * b // gcd(w, b)) + 1, min(b, w))\\nans += min(w, b) - 1;\\nprint(ans // gcd(ans, t), end = \\\"/\\\")\\nprint(t // gcd(ans, t))\", \"from fractions import gcd\\ns = list(map(int, input().split()))\\nt = s[0]\\na = s[1]\\nb = s[2]\\nnod = gcd(a, b)\\nnok = a * b // nod\\nans = t // nok * min(a, b) + min(a, b) - 1\\nans -= max(0, ((t // nok) * nok) + min(a, b) - 1 - t)\\ngc = gcd(ans, t)\\nans //= gc\\nt //= gc\\nprint(str(int(ans)) + '/' + str(int(t)))\", \"from fractions import gcd\\nt, w, b = list(map(int, input().split()))\\nif w > b:\\n    w, b = b, w\\nl = w * b // gcd(w, b)\\nc = t // l\\nans = c * w + (min((t + 1) - l * c, w)) - 1\\ng = gcd(ans, t)\\nprint('{}/{}'.format(ans // g, t // g))\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"10 3 2\\n\",\n    \"7 1 2\\n\",\n    \"1 1 1\\n\",\n    \"5814 31 7\\n\",\n    \"94268 813 766\\n\",\n    \"262610 5583 4717\\n\",\n    \"3898439 96326 71937\\n\",\n    \"257593781689876390 32561717 4411677\\n\",\n    \"111319886766128339 7862842484895022 3003994959686829\\n\",\n    \"413850294331656955 570110918058849723 409853735661743839\\n\",\n    \"3000000000000000000 2999999999999999873 2999999999999999977\\n\",\n    \"9 6 1\\n\",\n    \"32 9 2\\n\",\n    \"976 5 6\\n\",\n    \"5814 31 7\\n\",\n    \"94268 714 345\\n\",\n    \"262610 5583 4717\\n\",\n    \"3898439 96326 71937\\n\",\n    \"54682301 778668 253103\\n\",\n    \"329245015 1173508 8918834\\n\",\n    \"321076647734423976 7 7\\n\",\n    \"455227494055672047 92 28\\n\",\n    \"595779167455745259 6954 8697\\n\",\n    \"1000000000000000000 1000000000 2000000000\\n\",\n    \"462643382718281828 462643382718281507 462643382718281701\\n\",\n    \"4000000000000000000 9999999999999997 99999999999999999\\n\",\n    \"4003000100004000000 9999999099999999 99999999999999999\\n\",\n    \"4903000100004000000 58997960959949999 99933992929999999\\n\",\n    \"257593781689876390 32561717 4411677\\n\",\n    \"111319886766128339 7862842484895022 3003994959686829\\n\",\n    \"413850294331656955 570110918058849723 409853735661743839\\n\",\n    \"232 17 83\\n\",\n    \"5496272 63 200\\n\",\n    \"180 174 53\\n\",\n    \"1954 190 537\\n\",\n    \"146752429 510 514\\n\",\n    \"579312860 55 70\\n\",\n    \"1 9 9\\n\",\n    \"95 19 19\\n\",\n    \"404 63 441\\n\",\n    \"5566 4798 4798\\n\",\n    \"118289676 570846883 570846883\\n\",\n    \"763 358 358\\n\",\n    \"85356138 7223 482120804\\n\",\n    \"674664088 435395270 5\\n\",\n    \"762200126044291557 370330636048898430 6\\n\",\n    \"917148533938841535 47 344459175789842163\\n\",\n    \"360212127113008697 877228952036215545 5259\\n\",\n    \"683705963104411677 89876390 116741460012229240\\n\",\n    \"573003994959686829 275856334120822851 1319886766128339\\n\",\n    \"409853735661743839 413850294331656955 413850294331656955\\n\",\n    \"19 1 19\\n\",\n    \"576 18 32\\n\",\n    \"9540 10 954\\n\",\n    \"101997840 6 16999640\\n\",\n    \"955944 1278 748\\n\",\n    \"482120804 66748 7223\\n\",\n    \"370330636048898430 61721772674816405 6\\n\",\n    \"344459175789842163 7328918633826429 47\\n\",\n    \"877228952036215545 166805277055755 5259\\n\",\n    \"116741460012229240 1298911316 89876390\\n\",\n    \"275856334120822851 209 1319886766128339\\n\",\n    \"413850294331656955 1 413850294331656955\\n\",\n    \"54682301 778668 253103\\n\",\n    \"329245015 3931027 6443236\\n\",\n    \"321076647734423976 7 8\\n\",\n    \"455227494055672047 71 60\\n\",\n    \"595779167455745259 9741 9331\\n\",\n    \"6470 80 160\\n\",\n    \"686325 828 1656\\n\",\n    \"4535304 2129 4258\\n\",\n    \"40525189 6365 12730\\n\",\n    \"675297075 25986 51972\\n\",\n    \"5681598412 75376 226128\\n\",\n    \"384118571739435733 619773000 1859319000\\n\",\n    \"391554751752251913 625743359 1877230077\\n\",\n    \"390728504279201198 625082797 1250165594\\n\",\n    \"389902265396085075 624421544 1248843088\\n\",\n    \"734812071040507372 857211800 2571635400\\n\",\n    \"1 1 2\\n\",\n    \"3 1 4\\n\",\n    \"8 2 3\\n\",\n    \"64 32 16\\n\",\n    \"1 1 1000000000\\n\",\n    \"1000000000 1 1\\n\",\n    \"1000000000 1000000000 1000000000\\n\",\n    \"1000000000 2 4\\n\",\n    \"1000000000 123 456\\n\",\n    \"1000000000 123123 654\\n\",\n    \"123456 123 456\\n\",\n    \"123456 1234567 123\\n\",\n    \"314159265 271 8281\\n\",\n    \"11071994 4231 1324\\n\",\n    \"961748927 961748941 982451653\\n\",\n    \"15485221 1259 90863\\n\",\n    \"5000000000000000000 4999999999999999837 4999999999999999963\\n\",\n    \"4000000000000000000 3999999999999999691 3999999999999999887\\n\",\n    \"999999999999999999 999999999999999709 999999999999999737\\n\",\n    \"799999999999999999 799999999999999969 799999999999999991\\n\",\n    \"812312312312312222 812312312312311897 812312312312312029\\n\",\n    \"500000000000000000 499999999999999927 499999999999999931\\n\",\n    \"555555555555555555 555555555555555083 555555555555555229\\n\",\n    \"199419941994199419 199419941994199369 199419941994199391\\n\",\n    \"145685485411238588 145685485411238483 145685485411238573\\n\",\n    \"314159265358979323 314159265358979167 314159265358979213\\n\",\n    \"10 1000000000000000000 1000000000000000001\\n\",\n    \"5 100000000000000000 99999999999999999\\n\",\n    \"5 1000000000000 1000000000001\\n\",\n    \"5 1000000000000000000 1000000000000000001\\n\",\n    \"2 1000000000000000000 1000000000000000001\\n\",\n    \"2 10 11\\n\",\n    \"10 123456789123456789 723456789123456781\\n\",\n    \"12345678910 123456789101112131 123456789101112132\\n\",\n    \"5 499999999999999999 499999999999999998\\n\"\n  ],\n  \"outputs\": [\n    \"3/10\\n\",\n    \"3/7\\n\",\n    \"1/1\\n\",\n    \"94/2907\\n\",\n    \"765/94268\\n\",\n    \"2358/131305\\n\",\n    \"71936/3898439\\n\",\n    \"7914548537/257593781689876390\\n\",\n    \"3003994959686828/111319886766128339\\n\",\n    \"409853735661743838/413850294331656955\\n\",\n    \"23437499999999999/23437500000000000\\n\",\n    \"1/9\\n\",\n    \"3/32\\n\",\n    \"41/244\\n\",\n    \"94/2907\\n\",\n    \"689/94268\\n\",\n    \"2358/131305\\n\",\n    \"71936/3898439\\n\",\n    \"253102/54682301\\n\",\n    \"1173507/329245015\\n\",\n    \"1/1\\n\",\n    \"19792499741550983/455227494055672047\\n\",\n    \"205511958419723/595779167455745259\\n\",\n    \"1/2\\n\",\n    \"33045955908448679/33045955908448702\\n\",\n    \"2499999999999999/1000000000000000000\\n\",\n    \"4999999549999999/2001500050002000000\\n\",\n    \"29498980479974999/2451500050002000000\\n\",\n    \"7914548537/257593781689876390\\n\",\n    \"3003994959686828/111319886766128339\\n\",\n    \"409853735661743838/413850294331656955\\n\",\n    \"2/29\\n\",\n    \"13765/2748136\\n\",\n    \"13/45\\n\",\n    \"189/1954\\n\",\n    \"571199/146752429\\n\",\n    \"10344881/144828215\\n\",\n    \"1/1\\n\",\n    \"1/1\\n\",\n    \"31/202\\n\",\n    \"1/1\\n\",\n    \"1/1\\n\",\n    \"1/1\\n\",\n    \"3611/42678069\\n\",\n    \"9/674664088\\n\",\n    \"17/762200126044291557\\n\",\n    \"28/183429706787768307\\n\",\n    \"5258/360212127113008697\\n\",\n    \"539258339/683705963104411677\\n\",\n    \"3959660298385016/573003994959686829\\n\",\n    \"1/1\\n\",\n    \"1/19\\n\",\n    \"1/16\\n\",\n    \"1/477\\n\",\n    \"1/8499820\\n\",\n    \"1/639\\n\",\n    \"1/66748\\n\",\n    \"1/61721772674816405\\n\",\n    \"1/7328918633826429\\n\",\n    \"1/55601759018585\\n\",\n    \"1/649455658\\n\",\n    \"1/1319886766128339\\n\",\n    \"1/413850294331656955\\n\",\n    \"253102/54682301\\n\",\n    \"357366/29931365\\n\",\n    \"1672274206950125/13378193655600999\\n\",\n    \"6411654845854559/455227494055672047\\n\",\n    \"61162012885196/595779167455745259\\n\",\n    \"327/647\\n\",\n    \"114511/228775\\n\",\n    \"755973/1511768\\n\",\n    \"20265394/40525189\\n\",\n    \"112553659/225099025\\n\",\n    \"1893897375/5681598412\\n\",\n    \"128039524053435733/384118571739435733\\n\",\n    \"130518250652782079/391554751752251913\\n\",\n    \"195364252413988195/390728504279201198\\n\",\n    \"64983710976697837/129967421798695025\\n\",\n    \"61234339274051543/183703017760126843\\n\",\n    \"0/1\\n\",\n    \"0/1\\n\",\n    \"3/8\\n\",\n    \"1/2\\n\",\n    \"0/1\\n\",\n    \"1/1\\n\",\n    \"1/1\\n\",\n    \"1/2\\n\",\n    \"6579023/1000000000\\n\",\n    \"24851/1000000000\\n\",\n    \"215/30864\\n\",\n    \"61/61728\\n\",\n    \"37939/314159265\\n\",\n    \"2647/11071994\\n\",\n    \"1/1\\n\",\n    \"1258/15485221\\n\",\n    \"1249999999999999959/1250000000000000000\\n\",\n    \"399999999999999969/400000000000000000\\n\",\n    \"333333333333333236/333333333333333333\\n\",\n    \"799999999999999968/799999999999999999\\n\",\n    \"406156156156155948/406156156156156111\\n\",\n    \"249999999999999963/250000000000000000\\n\",\n    \"50505050505050462/50505050505050505\\n\",\n    \"66473313998066456/66473313998066473\\n\",\n    \"72842742705619241/72842742705619294\\n\",\n    \"314159265358979166/314159265358979323\\n\",\n    \"1/1\\n\",\n    \"1/1\\n\",\n    \"1/1\\n\",\n    \"1/1\\n\",\n    \"1/1\\n\",\n    \"1/1\\n\",\n    \"1/1\\n\",\n    \"1/1\\n\",\n    \"1/1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/592/C",
  "starter_code": ""
}