{
  "task_id": "APPS/77",
  "problem_id": 77,
  "prompt": "You are given sequence a_1, a_2, ..., a_{n} of integer numbers of length n. Your task is to find such subsequence that its sum is odd and maximum among all such subsequences. It's guaranteed that given sequence contains subsequence with odd sum.\n\nSubsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements.\n\nYou should write a program which finds sum of the best subsequence.\n\n\n-----Input-----\n\nThe first line contains integer number n (1 \u2264 n \u2264 10^5).\n\nThe second line contains n integer numbers a_1, a_2, ..., a_{n} ( - 10^4 \u2264 a_{i} \u2264 10^4). The sequence contains at least one subsequence with odd sum.\n\n\n-----Output-----\n\nPrint sum of resulting subseqeuence.\n\n\n-----Examples-----\nInput\n4\n-2 2 -3 1\n\nOutput\n3\n\nInput\n3\n2 -5 -3\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example sum of the second and the fourth elements is 3.",
  "solutions": "[\"n = int(input())\\na = list(map(int, input().split()))\\nres = 0\\nnew_a = []\\nfor i in range(n):\\n    if a[i] % 2 == 0:\\n        if a[i] > 0:\\n            res += a[i]\\n    else:\\n        new_a.append(a[i])\\na = new_a\\na.sort()\\nres += a[-1]\\na.pop()\\nwhile len(a) > 1:\\n    if a[-1] + a[-2] > 0:\\n        res += a[-1] + a[-2]\\n        a.pop()\\n        a.pop()\\n    else:\\n        break\\nprint(res)\", \"n = int(input())\\nA = list(map(int, input().split()))\\ndp = [[-9999999999, -9999999999]]\\nfor elem in A:\\n    dp += [[0, 0]]\\n    if elem % 2 == 0:\\n        dp[-1][0] = max(dp[-2][0] + elem, dp[-2][0], elem)\\n        dp[-1][1] = max(dp[-2][1] + elem, dp[-2][1])\\n    else:\\n        dp[-1][0] = max(dp[-2][1] + elem, dp[-2][0])\\n        dp[-1][1] = max(dp[-2][0] + elem, dp[-2][1], elem)\\nprint(dp[-1][1])\\n\", \"#!/bin/python3\\nimport sys\\nimport math\\nn = int(input())\\na = list(map(int, input().split()))\\neven = 0\\nodds = []\\nfor i in range(n):\\n    if a[i] % 2 == 0 and a[i] > 0:\\n        even += a[i];\\n    elif a[i] % 2 == 1:\\n        odds.append(-a[i]);\\nodds.sort()\\nmaxsum = -odds[0]\\ni = 1\\ncursum = -odds[0];\\nwhile i < len(odds):\\n    cursum += -(odds[i])\\n    i += 1\\n    if i >= len(odds):\\n        break;\\n    cursum += -(odds[i])\\n    i+=1\\n    maxsum = max(maxsum, cursum)\\nprint(maxsum + even)\", \"n = int(input())\\na = list(map(int, input().split()))\\n\\nf = 0\\nfor i in range(n):\\n    if a[i] >= 0:\\n        f += a[i]\\n\\nif f % 2:\\n    print(f)\\nelse:\\n    m = 10 ** 9\\n    for i in range(n):\\n        if a[i] % 2:\\n            m = min(m, abs(a[i]))\\n            \\n    print(f - m)\", \"n = int(input())\\na = list(map(int, input().split()))\\nc = list([x for x in a if x % 2 == 0 and x > 0])\\nb = list([x for x in a if x % 2 != 0])\\nb = sorted(b, reverse=True)\\nmm = int(-1e10)\\ns = 0\\nfor i in range(len(b)):\\n    s += b[i]\\n    if i % 2 == 0:\\n        mm = max(mm, s)\\n# print(c)\\nprint(sum(c) + mm)\\n\", \"def max(a, b):\\n\\tif a > b:\\n\\t\\treturn a\\n\\telse:\\n\\t\\treturn b\\n\\ndef min(a, b):\\n\\tif a < b:\\n\\t\\treturn a\\n\\telse:\\n\\t\\treturn b\\n\\ndef __starting_point():\\n\\tn = int(input())\\n\\tA = input().split(' ')\\n\\tans, count, Min, Max = 0, 0, 1000000000, -100000000000\\n\\tfor i in range(n):\\n\\t\\tnow = int(A[i])\\n\\t\\tif now % 2 == 0:\\n\\t\\t\\tans += max(now, 0)\\n\\t\\telse:\\n\\t\\t\\tif (now < 0):\\n\\t\\t\\t\\tMax = max(Max, now)\\n\\t\\t\\telse:\\n\\t\\t\\t\\tMin = min(Min, now)\\n\\t\\t\\t\\tans += now\\n\\n\\tif ans % 2 == 0:\\n\\t\\tans = max(ans - Min, ans + Max)\\n\\tprint(ans)\\n\\n__starting_point()\", \"N = int( input() )\\nA = list( map( int, input().split() ) )\\ndp = [ [ - int( 1e9 ) for i in range( 2 ) ] for j in range( N + 1 ) ]\\ndp[ 0 ][ 0 ] = 0\\nfor i in range( N ):\\n  for j in range( 2 ):\\n    if abs( A[ i ] ) & 1:\\n      dp[ i + 1 ][ j ] = max( dp[ i ][ j ], dp[ i ][ j ^ 1 ] + A[ i ] )\\n    else:\\n      dp[ i + 1 ][ j ] = max( dp[ i ][ j ], dp[ i ][ j ] + A[ i ] )\\nprint( dp[ N ][ 1 ] )\\n\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort(key=lambda x: -x)\\ns_p = sum([x for x in a if x > 0])\\nif s_p % 2 == 1:\\n    print(s_p)\\nelse:\\n    m_p = list([x for x in a if x > 0 and x % 2 == 1])\\n    m_n = list([x for x in a if x < 0 and x % 2 == 1])    \\n    if len(m_p) > 0 and len(m_n) > 0:\\n        s_p += max(-min(m_p), max(m_n))\\n    elif len(m_p) == 0 and len(m_n) > 0:\\n        s_p += max(m_n)\\n    else:\\n        s_p += -min(m_p)\\n    print(s_p)\\n\\n\", \"_ = input()\\nv = [int(x) for x in input().split()]\\n\\nneg_par = []\\nneg_impar = []\\npoz_par = []\\npoz_impar = []\\n\\nfor x in v:\\n    if x < 0:\\n        if x % 2 == 0:\\n            neg_par.append(x)\\n        else:\\n            neg_impar.append(x)\\n    else:\\n        if x % 2 == 0:\\n            poz_par.append(x)\\n        else:\\n            poz_impar.append(x)\\n\\nneg_par.sort()\\nneg_impar.sort()\\npoz_par.sort()\\npoz_impar.sort()\\n\\nres = sum(poz_par)\\nif len(poz_impar) > 0:\\n    if len(poz_impar) % 2 == 1:\\n        res += sum(poz_impar)\\n    else:\\n        if len(neg_impar) > 0 and neg_impar[-1] + poz_impar[0] > 0:\\n            res += sum(poz_impar)\\n            res += neg_impar[-1]\\n        else:\\n            res += sum(poz_impar[1:])\\nelse:\\n    res += neg_impar[-1]\\nprint(res)\\n\", \"input()\\na=[int(x) for x in input().split()]\\n\\noc=0\\nps=0\\npmo=1e6\\nnmo=-1e6\\n\\nfor x in a:\\n    if x>0:\\n        ps+=x\\n    if x%2==1 and x>0 and pmo>x:\\n        pmo=x\\n    if x%2==1 and x>0:    \\n        oc+=1\\n    if x%2==1 and x<0 and nmo<x:\\n        nmo=x\\n\\nif oc%2==1:\\n    print(ps)\\nelse:\\n    print(max(ps-pmo,ps+nmo))\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort(reverse=True)\\ni = 0\\nm1 = float('inf')\\nm2 = -float('inf')\\nwhile i < n and a[i] >= 0:\\n    if a[i] % 2 == 1:\\n        m1 = a[i]\\n    i += 1\\ns = sum(a[:i])\\nif s % 2 == 1:\\n    print(s)\\nelse:\\n    while i < n and a[i] % 2 == 0:\\n        i += 1\\n    if i < n: m2 = a[i]\\n    print(max(s-m1,s+m2))\", \"n = int(input())\\nlst = [int(x) for x in input().split(\\\" \\\")]\\n\\neven = list([x for x in lst if x % 2 == 0])\\nodd = list([x for x in lst if x % 2 != 0])\\n\\neven_sum = 0\\nfor i in even:\\n    if i > 0:\\n        even_sum += i # always take all even sums\\n\\nodd = reversed(sorted(odd))\\n\\npossible = []\\nrolling = 0\\nfor i in odd: # there must be at least one odd number\\n    rolling += i\\n    possible.append(even_sum + rolling)\\n\\npossible = reversed(sorted(possible))\\nfor i in possible: # print highest sum\\n    if i % 2 != 0:\\n        print(i)\\n        break\\n\", \"import math\\nn = int(input())\\n\\nl = list(map(int, input().split(\\\" \\\")))\\nli = []\\nfor i in l:\\n    if(i > 0):\\n        li.append(i)\\ns = sum(li)\\nfound = False\\nif(s%2 == 0):\\n    m = 10000\\n    for i in li:\\n        if i < m and i%2==1:\\n            m = i\\n            found = True\\n    if(found):    \\n        m2 = -10000\\n        for i in l:\\n            if i > m2 and i < 0 and i%2 == 1:\\n                m2 = i\\n        if(abs(m2) > m):\\n            print(s-m)\\n        else:\\n            print(s+m2)\\n    else:\\n        m2 = -10000\\n        for i in l:\\n            if i > m2 and i < 0 and i%2 == 1:\\n                m2 = i\\n        print(s+m2)\\nelse:\\n    print(s)\\n    \\n    \\n        \\n\", \"n = int(input())\\na = [int(i) for i in input().split()]\\notrmax = -10**4 - 1\\npolmin = 10**4 +1\\nsm = 0\\nfor i in a:\\n\\tif i<0:\\n\\t\\tif i>otrmax and i%2==1:\\n\\t\\t\\totrmax = i\\n\\telse:\\n\\t\\tif i<polmin and i%2==1:\\n\\t\\t\\tpolmin = i\\n\\t\\tsm += i\\n\\nif sm%2==0:\\n\\tvrs = []\\n\\tif polmin!=10^4 +1:\\n\\t\\tvrs.append(sm-polmin)\\n\\tif otrmax!=-10^4 - 1:\\n\\t\\tvrs.append(sm+otrmax)\\n\\tprint(max(vrs))\\nelse:\\n\\tprint(sm)\", \"n=int(input())\\na=sorted(list(map(int,input().split())))\\nmx=max(a)\\nb=[]\\nc=[]\\nd=[]\\ne=[]\\nsum1=0\\nsum2=0\\nfor i in range(n):\\n    if a[i]>=0:\\n        sum1+=a[i]\\n        if a[i]%2==0:\\n            b.append(a[i])\\n        else:\\n            c.append(a[i])\\n    else:\\n        sum2+=a[i]\\n        if a[i]%2==0:\\n            d.append(a[i])\\n        else:\\n            e.append(a[i])\\nif sum1%2==1 and sum1>0:\\n    print(sum1)\\nelse:\\n    if len(e)>0:\\n        if len(c)>0:\\n            print(max(sum1+e[-1],sum1-c[0]))\\n        else:\\n            print(sum1+e[-1])\\n    else:\\n        if len(c)>0:\\n            print(sum1-c[0])\\n\", \"n=int(input())\\na=list(map(int,input().split()))\\ns=0\\nb=0\\nc=0\\nfor i in a:\\n    if i>0:\\n        s+=i\\n        if i%2!=0:\\n            if b>0:\\n                b=min(b,i)\\n            if b==0:\\n                b=i\\n    if i<0 and i%2!=0:\\n        if c<0:\\n            c=max(c,i)\\n        if c==0:\\n            c=i\\nif s%2!=0:\\n    print(s)\\nelse:\\n    if (abs(c)<b or b==0) and c!=0:\\n        s=s+c\\n    else:\\n        s=s-b\\n    print(s)\", \"import math\\n(n)=list(map(int,input().split()))\\nalist=list(map(int,input().split()))\\nsumpos=0\\nmaxNegOdd=-1e9\\nmaxPosODD=1e9\\nfor i in alist:\\n    if i>0:\\n        sumpos+=i\\n        if i<maxPosODD and i%2!=0:\\n            maxPosODD=i\\n    elif i%2!=0 and maxNegOdd<i:\\n        maxNegOdd=i\\nif sumpos%2==0:\\n    if maxPosODD>abs(maxNegOdd):\\n        sumpos+=maxNegOdd\\n    else:\\n        sumpos-=maxPosODD\\nprint(sumpos)\\n\", \"n = int(input())\\na = list(map(int, input().split(\\\" \\\")))\\n\\nminus_odd = -10001\\nplus_odd = 10001\\ntotal = 0\\n\\nfor i in a:\\n    if i % 2:\\n        if i < 0:\\n            minus_odd = max(minus_odd, i)\\n        else:\\n            plus_odd = min(plus_odd, i)\\n\\n    if i > 0:\\n        total += i\\n\\nif total % 2 == 0:\\n    if minus_odd == -10001:\\n        print(total - plus_odd)\\n    elif plus_odd == 10001:\\n        print(total + minus_odd)\\n    else:\\n        if -minus_odd > plus_odd:\\n            print(total - plus_odd)\\n        else:\\n            print(total + minus_odd)\\n\\nelse:\\n    print(total)\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort(reverse=True)\\ns = 0\\nfor i in range(n):\\n    if a[i] > 0: s += a[i]\\n    else: break\\nif s % 2: print(s)\\nelse:\\n    mx = -100000\\n    for i in range(n):\\n        if a[i] < 0 and a[i] % 2: mx = max(a[i], mx)\\n    mn = 100000\\n    for i in range(n):\\n        if a[i] >= 0 and a[i] % 2: mn = min(a[i], mn)\\n    #print(mx, mn)\\n    print(max(s + mx, s - mn))\\n\", \"n = int(input())\\nnums = list(map(int, input().split()))\\n\\npos = [x for x in nums if x > 0]\\nneg = [x for x in nums if x < 0]\\n\\ns1 = sum(pos)\\nif s1 % 2 == 1:\\n    print(s1)\\n    return\\n\\npodd = [x for x in pos if x % 2 == 1]\\nnodd = [x for x in neg if x % 2 == 1]\\n\\n\\nif podd:\\n    min_podd = min(podd)\\n    if not nodd:\\n        s1 -= min_podd\\n    else:\\n        max_nodd = max(nodd)\\n        if min_podd + max_nodd > 0:\\n            s1 += max_nodd\\n        else:\\n            s1 -= min_podd\\nelse:\\n    s1 += max(nodd)\\n\\n\\nprint(s1)\\n\", \"n = int(input())\\nnums = [int(i) for i in input().split()]\\nresult = 0\\nmin_positive = 10001\\nmax_negative = -10001\\nfor i in nums:\\n    if i > 0:\\n        result += i\\n    if i % 2 == 1:\\n        if 0 < i < min_positive:\\n            min_positive = i\\n        elif max_negative < i < 0:\\n            max_negative = i\\nif result % 2 == 0:\\n    if abs(max_negative) > min_positive:\\n        result -= min_positive\\n    else:\\n        result += max_negative\\nprint(result)\\n\", \"n = int(input())\\na = list(map(int,input().split()))\\ns=0\\nneg = -10000\\npos = 10000\\nfor i in range(n):\\n\\tif a[i]%2:\\n\\t\\tif a[i]<0:\\n\\t\\t\\tneg = max(a[i],neg)\\n\\t\\telse:\\n\\t\\t\\tpos = min(a[i],pos)\\n\\tif a[i]>0:s += a[i]\\nif neg%2 == 0: neg = 10000\\nif pos%2 == 0: pos = 10000\\nif s%2==0:\\n\\ts-=min(abs(neg),pos)\\nprint(s)\\n\", \"n = int(input())\\na = list(map(int,input().split()))\\ns=0\\nneg = -10000\\npos = 10000\\nfor i in range(n):\\n\\tif a[i]%2:\\n\\t\\tif a[i]<0:\\n\\t\\t\\tneg = max(a[i],neg)\\n\\t\\telse:\\n\\t\\t\\tpos = min(a[i],pos)\\n\\tif a[i]>0:s += a[i]\\nif neg%2 == 0: neg = 10000\\nif pos%2 == 0: pos = 10000\\nif s%2==0:\\n\\ts-=min(abs(neg),pos)\\nprint(s)\\n\", \"#! /bin/python\\nn = int(input())\\ntab = list(map(int, input().split()))\\ntab = sorted(tab, reverse=True)\\n#  print(tab)\\nmaxi = 0\\ntmpOdd = 0\\nmaxOdd = 0\\noddFirst = True\\nfor i in tab:\\n    if i % 2 == 0 and i > 0:\\n        maxi += i\\n    elif i %2 == 1:\\n        tmpOdd += i\\n        if tmpOdd % 2 == 1:\\n            if maxOdd < tmpOdd or oddFirst:\\n                oddFirst = False\\n                maxOdd = tmpOdd\\nmaxi += maxOdd\\nprint(maxi)\\n\", \"n=int(input())\\ns=input()\\ns=s.split()\\nl=[]\\no=[]\\non=[]\\nsum=0\\nfor i in s:\\n\\tte=int(i)\\n\\tl.append(te)\\n\\tif(te>0 and te%2==1):\\n\\t\\to.append(te)\\n\\telif(te>0 and te%2==0):\\n\\t\\tsum+=te\\n\\telif(te<0 and te%2==1):\\n\\t\\ton.append(te)\\no.sort(reverse=True)\\non.sort(reverse=True)\\nko=0\\nfor i in on:\\n\\tif(i%2==1):\\n\\t\\tko=i\\n\\t\\tbreak\\n\\nj=2\\nsumo=0\\nif(len(o)>0):\\n\\tsumo=o[0]\\nwhile(j<len(o)):\\n\\tsumo+=o[j]+o[j-1]\\n\\tj+=2\\n\\t\\n\\nif(len(o)==0):\\n\\tprint(sum+ko)\\nelif(len(o)%2==1):\\n\\tprint(sum+sumo)\\nelif(len(o)%2==0):\\n\\tif(len(on)>0 and ko<0):\\n\\t\\tprint(max(sum+sumo,sum+sumo+ko+o[-1]))\\n\\telif(len(on)>0 and ko==0):\\n\\t\\tprint(sum+sumo)\\n\\telse:\\n\\t\\tprint(sum+sumo)\\n\\n\\t\\n\\n\\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"4\\n-2 2 -3 1\\n\",\n    \"3\\n2 -5 -3\\n\",\n    \"1\\n1\\n\",\n    \"1\\n-1\\n\",\n    \"15\\n-6004 4882 9052 413 6056 4306 9946 -4616 -6135 906 -1718 5252 -2866 9061 4046\\n\",\n    \"2\\n-5439 -6705\\n\",\n    \"2\\n2850 6843\\n\",\n    \"2\\n144 9001\\n\",\n    \"10\\n7535 -819 2389 4933 5495 4887 -5181 -9355 7955 5757\\n\",\n    \"10\\n-9169 -1574 3580 -8579 -7177 -3216 7490 3470 3465 -1197\\n\",\n    \"10\\n941 7724 2220 -4704 -8374 -8249 7606 9502 612 -9097\\n\",\n    \"10\\n4836 -2331 -3456 2312 -1574 3134 -670 -204 512 -5504\\n\",\n    \"10\\n1184 5136 1654 3254 6576 6900 6468 327 179 7114\\n\",\n    \"10\\n-2152 -1776 -1810 -9046 -6090 -2324 -8716 -6103 -787 -812\\n\",\n    \"3\\n1 1 1\\n\",\n    \"5\\n5 5 5 3 -1\\n\",\n    \"5\\n-1 -2 5 3 0\\n\",\n    \"5\\n-3 -2 5 -1 3\\n\",\n    \"3\\n-2 2 -1\\n\",\n    \"5\\n5 0 7 -2 3\\n\",\n    \"2\\n-2 -5\\n\",\n    \"3\\n-1 -3 0\\n\",\n    \"5\\n2 -1 0 -3 -2\\n\",\n    \"4\\n2 3 0 5\\n\",\n    \"5\\n-5 3 -2 2 5\\n\",\n    \"59\\n8593 5929 3016 -859 4366 -6842 8435 -3910 -2458 -8503 -3612 -9793 -5360 -9791 -362 -7180 727 -6245 -8869 -7316 8214 -7944 7098 3788 -5436 -6626 -1131 -2410 -5647 -7981 263 -5879 8786 709 6489 5316 -4039 4909 -4340 7979 -89 9844 -906 172 -7674 -3371 -6828 9505 3284 5895 3646 6680 -1255 3635 -9547 -5104 -1435 -7222 2244\\n\",\n    \"17\\n-6170 2363 6202 -9142 7889 779 2843 -5089 2313 -3952 1843 5171 462 -3673 5098 -2519 9565\\n\",\n    \"26\\n-8668 9705 1798 -1766 9644 3688 8654 -3077 -5462 2274 6739 2732 3635 -4745 -9144 -9175 -7488 -2010 1637 1118 8987 1597 -2873 -5153 -8062 146\\n\",\n    \"51\\n8237 -7239 -3545 -6059 -5110 4066 -4148 -7641 -5797 -994 963 1144 -2785 -8765 -1216 5410 1508 -6312 -6313 -680 -7657 4579 -6898 7379 2015 -5087 -5417 -6092 3819 -9101 989 -8380 9161 -7519 -9314 -3838 7160 5180 567 -1606 -3842 -9665 -2266 1296 -8417 -3976 7436 -2075 -441 -4565 3313\\n\",\n    \"1\\n-1\\n\",\n    \"1\\n1\\n\",\n    \"1\\n-1\\n\",\n    \"1\\n1\\n\",\n    \"1\\n1\\n\",\n    \"1\\n-1\\n\",\n    \"1\\n-1\\n\",\n    \"1\\n1\\n\",\n    \"2\\n-2 1\\n\",\n    \"2\\n3 2\\n\",\n    \"2\\n1 2\\n\",\n    \"2\\n-1 1\\n\",\n    \"2\\n0 -1\\n\",\n    \"2\\n2 1\\n\",\n    \"2\\n3 0\\n\",\n    \"2\\n0 -1\\n\",\n    \"3\\n-3 1 -1\\n\",\n    \"3\\n3 -1 1\\n\",\n    \"3\\n1 3 1\\n\",\n    \"3\\n-1 0 1\\n\",\n    \"3\\n-3 -3 -2\\n\",\n    \"3\\n3 -1 1\\n\",\n    \"3\\n3 -1 1\\n\",\n    \"3\\n-2 -2 1\\n\",\n    \"4\\n0 -1 -3 -4\\n\",\n    \"4\\n5 3 2 1\\n\",\n    \"4\\n-1 -2 4 -2\\n\",\n    \"4\\n-1 -3 0 -3\\n\",\n    \"4\\n1 -4 -3 -4\\n\",\n    \"4\\n5 3 3 4\\n\",\n    \"4\\n-1 -3 -1 2\\n\",\n    \"4\\n3 2 -1 -4\\n\",\n    \"5\\n-5 -4 -3 -5 2\\n\",\n    \"5\\n5 5 1 2 -2\\n\",\n    \"5\\n-2 -1 -5 -1 4\\n\",\n    \"5\\n-5 -5 -4 4 0\\n\",\n    \"5\\n2 -3 -1 -4 -5\\n\",\n    \"5\\n4 3 4 2 3\\n\",\n    \"5\\n0 -2 -5 3 3\\n\",\n    \"5\\n4 -2 -2 -3 0\\n\",\n    \"6\\n6 7 -1 1 5 -1\\n\",\n    \"6\\n-1 7 2 -3 -4 -5\\n\",\n    \"6\\n0 -1 -3 -5 2 -6\\n\",\n    \"6\\n4 -1 0 3 6 1\\n\",\n    \"6\\n5 3 3 4 4 -3\\n\",\n    \"6\\n0 -3 5 -4 5 -4\\n\",\n    \"6\\n-5 -3 1 -1 -5 -3\\n\",\n    \"6\\n-2 1 3 -2 7 4\\n\",\n    \"7\\n0 7 6 2 7 0 6\\n\",\n    \"7\\n6 -6 -1 -5 7 1 7\\n\",\n    \"7\\n2 3 -5 0 -4 0 -4\\n\",\n    \"7\\n-6 3 -3 -1 -6 -6 -5\\n\",\n    \"7\\n7 6 3 2 4 2 0\\n\",\n    \"7\\n-2 3 -3 4 4 0 -1\\n\",\n    \"7\\n-5 -7 4 0 5 -3 -5\\n\",\n    \"7\\n-3 -5 -4 1 3 -4 -7\\n\",\n    \"8\\n5 2 4 5 7 -2 7 3\\n\",\n    \"8\\n-8 -3 -1 3 -8 -4 -4 4\\n\",\n    \"8\\n-6 -7 -7 -5 -4 -9 -2 -7\\n\",\n    \"8\\n8 7 6 8 3 4 8 -2\\n\",\n    \"8\\n6 7 0 -6 6 5 4 7\\n\",\n    \"8\\n0 -7 -5 -5 5 -1 -8 -7\\n\",\n    \"8\\n1 -6 -5 7 -3 -4 2 -2\\n\",\n    \"8\\n1 -8 -6 -6 -6 -7 -5 -1\\n\",\n    \"9\\n-3 -1 4 4 8 -8 -5 9 -2\\n\",\n    \"9\\n-9 -1 3 -2 -7 2 -9 -1 -4\\n\",\n    \"9\\n-6 -9 -3 -8 -5 2 -6 0 -5\\n\",\n    \"9\\n5 4 3 3 6 7 8 5 9\\n\",\n    \"9\\n5 3 9 1 5 2 -3 7 0\\n\",\n    \"9\\n-3 -9 -1 -7 5 6 -4 -6 -6\\n\",\n    \"9\\n-6 -5 6 -5 -2 0 1 2 -9\\n\",\n    \"9\\n8 3 6 1 -3 5 2 9 1\\n\",\n    \"10\\n-6 -4 -7 -1 -9 -10 -10 1 0 -3\\n\",\n    \"10\\n-2 -10 -5 -6 -10 -3 -6 -3 -8 -8\\n\",\n    \"10\\n8 5 9 2 3 3 -6 1 -1 8\\n\",\n    \"10\\n2 10 -7 6 -1 -1 7 -9 -4 -6\\n\",\n    \"10\\n-10 -2 -2 -1 -10 -7 1 0 -4 -5\\n\",\n    \"10\\n4 3 10 -2 -1 0 10 6 7 0\\n\",\n    \"10\\n-2 6 6 5 0 10 6 7 -1 1\\n\",\n    \"10\\n-10 2 8 -6 -1 -5 1 -10 -10 -1\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"53507\\n\",\n    \"-5439\\n\",\n    \"9693\\n\",\n    \"9145\\n\",\n    \"38951\\n\",\n    \"18005\\n\",\n    \"28605\\n\",\n    \"8463\\n\",\n    \"38613\\n\",\n    \"-787\\n\",\n    \"3\\n\",\n    \"17\\n\",\n    \"7\\n\",\n    \"7\\n\",\n    \"1\\n\",\n    \"15\\n\",\n    \"-5\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"7\\n\",\n    \"7\\n\",\n    \"129433\\n\",\n    \"43749\\n\",\n    \"60757\\n\",\n    \"73781\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"-3\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"-1\\n\",\n    \"11\\n\",\n    \"3\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"15\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"-1\\n\",\n    \"13\\n\",\n    \"3\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"13\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"19\\n\",\n    \"9\\n\",\n    \"1\\n\",\n    \"13\\n\",\n    \"19\\n\",\n    \"7\\n\",\n    \"1\\n\",\n    \"15\\n\",\n    \"21\\n\",\n    \"21\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"21\\n\",\n    \"11\\n\",\n    \"9\\n\",\n    \"3\\n\",\n    \"33\\n\",\n    \"7\\n\",\n    \"-5\\n\",\n    \"41\\n\",\n    \"35\\n\",\n    \"5\\n\",\n    \"9\\n\",\n    \"1\\n\",\n    \"25\\n\",\n    \"5\\n\",\n    \"-1\\n\",\n    \"47\\n\",\n    \"31\\n\",\n    \"11\\n\",\n    \"9\\n\",\n    \"35\\n\",\n    \"1\\n\",\n    \"-3\\n\",\n    \"39\\n\",\n    \"25\\n\",\n    \"1\\n\",\n    \"39\\n\",\n    \"41\\n\",\n    \"11\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/797/B",
  "starter_code": ""
}