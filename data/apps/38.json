{
  "task_id": "APPS/38",
  "problem_id": 38,
  "prompt": "Running with barriers on the circle track is very popular in the country where Dasha lives, so no wonder that on her way to classes she saw the following situation:\n\nThe track is the circle with length L, in distinct points of which there are n barriers. Athlete always run the track in counterclockwise direction if you look on him from above. All barriers are located at integer distance from each other along the track. \n\nHer friends the parrot Kefa and the leopard Sasha participated in competitions and each of them ran one lap. Each of the friends started from some integral point on the track. Both friends wrote the distance from their start along the track to each of the n barriers. Thus, each of them wrote n integers in the ascending order, each of them was between 0 and L - 1, inclusively. [Image] Consider an example. Let L = 8, blue points are barriers, and green points are Kefa's start (A) and Sasha's start (B). Then Kefa writes down the sequence [2, 4, 6], and Sasha writes down [1, 5, 7]. \n\nThere are several tracks in the country, all of them have same length and same number of barriers, but the positions of the barriers can differ among different tracks. Now Dasha is interested if it is possible that Kefa and Sasha ran the same track or they participated on different tracks. \n\nWrite the program which will check that Kefa's and Sasha's tracks coincide (it means that one can be obtained from the other by changing the start position). Note that they always run the track in one direction \u2014 counterclockwise, if you look on a track from above. \n\n\n-----Input-----\n\nThe first line contains two integers n and L (1 \u2264 n \u2264 50, n \u2264 L \u2264 100) \u2014 the number of barriers on a track and its length. \n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Kefa's start to each barrier in the order of its appearance. All integers are in the range from 0 to L - 1 inclusively.\n\nThe second line contains n distinct integers in the ascending order \u2014 the distance from Sasha's start to each barrier in the order of its overcoming. All integers are in the range from 0 to L - 1 inclusively.\n\n\n-----Output-----\n\nPrint \"YES\" (without quotes), if Kefa and Sasha ran the coinciding tracks (it means that the position of all barriers coincides, if they start running from the same points on the track). Otherwise print \"NO\" (without quotes).\n\n\n-----Examples-----\nInput\n3 8\n2 4 6\n1 5 7\n\nOutput\nYES\n\nInput\n4 9\n2 3 5 8\n0 1 3 6\n\nOutput\nYES\n\nInput\n2 4\n1 3\n1 2\n\nOutput\nNO\n\n\n\n-----Note-----\n\nThe first test is analyzed in the statement.",
  "solutions": "[\"def main():\\n\\tn, l = map(int, input().split())\\n\\n\\tx = list(map(int, input().split()))\\n\\ty = list(map(int, input().split()))\\n\\n\\tx.append(x[0] + l)\\n\\ty.append(y[0] + l)\\n\\n\\ta = [x[i + 1] - x[i] for i in range(n)]\\n\\tb = [y[i + 1] - y[i] for i in range(n)]\\n\\n\\tfor i in range(n):\\n\\t\\tif (a == b[i:] + b[:i]):\\n\\t\\t\\tprint(\\\"YES\\\")\\n\\t\\t\\treturn\\n\\tprint(\\\"NO\\\")\\n\\n\\nmain()\", \"import math, re, itertools as it;prime = lambda n: len([i for i in range(2, int(math.sqrt(n) + 1)) if n % i == 0]) == 0;gcd = lambda a, b: gcd(b, a % b) if b else a;fact = lambda x: x * fact(x - 1) if x else 1;bino = lambda n, k: fact(n) / fact(k) / fact(n - k);fib11 = lambda n: 1 if n < 2 else fib11(n - 1) + fib11(n - 2);fib01 = lambda n: 0 if n == 0 else 1 if n == 1 else fib01(n - 1) + fib01(n - 2);sumofd = lambda x: x if x < 10 else sumofd(x // 10) + x % 10\\n\\nn, l = map(int, input().split(' '))\\nk = list(map(int, input().split()))\\ns = list(map(int, input().split()))\\nf = False\\nfor i in range(l):\\n\\tfor j in range(len(k)):\\n\\t\\tk[j] -= 1\\n\\t\\t\\n\\t\\tif k[j] < 0:\\n\\t\\t\\tk[j] = l - 1\\n\\tk.sort()\\n\\tif k == s:\\n\\t\\tf = True\\nprint('YES' if f else 'NO')\", \"def calc_distances(points):\\n    distances = [0] * n\\n    for i in range(n):\\n        dist = points[i] - points[i - 1]\\n        if dist < 0:\\n            dist += length\\n        distances[i] = dist\\n    return distances\\n\\n\\ndef rotate(lst, i):\\n    return lst[i:] + lst[:i]\\n\\n\\nn, length = list(map(int, input().split()))\\na, b = [calc_distances(list(map(int, input().split()))) for i in range(2)]\\nfor i in range(n):\\n    if b[i] == a[0] and rotate(b, i) == a:\\n        print(\\\"YES\\\")\\n        break\\nelse:\\n    print(\\\"NO\\\")\\n\", \"n, l = map(int, input().split())\\n\\nl1 = [int(x) for x in input().split()]\\nl2 = [int(x) for x in input().split()]\\n\\ns1 = ''\\n\\nprev = -1\\nfor i in range(n):\\n\\ts1 += '0' * (l1[i] - prev - 1) + '1'\\n\\tprev = l1[i]\\ns1 += '0' * (l - prev - 1)\\n\\ns2 = ''\\n\\nprev = -1\\nfor i in range(n):\\n\\ts2 += '0' * (l2[i] - prev - 1) + '1'\\n\\tprev = l2[i]\\ns2 += '0' * (l - prev - 1)\\n\\ns1 = s1 * 2\\n\\nif s1.find(s2) != -1:\\n\\tprint(\\\"YES\\\")\\nelse:\\n\\tprint(\\\"NO\\\")\", \"n,l = map(int,input().split())\\nA = list(map(int,input().split()))\\nB = list(map(int,input().split()))\\nans1 = [0] * n\\nans2 = [0] * n\\nfor j in range(n):\\n    if j == 0:\\n        \\n        ans1[j] = A[j] + (l - A[-1-j])\\n        ans2[j] = B[j] + (l - B[-1-j])\\n    else:\\n        ans1[j] = A[j] - A[j-1]\\n        ans2[j] = B[j] - B[j-1]\\nper = 0\\nfor j in range(n):\\n    if ans1 == ans2:\\n        per = 1\\n        break\\n    else:\\n        s = ans1[0]\\n        ans1 = ans1[1:]\\n        ans1.append(s)\\nif per == 1:\\n    print('YES')\\nelse:\\n    print('NO')\", \"def track(tr):\\n    res = [l - tr[-1] + tr[0]]\\n    for i in range(1, n):\\n        res.append(tr[i] - tr[i - 1])\\n    return res\\n\\ndef equals(l1, l2):\\n    for i in range(n):\\n        res = True\\n        for k in range(n):\\n            res = res and l1[k] == l2[(k + i) % n]\\n        if res:\\n            return True\\n    return False\\n\\nn, l = list(map(int, input().split()))\\na = track(list(map(int, input().split())))\\nb = track(list(map(int, input().split())))\\nif equals(a, b):\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"n, l = list(map(int, input().split()))\\na = [int(x) for x in input().split()]\\nb = [int(x) for x in input().split()]\\nc = [0] * n\\nd = [0] * n\\nfor i in range(n-1):\\n    c[i] = a[i+1] - a[i]\\nc[n-1] = l - sum(c)\\n\\nfor i in range(n-1):\\n    d[i] = b[i+1] - b[i]\\nd[n-1] = l - sum(d)\\n\\n\\n\\nf = False\\nfor i in range(0, n):\\n    if d == c[i:n] + c[:i]:\\n        f = True\\n        \\nif f:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"import sys\\nN, L = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\n\\nfor shift in range(N):\\n    coincide = True\\n    diff = b[shift] - a[0]\\n    for i in range(1, N):\\n        if (a[i] + diff) % L != b[(i + shift) % N]:\\n            coincide = False\\n            break\\n    if coincide:\\n        print(\\\"YES\\\")\\n        return\\n\\nprint(\\\"NO\\\")\\n\", \"n, L = map(int, input().split())\\n\\nif n == 1:\\n\\tprint('YES')\\n\\treturn\\n\\nfirst = list(map(int, input().split()))\\nsecond = list(map(int, input().split()))\\n\\ndef shift(lst, value):\\n\\tfor i in range(len(lst)):\\n\\t\\tlst[i] -= value\\n\\treturn lst\\n\\ndef equal(lst1, lst2):\\n\\tfor i in range(len(lst1)):\\n\\t\\tif lst1[i] != lst2[i]:\\n\\t\\t\\treturn False\\n\\treturn True\\n\\nfirst = shift(first, first[0])\\nsecond = shift(second, second[0])\\n\\nfor i in range(n):\\n\\tfirst = shift(first, first[1])\\n\\tfirst = first[1:] + [L + first[0]]\\n\\tif equal(first, second):\\n\\t\\tprint(\\\"YES\\\")\\n\\t\\treturn\\n\\nprint('NO')\", \"n, L = tuple(map(int,input().split()))\\nkefa = list(map(int,input().split()))\\nsasha = list(map(int,input().split()))\\n\\ndiffsk, diffss = [],[]\\n\\nfor k in range(n):\\n    diffsk.append(kefa[k%n]-kefa[(k-1)%n])\\n    diffss.append(sasha[k%n]-sasha[(k-1)%n])\\n\\nres = False\\nfor j in range(n):\\n    tmp = True\\n    diff = (diffsk[0]-diffss[j])%L\\n    for i in range(n):\\n        if (diffsk[i]-diffss[(i+j)%n])%L != diff:\\n            tmp = False\\n    if tmp:\\n        res = True\\n\\nif res:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"def main():\\t\\n\\ttmp = input()\\n\\ttmp = tmp.split(\\\" \\\")\\n\\tn = int(tmp[0])\\n\\tl = int(tmp[1])\\n\\ttmp = input()\\n\\ttmp = tmp.split(\\\" \\\")\\n\\ta = []\\n\\tfor i in tmp : a.append(int(i))\\n\\ttmp = input()\\n\\ttmp = tmp.split(\\\" \\\")\\n\\tb = []\\n\\tfor i in tmp : b.append(int(i))\\n\\ta1 = []\\n\\tfor i in range(1,len(a)) : a1.append(a[i]-a[i-1])\\n\\ta1.append(l-a[-1]+a[0])\\n\\tb1 = []\\n\\tfor i in range(1,len(b)) : b1.append(b[i]-b[i-1])\\n\\tb1.append(l-b[-1]+b[0])\\n\\ttmp = len(a1)\\n\\tfor i in range(tmp):\\n\\t\\tlol = a1[0]\\n\\t\\ta1.pop(0)\\n\\t\\ta1.append(lol)\\n\\t\\tif (a1 == b1) : \\n\\t\\t\\tprint(\\\"YES\\\")\\n\\t\\t\\treturn 0\\n\\tprint(\\\"NO\\\")\\nmain()\", \"n, l = list(map(int, input().split()))\\na = [int(i) for i in input().split()]\\nb = [int(i) for i in input().split()]\\naa = [0] * n\\nbb = [0] * n\\naa[0] = l - a[-1] + a[0]\\nbb[0] = l - b[-1] + b[0]\\nfor i in range(1, n):\\n    aa[i] = a[i] - a[i - 1]\\n    bb[i] = b[i] - b[i - 1]\\nfor i in range(n):\\n    if aa == bb:\\n        print(\\\"YES\\\")\\n        break\\n    aa.append(aa[0])\\n    aa.pop(0)\\nelse:\\n    print(\\\"NO\\\")\\n\", \"\\n\\n\\nn, l = list(map(int, input().split()))\\nA = [int(x) for x in input().split()]\\nB = [int(x) for x in input().split()]\\n\\n\\nfirst_diff = A[0]\\nA = [x - first_diff for x in A]\\n\\nfirst_diff = B[0]\\nB = [x - first_diff for x in B]\\n\\nfound = False\\n\\nfor _ in range(n + 2):\\n    if A == B:\\n        found = True\\n\\n    B = B[1:] + [B[0] + l]\\n    first_diff = B[0]\\n    B = [x - first_diff for x in B]\\n\\n\\nif found:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\\n\", \"q,w=list(map(int,input().split()))\\na=list(map(int,input().split()))\\ns=list(map(int,input().split()))\\nz=[0]*q\\nfor i in range(1,q):\\n    z[i]=a[i]-a[i-1]\\nz[0]=w-a[q-1]+a[0]\\nz=z+z+z\\nx=[0]*q\\nfor i in range(1,q):\\n    x[i]=s[i]-s[i-1]\\nx[0]=w-s[q-1]+s[0]\\nb=False\\nfor i in range(0,q+1):\\n    if z[i:i+q]==x:\\n        b=True\\nif b:\\n    print('YES')\\nelse:\\n    print('NO')\\n\", \"n, l = map(int, input().split())\\nans = False\\na = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\nfor i in range(l):\\n    c = 1\\n    p = b[:]\\n    for j in range(n):\\n        p[j] = (b[j] + i) % l\\n    p.sort()\\n    for j in range(n):\\n        if a[j] != p[j]:\\n            c = 0\\n            break\\n    if c:\\n        print('YES')\\n        break\\nelse:\\n    print('NO')\", \"import math, sys\\n\\ndef main():\\n\\tn,l = list(map(int,input().split()))\\n\\ta = list(map(int, input().split()))\\n\\tmask = []\\n\\tfor i in range(n-1):\\n\\t\\tmask.append(a[i+1]-a[i])\\n\\tmask.append(l-a[n-1]+a[0])\\n\\t\\n\\tb = list(map(int, input().split()))\\n\\tpath = []\\n\\tfor i in range(n-1):\\n\\t\\tpath.append(b[i+1]-b[i])\\n\\tpath.append(l-b[n-1]+b[0])\\n\\t\\n\\tfor offset in range(n):\\n\\t\\tflag = True\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif mask[(i+offset)%n] != path[i]:\\n\\t\\t\\t\\tflag = False\\n\\t\\t\\t\\tbreak\\n\\t\\tif flag:\\n\\t\\t\\tprint('YES')\\n\\t\\t\\treturn\\n\\tprint('NO')\\n\\t\\t\\t\\n\\t\\t\\n\\t\\t\\n\\t\\t \\n\\t\\t\\t\\n\\ndef __starting_point():\\n\\tmain()\\n\\n__starting_point()\", \"n, L = [int(x) for x in input().split()]\\na = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\ns1 = a[n - 1]\\ns2 = b[n - 1]\\nx1 = L - s1\\nx2 = L - s2\\nc = []\\nd = []\\nc.append(a[0] + x1)\\nd.append(b[0] + x2)\\nfor i in range(n - 1):\\n    c.append(a[i + 1] - a[i])\\n    d.append(b[i + 1] - b[i])\\nfor i in range(n):\\n    k = True\\n    for j in range(n):\\n        if c[j] != d[(j + i) % n]:\\n            k = False\\n    if (k):\\n        print(\\\"YES\\\")\\n        return\\nprint(\\\"NO\\\")\\n\", \"n, l = list(map(int, input().split()))\\n\\nk = list(map(int, input().split()))\\ns = list(map(int, input().split()))\\n\\nki = [k[0]]\\nsi = [s[0]]\\n\\ntmp = 0\\nfor i in range(1, n):\\n    ki.append(k[i] - k[i - 1])\\n    si.append(s[i] - s[i - 1])\\nki[0] += l - k[-1]\\nsi[0] += l - s[-1]\\n\\nif ''.join(map(str, ki * 2)).find(''.join(map(str, si))) != -1:\\n    print('YES')\\nelse:\\n    print('NO')\\n\", \"n, L = map(int, input().split())\\n\\nKef = list(map(int, input().split()))\\nSas = list(map(int, input().split()))\\n\\ndKef = [Kef[i+1]-Kef[i] for i in range(n-1)]\\ndKef.append(L - Kef[n - 1] + Kef[0])\\n\\ndSas= [Sas[i+1]-Sas[i] for i in range(n-1)]\\ndSas.append(L - Sas[n - 1] + Sas[0])\\n\\nif ' '.join(map(str, dKef)) in ' '.join(map(str, dSas * 2)):\\n\\tprint(\\\"YES\\\")\\nelse:\\n\\tprint(\\\"NO\\\")\", \"from collections import deque\\n\\nn, L = list(map(int, input().split()))\\nd1 = [int(i) for i in input().split()]\\nd2 = deque([int(i) for i in input().split()])\\nans = False\\nif n == 1:\\n    ans = True\\n\\nfor i in range(n):\\n    if ans:\\n        break\\n    diff = (d1[0]-d2[0])%L\\n    fl = True\\n    for j in range(n):\\n        if (d1[j]-d2[j])%L != diff:\\n            fl = False\\n    if fl:\\n        ans = True\\n    d2.rotate(1)\\n\\nprint([\\\"NO\\\",\\\"YES\\\"][ans])\\n\", \"k, n = list(map(int, input().split()))\\na = list(map(int, input().split()))\\nb = list(map(int, input().split()))\\nc = []\\nd = []\\nfor i in range(k - 1):\\n    c += [a[i + 1] - a[i] + 1]\\n    d += [b[i + 1] - b[i] + 1]\\nc += [n - a[-1] + a[0] + 1]\\nd += [n - b[-1] + b[0] + 1]\\nfor i in range(k):\\n    if c == d[i:] + d[:i]:\\n        print(\\\"YES\\\")\\n        break\\nelse:\\n     print(\\\"NO\\\")\\n\", \"import sys\\n\\ndef debug(x, table):\\n    for name, val in table.items():\\n        if x is val:\\n            print('DEBUG:{} -> {}'.format(name, val), file=sys.stderr)\\n            return None\\n\\ndef solve():\\n    n, L = map(int, input().split())\\n    A = [int(i) for i in input().split()]\\n    B = [int(i) for i in input().split()]\\n\\n    for i in range(L):\\n        B_r = sorted([(b + i) % L for b in B])\\n        if A == B_r:\\n            print('YES')\\n            break\\n    else:\\n        print('NO')\\n\\ndef __starting_point():\\n    solve()\\n__starting_point()\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3 8\\n2 4 6\\n1 5 7\\n\",\n    \"4 9\\n2 3 5 8\\n0 1 3 6\\n\",\n    \"2 4\\n1 3\\n1 2\\n\",\n    \"5 9\\n0 2 5 6 7\\n1 3 6 7 8\\n\",\n    \"5 60\\n7 26 27 40 59\\n14 22 41 42 55\\n\",\n    \"20 29\\n0 1 2 4 5 8 9 12 14 15 17 19 20 21 22 23 25 26 27 28\\n0 2 4 5 6 7 8 10 11 12 13 14 15 16 18 19 22 23 26 28\\n\",\n    \"35 41\\n0 1 2 3 4 5 6 7 9 10 11 12 13 14 18 19 20 21 22 23 24 25 26 28 30 31 32 33 34 35 36 37 38 39 40\\n0 1 2 3 4 5 7 8 9 10 11 12 16 17 18 19 20 21 22 23 24 26 28 29 30 31 32 33 34 35 36 37 38 39 40\\n\",\n    \"40 63\\n0 2 3 4 5 6 9 10 12 15 17 19 23 25 26 27 28 29 30 31 33 34 36 37 38 39 40 43 45 49 50 52 53 54 55 57 58 60 61 62\\n1 2 3 4 5 8 10 14 15 17 18 19 20 22 23 25 26 27 28 30 31 32 33 34 37 38 40 43 46 47 51 53 54 55 56 57 58 59 61 62\\n\",\n    \"50 97\\n1 2 3 4 6 9 10 11 12 13 14 21 22 23 24 25 28 29 30 31 32 33 34 36 37 40 41 45 53 56 59 64 65 69 70 71 72 73 74 77 81 84 85 86 87 89 91 92 95 96\\n0 1 2 3 6 10 13 14 15 16 18 20 21 24 25 27 28 29 30 33 35 36 37 38 39 40 47 48 49 50 51 54 55 56 57 58 59 60 62 63 66 67 71 79 82 85 90 91 95 96\\n\",\n    \"50 100\\n0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98\\n1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99\\n\",\n    \"1 2\\n0\\n0\\n\",\n    \"1 2\\n0\\n1\\n\",\n    \"1 2\\n1\\n0\\n\",\n    \"1 2\\n1\\n1\\n\",\n    \"1 1\\n0\\n0\\n\",\n    \"5 12\\n2 3 4 8 10\\n2 3 4 8 10\\n\",\n    \"1 18\\n3\\n10\\n\",\n    \"1 75\\n65\\n8\\n\",\n    \"2 16\\n4 13\\n2 11\\n\",\n    \"2 95\\n45 59\\n3 84\\n\",\n    \"3 53\\n29 43 50\\n29 43 50\\n\",\n    \"3 60\\n39 46 51\\n43 50 55\\n\",\n    \"4 4\\n0 1 2 3\\n0 1 2 3\\n\",\n    \"4 93\\n45 48 50 90\\n20 68 71 73\\n\",\n    \"6 18\\n0 3 8 11 15 16\\n2 7 10 14 15 17\\n\",\n    \"6 87\\n0 1 21 31 34 66\\n11 12 32 42 45 77\\n\",\n    \"7 26\\n0 3 9 13 14 19 20\\n4 7 13 17 18 23 24\\n\",\n    \"7 81\\n0 12 19 24 25 35 59\\n1 8 13 14 24 48 70\\n\",\n    \"8 20\\n0 1 2 3 5 6 14 15\\n1 2 10 11 16 17 18 19\\n\",\n    \"8 94\\n0 8 11 27 38 54 57 89\\n1 33 38 46 49 65 76 92\\n\",\n    \"9 18\\n1 3 6 8 11 12 13 16 17\\n0 2 5 6 7 10 11 13 15\\n\",\n    \"9 90\\n10 11 27 33 34 55 63 84 87\\n9 12 25 26 42 48 49 70 78\\n\",\n    \"10 42\\n4 9 10 14 15 16 19 33 36 40\\n0 14 17 21 27 32 33 37 38 39\\n\",\n    \"10 73\\n4 5 15 19 20 25 28 42 57 58\\n3 4 9 12 26 41 42 61 62 72\\n\",\n    \"11 11\\n0 1 2 3 4 5 6 7 8 9 10\\n0 1 2 3 4 5 6 7 8 9 10\\n\",\n    \"11 57\\n1 4 27 30 31 35 37 41 50 52 56\\n22 25 26 30 32 36 45 47 51 53 56\\n\",\n    \"12 73\\n5 9 11 20 25 36 40 41 44 48 56 60\\n12 16 18 27 32 43 47 48 51 55 63 67\\n\",\n    \"12 95\\n1 37 42 46 56 58 59 62 64 71 76 80\\n2 18 54 59 63 73 75 76 79 81 88 93\\n\",\n    \"13 29\\n2 5 6 9 12 17 18 19 20 21 22 24 27\\n0 3 6 11 12 13 14 15 16 18 21 25 28\\n\",\n    \"13 90\\n9 18 23 30 31 36 39 44 58 59 74 82 87\\n1 6 18 27 32 39 40 45 48 53 67 68 83\\n\",\n    \"14 29\\n1 2 3 4 5 7 9 12 13 20 21 22 23 24\\n0 3 4 11 12 13 14 15 21 22 23 24 25 27\\n\",\n    \"14 94\\n7 8 9 21 34 35 36 37 38 43 46 52 84 93\\n2 3 4 16 29 30 31 32 33 38 41 47 79 88\\n\",\n    \"15 19\\n1 2 3 4 5 6 7 8 9 10 11 13 14 16 17\\n0 1 2 3 4 5 6 7 8 9 10 12 13 15 16\\n\",\n    \"15 27\\n2 3 4 5 6 7 8 9 10 11 12 14 17 24 26\\n2 3 4 5 6 7 8 9 10 11 12 14 17 24 26\\n\",\n    \"16 28\\n3 5 6 7 9 10 11 12 13 14 17 19 20 25 26 27\\n0 5 6 7 11 13 14 15 17 18 19 20 21 22 25 27\\n\",\n    \"16 93\\n5 6 10 11 13 14 41 43 46 61 63 70 74 79 83 92\\n0 9 15 16 20 21 23 24 51 53 56 71 73 80 84 89\\n\",\n    \"17 49\\n2 5 11 12 16 18 19 21 22 24 36 37 38 39 40 44 47\\n1 7 8 12 14 15 17 18 20 32 33 34 35 36 40 43 47\\n\",\n    \"17 86\\n16 17 25 33 39 41 50 51 54 56 66 70 72 73 77 80 85\\n3 9 11 20 21 24 26 36 40 42 43 47 50 55 72 73 81\\n\",\n    \"18 20\\n0 1 2 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n0 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\\n\",\n    \"18 82\\n0 5 10 13 14 16 21 28 29 30 44 46 61 64 69 71 77 78\\n0 5 8 9 11 16 23 24 25 39 41 56 59 64 66 72 73 77\\n\",\n    \"19 25\\n0 1 2 3 5 7 9 10 12 13 16 17 18 19 20 21 22 23 24\\n0 3 4 5 6 7 8 9 10 11 12 13 14 15 17 19 21 22 24\\n\",\n    \"19 91\\n5 17 18 20 22 25 26 31 32 33 43 47 54 61 62 64 77 80 87\\n4 5 6 16 20 27 34 35 37 50 53 60 69 81 82 84 86 89 90\\n\",\n    \"20 53\\n2 6 8 9 16 17 20 21 22 23 25 26 35 36 38 39 44 46 47 50\\n4 5 8 9 10 11 13 14 23 24 26 27 32 34 35 38 43 47 49 50\\n\",\n    \"21 44\\n0 1 3 4 6 7 8 9 10 11 12 15 17 18 21 22 27 29 34 36 42\\n1 7 9 10 12 13 15 16 17 18 19 20 21 24 26 27 30 31 36 38 43\\n\",\n    \"21 94\\n3 5 6 8 9 15 16 20 28 31 35 39 49 50 53 61 71 82 85 89 90\\n6 17 20 24 25 32 34 35 37 38 44 45 49 57 60 64 68 78 79 82 90\\n\",\n    \"22 24\\n0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 22 23\\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 21 22 23\\n\",\n    \"22 85\\n3 5 7 14 18 21 25 32 38 41 53 58 61 62 66 70 71 73 75 76 79 83\\n3 6 18 23 26 27 31 35 36 38 40 41 44 48 53 55 57 64 68 71 75 82\\n\",\n    \"23 38\\n0 2 4 5 7 8 12 13 14 16 17 18 21 22 24 27 28 30 31 32 35 36 37\\n0 1 2 3 5 7 8 10 11 15 16 17 19 20 21 24 25 27 30 31 33 34 35\\n\",\n    \"23 93\\n1 3 5 10 19 22 26 27 30 35 39 53 55 60 66 67 75 76 77 80 82 89 90\\n9 11 16 22 23 31 32 33 36 38 45 46 50 52 54 59 68 71 75 76 79 84 88\\n\",\n    \"24 37\\n1 4 5 6 8 11 12 13 15 16 17 19 20 21 23 26 27 28 30 31 33 34 35 36\\n0 3 4 5 7 8 10 11 12 13 15 18 19 20 22 25 26 27 29 30 31 33 34 35\\n\",\n    \"24 94\\n9 10 13 14 16 18 19 22 24 29 32 35 48 55 57 63 64 69 72 77 78 85 90 92\\n1 7 8 13 16 21 22 29 34 36 47 48 51 52 54 56 57 60 62 67 70 73 86 93\\n\",\n    \"25 45\\n0 1 2 4 6 7 8 9 13 14 17 19 21 22 23 25 28 29 30 31 34 36 38 39 42\\n1 3 4 5 7 10 11 12 13 16 18 20 21 24 27 28 29 31 33 34 35 36 40 41 44\\n\",\n    \"25 72\\n1 2 6 8 9 11 15 18 19 20 26 29 31 33 34 40 41 43 45 48 58 60 68 69 71\\n0 6 9 11 13 14 20 21 23 25 28 38 40 48 49 51 53 54 58 60 61 63 67 70 71\\n\",\n    \"26 47\\n0 2 5 7 8 9 10 12 13 14 20 22 23 25 27 29 31 32 33 35 36 37 38 42 44 45\\n0 2 4 6 8 9 10 12 13 14 15 19 21 22 24 26 29 31 32 33 34 36 37 38 44 46\\n\",\n    \"26 99\\n0 1 13 20 21 22 25 26 27 28 32 39 44 47 56 58 60 62 71 81 83 87 89 93 94 98\\n6 8 12 14 18 19 23 24 25 37 44 45 46 49 50 51 52 56 63 68 71 80 82 84 86 95\\n\",\n    \"27 35\\n0 2 3 4 5 6 7 8 10 11 12 13 14 15 16 17 19 20 21 23 26 27 29 30 31 32 33\\n0 1 2 3 5 7 8 9 10 11 12 13 15 16 17 18 19 20 21 22 24 25 26 28 31 32 34\\n\",\n    \"27 51\\n1 2 4 7 8 11 13 17 20 21 23 24 25 28 29 30 34 35 37 38 40 43 45 46 47 48 50\\n0 1 2 4 6 7 9 12 13 16 18 22 25 26 28 29 30 33 34 35 39 40 42 43 45 48 50\\n\",\n    \"28 38\\n1 4 5 7 8 9 10 11 12 14 15 16 18 19 20 21 22 23 24 25 28 29 30 32 33 35 36 37\\n0 1 2 3 4 5 6 9 10 11 13 14 16 17 18 20 23 24 26 27 28 29 30 31 33 34 35 37\\n\",\n    \"28 67\\n0 1 2 3 6 9 10 15 18 22 24 25 30 35 36 38 39 47 48 49 51 53 55 56 58 62 63 64\\n4 7 11 13 14 19 24 25 27 28 36 37 38 40 42 44 45 47 51 52 53 56 57 58 59 62 65 66\\n\",\n    \"29 29\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\\n\",\n    \"29 93\\n1 2 11 13 18 21 27 28 30 38 41 42 46 54 55 56 60 61 63 64 66 69 71 72 77 81 83 89 90\\n2 10 11 12 16 17 19 20 22 25 27 28 33 37 39 45 46 50 51 60 62 67 70 76 77 79 87 90 91\\n\",\n    \"30 63\\n0 2 3 5 6 7 8 10 13 18 19 21 22 23 26 32 35 37 38 39 40 41 43 44 49 51 53 54 58 61\\n0 2 3 5 6 7 8 10 13 18 19 21 22 23 26 32 35 37 38 39 40 41 43 44 49 51 53 54 58 61\\n\",\n    \"30 91\\n1 2 3 7 8 9 13 16 17 19 27 29 38 45 47 52 53 55 61 62 66 77 78 79 80 81 82 84 88 89\\n3 4 5 9 12 13 15 23 25 34 41 43 48 49 51 57 58 62 73 74 75 76 77 78 80 84 85 88 89 90\\n\",\n    \"31 39\\n0 1 2 3 4 5 6 7 8 10 11 13 14 17 18 20 21 23 24 25 27 28 29 30 31 33 34 35 36 37 38\\n0 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 18 19 21 22 25 26 28 29 31 32 33 35 36 37 38\\n\",\n    \"31 95\\n9 12 14 15 21 23 26 28 30 36 37 42 47 51 54 56 59 62 64 65 66 70 72 74 75 79 82 85 87 91 93\\n0 2 3 7 10 13 15 19 21 32 35 37 38 44 46 49 51 53 59 60 65 70 74 77 79 82 85 87 88 89 93\\n\",\n    \"32 61\\n0 2 3 5 7 10 13 14 15 18 19 20 21 22 23 24 26 32 33 34 36 38 43 46 47 51 54 55 56 57 58 59\\n1 2 4 6 9 12 13 14 17 18 19 20 21 22 23 25 31 32 33 35 37 42 45 46 50 53 54 55 56 57 58 60\\n\",\n    \"32 86\\n5 7 9 10 13 17 18 19 25 26 28 32 33 37 38 43 45 47 50 53 57 58 60 69 73 74 75 77 80 82 83 85\\n7 11 12 13 15 18 20 21 23 29 31 33 34 37 41 42 43 49 50 52 56 57 61 62 67 69 71 74 77 81 82 84\\n\",\n    \"33 44\\n0 1 2 3 5 9 10 11 12 13 14 15 17 18 20 21 22 23 24 25 26 27 28 30 31 32 35 36 38 39 41 42 43\\n0 2 3 4 7 8 10 11 13 14 15 16 17 18 19 21 25 26 27 28 29 30 31 33 34 36 37 38 39 40 41 42 43\\n\",\n    \"33 73\\n3 6 7 8 9 10 11 13 14 15 17 19 22 23 26 27 28 31 33 34 35 37 42 44 48 52 54 57 62 63 64 67 68\\n2 3 4 7 8 16 19 20 21 22 23 24 26 27 28 30 32 35 36 39 40 41 44 46 47 48 50 55 57 61 65 67 70\\n\",\n    \"34 52\\n1 2 3 4 5 6 8 9 10 12 13 14 15 16 17 19 21 24 26 27 28 29 31 33 35 36 37 39 40 45 46 49 50 51\\n0 1 2 3 4 6 7 8 10 11 12 13 14 15 17 19 22 24 25 26 27 29 31 33 34 35 37 38 43 44 47 48 49 51\\n\",\n    \"34 68\\n0 7 9 10 11 14 15 16 20 21 22 24 26 32 34 35 37 38 40 41 42 43 44 45 47 50 53 55 57 58 59 62 64 65\\n0 1 2 3 5 8 11 13 15 16 17 20 22 23 26 33 35 36 37 40 41 42 46 47 48 50 52 58 60 61 63 64 66 67\\n\",\n    \"35 90\\n4 5 7 8 10 11 12 13 14 22 27 29 31 33 34 38 46 49 52 53 54 55 56 57 60 61 64 69 77 81 83 86 87 88 89\\n4 7 10 11 12 13 14 15 18 19 22 27 35 39 41 44 45 46 47 52 53 55 56 58 59 60 61 62 70 75 77 79 81 82 86\\n\",\n    \"36 43\\n1 2 3 4 6 7 8 9 10 11 14 16 17 18 19 20 21 22 23 24 25 26 27 29 30 31 32 33 34 35 36 37 38 39 40 42\\n0 1 2 3 4 5 6 8 9 10 11 12 13 14 15 16 17 18 19 21 23 24 25 26 28 29 30 31 32 33 36 38 39 40 41 42\\n\",\n    \"36 84\\n1 3 6 13 15 16 17 18 19 21 23 26 29 33 38 40 42 45 49 50 53 54 57 58 60 61 64 65 67 70 73 76 78 79 81 83\\n0 2 5 8 12 17 19 21 24 28 29 32 33 36 37 39 40 43 44 46 49 52 55 57 58 60 62 64 66 69 76 78 79 80 81 82\\n\",\n    \"37 46\\n0 1 3 6 7 8 9 10 12 13 14 16 17 19 20 21 22 23 24 25 26 27 28 29 30 31 33 34 35 36 37 39 40 41 42 43 44\\n0 3 4 5 6 7 9 10 11 13 14 16 17 18 19 20 21 22 23 24 25 26 27 28 30 31 32 33 34 36 37 38 39 40 41 43 44\\n\",\n    \"37 97\\n0 5 10 11 12 15 16 18 19 25 28 29 34 35 36 37 38 40 46 47 48 49 55 58 60 61 62 64 65 70 76 77 80 82 88 94 96\\n1 7 13 15 16 21 26 27 28 31 32 34 35 41 44 45 50 51 52 53 54 56 62 63 64 65 71 74 76 77 78 80 81 86 92 93 96\\n\",\n    \"38 58\\n1 2 3 4 5 8 9 11 12 13 15 16 17 22 23 24 25 26 27 29 30 31 32 33 34 36 37 40 41 43 46 47 48 52 53 55 56 57\\n1 2 3 5 6 7 8 9 12 13 15 16 17 19 20 21 26 27 28 29 30 31 33 34 35 36 37 38 40 41 44 45 47 50 51 52 56 57\\n\",\n    \"38 92\\n1 2 3 5 6 7 12 14 15 16 17 18 20 22 29 31 33 34 38 41 43 49 54 55 57 58 61 63 66 67 69 73 75 76 82 85 88 90\\n1 3 4 10 13 16 18 21 22 23 25 26 27 32 34 35 36 37 38 40 42 49 51 53 54 58 61 63 69 74 75 77 78 81 83 86 87 89\\n\",\n    \"39 59\\n0 1 2 3 5 6 7 8 9 10 11 12 13 15 16 17 19 24 25 28 29 31 32 33 35 37 38 40 41 42 43 45 46 47 49 50 53 55 56\\n0 1 3 4 5 6 8 9 10 12 13 16 18 19 22 23 24 25 27 28 29 30 31 32 33 34 35 37 38 39 41 46 47 50 51 53 54 55 57\\n\",\n    \"39 67\\n1 3 5 7 8 16 18 20 21 23 24 25 27 28 29 31 32 34 36 38 40 43 44 46 47 48 49 50 52 53 54 55 58 59 61 62 63 64 66\\n0 1 2 4 6 8 10 12 13 21 23 25 26 28 29 30 32 33 34 36 37 39 41 43 45 48 49 51 52 53 54 55 57 58 59 60 63 64 66\\n\",\n    \"40 63\\n0 2 3 4 5 6 9 10 12 15 18 19 23 25 26 27 28 29 30 31 33 34 36 37 38 39 40 43 45 49 50 52 53 54 55 57 58 60 61 62\\n1 2 3 4 5 8 10 14 15 17 18 19 20 22 23 25 26 27 28 30 31 32 33 34 37 38 40 43 46 47 51 53 54 55 56 57 58 59 61 62\\n\",\n    \"40 96\\n5 11 12 13 14 16 17 18 19 24 30 31 32 33 37 42 46 50 53 54 55 58 60 61 64 67 68 69 70 72 75 76 77 81 84 85 89 91 92 93\\n2 7 11 15 18 19 20 23 25 26 29 32 33 34 35 37 40 41 42 46 49 50 54 56 57 58 66 72 73 74 75 77 78 79 80 85 91 92 93 94\\n\",\n    \"41 67\\n0 2 3 5 8 10 11 12 13 14 15 19 20 21 22 26 29 30 31 32 34 35 37 38 40 41 44 45 46 47 49 51 52 53 54 56 57 58 59 63 66\\n2 3 4 5 9 12 13 14 15 17 18 20 21 23 24 27 28 29 30 32 34 35 36 37 39 40 41 42 46 49 50 52 53 55 58 60 61 62 63 64 65\\n\",\n    \"41 72\\n0 3 4 6 7 8 9 12 13 14 16 21 23 24 25 26 27 29 31 32 33 34 35 38 40 41 45 47 49 50 51 52 56 57 58 59 61 62 65 66 69\\n0 1 4 5 6 8 13 15 16 17 18 19 21 23 24 25 26 27 30 32 33 37 39 41 42 43 44 48 49 50 51 53 54 57 58 61 64 67 68 70 71\\n\",\n    \"42 48\\n0 1 2 3 4 7 8 9 10 11 12 13 15 16 17 18 19 20 21 22 23 24 26 27 28 29 30 32 33 34 35 36 37 38 40 41 42 43 44 45 46 47\\n0 1 2 3 4 5 6 8 9 10 11 12 14 15 16 17 18 19 20 22 23 24 25 26 27 28 29 30 31 32 33 34 37 38 39 40 41 42 43 45 46 47\\n\",\n    \"42 81\\n0 1 3 6 7 8 11 13 17 18 19 21 22 24 29 30 31 32 34 35 38 44 46 48 49 50 51 52 53 55 59 61 62 63 65 66 67 69 70 72 77 80\\n0 1 3 4 6 11 12 13 14 16 17 20 26 28 30 31 32 33 34 35 37 41 43 44 45 47 48 49 51 52 54 59 62 63 64 66 69 70 71 74 76 80\\n\",\n    \"43 55\\n0 1 2 3 4 5 6 7 8 12 14 15 17 18 19 20 21 22 23 26 27 28 29 31 32 33 35 36 37 38 40 42 43 44 45 46 47 48 49 50 51 53 54\\n1 2 4 5 6 7 8 9 10 13 14 15 16 18 19 20 22 23 24 25 27 29 30 31 32 33 34 35 36 37 38 40 41 42 43 44 45 46 47 48 49 50 54\\n\",\n    \"43 81\\n2 3 4 5 6 7 9 10 12 13 18 19 20 21 23 26 27 29 30 32 34 38 39 43 46 47 48 50 51 52 54 55 58 62 64 67 69 70 71 72 73 75 80\\n0 3 5 6 7 8 9 11 16 19 20 21 22 23 24 26 27 29 30 35 36 37 38 40 43 44 46 47 49 51 55 56 60 63 64 65 67 68 69 71 72 75 79\\n\",\n    \"44 54\\n0 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 21 22 23 24 25 26 27 28 29 31 33 34 35 36 37 39 40 41 43 44 47 49 50 52 53\\n0 1 2 3 4 5 6 7 8 10 12 13 14 15 16 18 19 20 22 23 26 28 29 31 32 33 34 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\\n\",\n    \"44 93\\n1 5 6 7 8 10 14 17 19 21 25 26 27 30 33 34 35 36 38 41 45 48 49 51 53 55 57 60 66 67 69 70 73 76 78 79 80 81 82 83 85 87 88 90\\n0 2 4 8 9 10 13 16 17 18 19 21 24 28 31 32 34 36 38 40 43 49 50 52 53 56 59 61 62 63 64 65 66 68 70 71 73 77 81 82 83 84 86 90\\n\",\n    \"45 47\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 43 44 45 46\\n0 1 2 3 4 5 6 7 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 33 34 35 36 37 38 39 40 41 42 43 44 45 46\\n\",\n    \"45 71\\n0 2 3 7 8 11 12 13 14 15 16 17 20 21 22 23 24 26 28 30 32 37 39 41 42 43 44 45 47 48 50 52 54 55 56 57 58 59 60 61 62 64 66 68 70\\n0 1 2 3 4 7 8 9 10 11 13 15 17 19 24 26 28 29 30 31 32 34 35 37 39 41 42 43 44 45 46 47 48 49 51 53 55 57 58 60 61 65 66 69 70\\n\",\n    \"46 46\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\\n\",\n    \"46 93\\n0 1 2 6 13 16 17 18 19 21 27 29 32 34 37 38 39 40 41 44 45 49 50 52 54 56 57 61 64 65 66 67 69 71 73 75 77 78 79 83 85 87 88 90 91 92\\n0 2 4 5 7 8 9 10 11 12 16 23 26 27 28 29 31 37 39 42 44 47 48 49 50 51 54 55 59 60 62 64 66 67 71 74 75 76 77 79 81 83 85 87 88 89\\n\",\n    \"47 49\\n0 1 2 3 4 5 6 7 9 10 11 12 13 14 15 16 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\\n0 1 2 3 4 5 6 7 8 9 10 11 13 14 15 16 17 18 19 20 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\\n\",\n    \"47 94\\n0 1 3 4 5 7 8 9 14 18 19 26 30 33 34 35 37 40 42 45 46 49 50 51 52 53 55 56 60 61 62 63 64 65 66 69 71 73 75 79 84 86 87 88 90 92 93\\n1 2 3 4 6 7 8 10 11 12 17 21 22 29 33 36 37 38 40 43 45 48 49 52 53 54 55 56 58 59 63 64 65 66 67 68 69 72 74 76 78 82 87 89 90 91 93\\n\",\n    \"48 65\\n0 1 2 4 5 6 7 8 9 10 11 12 15 16 17 20 22 24 25 26 27 28 30 32 33 34 35 37 38 39 44 45 46 47 48 50 51 52 53 54 55 56 57 58 59 61 62 63\\n0 1 4 6 8 9 10 11 12 14 16 17 18 19 21 22 23 28 29 30 31 32 34 35 36 37 38 39 40 41 42 43 45 46 47 49 50 51 53 54 55 56 57 58 59 60 61 64\\n\",\n    \"48 90\\n1 3 4 5 8 9 11 13 14 15 16 18 20 21 24 26 29 30 31 33 34 36 37 38 39 40 42 43 44 46 47 48 51 52 55 58 59 61 62 63 65 66 68 78 79 81 82 89\\n0 3 4 6 8 9 10 11 13 15 16 19 21 24 25 26 28 29 31 32 33 34 35 37 38 39 41 42 43 46 47 50 53 54 56 57 58 60 61 63 73 74 76 77 84 86 88 89\\n\",\n    \"49 60\\n0 1 2 5 7 8 9 10 11 12 13 14 15 16 17 19 20 21 23 25 26 27 28 29 30 31 32 33 34 36 38 39 40 41 42 43 44 46 47 48 49 50 51 52 53 54 55 58 59\\n0 1 2 3 4 5 6 7 8 10 11 12 14 16 17 18 19 20 21 22 23 24 25 27 29 30 31 32 33 34 35 37 38 39 40 41 42 43 44 45 46 49 50 51 52 53 56 58 59\\n\",\n    \"49 97\\n0 1 2 3 6 8 11 14 19 23 26 29 32 34 35 37 39 41 43 44 45 46 51 53 63 64 65 66 67 70 71 72 73 76 77 78 79 81 83 84 86 87 90 91 92 93 94 95 96\\n0 3 4 5 6 7 8 9 10 11 12 13 16 18 21 24 29 33 36 39 42 44 45 47 49 51 53 54 55 56 61 63 73 74 75 76 77 80 81 82 83 86 87 88 89 91 93 94 96\\n\",\n    \"50 58\\n0 1 2 3 5 6 7 8 10 11 12 13 14 15 16 17 18 19 21 22 23 24 25 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 49 50 54 55 56 57\\n0 1 3 4 5 6 7 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 31 32 36 37 38 39 40 41 42 43 45 46 47 48 50 51 52 53 54 55 56 57\\n\",\n    \"50 97\\n1 2 3 4 7 9 10 11 12 13 14 21 22 23 24 25 28 29 30 31 32 33 34 36 37 40 41 45 53 56 59 64 65 69 70 71 72 73 74 77 81 84 85 86 87 89 91 92 95 96\\n0 1 2 3 6 10 13 14 15 16 18 20 21 24 25 27 28 29 30 33 35 36 37 38 39 40 47 48 49 50 51 54 55 56 57 58 59 60 62 63 66 67 71 79 82 85 90 91 95 96\\n\",\n    \"40 96\\n5 11 12 13 14 16 17 18 19 24 30 31 32 33 37 42 46 50 53 54 55 58 60 61 64 67 68 69 70 72 75 76 77 81 84 85 88 91 92 93\\n2 7 11 15 18 19 20 23 25 26 29 32 33 34 35 37 40 41 42 46 49 50 54 56 57 58 66 72 73 74 75 77 78 79 80 85 91 92 93 94\\n\",\n    \"41 67\\n0 2 3 5 8 10 11 12 13 14 15 19 20 21 22 25 29 30 31 32 34 35 37 38 40 41 44 45 46 47 49 51 52 53 54 56 57 58 59 63 66\\n2 3 4 5 9 12 13 14 15 17 18 20 21 23 24 27 28 29 30 32 34 35 36 37 39 40 41 42 46 49 50 52 53 55 58 60 61 62 63 64 65\\n\",\n    \"41 72\\n0 3 4 6 7 8 9 12 13 14 16 21 23 24 25 26 27 28 31 32 33 34 35 38 40 41 45 47 49 50 51 52 56 57 58 59 61 62 65 66 69\\n0 1 4 5 6 8 13 15 16 17 18 19 21 23 24 25 26 27 30 32 33 37 39 41 42 43 44 48 49 50 51 53 54 57 58 61 64 67 68 70 71\\n\",\n    \"42 48\\n0 1 2 3 4 7 8 9 10 11 12 13 15 16 17 18 19 20 21 22 23 24 25 27 28 29 30 32 33 34 35 36 37 38 40 41 42 43 44 45 46 47\\n0 1 2 3 4 5 6 8 9 10 11 12 14 15 16 17 18 19 20 22 23 24 25 26 27 28 29 30 31 32 33 34 37 38 39 40 41 42 43 45 46 47\\n\",\n    \"42 81\\n0 1 3 6 7 8 11 13 17 18 19 20 22 24 29 30 31 32 34 35 38 44 46 48 49 50 51 52 53 55 59 61 62 63 65 66 67 69 70 72 77 80\\n0 1 3 4 6 11 12 13 14 16 17 20 26 28 30 31 32 33 34 35 37 41 43 44 45 47 48 49 51 52 54 59 62 63 64 66 69 70 71 74 76 80\\n\",\n    \"43 55\\n0 1 2 3 4 5 6 7 8 12 14 15 17 18 19 20 21 22 23 26 27 28 29 31 32 33 34 36 37 38 40 42 43 44 45 46 47 48 49 50 51 53 54\\n1 2 4 5 6 7 8 9 10 13 14 15 16 18 19 20 22 23 24 25 27 29 30 31 32 33 34 35 36 37 38 40 41 42 43 44 45 46 47 48 49 50 54\\n\",\n    \"43 81\\n2 3 4 5 6 7 9 10 12 13 17 19 20 21 23 26 27 29 30 32 34 38 39 43 46 47 48 50 51 52 54 55 58 62 64 67 69 70 71 72 73 75 80\\n0 3 5 6 7 8 9 11 16 19 20 21 22 23 24 26 27 29 30 35 36 37 38 40 43 44 46 47 49 51 55 56 60 63 64 65 67 68 69 71 72 75 79\\n\",\n    \"44 54\\n0 1 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 21 22 23 24 25 26 27 28 29 31 33 34 35 36 37 38 40 41 43 44 47 49 50 52 53\\n0 1 2 3 4 5 6 7 8 10 12 13 14 15 16 18 19 20 22 23 26 28 29 31 32 33 34 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52\\n\",\n    \"44 93\\n1 5 6 7 8 10 14 17 19 21 25 26 27 30 33 34 35 36 38 41 45 48 49 51 53 55 57 60 66 67 69 70 73 76 78 79 80 81 82 83 84 87 88 90\\n0 2 4 8 9 10 13 16 17 18 19 21 24 28 31 32 34 36 38 40 43 49 50 52 53 56 59 61 62 63 64 65 66 68 70 71 73 77 81 82 83 84 86 90\\n\",\n    \"45 47\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 44 45 46\\n0 1 2 3 4 5 6 7 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 33 34 35 36 37 38 39 40 41 42 43 44 45 46\\n\",\n    \"45 71\\n0 2 3 7 8 11 12 13 14 15 16 17 20 21 22 23 24 26 28 30 32 37 39 40 42 43 44 45 47 48 50 52 54 55 56 57 58 59 60 61 62 64 66 68 70\\n0 1 2 3 4 7 8 9 10 11 13 15 17 19 24 26 28 29 30 31 32 34 35 37 39 41 42 43 44 45 46 47 48 49 51 53 55 57 58 60 61 65 66 69 70\\n\",\n    \"46 46\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\\n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45\\n\",\n    \"46 93\\n0 1 2 6 13 16 17 18 19 21 27 29 32 34 37 38 39 40 41 44 45 49 50 52 54 56 57 61 64 65 66 67 69 71 73 75 77 78 79 83 85 86 88 90 91 92\\n0 2 4 5 7 8 9 10 11 12 16 23 26 27 28 29 31 37 39 42 44 47 48 49 50 51 54 55 59 60 62 64 66 67 71 74 75 76 77 79 81 83 85 87 88 89\\n\",\n    \"47 49\\n0 1 2 3 4 5 6 7 9 10 11 12 13 14 15 16 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\\n0 1 2 3 4 5 6 7 8 9 10 11 13 14 15 16 17 18 19 20 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48\\n\",\n    \"47 94\\n0 1 3 4 5 7 8 9 14 18 19 26 30 33 34 35 37 40 42 44 46 49 50 51 52 53 55 56 60 61 62 63 64 65 66 69 71 73 75 79 84 86 87 88 90 92 93\\n1 2 3 4 6 7 8 10 11 12 17 21 22 29 33 36 37 38 40 43 45 48 49 52 53 54 55 56 58 59 63 64 65 66 67 68 69 72 74 76 78 82 87 89 90 91 93\\n\",\n    \"48 65\\n0 1 2 4 5 6 7 8 9 10 11 12 15 16 17 20 21 24 25 26 27 28 30 32 33 34 35 37 38 39 44 45 46 47 48 50 51 52 53 54 55 56 57 58 59 61 62 63\\n0 1 4 6 8 9 10 11 12 14 16 17 18 19 21 22 23 28 29 30 31 32 34 35 36 37 38 39 40 41 42 43 45 46 47 49 50 51 53 54 55 56 57 58 59 60 61 64\\n\",\n    \"48 90\\n1 3 4 5 8 9 11 13 14 15 16 17 20 21 24 26 29 30 31 33 34 36 37 38 39 40 42 43 44 46 47 48 51 52 55 58 59 61 62 63 65 66 68 78 79 81 82 89\\n0 3 4 6 8 9 10 11 13 15 16 19 21 24 25 26 28 29 31 32 33 34 35 37 38 39 41 42 43 46 47 50 53 54 56 57 58 60 61 63 73 74 76 77 84 86 88 89\\n\",\n    \"49 60\\n0 1 2 5 7 8 9 10 11 12 13 14 15 16 17 18 20 21 23 25 26 27 28 29 30 31 32 33 34 36 38 39 40 41 42 43 44 46 47 48 49 50 51 52 53 54 55 58 59\\n0 1 2 3 4 5 6 7 8 10 11 12 14 16 17 18 19 20 21 22 23 24 25 27 29 30 31 32 33 34 35 37 38 39 40 41 42 43 44 45 46 49 50 51 52 53 56 58 59\\n\",\n    \"49 97\\n0 1 2 3 5 8 11 14 19 23 26 29 32 34 35 37 39 41 43 44 45 46 51 53 63 64 65 66 67 70 71 72 73 76 77 78 79 81 83 84 86 87 90 91 92 93 94 95 96\\n0 3 4 5 6 7 8 9 10 11 12 13 16 18 21 24 29 33 36 39 42 44 45 47 49 51 53 54 55 56 61 63 73 74 75 76 77 80 81 82 83 86 87 88 89 91 93 94 96\\n\",\n    \"50 58\\n0 1 2 3 5 6 7 8 10 11 12 13 14 15 16 17 18 19 21 22 23 24 25 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 50 54 55 56 57\\n0 1 3 4 5 6 7 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 31 32 36 37 38 39 40 41 42 43 45 46 47 48 50 51 52 53 54 55 56 57\\n\",\n    \"5 10\\n0 1 3 5 7\\n0 1 2 4 7\\n\",\n    \"5 8\\n0 2 4 6 7\\n0 2 3 5 7\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/761/B",
  "starter_code": ""
}