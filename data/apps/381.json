{
  "task_id": "APPS/381",
  "problem_id": 381,
  "prompt": "An undirected graph is called k-regular, if the degrees of all its vertices are equal k. An edge of a connected graph is called a bridge, if after removing it the graph is being split into two connected components.\n\nBuild a connected undirected k-regular graph containing at least one bridge, or else state that such graph doesn't exist.\n\n\n-----Input-----\n\nThe single line of the input contains integer k (1 \u2264 k \u2264 100) \u2014 the required degree of the vertices of the regular graph.\n\n\n-----Output-----\n\nPrint \"NO\" (without quotes), if such graph doesn't exist. \n\nOtherwise, print \"YES\" in the first line and the description of any suitable graph in the next lines.\n\nThe description of the made graph must start with numbers n and m \u2014 the number of vertices and edges respectively. \n\nEach of the next m lines must contain two integers, a and b (1 \u2264 a, b \u2264 n, a \u2260 b), that mean that there is an edge connecting the vertices a and b. A graph shouldn't contain multiple edges and edges that lead from a vertex to itself. A graph must be connected, the degrees of all vertices of the graph must be equal k. At least one edge of the graph must be a bridge. You can print the edges of the graph in any order. You can print the ends of each edge in any order.\n\nThe constructed graph must contain at most 10^6 vertices and 10^6 edges (it is guaranteed that if at least one graph that meets the requirements exists, then there also exists the graph with at most 10^6 vertices and at most 10^6 edges). \n\n\n-----Examples-----\nInput\n1\n\nOutput\nYES\n2 1\n1 2\n\n\n\n-----Note-----\n\nIn the sample from the statement there is a suitable graph consisting of two vertices, connected by a single edge.",
  "solutions": "[\"import math,string,itertools,fractions,heapq,collections,re,array,bisect\\nfrom itertools import chain, dropwhile, permutations, combinations\\nfrom collections import defaultdict, deque\\n\\ndef VI(): return list(map(int,input().split()))\\n\\ndef main1(k):\\n    # works correctly, but too slow and generates many more vertices than necessary.\\n    # doesn't pass the time constraint with this implementation. (prints 10^5 lines)\\n    # ==> use the editorial solution below.\\n    if k%2==0:\\n        print(\\\"NO\\\")\\n        return\\n    print(\\\"YES\\\")\\n    n = 2*(k**2-k+1)\\n    m = n*k//2\\n    print(n, m)\\n    i = 0\\n    g = [[] for i in range(n+1)]\\n    print(1,n//2+1)\\n    off = 1\\n    for j in range(0,k-1,2):\\n        j1 = off + j+1\\n        j2 = off + j+2\\n        print(off,j1)\\n        print(off,j2)\\n        l1 = off + k + j*(k-1)\\n        l2 = off + k + (j+1)*(k-1)\\n        for l in range(k-1):\\n            print(j1, l1+l)\\n            print(j2, l2+l)\\n            for m in range(k-1):\\n                print(l1+l,l2+m)\\n    off = n//2+1\\n    for j in range(0,k-1,2):\\n        j1 = off + j+1\\n        j2 = off + j+2\\n        print(off,j1)\\n        print(off,j2)\\n        l1 = off + k + j*(k-1)\\n        l2 = off + k + (j+1)*(k-1)\\n        for l in range(k-1):\\n            print(j1, l1+l)\\n            print(j2, l2+l)\\n            for m in range(k-1):\\n                print(l1+l,l2+m)\\n\\ndef main(k):\\n    # following the editorial algo\\n    if k%2==0:\\n        print(\\\"NO\\\")\\n        return\\n    print(\\\"YES\\\")\\n    if k==1:\\n        print(\\\"2 1\\\")\\n        print(\\\"1 2\\\")\\n        return\\n    n = 2*k+4\\n    m = n*k//2\\n    e = []\\n    e.extend([(1,n//2+1)])\\n    off = 1\\n    for j in range(off+1,off+k):\\n        e.extend([(off, j)])\\n    for j in range(off+1,off+k):\\n        for i in range(j+1,off+k):\\n            if (i==j+1 and (j-off)%2==1):# or (j==off+1 and i==off+k-1):\\n            #if (i==j+1 and i%2==0) or (j==off+1 and i==off+k-1):\\n                continue\\n            e.extend([(j,i)])\\n        e.extend([(j,off+k),(j,off+k+1)])\\n    e.extend([(off+k,off+k+1)])\\n    off = n//2+1\\n    for j in range(off+1,off+k):\\n        e.extend([(off, j)])\\n    for j in range(off+1,off+k):\\n        for i in range(j+1,off+k):\\n            if (i==j+1 and (j-off)%2==1):# or (j==off+1 and i==off+k-1):\\n                continue\\n            e.extend([(j,i)])\\n        e.extend([(j,off+k),(j,off+k+1)])\\n    e.extend([(off+k,off+k+1)])\\n    print(n, m)\\n    for x in e:\\n        print(*x)\\n\\n\\n\\ndef main_input(info=0):\\n    k = int(input())\\n    main(k)\\n\\ndef __starting_point():\\n    main_input()\\n\\n__starting_point()\"]",
  "input_output": "{\"inputs\": [\"1\\n\", \"3\\n\", \"10\\n\", \"2\\n\", \"4\\n\", \"5\\n\", \"6\\n\", \"7\\n\", \"8\\n\", \"12\\n\", \"14\\n\", \"16\\n\", \"18\\n\", \"20\\n\", \"22\\n\", \"24\\n\", \"26\\n\", \"28\\n\", \"30\\n\", \"32\\n\", \"34\\n\", \"36\\n\", \"38\\n\", \"40\\n\", \"42\\n\", \"44\\n\", \"46\\n\", \"48\\n\", \"50\\n\", \"52\\n\", \"54\\n\", \"56\\n\", \"58\\n\", \"60\\n\", \"62\\n\", \"64\\n\", \"66\\n\", \"68\\n\", \"70\\n\", \"72\\n\", \"74\\n\", \"76\\n\", \"78\\n\", \"80\\n\", \"82\\n\", \"84\\n\", \"86\\n\", \"88\\n\", \"90\\n\", \"92\\n\", \"94\\n\", \"96\\n\", \"98\\n\", \"100\\n\"], \"outputs\": [\"YES\\n2 1\\n1 2\\n\", \"YES\\n10 15\\n1 6\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n4 5\\n6 7\\n6 8\\n7 9\\n7 10\\n8 9\\n8 10\\n9 10\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"YES\\n14 35\\n1 8\\n1 2\\n1 3\\n1 4\\n1 5\\n2 6\\n2 7\\n2 4\\n2 5\\n3 6\\n3 7\\n3 4\\n3 5\\n4 6\\n4 7\\n5 6\\n5 7\\n6 7\\n8 9\\n8 10\\n8 11\\n8 12\\n9 13\\n9 14\\n9 11\\n9 12\\n10 13\\n10 14\\n10 11\\n10 12\\n11 13\\n11 14\\n12 13\\n12 14\\n13 14\\n\", \"NO\\n\", \"YES\\n18 63\\n1 10\\n1 2\\n1 3\\n1 4\\n1 5\\n1 6\\n1 7\\n2 8\\n2 9\\n2 4\\n2 5\\n2 6\\n2 7\\n3 8\\n3 9\\n3 4\\n3 5\\n3 6\\n3 7\\n4 8\\n4 9\\n4 6\\n4 7\\n5 8\\n5 9\\n5 6\\n5 7\\n6 8\\n6 9\\n7 8\\n7 9\\n8 9\\n10 11\\n10 12\\n10 13\\n10 14\\n10 15\\n10 16\\n11 17\\n11 18\\n11 13\\n11 14\\n11 15\\n11 16\\n12 17\\n12 18\\n12 13\\n12 14\\n12 15\\n12 16\\n13 17\\n13 18\\n13 15\\n13 16\\n14 17\\n14 18\\n14 15\\n14 16\\n15 17\\n15 18\\n16 17\\n16 18\\n17 18\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\", \"NO\\n\"]}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/550/D",
  "starter_code": ""
}