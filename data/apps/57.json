{
  "task_id": "APPS/57",
  "problem_id": 57,
  "prompt": "After making bad dives into swimming pools, Wilbur wants to build a swimming pool in the shape of a rectangle in his backyard. He has set up coordinate axes, and he wants the sides of the rectangle to be parallel to them. Of course, the area of the rectangle must be positive. Wilbur had all four vertices of the planned pool written on a paper, until his friend came along and erased some of the vertices.\n\nNow Wilbur is wondering, if the remaining n vertices of the initial rectangle give enough information to restore the area of the planned swimming pool.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 4)\u00a0\u2014 the number of vertices that were not erased by Wilbur's friend.\n\nEach of the following n lines contains two integers x_{i} and y_{i} ( - 1000 \u2264 x_{i}, y_{i} \u2264 1000)\u00a0\u2014the coordinates of the i-th vertex that remains. Vertices are given in an arbitrary order.\n\nIt's guaranteed that these points are distinct vertices of some rectangle, that has positive area and which sides are parallel to the coordinate axes.\n\n\n-----Output-----\n\nPrint the area of the initial rectangle if it could be uniquely determined by the points remaining. Otherwise, print  - 1. \n\n\n-----Examples-----\nInput\n2\n0 0\n1 1\n\nOutput\n1\n\nInput\n1\n1 1\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first sample, two opposite corners of the initial rectangle are given, and that gives enough information to say that the rectangle is actually a unit square.\n\nIn the second sample there is only one vertex left and this is definitely not enough to uniquely define the area.",
  "solutions": "[\"n = int(input())\\npoints = [[int(x) for x in input().split()] for _ in range(n)]\\nif n <= 1:\\n\\tprint(-1)\\n\\treturn\\ndx = [1e9, -1e9]\\ndy = [1e9, -1e9]\\nfor x, y in points:\\n\\tdx[0] = min(dx[0], x)\\n\\tdx[1] = max(dx[1], x)\\n\\tdy[0] = min(dy[0], y)\\n\\tdy[1] = max(dy[1], y)\\narea = (dx[1] - dx[0]) * (dy[1] - dy[0])\\nif area:\\n\\tprint(area)\\nelse:\\n\\tprint(-1)\\n\", \"n = int(input())\\n\\nX = []\\nY = []\\nfor i in range(n):\\n    x, y = list(map(int, input().split()))\\n    X.append(x)\\n    Y.append(y)\\n\\ndx = max(X) - min(X)\\ndy = max(Y) - min(Y)\\n\\nans = dx * dy\\nif (ans > 0):\\n    print(ans)\\nelse:\\n    print(-1)\\n\\n\", \"#!/usr/bin/env python3\\n\\nimport itertools\\n\\ndef main():\\n    n = int(input())\\n    a = [ ]\\n    for i in range(n):\\n        a.append(tuple(map(int, input().split())))\\n    for a, b in itertools.combinations(a, 2):\\n        if a[0] != b[0] and a[1] != b[1]:\\n            print(abs((a[0] - b[0]) * (a[1] - b[1])))\\n            break\\n    else:\\n        print(-1)\\n\\ntry:\\n    while True:\\n        main()\\nexcept EOFError:\\n    pass\\n\", \"n = int(input())\\na = []\\nfor i in range(n):\\n\\ta.append(tuple(map(int, input().split())))\\n\\nx1, y1, x2, y2 = float('inf'), float('inf'), float('inf'), float('inf')\\nfor i in a:\\n\\tif x1 == float('inf'):\\n\\t\\tx1 = i[0]\\n\\telif x2 == float('inf') and x1 != i[0]:\\n\\t\\tx2 = i[0]\\n\\t\\n\\tif y1 == float('inf'):\\n\\t\\ty1 = i[1]\\n\\telif y2 == float('inf') and y1 != i[1]:\\n\\t\\ty2 = i[1]\\n\\nif y2 == float('inf') or x2 == float('inf'):\\n\\tprint('-1')\\nelse:\\n\\tprint(abs(x1 - x2) * abs(y1 - y2))\\n\", \"n = int(input())\\na = [[int(i) for i in input().split()] for j in range(n)]\\nfor i in range(n):\\n    for j in range(i + 1, n):\\n        if a[i][0] != a[j][0] and a[i][1] != a[j][1]:\\n            print(abs(a[i][0] - a[j][0]) * abs(a[i][1] - a[j][1]))\\n            return\\nprint(-1)\", \"n = int(input())\\nxs = set()\\nys = set()\\nfor i in range(n):\\n    x, y = map(int, input().split())\\n    xs.add(x)\\n    ys.add(y)\\nif len(xs) == 2 and len(ys) == 2:\\n    x1, x2 = xs\\n    y1, y2 = ys\\n    print(abs((x1 - x2)*(y1 - y2)))\\nelse:\\n    print(-1)\", \"n = int(input())\\nxset = set()\\nyset = set()\\nfor i in range(n):\\n    x, y = list(map(int, input().split()))\\n    xset.add(x)\\n    yset.add(y)\\nif len(xset) == 2 and len(yset) == 2:\\n    xset = list(xset)\\n    yset = list(yset)\\n    print(abs(xset[0] - xset[1]) * abs(yset[0] - yset[1]))\\nelse:\\n    print(-1)\\n\", \"n = int(input())\\n\\nif n == 1 or n == 0:\\n    print(-1)\\nelif n == 2:\\n    x1, y1 = [int(x) for x in input().split()]\\n    x2, y2 = [int(x) for x in input().split()]\\n    \\n    if x1 == x2 or y1 == y2:\\n        print(-1)\\n    else:\\n        print(abs((x1 - x2) * (y1 - y2)))\\nelif n == 3:\\n    x1, y1 = [int(x) for x in input().split()]\\n    x2, y2 = [int(x) for x in input().split()]\\n    x3, y3 = [int(x) for x in input().split()]\\n    \\n    print(abs((max(x1, max(x2, x3)) -  min(x1, min(x2, x3))) * (max(y1, max(y2, y3)) -  min(y1, min(y2, y3)))))\\nelse:\\n    x1, y1 = [int(x) for x in input().split()]\\n    x2, y2 = [int(x) for x in input().split()]\\n    x3, y3 = [int(x) for x in input().split()]\\n    x4, y4 = [int(x) for x in input().split()]\\n    \\n    print(abs((max(x1, max(x2, x3)) -  min(x1, min(x2, x3))) * (max(y1, max(y2, y3)) -  min(y1, min(y2, y3)))))\", \"3\\n\\nn = int(input())\\narr = [tuple(map(int, input().split())) for i in range(n)]\\narr.sort()\\n\\nmna = 1791\\nmxa = -1791\\nmnb = 1791\\nmxb = -1791\\nfor i in range(n):\\n    mna = min(mna, arr[i][0])\\n    mnb = min(mnb, arr[i][1])\\n    mxa = max(mxa, arr[i][0])\\n    mxb = max(mxb, arr[i][1])\\n\\nif mna == mxa or mnb == mxb:\\n    print(-1)\\nelse:\\n    print((mxa - mna) * (mxb - mnb))\\n\", \"def main():\\n\\tn = int(input())\\n\\n\\tX = []\\n\\tY = []\\n\\n\\tfor _ in range(n):\\n\\t\\tx, y = list(map(int, input().split()))\\n\\t\\tX.append(x)\\n\\t\\tY.append(y)\\n\\n\\tif n == 1:\\n\\t\\treturn -1\\n\\n\\txleft = min(X)\\n\\txright = max(X)\\n\\tybot = min(Y)\\n\\tytop = max(Y)\\n\\n\\tif xleft != xright and ybot != ytop:\\n\\t\\treturn (ytop-ybot) * (xright-xleft)\\n\\telse:\\n\\t\\treturn -1\\n\\nprint(main())\\n\", \"n = int(input())\\na = [tuple(map(int, input().split())) for i in range(n)]\\n\\nxmin = 100000\\nxmax = -100000\\nymin = 100000\\nymax = -100000\\n\\nfor b in a:\\n    xmin = min(xmin, b[0])\\n    xmax = max(xmax, b[0])\\n    ymin = min(ymin, b[1])\\n    ymax = max(ymax, b[1])\\n\\nr = (xmax-xmin) * (ymax-ymin)\\nif r == 0:\\n    print(-1)\\nelse:\\n    print(r)\\n\", \"n = int(input())\\nv = []\\nfor i in range(n):\\n    v.append(list(map(int, input().split())))\\n\\nans = False\\nfor xi, yi in v:\\n    if ans:\\n        break\\n\\n    for xj, yj in v:\\n        if xi != xj and yi != yj:\\n            print(abs(xi - xj) * abs(yi - yj))\\n            ans = True\\n            break\\n\\nif not ans:\\n    print(-1)\\n\", \"n = int(input())\\nlst = []\\nfor i in range(n):\\n    a, b = list(map(int, input().split()))\\n    lst.append([a, b])\\nif n == 1:\\n    print(-1)\\nelif n == 2 and lst[0][0] != lst[1][0] and lst[0][1] != lst[1][1]:\\n    print(abs(lst[0][0] - lst[1][0]) * abs(lst[0][1] - lst[1][1]))\\nelif n == 2:\\n    print(-1)\\n    \\nelif n == 3 or n == 4:\\n    if lst[0][0] != lst[1][0] and lst[0][1] != lst[1][1]:\\n        print(abs(lst[0][0] - lst[1][0]) * abs(lst[0][1] - lst[1][1]))\\n    elif lst[1][0] != lst[2][0] and lst[1][1] != lst[2][1]:\\n        print(abs(lst[1][0] - lst[2][0]) * abs(lst[1][1] - lst[2][1]))\\n    else:\\n        print(abs(lst[0][0] - lst[2][0]) * abs(lst[0][1] - lst[2][1]))\\n            \\n\\n    \\n    \\n\", \"\\\"\\\"\\\"\\nCodeforces Round #331 (Div. 2)\\n\\nProblem 596 A\\n\\n@author yamaton\\n@date 2015-11-15\\n\\\"\\\"\\\"\\n\\nimport itertools as it\\nimport functools\\nimport operator\\nimport collections\\nimport math\\nimport sys\\n\\n\\ndef solve(pairs, n):\\n    if n <= 1:\\n        return -1\\n    elif n == 2:\\n        (a, b) = pairs[0]\\n        (c, d) = pairs[1]\\n        if a == c or b == d:\\n            return -1\\n        else:\\n            return abs(a-c) * abs(b-d)\\n    elif n >= 3:\\n        xmin = min(x for (x, _) in pairs)\\n        xmax = max(x for (x, _) in pairs)\\n        ymin = min(y for (_, y) in pairs)\\n        ymax = max(y for (_, y) in pairs)\\n        return (xmax - xmin) * (ymax - ymin)\\n\\n\\n# def p(*args, **kwargs):\\n#     return print(*args, file=sys.stderr, **kwargs)\\n\\n\\ndef main():\\n    n = int(input())\\n    pairs = [tuple(int(_c) for _c in input().strip().split()) for _ in range(n)]\\n    assert len(pairs[0]) == 2\\n\\n    result = solve(pairs, n)\\n    print(result)\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"n = int(input())\\na = {}\\nb = {}\\nfor i in range(n):\\n    t1, t2 = map(int, input().split())\\n    a[t1] = t1\\n    b[t2] = t2\\nif (len(a) < 2 or len(b) < 2):\\n    print(-1)\\nelse:\\n    r1 = 0\\n    flag = 0\\n    for i in a:\\n        if (flag == 1):\\n            r1 -= i\\n        else:\\n            r1 += i\\n            flag = 1\\n    r2 = 0\\n    flag = 0\\n    for i in b:\\n        if (flag == 1):\\n            r2 -= i\\n        else:\\n            r2 += i\\n            flag = 1\\n    r = r1 * r2\\n    if (r < 0):\\n        r *= -1\\n    print(r)\", \"n = int(input())\\nif n == 1:\\n    print(-1)\\nelif n == 2:\\n    x1, y1 = list(map(int, input().split()))\\n    x2, y2 = list(map(int, input().split()))\\n    if x1 != x2 and y1 != y2:\\n        print(abs(x1 - x2) * abs(y1 - y2))\\n    else:\\n        print(-1)\\nelif n == 3:\\n    x1, y1 = list(map(int, input().split()))\\n    x2, y2 = list(map(int, input().split()))    \\n    x3, y3 = list(map(int, input().split()))\\n    if x1 != x2 and y1 != y2:\\n        print(abs(x1 - x2) * abs(y1 - y2))    \\n    elif x1 != x3 and y1 != y3:\\n        print(abs(x1 - x3) * abs(y1 - y3))\\n    else:\\n        print(abs(x2 - x3) * abs(y2 - y3))\\nelse:\\n    x1, y1 = list(map(int, input().split()))\\n    x2, y2 = list(map(int, input().split()))    \\n    x3, y3 = list(map(int, input().split()))\\n    x4, y4 = list(map(int, input().split()))\\n    if x1 != x2 and y1 != y2:\\n        print(abs(x1 - x2) * abs(y1 - y2))    \\n    elif x1 != x3 and y1 != y3:\\n        print(abs(x1 - x3) * abs(y1 - y3))\\n    else:\\n        print(abs(x2 - x3) * abs(y2 - y3))    \\n   \\n\", \"n = int(input())\\np = [0] * n\\nfor i in range(n):\\n    p[i] = tuple(map(int, input().split()))\\n    \\nif n == 4:\\n    for i in range(1, 4):\\n        if p[0][0] != p[i][0] and p[0][1] != p[i][1]:\\n            res = abs(p[0][0] - p[i][0]) * abs(p[0][1] - p[i][1])\\nelif n == 3:\\n    for i in range(1, 3):\\n        if p[0][0] != p[i][0] and p[0][1] != p[i][1]:\\n            res = abs(p[0][0] - p[i][0]) * abs(p[0][1] - p[i][1])\\n    for i in [0, 2]:\\n            if p[1][0] != p[i][0] and p[1][1] != p[i][1]:\\n                res = abs(p[1][0] - p[i][0]) * abs(p[1][1] - p[i][1])\\nelif n == 2:\\n    if p[0][0] != p[1][0] and p[0][1] != p[1][1]:\\n        res = abs(p[0][0] - p[1][0]) * abs(p[0][1] - p[1][1])\\n    else: res = -1\\n\\nelse:\\n    res = -1\\n    \\nprint(res)\", \"n = int(input())\\nx, y = [], []\\nfor i in range(n):\\n    _x, _y = list(map(int, input().split()))\\n    x.append(_x)\\n    y.append(_y)\\nx = sorted(set(x))\\ny = sorted(set(y))\\nif len(x) == 2 and len(y) == 2:\\n    print((x[1] - x[0]) * (y[1] - y[0]))\\nelse:\\n    print(-1)\\n\", \"#!/usr/bin/env python3\\n# -*- coding: utf-8 -*-\\n\\nimport time\\n\\n#   = input()\\nn   = int(input())\\nx   = []\\ny   = []\\n\\nfor i in range(n):\\n    (X, Y) = (int(i) for i in input().split())\\n    x.append(X)\\n    y.append(Y)\\n\\nstart = time.time()\\n\\nx = list(set(x))\\ny = list(set(y))\\n\\nif len(x) < 2 or len(y) <2:\\n    print(-1)\\nelse:\\n    ans = (x[1] - x[0])*(y[1] - y[0])\\n    if ans < 0:\\n        ans = -ans\\n    print(ans)\\n\\nfinish = time.time()\\n#print(finish - start)\\n\", \"def solve():\\n    N = int(input())\\n    X = [0] * N\\n    Y = [0] * N\\n\\n    for i in range(N):\\n        X[i], Y[i] = list(map(int, input().split()))\\n\\n    xs = list(set(X))\\n    ys = list(set(Y))\\n\\n    if len(xs) == 1 or len(ys) == 1:\\n        print(-1)\\n        return\\n\\n    print(abs(xs[1] - xs[0]) * abs(ys[1] - ys[0]))\\n\\n\\ndef __starting_point():\\n    solve()\\n\\n__starting_point()\", \"n = int(input())\\nif (n == 1):\\n    print(-1)\\nelif (n == 2):\\n    x1, y1 = list(map(int, input().split()))\\n    x2, y2 = list(map(int, input().split()))\\n    if (x1 == x2) or (y1 == y2):\\n        print(-1)\\n    else:\\n        print(abs(x2 - x1) * abs(y2 - y1))\\nelse:\\n    x1, y1 = list(map(int, input().split()))\\n    x2, y2 = list(map(int, input().split()))\\n    x3, y3 = list(map(int, input().split()))\\n    if (x1 == x2) or (y1 == y2):\\n        if (x1 == x3) or (y1 == y3):\\n            print(abs(x3 - x2) * abs(y3 - y2))\\n        else:\\n            print(abs(x3 - x1) * abs(y3 - y1))\\n    else:\\n        print(abs(x2 - x1) * abs(y2 - y1))\\n\", \"#!/usr/bin/env python3\\ndef f(a, b):\\n    return abs((a[0] - b[0]) * (a[1] - b[1]))\\nn = int(input())\\nx = [list(map(int,input().split())) for i in range(n)]\\ny = 0\\nfor i in range(n):\\n    for j in range(i+1, n):\\n        if not y:\\n            y = f(x[i], x[j])\\nprint(y or -1)\\n\", \"n = int(input())\\na = []\\nS = 0\\n\\nfor i in range(n):\\n   a.append(tuple(map(int, input().split())))\\nfor i in range(n):\\n   for j in range(n):\\n      S = max(S, abs((a[i][0] - a[j][0])*(a[i][1] - a[j][1])))\\n\\nif S == 0:\\n   print(-1)\\nelse:\\n   print(S)\\n   \\n\", \"n=int(input())\\nx=[]\\ny=[]\\nwhile n>0:\\n    n-=1\\n    s=input()\\n    a=[int(i) for i in s.split(' ')]\\n    x.append(a[0])\\n    y.append(a[1])\\nkx,ky,xx,yy=0,0,-2000,-2000\\ndx,dy=0,0\\nfor i in x:\\n    if xx!=i and kx<2:\\n        kx+=1\\n        if xx!=-2000:\\n            dx=abs(xx-i)\\n        xx=i\\nfor i in y:\\n    if yy!=i and ky<2:\\n        ky+=1\\n        if yy!=-2000:\\n            dy=abs(yy-i)\\n        yy=i\\nif kx==2 and ky==2:\\n    SS=dx*dy\\n    print(SS)\\nelse:\\n    print(-1)\"]",
  "input_output": "{\n  \"inputs\": [\n    \"2\\n0 0\\n1 1\\n\",\n    \"1\\n1 1\\n\",\n    \"1\\n-188 17\\n\",\n    \"1\\n71 -740\\n\",\n    \"4\\n-56 -858\\n-56 -174\\n778 -858\\n778 -174\\n\",\n    \"2\\n14 153\\n566 -13\\n\",\n    \"2\\n-559 894\\n314 127\\n\",\n    \"1\\n-227 -825\\n\",\n    \"2\\n-187 583\\n25 13\\n\",\n    \"2\\n-337 451\\n32 -395\\n\",\n    \"4\\n-64 -509\\n-64 960\\n634 -509\\n634 960\\n\",\n    \"2\\n-922 -505\\n712 -683\\n\",\n    \"2\\n-1000 -1000\\n-1000 0\\n\",\n    \"2\\n-1000 -1000\\n0 -1000\\n\",\n    \"4\\n-414 -891\\n-414 896\\n346 -891\\n346 896\\n\",\n    \"2\\n56 31\\n704 -121\\n\",\n    \"4\\n-152 198\\n-152 366\\n458 198\\n458 366\\n\",\n    \"3\\n-890 778\\n-418 296\\n-890 296\\n\",\n    \"4\\n852 -184\\n852 724\\n970 -184\\n970 724\\n\",\n    \"1\\n858 -279\\n\",\n    \"2\\n-823 358\\n446 358\\n\",\n    \"2\\n-739 -724\\n-739 443\\n\",\n    \"2\\n686 664\\n686 -590\\n\",\n    \"3\\n-679 301\\n240 -23\\n-679 -23\\n\",\n    \"2\\n-259 -978\\n978 -978\\n\",\n    \"1\\n627 -250\\n\",\n    \"3\\n-281 598\\n679 -990\\n-281 -990\\n\",\n    \"2\\n-414 -431\\n-377 -688\\n\",\n    \"3\\n-406 566\\n428 426\\n-406 426\\n\",\n    \"3\\n-686 695\\n-547 308\\n-686 308\\n\",\n    \"1\\n-164 -730\\n\",\n    \"2\\n980 -230\\n980 592\\n\",\n    \"4\\n-925 306\\n-925 602\\n398 306\\n398 602\\n\",\n    \"3\\n576 -659\\n917 -739\\n576 -739\\n\",\n    \"1\\n720 -200\\n\",\n    \"4\\n-796 -330\\n-796 758\\n171 -330\\n171 758\\n\",\n    \"2\\n541 611\\n-26 611\\n\",\n    \"3\\n-487 838\\n134 691\\n-487 691\\n\",\n    \"2\\n-862 -181\\n-525 -181\\n\",\n    \"1\\n-717 916\\n\",\n    \"1\\n-841 -121\\n\",\n    \"4\\n259 153\\n259 999\\n266 153\\n266 999\\n\",\n    \"2\\n295 710\\n295 254\\n\",\n    \"4\\n137 -184\\n137 700\\n712 -184\\n712 700\\n\",\n    \"2\\n157 994\\n377 136\\n\",\n    \"1\\n193 304\\n\",\n    \"4\\n5 -952\\n5 292\\n553 -952\\n553 292\\n\",\n    \"2\\n-748 697\\n671 575\\n\",\n    \"2\\n-457 82\\n260 -662\\n\",\n    \"2\\n-761 907\\n967 907\\n\",\n    \"3\\n-639 51\\n-321 -539\\n-639 -539\\n\",\n    \"2\\n-480 51\\n89 -763\\n\",\n    \"4\\n459 -440\\n459 -94\\n872 -440\\n872 -94\\n\",\n    \"2\\n380 -849\\n68 -849\\n\",\n    \"2\\n-257 715\\n102 715\\n\",\n    \"2\\n247 -457\\n434 -921\\n\",\n    \"4\\n-474 -894\\n-474 -833\\n-446 -894\\n-446 -833\\n\",\n    \"3\\n-318 831\\n450 31\\n-318 31\\n\",\n    \"3\\n-282 584\\n696 488\\n-282 488\\n\",\n    \"3\\n258 937\\n395 856\\n258 856\\n\",\n    \"1\\n-271 -499\\n\",\n    \"2\\n-612 208\\n326 -559\\n\",\n    \"2\\n115 730\\n562 -546\\n\",\n    \"2\\n-386 95\\n-386 750\\n\",\n    \"3\\n0 0\\n0 1\\n1 0\\n\",\n    \"3\\n0 4\\n3 4\\n3 1\\n\",\n    \"3\\n1 1\\n1 2\\n2 1\\n\",\n    \"3\\n1 4\\n4 4\\n4 1\\n\",\n    \"3\\n1 1\\n2 1\\n1 2\\n\",\n    \"3\\n0 0\\n1 0\\n1 1\\n\",\n    \"3\\n0 0\\n0 5\\n5 0\\n\",\n    \"3\\n0 0\\n0 1\\n1 1\\n\",\n    \"4\\n0 0\\n1 0\\n1 1\\n0 1\\n\",\n    \"3\\n4 4\\n1 4\\n4 1\\n\",\n    \"3\\n0 0\\n2 0\\n2 1\\n\",\n    \"3\\n0 0\\n2 0\\n0 2\\n\",\n    \"3\\n0 0\\n0 1\\n5 0\\n\",\n    \"3\\n1 1\\n1 3\\n3 1\\n\",\n    \"4\\n0 0\\n1 0\\n0 1\\n1 1\\n\",\n    \"2\\n1 0\\n2 1\\n\",\n    \"3\\n0 0\\n1 0\\n0 1\\n\",\n    \"3\\n1 0\\n0 0\\n0 1\\n\",\n    \"3\\n0 0\\n0 5\\n5 5\\n\",\n    \"3\\n1 0\\n5 0\\n5 10\\n\",\n    \"3\\n0 0\\n1 0\\n1 2\\n\",\n    \"4\\n0 1\\n0 0\\n1 0\\n1 1\\n\",\n    \"3\\n0 0\\n2 0\\n0 1\\n\",\n    \"3\\n-2 -1\\n-1 -1\\n-1 -2\\n\",\n    \"2\\n1 0\\n0 1\\n\",\n    \"4\\n1 1\\n3 3\\n3 1\\n1 3\\n\",\n    \"3\\n2 1\\n1 2\\n2 2\\n\",\n    \"3\\n0 0\\n0 3\\n3 0\\n\",\n    \"2\\n0 3\\n3 3\\n\",\n    \"4\\n2 0\\n2 8\\n5 8\\n5 0\\n\",\n    \"2\\n0 999\\n100 250\\n\",\n    \"3\\n1 1\\n1 5\\n5 1\\n\",\n    \"3\\n0 1\\n0 0\\n1 1\\n\",\n    \"3\\n0 0\\n10 0\\n0 10\\n\",\n    \"2\\n0 0\\n-1 -1\\n\",\n    \"3\\n1 5\\n2 2\\n2 5\\n\",\n    \"3\\n0 0\\n0 1\\n2 0\\n\",\n    \"3\\n0 1\\n1 0\\n0 0\\n\",\n    \"3\\n0 0\\n0 -1\\n1 -1\\n\",\n    \"3\\n0 1\\n1 0\\n1 1\\n\",\n    \"3\\n3 5\\n3 2\\n7 2\\n\",\n    \"3\\n1 2\\n1 3\\n2 2\\n\",\n    \"3\\n5 0\\n0 0\\n0 5\\n\",\n    \"3\\n1 0\\n1 3\\n5 0\\n\",\n    \"3\\n0 0\\n0 2\\n2 0\\n\",\n    \"3\\n1 1\\n0 0\\n1 0\\n\",\n    \"3\\n1 2\\n1 3\\n2 3\\n\",\n    \"4\\n0 0\\n0 1\\n1 1\\n1 0\\n\",\n    \"2\\n-3 0\\n3 3\\n\",\n    \"3\\n1 1\\n0 1\\n1 0\\n\",\n    \"3\\n0 0\\n5 0\\n5 5\\n\",\n    \"3\\n79 79\\n79 158\\n158 79\\n\",\n    \"3\\n1 0\\n1 -1\\n0 0\\n\",\n    \"3\\n1 1\\n1 2\\n2 2\\n\",\n    \"3\\n0 1\\n0 0\\n1 0\\n\",\n    \"3\\n2 1\\n2 4\\n6 1\\n\",\n    \"3\\n5 0\\n0 0\\n5 5\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"570456\\n\",\n    \"91632\\n\",\n    \"669591\\n\",\n    \"-1\\n\",\n    \"120840\\n\",\n    \"312174\\n\",\n    \"1025362\\n\",\n    \"290852\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1358120\\n\",\n    \"98496\\n\",\n    \"102480\\n\",\n    \"227504\\n\",\n    \"107144\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"297756\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"1524480\\n\",\n    \"9509\\n\",\n    \"116760\\n\",\n    \"53793\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"391608\\n\",\n    \"27280\\n\",\n    \"-1\\n\",\n    \"1052096\\n\",\n    \"-1\\n\",\n    \"91287\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"5922\\n\",\n    \"-1\\n\",\n    \"508300\\n\",\n    \"188760\\n\",\n    \"-1\\n\",\n    \"681712\\n\",\n    \"173118\\n\",\n    \"533448\\n\",\n    \"-1\\n\",\n    \"187620\\n\",\n    \"463166\\n\",\n    \"142898\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"86768\\n\",\n    \"1708\\n\",\n    \"614400\\n\",\n    \"93888\\n\",\n    \"11097\\n\",\n    \"-1\\n\",\n    \"719446\\n\",\n    \"570372\\n\",\n    \"-1\\n\",\n    \"1\\n\",\n    \"9\\n\",\n    \"1\\n\",\n    \"9\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"25\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"9\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"25\\n\",\n    \"40\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"9\\n\",\n    \"-1\\n\",\n    \"24\\n\",\n    \"74900\\n\",\n    \"16\\n\",\n    \"1\\n\",\n    \"100\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"12\\n\",\n    \"1\\n\",\n    \"25\\n\",\n    \"12\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"18\\n\",\n    \"1\\n\",\n    \"25\\n\",\n    \"6241\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"12\\n\",\n    \"25\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/596/A",
  "starter_code": ""
}