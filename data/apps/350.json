{
  "task_id": "APPS/350",
  "problem_id": 350,
  "prompt": "You are given an alphabet consisting of n letters, your task is to make a string of the maximum possible length so that the following conditions are satisfied:   the i-th letter occurs in the string no more than a_{i} times;  the number of occurrences of each letter in the string must be distinct for all the letters that occurred in the string at least once. \n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (2  \u2264  n  \u2264  26)\u00a0\u2014 the number of letters in the alphabet.\n\nThe next line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 i-th of these integers gives the limitation on the number of occurrences of the i-th character in the string.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the maximum length of the string that meets all the requirements.\n\n\n-----Examples-----\nInput\n3\n2 5 5\n\nOutput\n11\n\nInput\n3\n1 1 2\n\nOutput\n3\n\n\n\n-----Note-----\n\nFor convenience let's consider an alphabet consisting of three letters: \"a\", \"b\", \"c\". In the first sample, some of the optimal strings are: \"cccaabbccbb\", \"aabcbcbcbcb\". In the second sample some of the optimal strings are: \"acc\", \"cbc\".",
  "solutions": "[\"n = int(input())\\narr = list(map(int, input().split()))\\narr.sort()\\narr = arr[::-1]\\nans = [arr[0]]\\nfor i in range(1, n):\\n\\tif(arr[i] < ans[-1]):\\n\\t\\tans.append(arr[i])\\n\\telse:\\n\\t\\tans.append(max(0, ans[-1] - 1))\\nprint(sum(ans))\", \"n = int(input())\\na = list(map(int, input().split()))\\na.sort()\\nfor i in range(n - 2, -1, -1):\\n    a[i] = max(min(a[i], a[i + 1] - 1), 0)\\nprint(sum(a))\\n\", \"n = int(input())\\nc = list(map(int, input().split()))\\nret = set()\\nfor x in c:\\n    for y in range(x, -1, -1):\\n        if y not in ret:\\n            ret.add(y)\\n            break\\nprint(sum(ret))\\n\", \"n = [int(s) for s in input().split()]\\na = [int(s) for s in input().split()]\\nx = set()\\nres = 0\\nfor i in reversed(sorted(a)):\\n    while i>0:\\n        if i in x:\\n            i-=1\\n        else:\\n            res+=i\\n            x.add(i)\\n            break\\nprint(res)\\n\", \"n, a, s, v = int(input()), sorted(map(int, input().split()), reverse=True), set(), 0\\nfor ai in a:\\n    while ai and ai in s:\\n        ai -= 1\\n    s.add(ai)\\n    v += ai\\nprint(v)\", \"N = int(input())\\nletters = list(map(int, input().split()))\\nletters.sort()\\nlennow = 0\\nfor i in range(len(letters) - 2, -1, -1):\\n    letters[i] = max(0, min(letters[i + 1] - 1, letters[i]))\\nprint(sum(letters))\", \"n = int(input())\\nrng = [int(t) for t in input().split()]\\n\\nans = 0\\nwhile len(rng) != 0:\\n    mx = max(rng)\\n\\n    if mx <= 0:\\n        break\\n\\n    ans += mx\\n\\n    rng.remove(mx)\\n    for i in range(len(rng)):\\n        if rng[i] == mx:\\n            rng[i] -= 1\\n\\nprint(ans)\", \"n=int(input())\\nip=list(map(int,input().split()))\\nop=[]\\ncount=0\\nfor i in ip:\\n    if i not in op:\\n        count+=i\\n        op.append(i)\\n    else:\\n        for j in range(1,i+1):\\n            if i-j not in op:\\n                count+=i-j\\n                op.append(i-j)\\n                break\\n            else:\\n                continue\\nprint(count)\\n\", \"n=int(input())\\nL=[int(x) for x in input().split()]\\nL.sort()\\nL=L[::-1]\\nans=0\\ndis=L[0]+1\\nfor i in L:\\n    ans+=max(0,min(dis,i))\\n    dis=min(dis,i)-1\\nprint(ans)\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nl.sort(reverse = True)\\ncheck = set()\\nans = 0\\nfor i in l:\\n    x = i\\n    while x in check:\\n        x -= 1\\n    if x < 0:\\n        continue\\n    ans += x\\n    check.add(x)\\nprint(ans)\", \"n = input()\\na_in = list(map(int, input().split()))\\na = list(reversed(sorted(a_in)))\\nprev = 1000000001\\nans = 0\\nfor c in a:\\n    if c >= prev:\\n        c = prev - 1\\n    if c <= 0:\\n        break\\n    ans += c\\n    prev = c\\nprint(ans)\\n\", \"n = int(input())\\ndata = list(map(int, input().split()))\\nanswer = 0\\nfor i in range(n):\\n    if data.count(data[i]) == 1:\\n        answer += data[i]\\n    else:\\n        while data[i] > 0:\\n            if data.count(data[i]) == 1:\\n                answer += data[i]\\n                break\\n            else:\\n                data[i] -= 1\\nprint(answer)\", \"n = int(input())\\na = [int(s) for s in input().split()]\\n\\na.sort()\\nb = 10**9 + 1\\nsum = 0\\nfor i in range(n-1, -1, -1):\\n    if min(a[i], b - 1) < 1:\\n        break\\n    sum += min(a[i], b - 1)\\n    b = min(a[i], b - 1)\\n\\nprint(sum)\\n\", \"3\\n\\nn = int(input())\\na = list(map(int, input().split()))\\n\\nused = set()\\nreversed(sorted(a))\\ni = 0\\nwhile i < n:\\n    if a[i] == 0:\\n        i += 1\\n    else:\\n        if a[i] not in used:\\n            used.add(a[i])\\n            i += 1\\n        else:\\n            a[i] -= 1\\nprint(str(sum(a)))\\n\", \"n = int(input())\\nai = list(map(int,input().split()))\\nai.sort()\\nai.reverse()\\nlast_num = ai[0]+1\\nans = 0\\nfor num in ai:\\n    if last_num == 0:\\n        break\\n    if num >= last_num:\\n        last_num -= 1\\n    else:\\n        last_num = num\\n    ans += last_num\\nprint(ans)\\n\", \"n = int(input())\\nl = list(map(int, input().split()))\\nl = sorted(l)[-1::-1]\\n\\n\\nfor i in range(1, n):\\n\\tif l[i] >= l[i-1]:\\n\\t\\tl[i] = l[i-1] - 1\\n\\tif l[i] < 0:\\n\\t\\tl[i] = 0\\nprint(sum(l))  \\n\\n\", \"n = int(input())\\ndata = list(map(int, input().split()))\\ndata.sort()\\nhigh = data[-1]\\nret = 0\\nfor i in range(n-1, -1, -1):\\n\\tchosen = min(data[i], high)\\n\\tret += max(chosen, 0)\\n\\thigh = chosen-1\\nprint(ret)\\n\", \"n = int(input())\\na = [int(x) for x in input().split()]\\n\\nocc = set()\\na.sort(reverse=True)\\nfor i in range(len(a)):\\n    while a[i] in occ and a[i] > 0:\\n        a[i] -= 1\\n    occ.add(a[i])\\n\\nprint(sum(a))\\n\", \"n = int(input())\\nA = list(map(int, input().split()))\\nans = []\\nfor i in range(n):\\n    if A[i] in ans:\\n        for j in range(A[i] - 1, 0, -1):\\n            if j not in ans:\\n                ans.append(j)\\n                break\\n    else:\\n        ans.append(A[i])\\nprint(sum(ans))        \\n\", \"#!/usr/bin/env python3\\n\\nn = int(input())\\na = [int(x) for x in input().split()]\\na = sorted(a, reverse=True)\\ncount = 0\\nprev = None\\nfor x in a:\\n  if prev != None and prev <= x:\\n    x = max(prev - 1, 0)\\n  count += x\\n  prev = x\\nprint(count)\\n\\n\", \"def adjust(x,limit):\\n    if x == 0:\\n        return 0\\n\\n    if x <= limit:\\n        return x-1\\n\\n    return limit\\n\\ndef __starting_point():\\n\\n    n = int(input())\\n    a = list(map(int,input().split()))\\n    a.sort(key=lambda x:-x)\\n    #print(a)\\n\\n    for i in range(1,n):\\n        a[i] = adjust(a[i-1],a[i])\\n\\n    print( sum(a) )\\n__starting_point()\", \"n=int(input())\\narr=[int(x) for x in input().split()]\\narr=sorted(arr)\\narr.reverse()\\ns=set()\\nsum=0\\nflag=0\\nfor i in range(n):\\n    temp=arr[i]\\n    while temp in s:\\n        temp=temp-1\\n        if temp==0:\\n            flag=1\\n            break\\n    sum+=temp\\n    s.add(temp)\\n    if flag==1:\\n        break\\nprint(sum)\", \"n = int(input())\\nd = [int(i) for i in input().split()]\\nd = sorted(d, reverse=True)\\nfor i in range(1, len(d)):\\n    d[i] = max(0, min(d[i - 1] - 1, d[i]))\\nprint(sum(d))\", \"n = int(input())\\ns=input()\\ns=s.split()\\na=[]\\nfor i in range(n):\\n    a.append(int(s[i]))\\nsu=0\\nd={}\\na.sort(reverse=True)\\nfor i in range(len(a)):\\n    if a[i] not in d:\\n        su+=a[i]\\n        d[a[i]]=1\\n    else:\\n        t=a[i]-1\\n        while t>=1 and t in d:\\n            t-=1\\n        su+=t\\n        d[t]=1\\n        \\nprint(su)\\n        \\n\"]",
  "input_output": "{\n  \"inputs\": [\n    \"3\\n2 5 5\\n\",\n    \"3\\n1 1 2\\n\",\n    \"2\\n1 1\\n\",\n    \"3\\n1 1000000000 2\\n\",\n    \"26\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\\n\",\n    \"2\\n559476582 796461544\\n\",\n    \"2\\n257775227 621811272\\n\",\n    \"10\\n876938317 219479349 703839299 977218449 116819315 752405530 393874852 286326991 592978634 155758306\\n\",\n    \"26\\n72 49 87 47 94 96 36 91 43 11 19 83 36 38 10 93 95 81 4 96 60 38 97 37 36 41\\n\",\n    \"26\\n243 364 768 766 633 535 502 424 502 283 592 877 137 891 837 990 681 898 831 487 595 604 747 856 805 688\\n\",\n    \"26\\n775 517 406 364 548 951 680 984 466 141 960 513 660 849 152 250 176 601 199 370 971 554 141 224 724 543\\n\",\n    \"26\\n475 344 706 807 925 813 974 166 578 226 624 591 419 894 574 909 544 597 170 990 893 785 399 172 792 748\\n\",\n    \"26\\n130 396 985 226 487 671 188 706 106 649 38 525 210 133 298 418 953 431 577 69 12 982 264 373 283 266\\n\",\n    \"26\\n605 641 814 935 936 547 524 702 133 674 173 102 318 620 248 523 77 718 318 635 322 362 306 86 8 442\\n\",\n    \"26\\n220 675 725 888 725 654 546 806 379 182 604 667 734 394 889 731 572 193 850 651 844 734 163 671 820 887\\n\",\n    \"26\\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000 1000\\n\",\n    \"26\\n1001 1001 1000 1000 1001 1000 1001 1001 1001 1000 1000 1001 1001 1000 1000 1000 1000 1001 1000 1001 1001 1000 1001 1001 1001 1000\\n\",\n    \"26\\n1000 1001 1000 1001 1000 1001 1001 1000 1001 1002 1002 1000 1001 1000 1000 1000 1001 1002 1001 1000 1000 1001 1000 1002 1001 1002\\n\",\n    \"26\\n1003 1002 1002 1003 1000 1000 1000 1003 1000 1001 1003 1003 1000 1002 1002 1002 1001 1003 1000 1001 1000 1001 1001 1000 1003 1003\\n\",\n    \"26\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\\n\",\n    \"26\\n8717 9417 1409 7205 3625 6247 8626 9486 464 4271 1698 8449 4551 1528 7456 9198 4886 2889 7534 506 7867 9410 1635 4955 2580 2580\\n\",\n    \"26\\n197464663 125058028 622449215 11119637 587496049 703992162 219591040 965159268 229879004 278894000 841629744 616893922 218779915 362575332 844188865 342411376 369680019 43823059 921419789 999588082 943769007 35365522 301907919 758302419 427454397 807507709\\n\",\n    \"26\\n907247856 970380443 957324066 929910532 947150618 944189007 998282297 988343406 981298600 943026596 953932265 972691398 950024048 923033790 996423650 972134755 946404759 918183059 902987271 965507679 906967700 982106487 933997242 972594441 977736332 928874832\\n\",\n    \"26\\n999999061 999999688 999999587 999999429 999999110 999999563 999999120 999999111 999999794 999999890 999999004 999999448 999999770 999999543 999999460 999999034 999999361 999999305 999999201 999999778 999999432 999999844 999999133 999999342 999999600 999999319\\n\",\n    \"3\\n587951561 282383259 612352726\\n\",\n    \"4\\n111637338 992238139 787658714 974622806\\n\",\n    \"5\\n694257603 528073418 726928894 596328666 652863391\\n\",\n    \"6\\n217943380 532900593 902234882 513005821 369342573 495810412\\n\",\n    \"7\\n446656860 478792281 77541870 429682977 85821755 826122363 563802405\\n\",\n    \"8\\n29278125 778590752 252847858 51388836 802299938 215370803 901540149 242074772\\n\",\n    \"9\\n552962902 724482439 133182550 673093696 518779120 604618242 534250189 847695567 403066553\\n\",\n    \"10\\n600386086 862479376 284190454 781950823 672077209 5753052 145701234 680334621 497013634 35429365\\n\",\n    \"11\\n183007351 103343359 164525146 698627979 388556391 926007595 483438978 580927711 659384363 201890880 920750904\\n\",\n    \"12\\n706692128 108170535 339831134 320333838 810063277 20284739 821176722 481520801 467848308 604388203 881959821 874133307\\n\",\n    \"13\\n525349200 54062222 810108418 237010994 821513756 409532178 158915465 87142595 630219037 770849718 843168738 617993222 504443485\\n\",\n    \"14\\n812998169 353860693 690443110 153688149 537992938 798779618 791624505 282706982 733654279 468319337 568341847 597888944 649703235 667623671\\n\",\n    \"15\\n336683946 299752380 865749098 775393009 959499824 893055762 365399057 419335880 896025008 575845364 529550764 341748859 30999793 464432689 19445239\\n\",\n    \"16\\n860368723 540615364 41056086 692070164 970950302 282304201 998108096 24957674 999460249 37279175 490759681 26673285 412295352 671298115 627182888 90740349\\n\",\n    \"17\\n148018692 545442539 980325266 313776023 687429485 376580345 40875544 925549764 161831978 144805202 451968598 475560904 262583806 468107133 60900936 281546097 912565045\\n\",\n    \"18\\n966674765 786305522 860659958 935480883 108937371 60800080 673584584 826142855 560238516 606238013 413177515 455456626 643879364 969943855 963609881 177380550 544192822 864797474\\n\",\n    \"19\\n490360541 496161402 330938242 852158038 120387849 686083328 247359135 431764649 427637949 8736336 843378328 435352349 494167818 766752874 161292122 368186298 470791896 813444279 170758124\\n\",\n    \"20\\n654616375 542649443 729213190 188364665 238384327 726353863 974350390 526804424 601329631 886592063 734805196 275562411 861801362 374466292 119830901 403120565 670982545 63210795 130397643 601611646\\n\",\n    \"21\\n942265343 252505322 904519178 810069524 954862509 115602302 548124942 132426218 999736168 584061682 696014113 960485837 712089816 581331718 317512142 593926314 302610323 716885305 477125514 813997503 535631456\\n\",\n    \"22\\n465951120 788339601 784853870 726746679 376370396 504849742 180834982 33019308 867135601 455551901 657223030 940381560 93386374 378140736 161286599 548696254 934237100 75589518 764917898 731412064 205669368 630662937\\n\",\n    \"23\\n989635897 498195481 255132154 643423835 387820874 894097181 223601429 228583694 265543138 153021520 618431947 684241474 943673829 174949754 358967839 444530707 801900686 965299835 347682577 648826625 406714384 129525158 958578251\\n\",\n    \"24\\n277285866 739058464 135466846 265129694 104300056 519381429 856310469 834204489 132942572 260547547 343605057 664137197 619941683 676786476 497713592 635336455 138557168 618975345 635474960 861212482 76752297 923357675 517046816 274123722\\n\",\n    \"25\\n95942939 979921447 310772834 181806850 525806942 613657573 194049213 734797579 531349109 721980358 304813974 113025815 470230137 473595494 695394833 590106396 770183946 567622150 218239639 778627043 41761505 127248600 134450869 860350034 901937574\\n\",\n    \"26\\n619627716 984748623 486078822 98484005 537257421 2906012 62795060 635390669 103777246 829506385 971050595 92921538 851525695 680460920 893076074 780912144 401811723 221297659 269996214 991012900 242806521 626109821 987889730 682613155 209557740 806895799\\n\",\n    \"26\\n10 1 20 2 23 3 14 6 7 13 26 21 11 8 16 25 12 15 19 9 17 22 24 18 5 4\\n\",\n    \"3\\n1 1 1\\n\",\n    \"5\\n5 3 3 3 1\\n\",\n    \"5\\n2 2 2 2 2\\n\",\n    \"10\\n10 10 10 10 10 10 10 10 1 1\\n\",\n    \"10\\n100 100 10 10 10 10 10 1 1 1\\n\",\n    \"6\\n5 3 3 3 3 1\\n\",\n    \"4\\n4 3 2 1\\n\",\n    \"5\\n1 1 1 1 1\\n\"\n  ],\n  \"outputs\": [\n    \"11\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"1000000003\\n\",\n    \"25999999675\\n\",\n    \"1355938126\\n\",\n    \"879586499\\n\",\n    \"5075639042\\n\",\n    \"1478\\n\",\n    \"16535\\n\",\n    \"13718\\n\",\n    \"16115\\n\",\n    \"10376\\n\",\n    \"11768\\n\",\n    \"16202\\n\",\n    \"25675\\n\",\n    \"25701\\n\",\n    \"25727\\n\",\n    \"25753\\n\",\n    \"1\\n\",\n    \"137188\\n\",\n    \"12776400142\\n\",\n    \"24770753129\\n\",\n    \"25999984927\\n\",\n    \"1482687546\\n\",\n    \"2866156997\\n\",\n    \"3198451972\\n\",\n    \"3031237661\\n\",\n    \"2908420511\\n\",\n    \"3273391233\\n\",\n    \"4992131258\\n\",\n    \"4565315854\\n\",\n    \"5310460657\\n\",\n    \"6436402813\\n\",\n    \"6470309028\\n\",\n    \"8107625477\\n\",\n    \"7772916672\\n\",\n    \"7766119704\\n\",\n    \"7237867357\\n\",\n    \"11417500634\\n\",\n    \"8615711557\\n\",\n    \"10304447727\\n\",\n    \"12951783229\\n\",\n    \"11305256638\\n\",\n    \"12022378269\\n\",\n    \"11607648357\\n\",\n    \"11937672853\\n\",\n    \"14070510187\\n\",\n    \"351\\n\",\n    \"1\\n\",\n    \"11\\n\",\n    \"3\\n\",\n    \"53\\n\",\n    \"240\\n\",\n    \"11\\n\",\n    \"10\\n\",\n    \"1\\n\"\n  ]\n}",
  "difficulty": "interview",
  "url": "https://codeforces.com/problemset/problem/624/B",
  "starter_code": ""
}