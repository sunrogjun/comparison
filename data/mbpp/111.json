{
  "task_id": "MBPP/122",
  "prompt": "Write a function to find n\u2019th smart number.",
  "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ",
  "test_list": [
    "assert smartNumber(1) == 30",
    "assert smartNumber(50) == 273",
    "assert smartNumber(1000) == 2664"
  ],
  "challenge_test_list": [],
  "problem_id": 111
}