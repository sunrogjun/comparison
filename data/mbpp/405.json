{
  "task_id": "MBPP/416",
  "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
  "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]",
  "test_list": [
    "assert breakSum(12) == 13",
    "assert breakSum(24) == 27",
    "assert breakSum(23) == 23"
  ],
  "challenge_test_list": [],
  "problem_id": 405
}