{
  "task_id": "MBPP/67",
  "prompt": "Write a function to find the number of ways to partition a set of bell numbers.",
  "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ",
  "test_list": [
    "assert bell_number(2)==2",
    "assert bell_number(10)==115975",
    "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
  ],
  "challenge_test_list": [],
  "problem_id": 56
}