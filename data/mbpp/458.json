{
  "task_id": "MBPP/469",
  "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
  "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]",
  "test_list": [
    "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
    "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
    "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
  ],
  "challenge_test_list": [],
  "problem_id": 458
}