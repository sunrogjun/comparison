{
  "task_id": "MBPP/39",
  "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
  "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")",
  "test_list": [
    "assert rearange_string(\"aab\")==('aba')",
    "assert rearange_string(\"aabb\")==('abab')",
    "assert rearange_string(\"abccdd\")==('cdabcd')"
  ],
  "challenge_test_list": [],
  "problem_id": 28
}