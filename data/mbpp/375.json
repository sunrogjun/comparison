{
  "task_id": "MBPP/386",
  "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
  "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap",
  "test_list": [
    "assert swap_count(\"[]][][\") == 2",
    "assert swap_count(\"[[][]]\") == 0",
    "assert swap_count(\"[[][]]][\") == 1"
  ],
  "challenge_test_list": [],
  "problem_id": 375
}