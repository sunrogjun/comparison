{
  "task_id": "MBPP/223",
  "prompt": "Write a function to check for majority element in the given sorted array.",
  "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1",
  "test_list": [
    "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
    "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
    "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
  ],
  "challenge_test_list": [],
  "problem_id": 212
}