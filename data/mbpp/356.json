{
  "task_id": "MBPP/367",
  "prompt": "Write a function to check if a binary tree is balanced or not.",
  "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False",
  "test_list": [
    "assert is_tree_balanced(root) == False",
    "assert is_tree_balanced(root1) == True",
    "assert is_tree_balanced(root2) == False "
  ],
  "challenge_test_list": [],
  "problem_id": 356
}