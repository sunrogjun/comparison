{
  "task_id": "MBPP/148",
  "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
  "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ",
  "test_list": [
    "assert sum_digits_twoparts(35)==17",
    "assert sum_digits_twoparts(7)==7",
    "assert sum_digits_twoparts(100)==19"
  ],
  "challenge_test_list": [],
  "problem_id": 137
}